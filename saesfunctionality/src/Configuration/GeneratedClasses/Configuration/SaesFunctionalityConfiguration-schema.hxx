// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SaesFunctionalityConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SAES_FUNCTIONALITY_CONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SAES_FUNCTIONALITY_CONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
   * schema namespace.
   */
  namespace ConfigurationTypes
  {
    // anyType and anySimpleType.
    //

    /**
     * @brief C++ type corresponding to the anyType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::type Type;

    /**
     * @brief C++ type corresponding to the anySimpleType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

    /**
     * @brief Alias for the anyType type.
     */
    typedef ::xsd::cxx::tree::type Container;


    // 8-bit
    //

    /**
     * @brief C++ type corresponding to the byte XML Schema
     * built-in type.
     */
    typedef signed char Byte;

    /**
     * @brief C++ type corresponding to the unsignedByte XML Schema
     * built-in type.
     */
    typedef unsigned char UnsignedByte;


    // 16-bit
    //

    /**
     * @brief C++ type corresponding to the short XML Schema
     * built-in type.
     */
    typedef short Short;

    /**
     * @brief C++ type corresponding to the unsignedShort XML Schema
     * built-in type.
     */
    typedef unsigned short UnsignedShort;


    // 32-bit
    //

    /**
     * @brief C++ type corresponding to the int XML Schema
     * built-in type.
     */
    typedef int Int;

    /**
     * @brief C++ type corresponding to the unsignedInt XML Schema
     * built-in type.
     */
    typedef unsigned int UnsignedInt;


    // 64-bit
    //

    /**
     * @brief C++ type corresponding to the long XML Schema
     * built-in type.
     */
    typedef long long Long;

    /**
     * @brief C++ type corresponding to the unsignedLong XML Schema
     * built-in type.
     */
    typedef unsigned long long UnsignedLong;


    // Supposed to be arbitrary-length integral types.
    //

    /**
     * @brief C++ type corresponding to the integer XML Schema
     * built-in type.
     */
    typedef long long Integer;

    /**
     * @brief C++ type corresponding to the nonPositiveInteger XML Schema
     * built-in type.
     */
    typedef long long NonPositiveInteger;

    /**
     * @brief C++ type corresponding to the nonNegativeInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long NonNegativeInteger;

    /**
     * @brief C++ type corresponding to the positiveInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long PositiveInteger;

    /**
     * @brief C++ type corresponding to the negativeInteger XML Schema
     * built-in type.
     */
    typedef long long NegativeInteger;


    // Boolean.
    //

    /**
     * @brief C++ type corresponding to the boolean XML Schema
     * built-in type.
     */
    typedef bool Boolean;


    // Floating-point types.
    //

    /**
     * @brief C++ type corresponding to the float XML Schema
     * built-in type.
     */
    typedef float Float;

    /**
     * @brief C++ type corresponding to the double XML Schema
     * built-in type.
     */
    typedef double Double;

    /**
     * @brief C++ type corresponding to the decimal XML Schema
     * built-in type.
     */
    typedef double Decimal;


    // String types.
    //

    /**
     * @brief C++ type corresponding to the string XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::string< char, SimpleType > String;

    /**
     * @brief C++ type corresponding to the normalizedString XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

    /**
     * @brief C++ type corresponding to the token XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

    /**
     * @brief C++ type corresponding to the Name XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::name< char, Token > Name;

    /**
     * @brief C++ type corresponding to the NMTOKEN XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

    /**
     * @brief C++ type corresponding to the NMTOKENS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

    /**
     * @brief C++ type corresponding to the NCName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

    /**
     * @brief C++ type corresponding to the language XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::language< char, Token > Language;


    // ID/IDREF.
    //

    /**
     * @brief C++ type corresponding to the ID XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::id< char, Ncname > Id;

    /**
     * @brief C++ type corresponding to the IDREF XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

    /**
     * @brief C++ type corresponding to the IDREFS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


    // URI.
    //

    /**
     * @brief C++ type corresponding to the anyURI XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


    // Qualified name.
    //

    /**
     * @brief C++ type corresponding to the QName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


    // Binary.
    //

    /**
     * @brief Binary buffer type.
     */
    typedef ::xsd::cxx::tree::buffer< char > Buffer;

    /**
     * @brief C++ type corresponding to the base64Binary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

    /**
     * @brief C++ type corresponding to the hexBinary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


    // Date/time.
    //

    /**
     * @brief Time zone type.
     */
    typedef ::xsd::cxx::tree::time_zone TimeZone;

    /**
     * @brief C++ type corresponding to the date XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

    /**
     * @brief C++ type corresponding to the dateTime XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

    /**
     * @brief C++ type corresponding to the duration XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

    /**
     * @brief C++ type corresponding to the gDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

    /**
     * @brief C++ type corresponding to the gMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

    /**
     * @brief C++ type corresponding to the gMonthDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

    /**
     * @brief C++ type corresponding to the gYear XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

    /**
     * @brief C++ type corresponding to the gYearMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

    /**
     * @brief C++ type corresponding to the time XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


    // Entity.
    //

    /**
     * @brief C++ type corresponding to the ENTITY XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

    /**
     * @brief C++ type corresponding to the ENTITIES XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


    // Namespace information and list stream. Used in
    // serialization functions.
    //
    /**
     * @brief Namespace serialization information.
     */
    typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

    /**
     * @brief Namespace serialization information map.
     */
    typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

    /**
     * @brief List serialization stream.
     */
    typedef ::xsd::cxx::tree::list_stream< char > ListStream;

    /**
     * @brief Serialization wrapper for the %double type.
     */
    typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

    /**
     * @brief Serialization wrapper for the %decimal type.
     */
    typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

    /**
     * @brief Simple type facet.
     */
    typedef ::xsd::cxx::tree::facet Facet;

    // Flags and properties.
    //

    /**
     * @brief Parsing and serialization flags.
     */
    typedef ::xsd::cxx::tree::flags Flags;

    /**
     * @brief Parsing properties.
     */
    typedef ::xsd::cxx::tree::properties< char > Properties;

    // Parsing/serialization diagnostics.
    //

    /**
     * @brief Error severity.
     */
    typedef ::xsd::cxx::tree::severity Severity;

    /**
     * @brief Error condition.
     */
    typedef ::xsd::cxx::tree::error< char > Error;

    /**
     * @brief List of %error conditions.
     */
    typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

    // Exceptions.
    //

    /**
     * @brief Root of the C++/Tree %exception hierarchy.
     */
    typedef ::xsd::cxx::tree::exception< char > Exception;

    /**
     * @brief Exception indicating that the size argument exceeds
     * the capacity argument.
     */
    typedef ::xsd::cxx::tree::bounds< char > Bounds;

    /**
     * @brief Exception indicating that a duplicate ID value
     * was encountered in the object model.
     */
    typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

    /**
     * @brief Exception indicating a parsing failure.
     */
    typedef ::xsd::cxx::tree::parsing< char > Parsing;

    /**
     * @brief Exception indicating that an expected element
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

    /**
     * @brief Exception indicating that an unexpected element
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

    /**
     * @brief Exception indicating that an expected attribute
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

    /**
     * @brief Exception indicating that an unexpected enumerator
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

    /**
     * @brief Exception indicating that the text content was
     * expected for an element.
     */
    typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

    /**
     * @brief Exception indicating that a prefix-namespace
     * mapping was not provided.
     */
    typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

    /**
     * @brief Exception indicating a serialization failure.
     */
    typedef ::xsd::cxx::tree::serialization< char > Serialization;

    /**
     * @brief Error handler callback interface.
     */
    typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

    /**
     * @brief DOM interaction.
     */
    namespace dom
    {
      /**
       * @brief Automatic pointer for DOMDocument.
       */
      using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
      /**
       * @brief DOM user data key for back pointers to tree nodes.
       */
      const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        class SaesFunctionalityConfiguration;
        class AlarmCategoryEnum;
        class AlarmBehaviorEnum;
        class AlarmEnum;
        class AlarmCommandEnum;
        class AlarmCommand;
        class VotingExperienceControllerConfiguration;
        class VotingExperienceControllerOperationType;
        class VotingExperienceControllerValidateCardDataType;
        class VoteConfiguration;
        class BlankVoteConfiguration;
        class BlankVoteType;
        class BlankVoteListContestCodeType;
        class SystemRoleConfiguration;
        class VMachineInitiatorConfiguration;
        class PMachineInitiatorConfiguration;
        class SystemRoleType;
        class OperationConfiguration;
        class EnqueueVoteConfiguration;
        class CardTypeController;
        class PVFormTransformationConfig;
        class PVFormTransformationType;
        class StructureInstallationType;
        class RuleTransformation;
        class LaunchConfiguration;
        class AlarmsConfiguration;
        class Role;
        class AppType;
        class Alarm;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/SaesFunctionalityConfiguration
       * schema namespace.
       */
      namespace Configuration
      {
        /**
         * @brief Class corresponding to the %SaesFunctionalityConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SaesFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name VotingExperienceController
           *
           * @brief Accessor and modifier functions for the %VotingExperienceController
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerConfiguration VotingExperienceControllerType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingExperienceControllerType, char > VotingExperienceControllerTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotingExperienceControllerType&
          getVotingExperienceController () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotingExperienceControllerType&
          getVotingExperienceController ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotingExperienceController (const VotingExperienceControllerType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingExperienceController (::std::auto_ptr< VotingExperienceControllerType > p);

          //@}

          /**
           * @name Vote
           *
           * @brief Accessor and modifier functions for the %Vote
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::VoteConfiguration VoteType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VoteType, char > VoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VoteType&
          getVote () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VoteType&
          getVote ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVote (const VoteType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVote (::std::auto_ptr< VoteType > p);

          //@}

          /**
           * @name BlankVote
           *
           * @brief Accessor and modifier functions for the %BlankVote
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::BlankVoteConfiguration BlankVoteType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BlankVoteType, char > BlankVoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BlankVoteType&
          getBlankVote () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BlankVoteType&
          getBlankVote ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBlankVote (const BlankVoteType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBlankVote (::std::auto_ptr< BlankVoteType > p);

          //@}

          /**
           * @name VMachineInitiator
           *
           * @brief Accessor and modifier functions for the %VMachineInitiator
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::VMachineInitiatorConfiguration VMachineInitiatorType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VMachineInitiatorType, char > VMachineInitiatorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VMachineInitiatorType&
          getVMachineInitiator () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VMachineInitiatorType&
          getVMachineInitiator ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVMachineInitiator (const VMachineInitiatorType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVMachineInitiator (::std::auto_ptr< VMachineInitiatorType > p);

          //@}

          /**
           * @name PMachineInitiator
           *
           * @brief Accessor and modifier functions for the %PMachineInitiator
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::PMachineInitiatorConfiguration PMachineInitiatorType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PMachineInitiatorType, char > PMachineInitiatorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PMachineInitiatorType&
          getPMachineInitiator () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PMachineInitiatorType&
          getPMachineInitiator ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPMachineInitiator (const PMachineInitiatorType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPMachineInitiator (::std::auto_ptr< PMachineInitiatorType > p);

          //@}

          /**
           * @name CardTypeController
           *
           * @brief Accessor and modifier functions for the %CardTypeController
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::CardTypeController CardTypeControllerType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardTypeControllerType, char > CardTypeControllerTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardTypeControllerType&
          getCardTypeController () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardTypeControllerType&
          getCardTypeController ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCardTypeController (const CardTypeControllerType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCardTypeController (::std::auto_ptr< CardTypeControllerType > p);

          //@}

          /**
           * @name PVFormTransformation
           *
           * @brief Accessor and modifier functions for the %PVFormTransformation
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::PVFormTransformationConfig PVFormTransformationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PVFormTransformationType, char > PVFormTransformationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PVFormTransformationType&
          getPVFormTransformation () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PVFormTransformationType&
          getPVFormTransformation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPVFormTransformation (const PVFormTransformationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPVFormTransformation (::std::auto_ptr< PVFormTransformationType > p);

          //@}

          /**
           * @name StructureInstallation
           *
           * @brief Accessor and modifier functions for the %StructureInstallation
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::StructureInstallationType StructureInstallationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StructureInstallationType, char > StructureInstallationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StructureInstallationType&
          getStructureInstallation () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StructureInstallationType&
          getStructureInstallation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStructureInstallation (const StructureInstallationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setStructureInstallation (::std::auto_ptr< StructureInstallationType > p);

          //@}

          /**
           * @name EnqueueVoteConfiguration
           *
           * @brief Accessor and modifier functions for the %EnqueueVoteConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::EnqueueVoteConfiguration EnqueueVoteConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EnqueueVoteConfigurationType, char > EnqueueVoteConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EnqueueVoteConfigurationType&
          getEnqueueVoteConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EnqueueVoteConfigurationType&
          getEnqueueVoteConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setEnqueueVoteConfiguration (const EnqueueVoteConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setEnqueueVoteConfiguration (::std::auto_ptr< EnqueueVoteConfigurationType > p);

          //@}

          /**
           * @name SystemRole
           *
           * @brief Accessor and modifier functions for the %SystemRole
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::SystemRoleConfiguration SystemRoleType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SystemRoleType, char > SystemRoleTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SystemRoleType&
          getSystemRole () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SystemRoleType&
          getSystemRole ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSystemRole (const SystemRoleType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSystemRole (::std::auto_ptr< SystemRoleType > p);

          //@}

          /**
           * @name LaunchConfiguration
           *
           * @brief Accessor and modifier functions for the %LaunchConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::LaunchConfiguration LaunchConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LaunchConfigurationType, char > LaunchConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LaunchConfigurationType&
          getLaunchConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LaunchConfigurationType&
          getLaunchConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLaunchConfiguration (const LaunchConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLaunchConfiguration (::std::auto_ptr< LaunchConfigurationType > p);

          //@}

          /**
           * @name AlarmsConfiguration
           *
           * @brief Accessor and modifier functions for the %AlarmsConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AlarmsConfiguration AlarmsConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlarmsConfigurationType, char > AlarmsConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AlarmsConfigurationType&
          getAlarmsConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AlarmsConfigurationType&
          getAlarmsConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAlarmsConfiguration (const AlarmsConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAlarmsConfiguration (::std::auto_ptr< AlarmsConfigurationType > p);

          //@}

          /**
           * @name OperationConfiguration
           *
           * @brief Accessor and modifier functions for the %OperationConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::OperationConfiguration OperationConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OperationConfigurationType, char > OperationConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const OperationConfigurationType&
          getOperationConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          OperationConfigurationType&
          getOperationConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setOperationConfiguration (const OperationConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOperationConfiguration (::std::auto_ptr< OperationConfigurationType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SaesFunctionalityConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SaesFunctionalityConfiguration (const VotingExperienceControllerType&,
                                          const VoteType&,
                                          const BlankVoteType&,
                                          const VMachineInitiatorType&,
                                          const PMachineInitiatorType&,
                                          const CardTypeControllerType&,
                                          const PVFormTransformationType&,
                                          const StructureInstallationType&,
                                          const EnqueueVoteConfigurationType&,
                                          const SystemRoleType&,
                                          const LaunchConfigurationType&,
                                          const AlarmsConfigurationType&,
                                          const OperationConfigurationType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SaesFunctionalityConfiguration (::std::auto_ptr< VotingExperienceControllerType >&,
                                          ::std::auto_ptr< VoteType >&,
                                          ::std::auto_ptr< BlankVoteType >&,
                                          ::std::auto_ptr< VMachineInitiatorType >&,
                                          ::std::auto_ptr< PMachineInitiatorType >&,
                                          const CardTypeControllerType&,
                                          ::std::auto_ptr< PVFormTransformationType >&,
                                          const StructureInstallationType&,
                                          ::std::auto_ptr< EnqueueVoteConfigurationType >&,
                                          ::std::auto_ptr< SystemRoleType >&,
                                          ::std::auto_ptr< LaunchConfigurationType >&,
                                          ::std::auto_ptr< AlarmsConfigurationType >&,
                                          ::std::auto_ptr< OperationConfigurationType >&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SaesFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SaesFunctionalityConfiguration (const SaesFunctionalityConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SaesFunctionalityConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SaesFunctionalityConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< VotingExperienceControllerType > VotingExperienceController_;
          ::xsd::cxx::tree::one< VoteType > Vote_;
          ::xsd::cxx::tree::one< BlankVoteType > BlankVote_;
          ::xsd::cxx::tree::one< VMachineInitiatorType > VMachineInitiator_;
          ::xsd::cxx::tree::one< PMachineInitiatorType > PMachineInitiator_;
          ::xsd::cxx::tree::one< CardTypeControllerType > CardTypeController_;
          ::xsd::cxx::tree::one< PVFormTransformationType > PVFormTransformation_;
          ::xsd::cxx::tree::one< StructureInstallationType > StructureInstallation_;
          ::xsd::cxx::tree::one< EnqueueVoteConfigurationType > EnqueueVoteConfiguration_;
          ::xsd::cxx::tree::one< SystemRoleType > SystemRole_;
          ::xsd::cxx::tree::one< LaunchConfigurationType > LaunchConfiguration_;
          ::xsd::cxx::tree::one< AlarmsConfigurationType > AlarmsConfiguration_;
          ::xsd::cxx::tree::one< OperationConfigurationType > OperationConfiguration_;

          //@endcond
        };

        bool
        operator== (const SaesFunctionalityConfiguration&, const SaesFunctionalityConfiguration&);

        bool
        operator!= (const SaesFunctionalityConfiguration&, const SaesFunctionalityConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %AlarmCategoryEnum
         * schema type.
         */
        class AlarmCategoryEnum: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_CRITICALALARM,
            CONFIGURATION_REGULARALARM
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          AlarmCategoryEnum ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          AlarmCategoryEnum (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          AlarmCategoryEnum (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          AlarmCategoryEnum (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          AlarmCategoryEnum (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCategoryEnum (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCategoryEnum (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCategoryEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AlarmCategoryEnum (const AlarmCategoryEnum& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AlarmCategoryEnum*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          AlarmCategoryEnum&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_AlarmCategoryEnum_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_AlarmCategoryEnum_convert () const;

          public:
          static const char* const _xsd_AlarmCategoryEnum_literals_[2];
          static const Value _xsd_AlarmCategoryEnum_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %AlarmBehaviorEnum
         * schema type.
         */
        class AlarmBehaviorEnum: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_GOAUTHENTICATION,
            CONFIGURATION_WAIT
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          AlarmBehaviorEnum ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          AlarmBehaviorEnum (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          AlarmBehaviorEnum (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          AlarmBehaviorEnum (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          AlarmBehaviorEnum (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmBehaviorEnum (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmBehaviorEnum (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmBehaviorEnum (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AlarmBehaviorEnum (const AlarmBehaviorEnum& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AlarmBehaviorEnum*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          AlarmBehaviorEnum&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_AlarmBehaviorEnum_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_AlarmBehaviorEnum_convert () const;

          public:
          static const char* const _xsd_AlarmBehaviorEnum_literals_[2];
          static const Value _xsd_AlarmBehaviorEnum_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %AlarmEnum
         * schema type.
         */
        class AlarmEnum: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_UNABLETOREAD,
            CONFIGURATION_UNABLETOWRITE,
            CONFIGURATION_CRYPTOERROR,
            CONFIGURATION_INVALIDCONTENT,
            CONFIGURATION_CARDUSED,
            CONFIGURATION_CARDVALIDITYPERIODEXPIRED,
            CONFIGURATION_INVALIDVOTINGDATA,
            CONFIGURATION_PRINTERNEOPAFTERVOTE,
            CONFIGURATION_VOTEPRINTINGFAILURE,
            CONFIGURATION_PRINTERNOTREADYFORVOTE,
            CONFIGURATION_TIMEOUT,
            CONFIGURATION_CARDNOTREMOVEDAFTERVOTING,
            CONFIGURATION_CARDEXTRACTIONCOUNTER,
            CONFIGURATION_PRINTERNEOPBEFOREVOTE,
            CONFIGURATION_ALARMBOXDISCONNECTED,
            CONFIGURATION_ALARMBOXCONNECTED,
            CONFIGURATION_CARDREADERUNRESPONSIVE,
            CONFIGURATION_UNEXPECTED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          AlarmEnum ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          AlarmEnum (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          AlarmEnum (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          AlarmEnum (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          AlarmEnum (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmEnum (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmEnum (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmEnum (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AlarmEnum (const AlarmEnum& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AlarmEnum*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          AlarmEnum&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_AlarmEnum_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_AlarmEnum_convert () const;

          public:
          static const char* const _xsd_AlarmEnum_literals_[18];
          static const Value _xsd_AlarmEnum_indexes_[18];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %AlarmCommandEnum
         * schema type.
         */
        class AlarmCommandEnum: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_REDLED,
            CONFIGURATION_GREENLED,
            CONFIGURATION_BUZZER
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          AlarmCommandEnum ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          AlarmCommandEnum (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          AlarmCommandEnum (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          AlarmCommandEnum (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          AlarmCommandEnum (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCommandEnum (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCommandEnum (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCommandEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AlarmCommandEnum (const AlarmCommandEnum& x,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AlarmCommandEnum*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          AlarmCommandEnum&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_AlarmCommandEnum_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_AlarmCommandEnum_convert () const;

          public:
          static const char* const _xsd_AlarmCommandEnum_literals_[3];
          static const Value _xsd_AlarmCommandEnum_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %AlarmCommand schema type.
         *
         * @nosubgrouping
         */
        class AlarmCommand: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name TypeOfCommand
           *
           * @brief Accessor and modifier functions for the %TypeOfCommand
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AlarmCommandEnum TypeOfCommandType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeOfCommandType, char > TypeOfCommandTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeOfCommandType&
          getTypeOfCommand () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeOfCommandType&
          getTypeOfCommand ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTypeOfCommand (const TypeOfCommandType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTypeOfCommand (::std::auto_ptr< TypeOfCommandType > p);

          //@}

          /**
           * @name Period
           *
           * @brief Accessor and modifier functions for the %Period
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PeriodType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeriodType, char > PeriodTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const PeriodType&
          getPeriod () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          PeriodType&
          getPeriod ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPeriod (const PeriodType& x);

          //@}

          /**
           * @name IsOff
           *
           * @brief Accessor and modifier functions for the %IsOff
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean IsOffType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< IsOffType, char > IsOffTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const IsOffType&
          getIsOff () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          IsOffType&
          getIsOff ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setIsOff (const IsOffType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          AlarmCommand ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AlarmCommand (const TypeOfCommandType&,
                        const PeriodType&,
                        const IsOffType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmCommand (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AlarmCommand (const AlarmCommand& x,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AlarmCommand*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AlarmCommand ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< TypeOfCommandType > TypeOfCommand_;
          ::xsd::cxx::tree::one< PeriodType > Period_;
          ::xsd::cxx::tree::one< IsOffType > IsOff_;

          //@endcond
        };

        bool
        operator== (const AlarmCommand&, const AlarmCommand&);

        bool
        operator!= (const AlarmCommand&, const AlarmCommand&);


        /**
         * @brief Class corresponding to the %VotingExperienceControllerConfiguration schema type.
         *
         * @nosubgrouping
         */
        class VotingExperienceControllerConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name OperationType
           *
           * @brief Accessor and modifier functions for the %OperationType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerOperationType OperationTypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OperationTypeType, char > OperationTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const OperationTypeType&
          getOperationType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          OperationTypeType&
          getOperationType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setOperationType (const OperationTypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOperationType (::std::auto_ptr< OperationTypeType > p);

          //@}

          /**
           * @name ValidateCardDataType
           *
           * @brief Accessor and modifier functions for the %ValidateCardDataType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerValidateCardDataType ValidateCardDataTypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValidateCardDataTypeType, char > ValidateCardDataTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ValidateCardDataTypeType&
          getValidateCardDataType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ValidateCardDataTypeType&
          getValidateCardDataType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setValidateCardDataType (const ValidateCardDataTypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setValidateCardDataType (::std::auto_ptr< ValidateCardDataTypeType > p);

          //@}

          /**
           * @name SkipCustomAttributeAutomatic
           *
           * @brief Accessor and modifier functions for the %SkipCustomAttributeAutomatic
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SkipCustomAttributeAutomaticType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SkipCustomAttributeAutomaticType, char > SkipCustomAttributeAutomaticTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SkipCustomAttributeAutomaticType&
          getSkipCustomAttributeAutomatic () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SkipCustomAttributeAutomaticType&
          getSkipCustomAttributeAutomatic ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSkipCustomAttributeAutomatic (const SkipCustomAttributeAutomaticType& x);

          //@}

          /**
           * @name NavigateBetweenContest
           *
           * @brief Accessor and modifier functions for the %NavigateBetweenContest
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean NavigateBetweenContestType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NavigateBetweenContestType, char > NavigateBetweenContestTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const NavigateBetweenContestType&
          getNavigateBetweenContest () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          NavigateBetweenContestType&
          getNavigateBetweenContest ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setNavigateBetweenContest (const NavigateBetweenContestType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          VotingExperienceControllerConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          VotingExperienceControllerConfiguration (const OperationTypeType&,
                                                   const ValidateCardDataTypeType&,
                                                   const SkipCustomAttributeAutomaticType&,
                                                   const NavigateBetweenContestType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerConfiguration (const ::xercesc::DOMElement& e,
                                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VotingExperienceControllerConfiguration (const VotingExperienceControllerConfiguration& x,
                                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VotingExperienceControllerConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~VotingExperienceControllerConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< OperationTypeType > OperationType_;
          ::xsd::cxx::tree::one< ValidateCardDataTypeType > ValidateCardDataType_;
          ::xsd::cxx::tree::one< SkipCustomAttributeAutomaticType > SkipCustomAttributeAutomatic_;
          ::xsd::cxx::tree::one< NavigateBetweenContestType > NavigateBetweenContest_;

          //@endcond
        };

        bool
        operator== (const VotingExperienceControllerConfiguration&, const VotingExperienceControllerConfiguration&);

        bool
        operator!= (const VotingExperienceControllerConfiguration&, const VotingExperienceControllerConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %VotingExperienceControllerOperationType
         * schema type.
         */
        class VotingExperienceControllerOperationType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_ALTERNATE_FIRST_QUESTIONS,
            CONFIGURATION_ALTERNATE_FIRST_CONTESTS_FIXED,
            CONFIGURATION_ALL_QUESTIONS_FIRST_QUESTIONS,
            CONFIGURATION_ALL_QUESTIONS_FIRST_CONTESTS_FIXED,
            CONFIGURATION_PRIORITY_BY_CONTEST_CLASS
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          VotingExperienceControllerOperationType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          VotingExperienceControllerOperationType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          VotingExperienceControllerOperationType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          VotingExperienceControllerOperationType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          VotingExperienceControllerOperationType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerOperationType (const ::xercesc::DOMElement& e,
                                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerOperationType (const ::xercesc::DOMAttr& a,
                                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerOperationType (const ::std::string& s,
                                                   const ::xercesc::DOMElement* e,
                                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VotingExperienceControllerOperationType (const VotingExperienceControllerOperationType& x,
                                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VotingExperienceControllerOperationType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          VotingExperienceControllerOperationType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_VotingExperienceControllerOperationType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_VotingExperienceControllerOperationType_convert () const;

          public:
          static const char* const _xsd_VotingExperienceControllerOperationType_literals_[5];
          static const Value _xsd_VotingExperienceControllerOperationType_indexes_[5];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %VotingExperienceControllerValidateCardDataType
         * schema type.
         */
        class VotingExperienceControllerValidateCardDataType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_ALL,
            CONFIGURATION_LOGICAL_VOTER_GROUP_ONLY,
            CONFIGURATION_NONE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          VotingExperienceControllerValidateCardDataType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          VotingExperienceControllerValidateCardDataType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          VotingExperienceControllerValidateCardDataType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          VotingExperienceControllerValidateCardDataType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          VotingExperienceControllerValidateCardDataType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerValidateCardDataType (const ::xercesc::DOMElement& e,
                                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerValidateCardDataType (const ::xercesc::DOMAttr& a,
                                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingExperienceControllerValidateCardDataType (const ::std::string& s,
                                                          const ::xercesc::DOMElement* e,
                                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VotingExperienceControllerValidateCardDataType (const VotingExperienceControllerValidateCardDataType& x,
                                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VotingExperienceControllerValidateCardDataType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          VotingExperienceControllerValidateCardDataType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_VotingExperienceControllerValidateCardDataType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_VotingExperienceControllerValidateCardDataType_convert () const;

          public:
          static const char* const _xsd_VotingExperienceControllerValidateCardDataType_literals_[3];
          static const Value _xsd_VotingExperienceControllerValidateCardDataType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %VoteConfiguration schema type.
         *
         * @nosubgrouping
         */
        class VoteConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name FillVote
           *
           * @brief Accessor and modifier functions for the %FillVote
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean FillVoteType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< FillVoteType, char > FillVoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const FillVoteType&
          getFillVote () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          FillVoteType&
          getFillVote ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setFillVote (const FillVoteType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          VoteConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          VoteConfiguration (const FillVoteType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VoteConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VoteConfiguration (const VoteConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VoteConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~VoteConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< FillVoteType > FillVote_;

          //@endcond
        };

        bool
        operator== (const VoteConfiguration&, const VoteConfiguration&);

        bool
        operator!= (const VoteConfiguration&, const VoteConfiguration&);


        /**
         * @brief Class corresponding to the %BlankVoteConfiguration schema type.
         *
         * @nosubgrouping
         */
        class BlankVoteConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name BlankVote
           *
           * @brief Accessor and modifier functions for the %BlankVote
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::BlankVoteType BlankVoteType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< BlankVoteType, char > BlankVoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const BlankVoteType&
          getBlankVote () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          BlankVoteType&
          getBlankVote ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBlankVote (const BlankVoteType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBlankVote (::std::auto_ptr< BlankVoteType > p);

          //@}

          /**
           * @name BlankVoteListContestCode
           *
           * @brief Accessor and modifier functions for the %BlankVoteListContestCode
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::BlankVoteListContestCodeType BlankVoteListContestCodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< BlankVoteListContestCodeType, char > BlankVoteListContestCodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const BlankVoteListContestCodeType&
          getBlankVoteListContestCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          BlankVoteListContestCodeType&
          getBlankVoteListContestCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBlankVoteListContestCode (const BlankVoteListContestCodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBlankVoteListContestCode (::std::auto_ptr< BlankVoteListContestCodeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BlankVoteConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BlankVoteConfiguration (const BlankVoteType&,
                                  const BlankVoteListContestCodeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BlankVoteConfiguration (const BlankVoteConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BlankVoteConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BlankVoteConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< BlankVoteType > BlankVote_;
          ::xsd::cxx::tree::one< BlankVoteListContestCodeType > BlankVoteListContestCode_;

          //@endcond
        };

        bool
        operator== (const BlankVoteConfiguration&, const BlankVoteConfiguration&);

        bool
        operator!= (const BlankVoteConfiguration&, const BlankVoteConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %BlankVoteType
         * schema type.
         */
        class BlankVoteType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_BLANK_VOTE_ENABLED,
            CONFIGURATION_BLANK_VOTE_DISABLED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          BlankVoteType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          BlankVoteType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          BlankVoteType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          BlankVoteType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          BlankVoteType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BlankVoteType (const BlankVoteType& x,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BlankVoteType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          BlankVoteType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_BlankVoteType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_BlankVoteType_convert () const;

          public:
          static const char* const _xsd_BlankVoteType_literals_[2];
          static const Value _xsd_BlankVoteType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %BlankVoteListContestCodeType
         * schema type.
         */
        class BlankVoteListContestCodeType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_BLANK_VOTE_ALL_CONTEST,
            CONFIGURATION_BLANK_VOTE_CONTEST_GROUP_ONLY
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          BlankVoteListContestCodeType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          BlankVoteListContestCodeType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          BlankVoteListContestCodeType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          BlankVoteListContestCodeType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          BlankVoteListContestCodeType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteListContestCodeType (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteListContestCodeType (const ::xercesc::DOMAttr& a,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BlankVoteListContestCodeType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BlankVoteListContestCodeType (const BlankVoteListContestCodeType& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BlankVoteListContestCodeType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          BlankVoteListContestCodeType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_BlankVoteListContestCodeType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_BlankVoteListContestCodeType_convert () const;

          public:
          static const char* const _xsd_BlankVoteListContestCodeType_literals_[2];
          static const Value _xsd_BlankVoteListContestCodeType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SystemRoleConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SystemRoleConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name role
           *
           * @brief Accessor and modifier functions for the %role
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::Role RoleType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< RoleType > RoleSequence;

          /**
           * @brief Element iterator type.
           */
          typedef RoleSequence::iterator RoleIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef RoleSequence::const_iterator RoleConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RoleType, char > RoleTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const RoleSequence&
          getRole () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          RoleSequence&
          getRole ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setRole (const RoleSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SystemRoleConfiguration ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SystemRoleConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SystemRoleConfiguration (const SystemRoleConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SystemRoleConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SystemRoleConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          RoleSequence role_;

          //@endcond
        };

        bool
        operator== (const SystemRoleConfiguration&, const SystemRoleConfiguration&);

        bool
        operator!= (const SystemRoleConfiguration&, const SystemRoleConfiguration&);


        /**
         * @brief Class corresponding to the %VMachineInitiatorConfiguration schema type.
         *
         * @nosubgrouping
         */
        class VMachineInitiatorConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name MessageRemoveFlashTime
           *
           * @brief Accessor and modifier functions for the %MessageRemoveFlashTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MessageRemoveFlashTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MessageRemoveFlashTimeType, char > MessageRemoveFlashTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MessageRemoveFlashTimeType&
          getMessageRemoveFlashTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MessageRemoveFlashTimeType&
          getMessageRemoveFlashTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMessageRemoveFlashTime (const MessageRemoveFlashTimeType& x);

          //@}

          /**
           * @name SuccessMessageTime
           *
           * @brief Accessor and modifier functions for the %SuccessMessageTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SuccessMessageTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SuccessMessageTimeType, char > SuccessMessageTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SuccessMessageTimeType&
          getSuccessMessageTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SuccessMessageTimeType&
          getSuccessMessageTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSuccessMessageTime (const SuccessMessageTimeType& x);

          //@}

          /**
           * @name StepTime
           *
           * @brief Accessor and modifier functions for the %StepTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger StepTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StepTimeType, char > StepTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StepTimeType&
          getStepTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StepTimeType&
          getStepTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStepTime (const StepTimeType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          VMachineInitiatorConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          VMachineInitiatorConfiguration (const MessageRemoveFlashTimeType&,
                                          const SuccessMessageTimeType&,
                                          const StepTimeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VMachineInitiatorConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VMachineInitiatorConfiguration (const VMachineInitiatorConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VMachineInitiatorConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~VMachineInitiatorConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< MessageRemoveFlashTimeType > MessageRemoveFlashTime_;
          ::xsd::cxx::tree::one< SuccessMessageTimeType > SuccessMessageTime_;
          ::xsd::cxx::tree::one< StepTimeType > StepTime_;

          //@endcond
        };

        bool
        operator== (const VMachineInitiatorConfiguration&, const VMachineInitiatorConfiguration&);

        bool
        operator!= (const VMachineInitiatorConfiguration&, const VMachineInitiatorConfiguration&);


        /**
         * @brief Class corresponding to the %PMachineInitiatorConfiguration schema type.
         *
         * @nosubgrouping
         */
        class PMachineInitiatorConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name SuccessMessageTime
           *
           * @brief Accessor and modifier functions for the %SuccessMessageTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SuccessMessageTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SuccessMessageTimeType, char > SuccessMessageTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SuccessMessageTimeType&
          getSuccessMessageTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SuccessMessageTimeType&
          getSuccessMessageTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSuccessMessageTime (const SuccessMessageTimeType& x);

          //@}

          /**
           * @name StepTime
           *
           * @brief Accessor and modifier functions for the %StepTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger StepTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StepTimeType, char > StepTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StepTimeType&
          getStepTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StepTimeType&
          getStepTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStepTime (const StepTimeType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PMachineInitiatorConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PMachineInitiatorConfiguration (const SuccessMessageTimeType&,
                                          const StepTimeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PMachineInitiatorConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PMachineInitiatorConfiguration (const PMachineInitiatorConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PMachineInitiatorConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PMachineInitiatorConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< SuccessMessageTimeType > SuccessMessageTime_;
          ::xsd::cxx::tree::one< StepTimeType > StepTime_;

          //@endcond
        };

        bool
        operator== (const PMachineInitiatorConfiguration&, const PMachineInitiatorConfiguration&);

        bool
        operator!= (const PMachineInitiatorConfiguration&, const PMachineInitiatorConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %SystemRoleType
         * schema type.
         */
        class SystemRoleType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_MENU,
            CONFIGURATION_VOTING,
            CONFIGURATION_ELECTORAL,
            CONFIGURATION_VOTING_AUDIO,
            CONFIGURATION_CLEAR_ALARM
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SystemRoleType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SystemRoleType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SystemRoleType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SystemRoleType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SystemRoleType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SystemRoleType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SystemRoleType (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SystemRoleType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SystemRoleType (const SystemRoleType& x,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SystemRoleType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SystemRoleType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SystemRoleType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SystemRoleType_convert () const;

          public:
          static const char* const _xsd_SystemRoleType_literals_[5];
          static const Value _xsd_SystemRoleType_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %OperationConfiguration schema type.
         *
         * @nosubgrouping
         */
        class OperationConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name ConfigurationReset
           *
           * @brief Accessor and modifier functions for the %ConfigurationReset
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ConfigurationResetType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConfigurationResetType, char > ConfigurationResetTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ConfigurationResetType&
          getConfigurationReset () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ConfigurationResetType&
          getConfigurationReset ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setConfigurationReset (const ConfigurationResetType& x);

          //@}

          /**
           * @name StartOpenElection
           *
           * @brief Accessor and modifier functions for the %StartOpenElection
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean StartOpenElectionType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< StartOpenElectionType, char > StartOpenElectionTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const StartOpenElectionType&
          getStartOpenElection () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          StartOpenElectionType&
          getStartOpenElection ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setStartOpenElection (const StartOpenElectionType& x);

          //@}

          /**
           * @name DiagnosesConsideredApproved
           *
           * @brief Accessor and modifier functions for the %DiagnosesConsideredApproved
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean DiagnosesConsideredApprovedType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DiagnosesConsideredApprovedType, char > DiagnosesConsideredApprovedTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DiagnosesConsideredApprovedType&
          getDiagnosesConsideredApproved () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DiagnosesConsideredApprovedType&
          getDiagnosesConsideredApproved ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDiagnosesConsideredApproved (const DiagnosesConsideredApprovedType& x);

          //@}

          /**
           * @name SimulateVotes
           *
           * @brief Accessor and modifier functions for the %SimulateVotes
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SimulateVotesType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< SimulateVotesType, char > SimulateVotesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const SimulateVotesType&
          getSimulateVotes () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          SimulateVotesType&
          getSimulateVotes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSimulateVotes (const SimulateVotesType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          OperationConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          OperationConfiguration (const ConfigurationResetType&,
                                  const StartOpenElectionType&,
                                  const DiagnosesConsideredApprovedType&,
                                  const SimulateVotesType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          OperationConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          OperationConfiguration (const OperationConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual OperationConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~OperationConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< ConfigurationResetType > ConfigurationReset_;
          ::xsd::cxx::tree::one< StartOpenElectionType > StartOpenElection_;
          ::xsd::cxx::tree::one< DiagnosesConsideredApprovedType > DiagnosesConsideredApproved_;
          ::xsd::cxx::tree::one< SimulateVotesType > SimulateVotes_;

          //@endcond
        };

        bool
        operator== (const OperationConfiguration&, const OperationConfiguration&);

        bool
        operator!= (const OperationConfiguration&, const OperationConfiguration&);


        /**
         * @brief Class corresponding to the %EnqueueVoteConfiguration schema type.
         *
         * @nosubgrouping
         */
        class EnqueueVoteConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name CleanVoteRepeated
           *
           * @brief Accessor and modifier functions for the %CleanVoteRepeated
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean CleanVoteRepeatedType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CleanVoteRepeatedType, char > CleanVoteRepeatedTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CleanVoteRepeatedType&
          getCleanVoteRepeated () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CleanVoteRepeatedType&
          getCleanVoteRepeated ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCleanVoteRepeated (const CleanVoteRepeatedType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          EnqueueVoteConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          EnqueueVoteConfiguration (const CleanVoteRepeatedType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          EnqueueVoteConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          EnqueueVoteConfiguration (const EnqueueVoteConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual EnqueueVoteConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~EnqueueVoteConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CleanVoteRepeatedType > CleanVoteRepeated_;

          //@endcond
        };

        bool
        operator== (const EnqueueVoteConfiguration&, const EnqueueVoteConfiguration&);

        bool
        operator!= (const EnqueueVoteConfiguration&, const EnqueueVoteConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %CardTypeController
         * schema type.
         */
        class CardTypeController: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_MEMORY_CARD,
            CONFIGURATION_SMART_CARD
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CardTypeController ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CardTypeController (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CardTypeController (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CardTypeController (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CardTypeController (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardTypeController (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardTypeController (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardTypeController (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardTypeController (const CardTypeController& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CardTypeController*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CardTypeController&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CardTypeController_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CardTypeController_convert () const;

          public:
          static const char* const _xsd_CardTypeController_literals_[2];
          static const Value _xsd_CardTypeController_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %PVFormTransformationConfig schema type.
         *
         * @nosubgrouping
         */
        class PVFormTransformationConfig: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::PVFormTransformationType TypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TypeType&
          getType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TypeType&
          getType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name FopConfigFile
           *
           * @brief Accessor and modifier functions for the %FopConfigFile
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String FopConfigFileType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FopConfigFileType, char > FopConfigFileTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FopConfigFileType&
          getFopConfigFile () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FopConfigFileType&
          getFopConfigFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setFopConfigFile (const FopConfigFileType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFopConfigFile (::std::auto_ptr< FopConfigFileType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVFormTransformationConfig ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVFormTransformationConfig (const TypeType&,
                                      const FopConfigFileType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVFormTransformationConfig (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVFormTransformationConfig (const PVFormTransformationConfig& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVFormTransformationConfig*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVFormTransformationConfig ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< TypeType > type_;
          ::xsd::cxx::tree::one< FopConfigFileType > FopConfigFile_;

          //@endcond
        };

        bool
        operator== (const PVFormTransformationConfig&, const PVFormTransformationConfig&);

        bool
        operator!= (const PVFormTransformationConfig&, const PVFormTransformationConfig&);


        /**
         * @brief Enumeration class corresponding to the %PVFormTransformationType
         * schema type.
         */
        class PVFormTransformationType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_FOP,
            CONFIGURATION_XMLROFF
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          PVFormTransformationType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          PVFormTransformationType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          PVFormTransformationType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          PVFormTransformationType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          PVFormTransformationType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVFormTransformationType (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVFormTransformationType (const ::xercesc::DOMAttr& a,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVFormTransformationType (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVFormTransformationType (const PVFormTransformationType& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVFormTransformationType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          PVFormTransformationType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_PVFormTransformationType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_PVFormTransformationType_convert () const;

          public:
          static const char* const _xsd_PVFormTransformationType_literals_[2];
          static const Value _xsd_PVFormTransformationType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %StructureInstallationType
         * schema type.
         */
        class StructureInstallationType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_SEPARATE,
            CONFIGURATION_GROUPED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          StructureInstallationType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          StructureInstallationType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          StructureInstallationType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          StructureInstallationType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          StructureInstallationType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StructureInstallationType (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StructureInstallationType (const ::xercesc::DOMAttr& a,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StructureInstallationType (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          StructureInstallationType (const StructureInstallationType& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StructureInstallationType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          StructureInstallationType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_StructureInstallationType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_StructureInstallationType_convert () const;

          public:
          static const char* const _xsd_StructureInstallationType_literals_[2];
          static const Value _xsd_StructureInstallationType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %RuleTransformation
         * schema type.
         */
        class RuleTransformation: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_COPY
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          RuleTransformation ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          RuleTransformation (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          RuleTransformation (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          RuleTransformation (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          RuleTransformation (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RuleTransformation (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RuleTransformation (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RuleTransformation (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RuleTransformation (const RuleTransformation& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RuleTransformation*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          RuleTransformation&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_RuleTransformation_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_RuleTransformation_convert () const;

          public:
          static const char* const _xsd_RuleTransformation_literals_[1];
          static const Value _xsd_RuleTransformation_indexes_[1];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %LaunchConfiguration schema type.
         *
         * @nosubgrouping
         */
        class LaunchConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name ExecuteInitialCalibrationInAppTypeVotingOnly
           *
           * @brief Accessor and modifier functions for the %ExecuteInitialCalibrationInAppTypeVotingOnly
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ExecuteInitialCalibrationInAppTypeVotingOnlyType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExecuteInitialCalibrationInAppTypeVotingOnlyType, char > ExecuteInitialCalibrationInAppTypeVotingOnlyTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExecuteInitialCalibrationInAppTypeVotingOnlyType&
          getExecuteInitialCalibrationInAppTypeVotingOnly () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExecuteInitialCalibrationInAppTypeVotingOnlyType&
          getExecuteInitialCalibrationInAppTypeVotingOnly ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setExecuteInitialCalibrationInAppTypeVotingOnly (const ExecuteInitialCalibrationInAppTypeVotingOnlyType& x);

          //@}

          /**
           * @name ExecutePMSetupInAppTypeDiagnostics
           *
           * @brief Accessor and modifier functions for the %ExecutePMSetupInAppTypeDiagnostics
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ExecutePMSetupInAppTypeDiagnosticsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExecutePMSetupInAppTypeDiagnosticsType, char > ExecutePMSetupInAppTypeDiagnosticsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExecutePMSetupInAppTypeDiagnosticsType&
          getExecutePMSetupInAppTypeDiagnostics () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExecutePMSetupInAppTypeDiagnosticsType&
          getExecutePMSetupInAppTypeDiagnostics ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setExecutePMSetupInAppTypeDiagnostics (const ExecutePMSetupInAppTypeDiagnosticsType& x);

          //@}

          /**
           * @name PMSetupCommand
           *
           * @brief Accessor and modifier functions for the %PMSetupCommand
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PMSetupCommandType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PMSetupCommandType, char > PMSetupCommandTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PMSetupCommandType&
          getPMSetupCommand () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PMSetupCommandType&
          getPMSetupCommand ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPMSetupCommand (const PMSetupCommandType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPMSetupCommand (::std::auto_ptr< PMSetupCommandType > p);

          //@}

          /**
           * @name AppType
           *
           * @brief Accessor and modifier functions for the %AppType
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AppType AppTypeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< AppTypeType, char > AppTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const AppTypeType&
          getAppType () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          AppTypeType&
          getAppType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAppType (const AppTypeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAppType (::std::auto_ptr< AppTypeType > p);

          //@}

          /**
           * @name SkipAutoDiagnostic
           *
           * @brief Accessor and modifier functions for the %SkipAutoDiagnostic
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SkipAutoDiagnosticType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< SkipAutoDiagnosticType, char > SkipAutoDiagnosticTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const SkipAutoDiagnosticType&
          getSkipAutoDiagnostic () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          SkipAutoDiagnosticType&
          getSkipAutoDiagnostic ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSkipAutoDiagnostic (const SkipAutoDiagnosticType& x);

          //@}

          /**
           * @name PrintInstallationReportPM
           *
           * @brief Accessor and modifier functions for the %PrintInstallationReportPM
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean PrintInstallationReportPMType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< PrintInstallationReportPMType, char > PrintInstallationReportPMTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const PrintInstallationReportPMType&
          getPrintInstallationReportPM () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          PrintInstallationReportPMType&
          getPrintInstallationReportPM ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPrintInstallationReportPM (const PrintInstallationReportPMType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          LaunchConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          LaunchConfiguration (const ExecuteInitialCalibrationInAppTypeVotingOnlyType&,
                               const ExecutePMSetupInAppTypeDiagnosticsType&,
                               const PMSetupCommandType&,
                               const AppTypeType&,
                               const SkipAutoDiagnosticType&,
                               const PrintInstallationReportPMType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          LaunchConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          LaunchConfiguration (const LaunchConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual LaunchConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~LaunchConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< ExecuteInitialCalibrationInAppTypeVotingOnlyType > ExecuteInitialCalibrationInAppTypeVotingOnly_;
          ::xsd::cxx::tree::one< ExecutePMSetupInAppTypeDiagnosticsType > ExecutePMSetupInAppTypeDiagnostics_;
          ::xsd::cxx::tree::one< PMSetupCommandType > PMSetupCommand_;
          ::xsd::cxx::tree::one< AppTypeType > AppType_;
          ::xsd::cxx::tree::one< SkipAutoDiagnosticType > SkipAutoDiagnostic_;
          ::xsd::cxx::tree::one< PrintInstallationReportPMType > PrintInstallationReportPM_;

          //@endcond
        };

        bool
        operator== (const LaunchConfiguration&, const LaunchConfiguration&);

        bool
        operator!= (const LaunchConfiguration&, const LaunchConfiguration&);


        /**
         * @brief Class corresponding to the %AlarmsConfiguration schema type.
         *
         * @nosubgrouping
         */
        class AlarmsConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name Alarm
           *
           * @brief Accessor and modifier functions for the %Alarm
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::Alarm AlarmType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< AlarmType > AlarmSequence;

          /**
           * @brief Element iterator type.
           */
          typedef AlarmSequence::iterator AlarmIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef AlarmSequence::const_iterator AlarmConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlarmType, char > AlarmTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const AlarmSequence&
          getAlarm () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          AlarmSequence&
          getAlarm ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setAlarm (const AlarmSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AlarmsConfiguration ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AlarmsConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AlarmsConfiguration (const AlarmsConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AlarmsConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~AlarmsConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          AlarmSequence Alarm_;

          //@endcond
        };

        bool
        operator== (const AlarmsConfiguration&, const AlarmsConfiguration&);

        bool
        operator!= (const AlarmsConfiguration&, const AlarmsConfiguration&);


        /**
         * @brief Class corresponding to the %role schema type.
         *
         * @nosubgrouping
         */
        class Role: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name key
           *
           * @brief Accessor and modifier functions for the %key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String KeyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< KeyType, char > KeyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const KeyType&
          getKey () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          KeyType&
          getKey ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setKey (const KeyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setKey (::std::auto_ptr< KeyType > p);

          //@}

          /**
           * @name nameKey
           *
           * @brief Accessor and modifier functions for the %nameKey
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String NameKeyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NameKeyType, char > NameKeyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const NameKeyType&
          getNameKey () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          NameKeyType&
          getNameKey ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNameKey (const NameKeyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setNameKey (::std::auto_ptr< NameKeyType > p);

          //@}

          /**
           * @name descriptionKey
           *
           * @brief Accessor and modifier functions for the %descriptionKey
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String DescriptionKeyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DescriptionKeyType, char > DescriptionKeyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DescriptionKeyType&
          getDescriptionKey () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DescriptionKeyType&
          getDescriptionKey ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescriptionKey (const DescriptionKeyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescriptionKey (::std::auto_ptr< DescriptionKeyType > p);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::SystemRoleType TypeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeType&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeType&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Role ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Role (const KeyType&,
                const NameKeyType&,
                const DescriptionKeyType&,
                const TypeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Role (const ::xercesc::DOMElement& e,
                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Role (const Role& x,
                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Role*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Role ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< KeyType > key_;
          ::xsd::cxx::tree::one< NameKeyType > nameKey_;
          ::xsd::cxx::tree::one< DescriptionKeyType > descriptionKey_;
          ::xsd::cxx::tree::one< TypeType > type_;

          //@endcond
        };

        bool
        operator== (const Role&, const Role&);

        bool
        operator!= (const Role&, const Role&);


        /**
         * @brief Enumeration class corresponding to the %AppType
         * schema type.
         */
        class AppType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_VOTINGONLY,
            CONFIGURATION_POLLBOOKONLY,
            CONFIGURATION_VOTINGMACHINE,
            CONFIGURATION_DIAGNOSTICSONLY,
            CONFIGURATION_RUNFUNCTIONALITY
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          AppType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          AppType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          AppType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          AppType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          AppType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AppType (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AppType (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AppType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          AppType (const AppType& x,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AppType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          AppType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_AppType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_AppType_convert () const;

          public:
          static const char* const _xsd_AppType_literals_[5];
          static const Value _xsd_AppType_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %Alarm schema type.
         *
         * @nosubgrouping
         */
        class Alarm: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name AlarmCommands
           *
           * @brief Accessor and modifier functions for the %AlarmCommands
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AlarmCommand AlarmCommandsType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< AlarmCommandsType > AlarmCommandsSequence;

          /**
           * @brief Element iterator type.
           */
          typedef AlarmCommandsSequence::iterator AlarmCommandsIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef AlarmCommandsSequence::const_iterator AlarmCommandsConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlarmCommandsType, char > AlarmCommandsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const AlarmCommandsSequence&
          getAlarmCommands () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          AlarmCommandsSequence&
          getAlarmCommands ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setAlarmCommands (const AlarmCommandsSequence& s);

          //@}

          /**
           * @name AlarmCategory
           *
           * @brief Accessor and modifier functions for the %AlarmCategory
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AlarmCategoryEnum AlarmCategoryType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlarmCategoryType, char > AlarmCategoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AlarmCategoryType&
          getAlarmCategory () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AlarmCategoryType&
          getAlarmCategory ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAlarmCategory (const AlarmCategoryType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAlarmCategory (::std::auto_ptr< AlarmCategoryType > p);

          //@}

          /**
           * @name AlarmBehavior
           *
           * @brief Accessor and modifier functions for the %AlarmBehavior
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AlarmBehaviorEnum AlarmBehaviorType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AlarmBehaviorType, char > AlarmBehaviorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AlarmBehaviorType&
          getAlarmBehavior () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AlarmBehaviorType&
          getAlarmBehavior ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAlarmBehavior (const AlarmBehaviorType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAlarmBehavior (::std::auto_ptr< AlarmBehaviorType > p);

          //@}

          /**
           * @name TypeOfAlarm
           *
           * @brief Accessor and modifier functions for the %TypeOfAlarm
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum TypeOfAlarmType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeOfAlarmType, char > TypeOfAlarmTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeOfAlarmType&
          getTypeOfAlarm () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeOfAlarmType&
          getTypeOfAlarm ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTypeOfAlarm (const TypeOfAlarmType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTypeOfAlarm (::std::auto_ptr< TypeOfAlarmType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Alarm ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Alarm (const AlarmCategoryType&,
                 const AlarmBehaviorType&,
                 const TypeOfAlarmType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Alarm (const ::xercesc::DOMElement& e,
                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Alarm (const Alarm& x,
                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Alarm*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Alarm ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          AlarmCommandsSequence AlarmCommands_;
          ::xsd::cxx::tree::one< AlarmCategoryType > AlarmCategory_;
          ::xsd::cxx::tree::one< AlarmBehaviorType > AlarmBehavior_;
          ::xsd::cxx::tree::one< TypeOfAlarmType > TypeOfAlarm_;

          //@endcond
        };

        bool
        operator== (const Alarm&, const Alarm&);

        bool
        operator!= (const Alarm&, const Alarm&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        /**
         * @name Parsing functions for the %SaesFunctionalityConfiguration document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::std::string& uri,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::std::string& uri,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::std::string& uri,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             const ::std::string& id,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             const ::std::string& id,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             const ::std::string& id,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::xercesc::InputSource& is,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::xercesc::InputSource& is,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::xercesc::InputSource& is,
                                             ::xercesc::DOMErrorHandler& eh,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::xercesc::DOMDocument& d,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        void
        operator<< (::xercesc::DOMElement&, const SaesFunctionalityConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const AlarmCategoryEnum&);

        void
        operator<< (::xercesc::DOMAttr&, const AlarmCategoryEnum&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const AlarmCategoryEnum&);

        void
        operator<< (::xercesc::DOMElement&, const AlarmBehaviorEnum&);

        void
        operator<< (::xercesc::DOMAttr&, const AlarmBehaviorEnum&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const AlarmBehaviorEnum&);

        void
        operator<< (::xercesc::DOMElement&, const AlarmEnum&);

        void
        operator<< (::xercesc::DOMAttr&, const AlarmEnum&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const AlarmEnum&);

        void
        operator<< (::xercesc::DOMElement&, const AlarmCommandEnum&);

        void
        operator<< (::xercesc::DOMAttr&, const AlarmCommandEnum&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const AlarmCommandEnum&);

        void
        operator<< (::xercesc::DOMElement&, const AlarmCommand&);

        void
        operator<< (::xercesc::DOMElement&, const VotingExperienceControllerConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const VotingExperienceControllerOperationType&);

        void
        operator<< (::xercesc::DOMAttr&, const VotingExperienceControllerOperationType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const VotingExperienceControllerOperationType&);

        void
        operator<< (::xercesc::DOMElement&, const VotingExperienceControllerValidateCardDataType&);

        void
        operator<< (::xercesc::DOMAttr&, const VotingExperienceControllerValidateCardDataType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const VotingExperienceControllerValidateCardDataType&);

        void
        operator<< (::xercesc::DOMElement&, const VoteConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const BlankVoteConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const BlankVoteType&);

        void
        operator<< (::xercesc::DOMAttr&, const BlankVoteType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const BlankVoteType&);

        void
        operator<< (::xercesc::DOMElement&, const BlankVoteListContestCodeType&);

        void
        operator<< (::xercesc::DOMAttr&, const BlankVoteListContestCodeType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const BlankVoteListContestCodeType&);

        void
        operator<< (::xercesc::DOMElement&, const SystemRoleConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const VMachineInitiatorConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const PMachineInitiatorConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const SystemRoleType&);

        void
        operator<< (::xercesc::DOMAttr&, const SystemRoleType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SystemRoleType&);

        void
        operator<< (::xercesc::DOMElement&, const OperationConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const EnqueueVoteConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const CardTypeController&);

        void
        operator<< (::xercesc::DOMAttr&, const CardTypeController&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const CardTypeController&);

        void
        operator<< (::xercesc::DOMElement&, const PVFormTransformationConfig&);

        void
        operator<< (::xercesc::DOMElement&, const PVFormTransformationType&);

        void
        operator<< (::xercesc::DOMAttr&, const PVFormTransformationType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const PVFormTransformationType&);

        void
        operator<< (::xercesc::DOMElement&, const StructureInstallationType&);

        void
        operator<< (::xercesc::DOMAttr&, const StructureInstallationType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const StructureInstallationType&);

        void
        operator<< (::xercesc::DOMElement&, const RuleTransformation&);

        void
        operator<< (::xercesc::DOMAttr&, const RuleTransformation&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const RuleTransformation&);

        /**
         * @name Serialization functions for the %SaesFunctionalityConfiguration document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeSaesFunctionalityConfiguration (::std::ostream& os,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesFunctionalityConfiguration (::std::ostream& os,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesFunctionalityConfiguration (::std::ostream& os,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeSaesFunctionalityConfiguration (::xercesc::XMLFormatTarget& ft,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesFunctionalityConfiguration (::xercesc::XMLFormatTarget& ft,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesFunctionalityConfiguration (::xercesc::XMLFormatTarget& ft,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 ::xercesc::DOMErrorHandler& eh,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 const ::std::string& e = "UTF-8",
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeSaesFunctionalityConfiguration (::xercesc::DOMDocument& d,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeSaesFunctionalityConfiguration (const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& x, 
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const LaunchConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const AlarmsConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const Role&);

        void
        operator<< (::xercesc::DOMElement&, const AppType&);

        void
        operator<< (::xercesc::DOMAttr&, const AppType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const AppType&);

        void
        operator<< (::xercesc::DOMElement&, const Alarm&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SAES_FUNCTIONALITY_CONFIGURATION_SCHEMA_HXX
