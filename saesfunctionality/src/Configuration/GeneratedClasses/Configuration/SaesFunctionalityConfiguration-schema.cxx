// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SaesFunctionalityConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        // SaesFunctionalityConfiguration
        // 

        const SaesFunctionalityConfiguration::VotingExperienceControllerType& SaesFunctionalityConfiguration::
        getVotingExperienceController () const
        {
          return this->VotingExperienceController_.get ();
        }

        SaesFunctionalityConfiguration::VotingExperienceControllerType& SaesFunctionalityConfiguration::
        getVotingExperienceController ()
        {
          return this->VotingExperienceController_.get ();
        }

        void SaesFunctionalityConfiguration::
        setVotingExperienceController (const VotingExperienceControllerType& x)
        {
          this->VotingExperienceController_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setVotingExperienceController (::std::auto_ptr< VotingExperienceControllerType > x)
        {
          this->VotingExperienceController_.set (x);
        }

        const SaesFunctionalityConfiguration::VoteType& SaesFunctionalityConfiguration::
        getVote () const
        {
          return this->Vote_.get ();
        }

        SaesFunctionalityConfiguration::VoteType& SaesFunctionalityConfiguration::
        getVote ()
        {
          return this->Vote_.get ();
        }

        void SaesFunctionalityConfiguration::
        setVote (const VoteType& x)
        {
          this->Vote_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setVote (::std::auto_ptr< VoteType > x)
        {
          this->Vote_.set (x);
        }

        const SaesFunctionalityConfiguration::BlankVoteType& SaesFunctionalityConfiguration::
        getBlankVote () const
        {
          return this->BlankVote_.get ();
        }

        SaesFunctionalityConfiguration::BlankVoteType& SaesFunctionalityConfiguration::
        getBlankVote ()
        {
          return this->BlankVote_.get ();
        }

        void SaesFunctionalityConfiguration::
        setBlankVote (const BlankVoteType& x)
        {
          this->BlankVote_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setBlankVote (::std::auto_ptr< BlankVoteType > x)
        {
          this->BlankVote_.set (x);
        }

        const SaesFunctionalityConfiguration::VMachineInitiatorType& SaesFunctionalityConfiguration::
        getVMachineInitiator () const
        {
          return this->VMachineInitiator_.get ();
        }

        SaesFunctionalityConfiguration::VMachineInitiatorType& SaesFunctionalityConfiguration::
        getVMachineInitiator ()
        {
          return this->VMachineInitiator_.get ();
        }

        void SaesFunctionalityConfiguration::
        setVMachineInitiator (const VMachineInitiatorType& x)
        {
          this->VMachineInitiator_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setVMachineInitiator (::std::auto_ptr< VMachineInitiatorType > x)
        {
          this->VMachineInitiator_.set (x);
        }

        const SaesFunctionalityConfiguration::PMachineInitiatorType& SaesFunctionalityConfiguration::
        getPMachineInitiator () const
        {
          return this->PMachineInitiator_.get ();
        }

        SaesFunctionalityConfiguration::PMachineInitiatorType& SaesFunctionalityConfiguration::
        getPMachineInitiator ()
        {
          return this->PMachineInitiator_.get ();
        }

        void SaesFunctionalityConfiguration::
        setPMachineInitiator (const PMachineInitiatorType& x)
        {
          this->PMachineInitiator_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setPMachineInitiator (::std::auto_ptr< PMachineInitiatorType > x)
        {
          this->PMachineInitiator_.set (x);
        }

        const SaesFunctionalityConfiguration::CardTypeControllerType& SaesFunctionalityConfiguration::
        getCardTypeController () const
        {
          return this->CardTypeController_.get ();
        }

        SaesFunctionalityConfiguration::CardTypeControllerType& SaesFunctionalityConfiguration::
        getCardTypeController ()
        {
          return this->CardTypeController_.get ();
        }

        void SaesFunctionalityConfiguration::
        setCardTypeController (const CardTypeControllerType& x)
        {
          this->CardTypeController_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setCardTypeController (::std::auto_ptr< CardTypeControllerType > x)
        {
          this->CardTypeController_.set (x);
        }

        const SaesFunctionalityConfiguration::PVFormTransformationType& SaesFunctionalityConfiguration::
        getPVFormTransformation () const
        {
          return this->PVFormTransformation_.get ();
        }

        SaesFunctionalityConfiguration::PVFormTransformationType& SaesFunctionalityConfiguration::
        getPVFormTransformation ()
        {
          return this->PVFormTransformation_.get ();
        }

        void SaesFunctionalityConfiguration::
        setPVFormTransformation (const PVFormTransformationType& x)
        {
          this->PVFormTransformation_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setPVFormTransformation (::std::auto_ptr< PVFormTransformationType > x)
        {
          this->PVFormTransformation_.set (x);
        }

        const SaesFunctionalityConfiguration::StructureInstallationType& SaesFunctionalityConfiguration::
        getStructureInstallation () const
        {
          return this->StructureInstallation_.get ();
        }

        SaesFunctionalityConfiguration::StructureInstallationType& SaesFunctionalityConfiguration::
        getStructureInstallation ()
        {
          return this->StructureInstallation_.get ();
        }

        void SaesFunctionalityConfiguration::
        setStructureInstallation (const StructureInstallationType& x)
        {
          this->StructureInstallation_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setStructureInstallation (::std::auto_ptr< StructureInstallationType > x)
        {
          this->StructureInstallation_.set (x);
        }

        const SaesFunctionalityConfiguration::EnqueueVoteConfigurationType& SaesFunctionalityConfiguration::
        getEnqueueVoteConfiguration () const
        {
          return this->EnqueueVoteConfiguration_.get ();
        }

        SaesFunctionalityConfiguration::EnqueueVoteConfigurationType& SaesFunctionalityConfiguration::
        getEnqueueVoteConfiguration ()
        {
          return this->EnqueueVoteConfiguration_.get ();
        }

        void SaesFunctionalityConfiguration::
        setEnqueueVoteConfiguration (const EnqueueVoteConfigurationType& x)
        {
          this->EnqueueVoteConfiguration_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setEnqueueVoteConfiguration (::std::auto_ptr< EnqueueVoteConfigurationType > x)
        {
          this->EnqueueVoteConfiguration_.set (x);
        }

        const SaesFunctionalityConfiguration::SystemRoleType& SaesFunctionalityConfiguration::
        getSystemRole () const
        {
          return this->SystemRole_.get ();
        }

        SaesFunctionalityConfiguration::SystemRoleType& SaesFunctionalityConfiguration::
        getSystemRole ()
        {
          return this->SystemRole_.get ();
        }

        void SaesFunctionalityConfiguration::
        setSystemRole (const SystemRoleType& x)
        {
          this->SystemRole_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setSystemRole (::std::auto_ptr< SystemRoleType > x)
        {
          this->SystemRole_.set (x);
        }

        const SaesFunctionalityConfiguration::LaunchConfigurationType& SaesFunctionalityConfiguration::
        getLaunchConfiguration () const
        {
          return this->LaunchConfiguration_.get ();
        }

        SaesFunctionalityConfiguration::LaunchConfigurationType& SaesFunctionalityConfiguration::
        getLaunchConfiguration ()
        {
          return this->LaunchConfiguration_.get ();
        }

        void SaesFunctionalityConfiguration::
        setLaunchConfiguration (const LaunchConfigurationType& x)
        {
          this->LaunchConfiguration_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setLaunchConfiguration (::std::auto_ptr< LaunchConfigurationType > x)
        {
          this->LaunchConfiguration_.set (x);
        }

        const SaesFunctionalityConfiguration::AlarmsConfigurationType& SaesFunctionalityConfiguration::
        getAlarmsConfiguration () const
        {
          return this->AlarmsConfiguration_.get ();
        }

        SaesFunctionalityConfiguration::AlarmsConfigurationType& SaesFunctionalityConfiguration::
        getAlarmsConfiguration ()
        {
          return this->AlarmsConfiguration_.get ();
        }

        void SaesFunctionalityConfiguration::
        setAlarmsConfiguration (const AlarmsConfigurationType& x)
        {
          this->AlarmsConfiguration_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setAlarmsConfiguration (::std::auto_ptr< AlarmsConfigurationType > x)
        {
          this->AlarmsConfiguration_.set (x);
        }

        const SaesFunctionalityConfiguration::OperationConfigurationType& SaesFunctionalityConfiguration::
        getOperationConfiguration () const
        {
          return this->OperationConfiguration_.get ();
        }

        SaesFunctionalityConfiguration::OperationConfigurationType& SaesFunctionalityConfiguration::
        getOperationConfiguration ()
        {
          return this->OperationConfiguration_.get ();
        }

        void SaesFunctionalityConfiguration::
        setOperationConfiguration (const OperationConfigurationType& x)
        {
          this->OperationConfiguration_.set (x);
        }

        void SaesFunctionalityConfiguration::
        setOperationConfiguration (::std::auto_ptr< OperationConfigurationType > x)
        {
          this->OperationConfiguration_.set (x);
        }


        // AlarmCategoryEnum
        // 

        AlarmCategoryEnum::
        AlarmCategoryEnum ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmCategoryEnum_literals_[v])
        {
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (const AlarmCategoryEnum& v,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        AlarmCategoryEnum& AlarmCategoryEnum::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmCategoryEnum_literals_[v]);

          return *this;
        }


        // AlarmBehaviorEnum
        // 

        AlarmBehaviorEnum::
        AlarmBehaviorEnum ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmBehaviorEnum_literals_[v])
        {
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const AlarmBehaviorEnum& v,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        AlarmBehaviorEnum& AlarmBehaviorEnum::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmBehaviorEnum_literals_[v]);

          return *this;
        }


        // AlarmEnum
        // 

        AlarmEnum::
        AlarmEnum ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        AlarmEnum::
        AlarmEnum (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmEnum_literals_[v])
        {
        }

        AlarmEnum::
        AlarmEnum (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmEnum::
        AlarmEnum (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmEnum::
        AlarmEnum (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmEnum::
        AlarmEnum (const AlarmEnum& v,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        AlarmEnum& AlarmEnum::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmEnum_literals_[v]);

          return *this;
        }


        // AlarmCommandEnum
        // 

        AlarmCommandEnum::
        AlarmCommandEnum ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        AlarmCommandEnum::
        AlarmCommandEnum (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmCommandEnum_literals_[v])
        {
        }

        AlarmCommandEnum::
        AlarmCommandEnum (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmCommandEnum::
        AlarmCommandEnum (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmCommandEnum::
        AlarmCommandEnum (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AlarmCommandEnum::
        AlarmCommandEnum (const AlarmCommandEnum& v,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        AlarmCommandEnum& AlarmCommandEnum::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_AlarmCommandEnum_literals_[v]);

          return *this;
        }


        // AlarmCommand
        // 

        const AlarmCommand::TypeOfCommandType& AlarmCommand::
        getTypeOfCommand () const
        {
          return this->TypeOfCommand_.get ();
        }

        AlarmCommand::TypeOfCommandType& AlarmCommand::
        getTypeOfCommand ()
        {
          return this->TypeOfCommand_.get ();
        }

        void AlarmCommand::
        setTypeOfCommand (const TypeOfCommandType& x)
        {
          this->TypeOfCommand_.set (x);
        }

        void AlarmCommand::
        setTypeOfCommand (::std::auto_ptr< TypeOfCommandType > x)
        {
          this->TypeOfCommand_.set (x);
        }

        const AlarmCommand::PeriodType& AlarmCommand::
        getPeriod () const
        {
          return this->Period_.get ();
        }

        AlarmCommand::PeriodType& AlarmCommand::
        getPeriod ()
        {
          return this->Period_.get ();
        }

        void AlarmCommand::
        setPeriod (const PeriodType& x)
        {
          this->Period_.set (x);
        }

        const AlarmCommand::IsOffType& AlarmCommand::
        getIsOff () const
        {
          return this->IsOff_.get ();
        }

        AlarmCommand::IsOffType& AlarmCommand::
        getIsOff ()
        {
          return this->IsOff_.get ();
        }

        void AlarmCommand::
        setIsOff (const IsOffType& x)
        {
          this->IsOff_.set (x);
        }


        // VotingExperienceControllerConfiguration
        // 

        const VotingExperienceControllerConfiguration::OperationTypeType& VotingExperienceControllerConfiguration::
        getOperationType () const
        {
          return this->OperationType_.get ();
        }

        VotingExperienceControllerConfiguration::OperationTypeType& VotingExperienceControllerConfiguration::
        getOperationType ()
        {
          return this->OperationType_.get ();
        }

        void VotingExperienceControllerConfiguration::
        setOperationType (const OperationTypeType& x)
        {
          this->OperationType_.set (x);
        }

        void VotingExperienceControllerConfiguration::
        setOperationType (::std::auto_ptr< OperationTypeType > x)
        {
          this->OperationType_.set (x);
        }

        const VotingExperienceControllerConfiguration::ValidateCardDataTypeType& VotingExperienceControllerConfiguration::
        getValidateCardDataType () const
        {
          return this->ValidateCardDataType_.get ();
        }

        VotingExperienceControllerConfiguration::ValidateCardDataTypeType& VotingExperienceControllerConfiguration::
        getValidateCardDataType ()
        {
          return this->ValidateCardDataType_.get ();
        }

        void VotingExperienceControllerConfiguration::
        setValidateCardDataType (const ValidateCardDataTypeType& x)
        {
          this->ValidateCardDataType_.set (x);
        }

        void VotingExperienceControllerConfiguration::
        setValidateCardDataType (::std::auto_ptr< ValidateCardDataTypeType > x)
        {
          this->ValidateCardDataType_.set (x);
        }

        const VotingExperienceControllerConfiguration::SkipCustomAttributeAutomaticType& VotingExperienceControllerConfiguration::
        getSkipCustomAttributeAutomatic () const
        {
          return this->SkipCustomAttributeAutomatic_.get ();
        }

        VotingExperienceControllerConfiguration::SkipCustomAttributeAutomaticType& VotingExperienceControllerConfiguration::
        getSkipCustomAttributeAutomatic ()
        {
          return this->SkipCustomAttributeAutomatic_.get ();
        }

        void VotingExperienceControllerConfiguration::
        setSkipCustomAttributeAutomatic (const SkipCustomAttributeAutomaticType& x)
        {
          this->SkipCustomAttributeAutomatic_.set (x);
        }

        const VotingExperienceControllerConfiguration::NavigateBetweenContestType& VotingExperienceControllerConfiguration::
        getNavigateBetweenContest () const
        {
          return this->NavigateBetweenContest_.get ();
        }

        VotingExperienceControllerConfiguration::NavigateBetweenContestType& VotingExperienceControllerConfiguration::
        getNavigateBetweenContest ()
        {
          return this->NavigateBetweenContest_.get ();
        }

        void VotingExperienceControllerConfiguration::
        setNavigateBetweenContest (const NavigateBetweenContestType& x)
        {
          this->NavigateBetweenContest_.set (x);
        }


        // VotingExperienceControllerOperationType
        // 

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_VotingExperienceControllerOperationType_literals_[v])
        {
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const VotingExperienceControllerOperationType& v,
                                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        VotingExperienceControllerOperationType& VotingExperienceControllerOperationType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_VotingExperienceControllerOperationType_literals_[v]);

          return *this;
        }


        // VotingExperienceControllerValidateCardDataType
        // 

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_VotingExperienceControllerValidateCardDataType_literals_[v])
        {
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const VotingExperienceControllerValidateCardDataType& v,
                                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        VotingExperienceControllerValidateCardDataType& VotingExperienceControllerValidateCardDataType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_VotingExperienceControllerValidateCardDataType_literals_[v]);

          return *this;
        }


        // VoteConfiguration
        // 

        const VoteConfiguration::FillVoteType& VoteConfiguration::
        getFillVote () const
        {
          return this->FillVote_.get ();
        }

        VoteConfiguration::FillVoteType& VoteConfiguration::
        getFillVote ()
        {
          return this->FillVote_.get ();
        }

        void VoteConfiguration::
        setFillVote (const FillVoteType& x)
        {
          this->FillVote_.set (x);
        }


        // BlankVoteConfiguration
        // 

        const BlankVoteConfiguration::BlankVoteType& BlankVoteConfiguration::
        getBlankVote () const
        {
          return this->BlankVote_.get ();
        }

        BlankVoteConfiguration::BlankVoteType& BlankVoteConfiguration::
        getBlankVote ()
        {
          return this->BlankVote_.get ();
        }

        void BlankVoteConfiguration::
        setBlankVote (const BlankVoteType& x)
        {
          this->BlankVote_.set (x);
        }

        void BlankVoteConfiguration::
        setBlankVote (::std::auto_ptr< BlankVoteType > x)
        {
          this->BlankVote_.set (x);
        }

        const BlankVoteConfiguration::BlankVoteListContestCodeType& BlankVoteConfiguration::
        getBlankVoteListContestCode () const
        {
          return this->BlankVoteListContestCode_.get ();
        }

        BlankVoteConfiguration::BlankVoteListContestCodeType& BlankVoteConfiguration::
        getBlankVoteListContestCode ()
        {
          return this->BlankVoteListContestCode_.get ();
        }

        void BlankVoteConfiguration::
        setBlankVoteListContestCode (const BlankVoteListContestCodeType& x)
        {
          this->BlankVoteListContestCode_.set (x);
        }

        void BlankVoteConfiguration::
        setBlankVoteListContestCode (::std::auto_ptr< BlankVoteListContestCodeType > x)
        {
          this->BlankVoteListContestCode_.set (x);
        }


        // BlankVoteType
        // 

        BlankVoteType::
        BlankVoteType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        BlankVoteType::
        BlankVoteType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_BlankVoteType_literals_[v])
        {
        }

        BlankVoteType::
        BlankVoteType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BlankVoteType::
        BlankVoteType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BlankVoteType::
        BlankVoteType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BlankVoteType::
        BlankVoteType (const BlankVoteType& v,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        BlankVoteType& BlankVoteType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_BlankVoteType_literals_[v]);

          return *this;
        }


        // BlankVoteListContestCodeType
        // 

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_BlankVoteListContestCodeType_literals_[v])
        {
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const BlankVoteListContestCodeType& v,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        BlankVoteListContestCodeType& BlankVoteListContestCodeType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_BlankVoteListContestCodeType_literals_[v]);

          return *this;
        }


        // SystemRoleConfiguration
        // 

        const SystemRoleConfiguration::RoleSequence& SystemRoleConfiguration::
        getRole () const
        {
          return this->role_;
        }

        SystemRoleConfiguration::RoleSequence& SystemRoleConfiguration::
        getRole ()
        {
          return this->role_;
        }

        void SystemRoleConfiguration::
        setRole (const RoleSequence& s)
        {
          this->role_ = s;
        }


        // VMachineInitiatorConfiguration
        // 

        const VMachineInitiatorConfiguration::MessageRemoveFlashTimeType& VMachineInitiatorConfiguration::
        getMessageRemoveFlashTime () const
        {
          return this->MessageRemoveFlashTime_.get ();
        }

        VMachineInitiatorConfiguration::MessageRemoveFlashTimeType& VMachineInitiatorConfiguration::
        getMessageRemoveFlashTime ()
        {
          return this->MessageRemoveFlashTime_.get ();
        }

        void VMachineInitiatorConfiguration::
        setMessageRemoveFlashTime (const MessageRemoveFlashTimeType& x)
        {
          this->MessageRemoveFlashTime_.set (x);
        }

        const VMachineInitiatorConfiguration::SuccessMessageTimeType& VMachineInitiatorConfiguration::
        getSuccessMessageTime () const
        {
          return this->SuccessMessageTime_.get ();
        }

        VMachineInitiatorConfiguration::SuccessMessageTimeType& VMachineInitiatorConfiguration::
        getSuccessMessageTime ()
        {
          return this->SuccessMessageTime_.get ();
        }

        void VMachineInitiatorConfiguration::
        setSuccessMessageTime (const SuccessMessageTimeType& x)
        {
          this->SuccessMessageTime_.set (x);
        }

        const VMachineInitiatorConfiguration::StepTimeType& VMachineInitiatorConfiguration::
        getStepTime () const
        {
          return this->StepTime_.get ();
        }

        VMachineInitiatorConfiguration::StepTimeType& VMachineInitiatorConfiguration::
        getStepTime ()
        {
          return this->StepTime_.get ();
        }

        void VMachineInitiatorConfiguration::
        setStepTime (const StepTimeType& x)
        {
          this->StepTime_.set (x);
        }


        // PMachineInitiatorConfiguration
        // 

        const PMachineInitiatorConfiguration::SuccessMessageTimeType& PMachineInitiatorConfiguration::
        getSuccessMessageTime () const
        {
          return this->SuccessMessageTime_.get ();
        }

        PMachineInitiatorConfiguration::SuccessMessageTimeType& PMachineInitiatorConfiguration::
        getSuccessMessageTime ()
        {
          return this->SuccessMessageTime_.get ();
        }

        void PMachineInitiatorConfiguration::
        setSuccessMessageTime (const SuccessMessageTimeType& x)
        {
          this->SuccessMessageTime_.set (x);
        }

        const PMachineInitiatorConfiguration::StepTimeType& PMachineInitiatorConfiguration::
        getStepTime () const
        {
          return this->StepTime_.get ();
        }

        PMachineInitiatorConfiguration::StepTimeType& PMachineInitiatorConfiguration::
        getStepTime ()
        {
          return this->StepTime_.get ();
        }

        void PMachineInitiatorConfiguration::
        setStepTime (const StepTimeType& x)
        {
          this->StepTime_.set (x);
        }


        // SystemRoleType
        // 

        SystemRoleType::
        SystemRoleType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SystemRoleType::
        SystemRoleType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SystemRoleType_literals_[v])
        {
        }

        SystemRoleType::
        SystemRoleType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SystemRoleType::
        SystemRoleType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SystemRoleType::
        SystemRoleType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SystemRoleType::
        SystemRoleType (const SystemRoleType& v,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SystemRoleType& SystemRoleType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SystemRoleType_literals_[v]);

          return *this;
        }


        // OperationConfiguration
        // 

        const OperationConfiguration::ConfigurationResetType& OperationConfiguration::
        getConfigurationReset () const
        {
          return this->ConfigurationReset_.get ();
        }

        OperationConfiguration::ConfigurationResetType& OperationConfiguration::
        getConfigurationReset ()
        {
          return this->ConfigurationReset_.get ();
        }

        void OperationConfiguration::
        setConfigurationReset (const ConfigurationResetType& x)
        {
          this->ConfigurationReset_.set (x);
        }

        const OperationConfiguration::StartOpenElectionType& OperationConfiguration::
        getStartOpenElection () const
        {
          return this->StartOpenElection_.get ();
        }

        OperationConfiguration::StartOpenElectionType& OperationConfiguration::
        getStartOpenElection ()
        {
          return this->StartOpenElection_.get ();
        }

        void OperationConfiguration::
        setStartOpenElection (const StartOpenElectionType& x)
        {
          this->StartOpenElection_.set (x);
        }

        const OperationConfiguration::DiagnosesConsideredApprovedType& OperationConfiguration::
        getDiagnosesConsideredApproved () const
        {
          return this->DiagnosesConsideredApproved_.get ();
        }

        OperationConfiguration::DiagnosesConsideredApprovedType& OperationConfiguration::
        getDiagnosesConsideredApproved ()
        {
          return this->DiagnosesConsideredApproved_.get ();
        }

        void OperationConfiguration::
        setDiagnosesConsideredApproved (const DiagnosesConsideredApprovedType& x)
        {
          this->DiagnosesConsideredApproved_.set (x);
        }

        const OperationConfiguration::SimulateVotesType& OperationConfiguration::
        getSimulateVotes () const
        {
          return this->SimulateVotes_.get ();
        }

        OperationConfiguration::SimulateVotesType& OperationConfiguration::
        getSimulateVotes ()
        {
          return this->SimulateVotes_.get ();
        }

        void OperationConfiguration::
        setSimulateVotes (const SimulateVotesType& x)
        {
          this->SimulateVotes_.set (x);
        }


        // EnqueueVoteConfiguration
        // 

        const EnqueueVoteConfiguration::CleanVoteRepeatedType& EnqueueVoteConfiguration::
        getCleanVoteRepeated () const
        {
          return this->CleanVoteRepeated_.get ();
        }

        EnqueueVoteConfiguration::CleanVoteRepeatedType& EnqueueVoteConfiguration::
        getCleanVoteRepeated ()
        {
          return this->CleanVoteRepeated_.get ();
        }

        void EnqueueVoteConfiguration::
        setCleanVoteRepeated (const CleanVoteRepeatedType& x)
        {
          this->CleanVoteRepeated_.set (x);
        }


        // CardTypeController
        // 

        CardTypeController::
        CardTypeController ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        CardTypeController::
        CardTypeController (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_CardTypeController_literals_[v])
        {
        }

        CardTypeController::
        CardTypeController (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CardTypeController::
        CardTypeController (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CardTypeController::
        CardTypeController (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CardTypeController::
        CardTypeController (const CardTypeController& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        CardTypeController& CardTypeController::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_CardTypeController_literals_[v]);

          return *this;
        }


        // PVFormTransformationConfig
        // 

        const PVFormTransformationConfig::TypeType& PVFormTransformationConfig::
        getType () const
        {
          return this->type_.get ();
        }

        PVFormTransformationConfig::TypeType& PVFormTransformationConfig::
        getType ()
        {
          return this->type_.get ();
        }

        void PVFormTransformationConfig::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void PVFormTransformationConfig::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }

        const PVFormTransformationConfig::FopConfigFileType& PVFormTransformationConfig::
        getFopConfigFile () const
        {
          return this->FopConfigFile_.get ();
        }

        PVFormTransformationConfig::FopConfigFileType& PVFormTransformationConfig::
        getFopConfigFile ()
        {
          return this->FopConfigFile_.get ();
        }

        void PVFormTransformationConfig::
        setFopConfigFile (const FopConfigFileType& x)
        {
          this->FopConfigFile_.set (x);
        }

        void PVFormTransformationConfig::
        setFopConfigFile (::std::auto_ptr< FopConfigFileType > x)
        {
          this->FopConfigFile_.set (x);
        }


        // PVFormTransformationType
        // 

        PVFormTransformationType::
        PVFormTransformationType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        PVFormTransformationType::
        PVFormTransformationType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_PVFormTransformationType_literals_[v])
        {
        }

        PVFormTransformationType::
        PVFormTransformationType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PVFormTransformationType::
        PVFormTransformationType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PVFormTransformationType::
        PVFormTransformationType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PVFormTransformationType::
        PVFormTransformationType (const PVFormTransformationType& v,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        PVFormTransformationType& PVFormTransformationType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_PVFormTransformationType_literals_[v]);

          return *this;
        }


        // StructureInstallationType
        // 

        StructureInstallationType::
        StructureInstallationType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        StructureInstallationType::
        StructureInstallationType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_StructureInstallationType_literals_[v])
        {
        }

        StructureInstallationType::
        StructureInstallationType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        StructureInstallationType::
        StructureInstallationType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        StructureInstallationType::
        StructureInstallationType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        StructureInstallationType::
        StructureInstallationType (const StructureInstallationType& v,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        StructureInstallationType& StructureInstallationType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_StructureInstallationType_literals_[v]);

          return *this;
        }


        // RuleTransformation
        // 

        RuleTransformation::
        RuleTransformation ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        RuleTransformation::
        RuleTransformation (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_RuleTransformation_literals_[v])
        {
        }

        RuleTransformation::
        RuleTransformation (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        RuleTransformation::
        RuleTransformation (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        RuleTransformation::
        RuleTransformation (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        RuleTransformation::
        RuleTransformation (const RuleTransformation& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        RuleTransformation& RuleTransformation::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_RuleTransformation_literals_[v]);

          return *this;
        }


        // LaunchConfiguration
        // 

        const LaunchConfiguration::ExecuteInitialCalibrationInAppTypeVotingOnlyType& LaunchConfiguration::
        getExecuteInitialCalibrationInAppTypeVotingOnly () const
        {
          return this->ExecuteInitialCalibrationInAppTypeVotingOnly_.get ();
        }

        LaunchConfiguration::ExecuteInitialCalibrationInAppTypeVotingOnlyType& LaunchConfiguration::
        getExecuteInitialCalibrationInAppTypeVotingOnly ()
        {
          return this->ExecuteInitialCalibrationInAppTypeVotingOnly_.get ();
        }

        void LaunchConfiguration::
        setExecuteInitialCalibrationInAppTypeVotingOnly (const ExecuteInitialCalibrationInAppTypeVotingOnlyType& x)
        {
          this->ExecuteInitialCalibrationInAppTypeVotingOnly_.set (x);
        }

        const LaunchConfiguration::ExecutePMSetupInAppTypeDiagnosticsType& LaunchConfiguration::
        getExecutePMSetupInAppTypeDiagnostics () const
        {
          return this->ExecutePMSetupInAppTypeDiagnostics_.get ();
        }

        LaunchConfiguration::ExecutePMSetupInAppTypeDiagnosticsType& LaunchConfiguration::
        getExecutePMSetupInAppTypeDiagnostics ()
        {
          return this->ExecutePMSetupInAppTypeDiagnostics_.get ();
        }

        void LaunchConfiguration::
        setExecutePMSetupInAppTypeDiagnostics (const ExecutePMSetupInAppTypeDiagnosticsType& x)
        {
          this->ExecutePMSetupInAppTypeDiagnostics_.set (x);
        }

        const LaunchConfiguration::PMSetupCommandType& LaunchConfiguration::
        getPMSetupCommand () const
        {
          return this->PMSetupCommand_.get ();
        }

        LaunchConfiguration::PMSetupCommandType& LaunchConfiguration::
        getPMSetupCommand ()
        {
          return this->PMSetupCommand_.get ();
        }

        void LaunchConfiguration::
        setPMSetupCommand (const PMSetupCommandType& x)
        {
          this->PMSetupCommand_.set (x);
        }

        void LaunchConfiguration::
        setPMSetupCommand (::std::auto_ptr< PMSetupCommandType > x)
        {
          this->PMSetupCommand_.set (x);
        }

        const LaunchConfiguration::AppTypeType& LaunchConfiguration::
        getAppType () const
        {
          return this->AppType_.get ();
        }

        LaunchConfiguration::AppTypeType& LaunchConfiguration::
        getAppType ()
        {
          return this->AppType_.get ();
        }

        void LaunchConfiguration::
        setAppType (const AppTypeType& x)
        {
          this->AppType_.set (x);
        }

        void LaunchConfiguration::
        setAppType (::std::auto_ptr< AppTypeType > x)
        {
          this->AppType_.set (x);
        }

        const LaunchConfiguration::SkipAutoDiagnosticType& LaunchConfiguration::
        getSkipAutoDiagnostic () const
        {
          return this->SkipAutoDiagnostic_.get ();
        }

        LaunchConfiguration::SkipAutoDiagnosticType& LaunchConfiguration::
        getSkipAutoDiagnostic ()
        {
          return this->SkipAutoDiagnostic_.get ();
        }

        void LaunchConfiguration::
        setSkipAutoDiagnostic (const SkipAutoDiagnosticType& x)
        {
          this->SkipAutoDiagnostic_.set (x);
        }

        const LaunchConfiguration::PrintInstallationReportPMType& LaunchConfiguration::
        getPrintInstallationReportPM () const
        {
          return this->PrintInstallationReportPM_.get ();
        }

        LaunchConfiguration::PrintInstallationReportPMType& LaunchConfiguration::
        getPrintInstallationReportPM ()
        {
          return this->PrintInstallationReportPM_.get ();
        }

        void LaunchConfiguration::
        setPrintInstallationReportPM (const PrintInstallationReportPMType& x)
        {
          this->PrintInstallationReportPM_.set (x);
        }


        // AlarmsConfiguration
        // 

        const AlarmsConfiguration::AlarmSequence& AlarmsConfiguration::
        getAlarm () const
        {
          return this->Alarm_;
        }

        AlarmsConfiguration::AlarmSequence& AlarmsConfiguration::
        getAlarm ()
        {
          return this->Alarm_;
        }

        void AlarmsConfiguration::
        setAlarm (const AlarmSequence& s)
        {
          this->Alarm_ = s;
        }


        // Role
        // 

        const Role::KeyType& Role::
        getKey () const
        {
          return this->key_.get ();
        }

        Role::KeyType& Role::
        getKey ()
        {
          return this->key_.get ();
        }

        void Role::
        setKey (const KeyType& x)
        {
          this->key_.set (x);
        }

        void Role::
        setKey (::std::auto_ptr< KeyType > x)
        {
          this->key_.set (x);
        }

        const Role::NameKeyType& Role::
        getNameKey () const
        {
          return this->nameKey_.get ();
        }

        Role::NameKeyType& Role::
        getNameKey ()
        {
          return this->nameKey_.get ();
        }

        void Role::
        setNameKey (const NameKeyType& x)
        {
          this->nameKey_.set (x);
        }

        void Role::
        setNameKey (::std::auto_ptr< NameKeyType > x)
        {
          this->nameKey_.set (x);
        }

        const Role::DescriptionKeyType& Role::
        getDescriptionKey () const
        {
          return this->descriptionKey_.get ();
        }

        Role::DescriptionKeyType& Role::
        getDescriptionKey ()
        {
          return this->descriptionKey_.get ();
        }

        void Role::
        setDescriptionKey (const DescriptionKeyType& x)
        {
          this->descriptionKey_.set (x);
        }

        void Role::
        setDescriptionKey (::std::auto_ptr< DescriptionKeyType > x)
        {
          this->descriptionKey_.set (x);
        }

        const Role::TypeType& Role::
        getType () const
        {
          return this->type_.get ();
        }

        Role::TypeType& Role::
        getType ()
        {
          return this->type_.get ();
        }

        void Role::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void Role::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }


        // AppType
        // 

        AppType::
        AppType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        AppType::
        AppType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_AppType_literals_[v])
        {
        }

        AppType::
        AppType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AppType::
        AppType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AppType::
        AppType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        AppType::
        AppType (const AppType& v,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        AppType& AppType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_AppType_literals_[v]);

          return *this;
        }


        // Alarm
        // 

        const Alarm::AlarmCommandsSequence& Alarm::
        getAlarmCommands () const
        {
          return this->AlarmCommands_;
        }

        Alarm::AlarmCommandsSequence& Alarm::
        getAlarmCommands ()
        {
          return this->AlarmCommands_;
        }

        void Alarm::
        setAlarmCommands (const AlarmCommandsSequence& s)
        {
          this->AlarmCommands_ = s;
        }

        const Alarm::AlarmCategoryType& Alarm::
        getAlarmCategory () const
        {
          return this->AlarmCategory_.get ();
        }

        Alarm::AlarmCategoryType& Alarm::
        getAlarmCategory ()
        {
          return this->AlarmCategory_.get ();
        }

        void Alarm::
        setAlarmCategory (const AlarmCategoryType& x)
        {
          this->AlarmCategory_.set (x);
        }

        void Alarm::
        setAlarmCategory (::std::auto_ptr< AlarmCategoryType > x)
        {
          this->AlarmCategory_.set (x);
        }

        const Alarm::AlarmBehaviorType& Alarm::
        getAlarmBehavior () const
        {
          return this->AlarmBehavior_.get ();
        }

        Alarm::AlarmBehaviorType& Alarm::
        getAlarmBehavior ()
        {
          return this->AlarmBehavior_.get ();
        }

        void Alarm::
        setAlarmBehavior (const AlarmBehaviorType& x)
        {
          this->AlarmBehavior_.set (x);
        }

        void Alarm::
        setAlarmBehavior (::std::auto_ptr< AlarmBehaviorType > x)
        {
          this->AlarmBehavior_.set (x);
        }

        const Alarm::TypeOfAlarmType& Alarm::
        getTypeOfAlarm () const
        {
          return this->TypeOfAlarm_.get ();
        }

        Alarm::TypeOfAlarmType& Alarm::
        getTypeOfAlarm ()
        {
          return this->TypeOfAlarm_.get ();
        }

        void Alarm::
        setTypeOfAlarm (const TypeOfAlarmType& x)
        {
          this->TypeOfAlarm_.set (x);
        }

        void Alarm::
        setTypeOfAlarm (::std::auto_ptr< TypeOfAlarmType > x)
        {
          this->TypeOfAlarm_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        // SaesFunctionalityConfiguration
        //

        SaesFunctionalityConfiguration::
        SaesFunctionalityConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          VotingExperienceController_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          Vote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          BlankVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VMachineInitiator_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PMachineInitiator_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CardTypeController_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormTransformation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StructureInstallation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          EnqueueVoteConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SystemRole_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LaunchConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmsConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          OperationConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesFunctionalityConfiguration::
        SaesFunctionalityConfiguration (const VotingExperienceControllerType& VotingExperienceController,
                                        const VoteType& Vote,
                                        const BlankVoteType& BlankVote,
                                        const VMachineInitiatorType& VMachineInitiator,
                                        const PMachineInitiatorType& PMachineInitiator,
                                        const CardTypeControllerType& CardTypeController,
                                        const PVFormTransformationType& PVFormTransformation,
                                        const StructureInstallationType& StructureInstallation,
                                        const EnqueueVoteConfigurationType& EnqueueVoteConfiguration,
                                        const SystemRoleType& SystemRole,
                                        const LaunchConfigurationType& LaunchConfiguration,
                                        const AlarmsConfigurationType& AlarmsConfiguration,
                                        const OperationConfigurationType& OperationConfiguration)
        : ::Smartmatic::ConfigurationTypes::Type (),
          VotingExperienceController_ (VotingExperienceController, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Vote_ (Vote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BlankVote_ (BlankVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VMachineInitiator_ (VMachineInitiator, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PMachineInitiator_ (PMachineInitiator, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CardTypeController_ (CardTypeController, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormTransformation_ (PVFormTransformation, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StructureInstallation_ (StructureInstallation, ::Smartmatic::ConfigurationTypes::Flags (), this),
          EnqueueVoteConfiguration_ (EnqueueVoteConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SystemRole_ (SystemRole, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LaunchConfiguration_ (LaunchConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmsConfiguration_ (AlarmsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          OperationConfiguration_ (OperationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesFunctionalityConfiguration::
        SaesFunctionalityConfiguration (::std::auto_ptr< VotingExperienceControllerType >& VotingExperienceController,
                                        ::std::auto_ptr< VoteType >& Vote,
                                        ::std::auto_ptr< BlankVoteType >& BlankVote,
                                        ::std::auto_ptr< VMachineInitiatorType >& VMachineInitiator,
                                        ::std::auto_ptr< PMachineInitiatorType >& PMachineInitiator,
                                        const CardTypeControllerType& CardTypeController,
                                        ::std::auto_ptr< PVFormTransformationType >& PVFormTransformation,
                                        const StructureInstallationType& StructureInstallation,
                                        ::std::auto_ptr< EnqueueVoteConfigurationType >& EnqueueVoteConfiguration,
                                        ::std::auto_ptr< SystemRoleType >& SystemRole,
                                        ::std::auto_ptr< LaunchConfigurationType >& LaunchConfiguration,
                                        ::std::auto_ptr< AlarmsConfigurationType >& AlarmsConfiguration,
                                        ::std::auto_ptr< OperationConfigurationType >& OperationConfiguration)
        : ::Smartmatic::ConfigurationTypes::Type (),
          VotingExperienceController_ (VotingExperienceController, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Vote_ (Vote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BlankVote_ (BlankVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VMachineInitiator_ (VMachineInitiator, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PMachineInitiator_ (PMachineInitiator, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CardTypeController_ (CardTypeController, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormTransformation_ (PVFormTransformation, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StructureInstallation_ (StructureInstallation, ::Smartmatic::ConfigurationTypes::Flags (), this),
          EnqueueVoteConfiguration_ (EnqueueVoteConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SystemRole_ (SystemRole, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LaunchConfiguration_ (LaunchConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmsConfiguration_ (AlarmsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          OperationConfiguration_ (OperationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesFunctionalityConfiguration::
        SaesFunctionalityConfiguration (const SaesFunctionalityConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          VotingExperienceController_ (x.VotingExperienceController_, f, this),
          Vote_ (x.Vote_, f, this),
          BlankVote_ (x.BlankVote_, f, this),
          VMachineInitiator_ (x.VMachineInitiator_, f, this),
          PMachineInitiator_ (x.PMachineInitiator_, f, this),
          CardTypeController_ (x.CardTypeController_, f, this),
          PVFormTransformation_ (x.PVFormTransformation_, f, this),
          StructureInstallation_ (x.StructureInstallation_, f, this),
          EnqueueVoteConfiguration_ (x.EnqueueVoteConfiguration_, f, this),
          SystemRole_ (x.SystemRole_, f, this),
          LaunchConfiguration_ (x.LaunchConfiguration_, f, this),
          AlarmsConfiguration_ (x.AlarmsConfiguration_, f, this),
          OperationConfiguration_ (x.OperationConfiguration_, f, this)
        {
        }

        SaesFunctionalityConfiguration::
        SaesFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          VotingExperienceController_ (f, this),
          Vote_ (f, this),
          BlankVote_ (f, this),
          VMachineInitiator_ (f, this),
          PMachineInitiator_ (f, this),
          CardTypeController_ (f, this),
          PVFormTransformation_ (f, this),
          StructureInstallation_ (f, this),
          EnqueueVoteConfiguration_ (f, this),
          SystemRole_ (f, this),
          LaunchConfiguration_ (f, this),
          AlarmsConfiguration_ (f, this),
          OperationConfiguration_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SaesFunctionalityConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // VotingExperienceController
            //
            if (n.name () == "VotingExperienceController" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< VotingExperienceControllerType > r (
                VotingExperienceControllerTraits::create (i, f, this));

              if (!VotingExperienceController_.present ())
              {
                this->VotingExperienceController_.set (r);
                continue;
              }
            }

            // Vote
            //
            if (n.name () == "Vote" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< VoteType > r (
                VoteTraits::create (i, f, this));

              if (!Vote_.present ())
              {
                this->Vote_.set (r);
                continue;
              }
            }

            // BlankVote
            //
            if (n.name () == "BlankVote" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< BlankVoteType > r (
                BlankVoteTraits::create (i, f, this));

              if (!BlankVote_.present ())
              {
                this->BlankVote_.set (r);
                continue;
              }
            }

            // VMachineInitiator
            //
            if (n.name () == "VMachineInitiator" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< VMachineInitiatorType > r (
                VMachineInitiatorTraits::create (i, f, this));

              if (!VMachineInitiator_.present ())
              {
                this->VMachineInitiator_.set (r);
                continue;
              }
            }

            // PMachineInitiator
            //
            if (n.name () == "PMachineInitiator" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< PMachineInitiatorType > r (
                PMachineInitiatorTraits::create (i, f, this));

              if (!PMachineInitiator_.present ())
              {
                this->PMachineInitiator_.set (r);
                continue;
              }
            }

            // CardTypeController
            //
            if (n.name () == "CardTypeController" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< CardTypeControllerType > r (
                CardTypeControllerTraits::create (i, f, this));

              if (!CardTypeController_.present ())
              {
                this->CardTypeController_.set (r);
                continue;
              }
            }

            // PVFormTransformation
            //
            if (n.name () == "PVFormTransformation" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< PVFormTransformationType > r (
                PVFormTransformationTraits::create (i, f, this));

              if (!PVFormTransformation_.present ())
              {
                this->PVFormTransformation_.set (r);
                continue;
              }
            }

            // StructureInstallation
            //
            if (n.name () == "StructureInstallation" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< StructureInstallationType > r (
                StructureInstallationTraits::create (i, f, this));

              if (!StructureInstallation_.present ())
              {
                this->StructureInstallation_.set (r);
                continue;
              }
            }

            // EnqueueVoteConfiguration
            //
            if (n.name () == "EnqueueVoteConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< EnqueueVoteConfigurationType > r (
                EnqueueVoteConfigurationTraits::create (i, f, this));

              if (!EnqueueVoteConfiguration_.present ())
              {
                this->EnqueueVoteConfiguration_.set (r);
                continue;
              }
            }

            // SystemRole
            //
            if (n.name () == "SystemRole" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< SystemRoleType > r (
                SystemRoleTraits::create (i, f, this));

              if (!SystemRole_.present ())
              {
                this->SystemRole_.set (r);
                continue;
              }
            }

            // LaunchConfiguration
            //
            if (n.name () == "LaunchConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< LaunchConfigurationType > r (
                LaunchConfigurationTraits::create (i, f, this));

              if (!LaunchConfiguration_.present ())
              {
                this->LaunchConfiguration_.set (r);
                continue;
              }
            }

            // AlarmsConfiguration
            //
            if (n.name () == "AlarmsConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< AlarmsConfigurationType > r (
                AlarmsConfigurationTraits::create (i, f, this));

              if (!AlarmsConfiguration_.present ())
              {
                this->AlarmsConfiguration_.set (r);
                continue;
              }
            }

            // OperationConfiguration
            //
            if (n.name () == "OperationConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< OperationConfigurationType > r (
                OperationConfigurationTraits::create (i, f, this));

              if (!OperationConfiguration_.present ())
              {
                this->OperationConfiguration_.set (r);
                continue;
              }
            }

            break;
          }

          if (!VotingExperienceController_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotingExperienceController",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!Vote_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Vote",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!BlankVote_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BlankVote",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!VMachineInitiator_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VMachineInitiator",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!PMachineInitiator_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PMachineInitiator",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!CardTypeController_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardTypeController",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!PVFormTransformation_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PVFormTransformation",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!StructureInstallation_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StructureInstallation",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!EnqueueVoteConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EnqueueVoteConfiguration",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!SystemRole_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SystemRole",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!LaunchConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LaunchConfiguration",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!AlarmsConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AlarmsConfiguration",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!OperationConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OperationConfiguration",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }
        }

        SaesFunctionalityConfiguration* SaesFunctionalityConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SaesFunctionalityConfiguration (*this, f, c);
        }

        SaesFunctionalityConfiguration::
        ~SaesFunctionalityConfiguration ()
        {
        }

        bool
        operator== (const SaesFunctionalityConfiguration& x, const SaesFunctionalityConfiguration& y)
        {
          if (!(x.getVotingExperienceController () == y.getVotingExperienceController ()))
            return false;

          if (!(x.getVote () == y.getVote ()))
            return false;

          if (!(x.getBlankVote () == y.getBlankVote ()))
            return false;

          if (!(x.getVMachineInitiator () == y.getVMachineInitiator ()))
            return false;

          if (!(x.getPMachineInitiator () == y.getPMachineInitiator ()))
            return false;

          if (!(x.getCardTypeController () == y.getCardTypeController ()))
            return false;

          if (!(x.getPVFormTransformation () == y.getPVFormTransformation ()))
            return false;

          if (!(x.getStructureInstallation () == y.getStructureInstallation ()))
            return false;

          if (!(x.getEnqueueVoteConfiguration () == y.getEnqueueVoteConfiguration ()))
            return false;

          if (!(x.getSystemRole () == y.getSystemRole ()))
            return false;

          if (!(x.getLaunchConfiguration () == y.getLaunchConfiguration ()))
            return false;

          if (!(x.getAlarmsConfiguration () == y.getAlarmsConfiguration ()))
            return false;

          if (!(x.getOperationConfiguration () == y.getOperationConfiguration ()))
            return false;

          return true;
        }

        bool
        operator!= (const SaesFunctionalityConfiguration& x, const SaesFunctionalityConfiguration& y)
        {
          return !(x == y);
        }

        // AlarmCategoryEnum
        //

        AlarmCategoryEnum::
        AlarmCategoryEnum (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_AlarmCategoryEnum_convert ();
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_AlarmCategoryEnum_convert ();
        }

        AlarmCategoryEnum::
        AlarmCategoryEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_AlarmCategoryEnum_convert ();
        }

        AlarmCategoryEnum* AlarmCategoryEnum::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AlarmCategoryEnum (*this, f, c);
        }

        AlarmCategoryEnum::Value AlarmCategoryEnum::
        _xsd_AlarmCategoryEnum_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AlarmCategoryEnum_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_AlarmCategoryEnum_indexes_,
                            _xsd_AlarmCategoryEnum_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_AlarmCategoryEnum_indexes_ + 2 || _xsd_AlarmCategoryEnum_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const AlarmCategoryEnum::
        _xsd_AlarmCategoryEnum_literals_[2] =
        {
          "CriticalAlarm",
          "RegularAlarm"
        };

        const AlarmCategoryEnum::Value AlarmCategoryEnum::
        _xsd_AlarmCategoryEnum_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::AlarmCategoryEnum::CONFIGURATION_CRITICALALARM,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmCategoryEnum::CONFIGURATION_REGULARALARM
        };

        // AlarmBehaviorEnum
        //

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_AlarmBehaviorEnum_convert ();
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_AlarmBehaviorEnum_convert ();
        }

        AlarmBehaviorEnum::
        AlarmBehaviorEnum (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_AlarmBehaviorEnum_convert ();
        }

        AlarmBehaviorEnum* AlarmBehaviorEnum::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AlarmBehaviorEnum (*this, f, c);
        }

        AlarmBehaviorEnum::Value AlarmBehaviorEnum::
        _xsd_AlarmBehaviorEnum_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AlarmBehaviorEnum_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_AlarmBehaviorEnum_indexes_,
                            _xsd_AlarmBehaviorEnum_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_AlarmBehaviorEnum_indexes_ + 2 || _xsd_AlarmBehaviorEnum_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const AlarmBehaviorEnum::
        _xsd_AlarmBehaviorEnum_literals_[2] =
        {
          "GoAuthentication",
          "Wait"
        };

        const AlarmBehaviorEnum::Value AlarmBehaviorEnum::
        _xsd_AlarmBehaviorEnum_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::AlarmBehaviorEnum::CONFIGURATION_GOAUTHENTICATION,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmBehaviorEnum::CONFIGURATION_WAIT
        };

        // AlarmEnum
        //

        AlarmEnum::
        AlarmEnum (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_AlarmEnum_convert ();
        }

        AlarmEnum::
        AlarmEnum (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_AlarmEnum_convert ();
        }

        AlarmEnum::
        AlarmEnum (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_AlarmEnum_convert ();
        }

        AlarmEnum* AlarmEnum::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AlarmEnum (*this, f, c);
        }

        AlarmEnum::Value AlarmEnum::
        _xsd_AlarmEnum_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AlarmEnum_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_AlarmEnum_indexes_,
                            _xsd_AlarmEnum_indexes_ + 18,
                            *this,
                            c));

          if (i == _xsd_AlarmEnum_indexes_ + 18 || _xsd_AlarmEnum_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const AlarmEnum::
        _xsd_AlarmEnum_literals_[18] =
        {
          "UnableToRead",
          "UnableToWrite",
          "CryptoError",
          "InvalidContent",
          "CardUsed",
          "CardValidityPeriodExpired",
          "InvalidVotingData",
          "PrinterNeopAfterVote",
          "VotePrintingFailure",
          "PrinterNotReadyForVote",
          "Timeout",
          "CardNotRemovedAfterVoting",
          "CardExtractionCounter",
          "PrinterNeopBeforeVote",
          "AlarmBoxDisconnected",
          "AlarmBoxConnected",
          "CardReaderUnresponsive",
          "Unexpected"
        };

        const AlarmEnum::Value AlarmEnum::
        _xsd_AlarmEnum_indexes_[18] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_ALARMBOXCONNECTED,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_ALARMBOXDISCONNECTED,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_CARDEXTRACTIONCOUNTER,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_CARDNOTREMOVEDAFTERVOTING,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_CARDREADERUNRESPONSIVE,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_CARDUSED,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_CARDVALIDITYPERIODEXPIRED,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_CRYPTOERROR,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_INVALIDCONTENT,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_INVALIDVOTINGDATA,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_PRINTERNEOPAFTERVOTE,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_PRINTERNEOPBEFOREVOTE,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_PRINTERNOTREADYFORVOTE,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_TIMEOUT,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_UNABLETOREAD,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_UNABLETOWRITE,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_UNEXPECTED,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmEnum::CONFIGURATION_VOTEPRINTINGFAILURE
        };

        // AlarmCommandEnum
        //

        AlarmCommandEnum::
        AlarmCommandEnum (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_AlarmCommandEnum_convert ();
        }

        AlarmCommandEnum::
        AlarmCommandEnum (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_AlarmCommandEnum_convert ();
        }

        AlarmCommandEnum::
        AlarmCommandEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_AlarmCommandEnum_convert ();
        }

        AlarmCommandEnum* AlarmCommandEnum::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AlarmCommandEnum (*this, f, c);
        }

        AlarmCommandEnum::Value AlarmCommandEnum::
        _xsd_AlarmCommandEnum_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AlarmCommandEnum_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_AlarmCommandEnum_indexes_,
                            _xsd_AlarmCommandEnum_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_AlarmCommandEnum_indexes_ + 3 || _xsd_AlarmCommandEnum_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const AlarmCommandEnum::
        _xsd_AlarmCommandEnum_literals_[3] =
        {
          "RedLed",
          "GreenLed",
          "Buzzer"
        };

        const AlarmCommandEnum::Value AlarmCommandEnum::
        _xsd_AlarmCommandEnum_indexes_[3] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::AlarmCommandEnum::CONFIGURATION_BUZZER,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmCommandEnum::CONFIGURATION_GREENLED,
          ::Smartmatic::SAES::Functionality::Configuration::AlarmCommandEnum::CONFIGURATION_REDLED
        };

        // AlarmCommand
        //

        AlarmCommand::
        AlarmCommand ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          TypeOfCommand_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          Period_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          IsOff_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        AlarmCommand::
        AlarmCommand (const TypeOfCommandType& TypeOfCommand,
                      const PeriodType& Period,
                      const IsOffType& IsOff)
        : ::Smartmatic::ConfigurationTypes::Type (),
          TypeOfCommand_ (TypeOfCommand, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Period_ (Period, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IsOff_ (IsOff, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        AlarmCommand::
        AlarmCommand (const AlarmCommand& x,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          TypeOfCommand_ (x.TypeOfCommand_, f, this),
          Period_ (x.Period_, f, this),
          IsOff_ (x.IsOff_, f, this)
        {
        }

        AlarmCommand::
        AlarmCommand (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          TypeOfCommand_ (f, this),
          Period_ (f, this),
          IsOff_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void AlarmCommand::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "TypeOfCommand" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeOfCommandType > r (
                TypeOfCommandTraits::create (i, f, this));

              this->TypeOfCommand_.set (r);
              continue;
            }

            if (n.name () == "Period" && n.namespace_ ().empty ())
            {
              this->Period_.set (PeriodTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "IsOff" && n.namespace_ ().empty ())
            {
              this->IsOff_.set (IsOffTraits::create (i, f, this));
              continue;
            }
          }

          if (!TypeOfCommand_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "TypeOfCommand",
              "");
          }

          if (!Period_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Period",
              "");
          }

          if (!IsOff_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "IsOff",
              "");
          }
        }

        AlarmCommand* AlarmCommand::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AlarmCommand (*this, f, c);
        }

        AlarmCommand::
        ~AlarmCommand ()
        {
        }

        bool
        operator== (const AlarmCommand& x, const AlarmCommand& y)
        {
          if (!(x.getTypeOfCommand () == y.getTypeOfCommand ()))
            return false;

          if (!(x.getPeriod () == y.getPeriod ()))
            return false;

          if (!(x.getIsOff () == y.getIsOff ()))
            return false;

          return true;
        }

        bool
        operator!= (const AlarmCommand& x, const AlarmCommand& y)
        {
          return !(x == y);
        }

        // VotingExperienceControllerConfiguration
        //

        VotingExperienceControllerConfiguration::
        VotingExperienceControllerConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          OperationType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCardDataType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SkipCustomAttributeAutomatic_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          NavigateBetweenContest_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        VotingExperienceControllerConfiguration::
        VotingExperienceControllerConfiguration (const OperationTypeType& OperationType,
                                                 const ValidateCardDataTypeType& ValidateCardDataType,
                                                 const SkipCustomAttributeAutomaticType& SkipCustomAttributeAutomatic,
                                                 const NavigateBetweenContestType& NavigateBetweenContest)
        : ::Smartmatic::ConfigurationTypes::Type (),
          OperationType_ (OperationType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCardDataType_ (ValidateCardDataType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SkipCustomAttributeAutomatic_ (SkipCustomAttributeAutomatic, ::Smartmatic::ConfigurationTypes::Flags (), this),
          NavigateBetweenContest_ (NavigateBetweenContest, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        VotingExperienceControllerConfiguration::
        VotingExperienceControllerConfiguration (const VotingExperienceControllerConfiguration& x,
                                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          OperationType_ (x.OperationType_, f, this),
          ValidateCardDataType_ (x.ValidateCardDataType_, f, this),
          SkipCustomAttributeAutomatic_ (x.SkipCustomAttributeAutomatic_, f, this),
          NavigateBetweenContest_ (x.NavigateBetweenContest_, f, this)
        {
        }

        VotingExperienceControllerConfiguration::
        VotingExperienceControllerConfiguration (const ::xercesc::DOMElement& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          OperationType_ (f, this),
          ValidateCardDataType_ (f, this),
          SkipCustomAttributeAutomatic_ (f, this),
          NavigateBetweenContest_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void VotingExperienceControllerConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // OperationType
            //
            if (n.name () == "OperationType" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< OperationTypeType > r (
                OperationTypeTraits::create (i, f, this));

              if (!OperationType_.present ())
              {
                this->OperationType_.set (r);
                continue;
              }
            }

            // ValidateCardDataType
            //
            if (n.name () == "ValidateCardDataType" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< ValidateCardDataTypeType > r (
                ValidateCardDataTypeTraits::create (i, f, this));

              if (!ValidateCardDataType_.present ())
              {
                this->ValidateCardDataType_.set (r);
                continue;
              }
            }

            // SkipCustomAttributeAutomatic
            //
            if (n.name () == "SkipCustomAttributeAutomatic" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!SkipCustomAttributeAutomatic_.present ())
              {
                this->SkipCustomAttributeAutomatic_.set (SkipCustomAttributeAutomaticTraits::create (i, f, this));
                continue;
              }
            }

            // NavigateBetweenContest
            //
            if (n.name () == "NavigateBetweenContest" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!NavigateBetweenContest_.present ())
              {
                this->NavigateBetweenContest_.set (NavigateBetweenContestTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!OperationType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OperationType",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!ValidateCardDataType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ValidateCardDataType",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!SkipCustomAttributeAutomatic_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SkipCustomAttributeAutomatic",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!NavigateBetweenContest_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NavigateBetweenContest",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }
        }

        VotingExperienceControllerConfiguration* VotingExperienceControllerConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class VotingExperienceControllerConfiguration (*this, f, c);
        }

        VotingExperienceControllerConfiguration::
        ~VotingExperienceControllerConfiguration ()
        {
        }

        bool
        operator== (const VotingExperienceControllerConfiguration& x, const VotingExperienceControllerConfiguration& y)
        {
          if (!(x.getOperationType () == y.getOperationType ()))
            return false;

          if (!(x.getValidateCardDataType () == y.getValidateCardDataType ()))
            return false;

          if (!(x.getSkipCustomAttributeAutomatic () == y.getSkipCustomAttributeAutomatic ()))
            return false;

          if (!(x.getNavigateBetweenContest () == y.getNavigateBetweenContest ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotingExperienceControllerConfiguration& x, const VotingExperienceControllerConfiguration& y)
        {
          return !(x == y);
        }

        // VotingExperienceControllerOperationType
        //

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const ::xercesc::DOMElement& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_VotingExperienceControllerOperationType_convert ();
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const ::xercesc::DOMAttr& a,
                                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_VotingExperienceControllerOperationType_convert ();
        }

        VotingExperienceControllerOperationType::
        VotingExperienceControllerOperationType (const ::std::string& s,
                                                 const ::xercesc::DOMElement* e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_VotingExperienceControllerOperationType_convert ();
        }

        VotingExperienceControllerOperationType* VotingExperienceControllerOperationType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class VotingExperienceControllerOperationType (*this, f, c);
        }

        VotingExperienceControllerOperationType::Value VotingExperienceControllerOperationType::
        _xsd_VotingExperienceControllerOperationType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VotingExperienceControllerOperationType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VotingExperienceControllerOperationType_indexes_,
                            _xsd_VotingExperienceControllerOperationType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_VotingExperienceControllerOperationType_indexes_ + 5 || _xsd_VotingExperienceControllerOperationType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VotingExperienceControllerOperationType::
        _xsd_VotingExperienceControllerOperationType_literals_[5] =
        {
          "ALTERNATE_FIRST_QUESTIONS",
          "ALTERNATE_FIRST_CONTESTS_FIXED",
          "ALL_QUESTIONS_FIRST_QUESTIONS",
          "ALL_QUESTIONS_FIRST_CONTESTS_FIXED",
          "PRIORITY_BY_CONTEST_CLASS"
        };

        const VotingExperienceControllerOperationType::Value VotingExperienceControllerOperationType::
        _xsd_VotingExperienceControllerOperationType_indexes_[5] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerOperationType::CONFIGURATION_ALL_QUESTIONS_FIRST_CONTESTS_FIXED,
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerOperationType::CONFIGURATION_ALL_QUESTIONS_FIRST_QUESTIONS,
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerOperationType::CONFIGURATION_ALTERNATE_FIRST_CONTESTS_FIXED,
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerOperationType::CONFIGURATION_ALTERNATE_FIRST_QUESTIONS,
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerOperationType::CONFIGURATION_PRIORITY_BY_CONTEST_CLASS
        };

        // VotingExperienceControllerValidateCardDataType
        //

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const ::xercesc::DOMElement& e,
                                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_VotingExperienceControllerValidateCardDataType_convert ();
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const ::xercesc::DOMAttr& a,
                                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_VotingExperienceControllerValidateCardDataType_convert ();
        }

        VotingExperienceControllerValidateCardDataType::
        VotingExperienceControllerValidateCardDataType (const ::std::string& s,
                                                        const ::xercesc::DOMElement* e,
                                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_VotingExperienceControllerValidateCardDataType_convert ();
        }

        VotingExperienceControllerValidateCardDataType* VotingExperienceControllerValidateCardDataType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class VotingExperienceControllerValidateCardDataType (*this, f, c);
        }

        VotingExperienceControllerValidateCardDataType::Value VotingExperienceControllerValidateCardDataType::
        _xsd_VotingExperienceControllerValidateCardDataType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VotingExperienceControllerValidateCardDataType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VotingExperienceControllerValidateCardDataType_indexes_,
                            _xsd_VotingExperienceControllerValidateCardDataType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_VotingExperienceControllerValidateCardDataType_indexes_ + 3 || _xsd_VotingExperienceControllerValidateCardDataType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VotingExperienceControllerValidateCardDataType::
        _xsd_VotingExperienceControllerValidateCardDataType_literals_[3] =
        {
          "ALL",
          "LOGICAL_VOTER_GROUP_ONLY",
          "NONE"
        };

        const VotingExperienceControllerValidateCardDataType::Value VotingExperienceControllerValidateCardDataType::
        _xsd_VotingExperienceControllerValidateCardDataType_indexes_[3] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerValidateCardDataType::CONFIGURATION_ALL,
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerValidateCardDataType::CONFIGURATION_LOGICAL_VOTER_GROUP_ONLY,
          ::Smartmatic::SAES::Functionality::Configuration::VotingExperienceControllerValidateCardDataType::CONFIGURATION_NONE
        };

        // VoteConfiguration
        //

        VoteConfiguration::
        VoteConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          FillVote_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        VoteConfiguration::
        VoteConfiguration (const FillVoteType& FillVote)
        : ::Smartmatic::ConfigurationTypes::Type (),
          FillVote_ (FillVote, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        VoteConfiguration::
        VoteConfiguration (const VoteConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          FillVote_ (x.FillVote_, f, this)
        {
        }

        VoteConfiguration::
        VoteConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          FillVote_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void VoteConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "FillVote" && n.namespace_ ().empty ())
            {
              this->FillVote_.set (FillVoteTraits::create (i, f, this));
              continue;
            }
          }

          if (!FillVote_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "FillVote",
              "");
          }
        }

        VoteConfiguration* VoteConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class VoteConfiguration (*this, f, c);
        }

        VoteConfiguration::
        ~VoteConfiguration ()
        {
        }

        bool
        operator== (const VoteConfiguration& x, const VoteConfiguration& y)
        {
          if (!(x.getFillVote () == y.getFillVote ()))
            return false;

          return true;
        }

        bool
        operator!= (const VoteConfiguration& x, const VoteConfiguration& y)
        {
          return !(x == y);
        }

        // BlankVoteConfiguration
        //

        BlankVoteConfiguration::
        BlankVoteConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          BlankVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          BlankVoteListContestCode_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BlankVoteConfiguration::
        BlankVoteConfiguration (const BlankVoteType& BlankVote,
                                const BlankVoteListContestCodeType& BlankVoteListContestCode)
        : ::Smartmatic::ConfigurationTypes::Type (),
          BlankVote_ (BlankVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BlankVoteListContestCode_ (BlankVoteListContestCode, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BlankVoteConfiguration::
        BlankVoteConfiguration (const BlankVoteConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          BlankVote_ (x.BlankVote_, f, this),
          BlankVoteListContestCode_ (x.BlankVoteListContestCode_, f, this)
        {
        }

        BlankVoteConfiguration::
        BlankVoteConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          BlankVote_ (f, this),
          BlankVoteListContestCode_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void BlankVoteConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "BlankVote" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< BlankVoteType > r (
                BlankVoteTraits::create (i, f, this));

              this->BlankVote_.set (r);
              continue;
            }

            if (n.name () == "BlankVoteListContestCode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< BlankVoteListContestCodeType > r (
                BlankVoteListContestCodeTraits::create (i, f, this));

              this->BlankVoteListContestCode_.set (r);
              continue;
            }
          }

          if (!BlankVote_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "BlankVote",
              "");
          }

          if (!BlankVoteListContestCode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "BlankVoteListContestCode",
              "");
          }
        }

        BlankVoteConfiguration* BlankVoteConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BlankVoteConfiguration (*this, f, c);
        }

        BlankVoteConfiguration::
        ~BlankVoteConfiguration ()
        {
        }

        bool
        operator== (const BlankVoteConfiguration& x, const BlankVoteConfiguration& y)
        {
          if (!(x.getBlankVote () == y.getBlankVote ()))
            return false;

          if (!(x.getBlankVoteListContestCode () == y.getBlankVoteListContestCode ()))
            return false;

          return true;
        }

        bool
        operator!= (const BlankVoteConfiguration& x, const BlankVoteConfiguration& y)
        {
          return !(x == y);
        }

        // BlankVoteType
        //

        BlankVoteType::
        BlankVoteType (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_BlankVoteType_convert ();
        }

        BlankVoteType::
        BlankVoteType (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_BlankVoteType_convert ();
        }

        BlankVoteType::
        BlankVoteType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_BlankVoteType_convert ();
        }

        BlankVoteType* BlankVoteType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BlankVoteType (*this, f, c);
        }

        BlankVoteType::Value BlankVoteType::
        _xsd_BlankVoteType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BlankVoteType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_BlankVoteType_indexes_,
                            _xsd_BlankVoteType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_BlankVoteType_indexes_ + 2 || _xsd_BlankVoteType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const BlankVoteType::
        _xsd_BlankVoteType_literals_[2] =
        {
          "BLANK_VOTE_ENABLED",
          "BLANK_VOTE_DISABLED"
        };

        const BlankVoteType::Value BlankVoteType::
        _xsd_BlankVoteType_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::BlankVoteType::CONFIGURATION_BLANK_VOTE_DISABLED,
          ::Smartmatic::SAES::Functionality::Configuration::BlankVoteType::CONFIGURATION_BLANK_VOTE_ENABLED
        };

        // BlankVoteListContestCodeType
        //

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_BlankVoteListContestCodeType_convert ();
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const ::xercesc::DOMAttr& a,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_BlankVoteListContestCodeType_convert ();
        }

        BlankVoteListContestCodeType::
        BlankVoteListContestCodeType (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_BlankVoteListContestCodeType_convert ();
        }

        BlankVoteListContestCodeType* BlankVoteListContestCodeType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BlankVoteListContestCodeType (*this, f, c);
        }

        BlankVoteListContestCodeType::Value BlankVoteListContestCodeType::
        _xsd_BlankVoteListContestCodeType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BlankVoteListContestCodeType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_BlankVoteListContestCodeType_indexes_,
                            _xsd_BlankVoteListContestCodeType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_BlankVoteListContestCodeType_indexes_ + 2 || _xsd_BlankVoteListContestCodeType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const BlankVoteListContestCodeType::
        _xsd_BlankVoteListContestCodeType_literals_[2] =
        {
          "BLANK_VOTE_ALL_CONTEST",
          "BLANK_VOTE_CONTEST_GROUP_ONLY"
        };

        const BlankVoteListContestCodeType::Value BlankVoteListContestCodeType::
        _xsd_BlankVoteListContestCodeType_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::BlankVoteListContestCodeType::CONFIGURATION_BLANK_VOTE_ALL_CONTEST,
          ::Smartmatic::SAES::Functionality::Configuration::BlankVoteListContestCodeType::CONFIGURATION_BLANK_VOTE_CONTEST_GROUP_ONLY
        };

        // SystemRoleConfiguration
        //

        SystemRoleConfiguration::
        SystemRoleConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          role_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SystemRoleConfiguration::
        SystemRoleConfiguration (const SystemRoleConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          role_ (x.role_, f, this)
        {
        }

        SystemRoleConfiguration::
        SystemRoleConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          role_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SystemRoleConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // role
            //
            if (n.name () == "role" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< RoleType > r (
                RoleTraits::create (i, f, this));

              this->role_.push_back (r);
              continue;
            }

            break;
          }
        }

        SystemRoleConfiguration* SystemRoleConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SystemRoleConfiguration (*this, f, c);
        }

        SystemRoleConfiguration::
        ~SystemRoleConfiguration ()
        {
        }

        bool
        operator== (const SystemRoleConfiguration& x, const SystemRoleConfiguration& y)
        {
          if (!(x.getRole () == y.getRole ()))
            return false;

          return true;
        }

        bool
        operator!= (const SystemRoleConfiguration& x, const SystemRoleConfiguration& y)
        {
          return !(x == y);
        }

        // VMachineInitiatorConfiguration
        //

        VMachineInitiatorConfiguration::
        VMachineInitiatorConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          MessageRemoveFlashTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SuccessMessageTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StepTime_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        VMachineInitiatorConfiguration::
        VMachineInitiatorConfiguration (const MessageRemoveFlashTimeType& MessageRemoveFlashTime,
                                        const SuccessMessageTimeType& SuccessMessageTime,
                                        const StepTimeType& StepTime)
        : ::Smartmatic::ConfigurationTypes::Type (),
          MessageRemoveFlashTime_ (MessageRemoveFlashTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SuccessMessageTime_ (SuccessMessageTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StepTime_ (StepTime, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        VMachineInitiatorConfiguration::
        VMachineInitiatorConfiguration (const VMachineInitiatorConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          MessageRemoveFlashTime_ (x.MessageRemoveFlashTime_, f, this),
          SuccessMessageTime_ (x.SuccessMessageTime_, f, this),
          StepTime_ (x.StepTime_, f, this)
        {
        }

        VMachineInitiatorConfiguration::
        VMachineInitiatorConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          MessageRemoveFlashTime_ (f, this),
          SuccessMessageTime_ (f, this),
          StepTime_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void VMachineInitiatorConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // MessageRemoveFlashTime
            //
            if (n.name () == "MessageRemoveFlashTime" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!MessageRemoveFlashTime_.present ())
              {
                this->MessageRemoveFlashTime_.set (MessageRemoveFlashTimeTraits::create (i, f, this));
                continue;
              }
            }

            // SuccessMessageTime
            //
            if (n.name () == "SuccessMessageTime" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!SuccessMessageTime_.present ())
              {
                this->SuccessMessageTime_.set (SuccessMessageTimeTraits::create (i, f, this));
                continue;
              }
            }

            // StepTime
            //
            if (n.name () == "StepTime" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!StepTime_.present ())
              {
                this->StepTime_.set (StepTimeTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!MessageRemoveFlashTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MessageRemoveFlashTime",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!SuccessMessageTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SuccessMessageTime",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!StepTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StepTime",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }
        }

        VMachineInitiatorConfiguration* VMachineInitiatorConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class VMachineInitiatorConfiguration (*this, f, c);
        }

        VMachineInitiatorConfiguration::
        ~VMachineInitiatorConfiguration ()
        {
        }

        bool
        operator== (const VMachineInitiatorConfiguration& x, const VMachineInitiatorConfiguration& y)
        {
          if (!(x.getMessageRemoveFlashTime () == y.getMessageRemoveFlashTime ()))
            return false;

          if (!(x.getSuccessMessageTime () == y.getSuccessMessageTime ()))
            return false;

          if (!(x.getStepTime () == y.getStepTime ()))
            return false;

          return true;
        }

        bool
        operator!= (const VMachineInitiatorConfiguration& x, const VMachineInitiatorConfiguration& y)
        {
          return !(x == y);
        }

        // PMachineInitiatorConfiguration
        //

        PMachineInitiatorConfiguration::
        PMachineInitiatorConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          SuccessMessageTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StepTime_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        PMachineInitiatorConfiguration::
        PMachineInitiatorConfiguration (const SuccessMessageTimeType& SuccessMessageTime,
                                        const StepTimeType& StepTime)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SuccessMessageTime_ (SuccessMessageTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StepTime_ (StepTime, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        PMachineInitiatorConfiguration::
        PMachineInitiatorConfiguration (const PMachineInitiatorConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          SuccessMessageTime_ (x.SuccessMessageTime_, f, this),
          StepTime_ (x.StepTime_, f, this)
        {
        }

        PMachineInitiatorConfiguration::
        PMachineInitiatorConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          SuccessMessageTime_ (f, this),
          StepTime_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void PMachineInitiatorConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SuccessMessageTime
            //
            if (n.name () == "SuccessMessageTime" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!SuccessMessageTime_.present ())
              {
                this->SuccessMessageTime_.set (SuccessMessageTimeTraits::create (i, f, this));
                continue;
              }
            }

            // StepTime
            //
            if (n.name () == "StepTime" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!StepTime_.present ())
              {
                this->StepTime_.set (StepTimeTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!SuccessMessageTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SuccessMessageTime",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!StepTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StepTime",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }
        }

        PMachineInitiatorConfiguration* PMachineInitiatorConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class PMachineInitiatorConfiguration (*this, f, c);
        }

        PMachineInitiatorConfiguration::
        ~PMachineInitiatorConfiguration ()
        {
        }

        bool
        operator== (const PMachineInitiatorConfiguration& x, const PMachineInitiatorConfiguration& y)
        {
          if (!(x.getSuccessMessageTime () == y.getSuccessMessageTime ()))
            return false;

          if (!(x.getStepTime () == y.getStepTime ()))
            return false;

          return true;
        }

        bool
        operator!= (const PMachineInitiatorConfiguration& x, const PMachineInitiatorConfiguration& y)
        {
          return !(x == y);
        }

        // SystemRoleType
        //

        SystemRoleType::
        SystemRoleType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SystemRoleType_convert ();
        }

        SystemRoleType::
        SystemRoleType (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SystemRoleType_convert ();
        }

        SystemRoleType::
        SystemRoleType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SystemRoleType_convert ();
        }

        SystemRoleType* SystemRoleType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SystemRoleType (*this, f, c);
        }

        SystemRoleType::Value SystemRoleType::
        _xsd_SystemRoleType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SystemRoleType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SystemRoleType_indexes_,
                            _xsd_SystemRoleType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_SystemRoleType_indexes_ + 5 || _xsd_SystemRoleType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SystemRoleType::
        _xsd_SystemRoleType_literals_[5] =
        {
          "MENU",
          "VOTING",
          "ELECTORAL",
          "VOTING_AUDIO",
          "CLEAR_ALARM"
        };

        const SystemRoleType::Value SystemRoleType::
        _xsd_SystemRoleType_indexes_[5] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::SystemRoleType::CONFIGURATION_CLEAR_ALARM,
          ::Smartmatic::SAES::Functionality::Configuration::SystemRoleType::CONFIGURATION_ELECTORAL,
          ::Smartmatic::SAES::Functionality::Configuration::SystemRoleType::CONFIGURATION_MENU,
          ::Smartmatic::SAES::Functionality::Configuration::SystemRoleType::CONFIGURATION_VOTING,
          ::Smartmatic::SAES::Functionality::Configuration::SystemRoleType::CONFIGURATION_VOTING_AUDIO
        };

        // OperationConfiguration
        //

        OperationConfiguration::
        OperationConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          ConfigurationReset_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StartOpenElection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DiagnosesConsideredApproved_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SimulateVotes_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        OperationConfiguration::
        OperationConfiguration (const ConfigurationResetType& ConfigurationReset,
                                const StartOpenElectionType& StartOpenElection,
                                const DiagnosesConsideredApprovedType& DiagnosesConsideredApproved,
                                const SimulateVotesType& SimulateVotes)
        : ::Smartmatic::ConfigurationTypes::Type (),
          ConfigurationReset_ (ConfigurationReset, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StartOpenElection_ (StartOpenElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DiagnosesConsideredApproved_ (DiagnosesConsideredApproved, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SimulateVotes_ (SimulateVotes, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        OperationConfiguration::
        OperationConfiguration (const OperationConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          ConfigurationReset_ (x.ConfigurationReset_, f, this),
          StartOpenElection_ (x.StartOpenElection_, f, this),
          DiagnosesConsideredApproved_ (x.DiagnosesConsideredApproved_, f, this),
          SimulateVotes_ (x.SimulateVotes_, f, this)
        {
        }

        OperationConfiguration::
        OperationConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          ConfigurationReset_ (f, this),
          StartOpenElection_ (f, this),
          DiagnosesConsideredApproved_ (f, this),
          SimulateVotes_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void OperationConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "ConfigurationReset" && n.namespace_ ().empty ())
            {
              this->ConfigurationReset_.set (ConfigurationResetTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "StartOpenElection" && n.namespace_ ().empty ())
            {
              this->StartOpenElection_.set (StartOpenElectionTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "DiagnosesConsideredApproved" && n.namespace_ ().empty ())
            {
              this->DiagnosesConsideredApproved_.set (DiagnosesConsideredApprovedTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "SimulateVotes" && n.namespace_ ().empty ())
            {
              this->SimulateVotes_.set (SimulateVotesTraits::create (i, f, this));
              continue;
            }
          }

          if (!ConfigurationReset_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ConfigurationReset",
              "");
          }

          if (!StartOpenElection_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "StartOpenElection",
              "");
          }

          if (!DiagnosesConsideredApproved_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "DiagnosesConsideredApproved",
              "");
          }

          if (!SimulateVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "SimulateVotes",
              "");
          }
        }

        OperationConfiguration* OperationConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class OperationConfiguration (*this, f, c);
        }

        OperationConfiguration::
        ~OperationConfiguration ()
        {
        }

        bool
        operator== (const OperationConfiguration& x, const OperationConfiguration& y)
        {
          if (!(x.getConfigurationReset () == y.getConfigurationReset ()))
            return false;

          if (!(x.getStartOpenElection () == y.getStartOpenElection ()))
            return false;

          if (!(x.getDiagnosesConsideredApproved () == y.getDiagnosesConsideredApproved ()))
            return false;

          if (!(x.getSimulateVotes () == y.getSimulateVotes ()))
            return false;

          return true;
        }

        bool
        operator!= (const OperationConfiguration& x, const OperationConfiguration& y)
        {
          return !(x == y);
        }

        // EnqueueVoteConfiguration
        //

        EnqueueVoteConfiguration::
        EnqueueVoteConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          CleanVoteRepeated_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        EnqueueVoteConfiguration::
        EnqueueVoteConfiguration (const CleanVoteRepeatedType& CleanVoteRepeated)
        : ::Smartmatic::ConfigurationTypes::Type (),
          CleanVoteRepeated_ (CleanVoteRepeated, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        EnqueueVoteConfiguration::
        EnqueueVoteConfiguration (const EnqueueVoteConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          CleanVoteRepeated_ (x.CleanVoteRepeated_, f, this)
        {
        }

        EnqueueVoteConfiguration::
        EnqueueVoteConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          CleanVoteRepeated_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void EnqueueVoteConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "CleanVoteRepeated" && n.namespace_ ().empty ())
            {
              this->CleanVoteRepeated_.set (CleanVoteRepeatedTraits::create (i, f, this));
              continue;
            }
          }

          if (!CleanVoteRepeated_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CleanVoteRepeated",
              "");
          }
        }

        EnqueueVoteConfiguration* EnqueueVoteConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class EnqueueVoteConfiguration (*this, f, c);
        }

        EnqueueVoteConfiguration::
        ~EnqueueVoteConfiguration ()
        {
        }

        bool
        operator== (const EnqueueVoteConfiguration& x, const EnqueueVoteConfiguration& y)
        {
          if (!(x.getCleanVoteRepeated () == y.getCleanVoteRepeated ()))
            return false;

          return true;
        }

        bool
        operator!= (const EnqueueVoteConfiguration& x, const EnqueueVoteConfiguration& y)
        {
          return !(x == y);
        }

        // CardTypeController
        //

        CardTypeController::
        CardTypeController (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_CardTypeController_convert ();
        }

        CardTypeController::
        CardTypeController (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_CardTypeController_convert ();
        }

        CardTypeController::
        CardTypeController (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_CardTypeController_convert ();
        }

        CardTypeController* CardTypeController::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class CardTypeController (*this, f, c);
        }

        CardTypeController::Value CardTypeController::
        _xsd_CardTypeController_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CardTypeController_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CardTypeController_indexes_,
                            _xsd_CardTypeController_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_CardTypeController_indexes_ + 2 || _xsd_CardTypeController_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CardTypeController::
        _xsd_CardTypeController_literals_[2] =
        {
          "memory-card",
          "smart-card"
        };

        const CardTypeController::Value CardTypeController::
        _xsd_CardTypeController_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::CardTypeController::CONFIGURATION_MEMORY_CARD,
          ::Smartmatic::SAES::Functionality::Configuration::CardTypeController::CONFIGURATION_SMART_CARD
        };

        // PVFormTransformationConfig
        //

        PVFormTransformationConfig::
        PVFormTransformationConfig ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          type_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          FopConfigFile_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        PVFormTransformationConfig::
        PVFormTransformationConfig (const TypeType& type,
                                    const FopConfigFileType& FopConfigFile)
        : ::Smartmatic::ConfigurationTypes::Type (),
          type_ (type, ::Smartmatic::ConfigurationTypes::Flags (), this),
          FopConfigFile_ (FopConfigFile, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        PVFormTransformationConfig::
        PVFormTransformationConfig (const PVFormTransformationConfig& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          type_ (x.type_, f, this),
          FopConfigFile_ (x.FopConfigFile_, f, this)
        {
        }

        PVFormTransformationConfig::
        PVFormTransformationConfig (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          type_ (f, this),
          FopConfigFile_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void PVFormTransformationConfig::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // type
            //
            if (n.name () == "type" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              if (!type_.present ())
              {
                this->type_.set (r);
                continue;
              }
            }

            // FopConfigFile
            //
            if (n.name () == "FopConfigFile" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< FopConfigFileType > r (
                FopConfigFileTraits::create (i, f, this));

              if (!FopConfigFile_.present ())
              {
                this->FopConfigFile_.set (r);
                continue;
              }
            }

            break;
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "type",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!FopConfigFile_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FopConfigFile",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }
        }

        PVFormTransformationConfig* PVFormTransformationConfig::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class PVFormTransformationConfig (*this, f, c);
        }

        PVFormTransformationConfig::
        ~PVFormTransformationConfig ()
        {
        }

        bool
        operator== (const PVFormTransformationConfig& x, const PVFormTransformationConfig& y)
        {
          if (!(x.getType () == y.getType ()))
            return false;

          if (!(x.getFopConfigFile () == y.getFopConfigFile ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVFormTransformationConfig& x, const PVFormTransformationConfig& y)
        {
          return !(x == y);
        }

        // PVFormTransformationType
        //

        PVFormTransformationType::
        PVFormTransformationType (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_PVFormTransformationType_convert ();
        }

        PVFormTransformationType::
        PVFormTransformationType (const ::xercesc::DOMAttr& a,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_PVFormTransformationType_convert ();
        }

        PVFormTransformationType::
        PVFormTransformationType (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_PVFormTransformationType_convert ();
        }

        PVFormTransformationType* PVFormTransformationType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class PVFormTransformationType (*this, f, c);
        }

        PVFormTransformationType::Value PVFormTransformationType::
        _xsd_PVFormTransformationType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PVFormTransformationType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_PVFormTransformationType_indexes_,
                            _xsd_PVFormTransformationType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_PVFormTransformationType_indexes_ + 2 || _xsd_PVFormTransformationType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const PVFormTransformationType::
        _xsd_PVFormTransformationType_literals_[2] =
        {
          "FOP",
          "XMLROFF"
        };

        const PVFormTransformationType::Value PVFormTransformationType::
        _xsd_PVFormTransformationType_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::PVFormTransformationType::CONFIGURATION_FOP,
          ::Smartmatic::SAES::Functionality::Configuration::PVFormTransformationType::CONFIGURATION_XMLROFF
        };

        // StructureInstallationType
        //

        StructureInstallationType::
        StructureInstallationType (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_StructureInstallationType_convert ();
        }

        StructureInstallationType::
        StructureInstallationType (const ::xercesc::DOMAttr& a,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_StructureInstallationType_convert ();
        }

        StructureInstallationType::
        StructureInstallationType (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_StructureInstallationType_convert ();
        }

        StructureInstallationType* StructureInstallationType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class StructureInstallationType (*this, f, c);
        }

        StructureInstallationType::Value StructureInstallationType::
        _xsd_StructureInstallationType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StructureInstallationType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_StructureInstallationType_indexes_,
                            _xsd_StructureInstallationType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_StructureInstallationType_indexes_ + 2 || _xsd_StructureInstallationType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const StructureInstallationType::
        _xsd_StructureInstallationType_literals_[2] =
        {
          "SEPARATE",
          "GROUPED"
        };

        const StructureInstallationType::Value StructureInstallationType::
        _xsd_StructureInstallationType_indexes_[2] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::StructureInstallationType::CONFIGURATION_GROUPED,
          ::Smartmatic::SAES::Functionality::Configuration::StructureInstallationType::CONFIGURATION_SEPARATE
        };

        // RuleTransformation
        //

        RuleTransformation::
        RuleTransformation (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_RuleTransformation_convert ();
        }

        RuleTransformation::
        RuleTransformation (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_RuleTransformation_convert ();
        }

        RuleTransformation::
        RuleTransformation (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_RuleTransformation_convert ();
        }

        RuleTransformation* RuleTransformation::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class RuleTransformation (*this, f, c);
        }

        RuleTransformation::Value RuleTransformation::
        _xsd_RuleTransformation_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RuleTransformation_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_RuleTransformation_indexes_,
                            _xsd_RuleTransformation_indexes_ + 1,
                            *this,
                            c));

          if (i == _xsd_RuleTransformation_indexes_ + 1 || _xsd_RuleTransformation_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const RuleTransformation::
        _xsd_RuleTransformation_literals_[1] =
        {
          "COPY"
        };

        const RuleTransformation::Value RuleTransformation::
        _xsd_RuleTransformation_indexes_[1] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::RuleTransformation::CONFIGURATION_COPY
        };

        // LaunchConfiguration
        //

        LaunchConfiguration::
        LaunchConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          ExecuteInitialCalibrationInAppTypeVotingOnly_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ExecutePMSetupInAppTypeDiagnostics_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PMSetupCommand_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          AppType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SkipAutoDiagnostic_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PrintInstallationReportPM_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        LaunchConfiguration::
        LaunchConfiguration (const ExecuteInitialCalibrationInAppTypeVotingOnlyType& ExecuteInitialCalibrationInAppTypeVotingOnly,
                             const ExecutePMSetupInAppTypeDiagnosticsType& ExecutePMSetupInAppTypeDiagnostics,
                             const PMSetupCommandType& PMSetupCommand,
                             const AppTypeType& AppType,
                             const SkipAutoDiagnosticType& SkipAutoDiagnostic,
                             const PrintInstallationReportPMType& PrintInstallationReportPM)
        : ::Smartmatic::ConfigurationTypes::Type (),
          ExecuteInitialCalibrationInAppTypeVotingOnly_ (ExecuteInitialCalibrationInAppTypeVotingOnly, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ExecutePMSetupInAppTypeDiagnostics_ (ExecutePMSetupInAppTypeDiagnostics, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PMSetupCommand_ (PMSetupCommand, ::Smartmatic::ConfigurationTypes::Flags (), this),
          AppType_ (AppType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SkipAutoDiagnostic_ (SkipAutoDiagnostic, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PrintInstallationReportPM_ (PrintInstallationReportPM, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        LaunchConfiguration::
        LaunchConfiguration (const LaunchConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          ExecuteInitialCalibrationInAppTypeVotingOnly_ (x.ExecuteInitialCalibrationInAppTypeVotingOnly_, f, this),
          ExecutePMSetupInAppTypeDiagnostics_ (x.ExecutePMSetupInAppTypeDiagnostics_, f, this),
          PMSetupCommand_ (x.PMSetupCommand_, f, this),
          AppType_ (x.AppType_, f, this),
          SkipAutoDiagnostic_ (x.SkipAutoDiagnostic_, f, this),
          PrintInstallationReportPM_ (x.PrintInstallationReportPM_, f, this)
        {
        }

        LaunchConfiguration::
        LaunchConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          ExecuteInitialCalibrationInAppTypeVotingOnly_ (f, this),
          ExecutePMSetupInAppTypeDiagnostics_ (f, this),
          PMSetupCommand_ (f, this),
          AppType_ (f, this),
          SkipAutoDiagnostic_ (f, this),
          PrintInstallationReportPM_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void LaunchConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ExecuteInitialCalibrationInAppTypeVotingOnly
            //
            if (n.name () == "ExecuteInitialCalibrationInAppTypeVotingOnly" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!ExecuteInitialCalibrationInAppTypeVotingOnly_.present ())
              {
                this->ExecuteInitialCalibrationInAppTypeVotingOnly_.set (ExecuteInitialCalibrationInAppTypeVotingOnlyTraits::create (i, f, this));
                continue;
              }
            }

            // ExecutePMSetupInAppTypeDiagnostics
            //
            if (n.name () == "ExecutePMSetupInAppTypeDiagnostics" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              if (!ExecutePMSetupInAppTypeDiagnostics_.present ())
              {
                this->ExecutePMSetupInAppTypeDiagnostics_.set (ExecutePMSetupInAppTypeDiagnosticsTraits::create (i, f, this));
                continue;
              }
            }

            // PMSetupCommand
            //
            if (n.name () == "PMSetupCommand" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< PMSetupCommandType > r (
                PMSetupCommandTraits::create (i, f, this));

              if (!PMSetupCommand_.present ())
              {
                this->PMSetupCommand_.set (r);
                continue;
              }
            }

            break;
          }

          if (!ExecuteInitialCalibrationInAppTypeVotingOnly_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExecuteInitialCalibrationInAppTypeVotingOnly",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!ExecutePMSetupInAppTypeDiagnostics_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExecutePMSetupInAppTypeDiagnostics",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!PMSetupCommand_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PMSetupCommand",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "AppType" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< AppTypeType > r (
                AppTypeTraits::create (i, f, this));

              this->AppType_.set (r);
              continue;
            }

            if (n.name () == "SkipAutoDiagnostic" && n.namespace_ ().empty ())
            {
              this->SkipAutoDiagnostic_.set (SkipAutoDiagnosticTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "PrintInstallationReportPM" && n.namespace_ ().empty ())
            {
              this->PrintInstallationReportPM_.set (PrintInstallationReportPMTraits::create (i, f, this));
              continue;
            }
          }

          if (!AppType_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "AppType",
              "");
          }

          if (!SkipAutoDiagnostic_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "SkipAutoDiagnostic",
              "");
          }

          if (!PrintInstallationReportPM_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "PrintInstallationReportPM",
              "");
          }
        }

        LaunchConfiguration* LaunchConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class LaunchConfiguration (*this, f, c);
        }

        LaunchConfiguration::
        ~LaunchConfiguration ()
        {
        }

        bool
        operator== (const LaunchConfiguration& x, const LaunchConfiguration& y)
        {
          if (!(x.getExecuteInitialCalibrationInAppTypeVotingOnly () == y.getExecuteInitialCalibrationInAppTypeVotingOnly ()))
            return false;

          if (!(x.getExecutePMSetupInAppTypeDiagnostics () == y.getExecutePMSetupInAppTypeDiagnostics ()))
            return false;

          if (!(x.getPMSetupCommand () == y.getPMSetupCommand ()))
            return false;

          if (!(x.getAppType () == y.getAppType ()))
            return false;

          if (!(x.getSkipAutoDiagnostic () == y.getSkipAutoDiagnostic ()))
            return false;

          if (!(x.getPrintInstallationReportPM () == y.getPrintInstallationReportPM ()))
            return false;

          return true;
        }

        bool
        operator!= (const LaunchConfiguration& x, const LaunchConfiguration& y)
        {
          return !(x == y);
        }

        // AlarmsConfiguration
        //

        AlarmsConfiguration::
        AlarmsConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          Alarm_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        AlarmsConfiguration::
        AlarmsConfiguration (const AlarmsConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          Alarm_ (x.Alarm_, f, this)
        {
        }

        AlarmsConfiguration::
        AlarmsConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          Alarm_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void AlarmsConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Alarm
            //
            if (n.name () == "Alarm" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< AlarmType > r (
                AlarmTraits::create (i, f, this));

              this->Alarm_.push_back (r);
              continue;
            }

            break;
          }
        }

        AlarmsConfiguration* AlarmsConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AlarmsConfiguration (*this, f, c);
        }

        AlarmsConfiguration::
        ~AlarmsConfiguration ()
        {
        }

        bool
        operator== (const AlarmsConfiguration& x, const AlarmsConfiguration& y)
        {
          if (!(x.getAlarm () == y.getAlarm ()))
            return false;

          return true;
        }

        bool
        operator!= (const AlarmsConfiguration& x, const AlarmsConfiguration& y)
        {
          return !(x == y);
        }

        // Role
        //

        Role::
        Role ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          key_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          nameKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          descriptionKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          type_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        Role::
        Role (const KeyType& key,
              const NameKeyType& nameKey,
              const DescriptionKeyType& descriptionKey,
              const TypeType& type)
        : ::Smartmatic::ConfigurationTypes::Type (),
          key_ (key, ::Smartmatic::ConfigurationTypes::Flags (), this),
          nameKey_ (nameKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
          descriptionKey_ (descriptionKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
          type_ (type, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        Role::
        Role (const Role& x,
              ::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          key_ (x.key_, f, this),
          nameKey_ (x.nameKey_, f, this),
          descriptionKey_ (x.descriptionKey_, f, this),
          type_ (x.type_, f, this)
        {
        }

        Role::
        Role (const ::xercesc::DOMElement& e,
              ::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          key_ (f, this),
          nameKey_ (f, this),
          descriptionKey_ (f, this),
          type_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Role::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< KeyType > r (
                KeyTraits::create (i, f, this));

              this->key_.set (r);
              continue;
            }

            if (n.name () == "nameKey" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NameKeyType > r (
                NameKeyTraits::create (i, f, this));

              this->nameKey_.set (r);
              continue;
            }

            if (n.name () == "descriptionKey" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< DescriptionKeyType > r (
                DescriptionKeyTraits::create (i, f, this));

              this->descriptionKey_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }
          }

          if (!key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "key",
              "");
          }

          if (!nameKey_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "nameKey",
              "");
          }

          if (!descriptionKey_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "descriptionKey",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }
        }

        Role* Role::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class Role (*this, f, c);
        }

        Role::
        ~Role ()
        {
        }

        bool
        operator== (const Role& x, const Role& y)
        {
          if (!(x.getKey () == y.getKey ()))
            return false;

          if (!(x.getNameKey () == y.getNameKey ()))
            return false;

          if (!(x.getDescriptionKey () == y.getDescriptionKey ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          return true;
        }

        bool
        operator!= (const Role& x, const Role& y)
        {
          return !(x == y);
        }

        // AppType
        //

        AppType::
        AppType (const ::xercesc::DOMElement& e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_AppType_convert ();
        }

        AppType::
        AppType (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_AppType_convert ();
        }

        AppType::
        AppType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_AppType_convert ();
        }

        AppType* AppType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class AppType (*this, f, c);
        }

        AppType::Value AppType::
        _xsd_AppType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AppType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_AppType_indexes_,
                            _xsd_AppType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_AppType_indexes_ + 5 || _xsd_AppType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const AppType::
        _xsd_AppType_literals_[5] =
        {
          "VotingOnly",
          "PollbookOnly",
          "VotingMachine",
          "DiagnosticsOnly",
          "RunFunctionality"
        };

        const AppType::Value AppType::
        _xsd_AppType_indexes_[5] =
        {
          ::Smartmatic::SAES::Functionality::Configuration::AppType::CONFIGURATION_DIAGNOSTICSONLY,
          ::Smartmatic::SAES::Functionality::Configuration::AppType::CONFIGURATION_POLLBOOKONLY,
          ::Smartmatic::SAES::Functionality::Configuration::AppType::CONFIGURATION_RUNFUNCTIONALITY,
          ::Smartmatic::SAES::Functionality::Configuration::AppType::CONFIGURATION_VOTINGMACHINE,
          ::Smartmatic::SAES::Functionality::Configuration::AppType::CONFIGURATION_VOTINGONLY
        };

        // Alarm
        //

        Alarm::
        Alarm ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          AlarmCommands_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmCategory_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmBehavior_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TypeOfAlarm_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        Alarm::
        Alarm (const AlarmCategoryType& AlarmCategory,
               const AlarmBehaviorType& AlarmBehavior,
               const TypeOfAlarmType& TypeOfAlarm)
        : ::Smartmatic::ConfigurationTypes::Type (),
          AlarmCommands_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmCategory_ (AlarmCategory, ::Smartmatic::ConfigurationTypes::Flags (), this),
          AlarmBehavior_ (AlarmBehavior, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TypeOfAlarm_ (TypeOfAlarm, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        Alarm::
        Alarm (const Alarm& x,
               ::Smartmatic::ConfigurationTypes::Flags f,
               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          AlarmCommands_ (x.AlarmCommands_, f, this),
          AlarmCategory_ (x.AlarmCategory_, f, this),
          AlarmBehavior_ (x.AlarmBehavior_, f, this),
          TypeOfAlarm_ (x.TypeOfAlarm_, f, this)
        {
        }

        Alarm::
        Alarm (const ::xercesc::DOMElement& e,
               ::Smartmatic::ConfigurationTypes::Flags f,
               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          AlarmCommands_ (f, this),
          AlarmCategory_ (f, this),
          AlarmBehavior_ (f, this),
          TypeOfAlarm_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Alarm::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AlarmCommands
            //
            if (n.name () == "AlarmCommands" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< AlarmCommandsType > r (
                AlarmCommandsTraits::create (i, f, this));

              this->AlarmCommands_.push_back (r);
              continue;
            }

            // AlarmCategory
            //
            if (n.name () == "AlarmCategory" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< AlarmCategoryType > r (
                AlarmCategoryTraits::create (i, f, this));

              if (!AlarmCategory_.present ())
              {
                this->AlarmCategory_.set (r);
                continue;
              }
            }

            // AlarmBehavior
            //
            if (n.name () == "AlarmBehavior" && n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
            {
              ::std::auto_ptr< AlarmBehaviorType > r (
                AlarmBehaviorTraits::create (i, f, this));

              if (!AlarmBehavior_.present ())
              {
                this->AlarmBehavior_.set (r);
                continue;
              }
            }

            break;
          }

          if (!AlarmCategory_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AlarmCategory",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          if (!AlarmBehavior_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AlarmBehavior",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "TypeOfAlarm" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeOfAlarmType > r (
                TypeOfAlarmTraits::create (i, f, this));

              this->TypeOfAlarm_.set (r);
              continue;
            }
          }

          if (!TypeOfAlarm_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "TypeOfAlarm",
              "");
          }
        }

        Alarm* Alarm::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class Alarm (*this, f, c);
        }

        Alarm::
        ~Alarm ()
        {
        }

        bool
        operator== (const Alarm& x, const Alarm& y)
        {
          if (!(x.getAlarmCommands () == y.getAlarmCommands ()))
            return false;

          if (!(x.getAlarmCategory () == y.getAlarmCategory ()))
            return false;

          if (!(x.getAlarmBehavior () == y.getAlarmBehavior ()))
            return false;

          if (!(x.getTypeOfAlarm () == y.getTypeOfAlarm ()))
            return false;

          return true;
        }

        bool
        operator!= (const Alarm& x, const Alarm& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::std::string& u,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
            ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::std::string& u,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
            ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
            ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             const ::std::string& sid,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             const ::std::string& sid,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::xercesc::InputSource& i,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
            ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::xercesc::InputSource& i,
                                             ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
            ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
            ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (const ::xercesc::DOMDocument& d,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
          {
            ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
              ::Smartmatic::SAES::Functionality::Configuration::parseSaesFunctionalityConfiguration (
                c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "SaesFunctionalityConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesFunctionalityConfiguration");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration >
        parseSaesFunctionalityConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             const ::Smartmatic::ConfigurationTypes::Properties&)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "SaesFunctionalityConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesFunctionalityConfiguration");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Functionality
    {
      namespace Configuration
      {
        void
        operator<< (::xercesc::DOMElement& e, const SaesFunctionalityConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // VotingExperienceController
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingExperienceController",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getVotingExperienceController ();
          }

          // Vote
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Vote",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getVote ();
          }

          // BlankVote
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BlankVote",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getBlankVote ();
          }

          // VMachineInitiator
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VMachineInitiator",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getVMachineInitiator ();
          }

          // PMachineInitiator
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PMachineInitiator",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getPMachineInitiator ();
          }

          // CardTypeController
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardTypeController",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getCardTypeController ();
          }

          // PVFormTransformation
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PVFormTransformation",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getPVFormTransformation ();
          }

          // StructureInstallation
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StructureInstallation",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getStructureInstallation ();
          }

          // EnqueueVoteConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "EnqueueVoteConfiguration",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getEnqueueVoteConfiguration ();
          }

          // SystemRole
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SystemRole",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getSystemRole ();
          }

          // LaunchConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LaunchConfiguration",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getLaunchConfiguration ();
          }

          // AlarmsConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AlarmsConfiguration",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getAlarmsConfiguration ();
          }

          // OperationConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OperationConfiguration",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getOperationConfiguration ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const AlarmCategoryEnum& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const AlarmCategoryEnum& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const AlarmCategoryEnum& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const AlarmBehaviorEnum& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const AlarmBehaviorEnum& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const AlarmBehaviorEnum& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const AlarmEnum& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const AlarmEnum& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const AlarmEnum& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const AlarmCommandEnum& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const AlarmCommandEnum& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const AlarmCommandEnum& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const AlarmCommand& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // TypeOfCommand
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "TypeOfCommand",
                e));

            a << i.getTypeOfCommand ();
          }

          // Period
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Period",
                e));

            a << i.getPeriod ();
          }

          // IsOff
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "IsOff",
                e));

            a << i.getIsOff ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingExperienceControllerConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // OperationType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OperationType",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getOperationType ();
          }

          // ValidateCardDataType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ValidateCardDataType",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getValidateCardDataType ();
          }

          // SkipCustomAttributeAutomatic
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SkipCustomAttributeAutomatic",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getSkipCustomAttributeAutomatic ();
          }

          // NavigateBetweenContest
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NavigateBetweenContest",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getNavigateBetweenContest ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingExperienceControllerOperationType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VotingExperienceControllerOperationType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const VotingExperienceControllerOperationType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingExperienceControllerValidateCardDataType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VotingExperienceControllerValidateCardDataType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const VotingExperienceControllerValidateCardDataType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const VoteConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // FillVote
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "FillVote",
                e));

            a << i.getFillVote ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BlankVoteConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // BlankVote
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "BlankVote",
                e));

            a << i.getBlankVote ();
          }

          // BlankVoteListContestCode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "BlankVoteListContestCode",
                e));

            a << i.getBlankVoteListContestCode ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BlankVoteType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const BlankVoteType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const BlankVoteType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const BlankVoteListContestCodeType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const BlankVoteListContestCodeType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const BlankVoteListContestCodeType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SystemRoleConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // role
          //
          for (SystemRoleConfiguration::RoleConstIterator
               b (i.getRole ().begin ()), n (i.getRole ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "role",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VMachineInitiatorConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // MessageRemoveFlashTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MessageRemoveFlashTime",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getMessageRemoveFlashTime ();
          }

          // SuccessMessageTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SuccessMessageTime",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getSuccessMessageTime ();
          }

          // StepTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StepTime",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getStepTime ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PMachineInitiatorConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // SuccessMessageTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SuccessMessageTime",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getSuccessMessageTime ();
          }

          // StepTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StepTime",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getStepTime ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SystemRoleType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SystemRoleType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SystemRoleType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const OperationConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // ConfigurationReset
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ConfigurationReset",
                e));

            a << i.getConfigurationReset ();
          }

          // StartOpenElection
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "StartOpenElection",
                e));

            a << i.getStartOpenElection ();
          }

          // DiagnosesConsideredApproved
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "DiagnosesConsideredApproved",
                e));

            a << i.getDiagnosesConsideredApproved ();
          }

          // SimulateVotes
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "SimulateVotes",
                e));

            a << i.getSimulateVotes ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const EnqueueVoteConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // CleanVoteRepeated
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CleanVoteRepeated",
                e));

            a << i.getCleanVoteRepeated ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const CardTypeController& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CardTypeController& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const CardTypeController& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVFormTransformationConfig& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // type
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "type",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getType ();
          }

          // FopConfigFile
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FopConfigFile",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getFopConfigFile ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVFormTransformationType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const PVFormTransformationType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const PVFormTransformationType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const StructureInstallationType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const StructureInstallationType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const StructureInstallationType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const RuleTransformation& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const RuleTransformation& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const RuleTransformation& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        serializeSaesFunctionalityConfiguration (::std::ostream& o,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 const ::std::string& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeSaesFunctionalityConfiguration (::std::ostream& o,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 const ::std::string& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesFunctionalityConfiguration (::std::ostream& o,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 const ::std::string& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesFunctionalityConfiguration (::xercesc::XMLFormatTarget& t,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 const ::std::string& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeSaesFunctionalityConfiguration (::xercesc::XMLFormatTarget& t,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 const ::std::string& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesFunctionalityConfiguration (::xercesc::XMLFormatTarget& t,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 ::xercesc::DOMErrorHandler& h,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 const ::std::string& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesFunctionalityConfiguration (::xercesc::DOMDocument& d,
                                                 const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 ::Smartmatic::ConfigurationTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "SaesFunctionalityConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesFunctionalityConfiguration")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "SaesFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration");
          }
        }

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeSaesFunctionalityConfiguration (const ::Smartmatic::SAES::Functionality::Configuration::SaesFunctionalityConfiguration& s,
                                                 const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                                 ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "SaesFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesFunctionalityConfiguration",
              m, f));

          ::Smartmatic::SAES::Functionality::Configuration::serializeSaesFunctionalityConfiguration (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const LaunchConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // ExecuteInitialCalibrationInAppTypeVotingOnly
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ExecuteInitialCalibrationInAppTypeVotingOnly",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getExecuteInitialCalibrationInAppTypeVotingOnly ();
          }

          // ExecutePMSetupInAppTypeDiagnostics
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ExecutePMSetupInAppTypeDiagnostics",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getExecutePMSetupInAppTypeDiagnostics ();
          }

          // PMSetupCommand
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PMSetupCommand",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getPMSetupCommand ();
          }

          // AppType
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "AppType",
                e));

            a << i.getAppType ();
          }

          // SkipAutoDiagnostic
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "SkipAutoDiagnostic",
                e));

            a << i.getSkipAutoDiagnostic ();
          }

          // PrintInstallationReportPM
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "PrintInstallationReportPM",
                e));

            a << i.getPrintInstallationReportPM ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const AlarmsConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // Alarm
          //
          for (AlarmsConfiguration::AlarmConstIterator
               b (i.getAlarm ().begin ()), n (i.getAlarm ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Alarm",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Role& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "key",
                e));

            a << i.getKey ();
          }

          // nameKey
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "nameKey",
                e));

            a << i.getNameKey ();
          }

          // descriptionKey
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "descriptionKey",
                e));

            a << i.getDescriptionKey ();
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.getType ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const AppType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const AppType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const AppType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Alarm& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // AlarmCommands
          //
          for (Alarm::AlarmCommandsConstIterator
               b (i.getAlarmCommands ().begin ()), n (i.getAlarmCommands ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AlarmCommands",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << *b;
          }

          // AlarmCategory
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AlarmCategory",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getAlarmCategory ();
          }

          // AlarmBehavior
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AlarmBehavior",
                "http://www.smartmatic.com/SaesFunctionalityConfiguration",
                e));

            s << i.getAlarmBehavior ();
          }

          // TypeOfAlarm
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "TypeOfAlarm",
                e));

            a << i.getTypeOfAlarm ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

