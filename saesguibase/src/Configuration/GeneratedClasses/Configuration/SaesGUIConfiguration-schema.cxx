// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SaesGUIConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      // SaesGUIConfiguration
      // 

      const SaesGUIConfiguration::StartConfigurationType& SaesGUIConfiguration::
      getStartConfiguration () const
      {
        return this->StartConfiguration_.get ();
      }

      SaesGUIConfiguration::StartConfigurationType& SaesGUIConfiguration::
      getStartConfiguration ()
      {
        return this->StartConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setStartConfiguration (const StartConfigurationType& x)
      {
        this->StartConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setStartConfiguration (::std::auto_ptr< StartConfigurationType > x)
      {
        this->StartConfiguration_.set (x);
      }

      const SaesGUIConfiguration::BeidCardUseThreadType& SaesGUIConfiguration::
      getBeidCardUseThread () const
      {
        return this->BeidCardUseThread_.get ();
      }

      SaesGUIConfiguration::BeidCardUseThreadType& SaesGUIConfiguration::
      getBeidCardUseThread ()
      {
        return this->BeidCardUseThread_.get ();
      }

      void SaesGUIConfiguration::
      setBeidCardUseThread (const BeidCardUseThreadType& x)
      {
        this->BeidCardUseThread_.set (x);
      }

      const SaesGUIConfiguration::BeidCardShowRemoveMessageType& SaesGUIConfiguration::
      getBeidCardShowRemoveMessage () const
      {
        return this->BeidCardShowRemoveMessage_.get ();
      }

      SaesGUIConfiguration::BeidCardShowRemoveMessageType& SaesGUIConfiguration::
      getBeidCardShowRemoveMessage ()
      {
        return this->BeidCardShowRemoveMessage_.get ();
      }

      void SaesGUIConfiguration::
      setBeidCardShowRemoveMessage (const BeidCardShowRemoveMessageType& x)
      {
        this->BeidCardShowRemoveMessage_.set (x);
      }

      const SaesGUIConfiguration::BeidShowIdCardType& SaesGUIConfiguration::
      getBeidShowIdCard () const
      {
        return this->BeidShowIdCard_.get ();
      }

      SaesGUIConfiguration::BeidShowIdCardType& SaesGUIConfiguration::
      getBeidShowIdCard ()
      {
        return this->BeidShowIdCard_.get ();
      }

      void SaesGUIConfiguration::
      setBeidShowIdCard (const BeidShowIdCardType& x)
      {
        this->BeidShowIdCard_.set (x);
      }

      const SaesGUIConfiguration::PMInstallationWidgetShowPrintPasswordButtonType& SaesGUIConfiguration::
      getPMInstallationWidgetShowPrintPasswordButton () const
      {
        return this->PMInstallationWidgetShowPrintPasswordButton_.get ();
      }

      SaesGUIConfiguration::PMInstallationWidgetShowPrintPasswordButtonType& SaesGUIConfiguration::
      getPMInstallationWidgetShowPrintPasswordButton ()
      {
        return this->PMInstallationWidgetShowPrintPasswordButton_.get ();
      }

      void SaesGUIConfiguration::
      setPMInstallationWidgetShowPrintPasswordButton (const PMInstallationWidgetShowPrintPasswordButtonType& x)
      {
        this->PMInstallationWidgetShowPrintPasswordButton_.set (x);
      }

      const SaesGUIConfiguration::ShowBeidEntryType& SaesGUIConfiguration::
      getShowBeidEntry () const
      {
        return this->ShowBeidEntry_.get ();
      }

      SaesGUIConfiguration::ShowBeidEntryType& SaesGUIConfiguration::
      getShowBeidEntry ()
      {
        return this->ShowBeidEntry_.get ();
      }

      void SaesGUIConfiguration::
      setShowBeidEntry (const ShowBeidEntryType& x)
      {
        this->ShowBeidEntry_.set (x);
      }

      void SaesGUIConfiguration::
      setShowBeidEntry (::std::auto_ptr< ShowBeidEntryType > x)
      {
        this->ShowBeidEntry_.set (x);
      }

      const SaesGUIConfiguration::VotingMachineType& SaesGUIConfiguration::
      getVotingMachine () const
      {
        return this->VotingMachine_.get ();
      }

      SaesGUIConfiguration::VotingMachineType& SaesGUIConfiguration::
      getVotingMachine ()
      {
        return this->VotingMachine_.get ();
      }

      void SaesGUIConfiguration::
      setVotingMachine (const VotingMachineType& x)
      {
        this->VotingMachine_.set (x);
      }

      void SaesGUIConfiguration::
      setVotingMachine (::std::auto_ptr< VotingMachineType > x)
      {
        this->VotingMachine_.set (x);
      }

      const SaesGUIConfiguration::VotingExperienceType& SaesGUIConfiguration::
      getVotingExperience () const
      {
        return this->VotingExperience_.get ();
      }

      SaesGUIConfiguration::VotingExperienceType& SaesGUIConfiguration::
      getVotingExperience ()
      {
        return this->VotingExperience_.get ();
      }

      void SaesGUIConfiguration::
      setVotingExperience (const VotingExperienceType& x)
      {
        this->VotingExperience_.set (x);
      }

      void SaesGUIConfiguration::
      setVotingExperience (::std::auto_ptr< VotingExperienceType > x)
      {
        this->VotingExperience_.set (x);
      }

      const SaesGUIConfiguration::FormsCommonControlsType& SaesGUIConfiguration::
      getFormsCommonControls () const
      {
        return this->FormsCommonControls_.get ();
      }

      SaesGUIConfiguration::FormsCommonControlsType& SaesGUIConfiguration::
      getFormsCommonControls ()
      {
        return this->FormsCommonControls_.get ();
      }

      void SaesGUIConfiguration::
      setFormsCommonControls (const FormsCommonControlsType& x)
      {
        this->FormsCommonControls_.set (x);
      }

      void SaesGUIConfiguration::
      setFormsCommonControls (::std::auto_ptr< FormsCommonControlsType > x)
      {
        this->FormsCommonControls_.set (x);
      }

      const SaesGUIConfiguration::ReportPrintingWidgetType& SaesGUIConfiguration::
      getReportPrintingWidget () const
      {
        return this->ReportPrintingWidget_.get ();
      }

      SaesGUIConfiguration::ReportPrintingWidgetType& SaesGUIConfiguration::
      getReportPrintingWidget ()
      {
        return this->ReportPrintingWidget_.get ();
      }

      void SaesGUIConfiguration::
      setReportPrintingWidget (const ReportPrintingWidgetType& x)
      {
        this->ReportPrintingWidget_.set (x);
      }

      void SaesGUIConfiguration::
      setReportPrintingWidget (::std::auto_ptr< ReportPrintingWidgetType > x)
      {
        this->ReportPrintingWidget_.set (x);
      }

      const SaesGUIConfiguration::ForceToLoadFrameType& SaesGUIConfiguration::
      getForceToLoadFrame () const
      {
        return this->ForceToLoadFrame_.get ();
      }

      SaesGUIConfiguration::ForceToLoadFrameType& SaesGUIConfiguration::
      getForceToLoadFrame ()
      {
        return this->ForceToLoadFrame_.get ();
      }

      void SaesGUIConfiguration::
      setForceToLoadFrame (const ForceToLoadFrameType& x)
      {
        this->ForceToLoadFrame_.set (x);
      }

      const SaesGUIConfiguration::VMInstallationConfigurationType& SaesGUIConfiguration::
      getVMInstallationConfiguration () const
      {
        return this->VMInstallationConfiguration_.get ();
      }

      SaesGUIConfiguration::VMInstallationConfigurationType& SaesGUIConfiguration::
      getVMInstallationConfiguration ()
      {
        return this->VMInstallationConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setVMInstallationConfiguration (const VMInstallationConfigurationType& x)
      {
        this->VMInstallationConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setVMInstallationConfiguration (::std::auto_ptr< VMInstallationConfigurationType > x)
      {
        this->VMInstallationConfiguration_.set (x);
      }

      const SaesGUIConfiguration::ExitMessageLabelConfigurationType& SaesGUIConfiguration::
      getExitMessageLabelConfiguration () const
      {
        return this->ExitMessageLabelConfiguration_.get ();
      }

      SaesGUIConfiguration::ExitMessageLabelConfigurationType& SaesGUIConfiguration::
      getExitMessageLabelConfiguration ()
      {
        return this->ExitMessageLabelConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setExitMessageLabelConfiguration (const ExitMessageLabelConfigurationType& x)
      {
        this->ExitMessageLabelConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setExitMessageLabelConfiguration (::std::auto_ptr< ExitMessageLabelConfigurationType > x)
      {
        this->ExitMessageLabelConfiguration_.set (x);
      }

      const SaesGUIConfiguration::BlockMemoryBehaviorMenuType& SaesGUIConfiguration::
      getBlockMemoryBehaviorMenu () const
      {
        return this->BlockMemoryBehaviorMenu_.get ();
      }

      SaesGUIConfiguration::BlockMemoryBehaviorMenuType& SaesGUIConfiguration::
      getBlockMemoryBehaviorMenu ()
      {
        return this->BlockMemoryBehaviorMenu_.get ();
      }

      void SaesGUIConfiguration::
      setBlockMemoryBehaviorMenu (const BlockMemoryBehaviorMenuType& x)
      {
        this->BlockMemoryBehaviorMenu_.set (x);
      }

      void SaesGUIConfiguration::
      setBlockMemoryBehaviorMenu (::std::auto_ptr< BlockMemoryBehaviorMenuType > x)
      {
        this->BlockMemoryBehaviorMenu_.set (x);
      }

      const SaesGUIConfiguration::SendBarcodeConfigurationOnReconnectWidgetType& SaesGUIConfiguration::
      getSendBarcodeConfigurationOnReconnectWidget () const
      {
        return this->SendBarcodeConfigurationOnReconnectWidget_.get ();
      }

      SaesGUIConfiguration::SendBarcodeConfigurationOnReconnectWidgetType& SaesGUIConfiguration::
      getSendBarcodeConfigurationOnReconnectWidget ()
      {
        return this->SendBarcodeConfigurationOnReconnectWidget_.get ();
      }

      void SaesGUIConfiguration::
      setSendBarcodeConfigurationOnReconnectWidget (const SendBarcodeConfigurationOnReconnectWidgetType& x)
      {
        this->SendBarcodeConfigurationOnReconnectWidget_.set (x);
      }

      const SaesGUIConfiguration::PollingCardConfigurationType& SaesGUIConfiguration::
      getPollingCardConfiguration () const
      {
        return this->PollingCardConfiguration_.get ();
      }

      SaesGUIConfiguration::PollingCardConfigurationType& SaesGUIConfiguration::
      getPollingCardConfiguration ()
      {
        return this->PollingCardConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setPollingCardConfiguration (const PollingCardConfigurationType& x)
      {
        this->PollingCardConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setPollingCardConfiguration (::std::auto_ptr< PollingCardConfigurationType > x)
      {
        this->PollingCardConfiguration_.set (x);
      }

      const SaesGUIConfiguration::AlarmBoxMonitorConfigurationType& SaesGUIConfiguration::
      getAlarmBoxMonitorConfiguration () const
      {
        return this->AlarmBoxMonitorConfiguration_.get ();
      }

      SaesGUIConfiguration::AlarmBoxMonitorConfigurationType& SaesGUIConfiguration::
      getAlarmBoxMonitorConfiguration ()
      {
        return this->AlarmBoxMonitorConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setAlarmBoxMonitorConfiguration (const AlarmBoxMonitorConfigurationType& x)
      {
        this->AlarmBoxMonitorConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setAlarmBoxMonitorConfiguration (::std::auto_ptr< AlarmBoxMonitorConfigurationType > x)
      {
        this->AlarmBoxMonitorConfiguration_.set (x);
      }

      const SaesGUIConfiguration::SmartCardReaderDiagnosisConfigurationType& SaesGUIConfiguration::
      getSmartCardReaderDiagnosisConfiguration () const
      {
        return this->SmartCardReaderDiagnosisConfiguration_.get ();
      }

      SaesGUIConfiguration::SmartCardReaderDiagnosisConfigurationType& SaesGUIConfiguration::
      getSmartCardReaderDiagnosisConfiguration ()
      {
        return this->SmartCardReaderDiagnosisConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setSmartCardReaderDiagnosisConfiguration (const SmartCardReaderDiagnosisConfigurationType& x)
      {
        this->SmartCardReaderDiagnosisConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setSmartCardReaderDiagnosisConfiguration (::std::auto_ptr< SmartCardReaderDiagnosisConfigurationType > x)
      {
        this->SmartCardReaderDiagnosisConfiguration_.set (x);
      }

      const SaesGUIConfiguration::ChangeHourFunctionalityConfigurationType& SaesGUIConfiguration::
      getChangeHourFunctionalityConfiguration () const
      {
        return this->ChangeHourFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::ChangeHourFunctionalityConfigurationType& SaesGUIConfiguration::
      getChangeHourFunctionalityConfiguration ()
      {
        return this->ChangeHourFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setChangeHourFunctionalityConfiguration (const ChangeHourFunctionalityConfigurationType& x)
      {
        this->ChangeHourFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setChangeHourFunctionalityConfiguration (::std::auto_ptr< ChangeHourFunctionalityConfigurationType > x)
      {
        this->ChangeHourFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::FunctionalitiesConfigurationType& SaesGUIConfiguration::
      getFunctionalitiesConfiguration () const
      {
        return this->FunctionalitiesConfiguration_.get ();
      }

      SaesGUIConfiguration::FunctionalitiesConfigurationType& SaesGUIConfiguration::
      getFunctionalitiesConfiguration ()
      {
        return this->FunctionalitiesConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setFunctionalitiesConfiguration (const FunctionalitiesConfigurationType& x)
      {
        this->FunctionalitiesConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setFunctionalitiesConfiguration (::std::auto_ptr< FunctionalitiesConfigurationType > x)
      {
        this->FunctionalitiesConfiguration_.set (x);
      }

      const SaesGUIConfiguration::RunFunctionalityConfigurationType& SaesGUIConfiguration::
      getRunFunctionalityConfiguration () const
      {
        return this->RunFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::RunFunctionalityConfigurationType& SaesGUIConfiguration::
      getRunFunctionalityConfiguration ()
      {
        return this->RunFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setRunFunctionalityConfiguration (const RunFunctionalityConfigurationType& x)
      {
        this->RunFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setRunFunctionalityConfiguration (::std::auto_ptr< RunFunctionalityConfigurationType > x)
      {
        this->RunFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::InstallationWizardConfigurationType& SaesGUIConfiguration::
      getInstallationWizardConfiguration () const
      {
        return this->InstallationWizardConfiguration_.get ();
      }

      SaesGUIConfiguration::InstallationWizardConfigurationType& SaesGUIConfiguration::
      getInstallationWizardConfiguration ()
      {
        return this->InstallationWizardConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setInstallationWizardConfiguration (const InstallationWizardConfigurationType& x)
      {
        this->InstallationWizardConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setInstallationWizardConfiguration (::std::auto_ptr< InstallationWizardConfigurationType > x)
      {
        this->InstallationWizardConfiguration_.set (x);
      }

      const SaesGUIConfiguration::PMWidgetConfigurationType& SaesGUIConfiguration::
      getPMWidgetConfiguration () const
      {
        return this->PMWidgetConfiguration_.get ();
      }

      SaesGUIConfiguration::PMWidgetConfigurationType& SaesGUIConfiguration::
      getPMWidgetConfiguration ()
      {
        return this->PMWidgetConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setPMWidgetConfiguration (const PMWidgetConfigurationType& x)
      {
        this->PMWidgetConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setPMWidgetConfiguration (::std::auto_ptr< PMWidgetConfigurationType > x)
      {
        this->PMWidgetConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CardActivatorFunctionalityConfigurationType& SaesGUIConfiguration::
      getCardActivatorFunctionalityConfiguration () const
      {
        return this->CardActivatorFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CardActivatorFunctionalityConfigurationType& SaesGUIConfiguration::
      getCardActivatorFunctionalityConfiguration ()
      {
        return this->CardActivatorFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCardActivatorFunctionalityConfiguration (const CardActivatorFunctionalityConfigurationType& x)
      {
        this->CardActivatorFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCardActivatorFunctionalityConfiguration (::std::auto_ptr< CardActivatorFunctionalityConfigurationType > x)
      {
        this->CardActivatorFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CardRecoveryFunctionalityConfigurationType& SaesGUIConfiguration::
      getCardRecoveryFunctionalityConfiguration () const
      {
        return this->CardRecoveryFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CardRecoveryFunctionalityConfigurationType& SaesGUIConfiguration::
      getCardRecoveryFunctionalityConfiguration ()
      {
        return this->CardRecoveryFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCardRecoveryFunctionalityConfiguration (const CardRecoveryFunctionalityConfigurationType& x)
      {
        this->CardRecoveryFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCardRecoveryFunctionalityConfiguration (::std::auto_ptr< CardRecoveryFunctionalityConfigurationType > x)
      {
        this->CardRecoveryFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::VoteDemoFunctionalityConfigurationType& SaesGUIConfiguration::
      getVoteDemoFunctionalityConfiguration () const
      {
        return this->VoteDemoFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::VoteDemoFunctionalityConfigurationType& SaesGUIConfiguration::
      getVoteDemoFunctionalityConfiguration ()
      {
        return this->VoteDemoFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setVoteDemoFunctionalityConfiguration (const VoteDemoFunctionalityConfigurationType& x)
      {
        this->VoteDemoFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setVoteDemoFunctionalityConfiguration (::std::auto_ptr< VoteDemoFunctionalityConfigurationType > x)
      {
        this->VoteDemoFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CardAssistedActivationFunctionalityConfigurationType& SaesGUIConfiguration::
      getCardAssistedActivationFunctionalityConfiguration () const
      {
        return this->CardAssistedActivationFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CardAssistedActivationFunctionalityConfigurationType& SaesGUIConfiguration::
      getCardAssistedActivationFunctionalityConfiguration ()
      {
        return this->CardAssistedActivationFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCardAssistedActivationFunctionalityConfiguration (const CardAssistedActivationFunctionalityConfigurationType& x)
      {
        this->CardAssistedActivationFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCardAssistedActivationFunctionalityConfiguration (::std::auto_ptr< CardAssistedActivationFunctionalityConfigurationType > x)
      {
        this->CardAssistedActivationFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::PrinterDiagnosisConfigurationType& SaesGUIConfiguration::
      getPrinterDiagnosisConfiguration () const
      {
        return this->PrinterDiagnosisConfiguration_.get ();
      }

      SaesGUIConfiguration::PrinterDiagnosisConfigurationType& SaesGUIConfiguration::
      getPrinterDiagnosisConfiguration ()
      {
        return this->PrinterDiagnosisConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setPrinterDiagnosisConfiguration (const PrinterDiagnosisConfigurationType& x)
      {
        this->PrinterDiagnosisConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setPrinterDiagnosisConfiguration (::std::auto_ptr< PrinterDiagnosisConfigurationType > x)
      {
        this->PrinterDiagnosisConfiguration_.set (x);
      }

      const SaesGUIConfiguration::GeneralDiagnosisConfigurationType& SaesGUIConfiguration::
      getGeneralDiagnosisConfiguration () const
      {
        return this->GeneralDiagnosisConfiguration_.get ();
      }

      SaesGUIConfiguration::GeneralDiagnosisConfigurationType& SaesGUIConfiguration::
      getGeneralDiagnosisConfiguration ()
      {
        return this->GeneralDiagnosisConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setGeneralDiagnosisConfiguration (const GeneralDiagnosisConfigurationType& x)
      {
        this->GeneralDiagnosisConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setGeneralDiagnosisConfiguration (::std::auto_ptr< GeneralDiagnosisConfigurationType > x)
      {
        this->GeneralDiagnosisConfiguration_.set (x);
      }

      const SaesGUIConfiguration::TouchScreenCalibrationConfigurationType& SaesGUIConfiguration::
      getTouchScreenCalibrationConfiguration () const
      {
        return this->TouchScreenCalibrationConfiguration_.get ();
      }

      SaesGUIConfiguration::TouchScreenCalibrationConfigurationType& SaesGUIConfiguration::
      getTouchScreenCalibrationConfiguration ()
      {
        return this->TouchScreenCalibrationConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setTouchScreenCalibrationConfiguration (const TouchScreenCalibrationConfigurationType& x)
      {
        this->TouchScreenCalibrationConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setTouchScreenCalibrationConfiguration (::std::auto_ptr< TouchScreenCalibrationConfigurationType > x)
      {
        this->TouchScreenCalibrationConfiguration_.set (x);
      }

      const SaesGUIConfiguration::EventSoundsConfigurationType& SaesGUIConfiguration::
      getEventSoundsConfiguration () const
      {
        return this->EventSoundsConfiguration_.get ();
      }

      SaesGUIConfiguration::EventSoundsConfigurationType& SaesGUIConfiguration::
      getEventSoundsConfiguration ()
      {
        return this->EventSoundsConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setEventSoundsConfiguration (const EventSoundsConfigurationType& x)
      {
        this->EventSoundsConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setEventSoundsConfiguration (::std::auto_ptr< EventSoundsConfigurationType > x)
      {
        this->EventSoundsConfiguration_.set (x);
      }

      const SaesGUIConfiguration::BarcodeDiagnosisConfigurationType& SaesGUIConfiguration::
      getBarcodeDiagnosisConfiguration () const
      {
        return this->BarcodeDiagnosisConfiguration_.get ();
      }

      SaesGUIConfiguration::BarcodeDiagnosisConfigurationType& SaesGUIConfiguration::
      getBarcodeDiagnosisConfiguration ()
      {
        return this->BarcodeDiagnosisConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setBarcodeDiagnosisConfiguration (const BarcodeDiagnosisConfigurationType& x)
      {
        this->BarcodeDiagnosisConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setBarcodeDiagnosisConfiguration (::std::auto_ptr< BarcodeDiagnosisConfigurationType > x)
      {
        this->BarcodeDiagnosisConfiguration_.set (x);
      }

      const SaesGUIConfiguration::BrightnessDiagnosisConfigurationType& SaesGUIConfiguration::
      getBrightnessDiagnosisConfiguration () const
      {
        return this->BrightnessDiagnosisConfiguration_.get ();
      }

      SaesGUIConfiguration::BrightnessDiagnosisConfigurationType& SaesGUIConfiguration::
      getBrightnessDiagnosisConfiguration ()
      {
        return this->BrightnessDiagnosisConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setBrightnessDiagnosisConfiguration (const BrightnessDiagnosisConfigurationType& x)
      {
        this->BrightnessDiagnosisConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setBrightnessDiagnosisConfiguration (::std::auto_ptr< BrightnessDiagnosisConfigurationType > x)
      {
        this->BrightnessDiagnosisConfiguration_.set (x);
      }

      const SaesGUIConfiguration::AllDiagnosisConfigurationType& SaesGUIConfiguration::
      getAllDiagnosisConfiguration () const
      {
        return this->AllDiagnosisConfiguration_.get ();
      }

      SaesGUIConfiguration::AllDiagnosisConfigurationType& SaesGUIConfiguration::
      getAllDiagnosisConfiguration ()
      {
        return this->AllDiagnosisConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setAllDiagnosisConfiguration (const AllDiagnosisConfigurationType& x)
      {
        this->AllDiagnosisConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setAllDiagnosisConfiguration (::std::auto_ptr< AllDiagnosisConfigurationType > x)
      {
        this->AllDiagnosisConfiguration_.set (x);
      }

      const SaesGUIConfiguration::AutomaticWindowConfigurationType& SaesGUIConfiguration::
      getAutomaticWindowConfiguration () const
      {
        return this->AutomaticWindowConfiguration_.get ();
      }

      SaesGUIConfiguration::AutomaticWindowConfigurationType& SaesGUIConfiguration::
      getAutomaticWindowConfiguration ()
      {
        return this->AutomaticWindowConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setAutomaticWindowConfiguration (const AutomaticWindowConfigurationType& x)
      {
        this->AutomaticWindowConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setAutomaticWindowConfiguration (::std::auto_ptr< AutomaticWindowConfigurationType > x)
      {
        this->AutomaticWindowConfiguration_.set (x);
      }

      const SaesGUIConfiguration::ContingencyCardWidgetConfigurationType& SaesGUIConfiguration::
      getContingencyCardWidgetConfiguration () const
      {
        return this->ContingencyCardWidgetConfiguration_.get ();
      }

      SaesGUIConfiguration::ContingencyCardWidgetConfigurationType& SaesGUIConfiguration::
      getContingencyCardWidgetConfiguration ()
      {
        return this->ContingencyCardWidgetConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setContingencyCardWidgetConfiguration (const ContingencyCardWidgetConfigurationType& x)
      {
        this->ContingencyCardWidgetConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setContingencyCardWidgetConfiguration (::std::auto_ptr< ContingencyCardWidgetConfigurationType > x)
      {
        this->ContingencyCardWidgetConfiguration_.set (x);
      }

      const SaesGUIConfiguration::IDCardProcessConfigurationType& SaesGUIConfiguration::
      getIDCardProcessConfiguration () const
      {
        return this->IDCardProcessConfiguration_.get ();
      }

      SaesGUIConfiguration::IDCardProcessConfigurationType& SaesGUIConfiguration::
      getIDCardProcessConfiguration ()
      {
        return this->IDCardProcessConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setIDCardProcessConfiguration (const IDCardProcessConfigurationType& x)
      {
        this->IDCardProcessConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setIDCardProcessConfiguration (::std::auto_ptr< IDCardProcessConfigurationType > x)
      {
        this->IDCardProcessConfiguration_.set (x);
      }

      const SaesGUIConfiguration::BEIDCardWidgetConfigurationType& SaesGUIConfiguration::
      getBEIDCardWidgetConfiguration () const
      {
        return this->BEIDCardWidgetConfiguration_.get ();
      }

      SaesGUIConfiguration::BEIDCardWidgetConfigurationType& SaesGUIConfiguration::
      getBEIDCardWidgetConfiguration ()
      {
        return this->BEIDCardWidgetConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setBEIDCardWidgetConfiguration (const BEIDCardWidgetConfigurationType& x)
      {
        this->BEIDCardWidgetConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setBEIDCardWidgetConfiguration (::std::auto_ptr< BEIDCardWidgetConfigurationType > x)
      {
        this->BEIDCardWidgetConfiguration_.set (x);
      }

      const SaesGUIConfiguration::MemoryStateWidgetConfigurationType& SaesGUIConfiguration::
      getMemoryStateWidgetConfiguration () const
      {
        return this->MemoryStateWidgetConfiguration_.get ();
      }

      SaesGUIConfiguration::MemoryStateWidgetConfigurationType& SaesGUIConfiguration::
      getMemoryStateWidgetConfiguration ()
      {
        return this->MemoryStateWidgetConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setMemoryStateWidgetConfiguration (const MemoryStateWidgetConfigurationType& x)
      {
        this->MemoryStateWidgetConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setMemoryStateWidgetConfiguration (::std::auto_ptr< MemoryStateWidgetConfigurationType > x)
      {
        this->MemoryStateWidgetConfiguration_.set (x);
      }

      const SaesGUIConfiguration::HelpWidgetConfigurationType& SaesGUIConfiguration::
      getHelpWidgetConfiguration () const
      {
        return this->HelpWidgetConfiguration_.get ();
      }

      SaesGUIConfiguration::HelpWidgetConfigurationType& SaesGUIConfiguration::
      getHelpWidgetConfiguration ()
      {
        return this->HelpWidgetConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setHelpWidgetConfiguration (const HelpWidgetConfigurationType& x)
      {
        this->HelpWidgetConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setHelpWidgetConfiguration (::std::auto_ptr< HelpWidgetConfigurationType > x)
      {
        this->HelpWidgetConfiguration_.set (x);
      }

      const SaesGUIConfiguration::WaitingForCardWindowConfigurationType& SaesGUIConfiguration::
      getWaitingForCardWindowConfiguration () const
      {
        return this->WaitingForCardWindowConfiguration_.get ();
      }

      SaesGUIConfiguration::WaitingForCardWindowConfigurationType& SaesGUIConfiguration::
      getWaitingForCardWindowConfiguration ()
      {
        return this->WaitingForCardWindowConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setWaitingForCardWindowConfiguration (const WaitingForCardWindowConfigurationType& x)
      {
        this->WaitingForCardWindowConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setWaitingForCardWindowConfiguration (::std::auto_ptr< WaitingForCardWindowConfigurationType > x)
      {
        this->WaitingForCardWindowConfiguration_.set (x);
      }

      const SaesGUIConfiguration::LanguageSelectionWindowConfigurationType& SaesGUIConfiguration::
      getLanguageSelectionWindowConfiguration () const
      {
        return this->LanguageSelectionWindowConfiguration_.get ();
      }

      SaesGUIConfiguration::LanguageSelectionWindowConfigurationType& SaesGUIConfiguration::
      getLanguageSelectionWindowConfiguration ()
      {
        return this->LanguageSelectionWindowConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setLanguageSelectionWindowConfiguration (const LanguageSelectionWindowConfigurationType& x)
      {
        this->LanguageSelectionWindowConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setLanguageSelectionWindowConfiguration (::std::auto_ptr< LanguageSelectionWindowConfigurationType > x)
      {
        this->LanguageSelectionWindowConfiguration_.set (x);
      }

      const SaesGUIConfiguration::StatisticFunctionalityConfigurationType& SaesGUIConfiguration::
      getStatisticFunctionalityConfiguration () const
      {
        return this->StatisticFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::StatisticFunctionalityConfigurationType& SaesGUIConfiguration::
      getStatisticFunctionalityConfiguration ()
      {
        return this->StatisticFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setStatisticFunctionalityConfiguration (const StatisticFunctionalityConfigurationType& x)
      {
        this->StatisticFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setStatisticFunctionalityConfiguration (::std::auto_ptr< StatisticFunctionalityConfigurationType > x)
      {
        this->StatisticFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::OpenElectionFunctionalityConfigurationType& SaesGUIConfiguration::
      getOpenElectionFunctionalityConfiguration () const
      {
        return this->OpenElectionFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::OpenElectionFunctionalityConfigurationType& SaesGUIConfiguration::
      getOpenElectionFunctionalityConfiguration ()
      {
        return this->OpenElectionFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setOpenElectionFunctionalityConfiguration (const OpenElectionFunctionalityConfigurationType& x)
      {
        this->OpenElectionFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setOpenElectionFunctionalityConfiguration (::std::auto_ptr< OpenElectionFunctionalityConfigurationType > x)
      {
        this->OpenElectionFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::AuthenticationWindowConfigurationType& SaesGUIConfiguration::
      getAuthenticationWindowConfiguration () const
      {
        return this->AuthenticationWindowConfiguration_.get ();
      }

      SaesGUIConfiguration::AuthenticationWindowConfigurationType& SaesGUIConfiguration::
      getAuthenticationWindowConfiguration ()
      {
        return this->AuthenticationWindowConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setAuthenticationWindowConfiguration (const AuthenticationWindowConfigurationType& x)
      {
        this->AuthenticationWindowConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setAuthenticationWindowConfiguration (::std::auto_ptr< AuthenticationWindowConfigurationType > x)
      {
        this->AuthenticationWindowConfiguration_.set (x);
      }

      const SaesGUIConfiguration::DurationWidgetConfigurationType& SaesGUIConfiguration::
      getDurationWidgetConfiguration () const
      {
        return this->DurationWidgetConfiguration_.get ();
      }

      SaesGUIConfiguration::DurationWidgetConfigurationType& SaesGUIConfiguration::
      getDurationWidgetConfiguration ()
      {
        return this->DurationWidgetConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setDurationWidgetConfiguration (const DurationWidgetConfigurationType& x)
      {
        this->DurationWidgetConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setDurationWidgetConfiguration (::std::auto_ptr< DurationWidgetConfigurationType > x)
      {
        this->DurationWidgetConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CloseElectionFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseElectionFunctionalityConfiguration () const
      {
        return this->CloseElectionFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CloseElectionFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseElectionFunctionalityConfiguration ()
      {
        return this->CloseElectionFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCloseElectionFunctionalityConfiguration (const CloseElectionFunctionalityConfigurationType& x)
      {
        this->CloseElectionFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCloseElectionFunctionalityConfiguration (::std::auto_ptr< CloseElectionFunctionalityConfigurationType > x)
      {
        this->CloseElectionFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::ActivationConsolidationFunctionalityConfigurationType& SaesGUIConfiguration::
      getActivationConsolidationFunctionalityConfiguration () const
      {
        return this->ActivationConsolidationFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::ActivationConsolidationFunctionalityConfigurationType& SaesGUIConfiguration::
      getActivationConsolidationFunctionalityConfiguration ()
      {
        return this->ActivationConsolidationFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setActivationConsolidationFunctionalityConfiguration (const ActivationConsolidationFunctionalityConfigurationType& x)
      {
        this->ActivationConsolidationFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setActivationConsolidationFunctionalityConfiguration (::std::auto_ptr< ActivationConsolidationFunctionalityConfigurationType > x)
      {
        this->ActivationConsolidationFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CloseVotationFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseVotationFunctionalityConfiguration () const
      {
        return this->CloseVotationFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CloseVotationFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseVotationFunctionalityConfiguration ()
      {
        return this->CloseVotationFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCloseVotationFunctionalityConfiguration (const CloseVotationFunctionalityConfigurationType& x)
      {
        this->CloseVotationFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCloseVotationFunctionalityConfiguration (::std::auto_ptr< CloseVotationFunctionalityConfigurationType > x)
      {
        this->CloseVotationFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::InitializationWindowConfigurationType& SaesGUIConfiguration::
      getInitializationWindowConfiguration () const
      {
        return this->InitializationWindowConfiguration_.get ();
      }

      SaesGUIConfiguration::InitializationWindowConfigurationType& SaesGUIConfiguration::
      getInitializationWindowConfiguration ()
      {
        return this->InitializationWindowConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setInitializationWindowConfiguration (const InitializationWindowConfigurationType& x)
      {
        this->InitializationWindowConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setInitializationWindowConfiguration (::std::auto_ptr< InitializationWindowConfigurationType > x)
      {
        this->InitializationWindowConfiguration_.set (x);
      }

      const SaesGUIConfiguration::IncidentReportFunctionalityConfigurationType& SaesGUIConfiguration::
      getIncidentReportFunctionalityConfiguration () const
      {
        return this->IncidentReportFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::IncidentReportFunctionalityConfigurationType& SaesGUIConfiguration::
      getIncidentReportFunctionalityConfiguration ()
      {
        return this->IncidentReportFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setIncidentReportFunctionalityConfiguration (const IncidentReportFunctionalityConfigurationType& x)
      {
        this->IncidentReportFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setIncidentReportFunctionalityConfiguration (::std::auto_ptr< IncidentReportFunctionalityConfigurationType > x)
      {
        this->IncidentReportFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::PollWorkerRegisterFunctionalityConfigurationType& SaesGUIConfiguration::
      getPollWorkerRegisterFunctionalityConfiguration () const
      {
        return this->PollWorkerRegisterFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::PollWorkerRegisterFunctionalityConfigurationType& SaesGUIConfiguration::
      getPollWorkerRegisterFunctionalityConfiguration ()
      {
        return this->PollWorkerRegisterFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setPollWorkerRegisterFunctionalityConfiguration (const PollWorkerRegisterFunctionalityConfigurationType& x)
      {
        this->PollWorkerRegisterFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setPollWorkerRegisterFunctionalityConfiguration (::std::auto_ptr< PollWorkerRegisterFunctionalityConfigurationType > x)
      {
        this->PollWorkerRegisterFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CloseNoteRegisterFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseNoteRegisterFunctionalityConfiguration () const
      {
        return this->CloseNoteRegisterFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CloseNoteRegisterFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseNoteRegisterFunctionalityConfiguration ()
      {
        return this->CloseNoteRegisterFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCloseNoteRegisterFunctionalityConfiguration (const CloseNoteRegisterFunctionalityConfigurationType& x)
      {
        this->CloseNoteRegisterFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCloseNoteRegisterFunctionalityConfiguration (::std::auto_ptr< CloseNoteRegisterFunctionalityConfigurationType > x)
      {
        this->CloseNoteRegisterFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::VoteConsolidationFunctionalityConfigurationType& SaesGUIConfiguration::
      getVoteConsolidationFunctionalityConfiguration () const
      {
        return this->VoteConsolidationFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::VoteConsolidationFunctionalityConfigurationType& SaesGUIConfiguration::
      getVoteConsolidationFunctionalityConfiguration ()
      {
        return this->VoteConsolidationFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setVoteConsolidationFunctionalityConfiguration (const VoteConsolidationFunctionalityConfigurationType& x)
      {
        this->VoteConsolidationFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setVoteConsolidationFunctionalityConfiguration (::std::auto_ptr< VoteConsolidationFunctionalityConfigurationType > x)
      {
        this->VoteConsolidationFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::PrintPreviewFunctionalityConfigurationType& SaesGUIConfiguration::
      getPrintPreviewFunctionalityConfiguration () const
      {
        return this->PrintPreviewFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::PrintPreviewFunctionalityConfigurationType& SaesGUIConfiguration::
      getPrintPreviewFunctionalityConfiguration ()
      {
        return this->PrintPreviewFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setPrintPreviewFunctionalityConfiguration (const PrintPreviewFunctionalityConfigurationType& x)
      {
        this->PrintPreviewFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setPrintPreviewFunctionalityConfiguration (::std::auto_ptr< PrintPreviewFunctionalityConfigurationType > x)
      {
        this->PrintPreviewFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::LogReportFunctionalityConfigurationType& SaesGUIConfiguration::
      getLogReportFunctionalityConfiguration () const
      {
        return this->LogReportFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::LogReportFunctionalityConfigurationType& SaesGUIConfiguration::
      getLogReportFunctionalityConfiguration ()
      {
        return this->LogReportFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setLogReportFunctionalityConfiguration (const LogReportFunctionalityConfigurationType& x)
      {
        this->LogReportFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setLogReportFunctionalityConfiguration (::std::auto_ptr< LogReportFunctionalityConfigurationType > x)
      {
        this->LogReportFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::CloseNotetFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseNotetFunctionalityConfiguration () const
      {
        return this->CloseNotetFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::CloseNotetFunctionalityConfigurationType& SaesGUIConfiguration::
      getCloseNotetFunctionalityConfiguration ()
      {
        return this->CloseNotetFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setCloseNotetFunctionalityConfiguration (const CloseNotetFunctionalityConfigurationType& x)
      {
        this->CloseNotetFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setCloseNotetFunctionalityConfiguration (::std::auto_ptr< CloseNotetFunctionalityConfigurationType > x)
      {
        this->CloseNotetFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::VotingExperienceValidationScreensFunctionalityConfigurationType& SaesGUIConfiguration::
      getVotingExperienceValidationScreensFunctionalityConfiguration () const
      {
        return this->VotingExperienceValidationScreensFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::VotingExperienceValidationScreensFunctionalityConfigurationType& SaesGUIConfiguration::
      getVotingExperienceValidationScreensFunctionalityConfiguration ()
      {
        return this->VotingExperienceValidationScreensFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setVotingExperienceValidationScreensFunctionalityConfiguration (const VotingExperienceValidationScreensFunctionalityConfigurationType& x)
      {
        this->VotingExperienceValidationScreensFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setVotingExperienceValidationScreensFunctionalityConfiguration (::std::auto_ptr< VotingExperienceValidationScreensFunctionalityConfigurationType > x)
      {
        this->VotingExperienceValidationScreensFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::VotingForDisabledFunctionalityConfigurationType& SaesGUIConfiguration::
      getVotingForDisabledFunctionalityConfiguration () const
      {
        return this->VotingForDisabledFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::VotingForDisabledFunctionalityConfigurationType& SaesGUIConfiguration::
      getVotingForDisabledFunctionalityConfiguration ()
      {
        return this->VotingForDisabledFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setVotingForDisabledFunctionalityConfiguration (const VotingForDisabledFunctionalityConfigurationType& x)
      {
        this->VotingForDisabledFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setVotingForDisabledFunctionalityConfiguration (::std::auto_ptr< VotingForDisabledFunctionalityConfigurationType > x)
      {
        this->VotingForDisabledFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::PoliceNoteRegisterFunctionalityConfigurationType& SaesGUIConfiguration::
      getPoliceNoteRegisterFunctionalityConfiguration () const
      {
        return this->PoliceNoteRegisterFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::PoliceNoteRegisterFunctionalityConfigurationType& SaesGUIConfiguration::
      getPoliceNoteRegisterFunctionalityConfiguration ()
      {
        return this->PoliceNoteRegisterFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setPoliceNoteRegisterFunctionalityConfiguration (const PoliceNoteRegisterFunctionalityConfigurationType& x)
      {
        this->PoliceNoteRegisterFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setPoliceNoteRegisterFunctionalityConfiguration (::std::auto_ptr< PoliceNoteRegisterFunctionalityConfigurationType > x)
      {
        this->PoliceNoteRegisterFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::DataUtilsValidatorFunctionalityConfigurationType& SaesGUIConfiguration::
      getDataUtilsValidatorFunctionalityConfiguration () const
      {
        return this->DataUtilsValidatorFunctionalityConfiguration_.get ();
      }

      SaesGUIConfiguration::DataUtilsValidatorFunctionalityConfigurationType& SaesGUIConfiguration::
      getDataUtilsValidatorFunctionalityConfiguration ()
      {
        return this->DataUtilsValidatorFunctionalityConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setDataUtilsValidatorFunctionalityConfiguration (const DataUtilsValidatorFunctionalityConfigurationType& x)
      {
        this->DataUtilsValidatorFunctionalityConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setDataUtilsValidatorFunctionalityConfiguration (::std::auto_ptr< DataUtilsValidatorFunctionalityConfigurationType > x)
      {
        this->DataUtilsValidatorFunctionalityConfiguration_.set (x);
      }

      const SaesGUIConfiguration::ThemesConfigurationType& SaesGUIConfiguration::
      getThemesConfiguration () const
      {
        return this->ThemesConfiguration_.get ();
      }

      SaesGUIConfiguration::ThemesConfigurationType& SaesGUIConfiguration::
      getThemesConfiguration ()
      {
        return this->ThemesConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setThemesConfiguration (const ThemesConfigurationType& x)
      {
        this->ThemesConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setThemesConfiguration (::std::auto_ptr< ThemesConfigurationType > x)
      {
        this->ThemesConfiguration_.set (x);
      }

      const SaesGUIConfiguration::FunctionalityWizardConfigurationType& SaesGUIConfiguration::
      getFunctionalityWizardConfiguration () const
      {
        return this->FunctionalityWizardConfiguration_.get ();
      }

      SaesGUIConfiguration::FunctionalityWizardConfigurationType& SaesGUIConfiguration::
      getFunctionalityWizardConfiguration ()
      {
        return this->FunctionalityWizardConfiguration_.get ();
      }

      void SaesGUIConfiguration::
      setFunctionalityWizardConfiguration (const FunctionalityWizardConfigurationType& x)
      {
        this->FunctionalityWizardConfiguration_.set (x);
      }

      void SaesGUIConfiguration::
      setFunctionalityWizardConfiguration (::std::auto_ptr< FunctionalityWizardConfigurationType > x)
      {
        this->FunctionalityWizardConfiguration_.set (x);
      }


      // OpenElectionSteps
      // 

      OpenElectionSteps::
      OpenElectionSteps ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      OpenElectionSteps::
      OpenElectionSteps (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_OpenElectionSteps_literals_[v])
      {
      }

      OpenElectionSteps::
      OpenElectionSteps (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      OpenElectionSteps::
      OpenElectionSteps (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      OpenElectionSteps::
      OpenElectionSteps (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      OpenElectionSteps::
      OpenElectionSteps (const OpenElectionSteps& v,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      OpenElectionSteps& OpenElectionSteps::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_OpenElectionSteps_literals_[v]);

        return *this;
      }


      // ScanConsolidationConfiguration
      // 

      const ScanConsolidationConfiguration::ScanPopUpMessageConfigurationType& ScanConsolidationConfiguration::
      getScanPopUpMessageConfiguration () const
      {
        return this->ScanPopUpMessageConfiguration_.get ();
      }

      ScanConsolidationConfiguration::ScanPopUpMessageConfigurationType& ScanConsolidationConfiguration::
      getScanPopUpMessageConfiguration ()
      {
        return this->ScanPopUpMessageConfiguration_.get ();
      }

      void ScanConsolidationConfiguration::
      setScanPopUpMessageConfiguration (const ScanPopUpMessageConfigurationType& x)
      {
        this->ScanPopUpMessageConfiguration_.set (x);
      }

      void ScanConsolidationConfiguration::
      setScanPopUpMessageConfiguration (::std::auto_ptr< ScanPopUpMessageConfigurationType > x)
      {
        this->ScanPopUpMessageConfiguration_.set (x);
      }

      const ScanConsolidationConfiguration::EnabledChangeColorType& ScanConsolidationConfiguration::
      getEnabledChangeColor () const
      {
        return this->EnabledChangeColor_.get ();
      }

      ScanConsolidationConfiguration::EnabledChangeColorType& ScanConsolidationConfiguration::
      getEnabledChangeColor ()
      {
        return this->EnabledChangeColor_.get ();
      }

      void ScanConsolidationConfiguration::
      setEnabledChangeColor (const EnabledChangeColorType& x)
      {
        this->EnabledChangeColor_.set (x);
      }

      const ScanConsolidationConfiguration::BoxColorValidType& ScanConsolidationConfiguration::
      getBoxColorValid () const
      {
        return this->BoxColorValid_.get ();
      }

      ScanConsolidationConfiguration::BoxColorValidType& ScanConsolidationConfiguration::
      getBoxColorValid ()
      {
        return this->BoxColorValid_.get ();
      }

      void ScanConsolidationConfiguration::
      setBoxColorValid (const BoxColorValidType& x)
      {
        this->BoxColorValid_.set (x);
      }

      void ScanConsolidationConfiguration::
      setBoxColorValid (::std::auto_ptr< BoxColorValidType > x)
      {
        this->BoxColorValid_.set (x);
      }

      const ScanConsolidationConfiguration::BoxColorDuplicateType& ScanConsolidationConfiguration::
      getBoxColorDuplicate () const
      {
        return this->BoxColorDuplicate_.get ();
      }

      ScanConsolidationConfiguration::BoxColorDuplicateType& ScanConsolidationConfiguration::
      getBoxColorDuplicate ()
      {
        return this->BoxColorDuplicate_.get ();
      }

      void ScanConsolidationConfiguration::
      setBoxColorDuplicate (const BoxColorDuplicateType& x)
      {
        this->BoxColorDuplicate_.set (x);
      }

      void ScanConsolidationConfiguration::
      setBoxColorDuplicate (::std::auto_ptr< BoxColorDuplicateType > x)
      {
        this->BoxColorDuplicate_.set (x);
      }

      const ScanConsolidationConfiguration::BoxColorBadType& ScanConsolidationConfiguration::
      getBoxColorBad () const
      {
        return this->BoxColorBad_.get ();
      }

      ScanConsolidationConfiguration::BoxColorBadType& ScanConsolidationConfiguration::
      getBoxColorBad ()
      {
        return this->BoxColorBad_.get ();
      }

      void ScanConsolidationConfiguration::
      setBoxColorBad (const BoxColorBadType& x)
      {
        this->BoxColorBad_.set (x);
      }

      void ScanConsolidationConfiguration::
      setBoxColorBad (::std::auto_ptr< BoxColorBadType > x)
      {
        this->BoxColorBad_.set (x);
      }

      const ScanConsolidationConfiguration::FontColorValidType& ScanConsolidationConfiguration::
      getFontColorValid () const
      {
        return this->FontColorValid_.get ();
      }

      ScanConsolidationConfiguration::FontColorValidType& ScanConsolidationConfiguration::
      getFontColorValid ()
      {
        return this->FontColorValid_.get ();
      }

      void ScanConsolidationConfiguration::
      setFontColorValid (const FontColorValidType& x)
      {
        this->FontColorValid_.set (x);
      }

      void ScanConsolidationConfiguration::
      setFontColorValid (::std::auto_ptr< FontColorValidType > x)
      {
        this->FontColorValid_.set (x);
      }

      const ScanConsolidationConfiguration::FontColorDuplicateType& ScanConsolidationConfiguration::
      getFontColorDuplicate () const
      {
        return this->FontColorDuplicate_.get ();
      }

      ScanConsolidationConfiguration::FontColorDuplicateType& ScanConsolidationConfiguration::
      getFontColorDuplicate ()
      {
        return this->FontColorDuplicate_.get ();
      }

      void ScanConsolidationConfiguration::
      setFontColorDuplicate (const FontColorDuplicateType& x)
      {
        this->FontColorDuplicate_.set (x);
      }

      void ScanConsolidationConfiguration::
      setFontColorDuplicate (::std::auto_ptr< FontColorDuplicateType > x)
      {
        this->FontColorDuplicate_.set (x);
      }

      const ScanConsolidationConfiguration::FontColorBadType& ScanConsolidationConfiguration::
      getFontColorBad () const
      {
        return this->FontColorBad_.get ();
      }

      ScanConsolidationConfiguration::FontColorBadType& ScanConsolidationConfiguration::
      getFontColorBad ()
      {
        return this->FontColorBad_.get ();
      }

      void ScanConsolidationConfiguration::
      setFontColorBad (const FontColorBadType& x)
      {
        this->FontColorBad_.set (x);
      }

      void ScanConsolidationConfiguration::
      setFontColorBad (::std::auto_ptr< FontColorBadType > x)
      {
        this->FontColorBad_.set (x);
      }

      const ScanConsolidationConfiguration::TextConfigurationType& ScanConsolidationConfiguration::
      getTextConfiguration () const
      {
        return this->TextConfiguration_.get ();
      }

      ScanConsolidationConfiguration::TextConfigurationType& ScanConsolidationConfiguration::
      getTextConfiguration ()
      {
        return this->TextConfiguration_.get ();
      }

      void ScanConsolidationConfiguration::
      setTextConfiguration (const TextConfigurationType& x)
      {
        this->TextConfiguration_.set (x);
      }

      void ScanConsolidationConfiguration::
      setTextConfiguration (::std::auto_ptr< TextConfigurationType > x)
      {
        this->TextConfiguration_.set (x);
      }


      // ScanPopUpMessageConfiguration
      // 

      const ScanPopUpMessageConfiguration::VisibleType& ScanPopUpMessageConfiguration::
      getVisible () const
      {
        return this->Visible_.get ();
      }

      ScanPopUpMessageConfiguration::VisibleType& ScanPopUpMessageConfiguration::
      getVisible ()
      {
        return this->Visible_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setVisible (const VisibleType& x)
      {
        this->Visible_.set (x);
      }

      const ScanPopUpMessageConfiguration::TimeOutType& ScanPopUpMessageConfiguration::
      getTimeOut () const
      {
        return this->TimeOut_.get ();
      }

      ScanPopUpMessageConfiguration::TimeOutType& ScanPopUpMessageConfiguration::
      getTimeOut ()
      {
        return this->TimeOut_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setTimeOut (const TimeOutType& x)
      {
        this->TimeOut_.set (x);
      }

      const ScanPopUpMessageConfiguration::OpacityType& ScanPopUpMessageConfiguration::
      getOpacity () const
      {
        return this->Opacity_.get ();
      }

      ScanPopUpMessageConfiguration::OpacityType& ScanPopUpMessageConfiguration::
      getOpacity ()
      {
        return this->Opacity_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setOpacity (const OpacityType& x)
      {
        this->Opacity_.set (x);
      }

      const ScanPopUpMessageConfiguration::WidthType& ScanPopUpMessageConfiguration::
      getWidth () const
      {
        return this->Width_.get ();
      }

      ScanPopUpMessageConfiguration::WidthType& ScanPopUpMessageConfiguration::
      getWidth ()
      {
        return this->Width_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setWidth (const WidthType& x)
      {
        this->Width_.set (x);
      }

      const ScanPopUpMessageConfiguration::HeightType& ScanPopUpMessageConfiguration::
      getHeight () const
      {
        return this->Height_.get ();
      }

      ScanPopUpMessageConfiguration::HeightType& ScanPopUpMessageConfiguration::
      getHeight ()
      {
        return this->Height_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setHeight (const HeightType& x)
      {
        this->Height_.set (x);
      }

      const ScanPopUpMessageConfiguration::XType& ScanPopUpMessageConfiguration::
      getX () const
      {
        return this->X_.get ();
      }

      ScanPopUpMessageConfiguration::XType& ScanPopUpMessageConfiguration::
      getX ()
      {
        return this->X_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setX (const XType& x)
      {
        this->X_.set (x);
      }

      const ScanPopUpMessageConfiguration::YType& ScanPopUpMessageConfiguration::
      getY () const
      {
        return this->Y_.get ();
      }

      ScanPopUpMessageConfiguration::YType& ScanPopUpMessageConfiguration::
      getY ()
      {
        return this->Y_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setY (const YType& x)
      {
        this->Y_.set (x);
      }

      const ScanPopUpMessageConfiguration::PositionType& ScanPopUpMessageConfiguration::
      getPosition () const
      {
        return this->Position_.get ();
      }

      ScanPopUpMessageConfiguration::PositionType& ScanPopUpMessageConfiguration::
      getPosition ()
      {
        return this->Position_.get ();
      }

      void ScanPopUpMessageConfiguration::
      setPosition (const PositionType& x)
      {
        this->Position_.set (x);
      }

      void ScanPopUpMessageConfiguration::
      setPosition (::std::auto_ptr< PositionType > x)
      {
        this->Position_.set (x);
      }


      // PositionConfiguration
      // 

      PositionConfiguration::
      PositionConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      PositionConfiguration::
      PositionConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_PositionConfiguration_literals_[v])
      {
      }

      PositionConfiguration::
      PositionConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      PositionConfiguration::
      PositionConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      PositionConfiguration::
      PositionConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      PositionConfiguration::
      PositionConfiguration (const PositionConfiguration& v,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      PositionConfiguration& PositionConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_PositionConfiguration_literals_[v]);

        return *this;
      }


      // TreeColumnConfiguration
      // 

      const TreeColumnConfiguration::ResizableType& TreeColumnConfiguration::
      getResizable () const
      {
        return this->Resizable_.get ();
      }

      TreeColumnConfiguration::ResizableType& TreeColumnConfiguration::
      getResizable ()
      {
        return this->Resizable_.get ();
      }

      void TreeColumnConfiguration::
      setResizable (const ResizableType& x)
      {
        this->Resizable_.set (x);
      }

      const TreeColumnConfiguration::MaxWidthType& TreeColumnConfiguration::
      getMaxWidth () const
      {
        return this->MaxWidth_.get ();
      }

      TreeColumnConfiguration::MaxWidthType& TreeColumnConfiguration::
      getMaxWidth ()
      {
        return this->MaxWidth_.get ();
      }

      void TreeColumnConfiguration::
      setMaxWidth (const MaxWidthType& x)
      {
        this->MaxWidth_.set (x);
      }

      const TreeColumnConfiguration::MinWidthType& TreeColumnConfiguration::
      getMinWidth () const
      {
        return this->MinWidth_.get ();
      }

      TreeColumnConfiguration::MinWidthType& TreeColumnConfiguration::
      getMinWidth ()
      {
        return this->MinWidth_.get ();
      }

      void TreeColumnConfiguration::
      setMinWidth (const MinWidthType& x)
      {
        this->MinWidth_.set (x);
      }

      const TreeColumnConfiguration::AlignmentType& TreeColumnConfiguration::
      getAlignment () const
      {
        return this->Alignment_.get ();
      }

      TreeColumnConfiguration::AlignmentType& TreeColumnConfiguration::
      getAlignment ()
      {
        return this->Alignment_.get ();
      }

      void TreeColumnConfiguration::
      setAlignment (const AlignmentType& x)
      {
        this->Alignment_.set (x);
      }


      // IncidentReportColumn
      // 

      IncidentReportColumn::
      IncidentReportColumn ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      IncidentReportColumn::
      IncidentReportColumn (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_IncidentReportColumn_literals_[v])
      {
      }

      IncidentReportColumn::
      IncidentReportColumn (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      IncidentReportColumn::
      IncidentReportColumn (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      IncidentReportColumn::
      IncidentReportColumn (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      IncidentReportColumn::
      IncidentReportColumn (const IncidentReportColumn& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      IncidentReportColumn& IncidentReportColumn::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_IncidentReportColumn_literals_[v]);

        return *this;
      }


      // IncidentReportTreeViewConfiguration
      // 

      const IncidentReportTreeViewConfiguration::IncidentReportColumnType& IncidentReportTreeViewConfiguration::
      getIncidentReportColumn () const
      {
        return this->IncidentReportColumn_.get ();
      }

      IncidentReportTreeViewConfiguration::IncidentReportColumnType& IncidentReportTreeViewConfiguration::
      getIncidentReportColumn ()
      {
        return this->IncidentReportColumn_.get ();
      }

      void IncidentReportTreeViewConfiguration::
      setIncidentReportColumn (const IncidentReportColumnType& x)
      {
        this->IncidentReportColumn_.set (x);
      }

      void IncidentReportTreeViewConfiguration::
      setIncidentReportColumn (::std::auto_ptr< IncidentReportColumnType > x)
      {
        this->IncidentReportColumn_.set (x);
      }

      const IncidentReportTreeViewConfiguration::IncidentColumnConfigurationType& IncidentReportTreeViewConfiguration::
      getIncidentColumnConfiguration () const
      {
        return this->IncidentColumnConfiguration_.get ();
      }

      IncidentReportTreeViewConfiguration::IncidentColumnConfigurationType& IncidentReportTreeViewConfiguration::
      getIncidentColumnConfiguration ()
      {
        return this->IncidentColumnConfiguration_.get ();
      }

      void IncidentReportTreeViewConfiguration::
      setIncidentColumnConfiguration (const IncidentColumnConfigurationType& x)
      {
        this->IncidentColumnConfiguration_.set (x);
      }

      void IncidentReportTreeViewConfiguration::
      setIncidentColumnConfiguration (::std::auto_ptr< IncidentColumnConfigurationType > x)
      {
        this->IncidentColumnConfiguration_.set (x);
      }


      // ButtonConfiguration
      // 

      const ButtonConfiguration::ButtonWidthType& ButtonConfiguration::
      getButtonWidth () const
      {
        return this->ButtonWidth_.get ();
      }

      ButtonConfiguration::ButtonWidthType& ButtonConfiguration::
      getButtonWidth ()
      {
        return this->ButtonWidth_.get ();
      }

      void ButtonConfiguration::
      setButtonWidth (const ButtonWidthType& x)
      {
        this->ButtonWidth_.set (x);
      }

      const ButtonConfiguration::ButtonHeightType& ButtonConfiguration::
      getButtonHeight () const
      {
        return this->ButtonHeight_.get ();
      }

      ButtonConfiguration::ButtonHeightType& ButtonConfiguration::
      getButtonHeight ()
      {
        return this->ButtonHeight_.get ();
      }

      void ButtonConfiguration::
      setButtonHeight (const ButtonHeightType& x)
      {
        this->ButtonHeight_.set (x);
      }

      const ButtonConfiguration::FontSizeType& ButtonConfiguration::
      getFontSize () const
      {
        return this->FontSize_.get ();
      }

      ButtonConfiguration::FontSizeType& ButtonConfiguration::
      getFontSize ()
      {
        return this->FontSize_.get ();
      }

      void ButtonConfiguration::
      setFontSize (const FontSizeType& x)
      {
        this->FontSize_.set (x);
      }


      // ButtonBoxConfiguration
      // 

      const ButtonBoxConfiguration::ButtonWidthType& ButtonBoxConfiguration::
      getButtonWidth () const
      {
        return this->ButtonWidth_.get ();
      }

      ButtonBoxConfiguration::ButtonWidthType& ButtonBoxConfiguration::
      getButtonWidth ()
      {
        return this->ButtonWidth_.get ();
      }

      void ButtonBoxConfiguration::
      setButtonWidth (const ButtonWidthType& x)
      {
        this->ButtonWidth_.set (x);
      }

      const ButtonBoxConfiguration::ButtonHeightType& ButtonBoxConfiguration::
      getButtonHeight () const
      {
        return this->ButtonHeight_.get ();
      }

      ButtonBoxConfiguration::ButtonHeightType& ButtonBoxConfiguration::
      getButtonHeight ()
      {
        return this->ButtonHeight_.get ();
      }

      void ButtonBoxConfiguration::
      setButtonHeight (const ButtonHeightType& x)
      {
        this->ButtonHeight_.set (x);
      }

      const ButtonBoxConfiguration::SpacingType& ButtonBoxConfiguration::
      getSpacing () const
      {
        return this->Spacing_.get ();
      }

      ButtonBoxConfiguration::SpacingType& ButtonBoxConfiguration::
      getSpacing ()
      {
        return this->Spacing_.get ();
      }

      void ButtonBoxConfiguration::
      setSpacing (const SpacingType& x)
      {
        this->Spacing_.set (x);
      }


      // MenuWidgetConfiguration
      // 

      const MenuWidgetConfiguration::FirstLevelWidthType& MenuWidgetConfiguration::
      getFirstLevelWidth () const
      {
        return this->FirstLevelWidth_.get ();
      }

      MenuWidgetConfiguration::FirstLevelWidthType& MenuWidgetConfiguration::
      getFirstLevelWidth ()
      {
        return this->FirstLevelWidth_.get ();
      }

      void MenuWidgetConfiguration::
      setFirstLevelWidth (const FirstLevelWidthType& x)
      {
        this->FirstLevelWidth_.set (x);
      }

      const MenuWidgetConfiguration::FirstLevelHeightType& MenuWidgetConfiguration::
      getFirstLevelHeight () const
      {
        return this->FirstLevelHeight_.get ();
      }

      MenuWidgetConfiguration::FirstLevelHeightType& MenuWidgetConfiguration::
      getFirstLevelHeight ()
      {
        return this->FirstLevelHeight_.get ();
      }

      void MenuWidgetConfiguration::
      setFirstLevelHeight (const FirstLevelHeightType& x)
      {
        this->FirstLevelHeight_.set (x);
      }

      const MenuWidgetConfiguration::FirstLevelSpacingType& MenuWidgetConfiguration::
      getFirstLevelSpacing () const
      {
        return this->FirstLevelSpacing_.get ();
      }

      MenuWidgetConfiguration::FirstLevelSpacingType& MenuWidgetConfiguration::
      getFirstLevelSpacing ()
      {
        return this->FirstLevelSpacing_.get ();
      }

      void MenuWidgetConfiguration::
      setFirstLevelSpacing (const FirstLevelSpacingType& x)
      {
        this->FirstLevelSpacing_.set (x);
      }

      const MenuWidgetConfiguration::FirstLevelBorderWidthType& MenuWidgetConfiguration::
      getFirstLevelBorderWidth () const
      {
        return this->FirstLevelBorderWidth_.get ();
      }

      MenuWidgetConfiguration::FirstLevelBorderWidthType& MenuWidgetConfiguration::
      getFirstLevelBorderWidth ()
      {
        return this->FirstLevelBorderWidth_.get ();
      }

      void MenuWidgetConfiguration::
      setFirstLevelBorderWidth (const FirstLevelBorderWidthType& x)
      {
        this->FirstLevelBorderWidth_.set (x);
      }

      const MenuWidgetConfiguration::FirstLevelFrameWidthType& MenuWidgetConfiguration::
      getFirstLevelFrameWidth () const
      {
        return this->FirstLevelFrameWidth_.get ();
      }

      MenuWidgetConfiguration::FirstLevelFrameWidthType& MenuWidgetConfiguration::
      getFirstLevelFrameWidth ()
      {
        return this->FirstLevelFrameWidth_.get ();
      }

      void MenuWidgetConfiguration::
      setFirstLevelFrameWidth (const FirstLevelFrameWidthType& x)
      {
        this->FirstLevelFrameWidth_.set (x);
      }

      const MenuWidgetConfiguration::FirstLevelFrameHeightType& MenuWidgetConfiguration::
      getFirstLevelFrameHeight () const
      {
        return this->FirstLevelFrameHeight_.get ();
      }

      MenuWidgetConfiguration::FirstLevelFrameHeightType& MenuWidgetConfiguration::
      getFirstLevelFrameHeight ()
      {
        return this->FirstLevelFrameHeight_.get ();
      }

      void MenuWidgetConfiguration::
      setFirstLevelFrameHeight (const FirstLevelFrameHeightType& x)
      {
        this->FirstLevelFrameHeight_.set (x);
      }

      const MenuWidgetConfiguration::SecondLevelWidthType& MenuWidgetConfiguration::
      getSecondLevelWidth () const
      {
        return this->SecondLevelWidth_.get ();
      }

      MenuWidgetConfiguration::SecondLevelWidthType& MenuWidgetConfiguration::
      getSecondLevelWidth ()
      {
        return this->SecondLevelWidth_.get ();
      }

      void MenuWidgetConfiguration::
      setSecondLevelWidth (const SecondLevelWidthType& x)
      {
        this->SecondLevelWidth_.set (x);
      }

      const MenuWidgetConfiguration::SecondLevelHeightType& MenuWidgetConfiguration::
      getSecondLevelHeight () const
      {
        return this->SecondLevelHeight_.get ();
      }

      MenuWidgetConfiguration::SecondLevelHeightType& MenuWidgetConfiguration::
      getSecondLevelHeight ()
      {
        return this->SecondLevelHeight_.get ();
      }

      void MenuWidgetConfiguration::
      setSecondLevelHeight (const SecondLevelHeightType& x)
      {
        this->SecondLevelHeight_.set (x);
      }

      const MenuWidgetConfiguration::SecondLevelSpacingType& MenuWidgetConfiguration::
      getSecondLevelSpacing () const
      {
        return this->SecondLevelSpacing_.get ();
      }

      MenuWidgetConfiguration::SecondLevelSpacingType& MenuWidgetConfiguration::
      getSecondLevelSpacing ()
      {
        return this->SecondLevelSpacing_.get ();
      }

      void MenuWidgetConfiguration::
      setSecondLevelSpacing (const SecondLevelSpacingType& x)
      {
        this->SecondLevelSpacing_.set (x);
      }

      const MenuWidgetConfiguration::SecondLevelBorderWidthType& MenuWidgetConfiguration::
      getSecondLevelBorderWidth () const
      {
        return this->SecondLevelBorderWidth_.get ();
      }

      MenuWidgetConfiguration::SecondLevelBorderWidthType& MenuWidgetConfiguration::
      getSecondLevelBorderWidth ()
      {
        return this->SecondLevelBorderWidth_.get ();
      }

      void MenuWidgetConfiguration::
      setSecondLevelBorderWidth (const SecondLevelBorderWidthType& x)
      {
        this->SecondLevelBorderWidth_.set (x);
      }

      const MenuWidgetConfiguration::SecondLevelFramePaddingType& MenuWidgetConfiguration::
      getSecondLevelFramePadding () const
      {
        return this->SecondLevelFramePadding_.get ();
      }

      MenuWidgetConfiguration::SecondLevelFramePaddingType& MenuWidgetConfiguration::
      getSecondLevelFramePadding ()
      {
        return this->SecondLevelFramePadding_.get ();
      }

      void MenuWidgetConfiguration::
      setSecondLevelFramePadding (const SecondLevelFramePaddingType& x)
      {
        this->SecondLevelFramePadding_.set (x);
      }

      const MenuWidgetConfiguration::HasShortcutType& MenuWidgetConfiguration::
      getHasShortcut () const
      {
        return this->HasShortcut_.get ();
      }

      MenuWidgetConfiguration::HasShortcutType& MenuWidgetConfiguration::
      getHasShortcut ()
      {
        return this->HasShortcut_.get ();
      }

      void MenuWidgetConfiguration::
      setHasShortcut (const HasShortcutType& x)
      {
        this->HasShortcut_.set (x);
      }

      const MenuWidgetConfiguration::RootOptionType& MenuWidgetConfiguration::
      getRootOption () const
      {
        return this->RootOption_.get ();
      }

      MenuWidgetConfiguration::RootOptionType& MenuWidgetConfiguration::
      getRootOption ()
      {
        return this->RootOption_.get ();
      }

      void MenuWidgetConfiguration::
      setRootOption (const RootOptionType& x)
      {
        this->RootOption_.set (x);
      }

      void MenuWidgetConfiguration::
      setRootOption (::std::auto_ptr< RootOptionType > x)
      {
        this->RootOption_.set (x);
      }


      // MenuOption
      // 

      const MenuOption::NameKeyType& MenuOption::
      getNameKey () const
      {
        return this->NameKey_.get ();
      }

      MenuOption::NameKeyType& MenuOption::
      getNameKey ()
      {
        return this->NameKey_.get ();
      }

      void MenuOption::
      setNameKey (const NameKeyType& x)
      {
        this->NameKey_.set (x);
      }

      void MenuOption::
      setNameKey (::std::auto_ptr< NameKeyType > x)
      {
        this->NameKey_.set (x);
      }

      const MenuOption::UntraslatedKeyType& MenuOption::
      getUntraslatedKey () const
      {
        return this->UntraslatedKey_.get ();
      }

      MenuOption::UntraslatedKeyType& MenuOption::
      getUntraslatedKey ()
      {
        return this->UntraslatedKey_.get ();
      }

      void MenuOption::
      setUntraslatedKey (const UntraslatedKeyType& x)
      {
        this->UntraslatedKey_.set (x);
      }

      void MenuOption::
      setUntraslatedKey (::std::auto_ptr< UntraslatedKeyType > x)
      {
        this->UntraslatedKey_.set (x);
      }

      const MenuOption::ImageKeyType& MenuOption::
      getImageKey () const
      {
        return this->ImageKey_.get ();
      }

      MenuOption::ImageKeyType& MenuOption::
      getImageKey ()
      {
        return this->ImageKey_.get ();
      }

      void MenuOption::
      setImageKey (const ImageKeyType& x)
      {
        this->ImageKey_.set (x);
      }

      void MenuOption::
      setImageKey (::std::auto_ptr< ImageKeyType > x)
      {
        this->ImageKey_.set (x);
      }

      const MenuOption::CodeType& MenuOption::
      getCode () const
      {
        return this->Code_.get ();
      }

      MenuOption::CodeType& MenuOption::
      getCode ()
      {
        return this->Code_.get ();
      }

      void MenuOption::
      setCode (const CodeType& x)
      {
        this->Code_.set (x);
      }

      const MenuOption::MappingKeyType& MenuOption::
      getMappingKey () const
      {
        return this->MappingKey_.get ();
      }

      MenuOption::MappingKeyType& MenuOption::
      getMappingKey ()
      {
        return this->MappingKey_.get ();
      }

      void MenuOption::
      setMappingKey (const MappingKeyType& x)
      {
        this->MappingKey_.set (x);
      }

      const MenuOption::MappingKeyNameType& MenuOption::
      getMappingKeyName () const
      {
        return this->MappingKeyName_.get ();
      }

      MenuOption::MappingKeyNameType& MenuOption::
      getMappingKeyName ()
      {
        return this->MappingKeyName_.get ();
      }

      void MenuOption::
      setMappingKeyName (const MappingKeyNameType& x)
      {
        this->MappingKeyName_.set (x);
      }

      void MenuOption::
      setMappingKeyName (::std::auto_ptr< MappingKeyNameType > x)
      {
        this->MappingKeyName_.set (x);
      }

      const MenuOption::OptionTypeType& MenuOption::
      getOptionType () const
      {
        return this->OptionType_.get ();
      }

      MenuOption::OptionTypeType& MenuOption::
      getOptionType ()
      {
        return this->OptionType_.get ();
      }

      void MenuOption::
      setOptionType (const OptionTypeType& x)
      {
        this->OptionType_.set (x);
      }

      void MenuOption::
      setOptionType (::std::auto_ptr< OptionTypeType > x)
      {
        this->OptionType_.set (x);
      }

      const MenuOption::MenuOptionsType& MenuOption::
      getMenuOptions () const
      {
        return this->MenuOptions_.get ();
      }

      MenuOption::MenuOptionsType& MenuOption::
      getMenuOptions ()
      {
        return this->MenuOptions_.get ();
      }

      void MenuOption::
      setMenuOptions (const MenuOptionsType& x)
      {
        this->MenuOptions_.set (x);
      }

      void MenuOption::
      setMenuOptions (::std::auto_ptr< MenuOptionsType > x)
      {
        this->MenuOptions_.set (x);
      }


      // MenuOptionType
      // 

      MenuOptionType::
      MenuOptionType ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      MenuOptionType::
      MenuOptionType (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_MenuOptionType_literals_[v])
      {
      }

      MenuOptionType::
      MenuOptionType (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      MenuOptionType::
      MenuOptionType (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      MenuOptionType::
      MenuOptionType (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      MenuOptionType::
      MenuOptionType (const MenuOptionType& v,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      MenuOptionType& MenuOptionType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_MenuOptionType_literals_[v]);

        return *this;
      }


      // CustomAttributesPresentationType
      // 

      CustomAttributesPresentationType::
      CustomAttributesPresentationType ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_CustomAttributesPresentationType_literals_[v])
      {
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const CustomAttributesPresentationType& v,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      CustomAttributesPresentationType& CustomAttributesPresentationType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_CustomAttributesPresentationType_literals_[v]);

        return *this;
      }


      // DiagnosticType
      // 

      const DiagnosticType::DeviceType& DiagnosticType::
      getDevice () const
      {
        return this->Device_.get ();
      }

      DiagnosticType::DeviceType& DiagnosticType::
      getDevice ()
      {
        return this->Device_.get ();
      }

      void DiagnosticType::
      setDevice (const DeviceType& x)
      {
        this->Device_.set (x);
      }

      void DiagnosticType::
      setDevice (::std::auto_ptr< DeviceType > x)
      {
        this->Device_.set (x);
      }

      const DiagnosticType::MandatoryType& DiagnosticType::
      getMandatory () const
      {
        return this->Mandatory_.get ();
      }

      DiagnosticType::MandatoryType& DiagnosticType::
      getMandatory ()
      {
        return this->Mandatory_.get ();
      }

      void DiagnosticType::
      setMandatory (const MandatoryType& x)
      {
        this->Mandatory_.set (x);
      }


      // DiagnosticDevice
      // 

      DiagnosticDevice::
      DiagnosticDevice ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      DiagnosticDevice::
      DiagnosticDevice (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_DiagnosticDevice_literals_[v])
      {
      }

      DiagnosticDevice::
      DiagnosticDevice (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DiagnosticDevice::
      DiagnosticDevice (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DiagnosticDevice::
      DiagnosticDevice (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DiagnosticDevice::
      DiagnosticDevice (const DiagnosticDevice& v,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      DiagnosticDevice& DiagnosticDevice::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_DiagnosticDevice_literals_[v]);

        return *this;
      }


      // VotingExperienceConfiguration
      // 

      const VotingExperienceConfiguration::SortOptionsAlphabeticalType& VotingExperienceConfiguration::
      getSortOptionsAlphabetical () const
      {
        return this->SortOptionsAlphabetical_.get ();
      }

      VotingExperienceConfiguration::SortOptionsAlphabeticalType& VotingExperienceConfiguration::
      getSortOptionsAlphabetical ()
      {
        return this->SortOptionsAlphabetical_.get ();
      }

      void VotingExperienceConfiguration::
      setSortOptionsAlphabetical (const SortOptionsAlphabeticalType& x)
      {
        this->SortOptionsAlphabetical_.set (x);
      }

      const VotingExperienceConfiguration::SortLanguagesAlphabeticalType& VotingExperienceConfiguration::
      getSortLanguagesAlphabetical () const
      {
        return this->SortLanguagesAlphabetical_.get ();
      }

      VotingExperienceConfiguration::SortLanguagesAlphabeticalType& VotingExperienceConfiguration::
      getSortLanguagesAlphabetical ()
      {
        return this->SortLanguagesAlphabetical_.get ();
      }

      void VotingExperienceConfiguration::
      setSortLanguagesAlphabetical (const SortLanguagesAlphabeticalType& x)
      {
        this->SortLanguagesAlphabetical_.set (x);
      }

      const VotingExperienceConfiguration::DetectCardExtractionType& VotingExperienceConfiguration::
      getDetectCardExtraction () const
      {
        return this->DetectCardExtraction_.get ();
      }

      VotingExperienceConfiguration::DetectCardExtractionType& VotingExperienceConfiguration::
      getDetectCardExtraction ()
      {
        return this->DetectCardExtraction_.get ();
      }

      void VotingExperienceConfiguration::
      setDetectCardExtraction (const DetectCardExtractionType& x)
      {
        this->DetectCardExtraction_.set (x);
      }

      const VotingExperienceConfiguration::NumberOfExtractionsBeforeStopType& VotingExperienceConfiguration::
      getNumberOfExtractionsBeforeStop () const
      {
        return this->NumberOfExtractionsBeforeStop_.get ();
      }

      VotingExperienceConfiguration::NumberOfExtractionsBeforeStopType& VotingExperienceConfiguration::
      getNumberOfExtractionsBeforeStop ()
      {
        return this->NumberOfExtractionsBeforeStop_.get ();
      }

      void VotingExperienceConfiguration::
      setNumberOfExtractionsBeforeStop (const NumberOfExtractionsBeforeStopType& x)
      {
        this->NumberOfExtractionsBeforeStop_.set (x);
      }

      const VotingExperienceConfiguration::VotingWindowType& VotingExperienceConfiguration::
      getVotingWindow () const
      {
        return this->VotingWindow_.get ();
      }

      VotingExperienceConfiguration::VotingWindowType& VotingExperienceConfiguration::
      getVotingWindow ()
      {
        return this->VotingWindow_.get ();
      }

      void VotingExperienceConfiguration::
      setVotingWindow (const VotingWindowType& x)
      {
        this->VotingWindow_.set (x);
      }

      void VotingExperienceConfiguration::
      setVotingWindow (::std::auto_ptr< VotingWindowType > x)
      {
        this->VotingWindow_.set (x);
      }

      const VotingExperienceConfiguration::PartySelectionType& VotingExperienceConfiguration::
      getPartySelection () const
      {
        return this->PartySelection_.get ();
      }

      VotingExperienceConfiguration::PartySelectionType& VotingExperienceConfiguration::
      getPartySelection ()
      {
        return this->PartySelection_.get ();
      }

      void VotingExperienceConfiguration::
      setPartySelection (const PartySelectionType& x)
      {
        this->PartySelection_.set (x);
      }

      void VotingExperienceConfiguration::
      setPartySelection (::std::auto_ptr< PartySelectionType > x)
      {
        this->PartySelection_.set (x);
      }

      const VotingExperienceConfiguration::BallotOptionSelectionType& VotingExperienceConfiguration::
      getBallotOptionSelection () const
      {
        return this->BallotOptionSelection_.get ();
      }

      VotingExperienceConfiguration::BallotOptionSelectionType& VotingExperienceConfiguration::
      getBallotOptionSelection ()
      {
        return this->BallotOptionSelection_.get ();
      }

      void VotingExperienceConfiguration::
      setBallotOptionSelection (const BallotOptionSelectionType& x)
      {
        this->BallotOptionSelection_.set (x);
      }

      void VotingExperienceConfiguration::
      setBallotOptionSelection (::std::auto_ptr< BallotOptionSelectionType > x)
      {
        this->BallotOptionSelection_.set (x);
      }

      const VotingExperienceConfiguration::ReferendumSelectionType& VotingExperienceConfiguration::
      getReferendumSelection () const
      {
        return this->ReferendumSelection_.get ();
      }

      VotingExperienceConfiguration::ReferendumSelectionType& VotingExperienceConfiguration::
      getReferendumSelection ()
      {
        return this->ReferendumSelection_.get ();
      }

      void VotingExperienceConfiguration::
      setReferendumSelection (const ReferendumSelectionType& x)
      {
        this->ReferendumSelection_.set (x);
      }

      void VotingExperienceConfiguration::
      setReferendumSelection (::std::auto_ptr< ReferendumSelectionType > x)
      {
        this->ReferendumSelection_.set (x);
      }

      const VotingExperienceConfiguration::CustomAtributtesWindowType& VotingExperienceConfiguration::
      getCustomAtributtesWindow () const
      {
        return this->CustomAtributtesWindow_.get ();
      }

      VotingExperienceConfiguration::CustomAtributtesWindowType& VotingExperienceConfiguration::
      getCustomAtributtesWindow ()
      {
        return this->CustomAtributtesWindow_.get ();
      }

      void VotingExperienceConfiguration::
      setCustomAtributtesWindow (const CustomAtributtesWindowType& x)
      {
        this->CustomAtributtesWindow_.set (x);
      }

      void VotingExperienceConfiguration::
      setCustomAtributtesWindow (::std::auto_ptr< CustomAtributtesWindowType > x)
      {
        this->CustomAtributtesWindow_.set (x);
      }

      const VotingExperienceConfiguration::ConfirmationWindowType& VotingExperienceConfiguration::
      getConfirmationWindow () const
      {
        return this->ConfirmationWindow_.get ();
      }

      VotingExperienceConfiguration::ConfirmationWindowType& VotingExperienceConfiguration::
      getConfirmationWindow ()
      {
        return this->ConfirmationWindow_.get ();
      }

      void VotingExperienceConfiguration::
      setConfirmationWindow (const ConfirmationWindowType& x)
      {
        this->ConfirmationWindow_.set (x);
      }

      void VotingExperienceConfiguration::
      setConfirmationWindow (::std::auto_ptr< ConfirmationWindowType > x)
      {
        this->ConfirmationWindow_.set (x);
      }

      const VotingExperienceConfiguration::VotingExperienceLabelType& VotingExperienceConfiguration::
      getVotingExperienceLabel () const
      {
        return this->VotingExperienceLabel_.get ();
      }

      VotingExperienceConfiguration::VotingExperienceLabelType& VotingExperienceConfiguration::
      getVotingExperienceLabel ()
      {
        return this->VotingExperienceLabel_.get ();
      }

      void VotingExperienceConfiguration::
      setVotingExperienceLabel (const VotingExperienceLabelType& x)
      {
        this->VotingExperienceLabel_.set (x);
      }

      void VotingExperienceConfiguration::
      setVotingExperienceLabel (::std::auto_ptr< VotingExperienceLabelType > x)
      {
        this->VotingExperienceLabel_.set (x);
      }

      const VotingExperienceConfiguration::TimeOutCardType& VotingExperienceConfiguration::
      getTimeOutCard () const
      {
        return this->TimeOutCard_.get ();
      }

      VotingExperienceConfiguration::TimeOutCardType& VotingExperienceConfiguration::
      getTimeOutCard ()
      {
        return this->TimeOutCard_.get ();
      }

      void VotingExperienceConfiguration::
      setTimeOutCard (const TimeOutCardType& x)
      {
        this->TimeOutCard_.set (x);
      }

      const VotingExperienceConfiguration::TimeToShowFinalMessageType& VotingExperienceConfiguration::
      getTimeToShowFinalMessage () const
      {
        return this->TimeToShowFinalMessage_.get ();
      }

      VotingExperienceConfiguration::TimeToShowFinalMessageType& VotingExperienceConfiguration::
      getTimeToShowFinalMessage ()
      {
        return this->TimeToShowFinalMessage_.get ();
      }

      void VotingExperienceConfiguration::
      setTimeToShowFinalMessage (const TimeToShowFinalMessageType& x)
      {
        this->TimeToShowFinalMessage_.set (x);
      }

      const VotingExperienceConfiguration::RemoveCardFirstType& VotingExperienceConfiguration::
      getRemoveCardFirst () const
      {
        return this->RemoveCardFirst_.get ();
      }

      VotingExperienceConfiguration::RemoveCardFirstType& VotingExperienceConfiguration::
      getRemoveCardFirst ()
      {
        return this->RemoveCardFirst_.get ();
      }

      void VotingExperienceConfiguration::
      setRemoveCardFirst (const RemoveCardFirstType& x)
      {
        this->RemoveCardFirst_.set (x);
      }

      const VotingExperienceConfiguration::MarkCardAsUsedType& VotingExperienceConfiguration::
      getMarkCardAsUsed () const
      {
        return this->MarkCardAsUsed_.get ();
      }

      VotingExperienceConfiguration::MarkCardAsUsedType& VotingExperienceConfiguration::
      getMarkCardAsUsed ()
      {
        return this->MarkCardAsUsed_.get ();
      }

      void VotingExperienceConfiguration::
      setMarkCardAsUsed (const MarkCardAsUsedType& x)
      {
        this->MarkCardAsUsed_.set (x);
      }

      const VotingExperienceConfiguration::CheckSumFailTimerMessageType& VotingExperienceConfiguration::
      getCheckSumFailTimerMessage () const
      {
        return this->CheckSumFailTimerMessage_.get ();
      }

      VotingExperienceConfiguration::CheckSumFailTimerMessageType& VotingExperienceConfiguration::
      getCheckSumFailTimerMessage ()
      {
        return this->CheckSumFailTimerMessage_.get ();
      }

      void VotingExperienceConfiguration::
      setCheckSumFailTimerMessage (const CheckSumFailTimerMessageType& x)
      {
        this->CheckSumFailTimerMessage_.set (x);
      }

      const VotingExperienceConfiguration::CheckSumFailOptionType& VotingExperienceConfiguration::
      getCheckSumFailOption () const
      {
        return this->CheckSumFailOption_.get ();
      }

      VotingExperienceConfiguration::CheckSumFailOptionType& VotingExperienceConfiguration::
      getCheckSumFailOption ()
      {
        return this->CheckSumFailOption_.get ();
      }

      void VotingExperienceConfiguration::
      setCheckSumFailOption (const CheckSumFailOptionType& x)
      {
        this->CheckSumFailOption_.set (x);
      }

      void VotingExperienceConfiguration::
      setCheckSumFailOption (::std::auto_ptr< CheckSumFailOptionType > x)
      {
        this->CheckSumFailOption_.set (x);
      }


      // PartySelectionConfiguration
      // 

      const PartySelectionConfiguration::EnableClickType& PartySelectionConfiguration::
      getEnableClick () const
      {
        return this->EnableClick_.get ();
      }

      PartySelectionConfiguration::EnableClickType& PartySelectionConfiguration::
      getEnableClick ()
      {
        return this->EnableClick_.get ();
      }

      void PartySelectionConfiguration::
      setEnableClick (const EnableClickType& x)
      {
        this->EnableClick_.set (x);
      }

      const PartySelectionConfiguration::UseMaxPartyNumerFromAllContestType& PartySelectionConfiguration::
      getUseMaxPartyNumerFromAllContest () const
      {
        return this->UseMaxPartyNumerFromAllContest_.get ();
      }

      PartySelectionConfiguration::UseMaxPartyNumerFromAllContestType& PartySelectionConfiguration::
      getUseMaxPartyNumerFromAllContest ()
      {
        return this->UseMaxPartyNumerFromAllContest_.get ();
      }

      void PartySelectionConfiguration::
      setUseMaxPartyNumerFromAllContest (const UseMaxPartyNumerFromAllContestType& x)
      {
        this->UseMaxPartyNumerFromAllContest_.set (x);
      }

      const PartySelectionConfiguration::ShowNullPartyType& PartySelectionConfiguration::
      getShowNullParty () const
      {
        return this->ShowNullParty_.get ();
      }

      PartySelectionConfiguration::ShowNullPartyType& PartySelectionConfiguration::
      getShowNullParty ()
      {
        return this->ShowNullParty_.get ();
      }

      void PartySelectionConfiguration::
      setShowNullParty (const ShowNullPartyType& x)
      {
        this->ShowNullParty_.set (x);
      }

      const PartySelectionConfiguration::ShowNullButtonType& PartySelectionConfiguration::
      getShowNullButton () const
      {
        return this->ShowNullButton_.get ();
      }

      PartySelectionConfiguration::ShowNullButtonType& PartySelectionConfiguration::
      getShowNullButton ()
      {
        return this->ShowNullButton_.get ();
      }

      void PartySelectionConfiguration::
      setShowNullButton (const ShowNullButtonType& x)
      {
        this->ShowNullButton_.set (x);
      }

      const PartySelectionConfiguration::PartyButtonType& PartySelectionConfiguration::
      getPartyButton () const
      {
        return this->PartyButton_.get ();
      }

      PartySelectionConfiguration::PartyButtonType& PartySelectionConfiguration::
      getPartyButton ()
      {
        return this->PartyButton_.get ();
      }

      void PartySelectionConfiguration::
      setPartyButton (const PartyButtonType& x)
      {
        this->PartyButton_.set (x);
      }

      void PartySelectionConfiguration::
      setPartyButton (::std::auto_ptr< PartyButtonType > x)
      {
        this->PartyButton_.set (x);
      }

      const PartySelectionConfiguration::ExpandButtonType& PartySelectionConfiguration::
      getExpandButton () const
      {
        return this->ExpandButton_.get ();
      }

      PartySelectionConfiguration::ExpandButtonType& PartySelectionConfiguration::
      getExpandButton ()
      {
        return this->ExpandButton_.get ();
      }

      void PartySelectionConfiguration::
      setExpandButton (const ExpandButtonType& x)
      {
        this->ExpandButton_.set (x);
      }

      void PartySelectionConfiguration::
      setExpandButton (::std::auto_ptr< ExpandButtonType > x)
      {
        this->ExpandButton_.set (x);
      }

      const PartySelectionConfiguration::SeparateButtonType& PartySelectionConfiguration::
      getSeparateButton () const
      {
        return this->SeparateButton_.get ();
      }

      PartySelectionConfiguration::SeparateButtonType& PartySelectionConfiguration::
      getSeparateButton ()
      {
        return this->SeparateButton_.get ();
      }

      void PartySelectionConfiguration::
      setSeparateButton (const SeparateButtonType& x)
      {
        this->SeparateButton_.set (x);
      }

      void PartySelectionConfiguration::
      setSeparateButton (::std::auto_ptr< SeparateButtonType > x)
      {
        this->SeparateButton_.set (x);
      }

      const PartySelectionConfiguration::FrameBottomHeightType& PartySelectionConfiguration::
      getFrameBottomHeight () const
      {
        return this->FrameBottomHeight_.get ();
      }

      PartySelectionConfiguration::FrameBottomHeightType& PartySelectionConfiguration::
      getFrameBottomHeight ()
      {
        return this->FrameBottomHeight_.get ();
      }

      void PartySelectionConfiguration::
      setFrameBottomHeight (const FrameBottomHeightType& x)
      {
        this->FrameBottomHeight_.set (x);
      }

      const PartySelectionConfiguration::ColumnsType& PartySelectionConfiguration::
      getColumns () const
      {
        return this->Columns_.get ();
      }

      PartySelectionConfiguration::ColumnsType& PartySelectionConfiguration::
      getColumns ()
      {
        return this->Columns_.get ();
      }

      void PartySelectionConfiguration::
      setColumns (const ColumnsType& x)
      {
        this->Columns_.set (x);
      }

      const PartySelectionConfiguration::SizeToColumnsType& PartySelectionConfiguration::
      getSizeToColumns () const
      {
        return this->SizeToColumns_.get ();
      }

      PartySelectionConfiguration::SizeToColumnsType& PartySelectionConfiguration::
      getSizeToColumns ()
      {
        return this->SizeToColumns_.get ();
      }

      void PartySelectionConfiguration::
      setSizeToColumns (const SizeToColumnsType& x)
      {
        this->SizeToColumns_.set (x);
      }

      const PartySelectionConfiguration::ImageRelationType& PartySelectionConfiguration::
      getImageRelation () const
      {
        return this->ImageRelation_.get ();
      }

      PartySelectionConfiguration::ImageRelationType& PartySelectionConfiguration::
      getImageRelation ()
      {
        return this->ImageRelation_.get ();
      }

      void PartySelectionConfiguration::
      setImageRelation (const ImageRelationType& x)
      {
        this->ImageRelation_.set (x);
      }

      const PartySelectionConfiguration::PartiesMarginType& PartySelectionConfiguration::
      getPartiesMargin () const
      {
        return this->PartiesMargin_.get ();
      }

      PartySelectionConfiguration::PartiesMarginType& PartySelectionConfiguration::
      getPartiesMargin ()
      {
        return this->PartiesMargin_.get ();
      }

      void PartySelectionConfiguration::
      setPartiesMargin (const PartiesMarginType& x)
      {
        this->PartiesMargin_.set (x);
      }

      const PartySelectionConfiguration::PartyWidgetType& PartySelectionConfiguration::
      getPartyWidget () const
      {
        return this->PartyWidget_.get ();
      }

      PartySelectionConfiguration::PartyWidgetType& PartySelectionConfiguration::
      getPartyWidget ()
      {
        return this->PartyWidget_.get ();
      }

      void PartySelectionConfiguration::
      setPartyWidget (const PartyWidgetType& x)
      {
        this->PartyWidget_.set (x);
      }

      void PartySelectionConfiguration::
      setPartyWidget (::std::auto_ptr< PartyWidgetType > x)
      {
        this->PartyWidget_.set (x);
      }

      const PartySelectionConfiguration::PartySelectionAlignmentType& PartySelectionConfiguration::
      getPartySelectionAlignment () const
      {
        return this->PartySelectionAlignment_.get ();
      }

      PartySelectionConfiguration::PartySelectionAlignmentType& PartySelectionConfiguration::
      getPartySelectionAlignment ()
      {
        return this->PartySelectionAlignment_.get ();
      }

      void PartySelectionConfiguration::
      setPartySelectionAlignment (const PartySelectionAlignmentType& x)
      {
        this->PartySelectionAlignment_.set (x);
      }

      const PartySelectionConfiguration::HeaderLabelConfigurationType& PartySelectionConfiguration::
      getHeaderLabelConfiguration () const
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      PartySelectionConfiguration::HeaderLabelConfigurationType& PartySelectionConfiguration::
      getHeaderLabelConfiguration ()
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      void PartySelectionConfiguration::
      setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      void PartySelectionConfiguration::
      setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      const PartySelectionConfiguration::BottomLabelConfigurationType& PartySelectionConfiguration::
      getBottomLabelConfiguration () const
      {
        return this->BottomLabelConfiguration_.get ();
      }

      PartySelectionConfiguration::BottomLabelConfigurationType& PartySelectionConfiguration::
      getBottomLabelConfiguration ()
      {
        return this->BottomLabelConfiguration_.get ();
      }

      void PartySelectionConfiguration::
      setBottomLabelConfiguration (const BottomLabelConfigurationType& x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      void PartySelectionConfiguration::
      setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > x)
      {
        this->BottomLabelConfiguration_.set (x);
      }


      // PartyWidgetConfiguration
      // 

      const PartyWidgetConfiguration::NumberWidthType& PartyWidgetConfiguration::
      getNumberWidth () const
      {
        return this->NumberWidth_.get ();
      }

      PartyWidgetConfiguration::NumberWidthType& PartyWidgetConfiguration::
      getNumberWidth ()
      {
        return this->NumberWidth_.get ();
      }

      void PartyWidgetConfiguration::
      setNumberWidth (const NumberWidthType& x)
      {
        this->NumberWidth_.set (x);
      }

      const PartyWidgetConfiguration::UseAbbreviationType& PartyWidgetConfiguration::
      getUseAbbreviation () const
      {
        return this->UseAbbreviation_.get ();
      }

      PartyWidgetConfiguration::UseAbbreviationType& PartyWidgetConfiguration::
      getUseAbbreviation ()
      {
        return this->UseAbbreviation_.get ();
      }

      void PartyWidgetConfiguration::
      setUseAbbreviation (const UseAbbreviationType& x)
      {
        this->UseAbbreviation_.set (x);
      }

      const PartyWidgetConfiguration::PaddingType& PartyWidgetConfiguration::
      getPadding () const
      {
        return this->Padding_.get ();
      }

      PartyWidgetConfiguration::PaddingType& PartyWidgetConfiguration::
      getPadding ()
      {
        return this->Padding_.get ();
      }

      void PartyWidgetConfiguration::
      setPadding (const PaddingType& x)
      {
        this->Padding_.set (x);
      }

      const PartyWidgetConfiguration::ShowFrameType& PartyWidgetConfiguration::
      getShowFrame () const
      {
        return this->ShowFrame_.get ();
      }

      PartyWidgetConfiguration::ShowFrameType& PartyWidgetConfiguration::
      getShowFrame ()
      {
        return this->ShowFrame_.get ();
      }

      void PartyWidgetConfiguration::
      setShowFrame (const ShowFrameType& x)
      {
        this->ShowFrame_.set (x);
      }

      const PartyWidgetConfiguration::DisplayType& PartyWidgetConfiguration::
      getDisplay () const
      {
        return this->Display_.get ();
      }

      PartyWidgetConfiguration::DisplayType& PartyWidgetConfiguration::
      getDisplay ()
      {
        return this->Display_.get ();
      }

      void PartyWidgetConfiguration::
      setDisplay (const DisplayType& x)
      {
        this->Display_.set (x);
      }

      void PartyWidgetConfiguration::
      setDisplay (::std::auto_ptr< DisplayType > x)
      {
        this->Display_.set (x);
      }

      const PartyWidgetConfiguration::UseFillByRowsType& PartyWidgetConfiguration::
      getUseFillByRows () const
      {
        return this->UseFillByRows_.get ();
      }

      PartyWidgetConfiguration::UseFillByRowsType& PartyWidgetConfiguration::
      getUseFillByRows ()
      {
        return this->UseFillByRows_.get ();
      }

      void PartyWidgetConfiguration::
      setUseFillByRows (const UseFillByRowsType& x)
      {
        this->UseFillByRows_.set (x);
      }


      // DisplayType
      // 

      DisplayType::
      DisplayType ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      DisplayType::
      DisplayType (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_DisplayType_literals_[v])
      {
      }

      DisplayType::
      DisplayType (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DisplayType::
      DisplayType (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DisplayType::
      DisplayType (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DisplayType::
      DisplayType (const DisplayType& v,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      DisplayType& DisplayType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_DisplayType_literals_[v]);

        return *this;
      }


      // BallotOptionSelectionConfiguration
      // 

      const BallotOptionSelectionConfiguration::EnableClickType& BallotOptionSelectionConfiguration::
      getEnableClick () const
      {
        return this->EnableClick_.get ();
      }

      BallotOptionSelectionConfiguration::EnableClickType& BallotOptionSelectionConfiguration::
      getEnableClick ()
      {
        return this->EnableClick_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setEnableClick (const EnableClickType& x)
      {
        this->EnableClick_.set (x);
      }

      const BallotOptionSelectionConfiguration::HideStandInLabelIfEmptyType& BallotOptionSelectionConfiguration::
      getHideStandInLabelIfEmpty () const
      {
        return this->HideStandInLabelIfEmpty_.get ();
      }

      BallotOptionSelectionConfiguration::HideStandInLabelIfEmptyType& BallotOptionSelectionConfiguration::
      getHideStandInLabelIfEmpty ()
      {
        return this->HideStandInLabelIfEmpty_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setHideStandInLabelIfEmpty (const HideStandInLabelIfEmptyType& x)
      {
        this->HideStandInLabelIfEmpty_.set (x);
      }

      const BallotOptionSelectionConfiguration::UseMaxBallotNumberFromContestType& BallotOptionSelectionConfiguration::
      getUseMaxBallotNumberFromContest () const
      {
        return this->UseMaxBallotNumberFromContest_.get ();
      }

      BallotOptionSelectionConfiguration::UseMaxBallotNumberFromContestType& BallotOptionSelectionConfiguration::
      getUseMaxBallotNumberFromContest ()
      {
        return this->UseMaxBallotNumberFromContest_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setUseMaxBallotNumberFromContest (const UseMaxBallotNumberFromContestType& x)
      {
        this->UseMaxBallotNumberFromContest_.set (x);
      }

      const BallotOptionSelectionConfiguration::BallotOptionTableType& BallotOptionSelectionConfiguration::
      getBallotOptionTable () const
      {
        return this->BallotOptionTable_.get ();
      }

      BallotOptionSelectionConfiguration::BallotOptionTableType& BallotOptionSelectionConfiguration::
      getBallotOptionTable ()
      {
        return this->BallotOptionTable_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setBallotOptionTable (const BallotOptionTableType& x)
      {
        this->BallotOptionTable_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setBallotOptionTable (::std::auto_ptr< BallotOptionTableType > x)
      {
        this->BallotOptionTable_.set (x);
      }

      const BallotOptionSelectionConfiguration::BallotOptionButtonType& BallotOptionSelectionConfiguration::
      getBallotOptionButton () const
      {
        return this->BallotOptionButton_.get ();
      }

      BallotOptionSelectionConfiguration::BallotOptionButtonType& BallotOptionSelectionConfiguration::
      getBallotOptionButton ()
      {
        return this->BallotOptionButton_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setBallotOptionButton (const BallotOptionButtonType& x)
      {
        this->BallotOptionButton_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setBallotOptionButton (::std::auto_ptr< BallotOptionButtonType > x)
      {
        this->BallotOptionButton_.set (x);
      }

      const BallotOptionSelectionConfiguration::ExpandButtonType& BallotOptionSelectionConfiguration::
      getExpandButton () const
      {
        return this->ExpandButton_.get ();
      }

      BallotOptionSelectionConfiguration::ExpandButtonType& BallotOptionSelectionConfiguration::
      getExpandButton ()
      {
        return this->ExpandButton_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setExpandButton (const ExpandButtonType& x)
      {
        this->ExpandButton_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setExpandButton (::std::auto_ptr< ExpandButtonType > x)
      {
        this->ExpandButton_.set (x);
      }

      const BallotOptionSelectionConfiguration::SeparateButtonType& BallotOptionSelectionConfiguration::
      getSeparateButton () const
      {
        return this->SeparateButton_.get ();
      }

      BallotOptionSelectionConfiguration::SeparateButtonType& BallotOptionSelectionConfiguration::
      getSeparateButton ()
      {
        return this->SeparateButton_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setSeparateButton (const SeparateButtonType& x)
      {
        this->SeparateButton_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setSeparateButton (::std::auto_ptr< SeparateButtonType > x)
      {
        this->SeparateButton_.set (x);
      }

      const BallotOptionSelectionConfiguration::FrameBottomHeightType& BallotOptionSelectionConfiguration::
      getFrameBottomHeight () const
      {
        return this->FrameBottomHeight_.get ();
      }

      BallotOptionSelectionConfiguration::FrameBottomHeightType& BallotOptionSelectionConfiguration::
      getFrameBottomHeight ()
      {
        return this->FrameBottomHeight_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setFrameBottomHeight (const FrameBottomHeightType& x)
      {
        this->FrameBottomHeight_.set (x);
      }

      const BallotOptionSelectionConfiguration::FrameHeaderHeightType& BallotOptionSelectionConfiguration::
      getFrameHeaderHeight () const
      {
        return this->FrameHeaderHeight_.get ();
      }

      BallotOptionSelectionConfiguration::FrameHeaderHeightType& BallotOptionSelectionConfiguration::
      getFrameHeaderHeight ()
      {
        return this->FrameHeaderHeight_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setFrameHeaderHeight (const FrameHeaderHeightType& x)
      {
        this->FrameHeaderHeight_.set (x);
      }

      const BallotOptionSelectionConfiguration::MaxColumnsType& BallotOptionSelectionConfiguration::
      getMaxColumns () const
      {
        return this->MaxColumns_.get ();
      }

      BallotOptionSelectionConfiguration::MaxColumnsType& BallotOptionSelectionConfiguration::
      getMaxColumns ()
      {
        return this->MaxColumns_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setMaxColumns (const MaxColumnsType& x)
      {
        this->MaxColumns_.set (x);
      }

      const BallotOptionSelectionConfiguration::MaxRowsType& BallotOptionSelectionConfiguration::
      getMaxRows () const
      {
        return this->MaxRows_.get ();
      }

      BallotOptionSelectionConfiguration::MaxRowsType& BallotOptionSelectionConfiguration::
      getMaxRows ()
      {
        return this->MaxRows_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setMaxRows (const MaxRowsType& x)
      {
        this->MaxRows_.set (x);
      }

      const BallotOptionSelectionConfiguration::FixBorderType& BallotOptionSelectionConfiguration::
      getFixBorder () const
      {
        return this->FixBorder_.get ();
      }

      BallotOptionSelectionConfiguration::FixBorderType& BallotOptionSelectionConfiguration::
      getFixBorder ()
      {
        return this->FixBorder_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setFixBorder (const FixBorderType& x)
      {
        this->FixBorder_.set (x);
      }

      const BallotOptionSelectionConfiguration::ResizeBallotBoxType& BallotOptionSelectionConfiguration::
      getResizeBallotBox () const
      {
        return this->ResizeBallotBox_.get ();
      }

      BallotOptionSelectionConfiguration::ResizeBallotBoxType& BallotOptionSelectionConfiguration::
      getResizeBallotBox ()
      {
        return this->ResizeBallotBox_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setResizeBallotBox (const ResizeBallotBoxType& x)
      {
        this->ResizeBallotBox_.set (x);
      }

      const BallotOptionSelectionConfiguration::BallotsMarginType& BallotOptionSelectionConfiguration::
      getBallotsMargin () const
      {
        return this->BallotsMargin_.get ();
      }

      BallotOptionSelectionConfiguration::BallotsMarginType& BallotOptionSelectionConfiguration::
      getBallotsMargin ()
      {
        return this->BallotsMargin_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setBallotsMargin (const BallotsMarginType& x)
      {
        this->BallotsMargin_.set (x);
      }

      const BallotOptionSelectionConfiguration::OptionListLinkedType& BallotOptionSelectionConfiguration::
      getOptionListLinked () const
      {
        return this->OptionListLinked_.get ();
      }

      BallotOptionSelectionConfiguration::OptionListLinkedType& BallotOptionSelectionConfiguration::
      getOptionListLinked ()
      {
        return this->OptionListLinked_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setOptionListLinked (const OptionListLinkedType& x)
      {
        this->OptionListLinked_.set (x);
      }

      const BallotOptionSelectionConfiguration::SelectListImpliesSelectStandInType& BallotOptionSelectionConfiguration::
      getSelectListImpliesSelectStandIn () const
      {
        return this->SelectListImpliesSelectStandIn_.get ();
      }

      BallotOptionSelectionConfiguration::SelectListImpliesSelectStandInType& BallotOptionSelectionConfiguration::
      getSelectListImpliesSelectStandIn ()
      {
        return this->SelectListImpliesSelectStandIn_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setSelectListImpliesSelectStandIn (const SelectListImpliesSelectStandInType& x)
      {
        this->SelectListImpliesSelectStandIn_.set (x);
      }

      const BallotOptionSelectionConfiguration::SelectStandInImpliesSelectListType& BallotOptionSelectionConfiguration::
      getSelectStandInImpliesSelectList () const
      {
        return this->SelectStandInImpliesSelectList_.get ();
      }

      BallotOptionSelectionConfiguration::SelectStandInImpliesSelectListType& BallotOptionSelectionConfiguration::
      getSelectStandInImpliesSelectList ()
      {
        return this->SelectStandInImpliesSelectList_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setSelectStandInImpliesSelectList (const SelectStandInImpliesSelectListType& x)
      {
        this->SelectStandInImpliesSelectList_.set (x);
      }

      const BallotOptionSelectionConfiguration::AllowBackWithBallotSelectedType& BallotOptionSelectionConfiguration::
      getAllowBackWithBallotSelected () const
      {
        return this->AllowBackWithBallotSelected_.get ();
      }

      BallotOptionSelectionConfiguration::AllowBackWithBallotSelectedType& BallotOptionSelectionConfiguration::
      getAllowBackWithBallotSelected ()
      {
        return this->AllowBackWithBallotSelected_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setAllowBackWithBallotSelected (const AllowBackWithBallotSelectedType& x)
      {
        this->AllowBackWithBallotSelected_.set (x);
      }

      const BallotOptionSelectionConfiguration::ShowConfirmationType& BallotOptionSelectionConfiguration::
      getShowConfirmation () const
      {
        return this->ShowConfirmation_.get ();
      }

      BallotOptionSelectionConfiguration::ShowConfirmationType& BallotOptionSelectionConfiguration::
      getShowConfirmation ()
      {
        return this->ShowConfirmation_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setShowConfirmation (const ShowConfirmationType& x)
      {
        this->ShowConfirmation_.set (x);
      }

      const BallotOptionSelectionConfiguration::CandidatesButtonsSpacingType& BallotOptionSelectionConfiguration::
      getCandidatesButtonsSpacing () const
      {
        return this->CandidatesButtonsSpacing_.get ();
      }

      BallotOptionSelectionConfiguration::CandidatesButtonsSpacingType& BallotOptionSelectionConfiguration::
      getCandidatesButtonsSpacing ()
      {
        return this->CandidatesButtonsSpacing_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setCandidatesButtonsSpacing (const CandidatesButtonsSpacingType& x)
      {
        this->CandidatesButtonsSpacing_.set (x);
      }

      const BallotOptionSelectionConfiguration::UseCustomBallotRelationType& BallotOptionSelectionConfiguration::
      getUseCustomBallotRelation () const
      {
        return this->UseCustomBallotRelation_.get ();
      }

      BallotOptionSelectionConfiguration::UseCustomBallotRelationType& BallotOptionSelectionConfiguration::
      getUseCustomBallotRelation ()
      {
        return this->UseCustomBallotRelation_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setUseCustomBallotRelation (const UseCustomBallotRelationType& x)
      {
        this->UseCustomBallotRelation_.set (x);
      }

      const BallotOptionSelectionConfiguration::BallotRelationType& BallotOptionSelectionConfiguration::
      getBallotRelation () const
      {
        return this->BallotRelation_.get ();
      }

      BallotOptionSelectionConfiguration::BallotRelationType& BallotOptionSelectionConfiguration::
      getBallotRelation ()
      {
        return this->BallotRelation_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setBallotRelation (const BallotRelationType& x)
      {
        this->BallotRelation_.set (x);
      }

      const BallotOptionSelectionConfiguration::ListSelectedColorType& BallotOptionSelectionConfiguration::
      getListSelectedColor () const
      {
        return this->ListSelectedColor_.get ();
      }

      BallotOptionSelectionConfiguration::ListSelectedColorType& BallotOptionSelectionConfiguration::
      getListSelectedColor ()
      {
        return this->ListSelectedColor_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setListSelectedColor (const ListSelectedColorType& x)
      {
        this->ListSelectedColor_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setListSelectedColor (::std::auto_ptr< ListSelectedColorType > x)
      {
        this->ListSelectedColor_.set (x);
      }

      const BallotOptionSelectionConfiguration::ListUnSelectedColorType& BallotOptionSelectionConfiguration::
      getListUnSelectedColor () const
      {
        return this->ListUnSelectedColor_.get ();
      }

      BallotOptionSelectionConfiguration::ListUnSelectedColorType& BallotOptionSelectionConfiguration::
      getListUnSelectedColor ()
      {
        return this->ListUnSelectedColor_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setListUnSelectedColor (const ListUnSelectedColorType& x)
      {
        this->ListUnSelectedColor_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setListUnSelectedColor (::std::auto_ptr< ListUnSelectedColorType > x)
      {
        this->ListUnSelectedColor_.set (x);
      }

      const BallotOptionSelectionConfiguration::StandInColorType& BallotOptionSelectionConfiguration::
      getStandInColor () const
      {
        return this->StandInColor_.get ();
      }

      BallotOptionSelectionConfiguration::StandInColorType& BallotOptionSelectionConfiguration::
      getStandInColor ()
      {
        return this->StandInColor_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setStandInColor (const StandInColorType& x)
      {
        this->StandInColor_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setStandInColor (::std::auto_ptr< StandInColorType > x)
      {
        this->StandInColor_.set (x);
      }

      const BallotOptionSelectionConfiguration::BallotOptionWidgetType& BallotOptionSelectionConfiguration::
      getBallotOptionWidget () const
      {
        return this->BallotOptionWidget_.get ();
      }

      BallotOptionSelectionConfiguration::BallotOptionWidgetType& BallotOptionSelectionConfiguration::
      getBallotOptionWidget ()
      {
        return this->BallotOptionWidget_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setBallotOptionWidget (const BallotOptionWidgetType& x)
      {
        this->BallotOptionWidget_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setBallotOptionWidget (::std::auto_ptr< BallotOptionWidgetType > x)
      {
        this->BallotOptionWidget_.set (x);
      }

      const BallotOptionSelectionConfiguration::HeaderLabelConfigurationType& BallotOptionSelectionConfiguration::
      getHeaderLabelConfiguration () const
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      BallotOptionSelectionConfiguration::HeaderLabelConfigurationType& BallotOptionSelectionConfiguration::
      getHeaderLabelConfiguration ()
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      const BallotOptionSelectionConfiguration::BottomLabelConfigurationType& BallotOptionSelectionConfiguration::
      getBottomLabelConfiguration () const
      {
        return this->BottomLabelConfiguration_.get ();
      }

      BallotOptionSelectionConfiguration::BottomLabelConfigurationType& BallotOptionSelectionConfiguration::
      getBottomLabelConfiguration ()
      {
        return this->BottomLabelConfiguration_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setBottomLabelConfiguration (const BottomLabelConfigurationType& x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      const BallotOptionSelectionConfiguration::ShowImageInListType& BallotOptionSelectionConfiguration::
      getShowImageInList () const
      {
        return this->ShowImageInList_.get ();
      }

      BallotOptionSelectionConfiguration::ShowImageInListType& BallotOptionSelectionConfiguration::
      getShowImageInList ()
      {
        return this->ShowImageInList_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setShowImageInList (const ShowImageInListType& x)
      {
        this->ShowImageInList_.set (x);
      }

      const BallotOptionSelectionConfiguration::ImageInListPadggingType& BallotOptionSelectionConfiguration::
      getImageInListPadgging () const
      {
        return this->ImageInListPadgging_.get ();
      }

      BallotOptionSelectionConfiguration::ImageInListPadggingType& BallotOptionSelectionConfiguration::
      getImageInListPadgging ()
      {
        return this->ImageInListPadgging_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setImageInListPadgging (const ImageInListPadggingType& x)
      {
        this->ImageInListPadgging_.set (x);
      }

      const BallotOptionSelectionConfiguration::FillPrincipalType& BallotOptionSelectionConfiguration::
      getFillPrincipal () const
      {
        return this->FillPrincipal_.get ();
      }

      BallotOptionSelectionConfiguration::FillPrincipalType& BallotOptionSelectionConfiguration::
      getFillPrincipal ()
      {
        return this->FillPrincipal_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setFillPrincipal (const FillPrincipalType& x)
      {
        this->FillPrincipal_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setFillPrincipal (::std::auto_ptr< FillPrincipalType > x)
      {
        this->FillPrincipal_.set (x);
      }

      const BallotOptionSelectionConfiguration::FillColumnDynamicType& BallotOptionSelectionConfiguration::
      getFillColumnDynamic () const
      {
        return this->FillColumnDynamic_.get ();
      }

      BallotOptionSelectionConfiguration::FillColumnDynamicType& BallotOptionSelectionConfiguration::
      getFillColumnDynamic ()
      {
        return this->FillColumnDynamic_.get ();
      }

      void BallotOptionSelectionConfiguration::
      setFillColumnDynamic (const FillColumnDynamicType& x)
      {
        this->FillColumnDynamic_.set (x);
      }

      void BallotOptionSelectionConfiguration::
      setFillColumnDynamic (::std::auto_ptr< FillColumnDynamicType > x)
      {
        this->FillColumnDynamic_.set (x);
      }


      // FillPrincipalConfiguration
      // 

      FillPrincipalConfiguration::
      FillPrincipalConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_FillPrincipalConfiguration_literals_[v])
      {
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const FillPrincipalConfiguration& v,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      FillPrincipalConfiguration& FillPrincipalConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_FillPrincipalConfiguration_literals_[v]);

        return *this;
      }


      // FillColumnDynamicConfiguration
      // 

      const FillColumnDynamicConfiguration::PivotConfigSequence& FillColumnDynamicConfiguration::
      getPivotConfig () const
      {
        return this->PivotConfig_;
      }

      FillColumnDynamicConfiguration::PivotConfigSequence& FillColumnDynamicConfiguration::
      getPivotConfig ()
      {
        return this->PivotConfig_;
      }

      void FillColumnDynamicConfiguration::
      setPivotConfig (const PivotConfigSequence& s)
      {
        this->PivotConfig_ = s;
      }


      // PivotConfig
      // 

      const PivotConfig::ValueType& PivotConfig::
      getValue () const
      {
        return this->Value_.get ();
      }

      PivotConfig::ValueType& PivotConfig::
      getValue ()
      {
        return this->Value_.get ();
      }

      void PivotConfig::
      setValue (const ValueType& x)
      {
        this->Value_.set (x);
      }

      const PivotConfig::ColumnCountType& PivotConfig::
      getColumnCount () const
      {
        return this->ColumnCount_.get ();
      }

      PivotConfig::ColumnCountType& PivotConfig::
      getColumnCount ()
      {
        return this->ColumnCount_.get ();
      }

      void PivotConfig::
      setColumnCount (const ColumnCountType& x)
      {
        this->ColumnCount_.set (x);
      }

      const PivotConfig::WrapType& PivotConfig::
      getWrap () const
      {
        return this->Wrap_.get ();
      }

      PivotConfig::WrapType& PivotConfig::
      getWrap ()
      {
        return this->Wrap_.get ();
      }

      void PivotConfig::
      setWrap (const WrapType& x)
      {
        this->Wrap_.set (x);
      }


      // CustomAtributtesWindowConfiguration
      // 

      const CustomAtributtesWindowConfiguration::ForceQuestionHeaderType& CustomAtributtesWindowConfiguration::
      getForceQuestionHeader () const
      {
        return this->ForceQuestionHeader_.get ();
      }

      CustomAtributtesWindowConfiguration::ForceQuestionHeaderType& CustomAtributtesWindowConfiguration::
      getForceQuestionHeader ()
      {
        return this->ForceQuestionHeader_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setForceQuestionHeader (const ForceQuestionHeaderType& x)
      {
        this->ForceQuestionHeader_.set (x);
      }

      const CustomAtributtesWindowConfiguration::ForceQuestionFooterType& CustomAtributtesWindowConfiguration::
      getForceQuestionFooter () const
      {
        return this->ForceQuestionFooter_.get ();
      }

      CustomAtributtesWindowConfiguration::ForceQuestionFooterType& CustomAtributtesWindowConfiguration::
      getForceQuestionFooter ()
      {
        return this->ForceQuestionFooter_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setForceQuestionFooter (const ForceQuestionFooterType& x)
      {
        this->ForceQuestionFooter_.set (x);
      }

      const CustomAtributtesWindowConfiguration::ForceQuestionHeaderConfirmationType& CustomAtributtesWindowConfiguration::
      getForceQuestionHeaderConfirmation () const
      {
        return this->ForceQuestionHeaderConfirmation_.get ();
      }

      CustomAtributtesWindowConfiguration::ForceQuestionHeaderConfirmationType& CustomAtributtesWindowConfiguration::
      getForceQuestionHeaderConfirmation ()
      {
        return this->ForceQuestionHeaderConfirmation_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setForceQuestionHeaderConfirmation (const ForceQuestionHeaderConfirmationType& x)
      {
        this->ForceQuestionHeaderConfirmation_.set (x);
      }

      const CustomAtributtesWindowConfiguration::ForceQuestionFooterConfirmationType& CustomAtributtesWindowConfiguration::
      getForceQuestionFooterConfirmation () const
      {
        return this->ForceQuestionFooterConfirmation_.get ();
      }

      CustomAtributtesWindowConfiguration::ForceQuestionFooterConfirmationType& CustomAtributtesWindowConfiguration::
      getForceQuestionFooterConfirmation ()
      {
        return this->ForceQuestionFooterConfirmation_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setForceQuestionFooterConfirmation (const ForceQuestionFooterConfirmationType& x)
      {
        this->ForceQuestionFooterConfirmation_.set (x);
      }

      const CustomAtributtesWindowConfiguration::ShowWelcomeMessageQuestionCloseButtonType& CustomAtributtesWindowConfiguration::
      getShowWelcomeMessageQuestionCloseButton () const
      {
        return this->ShowWelcomeMessageQuestionCloseButton_.get ();
      }

      CustomAtributtesWindowConfiguration::ShowWelcomeMessageQuestionCloseButtonType& CustomAtributtesWindowConfiguration::
      getShowWelcomeMessageQuestionCloseButton ()
      {
        return this->ShowWelcomeMessageQuestionCloseButton_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setShowWelcomeMessageQuestionCloseButton (const ShowWelcomeMessageQuestionCloseButtonType& x)
      {
        this->ShowWelcomeMessageQuestionCloseButton_.set (x);
      }

      const CustomAtributtesWindowConfiguration::WelcomeMessageQuestionTimerType& CustomAtributtesWindowConfiguration::
      getWelcomeMessageQuestionTimer () const
      {
        return this->WelcomeMessageQuestionTimer_.get ();
      }

      CustomAtributtesWindowConfiguration::WelcomeMessageQuestionTimerType& CustomAtributtesWindowConfiguration::
      getWelcomeMessageQuestionTimer ()
      {
        return this->WelcomeMessageQuestionTimer_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setWelcomeMessageQuestionTimer (const WelcomeMessageQuestionTimerType& x)
      {
        this->WelcomeMessageQuestionTimer_.set (x);
      }

      const CustomAtributtesWindowConfiguration::ShowQuestionConfirmationType& CustomAtributtesWindowConfiguration::
      getShowQuestionConfirmation () const
      {
        return this->ShowQuestionConfirmation_.get ();
      }

      CustomAtributtesWindowConfiguration::ShowQuestionConfirmationType& CustomAtributtesWindowConfiguration::
      getShowQuestionConfirmation ()
      {
        return this->ShowQuestionConfirmation_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setShowQuestionConfirmation (const ShowQuestionConfirmationType& x)
      {
        this->ShowQuestionConfirmation_.set (x);
      }

      const CustomAtributtesWindowConfiguration::ShowWelcomeQuestionType& CustomAtributtesWindowConfiguration::
      getShowWelcomeQuestion () const
      {
        return this->ShowWelcomeQuestion_.get ();
      }

      CustomAtributtesWindowConfiguration::ShowWelcomeQuestionType& CustomAtributtesWindowConfiguration::
      getShowWelcomeQuestion ()
      {
        return this->ShowWelcomeQuestion_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setShowWelcomeQuestion (const ShowWelcomeQuestionType& x)
      {
        this->ShowWelcomeQuestion_.set (x);
      }

      const CustomAtributtesWindowConfiguration::QuestionWindowWithType& CustomAtributtesWindowConfiguration::
      getQuestionWindowWith () const
      {
        return this->QuestionWindowWith_.get ();
      }

      CustomAtributtesWindowConfiguration::QuestionWindowWithType& CustomAtributtesWindowConfiguration::
      getQuestionWindowWith ()
      {
        return this->QuestionWindowWith_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setQuestionWindowWith (const QuestionWindowWithType& x)
      {
        this->QuestionWindowWith_.set (x);
      }

      const CustomAtributtesWindowConfiguration::QuestionWindowHeightType& CustomAtributtesWindowConfiguration::
      getQuestionWindowHeight () const
      {
        return this->QuestionWindowHeight_.get ();
      }

      CustomAtributtesWindowConfiguration::QuestionWindowHeightType& CustomAtributtesWindowConfiguration::
      getQuestionWindowHeight ()
      {
        return this->QuestionWindowHeight_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setQuestionWindowHeight (const QuestionWindowHeightType& x)
      {
        this->QuestionWindowHeight_.set (x);
      }

      const CustomAtributtesWindowConfiguration::HeaderLabelConfigurationType& CustomAtributtesWindowConfiguration::
      getHeaderLabelConfiguration () const
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      CustomAtributtesWindowConfiguration::HeaderLabelConfigurationType& CustomAtributtesWindowConfiguration::
      getHeaderLabelConfiguration ()
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      void CustomAtributtesWindowConfiguration::
      setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      const CustomAtributtesWindowConfiguration::BottomLabelConfigurationType& CustomAtributtesWindowConfiguration::
      getBottomLabelConfiguration () const
      {
        return this->BottomLabelConfiguration_.get ();
      }

      CustomAtributtesWindowConfiguration::BottomLabelConfigurationType& CustomAtributtesWindowConfiguration::
      getBottomLabelConfiguration ()
      {
        return this->BottomLabelConfiguration_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setBottomLabelConfiguration (const BottomLabelConfigurationType& x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      void CustomAtributtesWindowConfiguration::
      setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      const CustomAtributtesWindowConfiguration::CenterLabelConfigurationType& CustomAtributtesWindowConfiguration::
      getCenterLabelConfiguration () const
      {
        return this->CenterLabelConfiguration_.get ();
      }

      CustomAtributtesWindowConfiguration::CenterLabelConfigurationType& CustomAtributtesWindowConfiguration::
      getCenterLabelConfiguration ()
      {
        return this->CenterLabelConfiguration_.get ();
      }

      void CustomAtributtesWindowConfiguration::
      setCenterLabelConfiguration (const CenterLabelConfigurationType& x)
      {
        this->CenterLabelConfiguration_.set (x);
      }

      void CustomAtributtesWindowConfiguration::
      setCenterLabelConfiguration (::std::auto_ptr< CenterLabelConfigurationType > x)
      {
        this->CenterLabelConfiguration_.set (x);
      }


      // ConfirmationWindowConfiguration
      // 

      const ConfirmationWindowConfiguration::HeaderLabelConfigurationType& ConfirmationWindowConfiguration::
      getHeaderLabelConfiguration () const
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      ConfirmationWindowConfiguration::HeaderLabelConfigurationType& ConfirmationWindowConfiguration::
      getHeaderLabelConfiguration ()
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      void ConfirmationWindowConfiguration::
      setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      void ConfirmationWindowConfiguration::
      setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      const ConfirmationWindowConfiguration::BottomLabelConfigurationType& ConfirmationWindowConfiguration::
      getBottomLabelConfiguration () const
      {
        return this->BottomLabelConfiguration_.get ();
      }

      ConfirmationWindowConfiguration::BottomLabelConfigurationType& ConfirmationWindowConfiguration::
      getBottomLabelConfiguration ()
      {
        return this->BottomLabelConfiguration_.get ();
      }

      void ConfirmationWindowConfiguration::
      setBottomLabelConfiguration (const BottomLabelConfigurationType& x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      void ConfirmationWindowConfiguration::
      setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      const ConfirmationWindowConfiguration::NullButtonsVerticalType& ConfirmationWindowConfiguration::
      getNullButtonsVertical () const
      {
        return this->NullButtonsVertical_.get ();
      }

      ConfirmationWindowConfiguration::NullButtonsVerticalType& ConfirmationWindowConfiguration::
      getNullButtonsVertical ()
      {
        return this->NullButtonsVertical_.get ();
      }

      void ConfirmationWindowConfiguration::
      setNullButtonsVertical (const NullButtonsVerticalType& x)
      {
        this->NullButtonsVertical_.set (x);
      }


      // FormsCommonControlsConfigurations
      // 

      const FormsCommonControlsConfigurations::FormTitlesType& FormsCommonControlsConfigurations::
      getFormTitles () const
      {
        return this->FormTitles_.get ();
      }

      FormsCommonControlsConfigurations::FormTitlesType& FormsCommonControlsConfigurations::
      getFormTitles ()
      {
        return this->FormTitles_.get ();
      }

      void FormsCommonControlsConfigurations::
      setFormTitles (const FormTitlesType& x)
      {
        this->FormTitles_.set (x);
      }

      void FormsCommonControlsConfigurations::
      setFormTitles (::std::auto_ptr< FormTitlesType > x)
      {
        this->FormTitles_.set (x);
      }

      const FormsCommonControlsConfigurations::FormMesagesType& FormsCommonControlsConfigurations::
      getFormMesages () const
      {
        return this->FormMesages_.get ();
      }

      FormsCommonControlsConfigurations::FormMesagesType& FormsCommonControlsConfigurations::
      getFormMesages ()
      {
        return this->FormMesages_.get ();
      }

      void FormsCommonControlsConfigurations::
      setFormMesages (const FormMesagesType& x)
      {
        this->FormMesages_.set (x);
      }

      void FormsCommonControlsConfigurations::
      setFormMesages (::std::auto_ptr< FormMesagesType > x)
      {
        this->FormMesages_.set (x);
      }

      const FormsCommonControlsConfigurations::UnableFunctionalityMessageType& FormsCommonControlsConfigurations::
      getUnableFunctionalityMessage () const
      {
        return this->UnableFunctionalityMessage_.get ();
      }

      FormsCommonControlsConfigurations::UnableFunctionalityMessageType& FormsCommonControlsConfigurations::
      getUnableFunctionalityMessage ()
      {
        return this->UnableFunctionalityMessage_.get ();
      }

      void FormsCommonControlsConfigurations::
      setUnableFunctionalityMessage (const UnableFunctionalityMessageType& x)
      {
        this->UnableFunctionalityMessage_.set (x);
      }

      void FormsCommonControlsConfigurations::
      setUnableFunctionalityMessage (::std::auto_ptr< UnableFunctionalityMessageType > x)
      {
        this->UnableFunctionalityMessage_.set (x);
      }

      const FormsCommonControlsConfigurations::UnableMessageCloseTimeType& FormsCommonControlsConfigurations::
      getUnableMessageCloseTime () const
      {
        return this->UnableMessageCloseTime_.get ();
      }

      FormsCommonControlsConfigurations::UnableMessageCloseTimeType& FormsCommonControlsConfigurations::
      getUnableMessageCloseTime ()
      {
        return this->UnableMessageCloseTime_.get ();
      }

      void FormsCommonControlsConfigurations::
      setUnableMessageCloseTime (const UnableMessageCloseTimeType& x)
      {
        this->UnableMessageCloseTime_.set (x);
      }

      const FormsCommonControlsConfigurations::ExitFunctionalityMessageCloseTimeType& FormsCommonControlsConfigurations::
      getExitFunctionalityMessageCloseTime () const
      {
        return this->ExitFunctionalityMessageCloseTime_.get ();
      }

      FormsCommonControlsConfigurations::ExitFunctionalityMessageCloseTimeType& FormsCommonControlsConfigurations::
      getExitFunctionalityMessageCloseTime ()
      {
        return this->ExitFunctionalityMessageCloseTime_.get ();
      }

      void FormsCommonControlsConfigurations::
      setExitFunctionalityMessageCloseTime (const ExitFunctionalityMessageCloseTimeType& x)
      {
        this->ExitFunctionalityMessageCloseTime_.set (x);
      }


      // FormsMessagesLabelConfigurations
      // 

      const FormsMessagesLabelConfigurations::VMLogingMessageLabelType& FormsMessagesLabelConfigurations::
      getVMLogingMessageLabel () const
      {
        return this->VMLogingMessageLabel_.get ();
      }

      FormsMessagesLabelConfigurations::VMLogingMessageLabelType& FormsMessagesLabelConfigurations::
      getVMLogingMessageLabel ()
      {
        return this->VMLogingMessageLabel_.get ();
      }

      void FormsMessagesLabelConfigurations::
      setVMLogingMessageLabel (const VMLogingMessageLabelType& x)
      {
        this->VMLogingMessageLabel_.set (x);
      }

      void FormsMessagesLabelConfigurations::
      setVMLogingMessageLabel (::std::auto_ptr< VMLogingMessageLabelType > x)
      {
        this->VMLogingMessageLabel_.set (x);
      }


      // FormsTitleLabelConfigurations
      // 

      const FormsTitleLabelConfigurations::EmptyWindowTitleLabelType& FormsTitleLabelConfigurations::
      getEmptyWindowTitleLabel () const
      {
        return this->EmptyWindowTitleLabel_.get ();
      }

      FormsTitleLabelConfigurations::EmptyWindowTitleLabelType& FormsTitleLabelConfigurations::
      getEmptyWindowTitleLabel ()
      {
        return this->EmptyWindowTitleLabel_.get ();
      }

      void FormsTitleLabelConfigurations::
      setEmptyWindowTitleLabel (const EmptyWindowTitleLabelType& x)
      {
        this->EmptyWindowTitleLabel_.set (x);
      }

      void FormsTitleLabelConfigurations::
      setEmptyWindowTitleLabel (::std::auto_ptr< EmptyWindowTitleLabelType > x)
      {
        this->EmptyWindowTitleLabel_.set (x);
      }


      // VotingExperienceLabelConfiguration
      // 

      const VotingExperienceLabelConfiguration::SelectionLanguageHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageHeaderLabelConfiguration () const
      {
        return this->SelectionLanguageHeaderLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SelectionLanguageHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageHeaderLabelConfiguration ()
      {
        return this->SelectionLanguageHeaderLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageHeaderLabelConfiguration (const SelectionLanguageHeaderLabelConfigurationType& x)
      {
        this->SelectionLanguageHeaderLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageHeaderLabelConfiguration (::std::auto_ptr< SelectionLanguageHeaderLabelConfigurationType > x)
      {
        this->SelectionLanguageHeaderLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SelectionLanguageBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageBottomLabelConfiguration () const
      {
        return this->SelectionLanguageBottomLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SelectionLanguageBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageBottomLabelConfiguration ()
      {
        return this->SelectionLanguageBottomLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageBottomLabelConfiguration (const SelectionLanguageBottomLabelConfigurationType& x)
      {
        this->SelectionLanguageBottomLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageBottomLabelConfiguration (::std::auto_ptr< SelectionLanguageBottomLabelConfigurationType > x)
      {
        this->SelectionLanguageBottomLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SelectionLanguageConfirmationHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageConfirmationHeaderLabelConfiguration () const
      {
        return this->SelectionLanguageConfirmationHeaderLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SelectionLanguageConfirmationHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageConfirmationHeaderLabelConfiguration ()
      {
        return this->SelectionLanguageConfirmationHeaderLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageConfirmationHeaderLabelConfiguration (const SelectionLanguageConfirmationHeaderLabelConfigurationType& x)
      {
        this->SelectionLanguageConfirmationHeaderLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageConfirmationHeaderLabelConfiguration (::std::auto_ptr< SelectionLanguageConfirmationHeaderLabelConfigurationType > x)
      {
        this->SelectionLanguageConfirmationHeaderLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SelectionLanguageConfirmationBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageConfirmationBottomLabelConfiguration () const
      {
        return this->SelectionLanguageConfirmationBottomLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SelectionLanguageConfirmationBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageConfirmationBottomLabelConfiguration ()
      {
        return this->SelectionLanguageConfirmationBottomLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageConfirmationBottomLabelConfiguration (const SelectionLanguageConfirmationBottomLabelConfigurationType& x)
      {
        this->SelectionLanguageConfirmationBottomLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageConfirmationBottomLabelConfiguration (::std::auto_ptr< SelectionLanguageConfirmationBottomLabelConfigurationType > x)
      {
        this->SelectionLanguageConfirmationBottomLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SelectionLanguageConfirmationCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageConfirmationCenterLabelConfiguration () const
      {
        return this->SelectionLanguageConfirmationCenterLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SelectionLanguageConfirmationCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSelectionLanguageConfirmationCenterLabelConfiguration ()
      {
        return this->SelectionLanguageConfirmationCenterLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageConfirmationCenterLabelConfiguration (const SelectionLanguageConfirmationCenterLabelConfigurationType& x)
      {
        this->SelectionLanguageConfirmationCenterLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSelectionLanguageConfirmationCenterLabelConfiguration (::std::auto_ptr< SelectionLanguageConfirmationCenterLabelConfigurationType > x)
      {
        this->SelectionLanguageConfirmationCenterLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SuperWhiteHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteHeaderLabelConfiguration () const
      {
        return this->SuperWhiteHeaderLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SuperWhiteHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteHeaderLabelConfiguration ()
      {
        return this->SuperWhiteHeaderLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteHeaderLabelConfiguration (const SuperWhiteHeaderLabelConfigurationType& x)
      {
        this->SuperWhiteHeaderLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteHeaderLabelConfiguration (::std::auto_ptr< SuperWhiteHeaderLabelConfigurationType > x)
      {
        this->SuperWhiteHeaderLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SuperWhiteBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteBottomLabelConfiguration () const
      {
        return this->SuperWhiteBottomLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SuperWhiteBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteBottomLabelConfiguration ()
      {
        return this->SuperWhiteBottomLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteBottomLabelConfiguration (const SuperWhiteBottomLabelConfigurationType& x)
      {
        this->SuperWhiteBottomLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteBottomLabelConfiguration (::std::auto_ptr< SuperWhiteBottomLabelConfigurationType > x)
      {
        this->SuperWhiteBottomLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SuperWhiteCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteCenterLabelConfiguration () const
      {
        return this->SuperWhiteCenterLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SuperWhiteCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteCenterLabelConfiguration ()
      {
        return this->SuperWhiteCenterLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteCenterLabelConfiguration (const SuperWhiteCenterLabelConfigurationType& x)
      {
        this->SuperWhiteCenterLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteCenterLabelConfiguration (::std::auto_ptr< SuperWhiteCenterLabelConfigurationType > x)
      {
        this->SuperWhiteCenterLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SuperWhiteConfirmationHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteConfirmationHeaderLabelConfiguration () const
      {
        return this->SuperWhiteConfirmationHeaderLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SuperWhiteConfirmationHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteConfirmationHeaderLabelConfiguration ()
      {
        return this->SuperWhiteConfirmationHeaderLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteConfirmationHeaderLabelConfiguration (const SuperWhiteConfirmationHeaderLabelConfigurationType& x)
      {
        this->SuperWhiteConfirmationHeaderLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteConfirmationHeaderLabelConfiguration (::std::auto_ptr< SuperWhiteConfirmationHeaderLabelConfigurationType > x)
      {
        this->SuperWhiteConfirmationHeaderLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SuperWhiteConfirmationBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteConfirmationBottomLabelConfiguration () const
      {
        return this->SuperWhiteConfirmationBottomLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SuperWhiteConfirmationBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteConfirmationBottomLabelConfiguration ()
      {
        return this->SuperWhiteConfirmationBottomLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteConfirmationBottomLabelConfiguration (const SuperWhiteConfirmationBottomLabelConfigurationType& x)
      {
        this->SuperWhiteConfirmationBottomLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteConfirmationBottomLabelConfiguration (::std::auto_ptr< SuperWhiteConfirmationBottomLabelConfigurationType > x)
      {
        this->SuperWhiteConfirmationBottomLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::SuperWhiteConfirmationCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteConfirmationCenterLabelConfiguration () const
      {
        return this->SuperWhiteConfirmationCenterLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::SuperWhiteConfirmationCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getSuperWhiteConfirmationCenterLabelConfiguration ()
      {
        return this->SuperWhiteConfirmationCenterLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteConfirmationCenterLabelConfiguration (const SuperWhiteConfirmationCenterLabelConfigurationType& x)
      {
        this->SuperWhiteConfirmationCenterLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setSuperWhiteConfirmationCenterLabelConfiguration (::std::auto_ptr< SuperWhiteConfirmationCenterLabelConfigurationType > x)
      {
        this->SuperWhiteConfirmationCenterLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::ContestWhiteSelectionHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getContestWhiteSelectionHeaderLabelConfiguration () const
      {
        return this->ContestWhiteSelectionHeaderLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::ContestWhiteSelectionHeaderLabelConfigurationType& VotingExperienceLabelConfiguration::
      getContestWhiteSelectionHeaderLabelConfiguration ()
      {
        return this->ContestWhiteSelectionHeaderLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setContestWhiteSelectionHeaderLabelConfiguration (const ContestWhiteSelectionHeaderLabelConfigurationType& x)
      {
        this->ContestWhiteSelectionHeaderLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setContestWhiteSelectionHeaderLabelConfiguration (::std::auto_ptr< ContestWhiteSelectionHeaderLabelConfigurationType > x)
      {
        this->ContestWhiteSelectionHeaderLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::ContestWhiteSelectionBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getContestWhiteSelectionBottomLabelConfiguration () const
      {
        return this->ContestWhiteSelectionBottomLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::ContestWhiteSelectionBottomLabelConfigurationType& VotingExperienceLabelConfiguration::
      getContestWhiteSelectionBottomLabelConfiguration ()
      {
        return this->ContestWhiteSelectionBottomLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setContestWhiteSelectionBottomLabelConfiguration (const ContestWhiteSelectionBottomLabelConfigurationType& x)
      {
        this->ContestWhiteSelectionBottomLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setContestWhiteSelectionBottomLabelConfiguration (::std::auto_ptr< ContestWhiteSelectionBottomLabelConfigurationType > x)
      {
        this->ContestWhiteSelectionBottomLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::ContestWhiteSelectionCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getContestWhiteSelectionCenterLabelConfiguration () const
      {
        return this->ContestWhiteSelectionCenterLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::ContestWhiteSelectionCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getContestWhiteSelectionCenterLabelConfiguration ()
      {
        return this->ContestWhiteSelectionCenterLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setContestWhiteSelectionCenterLabelConfiguration (const ContestWhiteSelectionCenterLabelConfigurationType& x)
      {
        this->ContestWhiteSelectionCenterLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setContestWhiteSelectionCenterLabelConfiguration (::std::auto_ptr< ContestWhiteSelectionCenterLabelConfigurationType > x)
      {
        this->ContestWhiteSelectionCenterLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::WelcomeContestCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getWelcomeContestCenterLabelConfiguration () const
      {
        return this->WelcomeContestCenterLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::WelcomeContestCenterLabelConfigurationType& VotingExperienceLabelConfiguration::
      getWelcomeContestCenterLabelConfiguration ()
      {
        return this->WelcomeContestCenterLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setWelcomeContestCenterLabelConfiguration (const WelcomeContestCenterLabelConfigurationType& x)
      {
        this->WelcomeContestCenterLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setWelcomeContestCenterLabelConfiguration (::std::auto_ptr< WelcomeContestCenterLabelConfigurationType > x)
      {
        this->WelcomeContestCenterLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::VotingWidgetLabelChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetLabelChildLabelConfiguration () const
      {
        return this->VotingWidgetLabelChildLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::VotingWidgetLabelChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetLabelChildLabelConfiguration ()
      {
        return this->VotingWidgetLabelChildLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetLabelChildLabelConfiguration (const VotingWidgetLabelChildLabelConfigurationType& x)
      {
        this->VotingWidgetLabelChildLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetLabelChildLabelConfiguration (::std::auto_ptr< VotingWidgetLabelChildLabelConfigurationType > x)
      {
        this->VotingWidgetLabelChildLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::VotingWidgetTopChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetTopChildLabelConfiguration () const
      {
        return this->VotingWidgetTopChildLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::VotingWidgetTopChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetTopChildLabelConfiguration ()
      {
        return this->VotingWidgetTopChildLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetTopChildLabelConfiguration (const VotingWidgetTopChildLabelConfigurationType& x)
      {
        this->VotingWidgetTopChildLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetTopChildLabelConfiguration (::std::auto_ptr< VotingWidgetTopChildLabelConfigurationType > x)
      {
        this->VotingWidgetTopChildLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::VotingWidgetBottomChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetBottomChildLabelConfiguration () const
      {
        return this->VotingWidgetBottomChildLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::VotingWidgetBottomChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetBottomChildLabelConfiguration ()
      {
        return this->VotingWidgetBottomChildLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetBottomChildLabelConfiguration (const VotingWidgetBottomChildLabelConfigurationType& x)
      {
        this->VotingWidgetBottomChildLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetBottomChildLabelConfiguration (::std::auto_ptr< VotingWidgetBottomChildLabelConfigurationType > x)
      {
        this->VotingWidgetBottomChildLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::VotingWidgetNumberChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetNumberChildLabelConfiguration () const
      {
        return this->VotingWidgetNumberChildLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::VotingWidgetNumberChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetNumberChildLabelConfiguration ()
      {
        return this->VotingWidgetNumberChildLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetNumberChildLabelConfiguration (const VotingWidgetNumberChildLabelConfigurationType& x)
      {
        this->VotingWidgetNumberChildLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetNumberChildLabelConfiguration (::std::auto_ptr< VotingWidgetNumberChildLabelConfigurationType > x)
      {
        this->VotingWidgetNumberChildLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::VotingWindowEndMessageLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWindowEndMessageLabelConfiguration () const
      {
        return this->VotingWindowEndMessageLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::VotingWindowEndMessageLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWindowEndMessageLabelConfiguration ()
      {
        return this->VotingWindowEndMessageLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setVotingWindowEndMessageLabelConfiguration (const VotingWindowEndMessageLabelConfigurationType& x)
      {
        this->VotingWindowEndMessageLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setVotingWindowEndMessageLabelConfiguration (::std::auto_ptr< VotingWindowEndMessageLabelConfigurationType > x)
      {
        this->VotingWindowEndMessageLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::VotingWidgetPartySelectionLabelChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetPartySelectionLabelChildLabelConfiguration () const
      {
        return this->VotingWidgetPartySelectionLabelChildLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::VotingWidgetPartySelectionLabelChildLabelConfigurationType& VotingExperienceLabelConfiguration::
      getVotingWidgetPartySelectionLabelChildLabelConfiguration ()
      {
        return this->VotingWidgetPartySelectionLabelChildLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetPartySelectionLabelChildLabelConfiguration (const VotingWidgetPartySelectionLabelChildLabelConfigurationType& x)
      {
        this->VotingWidgetPartySelectionLabelChildLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setVotingWidgetPartySelectionLabelChildLabelConfiguration (::std::auto_ptr< VotingWidgetPartySelectionLabelChildLabelConfigurationType > x)
      {
        this->VotingWidgetPartySelectionLabelChildLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::PartyNullLabelConfigurationType& VotingExperienceLabelConfiguration::
      getPartyNullLabelConfiguration () const
      {
        return this->PartyNullLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::PartyNullLabelConfigurationType& VotingExperienceLabelConfiguration::
      getPartyNullLabelConfiguration ()
      {
        return this->PartyNullLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setPartyNullLabelConfiguration (const PartyNullLabelConfigurationType& x)
      {
        this->PartyNullLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setPartyNullLabelConfiguration (::std::auto_ptr< PartyNullLabelConfigurationType > x)
      {
        this->PartyNullLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::LoadingBallotsLabelConfigurationType& VotingExperienceLabelConfiguration::
      getLoadingBallotsLabelConfiguration () const
      {
        return this->LoadingBallotsLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::LoadingBallotsLabelConfigurationType& VotingExperienceLabelConfiguration::
      getLoadingBallotsLabelConfiguration ()
      {
        return this->LoadingBallotsLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setLoadingBallotsLabelConfiguration (const LoadingBallotsLabelConfigurationType& x)
      {
        this->LoadingBallotsLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setLoadingBallotsLabelConfiguration (::std::auto_ptr< LoadingBallotsLabelConfigurationType > x)
      {
        this->LoadingBallotsLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::CheckSumLabelConfigurationType& VotingExperienceLabelConfiguration::
      getCheckSumLabelConfiguration () const
      {
        return this->CheckSumLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::CheckSumLabelConfigurationType& VotingExperienceLabelConfiguration::
      getCheckSumLabelConfiguration ()
      {
        return this->CheckSumLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setCheckSumLabelConfiguration (const CheckSumLabelConfigurationType& x)
      {
        this->CheckSumLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setCheckSumLabelConfiguration (::std::auto_ptr< CheckSumLabelConfigurationType > x)
      {
        this->CheckSumLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::InterrupVotingExperienceMessageLabelConfigurationType& VotingExperienceLabelConfiguration::
      getInterrupVotingExperienceMessageLabelConfiguration () const
      {
        return this->InterrupVotingExperienceMessageLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::InterrupVotingExperienceMessageLabelConfigurationType& VotingExperienceLabelConfiguration::
      getInterrupVotingExperienceMessageLabelConfiguration ()
      {
        return this->InterrupVotingExperienceMessageLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setInterrupVotingExperienceMessageLabelConfiguration (const InterrupVotingExperienceMessageLabelConfigurationType& x)
      {
        this->InterrupVotingExperienceMessageLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setInterrupVotingExperienceMessageLabelConfiguration (::std::auto_ptr< InterrupVotingExperienceMessageLabelConfigurationType > x)
      {
        this->InterrupVotingExperienceMessageLabelConfiguration_.set (x);
      }

      const VotingExperienceLabelConfiguration::InterrupVotingExperienceCancelLabelConfigurationType& VotingExperienceLabelConfiguration::
      getInterrupVotingExperienceCancelLabelConfiguration () const
      {
        return this->InterrupVotingExperienceCancelLabelConfiguration_.get ();
      }

      VotingExperienceLabelConfiguration::InterrupVotingExperienceCancelLabelConfigurationType& VotingExperienceLabelConfiguration::
      getInterrupVotingExperienceCancelLabelConfiguration ()
      {
        return this->InterrupVotingExperienceCancelLabelConfiguration_.get ();
      }

      void VotingExperienceLabelConfiguration::
      setInterrupVotingExperienceCancelLabelConfiguration (const InterrupVotingExperienceCancelLabelConfigurationType& x)
      {
        this->InterrupVotingExperienceCancelLabelConfiguration_.set (x);
      }

      void VotingExperienceLabelConfiguration::
      setInterrupVotingExperienceCancelLabelConfiguration (::std::auto_ptr< InterrupVotingExperienceCancelLabelConfigurationType > x)
      {
        this->InterrupVotingExperienceCancelLabelConfiguration_.set (x);
      }


      // BallotOptionWidgetConfiguration
      // 

      const BallotOptionWidgetConfiguration::NumberWidthType& BallotOptionWidgetConfiguration::
      getNumberWidth () const
      {
        return this->NumberWidth_.get ();
      }

      BallotOptionWidgetConfiguration::NumberWidthType& BallotOptionWidgetConfiguration::
      getNumberWidth ()
      {
        return this->NumberWidth_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setNumberWidth (const NumberWidthType& x)
      {
        this->NumberWidth_.set (x);
      }

      const BallotOptionWidgetConfiguration::PaddingType& BallotOptionWidgetConfiguration::
      getPadding () const
      {
        return this->Padding_.get ();
      }

      BallotOptionWidgetConfiguration::PaddingType& BallotOptionWidgetConfiguration::
      getPadding ()
      {
        return this->Padding_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setPadding (const PaddingType& x)
      {
        this->Padding_.set (x);
      }

      const BallotOptionWidgetConfiguration::DisplayType& BallotOptionWidgetConfiguration::
      getDisplay () const
      {
        return this->Display_.get ();
      }

      BallotOptionWidgetConfiguration::DisplayType& BallotOptionWidgetConfiguration::
      getDisplay ()
      {
        return this->Display_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setDisplay (const DisplayType& x)
      {
        this->Display_.set (x);
      }

      void BallotOptionWidgetConfiguration::
      setDisplay (::std::auto_ptr< DisplayType > x)
      {
        this->Display_.set (x);
      }

      const BallotOptionWidgetConfiguration::ShowFrameType& BallotOptionWidgetConfiguration::
      getShowFrame () const
      {
        return this->ShowFrame_.get ();
      }

      BallotOptionWidgetConfiguration::ShowFrameType& BallotOptionWidgetConfiguration::
      getShowFrame ()
      {
        return this->ShowFrame_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setShowFrame (const ShowFrameType& x)
      {
        this->ShowFrame_.set (x);
      }

      const BallotOptionWidgetConfiguration::SelectedColorType& BallotOptionWidgetConfiguration::
      getSelectedColor () const
      {
        return this->SelectedColor_.get ();
      }

      BallotOptionWidgetConfiguration::SelectedColorType& BallotOptionWidgetConfiguration::
      getSelectedColor ()
      {
        return this->SelectedColor_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setSelectedColor (const SelectedColorType& x)
      {
        this->SelectedColor_.set (x);
      }

      void BallotOptionWidgetConfiguration::
      setSelectedColor (::std::auto_ptr< SelectedColorType > x)
      {
        this->SelectedColor_.set (x);
      }

      const BallotOptionWidgetConfiguration::UnSelectedColorType& BallotOptionWidgetConfiguration::
      getUnSelectedColor () const
      {
        return this->UnSelectedColor_.get ();
      }

      BallotOptionWidgetConfiguration::UnSelectedColorType& BallotOptionWidgetConfiguration::
      getUnSelectedColor ()
      {
        return this->UnSelectedColor_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setUnSelectedColor (const UnSelectedColorType& x)
      {
        this->UnSelectedColor_.set (x);
      }

      void BallotOptionWidgetConfiguration::
      setUnSelectedColor (::std::auto_ptr< UnSelectedColorType > x)
      {
        this->UnSelectedColor_.set (x);
      }

      const BallotOptionWidgetConfiguration::BallotFontType& BallotOptionWidgetConfiguration::
      getBallotFont () const
      {
        return this->BallotFont_.get ();
      }

      BallotOptionWidgetConfiguration::BallotFontType& BallotOptionWidgetConfiguration::
      getBallotFont ()
      {
        return this->BallotFont_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setBallotFont (const BallotFontType& x)
      {
        this->BallotFont_.set (x);
      }

      void BallotOptionWidgetConfiguration::
      setBallotFont (::std::auto_ptr< BallotFontType > x)
      {
        this->BallotFont_.set (x);
      }

      const BallotOptionWidgetConfiguration::SeparatorCharacterType& BallotOptionWidgetConfiguration::
      getSeparatorCharacter () const
      {
        return this->SeparatorCharacter_.get ();
      }

      BallotOptionWidgetConfiguration::SeparatorCharacterType& BallotOptionWidgetConfiguration::
      getSeparatorCharacter ()
      {
        return this->SeparatorCharacter_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setSeparatorCharacter (const SeparatorCharacterType& x)
      {
        this->SeparatorCharacter_.set (x);
      }

      void BallotOptionWidgetConfiguration::
      setSeparatorCharacter (::std::auto_ptr< SeparatorCharacterType > x)
      {
        this->SeparatorCharacter_.set (x);
      }

      const BallotOptionWidgetConfiguration::NameIsBeforeSeparatorType& BallotOptionWidgetConfiguration::
      getNameIsBeforeSeparator () const
      {
        return this->NameIsBeforeSeparator_.get ();
      }

      BallotOptionWidgetConfiguration::NameIsBeforeSeparatorType& BallotOptionWidgetConfiguration::
      getNameIsBeforeSeparator ()
      {
        return this->NameIsBeforeSeparator_.get ();
      }

      void BallotOptionWidgetConfiguration::
      setNameIsBeforeSeparator (const NameIsBeforeSeparatorType& x)
      {
        this->NameIsBeforeSeparator_.set (x);
      }


      // VotingWindowConfiguration
      // 

      const VotingWindowConfiguration::ShowBallotOptionFooterType& VotingWindowConfiguration::
      getShowBallotOptionFooter () const
      {
        return this->ShowBallotOptionFooter_.get ();
      }

      VotingWindowConfiguration::ShowBallotOptionFooterType& VotingWindowConfiguration::
      getShowBallotOptionFooter ()
      {
        return this->ShowBallotOptionFooter_.get ();
      }

      void VotingWindowConfiguration::
      setShowBallotOptionFooter (const ShowBallotOptionFooterType& x)
      {
        this->ShowBallotOptionFooter_.set (x);
      }

      const VotingWindowConfiguration::BottomFrameMarginType& VotingWindowConfiguration::
      getBottomFrameMargin () const
      {
        return this->BottomFrameMargin_.get ();
      }

      VotingWindowConfiguration::BottomFrameMarginType& VotingWindowConfiguration::
      getBottomFrameMargin ()
      {
        return this->BottomFrameMargin_.get ();
      }

      void VotingWindowConfiguration::
      setBottomFrameMargin (const BottomFrameMarginType& x)
      {
        this->BottomFrameMargin_.set (x);
      }

      const VotingWindowConfiguration::BottomFrameHeightType& VotingWindowConfiguration::
      getBottomFrameHeight () const
      {
        return this->BottomFrameHeight_.get ();
      }

      VotingWindowConfiguration::BottomFrameHeightType& VotingWindowConfiguration::
      getBottomFrameHeight ()
      {
        return this->BottomFrameHeight_.get ();
      }

      void VotingWindowConfiguration::
      setBottomFrameHeight (const BottomFrameHeightType& x)
      {
        this->BottomFrameHeight_.set (x);
      }

      const VotingWindowConfiguration::BottomFontType& VotingWindowConfiguration::
      getBottomFont () const
      {
        return this->BottomFont_.get ();
      }

      VotingWindowConfiguration::BottomFontType& VotingWindowConfiguration::
      getBottomFont ()
      {
        return this->BottomFont_.get ();
      }

      void VotingWindowConfiguration::
      setBottomFont (const BottomFontType& x)
      {
        this->BottomFont_.set (x);
      }

      void VotingWindowConfiguration::
      setBottomFont (::std::auto_ptr< BottomFontType > x)
      {
        this->BottomFont_.set (x);
      }

      const VotingWindowConfiguration::ShowLanguageConfirmationType& VotingWindowConfiguration::
      getShowLanguageConfirmation () const
      {
        return this->ShowLanguageConfirmation_.get ();
      }

      VotingWindowConfiguration::ShowLanguageConfirmationType& VotingWindowConfiguration::
      getShowLanguageConfirmation ()
      {
        return this->ShowLanguageConfirmation_.get ();
      }

      void VotingWindowConfiguration::
      setShowLanguageConfirmation (const ShowLanguageConfirmationType& x)
      {
        this->ShowLanguageConfirmation_.set (x);
      }

      const VotingWindowConfiguration::WelcomeMessageContestTimerType& VotingWindowConfiguration::
      getWelcomeMessageContestTimer () const
      {
        return this->WelcomeMessageContestTimer_.get ();
      }

      VotingWindowConfiguration::WelcomeMessageContestTimerType& VotingWindowConfiguration::
      getWelcomeMessageContestTimer ()
      {
        return this->WelcomeMessageContestTimer_.get ();
      }

      void VotingWindowConfiguration::
      setWelcomeMessageContestTimer (const WelcomeMessageContestTimerType& x)
      {
        this->WelcomeMessageContestTimer_.set (x);
      }

      const VotingWindowConfiguration::ShowBlankVoteQuestionType& VotingWindowConfiguration::
      getShowBlankVoteQuestion () const
      {
        return this->ShowBlankVoteQuestion_.get ();
      }

      VotingWindowConfiguration::ShowBlankVoteQuestionType& VotingWindowConfiguration::
      getShowBlankVoteQuestion ()
      {
        return this->ShowBlankVoteQuestion_.get ();
      }

      void VotingWindowConfiguration::
      setShowBlankVoteQuestion (const ShowBlankVoteQuestionType& x)
      {
        this->ShowBlankVoteQuestion_.set (x);
      }

      const VotingWindowConfiguration::ShowBlankVoteConfirmationType& VotingWindowConfiguration::
      getShowBlankVoteConfirmation () const
      {
        return this->ShowBlankVoteConfirmation_.get ();
      }

      VotingWindowConfiguration::ShowBlankVoteConfirmationType& VotingWindowConfiguration::
      getShowBlankVoteConfirmation ()
      {
        return this->ShowBlankVoteConfirmation_.get ();
      }

      void VotingWindowConfiguration::
      setShowBlankVoteConfirmation (const ShowBlankVoteConfirmationType& x)
      {
        this->ShowBlankVoteConfirmation_.set (x);
      }

      const VotingWindowConfiguration::ShowNullQuestionInBackType& VotingWindowConfiguration::
      getShowNullQuestionInBack () const
      {
        return this->ShowNullQuestionInBack_.get ();
      }

      VotingWindowConfiguration::ShowNullQuestionInBackType& VotingWindowConfiguration::
      getShowNullQuestionInBack ()
      {
        return this->ShowNullQuestionInBack_.get ();
      }

      void VotingWindowConfiguration::
      setShowNullQuestionInBack (const ShowNullQuestionInBackType& x)
      {
        this->ShowNullQuestionInBack_.set (x);
      }

      const VotingWindowConfiguration::ShowLanguageSelectionInBackType& VotingWindowConfiguration::
      getShowLanguageSelectionInBack () const
      {
        return this->ShowLanguageSelectionInBack_.get ();
      }

      VotingWindowConfiguration::ShowLanguageSelectionInBackType& VotingWindowConfiguration::
      getShowLanguageSelectionInBack ()
      {
        return this->ShowLanguageSelectionInBack_.get ();
      }

      void VotingWindowConfiguration::
      setShowLanguageSelectionInBack (const ShowLanguageSelectionInBackType& x)
      {
        this->ShowLanguageSelectionInBack_.set (x);
      }

      const VotingWindowConfiguration::ShowBallotOptionsInContestBackType& VotingWindowConfiguration::
      getShowBallotOptionsInContestBack () const
      {
        return this->ShowBallotOptionsInContestBack_.get ();
      }

      VotingWindowConfiguration::ShowBallotOptionsInContestBackType& VotingWindowConfiguration::
      getShowBallotOptionsInContestBack ()
      {
        return this->ShowBallotOptionsInContestBack_.get ();
      }

      void VotingWindowConfiguration::
      setShowBallotOptionsInContestBack (const ShowBallotOptionsInContestBackType& x)
      {
        this->ShowBallotOptionsInContestBack_.set (x);
      }

      const VotingWindowConfiguration::ShowWelcomeContestType& VotingWindowConfiguration::
      getShowWelcomeContest () const
      {
        return this->ShowWelcomeContest_.get ();
      }

      VotingWindowConfiguration::ShowWelcomeContestType& VotingWindowConfiguration::
      getShowWelcomeContest ()
      {
        return this->ShowWelcomeContest_.get ();
      }

      void VotingWindowConfiguration::
      setShowWelcomeContest (const ShowWelcomeContestType& x)
      {
        this->ShowWelcomeContest_.set (x);
      }

      const VotingWindowConfiguration::EraseBallotOptionsInPartyChangedType& VotingWindowConfiguration::
      getEraseBallotOptionsInPartyChanged () const
      {
        return this->EraseBallotOptionsInPartyChanged_.get ();
      }

      VotingWindowConfiguration::EraseBallotOptionsInPartyChangedType& VotingWindowConfiguration::
      getEraseBallotOptionsInPartyChanged ()
      {
        return this->EraseBallotOptionsInPartyChanged_.get ();
      }

      void VotingWindowConfiguration::
      setEraseBallotOptionsInPartyChanged (const EraseBallotOptionsInPartyChangedType& x)
      {
        this->EraseBallotOptionsInPartyChanged_.set (x);
      }

      const VotingWindowConfiguration::QuestionHeaderSameInConfirmationType& VotingWindowConfiguration::
      getQuestionHeaderSameInConfirmation () const
      {
        return this->QuestionHeaderSameInConfirmation_.get ();
      }

      VotingWindowConfiguration::QuestionHeaderSameInConfirmationType& VotingWindowConfiguration::
      getQuestionHeaderSameInConfirmation ()
      {
        return this->QuestionHeaderSameInConfirmation_.get ();
      }

      void VotingWindowConfiguration::
      setQuestionHeaderSameInConfirmation (const QuestionHeaderSameInConfirmationType& x)
      {
        this->QuestionHeaderSameInConfirmation_.set (x);
      }

      const VotingWindowConfiguration::ConnectTimerType& VotingWindowConfiguration::
      getConnectTimer () const
      {
        return this->ConnectTimer_.get ();
      }

      VotingWindowConfiguration::ConnectTimerType& VotingWindowConfiguration::
      getConnectTimer ()
      {
        return this->ConnectTimer_.get ();
      }

      void VotingWindowConfiguration::
      setConnectTimer (const ConnectTimerType& x)
      {
        this->ConnectTimer_.set (x);
      }

      const VotingWindowConfiguration::ConnectTimerLoadingType& VotingWindowConfiguration::
      getConnectTimerLoading () const
      {
        return this->ConnectTimerLoading_.get ();
      }

      VotingWindowConfiguration::ConnectTimerLoadingType& VotingWindowConfiguration::
      getConnectTimerLoading ()
      {
        return this->ConnectTimerLoading_.get ();
      }

      void VotingWindowConfiguration::
      setConnectTimerLoading (const ConnectTimerLoadingType& x)
      {
        this->ConnectTimerLoading_.set (x);
      }

      const VotingWindowConfiguration::ConnectTimerLanguageType& VotingWindowConfiguration::
      getConnectTimerLanguage () const
      {
        return this->ConnectTimerLanguage_.get ();
      }

      VotingWindowConfiguration::ConnectTimerLanguageType& VotingWindowConfiguration::
      getConnectTimerLanguage ()
      {
        return this->ConnectTimerLanguage_.get ();
      }

      void VotingWindowConfiguration::
      setConnectTimerLanguage (const ConnectTimerLanguageType& x)
      {
        this->ConnectTimerLanguage_.set (x);
      }

      const VotingWindowConfiguration::LoadingBallotMessageType& VotingWindowConfiguration::
      getLoadingBallotMessage () const
      {
        return this->LoadingBallotMessage_.get ();
      }

      VotingWindowConfiguration::LoadingBallotMessageType& VotingWindowConfiguration::
      getLoadingBallotMessage ()
      {
        return this->LoadingBallotMessage_.get ();
      }

      void VotingWindowConfiguration::
      setLoadingBallotMessage (const LoadingBallotMessageType& x)
      {
        this->LoadingBallotMessage_.set (x);
      }

      void VotingWindowConfiguration::
      setLoadingBallotMessage (::std::auto_ptr< LoadingBallotMessageType > x)
      {
        this->LoadingBallotMessage_.set (x);
      }

      const VotingWindowConfiguration::NumberOfBallotsToDisplayLoadingBallotMessageType& VotingWindowConfiguration::
      getNumberOfBallotsToDisplayLoadingBallotMessage () const
      {
        return this->NumberOfBallotsToDisplayLoadingBallotMessage_.get ();
      }

      VotingWindowConfiguration::NumberOfBallotsToDisplayLoadingBallotMessageType& VotingWindowConfiguration::
      getNumberOfBallotsToDisplayLoadingBallotMessage ()
      {
        return this->NumberOfBallotsToDisplayLoadingBallotMessage_.get ();
      }

      void VotingWindowConfiguration::
      setNumberOfBallotsToDisplayLoadingBallotMessage (const NumberOfBallotsToDisplayLoadingBallotMessageType& x)
      {
        this->NumberOfBallotsToDisplayLoadingBallotMessage_.set (x);
      }


      // ReportPrintingWidgetConfiguration
      // 

      const ReportPrintingWidgetConfiguration::CompositeDescriptionLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getCompositeDescriptionLabelConfiguration () const
      {
        return this->CompositeDescriptionLabelConfiguration_.get ();
      }

      ReportPrintingWidgetConfiguration::CompositeDescriptionLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getCompositeDescriptionLabelConfiguration ()
      {
        return this->CompositeDescriptionLabelConfiguration_.get ();
      }

      void ReportPrintingWidgetConfiguration::
      setCompositeDescriptionLabelConfiguration (const CompositeDescriptionLabelConfigurationType& x)
      {
        this->CompositeDescriptionLabelConfiguration_.set (x);
      }

      void ReportPrintingWidgetConfiguration::
      setCompositeDescriptionLabelConfiguration (::std::auto_ptr< CompositeDescriptionLabelConfigurationType > x)
      {
        this->CompositeDescriptionLabelConfiguration_.set (x);
      }

      const ReportPrintingWidgetConfiguration::ReportListTitleLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getReportListTitleLabelConfiguration () const
      {
        return this->ReportListTitleLabelConfiguration_.get ();
      }

      ReportPrintingWidgetConfiguration::ReportListTitleLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getReportListTitleLabelConfiguration ()
      {
        return this->ReportListTitleLabelConfiguration_.get ();
      }

      void ReportPrintingWidgetConfiguration::
      setReportListTitleLabelConfiguration (const ReportListTitleLabelConfigurationType& x)
      {
        this->ReportListTitleLabelConfiguration_.set (x);
      }

      void ReportPrintingWidgetConfiguration::
      setReportListTitleLabelConfiguration (::std::auto_ptr< ReportListTitleLabelConfigurationType > x)
      {
        this->ReportListTitleLabelConfiguration_.set (x);
      }

      const ReportPrintingWidgetConfiguration::ProgressMessageLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getProgressMessageLabelConfiguration () const
      {
        return this->ProgressMessageLabelConfiguration_.get ();
      }

      ReportPrintingWidgetConfiguration::ProgressMessageLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getProgressMessageLabelConfiguration ()
      {
        return this->ProgressMessageLabelConfiguration_.get ();
      }

      void ReportPrintingWidgetConfiguration::
      setProgressMessageLabelConfiguration (const ProgressMessageLabelConfigurationType& x)
      {
        this->ProgressMessageLabelConfiguration_.set (x);
      }

      void ReportPrintingWidgetConfiguration::
      setProgressMessageLabelConfiguration (::std::auto_ptr< ProgressMessageLabelConfigurationType > x)
      {
        this->ProgressMessageLabelConfiguration_.set (x);
      }

      const ReportPrintingWidgetConfiguration::ReportListItemLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getReportListItemLabelConfiguration () const
      {
        return this->ReportListItemLabelConfiguration_.get ();
      }

      ReportPrintingWidgetConfiguration::ReportListItemLabelConfigurationType& ReportPrintingWidgetConfiguration::
      getReportListItemLabelConfiguration ()
      {
        return this->ReportListItemLabelConfiguration_.get ();
      }

      void ReportPrintingWidgetConfiguration::
      setReportListItemLabelConfiguration (const ReportListItemLabelConfigurationType& x)
      {
        this->ReportListItemLabelConfiguration_.set (x);
      }

      void ReportPrintingWidgetConfiguration::
      setReportListItemLabelConfiguration (::std::auto_ptr< ReportListItemLabelConfigurationType > x)
      {
        this->ReportListItemLabelConfiguration_.set (x);
      }


      // FontConfiguration
      // 

      const FontConfiguration::SizeType& FontConfiguration::
      getSize () const
      {
        return this->Size_.get ();
      }

      FontConfiguration::SizeType& FontConfiguration::
      getSize ()
      {
        return this->Size_.get ();
      }

      void FontConfiguration::
      setSize (const SizeType& x)
      {
        this->Size_.set (x);
      }

      const FontConfiguration::FontNameType& FontConfiguration::
      getFontName () const
      {
        return this->FontName_.get ();
      }

      FontConfiguration::FontNameType& FontConfiguration::
      getFontName ()
      {
        return this->FontName_.get ();
      }

      void FontConfiguration::
      setFontName (const FontNameType& x)
      {
        this->FontName_.set (x);
      }

      void FontConfiguration::
      setFontName (::std::auto_ptr< FontNameType > x)
      {
        this->FontName_.set (x);
      }


      // ColorConfiguration
      // 

      const ColorConfiguration::RedType& ColorConfiguration::
      getRed () const
      {
        return this->Red_.get ();
      }

      ColorConfiguration::RedType& ColorConfiguration::
      getRed ()
      {
        return this->Red_.get ();
      }

      void ColorConfiguration::
      setRed (const RedType& x)
      {
        this->Red_.set (x);
      }

      const ColorConfiguration::BlueType& ColorConfiguration::
      getBlue () const
      {
        return this->Blue_.get ();
      }

      ColorConfiguration::BlueType& ColorConfiguration::
      getBlue ()
      {
        return this->Blue_.get ();
      }

      void ColorConfiguration::
      setBlue (const BlueType& x)
      {
        this->Blue_.set (x);
      }

      const ColorConfiguration::GreenType& ColorConfiguration::
      getGreen () const
      {
        return this->Green_.get ();
      }

      ColorConfiguration::GreenType& ColorConfiguration::
      getGreen ()
      {
        return this->Green_.get ();
      }

      void ColorConfiguration::
      setGreen (const GreenType& x)
      {
        this->Green_.set (x);
      }


      // XMLLabelConfiguration
      // 

      const XMLLabelConfiguration::Label_AlignmentType& XMLLabelConfiguration::
      getLabel_Alignment () const
      {
        return this->Label_Alignment_.get ();
      }

      XMLLabelConfiguration::Label_AlignmentType& XMLLabelConfiguration::
      getLabel_Alignment ()
      {
        return this->Label_Alignment_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_Alignment (const Label_AlignmentType& x)
      {
        this->Label_Alignment_.set (x);
      }

      void XMLLabelConfiguration::
      setLabel_Alignment (::std::auto_ptr< Label_AlignmentType > x)
      {
        this->Label_Alignment_.set (x);
      }

      const XMLLabelConfiguration::Label_VerticalPaddingType& XMLLabelConfiguration::
      getLabel_VerticalPadding () const
      {
        return this->Label_VerticalPadding_.get ();
      }

      XMLLabelConfiguration::Label_VerticalPaddingType& XMLLabelConfiguration::
      getLabel_VerticalPadding ()
      {
        return this->Label_VerticalPadding_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_VerticalPadding (const Label_VerticalPaddingType& x)
      {
        this->Label_VerticalPadding_.set (x);
      }

      const XMLLabelConfiguration::Label_HorizontalPaddingType& XMLLabelConfiguration::
      getLabel_HorizontalPadding () const
      {
        return this->Label_HorizontalPadding_.get ();
      }

      XMLLabelConfiguration::Label_HorizontalPaddingType& XMLLabelConfiguration::
      getLabel_HorizontalPadding ()
      {
        return this->Label_HorizontalPadding_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_HorizontalPadding (const Label_HorizontalPaddingType& x)
      {
        this->Label_HorizontalPadding_.set (x);
      }

      const XMLLabelConfiguration::Label_FamilyType& XMLLabelConfiguration::
      getLabel_Family () const
      {
        return this->Label_Family_.get ();
      }

      XMLLabelConfiguration::Label_FamilyType& XMLLabelConfiguration::
      getLabel_Family ()
      {
        return this->Label_Family_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_Family (const Label_FamilyType& x)
      {
        this->Label_Family_.set (x);
      }

      void XMLLabelConfiguration::
      setLabel_Family (::std::auto_ptr< Label_FamilyType > x)
      {
        this->Label_Family_.set (x);
      }

      const XMLLabelConfiguration::Label_StyleType& XMLLabelConfiguration::
      getLabel_Style () const
      {
        return this->Label_Style_.get ();
      }

      XMLLabelConfiguration::Label_StyleType& XMLLabelConfiguration::
      getLabel_Style ()
      {
        return this->Label_Style_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_Style (const Label_StyleType& x)
      {
        this->Label_Style_.set (x);
      }

      void XMLLabelConfiguration::
      setLabel_Style (::std::auto_ptr< Label_StyleType > x)
      {
        this->Label_Style_.set (x);
      }

      const XMLLabelConfiguration::Label_WeightType& XMLLabelConfiguration::
      getLabel_Weight () const
      {
        return this->Label_Weight_.get ();
      }

      XMLLabelConfiguration::Label_WeightType& XMLLabelConfiguration::
      getLabel_Weight ()
      {
        return this->Label_Weight_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_Weight (const Label_WeightType& x)
      {
        this->Label_Weight_.set (x);
      }

      void XMLLabelConfiguration::
      setLabel_Weight (::std::auto_ptr< Label_WeightType > x)
      {
        this->Label_Weight_.set (x);
      }

      const XMLLabelConfiguration::Label_SizeType& XMLLabelConfiguration::
      getLabel_Size () const
      {
        return this->Label_Size_.get ();
      }

      XMLLabelConfiguration::Label_SizeType& XMLLabelConfiguration::
      getLabel_Size ()
      {
        return this->Label_Size_.get ();
      }

      void XMLLabelConfiguration::
      setLabel_Size (const Label_SizeType& x)
      {
        this->Label_Size_.set (x);
      }


      // IncomePassphraseEnum
      // 

      IncomePassphraseEnum::
      IncomePassphraseEnum ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_IncomePassphraseEnum_literals_[v])
      {
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (const IncomePassphraseEnum& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      IncomePassphraseEnum& IncomePassphraseEnum::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_IncomePassphraseEnum_literals_[v]);

        return *this;
      }


      // ViewButtonConfiguration
      // 

      ViewButtonConfiguration::
      ViewButtonConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_ViewButtonConfiguration_literals_[v])
      {
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (const ViewButtonConfiguration& v,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      ViewButtonConfiguration& ViewButtonConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_ViewButtonConfiguration_literals_[v]);

        return *this;
      }


      // ViewTableConfiguration
      // 

      ViewTableConfiguration::
      ViewTableConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      ViewTableConfiguration::
      ViewTableConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_ViewTableConfiguration_literals_[v])
      {
      }

      ViewTableConfiguration::
      ViewTableConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ViewTableConfiguration::
      ViewTableConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ViewTableConfiguration::
      ViewTableConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ViewTableConfiguration::
      ViewTableConfiguration (const ViewTableConfiguration& v,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      ViewTableConfiguration& ViewTableConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_ViewTableConfiguration_literals_[v]);

        return *this;
      }


      // ExpandButtonConfiguration
      // 

      const ExpandButtonConfiguration::SpacingType& ExpandButtonConfiguration::
      getSpacing () const
      {
        return this->Spacing_.get ();
      }

      ExpandButtonConfiguration::SpacingType& ExpandButtonConfiguration::
      getSpacing ()
      {
        return this->Spacing_.get ();
      }

      void ExpandButtonConfiguration::
      setSpacing (const SpacingType& x)
      {
        this->Spacing_.set (x);
      }

      const ExpandButtonConfiguration::FontSizeType& ExpandButtonConfiguration::
      getFontSize () const
      {
        return this->FontSize_.get ();
      }

      ExpandButtonConfiguration::FontSizeType& ExpandButtonConfiguration::
      getFontSize ()
      {
        return this->FontSize_.get ();
      }

      void ExpandButtonConfiguration::
      setFontSize (const FontSizeType& x)
      {
        this->FontSize_.set (x);
      }


      // BallotOptionSeparateButtonConfiguration
      // 

      const BallotOptionSeparateButtonConfiguration::ClearButtonWidthType& BallotOptionSeparateButtonConfiguration::
      getClearButtonWidth () const
      {
        return this->ClearButtonWidth_.get ();
      }

      BallotOptionSeparateButtonConfiguration::ClearButtonWidthType& BallotOptionSeparateButtonConfiguration::
      getClearButtonWidth ()
      {
        return this->ClearButtonWidth_.get ();
      }

      void BallotOptionSeparateButtonConfiguration::
      setClearButtonWidth (const ClearButtonWidthType& x)
      {
        this->ClearButtonWidth_.set (x);
      }

      const BallotOptionSeparateButtonConfiguration::AcceptButtonWidthType& BallotOptionSeparateButtonConfiguration::
      getAcceptButtonWidth () const
      {
        return this->AcceptButtonWidth_.get ();
      }

      BallotOptionSeparateButtonConfiguration::AcceptButtonWidthType& BallotOptionSeparateButtonConfiguration::
      getAcceptButtonWidth ()
      {
        return this->AcceptButtonWidth_.get ();
      }

      void BallotOptionSeparateButtonConfiguration::
      setAcceptButtonWidth (const AcceptButtonWidthType& x)
      {
        this->AcceptButtonWidth_.set (x);
      }

      const BallotOptionSeparateButtonConfiguration::BackButtonWidthType& BallotOptionSeparateButtonConfiguration::
      getBackButtonWidth () const
      {
        return this->BackButtonWidth_.get ();
      }

      BallotOptionSeparateButtonConfiguration::BackButtonWidthType& BallotOptionSeparateButtonConfiguration::
      getBackButtonWidth ()
      {
        return this->BackButtonWidth_.get ();
      }

      void BallotOptionSeparateButtonConfiguration::
      setBackButtonWidth (const BackButtonWidthType& x)
      {
        this->BackButtonWidth_.set (x);
      }

      const BallotOptionSeparateButtonConfiguration::FontSizeType& BallotOptionSeparateButtonConfiguration::
      getFontSize () const
      {
        return this->FontSize_.get ();
      }

      BallotOptionSeparateButtonConfiguration::FontSizeType& BallotOptionSeparateButtonConfiguration::
      getFontSize ()
      {
        return this->FontSize_.get ();
      }

      void BallotOptionSeparateButtonConfiguration::
      setFontSize (const FontSizeType& x)
      {
        this->FontSize_.set (x);
      }


      // PartySeparateButtonConfiguration
      // 

      const PartySeparateButtonConfiguration::NullButtonWidthType& PartySeparateButtonConfiguration::
      getNullButtonWidth () const
      {
        return this->NullButtonWidth_.get ();
      }

      PartySeparateButtonConfiguration::NullButtonWidthType& PartySeparateButtonConfiguration::
      getNullButtonWidth ()
      {
        return this->NullButtonWidth_.get ();
      }

      void PartySeparateButtonConfiguration::
      setNullButtonWidth (const NullButtonWidthType& x)
      {
        this->NullButtonWidth_.set (x);
      }

      const PartySeparateButtonConfiguration::BackButtonWidthType& PartySeparateButtonConfiguration::
      getBackButtonWidth () const
      {
        return this->BackButtonWidth_.get ();
      }

      PartySeparateButtonConfiguration::BackButtonWidthType& PartySeparateButtonConfiguration::
      getBackButtonWidth ()
      {
        return this->BackButtonWidth_.get ();
      }

      void PartySeparateButtonConfiguration::
      setBackButtonWidth (const BackButtonWidthType& x)
      {
        this->BackButtonWidth_.set (x);
      }

      const PartySeparateButtonConfiguration::FontSizeType& PartySeparateButtonConfiguration::
      getFontSize () const
      {
        return this->FontSize_.get ();
      }

      PartySeparateButtonConfiguration::FontSizeType& PartySeparateButtonConfiguration::
      getFontSize ()
      {
        return this->FontSize_.get ();
      }

      void PartySeparateButtonConfiguration::
      setFontSize (const FontSizeType& x)
      {
        this->FontSize_.set (x);
      }


      // CloseElectionSteps
      // 

      CloseElectionSteps::
      CloseElectionSteps ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      CloseElectionSteps::
      CloseElectionSteps (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_CloseElectionSteps_literals_[v])
      {
      }

      CloseElectionSteps::
      CloseElectionSteps (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CloseElectionSteps::
      CloseElectionSteps (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CloseElectionSteps::
      CloseElectionSteps (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CloseElectionSteps::
      CloseElectionSteps (const CloseElectionSteps& v,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      CloseElectionSteps& CloseElectionSteps::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_CloseElectionSteps_literals_[v]);

        return *this;
      }


      // ChallengePasswordSourceEnum
      // 

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_ChallengePasswordSourceEnum_literals_[v])
      {
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const ChallengePasswordSourceEnum& v,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      ChallengePasswordSourceEnum& ChallengePasswordSourceEnum::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_ChallengePasswordSourceEnum_literals_[v]);

        return *this;
      }


      // ActivatedCardStatisticsConfiguration
      // 

      const ActivatedCardStatisticsConfiguration::HideOfficialType& ActivatedCardStatisticsConfiguration::
      getHideOfficial () const
      {
        return this->HideOfficial_.get ();
      }

      ActivatedCardStatisticsConfiguration::HideOfficialType& ActivatedCardStatisticsConfiguration::
      getHideOfficial ()
      {
        return this->HideOfficial_.get ();
      }

      void ActivatedCardStatisticsConfiguration::
      setHideOfficial (const HideOfficialType& x)
      {
        this->HideOfficial_.set (x);
      }

      const ActivatedCardStatisticsConfiguration::HideDemoType& ActivatedCardStatisticsConfiguration::
      getHideDemo () const
      {
        return this->HideDemo_.get ();
      }

      ActivatedCardStatisticsConfiguration::HideDemoType& ActivatedCardStatisticsConfiguration::
      getHideDemo ()
      {
        return this->HideDemo_.get ();
      }

      void ActivatedCardStatisticsConfiguration::
      setHideDemo (const HideDemoType& x)
      {
        this->HideDemo_.set (x);
      }

      const ActivatedCardStatisticsConfiguration::HideRecoveryType& ActivatedCardStatisticsConfiguration::
      getHideRecovery () const
      {
        return this->HideRecovery_.get ();
      }

      ActivatedCardStatisticsConfiguration::HideRecoveryType& ActivatedCardStatisticsConfiguration::
      getHideRecovery ()
      {
        return this->HideRecovery_.get ();
      }

      void ActivatedCardStatisticsConfiguration::
      setHideRecovery (const HideRecoveryType& x)
      {
        this->HideRecovery_.set (x);
      }

      const ActivatedCardStatisticsConfiguration::HideAudioType& ActivatedCardStatisticsConfiguration::
      getHideAudio () const
      {
        return this->HideAudio_.get ();
      }

      ActivatedCardStatisticsConfiguration::HideAudioType& ActivatedCardStatisticsConfiguration::
      getHideAudio ()
      {
        return this->HideAudio_.get ();
      }

      void ActivatedCardStatisticsConfiguration::
      setHideAudio (const HideAudioType& x)
      {
        this->HideAudio_.set (x);
      }

      const ActivatedCardStatisticsConfiguration::HideNonAudioType& ActivatedCardStatisticsConfiguration::
      getHideNonAudio () const
      {
        return this->HideNonAudio_.get ();
      }

      ActivatedCardStatisticsConfiguration::HideNonAudioType& ActivatedCardStatisticsConfiguration::
      getHideNonAudio ()
      {
        return this->HideNonAudio_.get ();
      }

      void ActivatedCardStatisticsConfiguration::
      setHideNonAudio (const HideNonAudioType& x)
      {
        this->HideNonAudio_.set (x);
      }

      const ActivatedCardStatisticsConfiguration::HideCAType& ActivatedCardStatisticsConfiguration::
      getHideCA () const
      {
        return this->HideCA_.get ();
      }

      ActivatedCardStatisticsConfiguration::HideCAType& ActivatedCardStatisticsConfiguration::
      getHideCA ()
      {
        return this->HideCA_.get ();
      }

      void ActivatedCardStatisticsConfiguration::
      setHideCA (const HideCAType& x)
      {
        this->HideCA_.set (x);
      }


      // VMInstallationWidgetConfiguration
      // 

      const VMInstallationWidgetConfiguration::TypeType& VMInstallationWidgetConfiguration::
      getType () const
      {
        return this->Type_.get ();
      }

      VMInstallationWidgetConfiguration::TypeType& VMInstallationWidgetConfiguration::
      getType ()
      {
        return this->Type_.get ();
      }

      void VMInstallationWidgetConfiguration::
      setType (const TypeType& x)
      {
        this->Type_.set (x);
      }

      void VMInstallationWidgetConfiguration::
      setType (::std::auto_ptr< TypeType > x)
      {
        this->Type_.set (x);
      }

      const VMInstallationWidgetConfiguration::ButtonsWidthType& VMInstallationWidgetConfiguration::
      getButtonsWidth () const
      {
        return this->ButtonsWidth_.get ();
      }

      VMInstallationWidgetConfiguration::ButtonsWidthType& VMInstallationWidgetConfiguration::
      getButtonsWidth ()
      {
        return this->ButtonsWidth_.get ();
      }

      void VMInstallationWidgetConfiguration::
      setButtonsWidth (const ButtonsWidthType& x)
      {
        this->ButtonsWidth_.set (x);
      }

      const VMInstallationWidgetConfiguration::ButtonsHeightType& VMInstallationWidgetConfiguration::
      getButtonsHeight () const
      {
        return this->ButtonsHeight_.get ();
      }

      VMInstallationWidgetConfiguration::ButtonsHeightType& VMInstallationWidgetConfiguration::
      getButtonsHeight ()
      {
        return this->ButtonsHeight_.get ();
      }

      void VMInstallationWidgetConfiguration::
      setButtonsHeight (const ButtonsHeightType& x)
      {
        this->ButtonsHeight_.set (x);
      }


      // VMInstallationWidgetTypeConfiguration
      // 

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_VMInstallationWidgetTypeConfiguration_literals_[v])
      {
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const VMInstallationWidgetTypeConfiguration& v,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      VMInstallationWidgetTypeConfiguration& VMInstallationWidgetTypeConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_VMInstallationWidgetTypeConfiguration_literals_[v]);

        return *this;
      }


      // ShowBeidEntryTypeConfiguration
      // 

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_ShowBeidEntryTypeConfiguration_literals_[v])
      {
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const ShowBeidEntryTypeConfiguration& v,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      ShowBeidEntryTypeConfiguration& ShowBeidEntryTypeConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_ShowBeidEntryTypeConfiguration_literals_[v]);

        return *this;
      }


      // ElectionBlockStatusList
      // 

      const ElectionBlockStatusList::ElectionStatusSequence& ElectionBlockStatusList::
      getElectionStatus () const
      {
        return this->ElectionStatus_;
      }

      ElectionBlockStatusList::ElectionStatusSequence& ElectionBlockStatusList::
      getElectionStatus ()
      {
        return this->ElectionStatus_;
      }

      void ElectionBlockStatusList::
      setElectionStatus (const ElectionStatusSequence& s)
      {
        this->ElectionStatus_ = s;
      }


      // HelpConfiguration
      // 

      const HelpConfiguration::ImageHelpType& HelpConfiguration::
      getImageHelp () const
      {
        return this->ImageHelp_.get ();
      }

      HelpConfiguration::ImageHelpType& HelpConfiguration::
      getImageHelp ()
      {
        return this->ImageHelp_.get ();
      }

      void HelpConfiguration::
      setImageHelp (const ImageHelpType& x)
      {
        this->ImageHelp_.set (x);
      }

      void HelpConfiguration::
      setImageHelp (::std::auto_ptr< ImageHelpType > x)
      {
        this->ImageHelp_.set (x);
      }

      const HelpConfiguration::PdfHelpType& HelpConfiguration::
      getPdfHelp () const
      {
        return this->PdfHelp_.get ();
      }

      HelpConfiguration::PdfHelpType& HelpConfiguration::
      getPdfHelp ()
      {
        return this->PdfHelp_.get ();
      }

      void HelpConfiguration::
      setPdfHelp (const PdfHelpType& x)
      {
        this->PdfHelp_.set (x);
      }

      void HelpConfiguration::
      setPdfHelp (::std::auto_ptr< PdfHelpType > x)
      {
        this->PdfHelp_.set (x);
      }

      const HelpConfiguration::TitleKeyType& HelpConfiguration::
      getTitleKey () const
      {
        return this->TitleKey_.get ();
      }

      HelpConfiguration::TitleKeyType& HelpConfiguration::
      getTitleKey ()
      {
        return this->TitleKey_.get ();
      }

      void HelpConfiguration::
      setTitleKey (const TitleKeyType& x)
      {
        this->TitleKey_.set (x);
      }

      void HelpConfiguration::
      setTitleKey (::std::auto_ptr< TitleKeyType > x)
      {
        this->TitleKey_.set (x);
      }

      const HelpConfiguration::UseHelpType& HelpConfiguration::
      getUseHelp () const
      {
        return this->UseHelp_.get ();
      }

      HelpConfiguration::UseHelpType& HelpConfiguration::
      getUseHelp ()
      {
        return this->UseHelp_.get ();
      }

      void HelpConfiguration::
      setUseHelp (const UseHelpType& x)
      {
        this->UseHelp_.set (x);
      }


      // WizardStateTimeLineConfiguration
      // 

      const WizardStateTimeLineConfiguration::NameKeyType& WizardStateTimeLineConfiguration::
      getNameKey () const
      {
        return this->NameKey_.get ();
      }

      WizardStateTimeLineConfiguration::NameKeyType& WizardStateTimeLineConfiguration::
      getNameKey ()
      {
        return this->NameKey_.get ();
      }

      void WizardStateTimeLineConfiguration::
      setNameKey (const NameKeyType& x)
      {
        this->NameKey_.set (x);
      }

      void WizardStateTimeLineConfiguration::
      setNameKey (::std::auto_ptr< NameKeyType > x)
      {
        this->NameKey_.set (x);
      }

      const WizardStateTimeLineConfiguration::DescriptionKeyType& WizardStateTimeLineConfiguration::
      getDescriptionKey () const
      {
        return this->DescriptionKey_.get ();
      }

      WizardStateTimeLineConfiguration::DescriptionKeyType& WizardStateTimeLineConfiguration::
      getDescriptionKey ()
      {
        return this->DescriptionKey_.get ();
      }

      void WizardStateTimeLineConfiguration::
      setDescriptionKey (const DescriptionKeyType& x)
      {
        this->DescriptionKey_.set (x);
      }

      void WizardStateTimeLineConfiguration::
      setDescriptionKey (::std::auto_ptr< DescriptionKeyType > x)
      {
        this->DescriptionKey_.set (x);
      }

      const WizardStateTimeLineConfiguration::RelativeImagePathType& WizardStateTimeLineConfiguration::
      getRelativeImagePath () const
      {
        return this->RelativeImagePath_.get ();
      }

      WizardStateTimeLineConfiguration::RelativeImagePathType& WizardStateTimeLineConfiguration::
      getRelativeImagePath ()
      {
        return this->RelativeImagePath_.get ();
      }

      void WizardStateTimeLineConfiguration::
      setRelativeImagePath (const RelativeImagePathType& x)
      {
        this->RelativeImagePath_.set (x);
      }

      void WizardStateTimeLineConfiguration::
      setRelativeImagePath (::std::auto_ptr< RelativeImagePathType > x)
      {
        this->RelativeImagePath_.set (x);
      }


      // WizardStateToolboxConfiguration
      // 

      const WizardStateToolboxConfiguration::ToolboxElementWidthType& WizardStateToolboxConfiguration::
      getToolboxElementWidth () const
      {
        return this->ToolboxElementWidth_.get ();
      }

      WizardStateToolboxConfiguration::ToolboxElementWidthType& WizardStateToolboxConfiguration::
      getToolboxElementWidth ()
      {
        return this->ToolboxElementWidth_.get ();
      }

      void WizardStateToolboxConfiguration::
      setToolboxElementWidth (const ToolboxElementWidthType& x)
      {
        this->ToolboxElementWidth_.set (x);
      }

      const WizardStateToolboxConfiguration::ToolboxElementHeightType& WizardStateToolboxConfiguration::
      getToolboxElementHeight () const
      {
        return this->ToolboxElementHeight_.get ();
      }

      WizardStateToolboxConfiguration::ToolboxElementHeightType& WizardStateToolboxConfiguration::
      getToolboxElementHeight ()
      {
        return this->ToolboxElementHeight_.get ();
      }

      void WizardStateToolboxConfiguration::
      setToolboxElementHeight (const ToolboxElementHeightType& x)
      {
        this->ToolboxElementHeight_.set (x);
      }


      // WizardStateHelpConfiguration
      // 

      const WizardStateHelpConfiguration::TitleKeyType& WizardStateHelpConfiguration::
      getTitleKey () const
      {
        return this->TitleKey_.get ();
      }

      WizardStateHelpConfiguration::TitleKeyType& WizardStateHelpConfiguration::
      getTitleKey ()
      {
        return this->TitleKey_.get ();
      }

      void WizardStateHelpConfiguration::
      setTitleKey (const TitleKeyType& x)
      {
        this->TitleKey_.set (x);
      }

      void WizardStateHelpConfiguration::
      setTitleKey (::std::auto_ptr< TitleKeyType > x)
      {
        this->TitleKey_.set (x);
      }

      const WizardStateHelpConfiguration::ContentKeyType& WizardStateHelpConfiguration::
      getContentKey () const
      {
        return this->ContentKey_.get ();
      }

      WizardStateHelpConfiguration::ContentKeyType& WizardStateHelpConfiguration::
      getContentKey ()
      {
        return this->ContentKey_.get ();
      }

      void WizardStateHelpConfiguration::
      setContentKey (const ContentKeyType& x)
      {
        this->ContentKey_.set (x);
      }

      void WizardStateHelpConfiguration::
      setContentKey (::std::auto_ptr< ContentKeyType > x)
      {
        this->ContentKey_.set (x);
      }

      const WizardStateHelpConfiguration::RelativeImagePathType& WizardStateHelpConfiguration::
      getRelativeImagePath () const
      {
        return this->RelativeImagePath_.get ();
      }

      WizardStateHelpConfiguration::RelativeImagePathType& WizardStateHelpConfiguration::
      getRelativeImagePath ()
      {
        return this->RelativeImagePath_.get ();
      }

      void WizardStateHelpConfiguration::
      setRelativeImagePath (const RelativeImagePathType& x)
      {
        this->RelativeImagePath_.set (x);
      }

      void WizardStateHelpConfiguration::
      setRelativeImagePath (::std::auto_ptr< RelativeImagePathType > x)
      {
        this->RelativeImagePath_.set (x);
      }

      const WizardStateHelpConfiguration::HelpType& WizardStateHelpConfiguration::
      getHelp () const
      {
        return this->Help_.get ();
      }

      WizardStateHelpConfiguration::HelpType& WizardStateHelpConfiguration::
      getHelp ()
      {
        return this->Help_.get ();
      }

      void WizardStateHelpConfiguration::
      setHelp (const HelpType& x)
      {
        this->Help_.set (x);
      }

      void WizardStateHelpConfiguration::
      setHelp (::std::auto_ptr< HelpType > x)
      {
        this->Help_.set (x);
      }


      // FunctionalityWizardStateConfiguration
      // 

      const FunctionalityWizardStateConfiguration::PrincipalMenuOptionsSequence& FunctionalityWizardStateConfiguration::
      getPrincipalMenuOptions () const
      {
        return this->PrincipalMenuOptions_;
      }

      FunctionalityWizardStateConfiguration::PrincipalMenuOptionsSequence& FunctionalityWizardStateConfiguration::
      getPrincipalMenuOptions ()
      {
        return this->PrincipalMenuOptions_;
      }

      void FunctionalityWizardStateConfiguration::
      setPrincipalMenuOptions (const PrincipalMenuOptionsSequence& s)
      {
        this->PrincipalMenuOptions_ = s;
      }

      const FunctionalityWizardStateConfiguration::ToolbarMenuOptionsSequence& FunctionalityWizardStateConfiguration::
      getToolbarMenuOptions () const
      {
        return this->ToolbarMenuOptions_;
      }

      FunctionalityWizardStateConfiguration::ToolbarMenuOptionsSequence& FunctionalityWizardStateConfiguration::
      getToolbarMenuOptions ()
      {
        return this->ToolbarMenuOptions_;
      }

      void FunctionalityWizardStateConfiguration::
      setToolbarMenuOptions (const ToolbarMenuOptionsSequence& s)
      {
        this->ToolbarMenuOptions_ = s;
      }

      const FunctionalityWizardStateConfiguration::StateNameKeyType& FunctionalityWizardStateConfiguration::
      getStateNameKey () const
      {
        return this->StateNameKey_.get ();
      }

      FunctionalityWizardStateConfiguration::StateNameKeyType& FunctionalityWizardStateConfiguration::
      getStateNameKey ()
      {
        return this->StateNameKey_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setStateNameKey (const StateNameKeyType& x)
      {
        this->StateNameKey_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setStateNameKey (::std::auto_ptr< StateNameKeyType > x)
      {
        this->StateNameKey_.set (x);
      }

      const FunctionalityWizardStateConfiguration::StateDescriptionKeyType& FunctionalityWizardStateConfiguration::
      getStateDescriptionKey () const
      {
        return this->StateDescriptionKey_.get ();
      }

      FunctionalityWizardStateConfiguration::StateDescriptionKeyType& FunctionalityWizardStateConfiguration::
      getStateDescriptionKey ()
      {
        return this->StateDescriptionKey_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setStateDescriptionKey (const StateDescriptionKeyType& x)
      {
        this->StateDescriptionKey_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setStateDescriptionKey (::std::auto_ptr< StateDescriptionKeyType > x)
      {
        this->StateDescriptionKey_.set (x);
      }

      const FunctionalityWizardStateConfiguration::ProcessStatusType& FunctionalityWizardStateConfiguration::
      getProcessStatus () const
      {
        return this->ProcessStatus_.get ();
      }

      FunctionalityWizardStateConfiguration::ProcessStatusType& FunctionalityWizardStateConfiguration::
      getProcessStatus ()
      {
        return this->ProcessStatus_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setProcessStatus (const ProcessStatusType& x)
      {
        this->ProcessStatus_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setProcessStatus (::std::auto_ptr< ProcessStatusType > x)
      {
        this->ProcessStatus_.set (x);
      }

      const FunctionalityWizardStateConfiguration::StateHelpType& FunctionalityWizardStateConfiguration::
      getStateHelp () const
      {
        return this->StateHelp_.get ();
      }

      FunctionalityWizardStateConfiguration::StateHelpType& FunctionalityWizardStateConfiguration::
      getStateHelp ()
      {
        return this->StateHelp_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setStateHelp (const StateHelpType& x)
      {
        this->StateHelp_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setStateHelp (::std::auto_ptr< StateHelpType > x)
      {
        this->StateHelp_.set (x);
      }

      const FunctionalityWizardStateConfiguration::TimeLineConfigurationType& FunctionalityWizardStateConfiguration::
      getTimeLineConfiguration () const
      {
        return this->TimeLineConfiguration_.get ();
      }

      FunctionalityWizardStateConfiguration::TimeLineConfigurationType& FunctionalityWizardStateConfiguration::
      getTimeLineConfiguration ()
      {
        return this->TimeLineConfiguration_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setTimeLineConfiguration (const TimeLineConfigurationType& x)
      {
        this->TimeLineConfiguration_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setTimeLineConfiguration (::std::auto_ptr< TimeLineConfigurationType > x)
      {
        this->TimeLineConfiguration_.set (x);
      }

      const FunctionalityWizardStateConfiguration::ToolboxConfigurationType& FunctionalityWizardStateConfiguration::
      getToolboxConfiguration () const
      {
        return this->ToolboxConfiguration_.get ();
      }

      FunctionalityWizardStateConfiguration::ToolboxConfigurationType& FunctionalityWizardStateConfiguration::
      getToolboxConfiguration ()
      {
        return this->ToolboxConfiguration_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setToolboxConfiguration (const ToolboxConfigurationType& x)
      {
        this->ToolboxConfiguration_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setToolboxConfiguration (::std::auto_ptr< ToolboxConfigurationType > x)
      {
        this->ToolboxConfiguration_.set (x);
      }

      const FunctionalityWizardStateConfiguration::ButtonsLabelConfigurationType& FunctionalityWizardStateConfiguration::
      getButtonsLabelConfiguration () const
      {
        return this->ButtonsLabelConfiguration_.get ();
      }

      FunctionalityWizardStateConfiguration::ButtonsLabelConfigurationType& FunctionalityWizardStateConfiguration::
      getButtonsLabelConfiguration ()
      {
        return this->ButtonsLabelConfiguration_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setButtonsLabelConfiguration (const ButtonsLabelConfigurationType& x)
      {
        this->ButtonsLabelConfiguration_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setButtonsLabelConfiguration (::std::auto_ptr< ButtonsLabelConfigurationType > x)
      {
        this->ButtonsLabelConfiguration_.set (x);
      }

      const FunctionalityWizardStateConfiguration::TitleHelpLabelConfigurationType& FunctionalityWizardStateConfiguration::
      getTitleHelpLabelConfiguration () const
      {
        return this->TitleHelpLabelConfiguration_.get ();
      }

      FunctionalityWizardStateConfiguration::TitleHelpLabelConfigurationType& FunctionalityWizardStateConfiguration::
      getTitleHelpLabelConfiguration ()
      {
        return this->TitleHelpLabelConfiguration_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setTitleHelpLabelConfiguration (const TitleHelpLabelConfigurationType& x)
      {
        this->TitleHelpLabelConfiguration_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setTitleHelpLabelConfiguration (::std::auto_ptr< TitleHelpLabelConfigurationType > x)
      {
        this->TitleHelpLabelConfiguration_.set (x);
      }

      const FunctionalityWizardStateConfiguration::HelpLabelConfigurationType& FunctionalityWizardStateConfiguration::
      getHelpLabelConfiguration () const
      {
        return this->HelpLabelConfiguration_.get ();
      }

      FunctionalityWizardStateConfiguration::HelpLabelConfigurationType& FunctionalityWizardStateConfiguration::
      getHelpLabelConfiguration ()
      {
        return this->HelpLabelConfiguration_.get ();
      }

      void FunctionalityWizardStateConfiguration::
      setHelpLabelConfiguration (const HelpLabelConfigurationType& x)
      {
        this->HelpLabelConfiguration_.set (x);
      }

      void FunctionalityWizardStateConfiguration::
      setHelpLabelConfiguration (::std::auto_ptr< HelpLabelConfigurationType > x)
      {
        this->HelpLabelConfiguration_.set (x);
      }


      // FunctionalityWizardFlowConfiguration
      // 

      const FunctionalityWizardFlowConfiguration::WizardStatesConfigurationSequence& FunctionalityWizardFlowConfiguration::
      getWizardStatesConfiguration () const
      {
        return this->WizardStatesConfiguration_;
      }

      FunctionalityWizardFlowConfiguration::WizardStatesConfigurationSequence& FunctionalityWizardFlowConfiguration::
      getWizardStatesConfiguration ()
      {
        return this->WizardStatesConfiguration_;
      }

      void FunctionalityWizardFlowConfiguration::
      setWizardStatesConfiguration (const WizardStatesConfigurationSequence& s)
      {
        this->WizardStatesConfiguration_ = s;
      }


      // NecessaryDevicesConfiguration
      // 

      const NecessaryDevicesConfiguration::DeviceConfigurationSequence& NecessaryDevicesConfiguration::
      getDeviceConfiguration () const
      {
        return this->DeviceConfiguration_;
      }

      NecessaryDevicesConfiguration::DeviceConfigurationSequence& NecessaryDevicesConfiguration::
      getDeviceConfiguration ()
      {
        return this->DeviceConfiguration_;
      }

      void NecessaryDevicesConfiguration::
      setDeviceConfiguration (const DeviceConfigurationSequence& s)
      {
        this->DeviceConfiguration_ = s;
      }


      // DeviceConfiguration
      // 

      DeviceConfiguration::
      DeviceConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      DeviceConfiguration::
      DeviceConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_DeviceConfiguration_literals_[v])
      {
      }

      DeviceConfiguration::
      DeviceConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DeviceConfiguration::
      DeviceConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DeviceConfiguration::
      DeviceConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      DeviceConfiguration::
      DeviceConfiguration (const DeviceConfiguration& v,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      DeviceConfiguration& DeviceConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_DeviceConfiguration_literals_[v]);

        return *this;
      }


      // MemoryBlock
      // 

      MemoryBlock::
      MemoryBlock ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      MemoryBlock::
      MemoryBlock (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_MemoryBlock_literals_[v])
      {
      }

      MemoryBlock::
      MemoryBlock (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      MemoryBlock::
      MemoryBlock (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      MemoryBlock::
      MemoryBlock (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      MemoryBlock::
      MemoryBlock (const MemoryBlock& v,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      MemoryBlock& MemoryBlock::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_MemoryBlock_literals_[v]);

        return *this;
      }


      // ReferendumConfiguration
      // 

      const ReferendumConfiguration::EnableClickType& ReferendumConfiguration::
      getEnableClick () const
      {
        return this->EnableClick_.get ();
      }

      ReferendumConfiguration::EnableClickType& ReferendumConfiguration::
      getEnableClick ()
      {
        return this->EnableClick_.get ();
      }

      void ReferendumConfiguration::
      setEnableClick (const EnableClickType& x)
      {
        this->EnableClick_.set (x);
      }

      const ReferendumConfiguration::HeaderLabelConfigurationType& ReferendumConfiguration::
      getHeaderLabelConfiguration () const
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      ReferendumConfiguration::HeaderLabelConfigurationType& ReferendumConfiguration::
      getHeaderLabelConfiguration ()
      {
        return this->HeaderLabelConfiguration_.get ();
      }

      void ReferendumConfiguration::
      setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      void ReferendumConfiguration::
      setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > x)
      {
        this->HeaderLabelConfiguration_.set (x);
      }

      const ReferendumConfiguration::BottomLabelConfigurationType& ReferendumConfiguration::
      getBottomLabelConfiguration () const
      {
        return this->BottomLabelConfiguration_.get ();
      }

      ReferendumConfiguration::BottomLabelConfigurationType& ReferendumConfiguration::
      getBottomLabelConfiguration ()
      {
        return this->BottomLabelConfiguration_.get ();
      }

      void ReferendumConfiguration::
      setBottomLabelConfiguration (const BottomLabelConfigurationType& x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      void ReferendumConfiguration::
      setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > x)
      {
        this->BottomLabelConfiguration_.set (x);
      }

      const ReferendumConfiguration::QuestionLabelConfigurationType& ReferendumConfiguration::
      getQuestionLabelConfiguration () const
      {
        return this->QuestionLabelConfiguration_.get ();
      }

      ReferendumConfiguration::QuestionLabelConfigurationType& ReferendumConfiguration::
      getQuestionLabelConfiguration ()
      {
        return this->QuestionLabelConfiguration_.get ();
      }

      void ReferendumConfiguration::
      setQuestionLabelConfiguration (const QuestionLabelConfigurationType& x)
      {
        this->QuestionLabelConfiguration_.set (x);
      }

      void ReferendumConfiguration::
      setQuestionLabelConfiguration (::std::auto_ptr< QuestionLabelConfigurationType > x)
      {
        this->QuestionLabelConfiguration_.set (x);
      }

      const ReferendumConfiguration::BallotsLabelConfigurationType& ReferendumConfiguration::
      getBallotsLabelConfiguration () const
      {
        return this->BallotsLabelConfiguration_.get ();
      }

      ReferendumConfiguration::BallotsLabelConfigurationType& ReferendumConfiguration::
      getBallotsLabelConfiguration ()
      {
        return this->BallotsLabelConfiguration_.get ();
      }

      void ReferendumConfiguration::
      setBallotsLabelConfiguration (const BallotsLabelConfigurationType& x)
      {
        this->BallotsLabelConfiguration_.set (x);
      }

      void ReferendumConfiguration::
      setBallotsLabelConfiguration (::std::auto_ptr< BallotsLabelConfigurationType > x)
      {
        this->BallotsLabelConfiguration_.set (x);
      }

      const ReferendumConfiguration::FrameBottomHeightType& ReferendumConfiguration::
      getFrameBottomHeight () const
      {
        return this->FrameBottomHeight_.get ();
      }

      ReferendumConfiguration::FrameBottomHeightType& ReferendumConfiguration::
      getFrameBottomHeight ()
      {
        return this->FrameBottomHeight_.get ();
      }

      void ReferendumConfiguration::
      setFrameBottomHeight (const FrameBottomHeightType& x)
      {
        this->FrameBottomHeight_.set (x);
      }

      const ReferendumConfiguration::QuestionWidthType& ReferendumConfiguration::
      getQuestionWidth () const
      {
        return this->QuestionWidth_.get ();
      }

      ReferendumConfiguration::QuestionWidthType& ReferendumConfiguration::
      getQuestionWidth ()
      {
        return this->QuestionWidth_.get ();
      }

      void ReferendumConfiguration::
      setQuestionWidth (const QuestionWidthType& x)
      {
        this->QuestionWidth_.set (x);
      }

      const ReferendumConfiguration::QuestionHeightType& ReferendumConfiguration::
      getQuestionHeight () const
      {
        return this->QuestionHeight_.get ();
      }

      ReferendumConfiguration::QuestionHeightType& ReferendumConfiguration::
      getQuestionHeight ()
      {
        return this->QuestionHeight_.get ();
      }

      void ReferendumConfiguration::
      setQuestionHeight (const QuestionHeightType& x)
      {
        this->QuestionHeight_.set (x);
      }

      const ReferendumConfiguration::ButtonsVerticalType& ReferendumConfiguration::
      getButtonsVertical () const
      {
        return this->ButtonsVertical_.get ();
      }

      ReferendumConfiguration::ButtonsVerticalType& ReferendumConfiguration::
      getButtonsVertical ()
      {
        return this->ButtonsVertical_.get ();
      }

      void ReferendumConfiguration::
      setButtonsVertical (const ButtonsVerticalType& x)
      {
        this->ButtonsVertical_.set (x);
      }

      const ReferendumConfiguration::BallotBoxTopPaddingType& ReferendumConfiguration::
      getBallotBoxTopPadding () const
      {
        return this->BallotBoxTopPadding_.get ();
      }

      ReferendumConfiguration::BallotBoxTopPaddingType& ReferendumConfiguration::
      getBallotBoxTopPadding ()
      {
        return this->BallotBoxTopPadding_.get ();
      }

      void ReferendumConfiguration::
      setBallotBoxTopPadding (const BallotBoxTopPaddingType& x)
      {
        this->BallotBoxTopPadding_.set (x);
      }

      const ReferendumConfiguration::BallotBoxLeftPaddingType& ReferendumConfiguration::
      getBallotBoxLeftPadding () const
      {
        return this->BallotBoxLeftPadding_.get ();
      }

      ReferendumConfiguration::BallotBoxLeftPaddingType& ReferendumConfiguration::
      getBallotBoxLeftPadding ()
      {
        return this->BallotBoxLeftPadding_.get ();
      }

      void ReferendumConfiguration::
      setBallotBoxLeftPadding (const BallotBoxLeftPaddingType& x)
      {
        this->BallotBoxLeftPadding_.set (x);
      }

      const ReferendumConfiguration::BallotBoxSpacingType& ReferendumConfiguration::
      getBallotBoxSpacing () const
      {
        return this->BallotBoxSpacing_.get ();
      }

      ReferendumConfiguration::BallotBoxSpacingType& ReferendumConfiguration::
      getBallotBoxSpacing ()
      {
        return this->BallotBoxSpacing_.get ();
      }

      void ReferendumConfiguration::
      setBallotBoxSpacing (const BallotBoxSpacingType& x)
      {
        this->BallotBoxSpacing_.set (x);
      }

      const ReferendumConfiguration::BallotWidthType& ReferendumConfiguration::
      getBallotWidth () const
      {
        return this->BallotWidth_.get ();
      }

      ReferendumConfiguration::BallotWidthType& ReferendumConfiguration::
      getBallotWidth ()
      {
        return this->BallotWidth_.get ();
      }

      void ReferendumConfiguration::
      setBallotWidth (const BallotWidthType& x)
      {
        this->BallotWidth_.set (x);
      }

      const ReferendumConfiguration::BallotHeightType& ReferendumConfiguration::
      getBallotHeight () const
      {
        return this->BallotHeight_.get ();
      }

      ReferendumConfiguration::BallotHeightType& ReferendumConfiguration::
      getBallotHeight ()
      {
        return this->BallotHeight_.get ();
      }

      void ReferendumConfiguration::
      setBallotHeight (const BallotHeightType& x)
      {
        this->BallotHeight_.set (x);
      }

      const ReferendumConfiguration::ShowBackButtonType& ReferendumConfiguration::
      getShowBackButton () const
      {
        return this->ShowBackButton_.get ();
      }

      ReferendumConfiguration::ShowBackButtonType& ReferendumConfiguration::
      getShowBackButton ()
      {
        return this->ShowBackButton_.get ();
      }

      void ReferendumConfiguration::
      setShowBackButton (const ShowBackButtonType& x)
      {
        this->ShowBackButton_.set (x);
      }

      const ReferendumConfiguration::ShowNullOptionType& ReferendumConfiguration::
      getShowNullOption () const
      {
        return this->ShowNullOption_.get ();
      }

      ReferendumConfiguration::ShowNullOptionType& ReferendumConfiguration::
      getShowNullOption ()
      {
        return this->ShowNullOption_.get ();
      }

      void ReferendumConfiguration::
      setShowNullOption (const ShowNullOptionType& x)
      {
        this->ShowNullOption_.set (x);
      }


      // PollingCardConfiguration
      // 

      const PollingCardConfiguration::PMInstallationWindowType& PollingCardConfiguration::
      getPMInstallationWindow () const
      {
        return this->PMInstallationWindow_.get ();
      }

      PollingCardConfiguration::PMInstallationWindowType& PollingCardConfiguration::
      getPMInstallationWindow ()
      {
        return this->PMInstallationWindow_.get ();
      }

      void PollingCardConfiguration::
      setPMInstallationWindow (const PMInstallationWindowType& x)
      {
        this->PMInstallationWindow_.set (x);
      }

      const PollingCardConfiguration::VMInstallationWindowType& PollingCardConfiguration::
      getVMInstallationWindow () const
      {
        return this->VMInstallationWindow_.get ();
      }

      PollingCardConfiguration::VMInstallationWindowType& PollingCardConfiguration::
      getVMInstallationWindow ()
      {
        return this->VMInstallationWindow_.get ();
      }

      void PollingCardConfiguration::
      setVMInstallationWindow (const VMInstallationWindowType& x)
      {
        this->VMInstallationWindow_.set (x);
      }

      const PollingCardConfiguration::VotingExperienceWindowType& PollingCardConfiguration::
      getVotingExperienceWindow () const
      {
        return this->VotingExperienceWindow_.get ();
      }

      PollingCardConfiguration::VotingExperienceWindowType& PollingCardConfiguration::
      getVotingExperienceWindow ()
      {
        return this->VotingExperienceWindow_.get ();
      }

      void PollingCardConfiguration::
      setVotingExperienceWindow (const VotingExperienceWindowType& x)
      {
        this->VotingExperienceWindow_.set (x);
      }

      const PollingCardConfiguration::EndVotingExperienceWindowType& PollingCardConfiguration::
      getEndVotingExperienceWindow () const
      {
        return this->EndVotingExperienceWindow_.get ();
      }

      PollingCardConfiguration::EndVotingExperienceWindowType& PollingCardConfiguration::
      getEndVotingExperienceWindow ()
      {
        return this->EndVotingExperienceWindow_.get ();
      }

      void PollingCardConfiguration::
      setEndVotingExperienceWindow (const EndVotingExperienceWindowType& x)
      {
        this->EndVotingExperienceWindow_.set (x);
      }

      const PollingCardConfiguration::AssistedCardGeneratorFunctionalityType& PollingCardConfiguration::
      getAssistedCardGeneratorFunctionality () const
      {
        return this->AssistedCardGeneratorFunctionality_.get ();
      }

      PollingCardConfiguration::AssistedCardGeneratorFunctionalityType& PollingCardConfiguration::
      getAssistedCardGeneratorFunctionality ()
      {
        return this->AssistedCardGeneratorFunctionality_.get ();
      }

      void PollingCardConfiguration::
      setAssistedCardGeneratorFunctionality (const AssistedCardGeneratorFunctionalityType& x)
      {
        this->AssistedCardGeneratorFunctionality_.set (x);
      }

      const PollingCardConfiguration::CardGeneratorFunctionalityType& PollingCardConfiguration::
      getCardGeneratorFunctionality () const
      {
        return this->CardGeneratorFunctionality_.get ();
      }

      PollingCardConfiguration::CardGeneratorFunctionalityType& PollingCardConfiguration::
      getCardGeneratorFunctionality ()
      {
        return this->CardGeneratorFunctionality_.get ();
      }

      void PollingCardConfiguration::
      setCardGeneratorFunctionality (const CardGeneratorFunctionalityType& x)
      {
        this->CardGeneratorFunctionality_.set (x);
      }

      const PollingCardConfiguration::RecoveryCardGeneratorFunctionalityType& PollingCardConfiguration::
      getRecoveryCardGeneratorFunctionality () const
      {
        return this->RecoveryCardGeneratorFunctionality_.get ();
      }

      PollingCardConfiguration::RecoveryCardGeneratorFunctionalityType& PollingCardConfiguration::
      getRecoveryCardGeneratorFunctionality ()
      {
        return this->RecoveryCardGeneratorFunctionality_.get ();
      }

      void PollingCardConfiguration::
      setRecoveryCardGeneratorFunctionality (const RecoveryCardGeneratorFunctionalityType& x)
      {
        this->RecoveryCardGeneratorFunctionality_.set (x);
      }

      const PollingCardConfiguration::VoteProcessDemoFunctionalityType& PollingCardConfiguration::
      getVoteProcessDemoFunctionality () const
      {
        return this->VoteProcessDemoFunctionality_.get ();
      }

      PollingCardConfiguration::VoteProcessDemoFunctionalityType& PollingCardConfiguration::
      getVoteProcessDemoFunctionality ()
      {
        return this->VoteProcessDemoFunctionality_.get ();
      }

      void PollingCardConfiguration::
      setVoteProcessDemoFunctionality (const VoteProcessDemoFunctionalityType& x)
      {
        this->VoteProcessDemoFunctionality_.set (x);
      }

      const PollingCardConfiguration::BEIDCardWidgetType& PollingCardConfiguration::
      getBEIDCardWidget () const
      {
        return this->BEIDCardWidget_.get ();
      }

      PollingCardConfiguration::BEIDCardWidgetType& PollingCardConfiguration::
      getBEIDCardWidget ()
      {
        return this->BEIDCardWidget_.get ();
      }

      void PollingCardConfiguration::
      setBEIDCardWidget (const BEIDCardWidgetType& x)
      {
        this->BEIDCardWidget_.set (x);
      }

      const PollingCardConfiguration::ActivationStatsWidgetType& PollingCardConfiguration::
      getActivationStatsWidget () const
      {
        return this->ActivationStatsWidget_.get ();
      }

      PollingCardConfiguration::ActivationStatsWidgetType& PollingCardConfiguration::
      getActivationStatsWidget ()
      {
        return this->ActivationStatsWidget_.get ();
      }

      void PollingCardConfiguration::
      setActivationStatsWidget (const ActivationStatsWidgetType& x)
      {
        this->ActivationStatsWidget_.set (x);
      }

      const PollingCardConfiguration::WaitingCardWidgetType& PollingCardConfiguration::
      getWaitingCardWidget () const
      {
        return this->WaitingCardWidget_.get ();
      }

      PollingCardConfiguration::WaitingCardWidgetType& PollingCardConfiguration::
      getWaitingCardWidget ()
      {
        return this->WaitingCardWidget_.get ();
      }

      void PollingCardConfiguration::
      setWaitingCardWidget (const WaitingCardWidgetType& x)
      {
        this->WaitingCardWidget_.set (x);
      }

      const PollingCardConfiguration::SmartCardReaderDiagnosisWidgetType& PollingCardConfiguration::
      getSmartCardReaderDiagnosisWidget () const
      {
        return this->SmartCardReaderDiagnosisWidget_.get ();
      }

      PollingCardConfiguration::SmartCardReaderDiagnosisWidgetType& PollingCardConfiguration::
      getSmartCardReaderDiagnosisWidget ()
      {
        return this->SmartCardReaderDiagnosisWidget_.get ();
      }

      void PollingCardConfiguration::
      setSmartCardReaderDiagnosisWidget (const SmartCardReaderDiagnosisWidgetType& x)
      {
        this->SmartCardReaderDiagnosisWidget_.set (x);
      }

      const PollingCardConfiguration::VotingMachineInstallationWidgetInsertType& PollingCardConfiguration::
      getVotingMachineInstallationWidgetInsert () const
      {
        return this->VotingMachineInstallationWidgetInsert_.get ();
      }

      PollingCardConfiguration::VotingMachineInstallationWidgetInsertType& PollingCardConfiguration::
      getVotingMachineInstallationWidgetInsert ()
      {
        return this->VotingMachineInstallationWidgetInsert_.get ();
      }

      void PollingCardConfiguration::
      setVotingMachineInstallationWidgetInsert (const VotingMachineInstallationWidgetInsertType& x)
      {
        this->VotingMachineInstallationWidgetInsert_.set (x);
      }

      const PollingCardConfiguration::VotingMachineInstallationWidgetExtractType& PollingCardConfiguration::
      getVotingMachineInstallationWidgetExtract () const
      {
        return this->VotingMachineInstallationWidgetExtract_.get ();
      }

      PollingCardConfiguration::VotingMachineInstallationWidgetExtractType& PollingCardConfiguration::
      getVotingMachineInstallationWidgetExtract ()
      {
        return this->VotingMachineInstallationWidgetExtract_.get ();
      }

      void PollingCardConfiguration::
      setVotingMachineInstallationWidgetExtract (const VotingMachineInstallationWidgetExtractType& x)
      {
        this->VotingMachineInstallationWidgetExtract_.set (x);
      }


      // AlarmBoxMonitorConfiguration
      // 

      const AlarmBoxMonitorConfiguration::EnableType& AlarmBoxMonitorConfiguration::
      getEnable () const
      {
        return this->Enable_.get ();
      }

      AlarmBoxMonitorConfiguration::EnableType& AlarmBoxMonitorConfiguration::
      getEnable ()
      {
        return this->Enable_.get ();
      }

      void AlarmBoxMonitorConfiguration::
      setEnable (const EnableType& x)
      {
        this->Enable_.set (x);
      }

      const AlarmBoxMonitorConfiguration::MonitoringTimeType& AlarmBoxMonitorConfiguration::
      getMonitoringTime () const
      {
        return this->MonitoringTime_.get ();
      }

      AlarmBoxMonitorConfiguration::MonitoringTimeType& AlarmBoxMonitorConfiguration::
      getMonitoringTime ()
      {
        return this->MonitoringTime_.get ();
      }

      void AlarmBoxMonitorConfiguration::
      setMonitoringTime (const MonitoringTimeType& x)
      {
        this->MonitoringTime_.set (x);
      }

      const AlarmBoxMonitorConfiguration::SearchTimeType& AlarmBoxMonitorConfiguration::
      getSearchTime () const
      {
        return this->SearchTime_.get ();
      }

      AlarmBoxMonitorConfiguration::SearchTimeType& AlarmBoxMonitorConfiguration::
      getSearchTime ()
      {
        return this->SearchTime_.get ();
      }

      void AlarmBoxMonitorConfiguration::
      setSearchTime (const SearchTimeType& x)
      {
        this->SearchTime_.set (x);
      }


      // PreviewLanguageConfig
      // 

      PreviewLanguageConfig::
      PreviewLanguageConfig ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_PreviewLanguageConfig_literals_[v])
      {
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (const PreviewLanguageConfig& v,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      PreviewLanguageConfig& PreviewLanguageConfig::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_PreviewLanguageConfig_literals_[v]);

        return *this;
      }


      // EntryDividedWidgetConfiguration
      // 

      const EntryDividedWidgetConfiguration::NumberOfDivisionType& EntryDividedWidgetConfiguration::
      getNumberOfDivision () const
      {
        return this->NumberOfDivision_.get ();
      }

      EntryDividedWidgetConfiguration::NumberOfDivisionType& EntryDividedWidgetConfiguration::
      getNumberOfDivision ()
      {
        return this->NumberOfDivision_.get ();
      }

      void EntryDividedWidgetConfiguration::
      setNumberOfDivision (const NumberOfDivisionType& x)
      {
        this->NumberOfDivision_.set (x);
      }

      const EntryDividedWidgetConfiguration::MaxCharactersType& EntryDividedWidgetConfiguration::
      getMaxCharacters () const
      {
        return this->MaxCharacters_.get ();
      }

      EntryDividedWidgetConfiguration::MaxCharactersType& EntryDividedWidgetConfiguration::
      getMaxCharacters ()
      {
        return this->MaxCharacters_.get ();
      }

      void EntryDividedWidgetConfiguration::
      setMaxCharacters (const MaxCharactersType& x)
      {
        this->MaxCharacters_.set (x);
      }

      const EntryDividedWidgetConfiguration::EntryWidthType& EntryDividedWidgetConfiguration::
      getEntryWidth () const
      {
        return this->EntryWidth_.get ();
      }

      EntryDividedWidgetConfiguration::EntryWidthType& EntryDividedWidgetConfiguration::
      getEntryWidth ()
      {
        return this->EntryWidth_.get ();
      }

      void EntryDividedWidgetConfiguration::
      setEntryWidth (const EntryWidthType& x)
      {
        this->EntryWidth_.set (x);
      }

      const EntryDividedWidgetConfiguration::VisibilityType& EntryDividedWidgetConfiguration::
      getVisibility () const
      {
        return this->Visibility_.get ();
      }

      EntryDividedWidgetConfiguration::VisibilityType& EntryDividedWidgetConfiguration::
      getVisibility ()
      {
        return this->Visibility_.get ();
      }

      void EntryDividedWidgetConfiguration::
      setVisibility (const VisibilityType& x)
      {
        this->Visibility_.set (x);
      }


      // CountConfiguration
      // 

      const CountConfiguration::CountTypeSequence& CountConfiguration::
      getCountType () const
      {
        return this->CountType_;
      }

      CountConfiguration::CountTypeSequence& CountConfiguration::
      getCountType ()
      {
        return this->CountType_;
      }

      void CountConfiguration::
      setCountType (const CountTypeSequence& s)
      {
        this->CountType_ = s;
      }


      // CountTypeConfig
      // 

      CountTypeConfig::
      CountTypeConfig ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      CountTypeConfig::
      CountTypeConfig (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_CountTypeConfig_literals_[v])
      {
      }

      CountTypeConfig::
      CountTypeConfig (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CountTypeConfig::
      CountTypeConfig (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CountTypeConfig::
      CountTypeConfig (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CountTypeConfig::
      CountTypeConfig (const CountTypeConfig& v,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      CountTypeConfig& CountTypeConfig::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_CountTypeConfig_literals_[v]);

        return *this;
      }


      // StartConfiguration
      // 

      const StartConfiguration::LoadSelectionLanguageType& StartConfiguration::
      getLoadSelectionLanguage () const
      {
        return this->LoadSelectionLanguage_.get ();
      }

      StartConfiguration::LoadSelectionLanguageType& StartConfiguration::
      getLoadSelectionLanguage ()
      {
        return this->LoadSelectionLanguage_.get ();
      }

      void StartConfiguration::
      setLoadSelectionLanguage (const LoadSelectionLanguageType& x)
      {
        this->LoadSelectionLanguage_.set (x);
      }

      const StartConfiguration::PersistLanguageType& StartConfiguration::
      getPersistLanguage () const
      {
        return this->PersistLanguage_.get ();
      }

      StartConfiguration::PersistLanguageType& StartConfiguration::
      getPersistLanguage ()
      {
        return this->PersistLanguage_.get ();
      }

      void StartConfiguration::
      setPersistLanguage (const PersistLanguageType& x)
      {
        this->PersistLanguage_.set (x);
      }

      const StartConfiguration::InfoMachineType& StartConfiguration::
      getInfoMachine () const
      {
        return this->InfoMachine_.get ();
      }

      StartConfiguration::InfoMachineType& StartConfiguration::
      getInfoMachine ()
      {
        return this->InfoMachine_.get ();
      }

      void StartConfiguration::
      setInfoMachine (const InfoMachineType& x)
      {
        this->InfoMachine_.set (x);
      }

      void StartConfiguration::
      setInfoMachine (::std::auto_ptr< InfoMachineType > x)
      {
        this->InfoMachine_.set (x);
      }


      // BEIDCardWidgetConfiguration
      // 

      const BEIDCardWidgetConfiguration::TitleErrorFontConfType& BEIDCardWidgetConfiguration::
      getTitleErrorFontConf () const
      {
        return this->TitleErrorFontConf_.get ();
      }

      BEIDCardWidgetConfiguration::TitleErrorFontConfType& BEIDCardWidgetConfiguration::
      getTitleErrorFontConf ()
      {
        return this->TitleErrorFontConf_.get ();
      }

      void BEIDCardWidgetConfiguration::
      setTitleErrorFontConf (const TitleErrorFontConfType& x)
      {
        this->TitleErrorFontConf_.set (x);
      }

      void BEIDCardWidgetConfiguration::
      setTitleErrorFontConf (::std::auto_ptr< TitleErrorFontConfType > x)
      {
        this->TitleErrorFontConf_.set (x);
      }

      const BEIDCardWidgetConfiguration::TextErrorFontConfType& BEIDCardWidgetConfiguration::
      getTextErrorFontConf () const
      {
        return this->TextErrorFontConf_.get ();
      }

      BEIDCardWidgetConfiguration::TextErrorFontConfType& BEIDCardWidgetConfiguration::
      getTextErrorFontConf ()
      {
        return this->TextErrorFontConf_.get ();
      }

      void BEIDCardWidgetConfiguration::
      setTextErrorFontConf (const TextErrorFontConfType& x)
      {
        this->TextErrorFontConf_.set (x);
      }

      void BEIDCardWidgetConfiguration::
      setTextErrorFontConf (::std::auto_ptr< TextErrorFontConfType > x)
      {
        this->TextErrorFontConf_.set (x);
      }

      const BEIDCardWidgetConfiguration::TimeoutErrorType& BEIDCardWidgetConfiguration::
      getTimeoutError () const
      {
        return this->TimeoutError_.get ();
      }

      BEIDCardWidgetConfiguration::TimeoutErrorType& BEIDCardWidgetConfiguration::
      getTimeoutError ()
      {
        return this->TimeoutError_.get ();
      }

      void BEIDCardWidgetConfiguration::
      setTimeoutError (const TimeoutErrorType& x)
      {
        this->TimeoutError_.set (x);
      }


      // IDCardProcessConfiguration
      // 

      const IDCardProcessConfiguration::PMInstallType& IDCardProcessConfiguration::
      getPMInstall () const
      {
        return this->PMInstall_.get ();
      }

      IDCardProcessConfiguration::PMInstallType& IDCardProcessConfiguration::
      getPMInstall ()
      {
        return this->PMInstall_.get ();
      }

      void IDCardProcessConfiguration::
      setPMInstall (const PMInstallType& x)
      {
        this->PMInstall_.set (x);
      }

      void IDCardProcessConfiguration::
      setPMInstall (::std::auto_ptr< PMInstallType > x)
      {
        this->PMInstall_.set (x);
      }

      const IDCardProcessConfiguration::VMInstallType& IDCardProcessConfiguration::
      getVMInstall () const
      {
        return this->VMInstall_.get ();
      }

      IDCardProcessConfiguration::VMInstallType& IDCardProcessConfiguration::
      getVMInstall ()
      {
        return this->VMInstall_.get ();
      }

      void IDCardProcessConfiguration::
      setVMInstall (const VMInstallType& x)
      {
        this->VMInstall_.set (x);
      }

      void IDCardProcessConfiguration::
      setVMInstall (::std::auto_ptr< VMInstallType > x)
      {
        this->VMInstall_.set (x);
      }

      const IDCardProcessConfiguration::OpenElectionType& IDCardProcessConfiguration::
      getOpenElection () const
      {
        return this->OpenElection_.get ();
      }

      IDCardProcessConfiguration::OpenElectionType& IDCardProcessConfiguration::
      getOpenElection ()
      {
        return this->OpenElection_.get ();
      }

      void IDCardProcessConfiguration::
      setOpenElection (const OpenElectionType& x)
      {
        this->OpenElection_.set (x);
      }

      void IDCardProcessConfiguration::
      setOpenElection (::std::auto_ptr< OpenElectionType > x)
      {
        this->OpenElection_.set (x);
      }

      const IDCardProcessConfiguration::CloseVotationType& IDCardProcessConfiguration::
      getCloseVotation () const
      {
        return this->CloseVotation_.get ();
      }

      IDCardProcessConfiguration::CloseVotationType& IDCardProcessConfiguration::
      getCloseVotation ()
      {
        return this->CloseVotation_.get ();
      }

      void IDCardProcessConfiguration::
      setCloseVotation (const CloseVotationType& x)
      {
        this->CloseVotation_.set (x);
      }

      void IDCardProcessConfiguration::
      setCloseVotation (::std::auto_ptr< CloseVotationType > x)
      {
        this->CloseVotation_.set (x);
      }

      const IDCardProcessConfiguration::CloseElectionType& IDCardProcessConfiguration::
      getCloseElection () const
      {
        return this->CloseElection_.get ();
      }

      IDCardProcessConfiguration::CloseElectionType& IDCardProcessConfiguration::
      getCloseElection ()
      {
        return this->CloseElection_.get ();
      }

      void IDCardProcessConfiguration::
      setCloseElection (const CloseElectionType& x)
      {
        this->CloseElection_.set (x);
      }

      void IDCardProcessConfiguration::
      setCloseElection (::std::auto_ptr< CloseElectionType > x)
      {
        this->CloseElection_.set (x);
      }

      const IDCardProcessConfiguration::CloseNoteRegisterType& IDCardProcessConfiguration::
      getCloseNoteRegister () const
      {
        return this->CloseNoteRegister_.get ();
      }

      IDCardProcessConfiguration::CloseNoteRegisterType& IDCardProcessConfiguration::
      getCloseNoteRegister ()
      {
        return this->CloseNoteRegister_.get ();
      }

      void IDCardProcessConfiguration::
      setCloseNoteRegister (const CloseNoteRegisterType& x)
      {
        this->CloseNoteRegister_.set (x);
      }

      void IDCardProcessConfiguration::
      setCloseNoteRegister (::std::auto_ptr< CloseNoteRegisterType > x)
      {
        this->CloseNoteRegister_.set (x);
      }

      const IDCardProcessConfiguration::IncidentReportType& IDCardProcessConfiguration::
      getIncidentReport () const
      {
        return this->IncidentReport_.get ();
      }

      IDCardProcessConfiguration::IncidentReportType& IDCardProcessConfiguration::
      getIncidentReport ()
      {
        return this->IncidentReport_.get ();
      }

      void IDCardProcessConfiguration::
      setIncidentReport (const IncidentReportType& x)
      {
        this->IncidentReport_.set (x);
      }

      void IDCardProcessConfiguration::
      setIncidentReport (::std::auto_ptr< IncidentReportType > x)
      {
        this->IncidentReport_.set (x);
      }

      const IDCardProcessConfiguration::AssistedActivationType& IDCardProcessConfiguration::
      getAssistedActivation () const
      {
        return this->AssistedActivation_.get ();
      }

      IDCardProcessConfiguration::AssistedActivationType& IDCardProcessConfiguration::
      getAssistedActivation ()
      {
        return this->AssistedActivation_.get ();
      }

      void IDCardProcessConfiguration::
      setAssistedActivation (const AssistedActivationType& x)
      {
        this->AssistedActivation_.set (x);
      }

      void IDCardProcessConfiguration::
      setAssistedActivation (::std::auto_ptr< AssistedActivationType > x)
      {
        this->AssistedActivation_.set (x);
      }

      const IDCardProcessConfiguration::DisabledVoterType& IDCardProcessConfiguration::
      getDisabledVoter () const
      {
        return this->DisabledVoter_.get ();
      }

      IDCardProcessConfiguration::DisabledVoterType& IDCardProcessConfiguration::
      getDisabledVoter ()
      {
        return this->DisabledVoter_.get ();
      }

      void IDCardProcessConfiguration::
      setDisabledVoter (const DisabledVoterType& x)
      {
        this->DisabledVoter_.set (x);
      }

      void IDCardProcessConfiguration::
      setDisabledVoter (::std::auto_ptr< DisabledVoterType > x)
      {
        this->DisabledVoter_.set (x);
      }

      const IDCardProcessConfiguration::DisabledVoterHelperType& IDCardProcessConfiguration::
      getDisabledVoterHelper () const
      {
        return this->DisabledVoterHelper_.get ();
      }

      IDCardProcessConfiguration::DisabledVoterHelperType& IDCardProcessConfiguration::
      getDisabledVoterHelper ()
      {
        return this->DisabledVoterHelper_.get ();
      }

      void IDCardProcessConfiguration::
      setDisabledVoterHelper (const DisabledVoterHelperType& x)
      {
        this->DisabledVoterHelper_.set (x);
      }

      void IDCardProcessConfiguration::
      setDisabledVoterHelper (::std::auto_ptr< DisabledVoterHelperType > x)
      {
        this->DisabledVoterHelper_.set (x);
      }

      const IDCardProcessConfiguration::PoliceNoteType& IDCardProcessConfiguration::
      getPoliceNote () const
      {
        return this->PoliceNote_.get ();
      }

      IDCardProcessConfiguration::PoliceNoteType& IDCardProcessConfiguration::
      getPoliceNote ()
      {
        return this->PoliceNote_.get ();
      }

      void IDCardProcessConfiguration::
      setPoliceNote (const PoliceNoteType& x)
      {
        this->PoliceNote_.set (x);
      }

      void IDCardProcessConfiguration::
      setPoliceNote (::std::auto_ptr< PoliceNoteType > x)
      {
        this->PoliceNote_.set (x);
      }


      // PollWorkerRegisterConfiguration
      // 

      const PollWorkerRegisterConfiguration::WorkerMemberTypeType& PollWorkerRegisterConfiguration::
      getWorkerMemberType () const
      {
        return this->WorkerMemberType_.get ();
      }

      PollWorkerRegisterConfiguration::WorkerMemberTypeType& PollWorkerRegisterConfiguration::
      getWorkerMemberType ()
      {
        return this->WorkerMemberType_.get ();
      }

      void PollWorkerRegisterConfiguration::
      setWorkerMemberType (const WorkerMemberTypeType& x)
      {
        this->WorkerMemberType_.set (x);
      }

      void PollWorkerRegisterConfiguration::
      setWorkerMemberType (::std::auto_ptr< WorkerMemberTypeType > x)
      {
        this->WorkerMemberType_.set (x);
      }

      const PollWorkerRegisterConfiguration::RegisterMaxType& PollWorkerRegisterConfiguration::
      getRegisterMax () const
      {
        return this->RegisterMax_.get ();
      }

      PollWorkerRegisterConfiguration::RegisterMaxType& PollWorkerRegisterConfiguration::
      getRegisterMax ()
      {
        return this->RegisterMax_.get ();
      }

      void PollWorkerRegisterConfiguration::
      setRegisterMax (const RegisterMaxType& x)
      {
        this->RegisterMax_.set (x);
      }

      const PollWorkerRegisterConfiguration::RegisterRequiredType& PollWorkerRegisterConfiguration::
      getRegisterRequired () const
      {
        return this->RegisterRequired_.get ();
      }

      PollWorkerRegisterConfiguration::RegisterRequiredType& PollWorkerRegisterConfiguration::
      getRegisterRequired ()
      {
        return this->RegisterRequired_.get ();
      }

      void PollWorkerRegisterConfiguration::
      setRegisterRequired (const RegisterRequiredType& x)
      {
        this->RegisterRequired_.set (x);
      }

      const PollWorkerRegisterConfiguration::IDConfigType& PollWorkerRegisterConfiguration::
      getIDConfig () const
      {
        return this->IDConfig_.get ();
      }

      PollWorkerRegisterConfiguration::IDConfigType& PollWorkerRegisterConfiguration::
      getIDConfig ()
      {
        return this->IDConfig_.get ();
      }

      void PollWorkerRegisterConfiguration::
      setIDConfig (const IDConfigType& x)
      {
        this->IDConfig_.set (x);
      }

      void PollWorkerRegisterConfiguration::
      setIDConfig (::std::auto_ptr< IDConfigType > x)
      {
        this->IDConfig_.set (x);
      }


      // IDConfig
      // 

      const IDConfig::NameOptional& IDConfig::
      getName () const
      {
        return this->Name_;
      }

      IDConfig::NameOptional& IDConfig::
      getName ()
      {
        return this->Name_;
      }

      void IDConfig::
      setName (const NameType& x)
      {
        this->Name_.set (x);
      }

      void IDConfig::
      setName (const NameOptional& x)
      {
        this->Name_ = x;
      }

      void IDConfig::
      setName (::std::auto_ptr< NameType > x)
      {
        this->Name_.set (x);
      }

      const IDConfig::LastNameOptional& IDConfig::
      getLastName () const
      {
        return this->LastName_;
      }

      IDConfig::LastNameOptional& IDConfig::
      getLastName ()
      {
        return this->LastName_;
      }

      void IDConfig::
      setLastName (const LastNameType& x)
      {
        this->LastName_.set (x);
      }

      void IDConfig::
      setLastName (const LastNameOptional& x)
      {
        this->LastName_ = x;
      }

      void IDConfig::
      setLastName (::std::auto_ptr< LastNameType > x)
      {
        this->LastName_.set (x);
      }

      const IDConfig::IDNumberOptional& IDConfig::
      getIDNumber () const
      {
        return this->IDNumber_;
      }

      IDConfig::IDNumberOptional& IDConfig::
      getIDNumber ()
      {
        return this->IDNumber_;
      }

      void IDConfig::
      setIDNumber (const IDNumberType& x)
      {
        this->IDNumber_.set (x);
      }

      void IDConfig::
      setIDNumber (const IDNumberOptional& x)
      {
        this->IDNumber_ = x;
      }

      void IDConfig::
      setIDNumber (::std::auto_ptr< IDNumberType > x)
      {
        this->IDNumber_.set (x);
      }

      const IDConfig::GenderOptional& IDConfig::
      getGender () const
      {
        return this->Gender_;
      }

      IDConfig::GenderOptional& IDConfig::
      getGender ()
      {
        return this->Gender_;
      }

      void IDConfig::
      setGender (const GenderType& x)
      {
        this->Gender_.set (x);
      }

      void IDConfig::
      setGender (const GenderOptional& x)
      {
        this->Gender_ = x;
      }

      void IDConfig::
      setGender (::std::auto_ptr< GenderType > x)
      {
        this->Gender_.set (x);
      }

      const IDConfig::NationalityOptional& IDConfig::
      getNationality () const
      {
        return this->Nationality_;
      }

      IDConfig::NationalityOptional& IDConfig::
      getNationality ()
      {
        return this->Nationality_;
      }

      void IDConfig::
      setNationality (const NationalityType& x)
      {
        this->Nationality_.set (x);
      }

      void IDConfig::
      setNationality (const NationalityOptional& x)
      {
        this->Nationality_ = x;
      }

      void IDConfig::
      setNationality (::std::auto_ptr< NationalityType > x)
      {
        this->Nationality_.set (x);
      }

      const IDConfig::NationalityNumberOptional& IDConfig::
      getNationalityNumber () const
      {
        return this->NationalityNumber_;
      }

      IDConfig::NationalityNumberOptional& IDConfig::
      getNationalityNumber ()
      {
        return this->NationalityNumber_;
      }

      void IDConfig::
      setNationalityNumber (const NationalityNumberType& x)
      {
        this->NationalityNumber_.set (x);
      }

      void IDConfig::
      setNationalityNumber (const NationalityNumberOptional& x)
      {
        this->NationalityNumber_ = x;
      }

      void IDConfig::
      setNationalityNumber (::std::auto_ptr< NationalityNumberType > x)
      {
        this->NationalityNumber_.set (x);
      }

      const IDConfig::AccountOptional& IDConfig::
      getAccount () const
      {
        return this->Account_;
      }

      IDConfig::AccountOptional& IDConfig::
      getAccount ()
      {
        return this->Account_;
      }

      void IDConfig::
      setAccount (const AccountType& x)
      {
        this->Account_.set (x);
      }

      void IDConfig::
      setAccount (const AccountOptional& x)
      {
        this->Account_ = x;
      }

      void IDConfig::
      setAccount (::std::auto_ptr< AccountType > x)
      {
        this->Account_.set (x);
      }

      const IDConfig::PartyOptional& IDConfig::
      getParty () const
      {
        return this->Party_;
      }

      IDConfig::PartyOptional& IDConfig::
      getParty ()
      {
        return this->Party_;
      }

      void IDConfig::
      setParty (const PartyType& x)
      {
        this->Party_.set (x);
      }

      void IDConfig::
      setParty (const PartyOptional& x)
      {
        this->Party_ = x;
      }

      void IDConfig::
      setParty (::std::auto_ptr< PartyType > x)
      {
        this->Party_.set (x);
      }

      const IDConfig::PhoneOptional& IDConfig::
      getPhone () const
      {
        return this->Phone_;
      }

      IDConfig::PhoneOptional& IDConfig::
      getPhone ()
      {
        return this->Phone_;
      }

      void IDConfig::
      setPhone (const PhoneType& x)
      {
        this->Phone_.set (x);
      }

      void IDConfig::
      setPhone (const PhoneOptional& x)
      {
        this->Phone_ = x;
      }

      void IDConfig::
      setPhone (::std::auto_ptr< PhoneType > x)
      {
        this->Phone_.set (x);
      }

      const IDConfig::AllDayOptional& IDConfig::
      getAllDay () const
      {
        return this->AllDay_;
      }

      IDConfig::AllDayOptional& IDConfig::
      getAllDay ()
      {
        return this->AllDay_;
      }

      void IDConfig::
      setAllDay (const AllDayType& x)
      {
        this->AllDay_.set (x);
      }

      void IDConfig::
      setAllDay (const AllDayOptional& x)
      {
        this->AllDay_ = x;
      }

      void IDConfig::
      setAllDay (::std::auto_ptr< AllDayType > x)
      {
        this->AllDay_.set (x);
      }

      const IDConfig::InfoDeputyOptional& IDConfig::
      getInfoDeputy () const
      {
        return this->InfoDeputy_;
      }

      IDConfig::InfoDeputyOptional& IDConfig::
      getInfoDeputy ()
      {
        return this->InfoDeputy_;
      }

      void IDConfig::
      setInfoDeputy (const InfoDeputyType& x)
      {
        this->InfoDeputy_.set (x);
      }

      void IDConfig::
      setInfoDeputy (const InfoDeputyOptional& x)
      {
        this->InfoDeputy_ = x;
      }

      void IDConfig::
      setInfoDeputy (::std::auto_ptr< InfoDeputyType > x)
      {
        this->InfoDeputy_.set (x);
      }

      const IDConfig::BureauAssignedOptional& IDConfig::
      getBureauAssigned () const
      {
        return this->BureauAssigned_;
      }

      IDConfig::BureauAssignedOptional& IDConfig::
      getBureauAssigned ()
      {
        return this->BureauAssigned_;
      }

      void IDConfig::
      setBureauAssigned (const BureauAssignedType& x)
      {
        this->BureauAssigned_.set (x);
      }

      void IDConfig::
      setBureauAssigned (const BureauAssignedOptional& x)
      {
        this->BureauAssigned_ = x;
      }

      void IDConfig::
      setBureauAssigned (::std::auto_ptr< BureauAssignedType > x)
      {
        this->BureauAssigned_.set (x);
      }


      // IDProperties
      // 

      const IDProperties::MandatoryType& IDProperties::
      getMandatory () const
      {
        return this->Mandatory_.get ();
      }

      IDProperties::MandatoryType& IDProperties::
      getMandatory ()
      {
        return this->Mandatory_.get ();
      }

      void IDProperties::
      setMandatory (const MandatoryType& x)
      {
        this->Mandatory_.set (x);
      }

      const IDProperties::TypeOptional& IDProperties::
      getType () const
      {
        return this->Type_;
      }

      IDProperties::TypeOptional& IDProperties::
      getType ()
      {
        return this->Type_;
      }

      void IDProperties::
      setType (const TypeType& x)
      {
        this->Type_.set (x);
      }

      void IDProperties::
      setType (const TypeOptional& x)
      {
        this->Type_ = x;
      }

      void IDProperties::
      setType (::std::auto_ptr< TypeType > x)
      {
        this->Type_.set (x);
      }

      const IDProperties::MaxOptional& IDProperties::
      getMax () const
      {
        return this->Max_;
      }

      IDProperties::MaxOptional& IDProperties::
      getMax ()
      {
        return this->Max_;
      }

      void IDProperties::
      setMax (const MaxType& x)
      {
        this->Max_.set (x);
      }

      void IDProperties::
      setMax (const MaxOptional& x)
      {
        this->Max_ = x;
      }

      const IDProperties::MaskOptional& IDProperties::
      getMask () const
      {
        return this->Mask_;
      }

      IDProperties::MaskOptional& IDProperties::
      getMask ()
      {
        return this->Mask_;
      }

      void IDProperties::
      setMask (const MaskType& x)
      {
        this->Mask_.set (x);
      }

      void IDProperties::
      setMask (const MaskOptional& x)
      {
        this->Mask_ = x;
      }

      void IDProperties::
      setMask (::std::auto_ptr< MaskType > x)
      {
        this->Mask_.set (x);
      }

      const IDProperties::RegexOptional& IDProperties::
      getRegex () const
      {
        return this->Regex_;
      }

      IDProperties::RegexOptional& IDProperties::
      getRegex ()
      {
        return this->Regex_;
      }

      void IDProperties::
      setRegex (const RegexType& x)
      {
        this->Regex_.set (x);
      }

      void IDProperties::
      setRegex (const RegexOptional& x)
      {
        this->Regex_ = x;
      }

      void IDProperties::
      setRegex (::std::auto_ptr< RegexType > x)
      {
        this->Regex_.set (x);
      }


      // RegisterWidgetConfiguration
      // 

      const RegisterWidgetConfiguration::VerticalFillingType& RegisterWidgetConfiguration::
      getVerticalFilling () const
      {
        return this->VerticalFilling_.get ();
      }

      RegisterWidgetConfiguration::VerticalFillingType& RegisterWidgetConfiguration::
      getVerticalFilling ()
      {
        return this->VerticalFilling_.get ();
      }

      void RegisterWidgetConfiguration::
      setVerticalFilling (const VerticalFillingType& x)
      {
        this->VerticalFilling_.set (x);
      }

      const RegisterWidgetConfiguration::MaxColumnType& RegisterWidgetConfiguration::
      getMaxColumn () const
      {
        return this->MaxColumn_.get ();
      }

      RegisterWidgetConfiguration::MaxColumnType& RegisterWidgetConfiguration::
      getMaxColumn ()
      {
        return this->MaxColumn_.get ();
      }

      void RegisterWidgetConfiguration::
      setMaxColumn (const MaxColumnType& x)
      {
        this->MaxColumn_.set (x);
      }

      const RegisterWidgetConfiguration::MaxRowType& RegisterWidgetConfiguration::
      getMaxRow () const
      {
        return this->MaxRow_.get ();
      }

      RegisterWidgetConfiguration::MaxRowType& RegisterWidgetConfiguration::
      getMaxRow ()
      {
        return this->MaxRow_.get ();
      }

      void RegisterWidgetConfiguration::
      setMaxRow (const MaxRowType& x)
      {
        this->MaxRow_.set (x);
      }

      const RegisterWidgetConfiguration::WidthBoxType& RegisterWidgetConfiguration::
      getWidthBox () const
      {
        return this->WidthBox_.get ();
      }

      RegisterWidgetConfiguration::WidthBoxType& RegisterWidgetConfiguration::
      getWidthBox ()
      {
        return this->WidthBox_.get ();
      }

      void RegisterWidgetConfiguration::
      setWidthBox (const WidthBoxType& x)
      {
        this->WidthBox_.set (x);
      }

      const RegisterWidgetConfiguration::HeigthBoxType& RegisterWidgetConfiguration::
      getHeigthBox () const
      {
        return this->HeigthBox_.get ();
      }

      RegisterWidgetConfiguration::HeigthBoxType& RegisterWidgetConfiguration::
      getHeigthBox ()
      {
        return this->HeigthBox_.get ();
      }

      void RegisterWidgetConfiguration::
      setHeigthBox (const HeigthBoxType& x)
      {
        this->HeigthBox_.set (x);
      }

      const RegisterWidgetConfiguration::SpacingBoxType& RegisterWidgetConfiguration::
      getSpacingBox () const
      {
        return this->SpacingBox_.get ();
      }

      RegisterWidgetConfiguration::SpacingBoxType& RegisterWidgetConfiguration::
      getSpacingBox ()
      {
        return this->SpacingBox_.get ();
      }

      void RegisterWidgetConfiguration::
      setSpacingBox (const SpacingBoxType& x)
      {
        this->SpacingBox_.set (x);
      }

      const RegisterWidgetConfiguration::ShowHeaderType& RegisterWidgetConfiguration::
      getShowHeader () const
      {
        return this->ShowHeader_.get ();
      }

      RegisterWidgetConfiguration::ShowHeaderType& RegisterWidgetConfiguration::
      getShowHeader ()
      {
        return this->ShowHeader_.get ();
      }

      void RegisterWidgetConfiguration::
      setShowHeader (const ShowHeaderType& x)
      {
        this->ShowHeader_.set (x);
      }

      const RegisterWidgetConfiguration::ShowCenterType& RegisterWidgetConfiguration::
      getShowCenter () const
      {
        return this->ShowCenter_.get ();
      }

      RegisterWidgetConfiguration::ShowCenterType& RegisterWidgetConfiguration::
      getShowCenter ()
      {
        return this->ShowCenter_.get ();
      }

      void RegisterWidgetConfiguration::
      setShowCenter (const ShowCenterType& x)
      {
        this->ShowCenter_.set (x);
      }

      const RegisterWidgetConfiguration::ShowBottomType& RegisterWidgetConfiguration::
      getShowBottom () const
      {
        return this->ShowBottom_.get ();
      }

      RegisterWidgetConfiguration::ShowBottomType& RegisterWidgetConfiguration::
      getShowBottom ()
      {
        return this->ShowBottom_.get ();
      }

      void RegisterWidgetConfiguration::
      setShowBottom (const ShowBottomType& x)
      {
        this->ShowBottom_.set (x);
      }


      // ElementType
      // 

      ElementType::
      ElementType ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      ElementType::
      ElementType (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_ElementType_literals_[v])
      {
      }

      ElementType::
      ElementType (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ElementType::
      ElementType (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ElementType::
      ElementType (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ElementType::
      ElementType (const ElementType& v,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      ElementType& ElementType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_ElementType_literals_[v]);

        return *this;
      }


      // InfoMachineConfiguration
      // 

      InfoMachineConfiguration::
      InfoMachineConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_InfoMachineConfiguration_literals_[v])
      {
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (const InfoMachineConfiguration& v,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      InfoMachineConfiguration& InfoMachineConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_InfoMachineConfiguration_literals_[v]);

        return *this;
      }


      // SmartCardReaderDiagnosisConfiguration
      // 

      const SmartCardReaderDiagnosisConfiguration::TimeoutToFailType& SmartCardReaderDiagnosisConfiguration::
      getTimeoutToFail () const
      {
        return this->TimeoutToFail_.get ();
      }

      SmartCardReaderDiagnosisConfiguration::TimeoutToFailType& SmartCardReaderDiagnosisConfiguration::
      getTimeoutToFail ()
      {
        return this->TimeoutToFail_.get ();
      }

      void SmartCardReaderDiagnosisConfiguration::
      setTimeoutToFail (const TimeoutToFailType& x)
      {
        this->TimeoutToFail_.set (x);
      }


      // ChangeHourFunctionalityConfiguration
      // 

      const ChangeHourFunctionalityConfiguration::TimeLabelConfigurationType& ChangeHourFunctionalityConfiguration::
      getTimeLabelConfiguration () const
      {
        return this->TimeLabelConfiguration_.get ();
      }

      ChangeHourFunctionalityConfiguration::TimeLabelConfigurationType& ChangeHourFunctionalityConfiguration::
      getTimeLabelConfiguration ()
      {
        return this->TimeLabelConfiguration_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setTimeLabelConfiguration (const TimeLabelConfigurationType& x)
      {
        this->TimeLabelConfiguration_.set (x);
      }

      void ChangeHourFunctionalityConfiguration::
      setTimeLabelConfiguration (::std::auto_ptr< TimeLabelConfigurationType > x)
      {
        this->TimeLabelConfiguration_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::TitlesLabelConfigurationType& ChangeHourFunctionalityConfiguration::
      getTitlesLabelConfiguration () const
      {
        return this->TitlesLabelConfiguration_.get ();
      }

      ChangeHourFunctionalityConfiguration::TitlesLabelConfigurationType& ChangeHourFunctionalityConfiguration::
      getTitlesLabelConfiguration ()
      {
        return this->TitlesLabelConfiguration_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setTitlesLabelConfiguration (const TitlesLabelConfigurationType& x)
      {
        this->TitlesLabelConfiguration_.set (x);
      }

      void ChangeHourFunctionalityConfiguration::
      setTitlesLabelConfiguration (::std::auto_ptr< TitlesLabelConfigurationType > x)
      {
        this->TitlesLabelConfiguration_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::PrincipalTitleLabelConfigurationType& ChangeHourFunctionalityConfiguration::
      getPrincipalTitleLabelConfiguration () const
      {
        return this->PrincipalTitleLabelConfiguration_.get ();
      }

      ChangeHourFunctionalityConfiguration::PrincipalTitleLabelConfigurationType& ChangeHourFunctionalityConfiguration::
      getPrincipalTitleLabelConfiguration ()
      {
        return this->PrincipalTitleLabelConfiguration_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setPrincipalTitleLabelConfiguration (const PrincipalTitleLabelConfigurationType& x)
      {
        this->PrincipalTitleLabelConfiguration_.set (x);
      }

      void ChangeHourFunctionalityConfiguration::
      setPrincipalTitleLabelConfiguration (::std::auto_ptr< PrincipalTitleLabelConfigurationType > x)
      {
        this->PrincipalTitleLabelConfiguration_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::ButtonArrowWidthType& ChangeHourFunctionalityConfiguration::
      getButtonArrowWidth () const
      {
        return this->ButtonArrowWidth_.get ();
      }

      ChangeHourFunctionalityConfiguration::ButtonArrowWidthType& ChangeHourFunctionalityConfiguration::
      getButtonArrowWidth ()
      {
        return this->ButtonArrowWidth_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setButtonArrowWidth (const ButtonArrowWidthType& x)
      {
        this->ButtonArrowWidth_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::ButtonArrowHeightType& ChangeHourFunctionalityConfiguration::
      getButtonArrowHeight () const
      {
        return this->ButtonArrowHeight_.get ();
      }

      ChangeHourFunctionalityConfiguration::ButtonArrowHeightType& ChangeHourFunctionalityConfiguration::
      getButtonArrowHeight ()
      {
        return this->ButtonArrowHeight_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setButtonArrowHeight (const ButtonArrowHeightType& x)
      {
        this->ButtonArrowHeight_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::ButtonValidateWidthType& ChangeHourFunctionalityConfiguration::
      getButtonValidateWidth () const
      {
        return this->ButtonValidateWidth_.get ();
      }

      ChangeHourFunctionalityConfiguration::ButtonValidateWidthType& ChangeHourFunctionalityConfiguration::
      getButtonValidateWidth ()
      {
        return this->ButtonValidateWidth_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setButtonValidateWidth (const ButtonValidateWidthType& x)
      {
        this->ButtonValidateWidth_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::ButtonValidateHeightType& ChangeHourFunctionalityConfiguration::
      getButtonValidateHeight () const
      {
        return this->ButtonValidateHeight_.get ();
      }

      ChangeHourFunctionalityConfiguration::ButtonValidateHeightType& ChangeHourFunctionalityConfiguration::
      getButtonValidateHeight ()
      {
        return this->ButtonValidateHeight_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setButtonValidateHeight (const ButtonValidateHeightType& x)
      {
        this->ButtonValidateHeight_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::EntryWidthType& ChangeHourFunctionalityConfiguration::
      getEntryWidth () const
      {
        return this->EntryWidth_.get ();
      }

      ChangeHourFunctionalityConfiguration::EntryWidthType& ChangeHourFunctionalityConfiguration::
      getEntryWidth ()
      {
        return this->EntryWidth_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setEntryWidth (const EntryWidthType& x)
      {
        this->EntryWidth_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::EntryHeightType& ChangeHourFunctionalityConfiguration::
      getEntryHeight () const
      {
        return this->EntryHeight_.get ();
      }

      ChangeHourFunctionalityConfiguration::EntryHeightType& ChangeHourFunctionalityConfiguration::
      getEntryHeight ()
      {
        return this->EntryHeight_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setEntryHeight (const EntryHeightType& x)
      {
        this->EntryHeight_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::FontEntrySizeType& ChangeHourFunctionalityConfiguration::
      getFontEntrySize () const
      {
        return this->FontEntrySize_.get ();
      }

      ChangeHourFunctionalityConfiguration::FontEntrySizeType& ChangeHourFunctionalityConfiguration::
      getFontEntrySize ()
      {
        return this->FontEntrySize_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setFontEntrySize (const FontEntrySizeType& x)
      {
        this->FontEntrySize_.set (x);
      }

      const ChangeHourFunctionalityConfiguration::TableVerticalSpacingType& ChangeHourFunctionalityConfiguration::
      getTableVerticalSpacing () const
      {
        return this->TableVerticalSpacing_.get ();
      }

      ChangeHourFunctionalityConfiguration::TableVerticalSpacingType& ChangeHourFunctionalityConfiguration::
      getTableVerticalSpacing ()
      {
        return this->TableVerticalSpacing_.get ();
      }

      void ChangeHourFunctionalityConfiguration::
      setTableVerticalSpacing (const TableVerticalSpacingType& x)
      {
        this->TableVerticalSpacing_.set (x);
      }


      // FunctionalitiesConfiguration
      // 

      const FunctionalitiesConfiguration::FunctionalityConfigurationSequence& FunctionalitiesConfiguration::
      getFunctionalityConfiguration () const
      {
        return this->FunctionalityConfiguration_;
      }

      FunctionalitiesConfiguration::FunctionalityConfigurationSequence& FunctionalitiesConfiguration::
      getFunctionalityConfiguration ()
      {
        return this->FunctionalityConfiguration_;
      }

      void FunctionalitiesConfiguration::
      setFunctionalityConfiguration (const FunctionalityConfigurationSequence& s)
      {
        this->FunctionalityConfiguration_ = s;
      }


      // RunFunctionalityConfiguration
      // 

      const RunFunctionalityConfiguration::FunctionalityDescriptorType& RunFunctionalityConfiguration::
      getFunctionalityDescriptor () const
      {
        return this->FunctionalityDescriptor_.get ();
      }

      RunFunctionalityConfiguration::FunctionalityDescriptorType& RunFunctionalityConfiguration::
      getFunctionalityDescriptor ()
      {
        return this->FunctionalityDescriptor_.get ();
      }

      void RunFunctionalityConfiguration::
      setFunctionalityDescriptor (const FunctionalityDescriptorType& x)
      {
        this->FunctionalityDescriptor_.set (x);
      }

      void RunFunctionalityConfiguration::
      setFunctionalityDescriptor (::std::auto_ptr< FunctionalityDescriptorType > x)
      {
        this->FunctionalityDescriptor_.set (x);
      }


      // InstallationWizardConfiguration
      // 

      const InstallationWizardConfiguration::AskForIdType& InstallationWizardConfiguration::
      getAskForId () const
      {
        return this->AskForId_.get ();
      }

      InstallationWizardConfiguration::AskForIdType& InstallationWizardConfiguration::
      getAskForId ()
      {
        return this->AskForId_.get ();
      }

      void InstallationWizardConfiguration::
      setAskForId (const AskForIdType& x)
      {
        this->AskForId_.set (x);
      }

      const InstallationWizardConfiguration::IncomePassphraseType& InstallationWizardConfiguration::
      getIncomePassphrase () const
      {
        return this->IncomePassphrase_.get ();
      }

      InstallationWizardConfiguration::IncomePassphraseType& InstallationWizardConfiguration::
      getIncomePassphrase ()
      {
        return this->IncomePassphrase_.get ();
      }

      void InstallationWizardConfiguration::
      setIncomePassphrase (const IncomePassphraseType& x)
      {
        this->IncomePassphrase_.set (x);
      }

      void InstallationWizardConfiguration::
      setIncomePassphrase (::std::auto_ptr< IncomePassphraseType > x)
      {
        this->IncomePassphrase_.set (x);
      }


      // PMWidgetConfiguration
      // 

      const PMWidgetConfiguration::ShowImagesType& PMWidgetConfiguration::
      getShowImages () const
      {
        return this->ShowImages_.get ();
      }

      PMWidgetConfiguration::ShowImagesType& PMWidgetConfiguration::
      getShowImages ()
      {
        return this->ShowImages_.get ();
      }

      void PMWidgetConfiguration::
      setShowImages (const ShowImagesType& x)
      {
        this->ShowImages_.set (x);
      }

      const PMWidgetConfiguration::LoginCaseSensitiveConfigurationType& PMWidgetConfiguration::
      getLoginCaseSensitiveConfiguration () const
      {
        return this->LoginCaseSensitiveConfiguration_.get ();
      }

      PMWidgetConfiguration::LoginCaseSensitiveConfigurationType& PMWidgetConfiguration::
      getLoginCaseSensitiveConfiguration ()
      {
        return this->LoginCaseSensitiveConfiguration_.get ();
      }

      void PMWidgetConfiguration::
      setLoginCaseSensitiveConfiguration (const LoginCaseSensitiveConfigurationType& x)
      {
        this->LoginCaseSensitiveConfiguration_.set (x);
      }

      const PMWidgetConfiguration::PasswordWidgetConfigurationType& PMWidgetConfiguration::
      getPasswordWidgetConfiguration () const
      {
        return this->PasswordWidgetConfiguration_.get ();
      }

      PMWidgetConfiguration::PasswordWidgetConfigurationType& PMWidgetConfiguration::
      getPasswordWidgetConfiguration ()
      {
        return this->PasswordWidgetConfiguration_.get ();
      }

      void PMWidgetConfiguration::
      setPasswordWidgetConfiguration (const PasswordWidgetConfigurationType& x)
      {
        this->PasswordWidgetConfiguration_.set (x);
      }

      void PMWidgetConfiguration::
      setPasswordWidgetConfiguration (::std::auto_ptr< PasswordWidgetConfigurationType > x)
      {
        this->PasswordWidgetConfiguration_.set (x);
      }

      const PMWidgetConfiguration::ContingencyWidgetConfigurationType& PMWidgetConfiguration::
      getContingencyWidgetConfiguration () const
      {
        return this->ContingencyWidgetConfiguration_.get ();
      }

      PMWidgetConfiguration::ContingencyWidgetConfigurationType& PMWidgetConfiguration::
      getContingencyWidgetConfiguration ()
      {
        return this->ContingencyWidgetConfiguration_.get ();
      }

      void PMWidgetConfiguration::
      setContingencyWidgetConfiguration (const ContingencyWidgetConfigurationType& x)
      {
        this->ContingencyWidgetConfiguration_.set (x);
      }

      void PMWidgetConfiguration::
      setContingencyWidgetConfiguration (::std::auto_ptr< ContingencyWidgetConfigurationType > x)
      {
        this->ContingencyWidgetConfiguration_.set (x);
      }


      // CardActivatorFunctionalityConfiguration
      // 

      const CardActivatorFunctionalityConfiguration::CustomAttributesPresentationType& CardActivatorFunctionalityConfiguration::
      getCustomAttributesPresentation () const
      {
        return this->CustomAttributesPresentation_.get ();
      }

      CardActivatorFunctionalityConfiguration::CustomAttributesPresentationType& CardActivatorFunctionalityConfiguration::
      getCustomAttributesPresentation ()
      {
        return this->CustomAttributesPresentation_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setCustomAttributesPresentation (const CustomAttributesPresentationType& x)
      {
        this->CustomAttributesPresentation_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setCustomAttributesPresentation (::std::auto_ptr< CustomAttributesPresentationType > x)
      {
        this->CustomAttributesPresentation_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::SelectedColorType& CardActivatorFunctionalityConfiguration::
      getSelectedColor () const
      {
        return this->SelectedColor_.get ();
      }

      CardActivatorFunctionalityConfiguration::SelectedColorType& CardActivatorFunctionalityConfiguration::
      getSelectedColor ()
      {
        return this->SelectedColor_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setSelectedColor (const SelectedColorType& x)
      {
        this->SelectedColor_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setSelectedColor (::std::auto_ptr< SelectedColorType > x)
      {
        this->SelectedColor_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::UnSelectedColorType& CardActivatorFunctionalityConfiguration::
      getUnSelectedColor () const
      {
        return this->UnSelectedColor_.get ();
      }

      CardActivatorFunctionalityConfiguration::UnSelectedColorType& CardActivatorFunctionalityConfiguration::
      getUnSelectedColor ()
      {
        return this->UnSelectedColor_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setUnSelectedColor (const UnSelectedColorType& x)
      {
        this->UnSelectedColor_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setUnSelectedColor (::std::auto_ptr< UnSelectedColorType > x)
      {
        this->UnSelectedColor_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::MinimumDemoCounterToAllowActivationType& CardActivatorFunctionalityConfiguration::
      getMinimumDemoCounterToAllowActivation () const
      {
        return this->MinimumDemoCounterToAllowActivation_.get ();
      }

      CardActivatorFunctionalityConfiguration::MinimumDemoCounterToAllowActivationType& CardActivatorFunctionalityConfiguration::
      getMinimumDemoCounterToAllowActivation ()
      {
        return this->MinimumDemoCounterToAllowActivation_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setMinimumDemoCounterToAllowActivation (const MinimumDemoCounterToAllowActivationType& x)
      {
        this->MinimumDemoCounterToAllowActivation_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::AssistedActivationBySelectionType& CardActivatorFunctionalityConfiguration::
      getAssistedActivationBySelection () const
      {
        return this->AssistedActivationBySelection_.get ();
      }

      CardActivatorFunctionalityConfiguration::AssistedActivationBySelectionType& CardActivatorFunctionalityConfiguration::
      getAssistedActivationBySelection ()
      {
        return this->AssistedActivationBySelection_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setAssistedActivationBySelection (const AssistedActivationBySelectionType& x)
      {
        this->AssistedActivationBySelection_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::ShowConfirmationButtonsType& CardActivatorFunctionalityConfiguration::
      getShowConfirmationButtons () const
      {
        return this->ShowConfirmationButtons_.get ();
      }

      CardActivatorFunctionalityConfiguration::ShowConfirmationButtonsType& CardActivatorFunctionalityConfiguration::
      getShowConfirmationButtons ()
      {
        return this->ShowConfirmationButtons_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setShowConfirmationButtons (const ShowConfirmationButtonsType& x)
      {
        this->ShowConfirmationButtons_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::CardStatisticsConfigurationType& CardActivatorFunctionalityConfiguration::
      getCardStatisticsConfiguration () const
      {
        return this->CardStatisticsConfiguration_.get ();
      }

      CardActivatorFunctionalityConfiguration::CardStatisticsConfigurationType& CardActivatorFunctionalityConfiguration::
      getCardStatisticsConfiguration ()
      {
        return this->CardStatisticsConfiguration_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setCardStatisticsConfiguration (const CardStatisticsConfigurationType& x)
      {
        this->CardStatisticsConfiguration_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setCardStatisticsConfiguration (::std::auto_ptr< CardStatisticsConfigurationType > x)
      {
        this->CardStatisticsConfiguration_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::StatisticsTitleLabelConfigurationType& CardActivatorFunctionalityConfiguration::
      getStatisticsTitleLabelConfiguration () const
      {
        return this->StatisticsTitleLabelConfiguration_.get ();
      }

      CardActivatorFunctionalityConfiguration::StatisticsTitleLabelConfigurationType& CardActivatorFunctionalityConfiguration::
      getStatisticsTitleLabelConfiguration ()
      {
        return this->StatisticsTitleLabelConfiguration_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setStatisticsTitleLabelConfiguration (const StatisticsTitleLabelConfigurationType& x)
      {
        this->StatisticsTitleLabelConfiguration_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setStatisticsTitleLabelConfiguration (::std::auto_ptr< StatisticsTitleLabelConfigurationType > x)
      {
        this->StatisticsTitleLabelConfiguration_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::StatisticsTitleColorType& CardActivatorFunctionalityConfiguration::
      getStatisticsTitleColor () const
      {
        return this->StatisticsTitleColor_.get ();
      }

      CardActivatorFunctionalityConfiguration::StatisticsTitleColorType& CardActivatorFunctionalityConfiguration::
      getStatisticsTitleColor ()
      {
        return this->StatisticsTitleColor_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setStatisticsTitleColor (const StatisticsTitleColorType& x)
      {
        this->StatisticsTitleColor_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setStatisticsTitleColor (::std::auto_ptr< StatisticsTitleColorType > x)
      {
        this->StatisticsTitleColor_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::ActivatedAfterInsertingCardType& CardActivatorFunctionalityConfiguration::
      getActivatedAfterInsertingCard () const
      {
        return this->ActivatedAfterInsertingCard_.get ();
      }

      CardActivatorFunctionalityConfiguration::ActivatedAfterInsertingCardType& CardActivatorFunctionalityConfiguration::
      getActivatedAfterInsertingCard ()
      {
        return this->ActivatedAfterInsertingCard_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setActivatedAfterInsertingCard (const ActivatedAfterInsertingCardType& x)
      {
        this->ActivatedAfterInsertingCard_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::ShowAudioCheckType& CardActivatorFunctionalityConfiguration::
      getShowAudioCheck () const
      {
        return this->ShowAudioCheck_.get ();
      }

      CardActivatorFunctionalityConfiguration::ShowAudioCheckType& CardActivatorFunctionalityConfiguration::
      getShowAudioCheck ()
      {
        return this->ShowAudioCheck_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setShowAudioCheck (const ShowAudioCheckType& x)
      {
        this->ShowAudioCheck_.set (x);
      }

      const CardActivatorFunctionalityConfiguration::CardActivationTotalCountConfigurationType& CardActivatorFunctionalityConfiguration::
      getCardActivationTotalCountConfiguration () const
      {
        return this->CardActivationTotalCountConfiguration_.get ();
      }

      CardActivatorFunctionalityConfiguration::CardActivationTotalCountConfigurationType& CardActivatorFunctionalityConfiguration::
      getCardActivationTotalCountConfiguration ()
      {
        return this->CardActivationTotalCountConfiguration_.get ();
      }

      void CardActivatorFunctionalityConfiguration::
      setCardActivationTotalCountConfiguration (const CardActivationTotalCountConfigurationType& x)
      {
        this->CardActivationTotalCountConfiguration_.set (x);
      }

      void CardActivatorFunctionalityConfiguration::
      setCardActivationTotalCountConfiguration (::std::auto_ptr< CardActivationTotalCountConfigurationType > x)
      {
        this->CardActivationTotalCountConfiguration_.set (x);
      }


      // CardRecoveryFunctionalityConfiguration
      // 

      const CardRecoveryFunctionalityConfiguration::MinimumDemoCounterToAllowActivationType& CardRecoveryFunctionalityConfiguration::
      getMinimumDemoCounterToAllowActivation () const
      {
        return this->MinimumDemoCounterToAllowActivation_.get ();
      }

      CardRecoveryFunctionalityConfiguration::MinimumDemoCounterToAllowActivationType& CardRecoveryFunctionalityConfiguration::
      getMinimumDemoCounterToAllowActivation ()
      {
        return this->MinimumDemoCounterToAllowActivation_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setMinimumDemoCounterToAllowActivation (const MinimumDemoCounterToAllowActivationType& x)
      {
        this->MinimumDemoCounterToAllowActivation_.set (x);
      }

      const CardRecoveryFunctionalityConfiguration::ShowConfirmationButtonsType& CardRecoveryFunctionalityConfiguration::
      getShowConfirmationButtons () const
      {
        return this->ShowConfirmationButtons_.get ();
      }

      CardRecoveryFunctionalityConfiguration::ShowConfirmationButtonsType& CardRecoveryFunctionalityConfiguration::
      getShowConfirmationButtons ()
      {
        return this->ShowConfirmationButtons_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setShowConfirmationButtons (const ShowConfirmationButtonsType& x)
      {
        this->ShowConfirmationButtons_.set (x);
      }

      const CardRecoveryFunctionalityConfiguration::CleanOnCorrectActivationType& CardRecoveryFunctionalityConfiguration::
      getCleanOnCorrectActivation () const
      {
        return this->CleanOnCorrectActivation_.get ();
      }

      CardRecoveryFunctionalityConfiguration::CleanOnCorrectActivationType& CardRecoveryFunctionalityConfiguration::
      getCleanOnCorrectActivation ()
      {
        return this->CleanOnCorrectActivation_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setCleanOnCorrectActivation (const CleanOnCorrectActivationType& x)
      {
        this->CleanOnCorrectActivation_.set (x);
      }

      const CardRecoveryFunctionalityConfiguration::CleanOnIncorrectActivationType& CardRecoveryFunctionalityConfiguration::
      getCleanOnIncorrectActivation () const
      {
        return this->CleanOnIncorrectActivation_.get ();
      }

      CardRecoveryFunctionalityConfiguration::CleanOnIncorrectActivationType& CardRecoveryFunctionalityConfiguration::
      getCleanOnIncorrectActivation ()
      {
        return this->CleanOnIncorrectActivation_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setCleanOnIncorrectActivation (const CleanOnIncorrectActivationType& x)
      {
        this->CleanOnIncorrectActivation_.set (x);
      }

      const CardRecoveryFunctionalityConfiguration::CardStatisticsConfigurationType& CardRecoveryFunctionalityConfiguration::
      getCardStatisticsConfiguration () const
      {
        return this->CardStatisticsConfiguration_.get ();
      }

      CardRecoveryFunctionalityConfiguration::CardStatisticsConfigurationType& CardRecoveryFunctionalityConfiguration::
      getCardStatisticsConfiguration ()
      {
        return this->CardStatisticsConfiguration_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setCardStatisticsConfiguration (const CardStatisticsConfigurationType& x)
      {
        this->CardStatisticsConfiguration_.set (x);
      }

      void CardRecoveryFunctionalityConfiguration::
      setCardStatisticsConfiguration (::std::auto_ptr< CardStatisticsConfigurationType > x)
      {
        this->CardStatisticsConfiguration_.set (x);
      }

      const CardRecoveryFunctionalityConfiguration::StatisticsTitleLabelConfigurationType& CardRecoveryFunctionalityConfiguration::
      getStatisticsTitleLabelConfiguration () const
      {
        return this->StatisticsTitleLabelConfiguration_.get ();
      }

      CardRecoveryFunctionalityConfiguration::StatisticsTitleLabelConfigurationType& CardRecoveryFunctionalityConfiguration::
      getStatisticsTitleLabelConfiguration ()
      {
        return this->StatisticsTitleLabelConfiguration_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setStatisticsTitleLabelConfiguration (const StatisticsTitleLabelConfigurationType& x)
      {
        this->StatisticsTitleLabelConfiguration_.set (x);
      }

      void CardRecoveryFunctionalityConfiguration::
      setStatisticsTitleLabelConfiguration (::std::auto_ptr< StatisticsTitleLabelConfigurationType > x)
      {
        this->StatisticsTitleLabelConfiguration_.set (x);
      }

      const CardRecoveryFunctionalityConfiguration::StatisticsTitleColorType& CardRecoveryFunctionalityConfiguration::
      getStatisticsTitleColor () const
      {
        return this->StatisticsTitleColor_.get ();
      }

      CardRecoveryFunctionalityConfiguration::StatisticsTitleColorType& CardRecoveryFunctionalityConfiguration::
      getStatisticsTitleColor ()
      {
        return this->StatisticsTitleColor_.get ();
      }

      void CardRecoveryFunctionalityConfiguration::
      setStatisticsTitleColor (const StatisticsTitleColorType& x)
      {
        this->StatisticsTitleColor_.set (x);
      }

      void CardRecoveryFunctionalityConfiguration::
      setStatisticsTitleColor (::std::auto_ptr< StatisticsTitleColorType > x)
      {
        this->StatisticsTitleColor_.set (x);
      }


      // VoteDemoFunctionalityConfiguration
      // 

      const VoteDemoFunctionalityConfiguration::PersistVoteType& VoteDemoFunctionalityConfiguration::
      getPersistVote () const
      {
        return this->PersistVote_.get ();
      }

      VoteDemoFunctionalityConfiguration::PersistVoteType& VoteDemoFunctionalityConfiguration::
      getPersistVote ()
      {
        return this->PersistVote_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setPersistVote (const PersistVoteType& x)
      {
        this->PersistVote_.set (x);
      }

      const VoteDemoFunctionalityConfiguration::ShowBarcodeInPreviewType& VoteDemoFunctionalityConfiguration::
      getShowBarcodeInPreview () const
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      VoteDemoFunctionalityConfiguration::ShowBarcodeInPreviewType& VoteDemoFunctionalityConfiguration::
      getShowBarcodeInPreview ()
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x)
      {
        this->ShowBarcodeInPreview_.set (x);
      }

      const VoteDemoFunctionalityConfiguration::BarcodeInParamsType& VoteDemoFunctionalityConfiguration::
      getBarcodeInParams () const
      {
        return this->BarcodeInParams_.get ();
      }

      VoteDemoFunctionalityConfiguration::BarcodeInParamsType& VoteDemoFunctionalityConfiguration::
      getBarcodeInParams ()
      {
        return this->BarcodeInParams_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setBarcodeInParams (const BarcodeInParamsType& x)
      {
        this->BarcodeInParams_.set (x);
      }

      void VoteDemoFunctionalityConfiguration::
      setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > x)
      {
        this->BarcodeInParams_.set (x);
      }

      const VoteDemoFunctionalityConfiguration::BarcodeOutParamsType& VoteDemoFunctionalityConfiguration::
      getBarcodeOutParams () const
      {
        return this->BarcodeOutParams_.get ();
      }

      VoteDemoFunctionalityConfiguration::BarcodeOutParamsType& VoteDemoFunctionalityConfiguration::
      getBarcodeOutParams ()
      {
        return this->BarcodeOutParams_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setBarcodeOutParams (const BarcodeOutParamsType& x)
      {
        this->BarcodeOutParams_.set (x);
      }

      void VoteDemoFunctionalityConfiguration::
      setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > x)
      {
        this->BarcodeOutParams_.set (x);
      }

      const VoteDemoFunctionalityConfiguration::LabelSelectedConfigurationType& VoteDemoFunctionalityConfiguration::
      getLabelSelectedConfiguration () const
      {
        return this->LabelSelectedConfiguration_.get ();
      }

      VoteDemoFunctionalityConfiguration::LabelSelectedConfigurationType& VoteDemoFunctionalityConfiguration::
      getLabelSelectedConfiguration ()
      {
        return this->LabelSelectedConfiguration_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setLabelSelectedConfiguration (const LabelSelectedConfigurationType& x)
      {
        this->LabelSelectedConfiguration_.set (x);
      }

      void VoteDemoFunctionalityConfiguration::
      setLabelSelectedConfiguration (::std::auto_ptr< LabelSelectedConfigurationType > x)
      {
        this->LabelSelectedConfiguration_.set (x);
      }

      const VoteDemoFunctionalityConfiguration::LabelUnselectedConfigurationType& VoteDemoFunctionalityConfiguration::
      getLabelUnselectedConfiguration () const
      {
        return this->LabelUnselectedConfiguration_.get ();
      }

      VoteDemoFunctionalityConfiguration::LabelUnselectedConfigurationType& VoteDemoFunctionalityConfiguration::
      getLabelUnselectedConfiguration ()
      {
        return this->LabelUnselectedConfiguration_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setLabelUnselectedConfiguration (const LabelUnselectedConfigurationType& x)
      {
        this->LabelUnselectedConfiguration_.set (x);
      }

      void VoteDemoFunctionalityConfiguration::
      setLabelUnselectedConfiguration (::std::auto_ptr< LabelUnselectedConfigurationType > x)
      {
        this->LabelUnselectedConfiguration_.set (x);
      }

      const VoteDemoFunctionalityConfiguration::TitleFontConfigurationType& VoteDemoFunctionalityConfiguration::
      getTitleFontConfiguration () const
      {
        return this->TitleFontConfiguration_.get ();
      }

      VoteDemoFunctionalityConfiguration::TitleFontConfigurationType& VoteDemoFunctionalityConfiguration::
      getTitleFontConfiguration ()
      {
        return this->TitleFontConfiguration_.get ();
      }

      void VoteDemoFunctionalityConfiguration::
      setTitleFontConfiguration (const TitleFontConfigurationType& x)
      {
        this->TitleFontConfiguration_.set (x);
      }

      void VoteDemoFunctionalityConfiguration::
      setTitleFontConfiguration (::std::auto_ptr< TitleFontConfigurationType > x)
      {
        this->TitleFontConfiguration_.set (x);
      }


      // CardAssistedActivationFunctionalityConfiguration
      // 

      const CardAssistedActivationFunctionalityConfiguration::MinimumDemoCounterToAllowActivationType& CardAssistedActivationFunctionalityConfiguration::
      getMinimumDemoCounterToAllowActivation () const
      {
        return this->MinimumDemoCounterToAllowActivation_.get ();
      }

      CardAssistedActivationFunctionalityConfiguration::MinimumDemoCounterToAllowActivationType& CardAssistedActivationFunctionalityConfiguration::
      getMinimumDemoCounterToAllowActivation ()
      {
        return this->MinimumDemoCounterToAllowActivation_.get ();
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setMinimumDemoCounterToAllowActivation (const MinimumDemoCounterToAllowActivationType& x)
      {
        this->MinimumDemoCounterToAllowActivation_.set (x);
      }

      const CardAssistedActivationFunctionalityConfiguration::PreviewTitlesColorType& CardAssistedActivationFunctionalityConfiguration::
      getPreviewTitlesColor () const
      {
        return this->PreviewTitlesColor_.get ();
      }

      CardAssistedActivationFunctionalityConfiguration::PreviewTitlesColorType& CardAssistedActivationFunctionalityConfiguration::
      getPreviewTitlesColor ()
      {
        return this->PreviewTitlesColor_.get ();
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setPreviewTitlesColor (const PreviewTitlesColorType& x)
      {
        this->PreviewTitlesColor_.set (x);
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setPreviewTitlesColor (::std::auto_ptr< PreviewTitlesColorType > x)
      {
        this->PreviewTitlesColor_.set (x);
      }

      const CardAssistedActivationFunctionalityConfiguration::PreviewContentsColorType& CardAssistedActivationFunctionalityConfiguration::
      getPreviewContentsColor () const
      {
        return this->PreviewContentsColor_.get ();
      }

      CardAssistedActivationFunctionalityConfiguration::PreviewContentsColorType& CardAssistedActivationFunctionalityConfiguration::
      getPreviewContentsColor ()
      {
        return this->PreviewContentsColor_.get ();
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setPreviewContentsColor (const PreviewContentsColorType& x)
      {
        this->PreviewContentsColor_.set (x);
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setPreviewContentsColor (::std::auto_ptr< PreviewContentsColorType > x)
      {
        this->PreviewContentsColor_.set (x);
      }

      const CardAssistedActivationFunctionalityConfiguration::InstrunctionLabelConfigurationType& CardAssistedActivationFunctionalityConfiguration::
      getInstrunctionLabelConfiguration () const
      {
        return this->InstrunctionLabelConfiguration_.get ();
      }

      CardAssistedActivationFunctionalityConfiguration::InstrunctionLabelConfigurationType& CardAssistedActivationFunctionalityConfiguration::
      getInstrunctionLabelConfiguration ()
      {
        return this->InstrunctionLabelConfiguration_.get ();
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setInstrunctionLabelConfiguration (const InstrunctionLabelConfigurationType& x)
      {
        this->InstrunctionLabelConfiguration_.set (x);
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setInstrunctionLabelConfiguration (::std::auto_ptr< InstrunctionLabelConfigurationType > x)
      {
        this->InstrunctionLabelConfiguration_.set (x);
      }

      const CardAssistedActivationFunctionalityConfiguration::NameLabelConfigurationType& CardAssistedActivationFunctionalityConfiguration::
      getNameLabelConfiguration () const
      {
        return this->NameLabelConfiguration_.get ();
      }

      CardAssistedActivationFunctionalityConfiguration::NameLabelConfigurationType& CardAssistedActivationFunctionalityConfiguration::
      getNameLabelConfiguration ()
      {
        return this->NameLabelConfiguration_.get ();
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setNameLabelConfiguration (const NameLabelConfigurationType& x)
      {
        this->NameLabelConfiguration_.set (x);
      }

      void CardAssistedActivationFunctionalityConfiguration::
      setNameLabelConfiguration (::std::auto_ptr< NameLabelConfigurationType > x)
      {
        this->NameLabelConfiguration_.set (x);
      }


      // PrinterDiagnosisConfiguration
      // 

      const PrinterDiagnosisConfiguration::PrintGraphicalForPresidentType& PrinterDiagnosisConfiguration::
      getPrintGraphicalForPresident () const
      {
        return this->PrintGraphicalForPresident_.get ();
      }

      PrinterDiagnosisConfiguration::PrintGraphicalForPresidentType& PrinterDiagnosisConfiguration::
      getPrintGraphicalForPresident ()
      {
        return this->PrintGraphicalForPresident_.get ();
      }

      void PrinterDiagnosisConfiguration::
      setPrintGraphicalForPresident (const PrintGraphicalForPresidentType& x)
      {
        this->PrintGraphicalForPresident_.set (x);
      }

      const PrinterDiagnosisConfiguration::DoNotCheckBeforePrintDiagnosticType& PrinterDiagnosisConfiguration::
      getDoNotCheckBeforePrintDiagnostic () const
      {
        return this->DoNotCheckBeforePrintDiagnostic_.get ();
      }

      PrinterDiagnosisConfiguration::DoNotCheckBeforePrintDiagnosticType& PrinterDiagnosisConfiguration::
      getDoNotCheckBeforePrintDiagnostic ()
      {
        return this->DoNotCheckBeforePrintDiagnostic_.get ();
      }

      void PrinterDiagnosisConfiguration::
      setDoNotCheckBeforePrintDiagnostic (const DoNotCheckBeforePrintDiagnosticType& x)
      {
        this->DoNotCheckBeforePrintDiagnostic_.set (x);
      }

      const PrinterDiagnosisConfiguration::ButtonsWidthType& PrinterDiagnosisConfiguration::
      getButtonsWidth () const
      {
        return this->ButtonsWidth_.get ();
      }

      PrinterDiagnosisConfiguration::ButtonsWidthType& PrinterDiagnosisConfiguration::
      getButtonsWidth ()
      {
        return this->ButtonsWidth_.get ();
      }

      void PrinterDiagnosisConfiguration::
      setButtonsWidth (const ButtonsWidthType& x)
      {
        this->ButtonsWidth_.set (x);
      }

      const PrinterDiagnosisConfiguration::ButtonsHeightType& PrinterDiagnosisConfiguration::
      getButtonsHeight () const
      {
        return this->ButtonsHeight_.get ();
      }

      PrinterDiagnosisConfiguration::ButtonsHeightType& PrinterDiagnosisConfiguration::
      getButtonsHeight ()
      {
        return this->ButtonsHeight_.get ();
      }

      void PrinterDiagnosisConfiguration::
      setButtonsHeight (const ButtonsHeightType& x)
      {
        this->ButtonsHeight_.set (x);
      }

      const PrinterDiagnosisConfiguration::ButtonsFontSizeType& PrinterDiagnosisConfiguration::
      getButtonsFontSize () const
      {
        return this->ButtonsFontSize_.get ();
      }

      PrinterDiagnosisConfiguration::ButtonsFontSizeType& PrinterDiagnosisConfiguration::
      getButtonsFontSize ()
      {
        return this->ButtonsFontSize_.get ();
      }

      void PrinterDiagnosisConfiguration::
      setButtonsFontSize (const ButtonsFontSizeType& x)
      {
        this->ButtonsFontSize_.set (x);
      }


      // GeneralDiagnosisConfiguration
      // 

      const GeneralDiagnosisConfiguration::DiagnosisLabelConfigurationType& GeneralDiagnosisConfiguration::
      getDiagnosisLabelConfiguration () const
      {
        return this->DiagnosisLabelConfiguration_.get ();
      }

      GeneralDiagnosisConfiguration::DiagnosisLabelConfigurationType& GeneralDiagnosisConfiguration::
      getDiagnosisLabelConfiguration ()
      {
        return this->DiagnosisLabelConfiguration_.get ();
      }

      void GeneralDiagnosisConfiguration::
      setDiagnosisLabelConfiguration (const DiagnosisLabelConfigurationType& x)
      {
        this->DiagnosisLabelConfiguration_.set (x);
      }

      void GeneralDiagnosisConfiguration::
      setDiagnosisLabelConfiguration (::std::auto_ptr< DiagnosisLabelConfigurationType > x)
      {
        this->DiagnosisLabelConfiguration_.set (x);
      }

      const GeneralDiagnosisConfiguration::DiagnosisFooterLabelConfigurationType& GeneralDiagnosisConfiguration::
      getDiagnosisFooterLabelConfiguration () const
      {
        return this->DiagnosisFooterLabelConfiguration_.get ();
      }

      GeneralDiagnosisConfiguration::DiagnosisFooterLabelConfigurationType& GeneralDiagnosisConfiguration::
      getDiagnosisFooterLabelConfiguration ()
      {
        return this->DiagnosisFooterLabelConfiguration_.get ();
      }

      void GeneralDiagnosisConfiguration::
      setDiagnosisFooterLabelConfiguration (const DiagnosisFooterLabelConfigurationType& x)
      {
        this->DiagnosisFooterLabelConfiguration_.set (x);
      }

      void GeneralDiagnosisConfiguration::
      setDiagnosisFooterLabelConfiguration (::std::auto_ptr< DiagnosisFooterLabelConfigurationType > x)
      {
        this->DiagnosisFooterLabelConfiguration_.set (x);
      }

      const GeneralDiagnosisConfiguration::ResultErrorLabelConfigurationType& GeneralDiagnosisConfiguration::
      getResultErrorLabelConfiguration () const
      {
        return this->ResultErrorLabelConfiguration_.get ();
      }

      GeneralDiagnosisConfiguration::ResultErrorLabelConfigurationType& GeneralDiagnosisConfiguration::
      getResultErrorLabelConfiguration ()
      {
        return this->ResultErrorLabelConfiguration_.get ();
      }

      void GeneralDiagnosisConfiguration::
      setResultErrorLabelConfiguration (const ResultErrorLabelConfigurationType& x)
      {
        this->ResultErrorLabelConfiguration_.set (x);
      }

      void GeneralDiagnosisConfiguration::
      setResultErrorLabelConfiguration (::std::auto_ptr< ResultErrorLabelConfigurationType > x)
      {
        this->ResultErrorLabelConfiguration_.set (x);
      }


      // TouchScreenCalibrationConfiguration
      // 

      const TouchScreenCalibrationConfiguration::NumberOfCalibrationPointsType& TouchScreenCalibrationConfiguration::
      getNumberOfCalibrationPoints () const
      {
        return this->NumberOfCalibrationPoints_.get ();
      }

      TouchScreenCalibrationConfiguration::NumberOfCalibrationPointsType& TouchScreenCalibrationConfiguration::
      getNumberOfCalibrationPoints ()
      {
        return this->NumberOfCalibrationPoints_.get ();
      }

      void TouchScreenCalibrationConfiguration::
      setNumberOfCalibrationPoints (const NumberOfCalibrationPointsType& x)
      {
        this->NumberOfCalibrationPoints_.set (x);
      }

      const TouchScreenCalibrationConfiguration::HeightOfButtonsType& TouchScreenCalibrationConfiguration::
      getHeightOfButtons () const
      {
        return this->HeightOfButtons_.get ();
      }

      TouchScreenCalibrationConfiguration::HeightOfButtonsType& TouchScreenCalibrationConfiguration::
      getHeightOfButtons ()
      {
        return this->HeightOfButtons_.get ();
      }

      void TouchScreenCalibrationConfiguration::
      setHeightOfButtons (const HeightOfButtonsType& x)
      {
        this->HeightOfButtons_.set (x);
      }

      const TouchScreenCalibrationConfiguration::WidthOfButtonsType& TouchScreenCalibrationConfiguration::
      getWidthOfButtons () const
      {
        return this->WidthOfButtons_.get ();
      }

      TouchScreenCalibrationConfiguration::WidthOfButtonsType& TouchScreenCalibrationConfiguration::
      getWidthOfButtons ()
      {
        return this->WidthOfButtons_.get ();
      }

      void TouchScreenCalibrationConfiguration::
      setWidthOfButtons (const WidthOfButtonsType& x)
      {
        this->WidthOfButtons_.set (x);
      }


      // EventSoundsConfiguration
      // 

      const EventSoundsConfiguration::PMInstalationSoundType& EventSoundsConfiguration::
      getPMInstalationSound () const
      {
        return this->PMInstalationSound_.get ();
      }

      EventSoundsConfiguration::PMInstalationSoundType& EventSoundsConfiguration::
      getPMInstalationSound ()
      {
        return this->PMInstalationSound_.get ();
      }

      void EventSoundsConfiguration::
      setPMInstalationSound (const PMInstalationSoundType& x)
      {
        this->PMInstalationSound_.set (x);
      }

      void EventSoundsConfiguration::
      setPMInstalationSound (::std::auto_ptr< PMInstalationSoundType > x)
      {
        this->PMInstalationSound_.set (x);
      }

      const EventSoundsConfiguration::VMInstalationSoundType& EventSoundsConfiguration::
      getVMInstalationSound () const
      {
        return this->VMInstalationSound_.get ();
      }

      EventSoundsConfiguration::VMInstalationSoundType& EventSoundsConfiguration::
      getVMInstalationSound ()
      {
        return this->VMInstalationSound_.get ();
      }

      void EventSoundsConfiguration::
      setVMInstalationSound (const VMInstalationSoundType& x)
      {
        this->VMInstalationSound_.set (x);
      }

      void EventSoundsConfiguration::
      setVMInstalationSound (::std::auto_ptr< VMInstalationSoundType > x)
      {
        this->VMInstalationSound_.set (x);
      }

      const EventSoundsConfiguration::AuthenticationValidPasswordSoundType& EventSoundsConfiguration::
      getAuthenticationValidPasswordSound () const
      {
        return this->AuthenticationValidPasswordSound_.get ();
      }

      EventSoundsConfiguration::AuthenticationValidPasswordSoundType& EventSoundsConfiguration::
      getAuthenticationValidPasswordSound ()
      {
        return this->AuthenticationValidPasswordSound_.get ();
      }

      void EventSoundsConfiguration::
      setAuthenticationValidPasswordSound (const AuthenticationValidPasswordSoundType& x)
      {
        this->AuthenticationValidPasswordSound_.set (x);
      }

      void EventSoundsConfiguration::
      setAuthenticationValidPasswordSound (::std::auto_ptr< AuthenticationValidPasswordSoundType > x)
      {
        this->AuthenticationValidPasswordSound_.set (x);
      }

      const EventSoundsConfiguration::AuthenticationInvalidPasswordSoundType& EventSoundsConfiguration::
      getAuthenticationInvalidPasswordSound () const
      {
        return this->AuthenticationInvalidPasswordSound_.get ();
      }

      EventSoundsConfiguration::AuthenticationInvalidPasswordSoundType& EventSoundsConfiguration::
      getAuthenticationInvalidPasswordSound ()
      {
        return this->AuthenticationInvalidPasswordSound_.get ();
      }

      void EventSoundsConfiguration::
      setAuthenticationInvalidPasswordSound (const AuthenticationInvalidPasswordSoundType& x)
      {
        this->AuthenticationInvalidPasswordSound_.set (x);
      }

      void EventSoundsConfiguration::
      setAuthenticationInvalidPasswordSound (::std::auto_ptr< AuthenticationInvalidPasswordSoundType > x)
      {
        this->AuthenticationInvalidPasswordSound_.set (x);
      }

      const EventSoundsConfiguration::VotingExperienceSoundType& EventSoundsConfiguration::
      getVotingExperienceSound () const
      {
        return this->VotingExperienceSound_.get ();
      }

      EventSoundsConfiguration::VotingExperienceSoundType& EventSoundsConfiguration::
      getVotingExperienceSound ()
      {
        return this->VotingExperienceSound_.get ();
      }

      void EventSoundsConfiguration::
      setVotingExperienceSound (const VotingExperienceSoundType& x)
      {
        this->VotingExperienceSound_.set (x);
      }

      void EventSoundsConfiguration::
      setVotingExperienceSound (::std::auto_ptr< VotingExperienceSoundType > x)
      {
        this->VotingExperienceSound_.set (x);
      }

      const EventSoundsConfiguration::BallotOptionSelectSoundType& EventSoundsConfiguration::
      getBallotOptionSelectSound () const
      {
        return this->BallotOptionSelectSound_.get ();
      }

      EventSoundsConfiguration::BallotOptionSelectSoundType& EventSoundsConfiguration::
      getBallotOptionSelectSound ()
      {
        return this->BallotOptionSelectSound_.get ();
      }

      void EventSoundsConfiguration::
      setBallotOptionSelectSound (const BallotOptionSelectSoundType& x)
      {
        this->BallotOptionSelectSound_.set (x);
      }

      void EventSoundsConfiguration::
      setBallotOptionSelectSound (::std::auto_ptr< BallotOptionSelectSoundType > x)
      {
        this->BallotOptionSelectSound_.set (x);
      }

      const EventSoundsConfiguration::PartySelectSoundType& EventSoundsConfiguration::
      getPartySelectSound () const
      {
        return this->PartySelectSound_.get ();
      }

      EventSoundsConfiguration::PartySelectSoundType& EventSoundsConfiguration::
      getPartySelectSound ()
      {
        return this->PartySelectSound_.get ();
      }

      void EventSoundsConfiguration::
      setPartySelectSound (const PartySelectSoundType& x)
      {
        this->PartySelectSound_.set (x);
      }

      void EventSoundsConfiguration::
      setPartySelectSound (::std::auto_ptr< PartySelectSoundType > x)
      {
        this->PartySelectSound_.set (x);
      }

      const EventSoundsConfiguration::DiagnosisSoundType& EventSoundsConfiguration::
      getDiagnosisSound () const
      {
        return this->DiagnosisSound_.get ();
      }

      EventSoundsConfiguration::DiagnosisSoundType& EventSoundsConfiguration::
      getDiagnosisSound ()
      {
        return this->DiagnosisSound_.get ();
      }

      void EventSoundsConfiguration::
      setDiagnosisSound (const DiagnosisSoundType& x)
      {
        this->DiagnosisSound_.set (x);
      }

      void EventSoundsConfiguration::
      setDiagnosisSound (::std::auto_ptr< DiagnosisSoundType > x)
      {
        this->DiagnosisSound_.set (x);
      }


      // BarcodeDiagnosisConfiguration
      // 

      const BarcodeDiagnosisConfiguration::TimeOutType& BarcodeDiagnosisConfiguration::
      getTimeOut () const
      {
        return this->TimeOut_.get ();
      }

      BarcodeDiagnosisConfiguration::TimeOutType& BarcodeDiagnosisConfiguration::
      getTimeOut ()
      {
        return this->TimeOut_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setTimeOut (const TimeOutType& x)
      {
        this->TimeOut_.set (x);
      }

      const BarcodeDiagnosisConfiguration::StringToEncodeType& BarcodeDiagnosisConfiguration::
      getStringToEncode () const
      {
        return this->StringToEncode_.get ();
      }

      BarcodeDiagnosisConfiguration::StringToEncodeType& BarcodeDiagnosisConfiguration::
      getStringToEncode ()
      {
        return this->StringToEncode_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setStringToEncode (const StringToEncodeType& x)
      {
        this->StringToEncode_.set (x);
      }

      void BarcodeDiagnosisConfiguration::
      setStringToEncode (::std::auto_ptr< StringToEncodeType > x)
      {
        this->StringToEncode_.set (x);
      }

      const BarcodeDiagnosisConfiguration::PrintAutomaticBarcodeType& BarcodeDiagnosisConfiguration::
      getPrintAutomaticBarcode () const
      {
        return this->PrintAutomaticBarcode_.get ();
      }

      BarcodeDiagnosisConfiguration::PrintAutomaticBarcodeType& BarcodeDiagnosisConfiguration::
      getPrintAutomaticBarcode ()
      {
        return this->PrintAutomaticBarcode_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setPrintAutomaticBarcode (const PrintAutomaticBarcodeType& x)
      {
        this->PrintAutomaticBarcode_.set (x);
      }

      const BarcodeDiagnosisConfiguration::BarcodeCommandsNameType& BarcodeDiagnosisConfiguration::
      getBarcodeCommandsName () const
      {
        return this->BarcodeCommandsName_.get ();
      }

      BarcodeDiagnosisConfiguration::BarcodeCommandsNameType& BarcodeDiagnosisConfiguration::
      getBarcodeCommandsName ()
      {
        return this->BarcodeCommandsName_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setBarcodeCommandsName (const BarcodeCommandsNameType& x)
      {
        this->BarcodeCommandsName_.set (x);
      }

      void BarcodeDiagnosisConfiguration::
      setBarcodeCommandsName (::std::auto_ptr< BarcodeCommandsNameType > x)
      {
        this->BarcodeCommandsName_.set (x);
      }

      const BarcodeDiagnosisConfiguration::SkipPrinterErrorType& BarcodeDiagnosisConfiguration::
      getSkipPrinterError () const
      {
        return this->SkipPrinterError_.get ();
      }

      BarcodeDiagnosisConfiguration::SkipPrinterErrorType& BarcodeDiagnosisConfiguration::
      getSkipPrinterError ()
      {
        return this->SkipPrinterError_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setSkipPrinterError (const SkipPrinterErrorType& x)
      {
        this->SkipPrinterError_.set (x);
      }

      const BarcodeDiagnosisConfiguration::BarcodeInParamsType& BarcodeDiagnosisConfiguration::
      getBarcodeInParams () const
      {
        return this->BarcodeInParams_.get ();
      }

      BarcodeDiagnosisConfiguration::BarcodeInParamsType& BarcodeDiagnosisConfiguration::
      getBarcodeInParams ()
      {
        return this->BarcodeInParams_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setBarcodeInParams (const BarcodeInParamsType& x)
      {
        this->BarcodeInParams_.set (x);
      }

      void BarcodeDiagnosisConfiguration::
      setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > x)
      {
        this->BarcodeInParams_.set (x);
      }

      const BarcodeDiagnosisConfiguration::BarcodeOutParamsType& BarcodeDiagnosisConfiguration::
      getBarcodeOutParams () const
      {
        return this->BarcodeOutParams_.get ();
      }

      BarcodeDiagnosisConfiguration::BarcodeOutParamsType& BarcodeDiagnosisConfiguration::
      getBarcodeOutParams ()
      {
        return this->BarcodeOutParams_.get ();
      }

      void BarcodeDiagnosisConfiguration::
      setBarcodeOutParams (const BarcodeOutParamsType& x)
      {
        this->BarcodeOutParams_.set (x);
      }

      void BarcodeDiagnosisConfiguration::
      setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > x)
      {
        this->BarcodeOutParams_.set (x);
      }


      // BrightnessDiagnosisConfiguration
      // 

      const BrightnessDiagnosisConfiguration::TimeDelayButtonsType& BrightnessDiagnosisConfiguration::
      getTimeDelayButtons () const
      {
        return this->TimeDelayButtons_.get ();
      }

      BrightnessDiagnosisConfiguration::TimeDelayButtonsType& BrightnessDiagnosisConfiguration::
      getTimeDelayButtons ()
      {
        return this->TimeDelayButtons_.get ();
      }

      void BrightnessDiagnosisConfiguration::
      setTimeDelayButtons (const TimeDelayButtonsType& x)
      {
        this->TimeDelayButtons_.set (x);
      }


      // AllDiagnosisConfiguration
      // 

      const AllDiagnosisConfiguration::DiagnosticToApplySequence& AllDiagnosisConfiguration::
      getDiagnosticToApply () const
      {
        return this->DiagnosticToApply_;
      }

      AllDiagnosisConfiguration::DiagnosticToApplySequence& AllDiagnosisConfiguration::
      getDiagnosticToApply ()
      {
        return this->DiagnosticToApply_;
      }

      void AllDiagnosisConfiguration::
      setDiagnosticToApply (const DiagnosticToApplySequence& s)
      {
        this->DiagnosticToApply_ = s;
      }

      const AllDiagnosisConfiguration::AlarmDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getAlarmDiagnosisWaitTime () const
      {
        return this->AlarmDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::AlarmDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getAlarmDiagnosisWaitTime ()
      {
        return this->AlarmDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setAlarmDiagnosisWaitTime (const AlarmDiagnosisWaitTimeType& x)
      {
        this->AlarmDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::BarcodeDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getBarcodeDiagnosisWaitTime () const
      {
        return this->BarcodeDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::BarcodeDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getBarcodeDiagnosisWaitTime ()
      {
        return this->BarcodeDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setBarcodeDiagnosisWaitTime (const BarcodeDiagnosisWaitTimeType& x)
      {
        this->BarcodeDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::ContrastDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getContrastDiagnosisWaitTime () const
      {
        return this->ContrastDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::ContrastDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getContrastDiagnosisWaitTime ()
      {
        return this->ContrastDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setContrastDiagnosisWaitTime (const ContrastDiagnosisWaitTimeType& x)
      {
        this->ContrastDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::CalibrationDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getCalibrationDiagnosisWaitTime () const
      {
        return this->CalibrationDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::CalibrationDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getCalibrationDiagnosisWaitTime ()
      {
        return this->CalibrationDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setCalibrationDiagnosisWaitTime (const CalibrationDiagnosisWaitTimeType& x)
      {
        this->CalibrationDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::FlashDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getFlashDiagnosisWaitTime () const
      {
        return this->FlashDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::FlashDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getFlashDiagnosisWaitTime ()
      {
        return this->FlashDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setFlashDiagnosisWaitTime (const FlashDiagnosisWaitTimeType& x)
      {
        this->FlashDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::PrinterDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getPrinterDiagnosisWaitTime () const
      {
        return this->PrinterDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::PrinterDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getPrinterDiagnosisWaitTime ()
      {
        return this->PrinterDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setPrinterDiagnosisWaitTime (const PrinterDiagnosisWaitTimeType& x)
      {
        this->PrinterDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::SmartcardDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getSmartcardDiagnosisWaitTime () const
      {
        return this->SmartcardDiagnosisWaitTime_.get ();
      }

      AllDiagnosisConfiguration::SmartcardDiagnosisWaitTimeType& AllDiagnosisConfiguration::
      getSmartcardDiagnosisWaitTime ()
      {
        return this->SmartcardDiagnosisWaitTime_.get ();
      }

      void AllDiagnosisConfiguration::
      setSmartcardDiagnosisWaitTime (const SmartcardDiagnosisWaitTimeType& x)
      {
        this->SmartcardDiagnosisWaitTime_.set (x);
      }

      const AllDiagnosisConfiguration::PrinterDiagnosisWaitTimeOnOkType& AllDiagnosisConfiguration::
      getPrinterDiagnosisWaitTimeOnOk () const
      {
        return this->PrinterDiagnosisWaitTimeOnOk_.get ();
      }

      AllDiagnosisConfiguration::PrinterDiagnosisWaitTimeOnOkType& AllDiagnosisConfiguration::
      getPrinterDiagnosisWaitTimeOnOk ()
      {
        return this->PrinterDiagnosisWaitTimeOnOk_.get ();
      }

      void AllDiagnosisConfiguration::
      setPrinterDiagnosisWaitTimeOnOk (const PrinterDiagnosisWaitTimeOnOkType& x)
      {
        this->PrinterDiagnosisWaitTimeOnOk_.set (x);
      }

      const AllDiagnosisConfiguration::PrinterDiagnosisWaitTimeOnCancelType& AllDiagnosisConfiguration::
      getPrinterDiagnosisWaitTimeOnCancel () const
      {
        return this->PrinterDiagnosisWaitTimeOnCancel_.get ();
      }

      AllDiagnosisConfiguration::PrinterDiagnosisWaitTimeOnCancelType& AllDiagnosisConfiguration::
      getPrinterDiagnosisWaitTimeOnCancel ()
      {
        return this->PrinterDiagnosisWaitTimeOnCancel_.get ();
      }

      void AllDiagnosisConfiguration::
      setPrinterDiagnosisWaitTimeOnCancel (const PrinterDiagnosisWaitTimeOnCancelType& x)
      {
        this->PrinterDiagnosisWaitTimeOnCancel_.set (x);
      }

      const AllDiagnosisConfiguration::CalibrationDiagnosisWaitTimeOnOkType& AllDiagnosisConfiguration::
      getCalibrationDiagnosisWaitTimeOnOk () const
      {
        return this->CalibrationDiagnosisWaitTimeOnOk_.get ();
      }

      AllDiagnosisConfiguration::CalibrationDiagnosisWaitTimeOnOkType& AllDiagnosisConfiguration::
      getCalibrationDiagnosisWaitTimeOnOk ()
      {
        return this->CalibrationDiagnosisWaitTimeOnOk_.get ();
      }

      void AllDiagnosisConfiguration::
      setCalibrationDiagnosisWaitTimeOnOk (const CalibrationDiagnosisWaitTimeOnOkType& x)
      {
        this->CalibrationDiagnosisWaitTimeOnOk_.set (x);
      }

      const AllDiagnosisConfiguration::ContrastDiagnosisWaitTimeOnOkType& AllDiagnosisConfiguration::
      getContrastDiagnosisWaitTimeOnOk () const
      {
        return this->ContrastDiagnosisWaitTimeOnOk_.get ();
      }

      AllDiagnosisConfiguration::ContrastDiagnosisWaitTimeOnOkType& AllDiagnosisConfiguration::
      getContrastDiagnosisWaitTimeOnOk ()
      {
        return this->ContrastDiagnosisWaitTimeOnOk_.get ();
      }

      void AllDiagnosisConfiguration::
      setContrastDiagnosisWaitTimeOnOk (const ContrastDiagnosisWaitTimeOnOkType& x)
      {
        this->ContrastDiagnosisWaitTimeOnOk_.set (x);
      }


      // AutomaticWindowConfiguration
      // 

      const AutomaticWindowConfiguration::DiagnosticToApplySequence& AutomaticWindowConfiguration::
      getDiagnosticToApply () const
      {
        return this->DiagnosticToApply_;
      }

      AutomaticWindowConfiguration::DiagnosticToApplySequence& AutomaticWindowConfiguration::
      getDiagnosticToApply ()
      {
        return this->DiagnosticToApply_;
      }

      void AutomaticWindowConfiguration::
      setDiagnosticToApply (const DiagnosticToApplySequence& s)
      {
        this->DiagnosticToApply_ = s;
      }

      const AutomaticWindowConfiguration::BlockDiagnosticType& AutomaticWindowConfiguration::
      getBlockDiagnostic () const
      {
        return this->BlockDiagnostic_.get ();
      }

      AutomaticWindowConfiguration::BlockDiagnosticType& AutomaticWindowConfiguration::
      getBlockDiagnostic ()
      {
        return this->BlockDiagnostic_.get ();
      }

      void AutomaticWindowConfiguration::
      setBlockDiagnostic (const BlockDiagnosticType& x)
      {
        this->BlockDiagnostic_.set (x);
      }

      const AutomaticWindowConfiguration::BlockDiagnosticTitleType& AutomaticWindowConfiguration::
      getBlockDiagnosticTitle () const
      {
        return this->BlockDiagnosticTitle_.get ();
      }

      AutomaticWindowConfiguration::BlockDiagnosticTitleType& AutomaticWindowConfiguration::
      getBlockDiagnosticTitle ()
      {
        return this->BlockDiagnosticTitle_.get ();
      }

      void AutomaticWindowConfiguration::
      setBlockDiagnosticTitle (const BlockDiagnosticTitleType& x)
      {
        this->BlockDiagnosticTitle_.set (x);
      }

      void AutomaticWindowConfiguration::
      setBlockDiagnosticTitle (::std::auto_ptr< BlockDiagnosticTitleType > x)
      {
        this->BlockDiagnosticTitle_.set (x);
      }

      const AutomaticWindowConfiguration::BlockDiagnosticButtonType& AutomaticWindowConfiguration::
      getBlockDiagnosticButton () const
      {
        return this->BlockDiagnosticButton_.get ();
      }

      AutomaticWindowConfiguration::BlockDiagnosticButtonType& AutomaticWindowConfiguration::
      getBlockDiagnosticButton ()
      {
        return this->BlockDiagnosticButton_.get ();
      }

      void AutomaticWindowConfiguration::
      setBlockDiagnosticButton (const BlockDiagnosticButtonType& x)
      {
        this->BlockDiagnosticButton_.set (x);
      }

      void AutomaticWindowConfiguration::
      setBlockDiagnosticButton (::std::auto_ptr< BlockDiagnosticButtonType > x)
      {
        this->BlockDiagnosticButton_.set (x);
      }

      const AutomaticWindowConfiguration::UseOkButtonOnSomeNonMandatoryDiagnosticFailedType& AutomaticWindowConfiguration::
      getUseOkButtonOnSomeNonMandatoryDiagnosticFailed () const
      {
        return this->UseOkButtonOnSomeNonMandatoryDiagnosticFailed_.get ();
      }

      AutomaticWindowConfiguration::UseOkButtonOnSomeNonMandatoryDiagnosticFailedType& AutomaticWindowConfiguration::
      getUseOkButtonOnSomeNonMandatoryDiagnosticFailed ()
      {
        return this->UseOkButtonOnSomeNonMandatoryDiagnosticFailed_.get ();
      }

      void AutomaticWindowConfiguration::
      setUseOkButtonOnSomeNonMandatoryDiagnosticFailed (const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType& x)
      {
        this->UseOkButtonOnSomeNonMandatoryDiagnosticFailed_.set (x);
      }

      const AutomaticWindowConfiguration::UseShutDownButtonOnSomeMandatoryDiagnosticFailedType& AutomaticWindowConfiguration::
      getUseShutDownButtonOnSomeMandatoryDiagnosticFailed () const
      {
        return this->UseShutDownButtonOnSomeMandatoryDiagnosticFailed_.get ();
      }

      AutomaticWindowConfiguration::UseShutDownButtonOnSomeMandatoryDiagnosticFailedType& AutomaticWindowConfiguration::
      getUseShutDownButtonOnSomeMandatoryDiagnosticFailed ()
      {
        return this->UseShutDownButtonOnSomeMandatoryDiagnosticFailed_.get ();
      }

      void AutomaticWindowConfiguration::
      setUseShutDownButtonOnSomeMandatoryDiagnosticFailed (const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType& x)
      {
        this->UseShutDownButtonOnSomeMandatoryDiagnosticFailed_.set (x);
      }

      const AutomaticWindowConfiguration::AlarmDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getAlarmDiagnosisWaitTime () const
      {
        return this->AlarmDiagnosisWaitTime_.get ();
      }

      AutomaticWindowConfiguration::AlarmDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getAlarmDiagnosisWaitTime ()
      {
        return this->AlarmDiagnosisWaitTime_.get ();
      }

      void AutomaticWindowConfiguration::
      setAlarmDiagnosisWaitTime (const AlarmDiagnosisWaitTimeType& x)
      {
        this->AlarmDiagnosisWaitTime_.set (x);
      }

      const AutomaticWindowConfiguration::BarcodeDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getBarcodeDiagnosisWaitTime () const
      {
        return this->BarcodeDiagnosisWaitTime_.get ();
      }

      AutomaticWindowConfiguration::BarcodeDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getBarcodeDiagnosisWaitTime ()
      {
        return this->BarcodeDiagnosisWaitTime_.get ();
      }

      void AutomaticWindowConfiguration::
      setBarcodeDiagnosisWaitTime (const BarcodeDiagnosisWaitTimeType& x)
      {
        this->BarcodeDiagnosisWaitTime_.set (x);
      }

      const AutomaticWindowConfiguration::FlashDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getFlashDiagnosisWaitTime () const
      {
        return this->FlashDiagnosisWaitTime_.get ();
      }

      AutomaticWindowConfiguration::FlashDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getFlashDiagnosisWaitTime ()
      {
        return this->FlashDiagnosisWaitTime_.get ();
      }

      void AutomaticWindowConfiguration::
      setFlashDiagnosisWaitTime (const FlashDiagnosisWaitTimeType& x)
      {
        this->FlashDiagnosisWaitTime_.set (x);
      }

      const AutomaticWindowConfiguration::PrinterDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getPrinterDiagnosisWaitTime () const
      {
        return this->PrinterDiagnosisWaitTime_.get ();
      }

      AutomaticWindowConfiguration::PrinterDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getPrinterDiagnosisWaitTime ()
      {
        return this->PrinterDiagnosisWaitTime_.get ();
      }

      void AutomaticWindowConfiguration::
      setPrinterDiagnosisWaitTime (const PrinterDiagnosisWaitTimeType& x)
      {
        this->PrinterDiagnosisWaitTime_.set (x);
      }

      const AutomaticWindowConfiguration::SmartcardDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getSmartcardDiagnosisWaitTime () const
      {
        return this->SmartcardDiagnosisWaitTime_.get ();
      }

      AutomaticWindowConfiguration::SmartcardDiagnosisWaitTimeType& AutomaticWindowConfiguration::
      getSmartcardDiagnosisWaitTime ()
      {
        return this->SmartcardDiagnosisWaitTime_.get ();
      }

      void AutomaticWindowConfiguration::
      setSmartcardDiagnosisWaitTime (const SmartcardDiagnosisWaitTimeType& x)
      {
        this->SmartcardDiagnosisWaitTime_.set (x);
      }

      const AutomaticWindowConfiguration::DiagnosticReviewWidthType& AutomaticWindowConfiguration::
      getDiagnosticReviewWidth () const
      {
        return this->DiagnosticReviewWidth_.get ();
      }

      AutomaticWindowConfiguration::DiagnosticReviewWidthType& AutomaticWindowConfiguration::
      getDiagnosticReviewWidth ()
      {
        return this->DiagnosticReviewWidth_.get ();
      }

      void AutomaticWindowConfiguration::
      setDiagnosticReviewWidth (const DiagnosticReviewWidthType& x)
      {
        this->DiagnosticReviewWidth_.set (x);
      }

      const AutomaticWindowConfiguration::DiagnosticReviewHeightType& AutomaticWindowConfiguration::
      getDiagnosticReviewHeight () const
      {
        return this->DiagnosticReviewHeight_.get ();
      }

      AutomaticWindowConfiguration::DiagnosticReviewHeightType& AutomaticWindowConfiguration::
      getDiagnosticReviewHeight ()
      {
        return this->DiagnosticReviewHeight_.get ();
      }

      void AutomaticWindowConfiguration::
      setDiagnosticReviewHeight (const DiagnosticReviewHeightType& x)
      {
        this->DiagnosticReviewHeight_.set (x);
      }

      const AutomaticWindowConfiguration::DiagnosticReviewLabelConfigurationType& AutomaticWindowConfiguration::
      getDiagnosticReviewLabelConfiguration () const
      {
        return this->DiagnosticReviewLabelConfiguration_.get ();
      }

      AutomaticWindowConfiguration::DiagnosticReviewLabelConfigurationType& AutomaticWindowConfiguration::
      getDiagnosticReviewLabelConfiguration ()
      {
        return this->DiagnosticReviewLabelConfiguration_.get ();
      }

      void AutomaticWindowConfiguration::
      setDiagnosticReviewLabelConfiguration (const DiagnosticReviewLabelConfigurationType& x)
      {
        this->DiagnosticReviewLabelConfiguration_.set (x);
      }

      void AutomaticWindowConfiguration::
      setDiagnosticReviewLabelConfiguration (::std::auto_ptr< DiagnosticReviewLabelConfigurationType > x)
      {
        this->DiagnosticReviewLabelConfiguration_.set (x);
      }

      const AutomaticWindowConfiguration::ShowFooterInAutoDiagnosisType& AutomaticWindowConfiguration::
      getShowFooterInAutoDiagnosis () const
      {
        return this->ShowFooterInAutoDiagnosis_.get ();
      }

      AutomaticWindowConfiguration::ShowFooterInAutoDiagnosisType& AutomaticWindowConfiguration::
      getShowFooterInAutoDiagnosis ()
      {
        return this->ShowFooterInAutoDiagnosis_.get ();
      }

      void AutomaticWindowConfiguration::
      setShowFooterInAutoDiagnosis (const ShowFooterInAutoDiagnosisType& x)
      {
        this->ShowFooterInAutoDiagnosis_.set (x);
      }


      // ContingencyCardWidgetConfiguration
      // 

      const ContingencyCardWidgetConfiguration::RetryButtonConfType& ContingencyCardWidgetConfiguration::
      getRetryButtonConf () const
      {
        return this->RetryButtonConf_.get ();
      }

      ContingencyCardWidgetConfiguration::RetryButtonConfType& ContingencyCardWidgetConfiguration::
      getRetryButtonConf ()
      {
        return this->RetryButtonConf_.get ();
      }

      void ContingencyCardWidgetConfiguration::
      setRetryButtonConf (const RetryButtonConfType& x)
      {
        this->RetryButtonConf_.set (x);
      }

      void ContingencyCardWidgetConfiguration::
      setRetryButtonConf (::std::auto_ptr< RetryButtonConfType > x)
      {
        this->RetryButtonConf_.set (x);
      }

      const ContingencyCardWidgetConfiguration::ShutdownButtonConfType& ContingencyCardWidgetConfiguration::
      getShutdownButtonConf () const
      {
        return this->ShutdownButtonConf_.get ();
      }

      ContingencyCardWidgetConfiguration::ShutdownButtonConfType& ContingencyCardWidgetConfiguration::
      getShutdownButtonConf ()
      {
        return this->ShutdownButtonConf_.get ();
      }

      void ContingencyCardWidgetConfiguration::
      setShutdownButtonConf (const ShutdownButtonConfType& x)
      {
        this->ShutdownButtonConf_.set (x);
      }

      void ContingencyCardWidgetConfiguration::
      setShutdownButtonConf (::std::auto_ptr< ShutdownButtonConfType > x)
      {
        this->ShutdownButtonConf_.set (x);
      }

      const ContingencyCardWidgetConfiguration::TitleFontConfType& ContingencyCardWidgetConfiguration::
      getTitleFontConf () const
      {
        return this->TitleFontConf_.get ();
      }

      ContingencyCardWidgetConfiguration::TitleFontConfType& ContingencyCardWidgetConfiguration::
      getTitleFontConf ()
      {
        return this->TitleFontConf_.get ();
      }

      void ContingencyCardWidgetConfiguration::
      setTitleFontConf (const TitleFontConfType& x)
      {
        this->TitleFontConf_.set (x);
      }

      void ContingencyCardWidgetConfiguration::
      setTitleFontConf (::std::auto_ptr< TitleFontConfType > x)
      {
        this->TitleFontConf_.set (x);
      }

      const ContingencyCardWidgetConfiguration::TextFontConfType& ContingencyCardWidgetConfiguration::
      getTextFontConf () const
      {
        return this->TextFontConf_.get ();
      }

      ContingencyCardWidgetConfiguration::TextFontConfType& ContingencyCardWidgetConfiguration::
      getTextFontConf ()
      {
        return this->TextFontConf_.get ();
      }

      void ContingencyCardWidgetConfiguration::
      setTextFontConf (const TextFontConfType& x)
      {
        this->TextFontConf_.set (x);
      }

      void ContingencyCardWidgetConfiguration::
      setTextFontConf (::std::auto_ptr< TextFontConfType > x)
      {
        this->TextFontConf_.set (x);
      }


      // MemoryStateWidgetConfiguration
      // 

      const MemoryStateWidgetConfiguration::ButtonDelayType& MemoryStateWidgetConfiguration::
      getButtonDelay () const
      {
        return this->ButtonDelay_.get ();
      }

      MemoryStateWidgetConfiguration::ButtonDelayType& MemoryStateWidgetConfiguration::
      getButtonDelay ()
      {
        return this->ButtonDelay_.get ();
      }

      void MemoryStateWidgetConfiguration::
      setButtonDelay (const ButtonDelayType& x)
      {
        this->ButtonDelay_.set (x);
      }

      const MemoryStateWidgetConfiguration::ButtonConfType& MemoryStateWidgetConfiguration::
      getButtonConf () const
      {
        return this->ButtonConf_.get ();
      }

      MemoryStateWidgetConfiguration::ButtonConfType& MemoryStateWidgetConfiguration::
      getButtonConf ()
      {
        return this->ButtonConf_.get ();
      }

      void MemoryStateWidgetConfiguration::
      setButtonConf (const ButtonConfType& x)
      {
        this->ButtonConf_.set (x);
      }

      void MemoryStateWidgetConfiguration::
      setButtonConf (::std::auto_ptr< ButtonConfType > x)
      {
        this->ButtonConf_.set (x);
      }

      const MemoryStateWidgetConfiguration::TextFontConfType& MemoryStateWidgetConfiguration::
      getTextFontConf () const
      {
        return this->TextFontConf_.get ();
      }

      MemoryStateWidgetConfiguration::TextFontConfType& MemoryStateWidgetConfiguration::
      getTextFontConf ()
      {
        return this->TextFontConf_.get ();
      }

      void MemoryStateWidgetConfiguration::
      setTextFontConf (const TextFontConfType& x)
      {
        this->TextFontConf_.set (x);
      }

      void MemoryStateWidgetConfiguration::
      setTextFontConf (::std::auto_ptr< TextFontConfType > x)
      {
        this->TextFontConf_.set (x);
      }


      // HelpWidgetConfiguration
      // 

      const HelpWidgetConfiguration::PrintButtonConfType& HelpWidgetConfiguration::
      getPrintButtonConf () const
      {
        return this->PrintButtonConf_.get ();
      }

      HelpWidgetConfiguration::PrintButtonConfType& HelpWidgetConfiguration::
      getPrintButtonConf ()
      {
        return this->PrintButtonConf_.get ();
      }

      void HelpWidgetConfiguration::
      setPrintButtonConf (const PrintButtonConfType& x)
      {
        this->PrintButtonConf_.set (x);
      }

      void HelpWidgetConfiguration::
      setPrintButtonConf (::std::auto_ptr< PrintButtonConfType > x)
      {
        this->PrintButtonConf_.set (x);
      }


      // WaitingForCardWindowConfiguration
      // 

      const WaitingForCardWindowConfiguration::ShowSimulateButtonType& WaitingForCardWindowConfiguration::
      getShowSimulateButton () const
      {
        return this->ShowSimulateButton_.get ();
      }

      WaitingForCardWindowConfiguration::ShowSimulateButtonType& WaitingForCardWindowConfiguration::
      getShowSimulateButton ()
      {
        return this->ShowSimulateButton_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setShowSimulateButton (const ShowSimulateButtonType& x)
      {
        this->ShowSimulateButton_.set (x);
      }

      const WaitingForCardWindowConfiguration::ShowBackButtonType& WaitingForCardWindowConfiguration::
      getShowBackButton () const
      {
        return this->ShowBackButton_.get ();
      }

      WaitingForCardWindowConfiguration::ShowBackButtonType& WaitingForCardWindowConfiguration::
      getShowBackButton ()
      {
        return this->ShowBackButton_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setShowBackButton (const ShowBackButtonType& x)
      {
        this->ShowBackButton_.set (x);
      }

      const WaitingForCardWindowConfiguration::ViewPreviousType& WaitingForCardWindowConfiguration::
      getViewPrevious () const
      {
        return this->ViewPrevious_.get ();
      }

      WaitingForCardWindowConfiguration::ViewPreviousType& WaitingForCardWindowConfiguration::
      getViewPrevious ()
      {
        return this->ViewPrevious_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setViewPrevious (const ViewPreviousType& x)
      {
        this->ViewPrevious_.set (x);
      }

      const WaitingForCardWindowConfiguration::AllowVotePreviewType& WaitingForCardWindowConfiguration::
      getAllowVotePreview () const
      {
        return this->AllowVotePreview_.get ();
      }

      WaitingForCardWindowConfiguration::AllowVotePreviewType& WaitingForCardWindowConfiguration::
      getAllowVotePreview ()
      {
        return this->AllowVotePreview_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setAllowVotePreview (const AllowVotePreviewType& x)
      {
        this->AllowVotePreview_.set (x);
      }

      const WaitingForCardWindowConfiguration::UsePrintPreviewType& WaitingForCardWindowConfiguration::
      getUsePrintPreview () const
      {
        return this->UsePrintPreview_.get ();
      }

      WaitingForCardWindowConfiguration::UsePrintPreviewType& WaitingForCardWindowConfiguration::
      getUsePrintPreview ()
      {
        return this->UsePrintPreview_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setUsePrintPreview (const UsePrintPreviewType& x)
      {
        this->UsePrintPreview_.set (x);
      }

      const WaitingForCardWindowConfiguration::UseVerticalTableInPreviewType& WaitingForCardWindowConfiguration::
      getUseVerticalTableInPreview () const
      {
        return this->UseVerticalTableInPreview_.get ();
      }

      WaitingForCardWindowConfiguration::UseVerticalTableInPreviewType& WaitingForCardWindowConfiguration::
      getUseVerticalTableInPreview ()
      {
        return this->UseVerticalTableInPreview_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setUseVerticalTableInPreview (const UseVerticalTableInPreviewType& x)
      {
        this->UseVerticalTableInPreview_.set (x);
      }

      const WaitingForCardWindowConfiguration::PreviewVoteLabelConfigurationType& WaitingForCardWindowConfiguration::
      getPreviewVoteLabelConfiguration () const
      {
        return this->PreviewVoteLabelConfiguration_.get ();
      }

      WaitingForCardWindowConfiguration::PreviewVoteLabelConfigurationType& WaitingForCardWindowConfiguration::
      getPreviewVoteLabelConfiguration ()
      {
        return this->PreviewVoteLabelConfiguration_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setPreviewVoteLabelConfiguration (const PreviewVoteLabelConfigurationType& x)
      {
        this->PreviewVoteLabelConfiguration_.set (x);
      }

      void WaitingForCardWindowConfiguration::
      setPreviewVoteLabelConfiguration (::std::auto_ptr< PreviewVoteLabelConfigurationType > x)
      {
        this->PreviewVoteLabelConfiguration_.set (x);
      }

      const WaitingForCardWindowConfiguration::PreviewVoteButtonConfigurationType& WaitingForCardWindowConfiguration::
      getPreviewVoteButtonConfiguration () const
      {
        return this->PreviewVoteButtonConfiguration_.get ();
      }

      WaitingForCardWindowConfiguration::PreviewVoteButtonConfigurationType& WaitingForCardWindowConfiguration::
      getPreviewVoteButtonConfiguration ()
      {
        return this->PreviewVoteButtonConfiguration_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setPreviewVoteButtonConfiguration (const PreviewVoteButtonConfigurationType& x)
      {
        this->PreviewVoteButtonConfiguration_.set (x);
      }

      void WaitingForCardWindowConfiguration::
      setPreviewVoteButtonConfiguration (::std::auto_ptr< PreviewVoteButtonConfigurationType > x)
      {
        this->PreviewVoteButtonConfiguration_.set (x);
      }

      const WaitingForCardWindowConfiguration::TimeoutPreviewVoteType& WaitingForCardWindowConfiguration::
      getTimeoutPreviewVote () const
      {
        return this->TimeoutPreviewVote_.get ();
      }

      WaitingForCardWindowConfiguration::TimeoutPreviewVoteType& WaitingForCardWindowConfiguration::
      getTimeoutPreviewVote ()
      {
        return this->TimeoutPreviewVote_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setTimeoutPreviewVote (const TimeoutPreviewVoteType& x)
      {
        this->TimeoutPreviewVote_.set (x);
      }

      const WaitingForCardWindowConfiguration::TimeoutPreviewVoteCloseType& WaitingForCardWindowConfiguration::
      getTimeoutPreviewVoteClose () const
      {
        return this->TimeoutPreviewVoteClose_.get ();
      }

      WaitingForCardWindowConfiguration::TimeoutPreviewVoteCloseType& WaitingForCardWindowConfiguration::
      getTimeoutPreviewVoteClose ()
      {
        return this->TimeoutPreviewVoteClose_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setTimeoutPreviewVoteClose (const TimeoutPreviewVoteCloseType& x)
      {
        this->TimeoutPreviewVoteClose_.set (x);
      }

      const WaitingForCardWindowConfiguration::ShowBarcodeInPreviewType& WaitingForCardWindowConfiguration::
      getShowBarcodeInPreview () const
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      WaitingForCardWindowConfiguration::ShowBarcodeInPreviewType& WaitingForCardWindowConfiguration::
      getShowBarcodeInPreview ()
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x)
      {
        this->ShowBarcodeInPreview_.set (x);
      }

      const WaitingForCardWindowConfiguration::BarcodeCommandsNameType& WaitingForCardWindowConfiguration::
      getBarcodeCommandsName () const
      {
        return this->BarcodeCommandsName_.get ();
      }

      WaitingForCardWindowConfiguration::BarcodeCommandsNameType& WaitingForCardWindowConfiguration::
      getBarcodeCommandsName ()
      {
        return this->BarcodeCommandsName_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setBarcodeCommandsName (const BarcodeCommandsNameType& x)
      {
        this->BarcodeCommandsName_.set (x);
      }

      void WaitingForCardWindowConfiguration::
      setBarcodeCommandsName (::std::auto_ptr< BarcodeCommandsNameType > x)
      {
        this->BarcodeCommandsName_.set (x);
      }

      const WaitingForCardWindowConfiguration::PreviewLanguageConfigType& WaitingForCardWindowConfiguration::
      getPreviewLanguageConfig () const
      {
        return this->PreviewLanguageConfig_.get ();
      }

      WaitingForCardWindowConfiguration::PreviewLanguageConfigType& WaitingForCardWindowConfiguration::
      getPreviewLanguageConfig ()
      {
        return this->PreviewLanguageConfig_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setPreviewLanguageConfig (const PreviewLanguageConfigType& x)
      {
        this->PreviewLanguageConfig_.set (x);
      }

      void WaitingForCardWindowConfiguration::
      setPreviewLanguageConfig (::std::auto_ptr< PreviewLanguageConfigType > x)
      {
        this->PreviewLanguageConfig_.set (x);
      }

      const WaitingForCardWindowConfiguration::BlockOnCardInsertionErrorType& WaitingForCardWindowConfiguration::
      getBlockOnCardInsertionError () const
      {
        return this->BlockOnCardInsertionError_.get ();
      }

      WaitingForCardWindowConfiguration::BlockOnCardInsertionErrorType& WaitingForCardWindowConfiguration::
      getBlockOnCardInsertionError ()
      {
        return this->BlockOnCardInsertionError_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setBlockOnCardInsertionError (const BlockOnCardInsertionErrorType& x)
      {
        this->BlockOnCardInsertionError_.set (x);
      }

      const WaitingForCardWindowConfiguration::IsNeopBlockingConditionType& WaitingForCardWindowConfiguration::
      getIsNeopBlockingCondition () const
      {
        return this->IsNeopBlockingCondition_.get ();
      }

      WaitingForCardWindowConfiguration::IsNeopBlockingConditionType& WaitingForCardWindowConfiguration::
      getIsNeopBlockingCondition ()
      {
        return this->IsNeopBlockingCondition_.get ();
      }

      void WaitingForCardWindowConfiguration::
      setIsNeopBlockingCondition (const IsNeopBlockingConditionType& x)
      {
        this->IsNeopBlockingCondition_.set (x);
      }


      // LanguageSelectionWindowConfiguration
      // 

      const LanguageSelectionWindowConfiguration::LanguageButtonSequence& LanguageSelectionWindowConfiguration::
      getLanguageButton () const
      {
        return this->LanguageButton_;
      }

      LanguageSelectionWindowConfiguration::LanguageButtonSequence& LanguageSelectionWindowConfiguration::
      getLanguageButton ()
      {
        return this->LanguageButton_;
      }

      void LanguageSelectionWindowConfiguration::
      setLanguageButton (const LanguageButtonSequence& s)
      {
        this->LanguageButton_ = s;
      }


      // StatisticFunctionalityConfiguration
      // 

      const StatisticFunctionalityConfiguration::RowsSpacingType& StatisticFunctionalityConfiguration::
      getRowsSpacing () const
      {
        return this->RowsSpacing_.get ();
      }

      StatisticFunctionalityConfiguration::RowsSpacingType& StatisticFunctionalityConfiguration::
      getRowsSpacing ()
      {
        return this->RowsSpacing_.get ();
      }

      void StatisticFunctionalityConfiguration::
      setRowsSpacing (const RowsSpacingType& x)
      {
        this->RowsSpacing_.set (x);
      }

      const StatisticFunctionalityConfiguration::ColumnsSpacingType& StatisticFunctionalityConfiguration::
      getColumnsSpacing () const
      {
        return this->ColumnsSpacing_.get ();
      }

      StatisticFunctionalityConfiguration::ColumnsSpacingType& StatisticFunctionalityConfiguration::
      getColumnsSpacing ()
      {
        return this->ColumnsSpacing_.get ();
      }

      void StatisticFunctionalityConfiguration::
      setColumnsSpacing (const ColumnsSpacingType& x)
      {
        this->ColumnsSpacing_.set (x);
      }

      const StatisticFunctionalityConfiguration::ButtonConfigurationType& StatisticFunctionalityConfiguration::
      getButtonConfiguration () const
      {
        return this->ButtonConfiguration_.get ();
      }

      StatisticFunctionalityConfiguration::ButtonConfigurationType& StatisticFunctionalityConfiguration::
      getButtonConfiguration ()
      {
        return this->ButtonConfiguration_.get ();
      }

      void StatisticFunctionalityConfiguration::
      setButtonConfiguration (const ButtonConfigurationType& x)
      {
        this->ButtonConfiguration_.set (x);
      }

      void StatisticFunctionalityConfiguration::
      setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > x)
      {
        this->ButtonConfiguration_.set (x);
      }

      const StatisticFunctionalityConfiguration::TitleLabelConfigurationType& StatisticFunctionalityConfiguration::
      getTitleLabelConfiguration () const
      {
        return this->TitleLabelConfiguration_.get ();
      }

      StatisticFunctionalityConfiguration::TitleLabelConfigurationType& StatisticFunctionalityConfiguration::
      getTitleLabelConfiguration ()
      {
        return this->TitleLabelConfiguration_.get ();
      }

      void StatisticFunctionalityConfiguration::
      setTitleLabelConfiguration (const TitleLabelConfigurationType& x)
      {
        this->TitleLabelConfiguration_.set (x);
      }

      void StatisticFunctionalityConfiguration::
      setTitleLabelConfiguration (::std::auto_ptr< TitleLabelConfigurationType > x)
      {
        this->TitleLabelConfiguration_.set (x);
      }

      const StatisticFunctionalityConfiguration::StatisticsLabelConfigurationType& StatisticFunctionalityConfiguration::
      getStatisticsLabelConfiguration () const
      {
        return this->StatisticsLabelConfiguration_.get ();
      }

      StatisticFunctionalityConfiguration::StatisticsLabelConfigurationType& StatisticFunctionalityConfiguration::
      getStatisticsLabelConfiguration ()
      {
        return this->StatisticsLabelConfiguration_.get ();
      }

      void StatisticFunctionalityConfiguration::
      setStatisticsLabelConfiguration (const StatisticsLabelConfigurationType& x)
      {
        this->StatisticsLabelConfiguration_.set (x);
      }

      void StatisticFunctionalityConfiguration::
      setStatisticsLabelConfiguration (::std::auto_ptr< StatisticsLabelConfigurationType > x)
      {
        this->StatisticsLabelConfiguration_.set (x);
      }


      // OpenElectionFunctionalityConfiguration
      // 

      const OpenElectionFunctionalityConfiguration::ShowTitleType& OpenElectionFunctionalityConfiguration::
      getShowTitle () const
      {
        return this->ShowTitle_.get ();
      }

      OpenElectionFunctionalityConfiguration::ShowTitleType& OpenElectionFunctionalityConfiguration::
      getShowTitle ()
      {
        return this->ShowTitle_.get ();
      }

      void OpenElectionFunctionalityConfiguration::
      setShowTitle (const ShowTitleType& x)
      {
        this->ShowTitle_.set (x);
      }

      const OpenElectionFunctionalityConfiguration::ButtonConfigurationType& OpenElectionFunctionalityConfiguration::
      getButtonConfiguration () const
      {
        return this->ButtonConfiguration_.get ();
      }

      OpenElectionFunctionalityConfiguration::ButtonConfigurationType& OpenElectionFunctionalityConfiguration::
      getButtonConfiguration ()
      {
        return this->ButtonConfiguration_.get ();
      }

      void OpenElectionFunctionalityConfiguration::
      setButtonConfiguration (const ButtonConfigurationType& x)
      {
        this->ButtonConfiguration_.set (x);
      }

      void OpenElectionFunctionalityConfiguration::
      setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > x)
      {
        this->ButtonConfiguration_.set (x);
      }

      const OpenElectionFunctionalityConfiguration::DialogLabelConfigurationType& OpenElectionFunctionalityConfiguration::
      getDialogLabelConfiguration () const
      {
        return this->DialogLabelConfiguration_.get ();
      }

      OpenElectionFunctionalityConfiguration::DialogLabelConfigurationType& OpenElectionFunctionalityConfiguration::
      getDialogLabelConfiguration ()
      {
        return this->DialogLabelConfiguration_.get ();
      }

      void OpenElectionFunctionalityConfiguration::
      setDialogLabelConfiguration (const DialogLabelConfigurationType& x)
      {
        this->DialogLabelConfiguration_.set (x);
      }

      void OpenElectionFunctionalityConfiguration::
      setDialogLabelConfiguration (::std::auto_ptr< DialogLabelConfigurationType > x)
      {
        this->DialogLabelConfiguration_.set (x);
      }

      const OpenElectionFunctionalityConfiguration::OpenElectionStepsSequence& OpenElectionFunctionalityConfiguration::
      getOpenElectionSteps () const
      {
        return this->OpenElectionSteps_;
      }

      OpenElectionFunctionalityConfiguration::OpenElectionStepsSequence& OpenElectionFunctionalityConfiguration::
      getOpenElectionSteps ()
      {
        return this->OpenElectionSteps_;
      }

      void OpenElectionFunctionalityConfiguration::
      setOpenElectionSteps (const OpenElectionStepsSequence& s)
      {
        this->OpenElectionSteps_ = s;
      }


      // AuthenticationWindowConfiguration
      // 

      const AuthenticationWindowConfiguration::PasswordLabelConfigurationType& AuthenticationWindowConfiguration::
      getPasswordLabelConfiguration () const
      {
        return this->PasswordLabelConfiguration_.get ();
      }

      AuthenticationWindowConfiguration::PasswordLabelConfigurationType& AuthenticationWindowConfiguration::
      getPasswordLabelConfiguration ()
      {
        return this->PasswordLabelConfiguration_.get ();
      }

      void AuthenticationWindowConfiguration::
      setPasswordLabelConfiguration (const PasswordLabelConfigurationType& x)
      {
        this->PasswordLabelConfiguration_.set (x);
      }

      void AuthenticationWindowConfiguration::
      setPasswordLabelConfiguration (::std::auto_ptr< PasswordLabelConfigurationType > x)
      {
        this->PasswordLabelConfiguration_.set (x);
      }

      const AuthenticationWindowConfiguration::AlarmLabelConfigurationType& AuthenticationWindowConfiguration::
      getAlarmLabelConfiguration () const
      {
        return this->AlarmLabelConfiguration_.get ();
      }

      AuthenticationWindowConfiguration::AlarmLabelConfigurationType& AuthenticationWindowConfiguration::
      getAlarmLabelConfiguration ()
      {
        return this->AlarmLabelConfiguration_.get ();
      }

      void AuthenticationWindowConfiguration::
      setAlarmLabelConfiguration (const AlarmLabelConfigurationType& x)
      {
        this->AlarmLabelConfiguration_.set (x);
      }

      void AuthenticationWindowConfiguration::
      setAlarmLabelConfiguration (::std::auto_ptr< AlarmLabelConfigurationType > x)
      {
        this->AlarmLabelConfiguration_.set (x);
      }

      const AuthenticationWindowConfiguration::InfoLabelConfigurationType& AuthenticationWindowConfiguration::
      getInfoLabelConfiguration () const
      {
        return this->InfoLabelConfiguration_.get ();
      }

      AuthenticationWindowConfiguration::InfoLabelConfigurationType& AuthenticationWindowConfiguration::
      getInfoLabelConfiguration ()
      {
        return this->InfoLabelConfiguration_.get ();
      }

      void AuthenticationWindowConfiguration::
      setInfoLabelConfiguration (const InfoLabelConfigurationType& x)
      {
        this->InfoLabelConfiguration_.set (x);
      }

      void AuthenticationWindowConfiguration::
      setInfoLabelConfiguration (::std::auto_ptr< InfoLabelConfigurationType > x)
      {
        this->InfoLabelConfiguration_.set (x);
      }

      const AuthenticationWindowConfiguration::VotingInfoLabelConfigurationType& AuthenticationWindowConfiguration::
      getVotingInfoLabelConfiguration () const
      {
        return this->VotingInfoLabelConfiguration_.get ();
      }

      AuthenticationWindowConfiguration::VotingInfoLabelConfigurationType& AuthenticationWindowConfiguration::
      getVotingInfoLabelConfiguration ()
      {
        return this->VotingInfoLabelConfiguration_.get ();
      }

      void AuthenticationWindowConfiguration::
      setVotingInfoLabelConfiguration (const VotingInfoLabelConfigurationType& x)
      {
        this->VotingInfoLabelConfiguration_.set (x);
      }

      void AuthenticationWindowConfiguration::
      setVotingInfoLabelConfiguration (::std::auto_ptr< VotingInfoLabelConfigurationType > x)
      {
        this->VotingInfoLabelConfiguration_.set (x);
      }


      // DurationWidgetConfiguration
      // 

      const DurationWidgetConfiguration::LeaveFieldsBlankType& DurationWidgetConfiguration::
      getLeaveFieldsBlank () const
      {
        return this->LeaveFieldsBlank_.get ();
      }

      DurationWidgetConfiguration::LeaveFieldsBlankType& DurationWidgetConfiguration::
      getLeaveFieldsBlank ()
      {
        return this->LeaveFieldsBlank_.get ();
      }

      void DurationWidgetConfiguration::
      setLeaveFieldsBlank (const LeaveFieldsBlankType& x)
      {
        this->LeaveFieldsBlank_.set (x);
      }


      // CloseElectionFunctionalityConfiguration
      // 

      const CloseElectionFunctionalityConfiguration::ButtonConfigurationType& CloseElectionFunctionalityConfiguration::
      getButtonConfiguration () const
      {
        return this->ButtonConfiguration_.get ();
      }

      CloseElectionFunctionalityConfiguration::ButtonConfigurationType& CloseElectionFunctionalityConfiguration::
      getButtonConfiguration ()
      {
        return this->ButtonConfiguration_.get ();
      }

      void CloseElectionFunctionalityConfiguration::
      setButtonConfiguration (const ButtonConfigurationType& x)
      {
        this->ButtonConfiguration_.set (x);
      }

      void CloseElectionFunctionalityConfiguration::
      setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > x)
      {
        this->ButtonConfiguration_.set (x);
      }

      const CloseElectionFunctionalityConfiguration::ClosingElectionStepsSequence& CloseElectionFunctionalityConfiguration::
      getClosingElectionSteps () const
      {
        return this->ClosingElectionSteps_;
      }

      CloseElectionFunctionalityConfiguration::ClosingElectionStepsSequence& CloseElectionFunctionalityConfiguration::
      getClosingElectionSteps ()
      {
        return this->ClosingElectionSteps_;
      }

      void CloseElectionFunctionalityConfiguration::
      setClosingElectionSteps (const ClosingElectionStepsSequence& s)
      {
        this->ClosingElectionSteps_ = s;
      }

      const CloseElectionFunctionalityConfiguration::ShowSignQuestionType& CloseElectionFunctionalityConfiguration::
      getShowSignQuestion () const
      {
        return this->ShowSignQuestion_.get ();
      }

      CloseElectionFunctionalityConfiguration::ShowSignQuestionType& CloseElectionFunctionalityConfiguration::
      getShowSignQuestion ()
      {
        return this->ShowSignQuestion_.get ();
      }

      void CloseElectionFunctionalityConfiguration::
      setShowSignQuestion (const ShowSignQuestionType& x)
      {
        this->ShowSignQuestion_.set (x);
      }

      const CloseElectionFunctionalityConfiguration::ShowSignConfirmationType& CloseElectionFunctionalityConfiguration::
      getShowSignConfirmation () const
      {
        return this->ShowSignConfirmation_.get ();
      }

      CloseElectionFunctionalityConfiguration::ShowSignConfirmationType& CloseElectionFunctionalityConfiguration::
      getShowSignConfirmation ()
      {
        return this->ShowSignConfirmation_.get ();
      }

      void CloseElectionFunctionalityConfiguration::
      setShowSignConfirmation (const ShowSignConfirmationType& x)
      {
        this->ShowSignConfirmation_.set (x);
      }

      const CloseElectionFunctionalityConfiguration::ContinueCloseOnSignFailType& CloseElectionFunctionalityConfiguration::
      getContinueCloseOnSignFail () const
      {
        return this->ContinueCloseOnSignFail_.get ();
      }

      CloseElectionFunctionalityConfiguration::ContinueCloseOnSignFailType& CloseElectionFunctionalityConfiguration::
      getContinueCloseOnSignFail ()
      {
        return this->ContinueCloseOnSignFail_.get ();
      }

      void CloseElectionFunctionalityConfiguration::
      setContinueCloseOnSignFail (const ContinueCloseOnSignFailType& x)
      {
        this->ContinueCloseOnSignFail_.set (x);
      }

      const CloseElectionFunctionalityConfiguration::ShowConfirmationType& CloseElectionFunctionalityConfiguration::
      getShowConfirmation () const
      {
        return this->ShowConfirmation_.get ();
      }

      CloseElectionFunctionalityConfiguration::ShowConfirmationType& CloseElectionFunctionalityConfiguration::
      getShowConfirmation ()
      {
        return this->ShowConfirmation_.get ();
      }

      void CloseElectionFunctionalityConfiguration::
      setShowConfirmation (const ShowConfirmationType& x)
      {
        this->ShowConfirmation_.set (x);
      }


      // ActivationConsolidationFunctionalityConfiguration
      // 

      const ActivationConsolidationFunctionalityConfiguration::ShowTotalVotesType& ActivationConsolidationFunctionalityConfiguration::
      getShowTotalVotes () const
      {
        return this->ShowTotalVotes_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ShowTotalVotesType& ActivationConsolidationFunctionalityConfiguration::
      getShowTotalVotes ()
      {
        return this->ShowTotalVotes_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setShowTotalVotes (const ShowTotalVotesType& x)
      {
        this->ShowTotalVotes_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ShowOfficialVotesType& ActivationConsolidationFunctionalityConfiguration::
      getShowOfficialVotes () const
      {
        return this->ShowOfficialVotes_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ShowOfficialVotesType& ActivationConsolidationFunctionalityConfiguration::
      getShowOfficialVotes ()
      {
        return this->ShowOfficialVotes_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setShowOfficialVotes (const ShowOfficialVotesType& x)
      {
        this->ShowOfficialVotes_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ShowDuplicatesVotesType& ActivationConsolidationFunctionalityConfiguration::
      getShowDuplicatesVotes () const
      {
        return this->ShowDuplicatesVotes_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ShowDuplicatesVotesType& ActivationConsolidationFunctionalityConfiguration::
      getShowDuplicatesVotes ()
      {
        return this->ShowDuplicatesVotes_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setShowDuplicatesVotes (const ShowDuplicatesVotesType& x)
      {
        this->ShowDuplicatesVotes_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ShowScanMessageType& ActivationConsolidationFunctionalityConfiguration::
      getShowScanMessage () const
      {
        return this->ShowScanMessage_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ShowScanMessageType& ActivationConsolidationFunctionalityConfiguration::
      getShowScanMessage ()
      {
        return this->ShowScanMessage_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setShowScanMessage (const ShowScanMessageType& x)
      {
        this->ShowScanMessage_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ShowBarcodeMessageType& ActivationConsolidationFunctionalityConfiguration::
      getShowBarcodeMessage () const
      {
        return this->ShowBarcodeMessage_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ShowBarcodeMessageType& ActivationConsolidationFunctionalityConfiguration::
      getShowBarcodeMessage ()
      {
        return this->ShowBarcodeMessage_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setShowBarcodeMessage (const ShowBarcodeMessageType& x)
      {
        this->ShowBarcodeMessage_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ShowActivateCardsType& ActivationConsolidationFunctionalityConfiguration::
      getShowActivateCards () const
      {
        return this->ShowActivateCards_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ShowActivateCardsType& ActivationConsolidationFunctionalityConfiguration::
      getShowActivateCards ()
      {
        return this->ShowActivateCards_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setShowActivateCards (const ShowActivateCardsType& x)
      {
        this->ShowActivateCards_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::SelectedBoxColorType& ActivationConsolidationFunctionalityConfiguration::
      getSelectedBoxColor () const
      {
        return this->SelectedBoxColor_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::SelectedBoxColorType& ActivationConsolidationFunctionalityConfiguration::
      getSelectedBoxColor ()
      {
        return this->SelectedBoxColor_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setSelectedBoxColor (const SelectedBoxColorType& x)
      {
        this->SelectedBoxColor_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setSelectedBoxColor (::std::auto_ptr< SelectedBoxColorType > x)
      {
        this->SelectedBoxColor_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::UnselectedBoxColorType& ActivationConsolidationFunctionalityConfiguration::
      getUnselectedBoxColor () const
      {
        return this->UnselectedBoxColor_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::UnselectedBoxColorType& ActivationConsolidationFunctionalityConfiguration::
      getUnselectedBoxColor ()
      {
        return this->UnselectedBoxColor_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setUnselectedBoxColor (const UnselectedBoxColorType& x)
      {
        this->UnselectedBoxColor_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setUnselectedBoxColor (::std::auto_ptr< UnselectedBoxColorType > x)
      {
        this->UnselectedBoxColor_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::SelectedFontColorType& ActivationConsolidationFunctionalityConfiguration::
      getSelectedFontColor () const
      {
        return this->SelectedFontColor_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::SelectedFontColorType& ActivationConsolidationFunctionalityConfiguration::
      getSelectedFontColor ()
      {
        return this->SelectedFontColor_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setSelectedFontColor (const SelectedFontColorType& x)
      {
        this->SelectedFontColor_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setSelectedFontColor (::std::auto_ptr< SelectedFontColorType > x)
      {
        this->SelectedFontColor_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::UnselectedFontColorType& ActivationConsolidationFunctionalityConfiguration::
      getUnselectedFontColor () const
      {
        return this->UnselectedFontColor_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::UnselectedFontColorType& ActivationConsolidationFunctionalityConfiguration::
      getUnselectedFontColor ()
      {
        return this->UnselectedFontColor_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setUnselectedFontColor (const UnselectedFontColorType& x)
      {
        this->UnselectedFontColor_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setUnselectedFontColor (::std::auto_ptr< UnselectedFontColorType > x)
      {
        this->UnselectedFontColor_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::LabelSelectedConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getLabelSelectedConfiguration () const
      {
        return this->LabelSelectedConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::LabelSelectedConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getLabelSelectedConfiguration ()
      {
        return this->LabelSelectedConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setLabelSelectedConfiguration (const LabelSelectedConfigurationType& x)
      {
        this->LabelSelectedConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setLabelSelectedConfiguration (::std::auto_ptr< LabelSelectedConfigurationType > x)
      {
        this->LabelSelectedConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::LabelUnselectedConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getLabelUnselectedConfiguration () const
      {
        return this->LabelUnselectedConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::LabelUnselectedConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getLabelUnselectedConfiguration ()
      {
        return this->LabelUnselectedConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setLabelUnselectedConfiguration (const LabelUnselectedConfigurationType& x)
      {
        this->LabelUnselectedConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setLabelUnselectedConfiguration (::std::auto_ptr< LabelUnselectedConfigurationType > x)
      {
        this->LabelUnselectedConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::TitleHeightType& ActivationConsolidationFunctionalityConfiguration::
      getTitleHeight () const
      {
        return this->TitleHeight_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::TitleHeightType& ActivationConsolidationFunctionalityConfiguration::
      getTitleHeight ()
      {
        return this->TitleHeight_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setTitleHeight (const TitleHeightType& x)
      {
        this->TitleHeight_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::TitleFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getTitleFontConfiguration () const
      {
        return this->TitleFontConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::TitleFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getTitleFontConfiguration ()
      {
        return this->TitleFontConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setTitleFontConfiguration (const TitleFontConfigurationType& x)
      {
        this->TitleFontConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setTitleFontConfiguration (::std::auto_ptr< TitleFontConfigurationType > x)
      {
        this->TitleFontConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::StatsConsolidationHeightType& ActivationConsolidationFunctionalityConfiguration::
      getStatsConsolidationHeight () const
      {
        return this->StatsConsolidationHeight_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::StatsConsolidationHeightType& ActivationConsolidationFunctionalityConfiguration::
      getStatsConsolidationHeight ()
      {
        return this->StatsConsolidationHeight_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setStatsConsolidationHeight (const StatsConsolidationHeightType& x)
      {
        this->StatsConsolidationHeight_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::StatsConsolidationFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getStatsConsolidationFontConfiguration () const
      {
        return this->StatsConsolidationFontConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::StatsConsolidationFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getStatsConsolidationFontConfiguration ()
      {
        return this->StatsConsolidationFontConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setStatsConsolidationFontConfiguration (const StatsConsolidationFontConfigurationType& x)
      {
        this->StatsConsolidationFontConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setStatsConsolidationFontConfiguration (::std::auto_ptr< StatsConsolidationFontConfigurationType > x)
      {
        this->StatsConsolidationFontConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::StatsActivationHeightType& ActivationConsolidationFunctionalityConfiguration::
      getStatsActivationHeight () const
      {
        return this->StatsActivationHeight_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::StatsActivationHeightType& ActivationConsolidationFunctionalityConfiguration::
      getStatsActivationHeight ()
      {
        return this->StatsActivationHeight_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setStatsActivationHeight (const StatsActivationHeightType& x)
      {
        this->StatsActivationHeight_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::StatsActivationFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getStatsActivationFontConfiguration () const
      {
        return this->StatsActivationFontConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::StatsActivationFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getStatsActivationFontConfiguration ()
      {
        return this->StatsActivationFontConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setStatsActivationFontConfiguration (const StatsActivationFontConfigurationType& x)
      {
        this->StatsActivationFontConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setStatsActivationFontConfiguration (::std::auto_ptr< StatsActivationFontConfigurationType > x)
      {
        this->StatsActivationFontConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::InstructionFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getInstructionFontConfiguration () const
      {
        return this->InstructionFontConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::InstructionFontConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getInstructionFontConfiguration ()
      {
        return this->InstructionFontConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setInstructionFontConfiguration (const InstructionFontConfigurationType& x)
      {
        this->InstructionFontConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setInstructionFontConfiguration (::std::auto_ptr< InstructionFontConfigurationType > x)
      {
        this->InstructionFontConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::DevicesLabelConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getDevicesLabelConfiguration () const
      {
        return this->DevicesLabelConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::DevicesLabelConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getDevicesLabelConfiguration ()
      {
        return this->DevicesLabelConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setDevicesLabelConfiguration (const DevicesLabelConfigurationType& x)
      {
        this->DevicesLabelConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setDevicesLabelConfiguration (::std::auto_ptr< DevicesLabelConfigurationType > x)
      {
        this->DevicesLabelConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ActivateCardsWithoutBarcodeType& ActivationConsolidationFunctionalityConfiguration::
      getActivateCardsWithoutBarcode () const
      {
        return this->ActivateCardsWithoutBarcode_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ActivateCardsWithoutBarcodeType& ActivationConsolidationFunctionalityConfiguration::
      getActivateCardsWithoutBarcode ()
      {
        return this->ActivateCardsWithoutBarcode_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setActivateCardsWithoutBarcode (const ActivateCardsWithoutBarcodeType& x)
      {
        this->ActivateCardsWithoutBarcode_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ConsolidateVoteWithOneMemoryType& ActivationConsolidationFunctionalityConfiguration::
      getConsolidateVoteWithOneMemory () const
      {
        return this->ConsolidateVoteWithOneMemory_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ConsolidateVoteWithOneMemoryType& ActivationConsolidationFunctionalityConfiguration::
      getConsolidateVoteWithOneMemory ()
      {
        return this->ConsolidateVoteWithOneMemory_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setConsolidateVoteWithOneMemory (const ConsolidateVoteWithOneMemoryType& x)
      {
        this->ConsolidateVoteWithOneMemory_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::BarcodeInParamsType& ActivationConsolidationFunctionalityConfiguration::
      getBarcodeInParams () const
      {
        return this->BarcodeInParams_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::BarcodeInParamsType& ActivationConsolidationFunctionalityConfiguration::
      getBarcodeInParams ()
      {
        return this->BarcodeInParams_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setBarcodeInParams (const BarcodeInParamsType& x)
      {
        this->BarcodeInParams_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > x)
      {
        this->BarcodeInParams_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::BarcodeOutParamsType& ActivationConsolidationFunctionalityConfiguration::
      getBarcodeOutParams () const
      {
        return this->BarcodeOutParams_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::BarcodeOutParamsType& ActivationConsolidationFunctionalityConfiguration::
      getBarcodeOutParams ()
      {
        return this->BarcodeOutParams_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setBarcodeOutParams (const BarcodeOutParamsType& x)
      {
        this->BarcodeOutParams_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > x)
      {
        this->BarcodeOutParams_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ScanConsolidationConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getScanConsolidationConfiguration () const
      {
        return this->ScanConsolidationConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ScanConsolidationConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getScanConsolidationConfiguration ()
      {
        return this->ScanConsolidationConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setScanConsolidationConfiguration (const ScanConsolidationConfigurationType& x)
      {
        this->ScanConsolidationConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setScanConsolidationConfiguration (::std::auto_ptr< ScanConsolidationConfigurationType > x)
      {
        this->ScanConsolidationConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::CardActivationTotalCountConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getCardActivationTotalCountConfiguration () const
      {
        return this->CardActivationTotalCountConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::CardActivationTotalCountConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getCardActivationTotalCountConfiguration ()
      {
        return this->CardActivationTotalCountConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setCardActivationTotalCountConfiguration (const CardActivationTotalCountConfigurationType& x)
      {
        this->CardActivationTotalCountConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setCardActivationTotalCountConfiguration (::std::auto_ptr< CardActivationTotalCountConfigurationType > x)
      {
        this->CardActivationTotalCountConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ConsolidationTotalCountConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getConsolidationTotalCountConfiguration () const
      {
        return this->ConsolidationTotalCountConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ConsolidationTotalCountConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getConsolidationTotalCountConfiguration ()
      {
        return this->ConsolidationTotalCountConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setConsolidationTotalCountConfiguration (const ConsolidationTotalCountConfigurationType& x)
      {
        this->ConsolidationTotalCountConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setConsolidationTotalCountConfiguration (::std::auto_ptr< ConsolidationTotalCountConfigurationType > x)
      {
        this->ConsolidationTotalCountConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::ConsolidationOfficialCountConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getConsolidationOfficialCountConfiguration () const
      {
        return this->ConsolidationOfficialCountConfiguration_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::ConsolidationOfficialCountConfigurationType& ActivationConsolidationFunctionalityConfiguration::
      getConsolidationOfficialCountConfiguration ()
      {
        return this->ConsolidationOfficialCountConfiguration_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setConsolidationOfficialCountConfiguration (const ConsolidationOfficialCountConfigurationType& x)
      {
        this->ConsolidationOfficialCountConfiguration_.set (x);
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setConsolidationOfficialCountConfiguration (::std::auto_ptr< ConsolidationOfficialCountConfigurationType > x)
      {
        this->ConsolidationOfficialCountConfiguration_.set (x);
      }

      const ActivationConsolidationFunctionalityConfiguration::TimerSleepWriteCardType& ActivationConsolidationFunctionalityConfiguration::
      getTimerSleepWriteCard () const
      {
        return this->TimerSleepWriteCard_.get ();
      }

      ActivationConsolidationFunctionalityConfiguration::TimerSleepWriteCardType& ActivationConsolidationFunctionalityConfiguration::
      getTimerSleepWriteCard ()
      {
        return this->TimerSleepWriteCard_.get ();
      }

      void ActivationConsolidationFunctionalityConfiguration::
      setTimerSleepWriteCard (const TimerSleepWriteCardType& x)
      {
        this->TimerSleepWriteCard_.set (x);
      }


      // CloseVotationFunctionalityConfiguration
      // 

      const CloseVotationFunctionalityConfiguration::RequestForIDType& CloseVotationFunctionalityConfiguration::
      getRequestForID () const
      {
        return this->RequestForID_.get ();
      }

      CloseVotationFunctionalityConfiguration::RequestForIDType& CloseVotationFunctionalityConfiguration::
      getRequestForID ()
      {
        return this->RequestForID_.get ();
      }

      void CloseVotationFunctionalityConfiguration::
      setRequestForID (const RequestForIDType& x)
      {
        this->RequestForID_.set (x);
      }

      const CloseVotationFunctionalityConfiguration::MinimumOfficialsActivationForConfirmationType& CloseVotationFunctionalityConfiguration::
      getMinimumOfficialsActivationForConfirmation () const
      {
        return this->MinimumOfficialsActivationForConfirmation_.get ();
      }

      CloseVotationFunctionalityConfiguration::MinimumOfficialsActivationForConfirmationType& CloseVotationFunctionalityConfiguration::
      getMinimumOfficialsActivationForConfirmation ()
      {
        return this->MinimumOfficialsActivationForConfirmation_.get ();
      }

      void CloseVotationFunctionalityConfiguration::
      setMinimumOfficialsActivationForConfirmation (const MinimumOfficialsActivationForConfirmationType& x)
      {
        this->MinimumOfficialsActivationForConfirmation_.set (x);
      }

      const CloseVotationFunctionalityConfiguration::ShowConfirmationMessageWhenClosingType& CloseVotationFunctionalityConfiguration::
      getShowConfirmationMessageWhenClosing () const
      {
        return this->ShowConfirmationMessageWhenClosing_.get ();
      }

      CloseVotationFunctionalityConfiguration::ShowConfirmationMessageWhenClosingType& CloseVotationFunctionalityConfiguration::
      getShowConfirmationMessageWhenClosing ()
      {
        return this->ShowConfirmationMessageWhenClosing_.get ();
      }

      void CloseVotationFunctionalityConfiguration::
      setShowConfirmationMessageWhenClosing (const ShowConfirmationMessageWhenClosingType& x)
      {
        this->ShowConfirmationMessageWhenClosing_.set (x);
      }


      // InitializationWindowConfiguration
      // 

      const InitializationWindowConfiguration::ContingencyCardEnabledType& InitializationWindowConfiguration::
      getContingencyCardEnabled () const
      {
        return this->ContingencyCardEnabled_.get ();
      }

      InitializationWindowConfiguration::ContingencyCardEnabledType& InitializationWindowConfiguration::
      getContingencyCardEnabled ()
      {
        return this->ContingencyCardEnabled_.get ();
      }

      void InitializationWindowConfiguration::
      setContingencyCardEnabled (const ContingencyCardEnabledType& x)
      {
        this->ContingencyCardEnabled_.set (x);
      }

      const InitializationWindowConfiguration::RemoveContingencyCardTitleType& InitializationWindowConfiguration::
      getRemoveContingencyCardTitle () const
      {
        return this->RemoveContingencyCardTitle_.get ();
      }

      InitializationWindowConfiguration::RemoveContingencyCardTitleType& InitializationWindowConfiguration::
      getRemoveContingencyCardTitle ()
      {
        return this->RemoveContingencyCardTitle_.get ();
      }

      void InitializationWindowConfiguration::
      setRemoveContingencyCardTitle (const RemoveContingencyCardTitleType& x)
      {
        this->RemoveContingencyCardTitle_.set (x);
      }

      void InitializationWindowConfiguration::
      setRemoveContingencyCardTitle (::std::auto_ptr< RemoveContingencyCardTitleType > x)
      {
        this->RemoveContingencyCardTitle_.set (x);
      }

      const InitializationWindowConfiguration::RemoveContingencyCardTextType& InitializationWindowConfiguration::
      getRemoveContingencyCardText () const
      {
        return this->RemoveContingencyCardText_.get ();
      }

      InitializationWindowConfiguration::RemoveContingencyCardTextType& InitializationWindowConfiguration::
      getRemoveContingencyCardText ()
      {
        return this->RemoveContingencyCardText_.get ();
      }

      void InitializationWindowConfiguration::
      setRemoveContingencyCardText (const RemoveContingencyCardTextType& x)
      {
        this->RemoveContingencyCardText_.set (x);
      }

      void InitializationWindowConfiguration::
      setRemoveContingencyCardText (::std::auto_ptr< RemoveContingencyCardTextType > x)
      {
        this->RemoveContingencyCardText_.set (x);
      }

      const InitializationWindowConfiguration::RequestForIDOnPresidentMachineInitializationType& InitializationWindowConfiguration::
      getRequestForIDOnPresidentMachineInitialization () const
      {
        return this->RequestForIDOnPresidentMachineInitialization_.get ();
      }

      InitializationWindowConfiguration::RequestForIDOnPresidentMachineInitializationType& InitializationWindowConfiguration::
      getRequestForIDOnPresidentMachineInitialization ()
      {
        return this->RequestForIDOnPresidentMachineInitialization_.get ();
      }

      void InitializationWindowConfiguration::
      setRequestForIDOnPresidentMachineInitialization (const RequestForIDOnPresidentMachineInitializationType& x)
      {
        this->RequestForIDOnPresidentMachineInitialization_.set (x);
      }


      // IncidentReportFunctionalityConfiguration
      // 

      const IncidentReportFunctionalityConfiguration::ButtonConfigurationType& IncidentReportFunctionalityConfiguration::
      getButtonConfiguration () const
      {
        return this->ButtonConfiguration_.get ();
      }

      IncidentReportFunctionalityConfiguration::ButtonConfigurationType& IncidentReportFunctionalityConfiguration::
      getButtonConfiguration ()
      {
        return this->ButtonConfiguration_.get ();
      }

      void IncidentReportFunctionalityConfiguration::
      setButtonConfiguration (const ButtonConfigurationType& x)
      {
        this->ButtonConfiguration_.set (x);
      }

      void IncidentReportFunctionalityConfiguration::
      setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > x)
      {
        this->ButtonConfiguration_.set (x);
      }

      const IncidentReportFunctionalityConfiguration::IncidentReportConfigurationSequence& IncidentReportFunctionalityConfiguration::
      getIncidentReportConfiguration () const
      {
        return this->IncidentReportConfiguration_;
      }

      IncidentReportFunctionalityConfiguration::IncidentReportConfigurationSequence& IncidentReportFunctionalityConfiguration::
      getIncidentReportConfiguration ()
      {
        return this->IncidentReportConfiguration_;
      }

      void IncidentReportFunctionalityConfiguration::
      setIncidentReportConfiguration (const IncidentReportConfigurationSequence& s)
      {
        this->IncidentReportConfiguration_ = s;
      }

      const IncidentReportFunctionalityConfiguration::CompleteReportParametersSequence& IncidentReportFunctionalityConfiguration::
      getCompleteReportParameters () const
      {
        return this->CompleteReportParameters_;
      }

      IncidentReportFunctionalityConfiguration::CompleteReportParametersSequence& IncidentReportFunctionalityConfiguration::
      getCompleteReportParameters ()
      {
        return this->CompleteReportParameters_;
      }

      void IncidentReportFunctionalityConfiguration::
      setCompleteReportParameters (const CompleteReportParametersSequence& s)
      {
        this->CompleteReportParameters_ = s;
      }

      const IncidentReportFunctionalityConfiguration::ShowIDType& IncidentReportFunctionalityConfiguration::
      getShowID () const
      {
        return this->ShowID_.get ();
      }

      IncidentReportFunctionalityConfiguration::ShowIDType& IncidentReportFunctionalityConfiguration::
      getShowID ()
      {
        return this->ShowID_.get ();
      }

      void IncidentReportFunctionalityConfiguration::
      setShowID (const ShowIDType& x)
      {
        this->ShowID_.set (x);
      }

      const IncidentReportFunctionalityConfiguration::ShowDeleteConfirmationType& IncidentReportFunctionalityConfiguration::
      getShowDeleteConfirmation () const
      {
        return this->ShowDeleteConfirmation_.get ();
      }

      IncidentReportFunctionalityConfiguration::ShowDeleteConfirmationType& IncidentReportFunctionalityConfiguration::
      getShowDeleteConfirmation ()
      {
        return this->ShowDeleteConfirmation_.get ();
      }

      void IncidentReportFunctionalityConfiguration::
      setShowDeleteConfirmation (const ShowDeleteConfirmationType& x)
      {
        this->ShowDeleteConfirmation_.set (x);
      }


      // PollWorkerRegisterFunctionalityConfiguration
      // 

      const PollWorkerRegisterFunctionalityConfiguration::ButtonConfigurationType& PollWorkerRegisterFunctionalityConfiguration::
      getButtonConfiguration () const
      {
        return this->ButtonConfiguration_.get ();
      }

      PollWorkerRegisterFunctionalityConfiguration::ButtonConfigurationType& PollWorkerRegisterFunctionalityConfiguration::
      getButtonConfiguration ()
      {
        return this->ButtonConfiguration_.get ();
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      setButtonConfiguration (const ButtonConfigurationType& x)
      {
        this->ButtonConfiguration_.set (x);
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > x)
      {
        this->ButtonConfiguration_.set (x);
      }

      const PollWorkerRegisterFunctionalityConfiguration::ShowDeleteConfirmationType& PollWorkerRegisterFunctionalityConfiguration::
      getShowDeleteConfirmation () const
      {
        return this->ShowDeleteConfirmation_.get ();
      }

      PollWorkerRegisterFunctionalityConfiguration::ShowDeleteConfirmationType& PollWorkerRegisterFunctionalityConfiguration::
      getShowDeleteConfirmation ()
      {
        return this->ShowDeleteConfirmation_.get ();
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      setShowDeleteConfirmation (const ShowDeleteConfirmationType& x)
      {
        this->ShowDeleteConfirmation_.set (x);
      }

      const PollWorkerRegisterFunctionalityConfiguration::RegisterWidgetConfigurationType& PollWorkerRegisterFunctionalityConfiguration::
      getRegisterWidgetConfiguration () const
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      PollWorkerRegisterFunctionalityConfiguration::RegisterWidgetConfigurationType& PollWorkerRegisterFunctionalityConfiguration::
      getRegisterWidgetConfiguration ()
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }

      const PollWorkerRegisterFunctionalityConfiguration::PollWorkerRegisterConfigurationSequence& PollWorkerRegisterFunctionalityConfiguration::
      getPollWorkerRegisterConfiguration () const
      {
        return this->PollWorkerRegisterConfiguration_;
      }

      PollWorkerRegisterFunctionalityConfiguration::PollWorkerRegisterConfigurationSequence& PollWorkerRegisterFunctionalityConfiguration::
      getPollWorkerRegisterConfiguration ()
      {
        return this->PollWorkerRegisterConfiguration_;
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      setPollWorkerRegisterConfiguration (const PollWorkerRegisterConfigurationSequence& s)
      {
        this->PollWorkerRegisterConfiguration_ = s;
      }


      // CloseNoteRegisterFunctionalityConfiguration
      // 

      const CloseNoteRegisterFunctionalityConfiguration::AddButtonConfType& CloseNoteRegisterFunctionalityConfiguration::
      getAddButtonConf () const
      {
        return this->AddButtonConf_.get ();
      }

      CloseNoteRegisterFunctionalityConfiguration::AddButtonConfType& CloseNoteRegisterFunctionalityConfiguration::
      getAddButtonConf ()
      {
        return this->AddButtonConf_.get ();
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setAddButtonConf (const AddButtonConfType& x)
      {
        this->AddButtonConf_.set (x);
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setAddButtonConf (::std::auto_ptr< AddButtonConfType > x)
      {
        this->AddButtonConf_.set (x);
      }

      const CloseNoteRegisterFunctionalityConfiguration::NextButtonConfType& CloseNoteRegisterFunctionalityConfiguration::
      getNextButtonConf () const
      {
        return this->NextButtonConf_.get ();
      }

      CloseNoteRegisterFunctionalityConfiguration::NextButtonConfType& CloseNoteRegisterFunctionalityConfiguration::
      getNextButtonConf ()
      {
        return this->NextButtonConf_.get ();
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setNextButtonConf (const NextButtonConfType& x)
      {
        this->NextButtonConf_.set (x);
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setNextButtonConf (::std::auto_ptr< NextButtonConfType > x)
      {
        this->NextButtonConf_.set (x);
      }

      const CloseNoteRegisterFunctionalityConfiguration::AddCancelButtonConfType& CloseNoteRegisterFunctionalityConfiguration::
      getAddCancelButtonConf () const
      {
        return this->AddCancelButtonConf_.get ();
      }

      CloseNoteRegisterFunctionalityConfiguration::AddCancelButtonConfType& CloseNoteRegisterFunctionalityConfiguration::
      getAddCancelButtonConf ()
      {
        return this->AddCancelButtonConf_.get ();
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setAddCancelButtonConf (const AddCancelButtonConfType& x)
      {
        this->AddCancelButtonConf_.set (x);
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setAddCancelButtonConf (::std::auto_ptr< AddCancelButtonConfType > x)
      {
        this->AddCancelButtonConf_.set (x);
      }

      const CloseNoteRegisterFunctionalityConfiguration::RegisterWidgetConfigurationType& CloseNoteRegisterFunctionalityConfiguration::
      getRegisterWidgetConfiguration () const
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      CloseNoteRegisterFunctionalityConfiguration::RegisterWidgetConfigurationType& CloseNoteRegisterFunctionalityConfiguration::
      getRegisterWidgetConfiguration ()
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }


      // VoteConsolidationFunctionalityConfiguration
      // 

      const VoteConsolidationFunctionalityConfiguration::UsePrintPreviewType& VoteConsolidationFunctionalityConfiguration::
      getUsePrintPreview () const
      {
        return this->UsePrintPreview_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::UsePrintPreviewType& VoteConsolidationFunctionalityConfiguration::
      getUsePrintPreview ()
      {
        return this->UsePrintPreview_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setUsePrintPreview (const UsePrintPreviewType& x)
      {
        this->UsePrintPreview_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::UseVerticalTableInPreviewType& VoteConsolidationFunctionalityConfiguration::
      getUseVerticalTableInPreview () const
      {
        return this->UseVerticalTableInPreview_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::UseVerticalTableInPreviewType& VoteConsolidationFunctionalityConfiguration::
      getUseVerticalTableInPreview ()
      {
        return this->UseVerticalTableInPreview_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setUseVerticalTableInPreview (const UseVerticalTableInPreviewType& x)
      {
        this->UseVerticalTableInPreview_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::CounterWidthType& VoteConsolidationFunctionalityConfiguration::
      getCounterWidth () const
      {
        return this->CounterWidth_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::CounterWidthType& VoteConsolidationFunctionalityConfiguration::
      getCounterWidth ()
      {
        return this->CounterWidth_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setCounterWidth (const CounterWidthType& x)
      {
        this->CounterWidth_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::CounterPaddingType& VoteConsolidationFunctionalityConfiguration::
      getCounterPadding () const
      {
        return this->CounterPadding_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::CounterPaddingType& VoteConsolidationFunctionalityConfiguration::
      getCounterPadding ()
      {
        return this->CounterPadding_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setCounterPadding (const CounterPaddingType& x)
      {
        this->CounterPadding_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::ShowVotingMachineCustomAttributeType& VoteConsolidationFunctionalityConfiguration::
      getShowVotingMachineCustomAttribute () const
      {
        return this->ShowVotingMachineCustomAttribute_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::ShowVotingMachineCustomAttributeType& VoteConsolidationFunctionalityConfiguration::
      getShowVotingMachineCustomAttribute ()
      {
        return this->ShowVotingMachineCustomAttribute_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setShowVotingMachineCustomAttribute (const ShowVotingMachineCustomAttributeType& x)
      {
        this->ShowVotingMachineCustomAttribute_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::StatisticsTitleLabelConfigurationType& VoteConsolidationFunctionalityConfiguration::
      getStatisticsTitleLabelConfiguration () const
      {
        return this->StatisticsTitleLabelConfiguration_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::StatisticsTitleLabelConfigurationType& VoteConsolidationFunctionalityConfiguration::
      getStatisticsTitleLabelConfiguration ()
      {
        return this->StatisticsTitleLabelConfiguration_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setStatisticsTitleLabelConfiguration (const StatisticsTitleLabelConfigurationType& x)
      {
        this->StatisticsTitleLabelConfiguration_.set (x);
      }

      void VoteConsolidationFunctionalityConfiguration::
      setStatisticsTitleLabelConfiguration (::std::auto_ptr< StatisticsTitleLabelConfigurationType > x)
      {
        this->StatisticsTitleLabelConfiguration_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::StatisticsTitleColorType& VoteConsolidationFunctionalityConfiguration::
      getStatisticsTitleColor () const
      {
        return this->StatisticsTitleColor_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::StatisticsTitleColorType& VoteConsolidationFunctionalityConfiguration::
      getStatisticsTitleColor ()
      {
        return this->StatisticsTitleColor_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setStatisticsTitleColor (const StatisticsTitleColorType& x)
      {
        this->StatisticsTitleColor_.set (x);
      }

      void VoteConsolidationFunctionalityConfiguration::
      setStatisticsTitleColor (::std::auto_ptr< StatisticsTitleColorType > x)
      {
        this->StatisticsTitleColor_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::ShowBarcodeInPreviewType& VoteConsolidationFunctionalityConfiguration::
      getShowBarcodeInPreview () const
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::ShowBarcodeInPreviewType& VoteConsolidationFunctionalityConfiguration::
      getShowBarcodeInPreview ()
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x)
      {
        this->ShowBarcodeInPreview_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::ConsolidateDemoVotesType& VoteConsolidationFunctionalityConfiguration::
      getConsolidateDemoVotes () const
      {
        return this->ConsolidateDemoVotes_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::ConsolidateDemoVotesType& VoteConsolidationFunctionalityConfiguration::
      getConsolidateDemoVotes ()
      {
        return this->ConsolidateDemoVotes_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setConsolidateDemoVotes (const ConsolidateDemoVotesType& x)
      {
        this->ConsolidateDemoVotes_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::ConsolidateSimulatedVotesType& VoteConsolidationFunctionalityConfiguration::
      getConsolidateSimulatedVotes () const
      {
        return this->ConsolidateSimulatedVotes_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::ConsolidateSimulatedVotesType& VoteConsolidationFunctionalityConfiguration::
      getConsolidateSimulatedVotes ()
      {
        return this->ConsolidateSimulatedVotes_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setConsolidateSimulatedVotes (const ConsolidateSimulatedVotesType& x)
      {
        this->ConsolidateSimulatedVotes_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::AuditModeResourcesType& VoteConsolidationFunctionalityConfiguration::
      getAuditModeResources () const
      {
        return this->AuditModeResources_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::AuditModeResourcesType& VoteConsolidationFunctionalityConfiguration::
      getAuditModeResources ()
      {
        return this->AuditModeResources_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setAuditModeResources (const AuditModeResourcesType& x)
      {
        this->AuditModeResources_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::BarcodeInParamsType& VoteConsolidationFunctionalityConfiguration::
      getBarcodeInParams () const
      {
        return this->BarcodeInParams_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::BarcodeInParamsType& VoteConsolidationFunctionalityConfiguration::
      getBarcodeInParams ()
      {
        return this->BarcodeInParams_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setBarcodeInParams (const BarcodeInParamsType& x)
      {
        this->BarcodeInParams_.set (x);
      }

      void VoteConsolidationFunctionalityConfiguration::
      setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > x)
      {
        this->BarcodeInParams_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::BarcodeOutParamsType& VoteConsolidationFunctionalityConfiguration::
      getBarcodeOutParams () const
      {
        return this->BarcodeOutParams_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::BarcodeOutParamsType& VoteConsolidationFunctionalityConfiguration::
      getBarcodeOutParams ()
      {
        return this->BarcodeOutParams_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setBarcodeOutParams (const BarcodeOutParamsType& x)
      {
        this->BarcodeOutParams_.set (x);
      }

      void VoteConsolidationFunctionalityConfiguration::
      setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > x)
      {
        this->BarcodeOutParams_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::ConsolidationTotalCountConfigurationType& VoteConsolidationFunctionalityConfiguration::
      getConsolidationTotalCountConfiguration () const
      {
        return this->ConsolidationTotalCountConfiguration_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::ConsolidationTotalCountConfigurationType& VoteConsolidationFunctionalityConfiguration::
      getConsolidationTotalCountConfiguration ()
      {
        return this->ConsolidationTotalCountConfiguration_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setConsolidationTotalCountConfiguration (const ConsolidationTotalCountConfigurationType& x)
      {
        this->ConsolidationTotalCountConfiguration_.set (x);
      }

      void VoteConsolidationFunctionalityConfiguration::
      setConsolidationTotalCountConfiguration (::std::auto_ptr< ConsolidationTotalCountConfigurationType > x)
      {
        this->ConsolidationTotalCountConfiguration_.set (x);
      }

      const VoteConsolidationFunctionalityConfiguration::ConsolidationOfficialCountConfigurationType& VoteConsolidationFunctionalityConfiguration::
      getConsolidationOfficialCountConfiguration () const
      {
        return this->ConsolidationOfficialCountConfiguration_.get ();
      }

      VoteConsolidationFunctionalityConfiguration::ConsolidationOfficialCountConfigurationType& VoteConsolidationFunctionalityConfiguration::
      getConsolidationOfficialCountConfiguration ()
      {
        return this->ConsolidationOfficialCountConfiguration_.get ();
      }

      void VoteConsolidationFunctionalityConfiguration::
      setConsolidationOfficialCountConfiguration (const ConsolidationOfficialCountConfigurationType& x)
      {
        this->ConsolidationOfficialCountConfiguration_.set (x);
      }

      void VoteConsolidationFunctionalityConfiguration::
      setConsolidationOfficialCountConfiguration (::std::auto_ptr< ConsolidationOfficialCountConfigurationType > x)
      {
        this->ConsolidationOfficialCountConfiguration_.set (x);
      }


      // PrintPreviewFunctionalityConfiguration
      // 

      const PrintPreviewFunctionalityConfiguration::UsePrintPreviewType& PrintPreviewFunctionalityConfiguration::
      getUsePrintPreview () const
      {
        return this->UsePrintPreview_.get ();
      }

      PrintPreviewFunctionalityConfiguration::UsePrintPreviewType& PrintPreviewFunctionalityConfiguration::
      getUsePrintPreview ()
      {
        return this->UsePrintPreview_.get ();
      }

      void PrintPreviewFunctionalityConfiguration::
      setUsePrintPreview (const UsePrintPreviewType& x)
      {
        this->UsePrintPreview_.set (x);
      }

      const PrintPreviewFunctionalityConfiguration::UseVerticalTableInPreviewType& PrintPreviewFunctionalityConfiguration::
      getUseVerticalTableInPreview () const
      {
        return this->UseVerticalTableInPreview_.get ();
      }

      PrintPreviewFunctionalityConfiguration::UseVerticalTableInPreviewType& PrintPreviewFunctionalityConfiguration::
      getUseVerticalTableInPreview ()
      {
        return this->UseVerticalTableInPreview_.get ();
      }

      void PrintPreviewFunctionalityConfiguration::
      setUseVerticalTableInPreview (const UseVerticalTableInPreviewType& x)
      {
        this->UseVerticalTableInPreview_.set (x);
      }

      const PrintPreviewFunctionalityConfiguration::ShowBarcodeInPreviewType& PrintPreviewFunctionalityConfiguration::
      getShowBarcodeInPreview () const
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      PrintPreviewFunctionalityConfiguration::ShowBarcodeInPreviewType& PrintPreviewFunctionalityConfiguration::
      getShowBarcodeInPreview ()
      {
        return this->ShowBarcodeInPreview_.get ();
      }

      void PrintPreviewFunctionalityConfiguration::
      setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x)
      {
        this->ShowBarcodeInPreview_.set (x);
      }

      const PrintPreviewFunctionalityConfiguration::BarcodeInParamsType& PrintPreviewFunctionalityConfiguration::
      getBarcodeInParams () const
      {
        return this->BarcodeInParams_.get ();
      }

      PrintPreviewFunctionalityConfiguration::BarcodeInParamsType& PrintPreviewFunctionalityConfiguration::
      getBarcodeInParams ()
      {
        return this->BarcodeInParams_.get ();
      }

      void PrintPreviewFunctionalityConfiguration::
      setBarcodeInParams (const BarcodeInParamsType& x)
      {
        this->BarcodeInParams_.set (x);
      }

      void PrintPreviewFunctionalityConfiguration::
      setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > x)
      {
        this->BarcodeInParams_.set (x);
      }

      const PrintPreviewFunctionalityConfiguration::BarcodeOutParamsType& PrintPreviewFunctionalityConfiguration::
      getBarcodeOutParams () const
      {
        return this->BarcodeOutParams_.get ();
      }

      PrintPreviewFunctionalityConfiguration::BarcodeOutParamsType& PrintPreviewFunctionalityConfiguration::
      getBarcodeOutParams ()
      {
        return this->BarcodeOutParams_.get ();
      }

      void PrintPreviewFunctionalityConfiguration::
      setBarcodeOutParams (const BarcodeOutParamsType& x)
      {
        this->BarcodeOutParams_.set (x);
      }

      void PrintPreviewFunctionalityConfiguration::
      setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > x)
      {
        this->BarcodeOutParams_.set (x);
      }


      // LogReportFunctionalityConfiguration
      // 

      const LogReportFunctionalityConfiguration::PrinterMessageTimeoutType& LogReportFunctionalityConfiguration::
      getPrinterMessageTimeout () const
      {
        return this->PrinterMessageTimeout_.get ();
      }

      LogReportFunctionalityConfiguration::PrinterMessageTimeoutType& LogReportFunctionalityConfiguration::
      getPrinterMessageTimeout ()
      {
        return this->PrinterMessageTimeout_.get ();
      }

      void LogReportFunctionalityConfiguration::
      setPrinterMessageTimeout (const PrinterMessageTimeoutType& x)
      {
        this->PrinterMessageTimeout_.set (x);
      }

      const LogReportFunctionalityConfiguration::PageSizeType& LogReportFunctionalityConfiguration::
      getPageSize () const
      {
        return this->PageSize_.get ();
      }

      LogReportFunctionalityConfiguration::PageSizeType& LogReportFunctionalityConfiguration::
      getPageSize ()
      {
        return this->PageSize_.get ();
      }

      void LogReportFunctionalityConfiguration::
      setPageSize (const PageSizeType& x)
      {
        this->PageSize_.set (x);
      }


      // CloseNotetFunctionalityConfiguration
      // 

      const CloseNotetFunctionalityConfiguration::MinimunNotesToRegisterType& CloseNotetFunctionalityConfiguration::
      getMinimunNotesToRegister () const
      {
        return this->MinimunNotesToRegister_.get ();
      }

      CloseNotetFunctionalityConfiguration::MinimunNotesToRegisterType& CloseNotetFunctionalityConfiguration::
      getMinimunNotesToRegister ()
      {
        return this->MinimunNotesToRegister_.get ();
      }

      void CloseNotetFunctionalityConfiguration::
      setMinimunNotesToRegister (const MinimunNotesToRegisterType& x)
      {
        this->MinimunNotesToRegister_.set (x);
      }


      // VotingExperienceValidationScreensFunctionalityConfiguration
      // 

      const VotingExperienceValidationScreensFunctionalityConfiguration::ScreenOnlyFirstBallotType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getScreenOnlyFirstBallot () const
      {
        return this->ScreenOnlyFirstBallot_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::ScreenOnlyFirstBallotType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getScreenOnlyFirstBallot ()
      {
        return this->ScreenOnlyFirstBallot_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setScreenOnlyFirstBallot (const ScreenOnlyFirstBallotType& x)
      {
        this->ScreenOnlyFirstBallot_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::AutorunType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getAutorun () const
      {
        return this->Autorun_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::AutorunType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getAutorun ()
      {
        return this->Autorun_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setAutorun (const AutorunType& x)
      {
        this->Autorun_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::TimeForStartType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeForStart () const
      {
        return this->TimeForStart_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::TimeForStartType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeForStart ()
      {
        return this->TimeForStart_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setTimeForStart (const TimeForStartType& x)
      {
        this->TimeForStart_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::AutocloseType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getAutoclose () const
      {
        return this->Autoclose_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::AutocloseType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getAutoclose ()
      {
        return this->Autoclose_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setAutoclose (const AutocloseType& x)
      {
        this->Autoclose_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::TimeForCloseType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeForClose () const
      {
        return this->TimeForClose_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::TimeForCloseType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeForClose ()
      {
        return this->TimeForClose_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setTimeForClose (const TimeForCloseType& x)
      {
        this->TimeForClose_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::TimeToShowType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeToShow () const
      {
        return this->TimeToShow_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::TimeToShowType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeToShow ()
      {
        return this->TimeToShow_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setTimeToShow (const TimeToShowType& x)
      {
        this->TimeToShow_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::TimeToHideType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeToHide () const
      {
        return this->TimeToHide_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::TimeToHideType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeToHide ()
      {
        return this->TimeToHide_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setTimeToHide (const TimeToHideType& x)
      {
        this->TimeToHide_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::TimeAfterCaptureType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeAfterCapture () const
      {
        return this->TimeAfterCapture_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::TimeAfterCaptureType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getTimeAfterCapture ()
      {
        return this->TimeAfterCapture_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setTimeAfterCapture (const TimeAfterCaptureType& x)
      {
        this->TimeAfterCapture_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::CaptureWholeScreenType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCaptureWholeScreen () const
      {
        return this->CaptureWholeScreen_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::CaptureWholeScreenType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCaptureWholeScreen ()
      {
        return this->CaptureWholeScreen_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCaptureWholeScreen (const CaptureWholeScreenType& x)
      {
        this->CaptureWholeScreen_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::PartySelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getPartySelImageFormatName () const
      {
        return this->PartySelImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::PartySelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getPartySelImageFormatName ()
      {
        return this->PartySelImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setPartySelImageFormatName (const PartySelImageFormatNameType& x)
      {
        this->PartySelImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setPartySelImageFormatName (::std::auto_ptr< PartySelImageFormatNameType > x)
      {
        this->PartySelImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::OptionSelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getOptionSelImageFormatName () const
      {
        return this->OptionSelImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::OptionSelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getOptionSelImageFormatName ()
      {
        return this->OptionSelImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setOptionSelImageFormatName (const OptionSelImageFormatNameType& x)
      {
        this->OptionSelImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setOptionSelImageFormatName (::std::auto_ptr< OptionSelImageFormatNameType > x)
      {
        this->OptionSelImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::CustomAttrSelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCustomAttrSelImageFormatName () const
      {
        return this->CustomAttrSelImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::CustomAttrSelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCustomAttrSelImageFormatName ()
      {
        return this->CustomAttrSelImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCustomAttrSelImageFormatName (const CustomAttrSelImageFormatNameType& x)
      {
        this->CustomAttrSelImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCustomAttrSelImageFormatName (::std::auto_ptr< CustomAttrSelImageFormatNameType > x)
      {
        this->CustomAttrSelImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::CustomAttrConfImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCustomAttrConfImageFormatName () const
      {
        return this->CustomAttrConfImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::CustomAttrConfImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCustomAttrConfImageFormatName ()
      {
        return this->CustomAttrConfImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCustomAttrConfImageFormatName (const CustomAttrConfImageFormatNameType& x)
      {
        this->CustomAttrConfImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCustomAttrConfImageFormatName (::std::auto_ptr< CustomAttrConfImageFormatNameType > x)
      {
        this->CustomAttrConfImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::LanguageSelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getLanguageSelImageFormatName () const
      {
        return this->LanguageSelImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::LanguageSelImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getLanguageSelImageFormatName ()
      {
        return this->LanguageSelImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setLanguageSelImageFormatName (const LanguageSelImageFormatNameType& x)
      {
        this->LanguageSelImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setLanguageSelImageFormatName (::std::auto_ptr< LanguageSelImageFormatNameType > x)
      {
        this->LanguageSelImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::LanguageSelImageFormatNameConfirmationType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getLanguageSelImageFormatNameConfirmation () const
      {
        return this->LanguageSelImageFormatNameConfirmation_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::LanguageSelImageFormatNameConfirmationType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getLanguageSelImageFormatNameConfirmation ()
      {
        return this->LanguageSelImageFormatNameConfirmation_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setLanguageSelImageFormatNameConfirmation (const LanguageSelImageFormatNameConfirmationType& x)
      {
        this->LanguageSelImageFormatNameConfirmation_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setLanguageSelImageFormatNameConfirmation (::std::auto_ptr< LanguageSelImageFormatNameConfirmationType > x)
      {
        this->LanguageSelImageFormatNameConfirmation_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::SuperNullImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getSuperNullImageFormatName () const
      {
        return this->SuperNullImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::SuperNullImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getSuperNullImageFormatName ()
      {
        return this->SuperNullImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setSuperNullImageFormatName (const SuperNullImageFormatNameType& x)
      {
        this->SuperNullImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setSuperNullImageFormatName (::std::auto_ptr< SuperNullImageFormatNameType > x)
      {
        this->SuperNullImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::SuperNullImageFormatNameConfirmationType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getSuperNullImageFormatNameConfirmation () const
      {
        return this->SuperNullImageFormatNameConfirmation_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::SuperNullImageFormatNameConfirmationType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getSuperNullImageFormatNameConfirmation ()
      {
        return this->SuperNullImageFormatNameConfirmation_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setSuperNullImageFormatNameConfirmation (const SuperNullImageFormatNameConfirmationType& x)
      {
        this->SuperNullImageFormatNameConfirmation_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setSuperNullImageFormatNameConfirmation (::std::auto_ptr< SuperNullImageFormatNameConfirmationType > x)
      {
        this->SuperNullImageFormatNameConfirmation_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::PrintImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getPrintImageFormatName () const
      {
        return this->PrintImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::PrintImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getPrintImageFormatName ()
      {
        return this->PrintImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setPrintImageFormatName (const PrintImageFormatNameType& x)
      {
        this->PrintImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setPrintImageFormatName (::std::auto_ptr< PrintImageFormatNameType > x)
      {
        this->PrintImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::CardRemotionIndImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCardRemotionIndImageFormatName () const
      {
        return this->CardRemotionIndImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::CardRemotionIndImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCardRemotionIndImageFormatName ()
      {
        return this->CardRemotionIndImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCardRemotionIndImageFormatName (const CardRemotionIndImageFormatNameType& x)
      {
        this->CardRemotionIndImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCardRemotionIndImageFormatName (::std::auto_ptr< CardRemotionIndImageFormatNameType > x)
      {
        this->CardRemotionIndImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::CardRemovedImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCardRemovedImageFormatName () const
      {
        return this->CardRemovedImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::CardRemovedImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCardRemovedImageFormatName ()
      {
        return this->CardRemovedImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCardRemovedImageFormatName (const CardRemovedImageFormatNameType& x)
      {
        this->CardRemovedImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCardRemovedImageFormatName (::std::auto_ptr< CardRemovedImageFormatNameType > x)
      {
        this->CardRemovedImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::FoldVoteImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getFoldVoteImageFormatName () const
      {
        return this->FoldVoteImageFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::FoldVoteImageFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getFoldVoteImageFormatName ()
      {
        return this->FoldVoteImageFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setFoldVoteImageFormatName (const FoldVoteImageFormatNameType& x)
      {
        this->FoldVoteImageFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setFoldVoteImageFormatName (::std::auto_ptr< FoldVoteImageFormatNameType > x)
      {
        this->FoldVoteImageFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::NullImageConfirmationFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getNullImageConfirmationFormatName () const
      {
        return this->NullImageConfirmationFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::NullImageConfirmationFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getNullImageConfirmationFormatName ()
      {
        return this->NullImageConfirmationFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setNullImageConfirmationFormatName (const NullImageConfirmationFormatNameType& x)
      {
        this->NullImageConfirmationFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setNullImageConfirmationFormatName (::std::auto_ptr< NullImageConfirmationFormatNameType > x)
      {
        this->NullImageConfirmationFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::WelcomeScreenFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getWelcomeScreenFormatName () const
      {
        return this->WelcomeScreenFormatName_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::WelcomeScreenFormatNameType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getWelcomeScreenFormatName ()
      {
        return this->WelcomeScreenFormatName_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setWelcomeScreenFormatName (const WelcomeScreenFormatNameType& x)
      {
        this->WelcomeScreenFormatName_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setWelcomeScreenFormatName (::std::auto_ptr< WelcomeScreenFormatNameType > x)
      {
        this->WelcomeScreenFormatName_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::ShowDialogType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getShowDialog () const
      {
        return this->ShowDialog_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::ShowDialogType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getShowDialog ()
      {
        return this->ShowDialog_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setShowDialog (const ShowDialogType& x)
      {
        this->ShowDialog_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::ScreensButtonConfType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getScreensButtonConf () const
      {
        return this->ScreensButtonConf_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::ScreensButtonConfType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getScreensButtonConf ()
      {
        return this->ScreensButtonConf_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setScreensButtonConf (const ScreensButtonConfType& x)
      {
        this->ScreensButtonConf_.set (x);
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setScreensButtonConf (::std::auto_ptr< ScreensButtonConfType > x)
      {
        this->ScreensButtonConf_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::CheckImageFileType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCheckImageFile () const
      {
        return this->CheckImageFile_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::CheckImageFileType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getCheckImageFile ()
      {
        return this->CheckImageFile_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setCheckImageFile (const CheckImageFileType& x)
      {
        this->CheckImageFile_.set (x);
      }

      const VotingExperienceValidationScreensFunctionalityConfiguration::ShowFinalMessageType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getShowFinalMessage () const
      {
        return this->ShowFinalMessage_.get ();
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::ShowFinalMessageType& VotingExperienceValidationScreensFunctionalityConfiguration::
      getShowFinalMessage ()
      {
        return this->ShowFinalMessage_.get ();
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      setShowFinalMessage (const ShowFinalMessageType& x)
      {
        this->ShowFinalMessage_.set (x);
      }


      // VotingForDisabledFunctionalityConfiguration
      // 

      const VotingForDisabledFunctionalityConfiguration::AddButtonConfType& VotingForDisabledFunctionalityConfiguration::
      getAddButtonConf () const
      {
        return this->AddButtonConf_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::AddButtonConfType& VotingForDisabledFunctionalityConfiguration::
      getAddButtonConf ()
      {
        return this->AddButtonConf_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setAddButtonConf (const AddButtonConfType& x)
      {
        this->AddButtonConf_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setAddButtonConf (::std::auto_ptr< AddButtonConfType > x)
      {
        this->AddButtonConf_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::QuestionTitleConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getQuestionTitleConfiguration () const
      {
        return this->QuestionTitleConfiguration_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::QuestionTitleConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getQuestionTitleConfiguration ()
      {
        return this->QuestionTitleConfiguration_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setQuestionTitleConfiguration (const QuestionTitleConfigurationType& x)
      {
        this->QuestionTitleConfiguration_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setQuestionTitleConfiguration (::std::auto_ptr< QuestionTitleConfigurationType > x)
      {
        this->QuestionTitleConfiguration_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::QuestionButtonConfType& VotingForDisabledFunctionalityConfiguration::
      getQuestionButtonConf () const
      {
        return this->QuestionButtonConf_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::QuestionButtonConfType& VotingForDisabledFunctionalityConfiguration::
      getQuestionButtonConf ()
      {
        return this->QuestionButtonConf_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setQuestionButtonConf (const QuestionButtonConfType& x)
      {
        this->QuestionButtonConf_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setQuestionButtonConf (::std::auto_ptr< QuestionButtonConfType > x)
      {
        this->QuestionButtonConf_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::InfoTitleConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoTitleConfiguration () const
      {
        return this->InfoTitleConfiguration_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::InfoTitleConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoTitleConfiguration ()
      {
        return this->InfoTitleConfiguration_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoTitleConfiguration (const InfoTitleConfigurationType& x)
      {
        this->InfoTitleConfiguration_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoTitleConfiguration (::std::auto_ptr< InfoTitleConfigurationType > x)
      {
        this->InfoTitleConfiguration_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::InfoIDConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoIDConfiguration () const
      {
        return this->InfoIDConfiguration_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::InfoIDConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoIDConfiguration ()
      {
        return this->InfoIDConfiguration_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoIDConfiguration (const InfoIDConfigurationType& x)
      {
        this->InfoIDConfiguration_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoIDConfiguration (::std::auto_ptr< InfoIDConfigurationType > x)
      {
        this->InfoIDConfiguration_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::InfoTextConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoTextConfiguration () const
      {
        return this->InfoTextConfiguration_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::InfoTextConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoTextConfiguration ()
      {
        return this->InfoTextConfiguration_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoTextConfiguration (const InfoTextConfigurationType& x)
      {
        this->InfoTextConfiguration_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoTextConfiguration (::std::auto_ptr< InfoTextConfigurationType > x)
      {
        this->InfoTextConfiguration_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::InfoErrorConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoErrorConfiguration () const
      {
        return this->InfoErrorConfiguration_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::InfoErrorConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getInfoErrorConfiguration ()
      {
        return this->InfoErrorConfiguration_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoErrorConfiguration (const InfoErrorConfigurationType& x)
      {
        this->InfoErrorConfiguration_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setInfoErrorConfiguration (::std::auto_ptr< InfoErrorConfigurationType > x)
      {
        this->InfoErrorConfiguration_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::TimeOutInfoErrorType& VotingForDisabledFunctionalityConfiguration::
      getTimeOutInfoError () const
      {
        return this->TimeOutInfoError_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::TimeOutInfoErrorType& VotingForDisabledFunctionalityConfiguration::
      getTimeOutInfoError ()
      {
        return this->TimeOutInfoError_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setTimeOutInfoError (const TimeOutInfoErrorType& x)
      {
        this->TimeOutInfoError_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::AddCancelButtonConfType& VotingForDisabledFunctionalityConfiguration::
      getAddCancelButtonConf () const
      {
        return this->AddCancelButtonConf_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::AddCancelButtonConfType& VotingForDisabledFunctionalityConfiguration::
      getAddCancelButtonConf ()
      {
        return this->AddCancelButtonConf_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setAddCancelButtonConf (const AddCancelButtonConfType& x)
      {
        this->AddCancelButtonConf_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setAddCancelButtonConf (::std::auto_ptr< AddCancelButtonConfType > x)
      {
        this->AddCancelButtonConf_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::RegisterWidgetConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getRegisterWidgetConfiguration () const
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::RegisterWidgetConfigurationType& VotingForDisabledFunctionalityConfiguration::
      getRegisterWidgetConfiguration ()
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }

      const VotingForDisabledFunctionalityConfiguration::CommentConfigType& VotingForDisabledFunctionalityConfiguration::
      getCommentConfig () const
      {
        return this->CommentConfig_.get ();
      }

      VotingForDisabledFunctionalityConfiguration::CommentConfigType& VotingForDisabledFunctionalityConfiguration::
      getCommentConfig ()
      {
        return this->CommentConfig_.get ();
      }

      void VotingForDisabledFunctionalityConfiguration::
      setCommentConfig (const CommentConfigType& x)
      {
        this->CommentConfig_.set (x);
      }

      void VotingForDisabledFunctionalityConfiguration::
      setCommentConfig (::std::auto_ptr< CommentConfigType > x)
      {
        this->CommentConfig_.set (x);
      }


      // PoliceNoteRegisterFunctionalityConfiguration
      // 

      const PoliceNoteRegisterFunctionalityConfiguration::AddButtonConfType& PoliceNoteRegisterFunctionalityConfiguration::
      getAddButtonConf () const
      {
        return this->AddButtonConf_.get ();
      }

      PoliceNoteRegisterFunctionalityConfiguration::AddButtonConfType& PoliceNoteRegisterFunctionalityConfiguration::
      getAddButtonConf ()
      {
        return this->AddButtonConf_.get ();
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      setAddButtonConf (const AddButtonConfType& x)
      {
        this->AddButtonConf_.set (x);
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      setAddButtonConf (::std::auto_ptr< AddButtonConfType > x)
      {
        this->AddButtonConf_.set (x);
      }

      const PoliceNoteRegisterFunctionalityConfiguration::AddCancelButtonConfType& PoliceNoteRegisterFunctionalityConfiguration::
      getAddCancelButtonConf () const
      {
        return this->AddCancelButtonConf_.get ();
      }

      PoliceNoteRegisterFunctionalityConfiguration::AddCancelButtonConfType& PoliceNoteRegisterFunctionalityConfiguration::
      getAddCancelButtonConf ()
      {
        return this->AddCancelButtonConf_.get ();
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      setAddCancelButtonConf (const AddCancelButtonConfType& x)
      {
        this->AddCancelButtonConf_.set (x);
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      setAddCancelButtonConf (::std::auto_ptr< AddCancelButtonConfType > x)
      {
        this->AddCancelButtonConf_.set (x);
      }

      const PoliceNoteRegisterFunctionalityConfiguration::RegisterWidgetConfigurationType& PoliceNoteRegisterFunctionalityConfiguration::
      getRegisterWidgetConfiguration () const
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      PoliceNoteRegisterFunctionalityConfiguration::RegisterWidgetConfigurationType& PoliceNoteRegisterFunctionalityConfiguration::
      getRegisterWidgetConfiguration ()
      {
        return this->RegisterWidgetConfiguration_.get ();
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > x)
      {
        this->RegisterWidgetConfiguration_.set (x);
      }


      // DataUtilsValidatorFunctionalityConfiguration
      // 

      const DataUtilsValidatorFunctionalityConfiguration::KeyFileType& DataUtilsValidatorFunctionalityConfiguration::
      getKeyFile () const
      {
        return this->KeyFile_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::KeyFileType& DataUtilsValidatorFunctionalityConfiguration::
      getKeyFile ()
      {
        return this->KeyFile_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setKeyFile (const KeyFileType& x)
      {
        this->KeyFile_.set (x);
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setKeyFile (::std::auto_ptr< KeyFileType > x)
      {
        this->KeyFile_.set (x);
      }

      const DataUtilsValidatorFunctionalityConfiguration::SeparatorType& DataUtilsValidatorFunctionalityConfiguration::
      getSeparator () const
      {
        return this->Separator_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::SeparatorType& DataUtilsValidatorFunctionalityConfiguration::
      getSeparator ()
      {
        return this->Separator_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setSeparator (const SeparatorType& x)
      {
        this->Separator_.set (x);
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setSeparator (::std::auto_ptr< SeparatorType > x)
      {
        this->Separator_.set (x);
      }

      const DataUtilsValidatorFunctionalityConfiguration::PositionCodeType& DataUtilsValidatorFunctionalityConfiguration::
      getPositionCode () const
      {
        return this->PositionCode_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::PositionCodeType& DataUtilsValidatorFunctionalityConfiguration::
      getPositionCode ()
      {
        return this->PositionCode_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setPositionCode (const PositionCodeType& x)
      {
        this->PositionCode_.set (x);
      }

      const DataUtilsValidatorFunctionalityConfiguration::PositionPasswordType& DataUtilsValidatorFunctionalityConfiguration::
      getPositionPassword () const
      {
        return this->PositionPassword_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::PositionPasswordType& DataUtilsValidatorFunctionalityConfiguration::
      getPositionPassword ()
      {
        return this->PositionPassword_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setPositionPassword (const PositionPasswordType& x)
      {
        this->PositionPassword_.set (x);
      }

      const DataUtilsValidatorFunctionalityConfiguration::ColumnsType& DataUtilsValidatorFunctionalityConfiguration::
      getColumns () const
      {
        return this->Columns_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::ColumnsType& DataUtilsValidatorFunctionalityConfiguration::
      getColumns ()
      {
        return this->Columns_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setColumns (const ColumnsType& x)
      {
        this->Columns_.set (x);
      }

      const DataUtilsValidatorFunctionalityConfiguration::WidthType& DataUtilsValidatorFunctionalityConfiguration::
      getWidth () const
      {
        return this->Width_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::WidthType& DataUtilsValidatorFunctionalityConfiguration::
      getWidth ()
      {
        return this->Width_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setWidth (const WidthType& x)
      {
        this->Width_.set (x);
      }

      const DataUtilsValidatorFunctionalityConfiguration::HeightType& DataUtilsValidatorFunctionalityConfiguration::
      getHeight () const
      {
        return this->Height_.get ();
      }

      DataUtilsValidatorFunctionalityConfiguration::HeightType& DataUtilsValidatorFunctionalityConfiguration::
      getHeight ()
      {
        return this->Height_.get ();
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      setHeight (const HeightType& x)
      {
        this->Height_.set (x);
      }


      // ThemesConfiguration
      // 

      const ThemesConfiguration::OfficialThemeConfigurationType& ThemesConfiguration::
      getOfficialThemeConfiguration () const
      {
        return this->OfficialThemeConfiguration_.get ();
      }

      ThemesConfiguration::OfficialThemeConfigurationType& ThemesConfiguration::
      getOfficialThemeConfiguration ()
      {
        return this->OfficialThemeConfiguration_.get ();
      }

      void ThemesConfiguration::
      setOfficialThemeConfiguration (const OfficialThemeConfigurationType& x)
      {
        this->OfficialThemeConfiguration_.set (x);
      }

      void ThemesConfiguration::
      setOfficialThemeConfiguration (::std::auto_ptr< OfficialThemeConfigurationType > x)
      {
        this->OfficialThemeConfiguration_.set (x);
      }

      const ThemesConfiguration::DemoThemeConfigurationType& ThemesConfiguration::
      getDemoThemeConfiguration () const
      {
        return this->DemoThemeConfiguration_.get ();
      }

      ThemesConfiguration::DemoThemeConfigurationType& ThemesConfiguration::
      getDemoThemeConfiguration ()
      {
        return this->DemoThemeConfiguration_.get ();
      }

      void ThemesConfiguration::
      setDemoThemeConfiguration (const DemoThemeConfigurationType& x)
      {
        this->DemoThemeConfiguration_.set (x);
      }

      void ThemesConfiguration::
      setDemoThemeConfiguration (::std::auto_ptr< DemoThemeConfigurationType > x)
      {
        this->DemoThemeConfiguration_.set (x);
      }

      const ThemesConfiguration::RecoveryThemeConfigurationType& ThemesConfiguration::
      getRecoveryThemeConfiguration () const
      {
        return this->RecoveryThemeConfiguration_.get ();
      }

      ThemesConfiguration::RecoveryThemeConfigurationType& ThemesConfiguration::
      getRecoveryThemeConfiguration ()
      {
        return this->RecoveryThemeConfiguration_.get ();
      }

      void ThemesConfiguration::
      setRecoveryThemeConfiguration (const RecoveryThemeConfigurationType& x)
      {
        this->RecoveryThemeConfiguration_.set (x);
      }

      void ThemesConfiguration::
      setRecoveryThemeConfiguration (::std::auto_ptr< RecoveryThemeConfigurationType > x)
      {
        this->RecoveryThemeConfiguration_.set (x);
      }


      // MenuOptions
      // 

      const MenuOptions::OptionSequence& MenuOptions::
      getOption () const
      {
        return this->Option_;
      }

      MenuOptions::OptionSequence& MenuOptions::
      getOption ()
      {
        return this->Option_;
      }

      void MenuOptions::
      setOption (const OptionSequence& s)
      {
        this->Option_ = s;
      }


      // CheckSumFailOption
      // 

      CheckSumFailOption::
      CheckSumFailOption ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      CheckSumFailOption::
      CheckSumFailOption (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_CheckSumFailOption_literals_[v])
      {
      }

      CheckSumFailOption::
      CheckSumFailOption (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CheckSumFailOption::
      CheckSumFailOption (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CheckSumFailOption::
      CheckSumFailOption (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      CheckSumFailOption::
      CheckSumFailOption (const CheckSumFailOption& v,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      CheckSumFailOption& CheckSumFailOption::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_CheckSumFailOption_literals_[v]);

        return *this;
      }


      // LoadingBallotMessage
      // 

      LoadingBallotMessage::
      LoadingBallotMessage ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      LoadingBallotMessage::
      LoadingBallotMessage (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_LoadingBallotMessage_literals_[v])
      {
      }

      LoadingBallotMessage::
      LoadingBallotMessage (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      LoadingBallotMessage::
      LoadingBallotMessage (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      LoadingBallotMessage::
      LoadingBallotMessage (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      LoadingBallotMessage::
      LoadingBallotMessage (const LoadingBallotMessage& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      LoadingBallotMessage& LoadingBallotMessage::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_LoadingBallotMessage_literals_[v]);

        return *this;
      }


      // Label_Alignment
      // 

      Label_Alignment::
      Label_Alignment ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      Label_Alignment::
      Label_Alignment (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_Label_Alignment_literals_[v])
      {
      }

      Label_Alignment::
      Label_Alignment (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Alignment::
      Label_Alignment (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Alignment::
      Label_Alignment (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Alignment::
      Label_Alignment (const Label_Alignment& v,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      Label_Alignment& Label_Alignment::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_Label_Alignment_literals_[v]);

        return *this;
      }


      // Label_Style
      // 

      Label_Style::
      Label_Style ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      Label_Style::
      Label_Style (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_Label_Style_literals_[v])
      {
      }

      Label_Style::
      Label_Style (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Style::
      Label_Style (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Style::
      Label_Style (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Style::
      Label_Style (const Label_Style& v,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      Label_Style& Label_Style::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_Label_Style_literals_[v]);

        return *this;
      }


      // Label_Weight
      // 

      Label_Weight::
      Label_Weight ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      Label_Weight::
      Label_Weight (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_Label_Weight_literals_[v])
      {
      }

      Label_Weight::
      Label_Weight (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Weight::
      Label_Weight (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Weight::
      Label_Weight (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      Label_Weight::
      Label_Weight (const Label_Weight& v,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      Label_Weight& Label_Weight::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_Label_Weight_literals_[v]);

        return *this;
      }


      // PMWidgetConfiguration1
      // 

      const PMWidgetConfiguration1::NumberOfDivisionType& PMWidgetConfiguration1::
      getNumberOfDivision () const
      {
        return this->NumberOfDivision_.get ();
      }

      PMWidgetConfiguration1::NumberOfDivisionType& PMWidgetConfiguration1::
      getNumberOfDivision ()
      {
        return this->NumberOfDivision_.get ();
      }

      void PMWidgetConfiguration1::
      setNumberOfDivision (const NumberOfDivisionType& x)
      {
        this->NumberOfDivision_.set (x);
      }

      const PMWidgetConfiguration1::MaxCharactersType& PMWidgetConfiguration1::
      getMaxCharacters () const
      {
        return this->MaxCharacters_.get ();
      }

      PMWidgetConfiguration1::MaxCharactersType& PMWidgetConfiguration1::
      getMaxCharacters ()
      {
        return this->MaxCharacters_.get ();
      }

      void PMWidgetConfiguration1::
      setMaxCharacters (const MaxCharactersType& x)
      {
        this->MaxCharacters_.set (x);
      }

      const PMWidgetConfiguration1::EntryWidthType& PMWidgetConfiguration1::
      getEntryWidth () const
      {
        return this->EntryWidth_.get ();
      }

      PMWidgetConfiguration1::EntryWidthType& PMWidgetConfiguration1::
      getEntryWidth ()
      {
        return this->EntryWidth_.get ();
      }

      void PMWidgetConfiguration1::
      setEntryWidth (const EntryWidthType& x)
      {
        this->EntryWidth_.set (x);
      }

      const PMWidgetConfiguration1::ShowImagesType& PMWidgetConfiguration1::
      getShowImages () const
      {
        return this->ShowImages_.get ();
      }

      PMWidgetConfiguration1::ShowImagesType& PMWidgetConfiguration1::
      getShowImages ()
      {
        return this->ShowImages_.get ();
      }

      void PMWidgetConfiguration1::
      setShowImages (const ShowImagesType& x)
      {
        this->ShowImages_.set (x);
      }


      // FunctionalityConfiguration
      // 

      const FunctionalityConfiguration::FunctionalityDescriptorType& FunctionalityConfiguration::
      getFunctionalityDescriptor () const
      {
        return this->FunctionalityDescriptor_.get ();
      }

      FunctionalityConfiguration::FunctionalityDescriptorType& FunctionalityConfiguration::
      getFunctionalityDescriptor ()
      {
        return this->FunctionalityDescriptor_.get ();
      }

      void FunctionalityConfiguration::
      setFunctionalityDescriptor (const FunctionalityDescriptorType& x)
      {
        this->FunctionalityDescriptor_.set (x);
      }

      void FunctionalityConfiguration::
      setFunctionalityDescriptor (::std::auto_ptr< FunctionalityDescriptorType > x)
      {
        this->FunctionalityDescriptor_.set (x);
      }

      const FunctionalityConfiguration::FunctionalityExitToAuthenticationType& FunctionalityConfiguration::
      getFunctionalityExitToAuthentication () const
      {
        return this->FunctionalityExitToAuthentication_.get ();
      }

      FunctionalityConfiguration::FunctionalityExitToAuthenticationType& FunctionalityConfiguration::
      getFunctionalityExitToAuthentication ()
      {
        return this->FunctionalityExitToAuthentication_.get ();
      }

      void FunctionalityConfiguration::
      setFunctionalityExitToAuthentication (const FunctionalityExitToAuthenticationType& x)
      {
        this->FunctionalityExitToAuthentication_.set (x);
      }

      const FunctionalityConfiguration::ChallengeIsEnableType& FunctionalityConfiguration::
      getChallengeIsEnable () const
      {
        return this->ChallengeIsEnable_.get ();
      }

      FunctionalityConfiguration::ChallengeIsEnableType& FunctionalityConfiguration::
      getChallengeIsEnable ()
      {
        return this->ChallengeIsEnable_.get ();
      }

      void FunctionalityConfiguration::
      setChallengeIsEnable (const ChallengeIsEnableType& x)
      {
        this->ChallengeIsEnable_.set (x);
      }

      const FunctionalityConfiguration::ChallengePasswordSourceType& FunctionalityConfiguration::
      getChallengePasswordSource () const
      {
        return this->ChallengePasswordSource_.get ();
      }

      FunctionalityConfiguration::ChallengePasswordSourceType& FunctionalityConfiguration::
      getChallengePasswordSource ()
      {
        return this->ChallengePasswordSource_.get ();
      }

      void FunctionalityConfiguration::
      setChallengePasswordSource (const ChallengePasswordSourceType& x)
      {
        this->ChallengePasswordSource_.set (x);
      }

      void FunctionalityConfiguration::
      setChallengePasswordSource (::std::auto_ptr< ChallengePasswordSourceType > x)
      {
        this->ChallengePasswordSource_.set (x);
      }

      const FunctionalityConfiguration::ElectionBlockStatusOptional& FunctionalityConfiguration::
      getElectionBlockStatus () const
      {
        return this->ElectionBlockStatus_;
      }

      FunctionalityConfiguration::ElectionBlockStatusOptional& FunctionalityConfiguration::
      getElectionBlockStatus ()
      {
        return this->ElectionBlockStatus_;
      }

      void FunctionalityConfiguration::
      setElectionBlockStatus (const ElectionBlockStatusType& x)
      {
        this->ElectionBlockStatus_.set (x);
      }

      void FunctionalityConfiguration::
      setElectionBlockStatus (const ElectionBlockStatusOptional& x)
      {
        this->ElectionBlockStatus_ = x;
      }

      void FunctionalityConfiguration::
      setElectionBlockStatus (::std::auto_ptr< ElectionBlockStatusType > x)
      {
        this->ElectionBlockStatus_.set (x);
      }

      const FunctionalityConfiguration::HelpOptional& FunctionalityConfiguration::
      getHelp () const
      {
        return this->Help_;
      }

      FunctionalityConfiguration::HelpOptional& FunctionalityConfiguration::
      getHelp ()
      {
        return this->Help_;
      }

      void FunctionalityConfiguration::
      setHelp (const HelpType& x)
      {
        this->Help_.set (x);
      }

      void FunctionalityConfiguration::
      setHelp (const HelpOptional& x)
      {
        this->Help_ = x;
      }

      void FunctionalityConfiguration::
      setHelp (::std::auto_ptr< HelpType > x)
      {
        this->Help_.set (x);
      }

      const FunctionalityConfiguration::NecessaryDevicesConfigurationOptional& FunctionalityConfiguration::
      getNecessaryDevicesConfiguration () const
      {
        return this->NecessaryDevicesConfiguration_;
      }

      FunctionalityConfiguration::NecessaryDevicesConfigurationOptional& FunctionalityConfiguration::
      getNecessaryDevicesConfiguration ()
      {
        return this->NecessaryDevicesConfiguration_;
      }

      void FunctionalityConfiguration::
      setNecessaryDevicesConfiguration (const NecessaryDevicesConfigurationType& x)
      {
        this->NecessaryDevicesConfiguration_.set (x);
      }

      void FunctionalityConfiguration::
      setNecessaryDevicesConfiguration (const NecessaryDevicesConfigurationOptional& x)
      {
        this->NecessaryDevicesConfiguration_ = x;
      }

      void FunctionalityConfiguration::
      setNecessaryDevicesConfiguration (::std::auto_ptr< NecessaryDevicesConfigurationType > x)
      {
        this->NecessaryDevicesConfiguration_.set (x);
      }

      const FunctionalityConfiguration::ShowExitMessageType& FunctionalityConfiguration::
      getShowExitMessage () const
      {
        return this->ShowExitMessage_.get ();
      }

      FunctionalityConfiguration::ShowExitMessageType& FunctionalityConfiguration::
      getShowExitMessage ()
      {
        return this->ShowExitMessage_.get ();
      }

      void FunctionalityConfiguration::
      setShowExitMessage (const ShowExitMessageType& x)
      {
        this->ShowExitMessage_.set (x);
      }

      const FunctionalityConfiguration::BlockMemoryBehaviorOptional& FunctionalityConfiguration::
      getBlockMemoryBehavior () const
      {
        return this->BlockMemoryBehavior_;
      }

      FunctionalityConfiguration::BlockMemoryBehaviorOptional& FunctionalityConfiguration::
      getBlockMemoryBehavior ()
      {
        return this->BlockMemoryBehavior_;
      }

      void FunctionalityConfiguration::
      setBlockMemoryBehavior (const BlockMemoryBehaviorType& x)
      {
        this->BlockMemoryBehavior_.set (x);
      }

      void FunctionalityConfiguration::
      setBlockMemoryBehavior (const BlockMemoryBehaviorOptional& x)
      {
        this->BlockMemoryBehavior_ = x;
      }

      void FunctionalityConfiguration::
      setBlockMemoryBehavior (::std::auto_ptr< BlockMemoryBehaviorType > x)
      {
        this->BlockMemoryBehavior_.set (x);
      }


      // LanguageButton
      // 

      const LanguageButton::LanguageCodeType& LanguageButton::
      getLanguageCode () const
      {
        return this->LanguageCode_.get ();
      }

      LanguageButton::LanguageCodeType& LanguageButton::
      getLanguageCode ()
      {
        return this->LanguageCode_.get ();
      }

      void LanguageButton::
      setLanguageCode (const LanguageCodeType& x)
      {
        this->LanguageCode_.set (x);
      }

      void LanguageButton::
      setLanguageCode (::std::auto_ptr< LanguageCodeType > x)
      {
        this->LanguageCode_.set (x);
      }

      const LanguageButton::LanguageImageFileType& LanguageButton::
      getLanguageImageFile () const
      {
        return this->LanguageImageFile_.get ();
      }

      LanguageButton::LanguageImageFileType& LanguageButton::
      getLanguageImageFile ()
      {
        return this->LanguageImageFile_.get ();
      }

      void LanguageButton::
      setLanguageImageFile (const LanguageImageFileType& x)
      {
        this->LanguageImageFile_.set (x);
      }

      void LanguageButton::
      setLanguageImageFile (::std::auto_ptr< LanguageImageFileType > x)
      {
        this->LanguageImageFile_.set (x);
      }


      // OfficialThemeConfiguration
      // 

      const OfficialThemeConfiguration::VotingWindowButtonType& OfficialThemeConfiguration::
      getVotingWindowButton () const
      {
        return this->VotingWindowButton_.get ();
      }

      OfficialThemeConfiguration::VotingWindowButtonType& OfficialThemeConfiguration::
      getVotingWindowButton ()
      {
        return this->VotingWindowButton_.get ();
      }

      void OfficialThemeConfiguration::
      setVotingWindowButton (const VotingWindowButtonType& x)
      {
        this->VotingWindowButton_.set (x);
      }

      void OfficialThemeConfiguration::
      setVotingWindowButton (::std::auto_ptr< VotingWindowButtonType > x)
      {
        this->VotingWindowButton_.set (x);
      }

      const OfficialThemeConfiguration::VotingExperiencePartyEventboxType& OfficialThemeConfiguration::
      getVotingExperiencePartyEventbox () const
      {
        return this->VotingExperiencePartyEventbox_.get ();
      }

      OfficialThemeConfiguration::VotingExperiencePartyEventboxType& OfficialThemeConfiguration::
      getVotingExperiencePartyEventbox ()
      {
        return this->VotingExperiencePartyEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setVotingExperiencePartyEventbox (const VotingExperiencePartyEventboxType& x)
      {
        this->VotingExperiencePartyEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setVotingExperiencePartyEventbox (::std::auto_ptr< VotingExperiencePartyEventboxType > x)
      {
        this->VotingExperiencePartyEventbox_.set (x);
      }

      const OfficialThemeConfiguration::VotingExperienceWindowType& OfficialThemeConfiguration::
      getVotingExperienceWindow () const
      {
        return this->VotingExperienceWindow_.get ();
      }

      OfficialThemeConfiguration::VotingExperienceWindowType& OfficialThemeConfiguration::
      getVotingExperienceWindow ()
      {
        return this->VotingExperienceWindow_.get ();
      }

      void OfficialThemeConfiguration::
      setVotingExperienceWindow (const VotingExperienceWindowType& x)
      {
        this->VotingExperienceWindow_.set (x);
      }

      void OfficialThemeConfiguration::
      setVotingExperienceWindow (::std::auto_ptr< VotingExperienceWindowType > x)
      {
        this->VotingExperienceWindow_.set (x);
      }

      const OfficialThemeConfiguration::VotingExperienceBallotOptionEventboxType& OfficialThemeConfiguration::
      getVotingExperienceBallotOptionEventbox () const
      {
        return this->VotingExperienceBallotOptionEventbox_.get ();
      }

      OfficialThemeConfiguration::VotingExperienceBallotOptionEventboxType& OfficialThemeConfiguration::
      getVotingExperienceBallotOptionEventbox ()
      {
        return this->VotingExperienceBallotOptionEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setVotingExperienceBallotOptionEventbox (const VotingExperienceBallotOptionEventboxType& x)
      {
        this->VotingExperienceBallotOptionEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setVotingExperienceBallotOptionEventbox (::std::auto_ptr< VotingExperienceBallotOptionEventboxType > x)
      {
        this->VotingExperienceBallotOptionEventbox_.set (x);
      }

      const OfficialThemeConfiguration::CardActivatorFunctionalityMessageType& OfficialThemeConfiguration::
      getCardActivatorFunctionalityMessage () const
      {
        return this->CardActivatorFunctionalityMessage_.get ();
      }

      OfficialThemeConfiguration::CardActivatorFunctionalityMessageType& OfficialThemeConfiguration::
      getCardActivatorFunctionalityMessage ()
      {
        return this->CardActivatorFunctionalityMessage_.get ();
      }

      void OfficialThemeConfiguration::
      setCardActivatorFunctionalityMessage (const CardActivatorFunctionalityMessageType& x)
      {
        this->CardActivatorFunctionalityMessage_.set (x);
      }

      void OfficialThemeConfiguration::
      setCardActivatorFunctionalityMessage (::std::auto_ptr< CardActivatorFunctionalityMessageType > x)
      {
        this->CardActivatorFunctionalityMessage_.set (x);
      }

      const OfficialThemeConfiguration::CardActivatorMessageEventboxType& OfficialThemeConfiguration::
      getCardActivatorMessageEventbox () const
      {
        return this->CardActivatorMessageEventbox_.get ();
      }

      OfficialThemeConfiguration::CardActivatorMessageEventboxType& OfficialThemeConfiguration::
      getCardActivatorMessageEventbox ()
      {
        return this->CardActivatorMessageEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setCardActivatorMessageEventbox (const CardActivatorMessageEventboxType& x)
      {
        this->CardActivatorMessageEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setCardActivatorMessageEventbox (::std::auto_ptr< CardActivatorMessageEventboxType > x)
      {
        this->CardActivatorMessageEventbox_.set (x);
      }

      const OfficialThemeConfiguration::CardActivatorFunctionalityEventboxType& OfficialThemeConfiguration::
      getCardActivatorFunctionalityEventbox () const
      {
        return this->CardActivatorFunctionalityEventbox_.get ();
      }

      OfficialThemeConfiguration::CardActivatorFunctionalityEventboxType& OfficialThemeConfiguration::
      getCardActivatorFunctionalityEventbox ()
      {
        return this->CardActivatorFunctionalityEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setCardActivatorFunctionalityEventbox (const CardActivatorFunctionalityEventboxType& x)
      {
        this->CardActivatorFunctionalityEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setCardActivatorFunctionalityEventbox (::std::auto_ptr< CardActivatorFunctionalityEventboxType > x)
      {
        this->CardActivatorFunctionalityEventbox_.set (x);
      }

      const OfficialThemeConfiguration::CardActivatorValuesEventboxType& OfficialThemeConfiguration::
      getCardActivatorValuesEventbox () const
      {
        return this->CardActivatorValuesEventbox_.get ();
      }

      OfficialThemeConfiguration::CardActivatorValuesEventboxType& OfficialThemeConfiguration::
      getCardActivatorValuesEventbox ()
      {
        return this->CardActivatorValuesEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setCardActivatorValuesEventbox (const CardActivatorValuesEventboxType& x)
      {
        this->CardActivatorValuesEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setCardActivatorValuesEventbox (::std::auto_ptr< CardActivatorValuesEventboxType > x)
      {
        this->CardActivatorValuesEventbox_.set (x);
      }

      const OfficialThemeConfiguration::CardActivatorFunctionalityCenterFrameType& OfficialThemeConfiguration::
      getCardActivatorFunctionalityCenterFrame () const
      {
        return this->CardActivatorFunctionalityCenterFrame_.get ();
      }

      OfficialThemeConfiguration::CardActivatorFunctionalityCenterFrameType& OfficialThemeConfiguration::
      getCardActivatorFunctionalityCenterFrame ()
      {
        return this->CardActivatorFunctionalityCenterFrame_.get ();
      }

      void OfficialThemeConfiguration::
      setCardActivatorFunctionalityCenterFrame (const CardActivatorFunctionalityCenterFrameType& x)
      {
        this->CardActivatorFunctionalityCenterFrame_.set (x);
      }

      void OfficialThemeConfiguration::
      setCardActivatorFunctionalityCenterFrame (::std::auto_ptr< CardActivatorFunctionalityCenterFrameType > x)
      {
        this->CardActivatorFunctionalityCenterFrame_.set (x);
      }

      const OfficialThemeConfiguration::EventboxStepBarcodeType& OfficialThemeConfiguration::
      getEventboxStepBarcode () const
      {
        return this->EventboxStepBarcode_.get ();
      }

      OfficialThemeConfiguration::EventboxStepBarcodeType& OfficialThemeConfiguration::
      getEventboxStepBarcode ()
      {
        return this->EventboxStepBarcode_.get ();
      }

      void OfficialThemeConfiguration::
      setEventboxStepBarcode (const EventboxStepBarcodeType& x)
      {
        this->EventboxStepBarcode_.set (x);
      }

      void OfficialThemeConfiguration::
      setEventboxStepBarcode (::std::auto_ptr< EventboxStepBarcodeType > x)
      {
        this->EventboxStepBarcode_.set (x);
      }

      const OfficialThemeConfiguration::EventboxStepBarcodeTitleType& OfficialThemeConfiguration::
      getEventboxStepBarcodeTitle () const
      {
        return this->EventboxStepBarcodeTitle_.get ();
      }

      OfficialThemeConfiguration::EventboxStepBarcodeTitleType& OfficialThemeConfiguration::
      getEventboxStepBarcodeTitle ()
      {
        return this->EventboxStepBarcodeTitle_.get ();
      }

      void OfficialThemeConfiguration::
      setEventboxStepBarcodeTitle (const EventboxStepBarcodeTitleType& x)
      {
        this->EventboxStepBarcodeTitle_.set (x);
      }

      void OfficialThemeConfiguration::
      setEventboxStepBarcodeTitle (::std::auto_ptr< EventboxStepBarcodeTitleType > x)
      {
        this->EventboxStepBarcodeTitle_.set (x);
      }

      const OfficialThemeConfiguration::EventboxStepCardTitleType& OfficialThemeConfiguration::
      getEventboxStepCardTitle () const
      {
        return this->EventboxStepCardTitle_.get ();
      }

      OfficialThemeConfiguration::EventboxStepCardTitleType& OfficialThemeConfiguration::
      getEventboxStepCardTitle ()
      {
        return this->EventboxStepCardTitle_.get ();
      }

      void OfficialThemeConfiguration::
      setEventboxStepCardTitle (const EventboxStepCardTitleType& x)
      {
        this->EventboxStepCardTitle_.set (x);
      }

      void OfficialThemeConfiguration::
      setEventboxStepCardTitle (::std::auto_ptr< EventboxStepCardTitleType > x)
      {
        this->EventboxStepCardTitle_.set (x);
      }

      const OfficialThemeConfiguration::VoteDemoFunctionalityMessageType& OfficialThemeConfiguration::
      getVoteDemoFunctionalityMessage () const
      {
        return this->VoteDemoFunctionalityMessage_.get ();
      }

      OfficialThemeConfiguration::VoteDemoFunctionalityMessageType& OfficialThemeConfiguration::
      getVoteDemoFunctionalityMessage ()
      {
        return this->VoteDemoFunctionalityMessage_.get ();
      }

      void OfficialThemeConfiguration::
      setVoteDemoFunctionalityMessage (const VoteDemoFunctionalityMessageType& x)
      {
        this->VoteDemoFunctionalityMessage_.set (x);
      }

      void OfficialThemeConfiguration::
      setVoteDemoFunctionalityMessage (::std::auto_ptr< VoteDemoFunctionalityMessageType > x)
      {
        this->VoteDemoFunctionalityMessage_.set (x);
      }

      const OfficialThemeConfiguration::StandInLabelLabelType& OfficialThemeConfiguration::
      getStandInLabelLabel () const
      {
        return this->StandInLabelLabel_.get ();
      }

      OfficialThemeConfiguration::StandInLabelLabelType& OfficialThemeConfiguration::
      getStandInLabelLabel ()
      {
        return this->StandInLabelLabel_.get ();
      }

      void OfficialThemeConfiguration::
      setStandInLabelLabel (const StandInLabelLabelType& x)
      {
        this->StandInLabelLabel_.set (x);
      }

      void OfficialThemeConfiguration::
      setStandInLabelLabel (::std::auto_ptr< StandInLabelLabelType > x)
      {
        this->StandInLabelLabel_.set (x);
      }

      const OfficialThemeConfiguration::StandInLabelEventType& OfficialThemeConfiguration::
      getStandInLabelEvent () const
      {
        return this->StandInLabelEvent_.get ();
      }

      OfficialThemeConfiguration::StandInLabelEventType& OfficialThemeConfiguration::
      getStandInLabelEvent ()
      {
        return this->StandInLabelEvent_.get ();
      }

      void OfficialThemeConfiguration::
      setStandInLabelEvent (const StandInLabelEventType& x)
      {
        this->StandInLabelEvent_.set (x);
      }

      void OfficialThemeConfiguration::
      setStandInLabelEvent (::std::auto_ptr< StandInLabelEventType > x)
      {
        this->StandInLabelEvent_.set (x);
      }

      const OfficialThemeConfiguration::VotingExperienceSelectBallotOptionWidgetType& OfficialThemeConfiguration::
      getVotingExperienceSelectBallotOptionWidget () const
      {
        return this->VotingExperienceSelectBallotOptionWidget_.get ();
      }

      OfficialThemeConfiguration::VotingExperienceSelectBallotOptionWidgetType& OfficialThemeConfiguration::
      getVotingExperienceSelectBallotOptionWidget ()
      {
        return this->VotingExperienceSelectBallotOptionWidget_.get ();
      }

      void OfficialThemeConfiguration::
      setVotingExperienceSelectBallotOptionWidget (const VotingExperienceSelectBallotOptionWidgetType& x)
      {
        this->VotingExperienceSelectBallotOptionWidget_.set (x);
      }

      void OfficialThemeConfiguration::
      setVotingExperienceSelectBallotOptionWidget (::std::auto_ptr< VotingExperienceSelectBallotOptionWidgetType > x)
      {
        this->VotingExperienceSelectBallotOptionWidget_.set (x);
      }

      const OfficialThemeConfiguration::ChangeLanguageMessageWigdetEventboxType& OfficialThemeConfiguration::
      getChangeLanguageMessageWigdetEventbox () const
      {
        return this->ChangeLanguageMessageWigdetEventbox_.get ();
      }

      OfficialThemeConfiguration::ChangeLanguageMessageWigdetEventboxType& OfficialThemeConfiguration::
      getChangeLanguageMessageWigdetEventbox ()
      {
        return this->ChangeLanguageMessageWigdetEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setChangeLanguageMessageWigdetEventbox (const ChangeLanguageMessageWigdetEventboxType& x)
      {
        this->ChangeLanguageMessageWigdetEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setChangeLanguageMessageWigdetEventbox (::std::auto_ptr< ChangeLanguageMessageWigdetEventboxType > x)
      {
        this->ChangeLanguageMessageWigdetEventbox_.set (x);
      }

      const OfficialThemeConfiguration::CustomAttributeComboSelectionsWidgetTitleType& OfficialThemeConfiguration::
      getCustomAttributeComboSelectionsWidgetTitle () const
      {
        return this->CustomAttributeComboSelectionsWidgetTitle_.get ();
      }

      OfficialThemeConfiguration::CustomAttributeComboSelectionsWidgetTitleType& OfficialThemeConfiguration::
      getCustomAttributeComboSelectionsWidgetTitle ()
      {
        return this->CustomAttributeComboSelectionsWidgetTitle_.get ();
      }

      void OfficialThemeConfiguration::
      setCustomAttributeComboSelectionsWidgetTitle (const CustomAttributeComboSelectionsWidgetTitleType& x)
      {
        this->CustomAttributeComboSelectionsWidgetTitle_.set (x);
      }

      void OfficialThemeConfiguration::
      setCustomAttributeComboSelectionsWidgetTitle (::std::auto_ptr< CustomAttributeComboSelectionsWidgetTitleType > x)
      {
        this->CustomAttributeComboSelectionsWidgetTitle_.set (x);
      }

      const OfficialThemeConfiguration::CustomAttributeCounterWidgetTitleType& OfficialThemeConfiguration::
      getCustomAttributeCounterWidgetTitle () const
      {
        return this->CustomAttributeCounterWidgetTitle_.get ();
      }

      OfficialThemeConfiguration::CustomAttributeCounterWidgetTitleType& OfficialThemeConfiguration::
      getCustomAttributeCounterWidgetTitle ()
      {
        return this->CustomAttributeCounterWidgetTitle_.get ();
      }

      void OfficialThemeConfiguration::
      setCustomAttributeCounterWidgetTitle (const CustomAttributeCounterWidgetTitleType& x)
      {
        this->CustomAttributeCounterWidgetTitle_.set (x);
      }

      void OfficialThemeConfiguration::
      setCustomAttributeCounterWidgetTitle (::std::auto_ptr< CustomAttributeCounterWidgetTitleType > x)
      {
        this->CustomAttributeCounterWidgetTitle_.set (x);
      }

      const OfficialThemeConfiguration::EventboxChooseWidgetFrameType& OfficialThemeConfiguration::
      getEventboxChooseWidgetFrame () const
      {
        return this->EventboxChooseWidgetFrame_.get ();
      }

      OfficialThemeConfiguration::EventboxChooseWidgetFrameType& OfficialThemeConfiguration::
      getEventboxChooseWidgetFrame ()
      {
        return this->EventboxChooseWidgetFrame_.get ();
      }

      void OfficialThemeConfiguration::
      setEventboxChooseWidgetFrame (const EventboxChooseWidgetFrameType& x)
      {
        this->EventboxChooseWidgetFrame_.set (x);
      }

      void OfficialThemeConfiguration::
      setEventboxChooseWidgetFrame (::std::auto_ptr< EventboxChooseWidgetFrameType > x)
      {
        this->EventboxChooseWidgetFrame_.set (x);
      }

      const OfficialThemeConfiguration::VotingExperiencePartyWidgetType& OfficialThemeConfiguration::
      getVotingExperiencePartyWidget () const
      {
        return this->VotingExperiencePartyWidget_.get ();
      }

      OfficialThemeConfiguration::VotingExperiencePartyWidgetType& OfficialThemeConfiguration::
      getVotingExperiencePartyWidget ()
      {
        return this->VotingExperiencePartyWidget_.get ();
      }

      void OfficialThemeConfiguration::
      setVotingExperiencePartyWidget (const VotingExperiencePartyWidgetType& x)
      {
        this->VotingExperiencePartyWidget_.set (x);
      }

      void OfficialThemeConfiguration::
      setVotingExperiencePartyWidget (::std::auto_ptr< VotingExperiencePartyWidgetType > x)
      {
        this->VotingExperiencePartyWidget_.set (x);
      }

      const OfficialThemeConfiguration::PartyWidgetEventboxType& OfficialThemeConfiguration::
      getPartyWidgetEventbox () const
      {
        return this->PartyWidgetEventbox_.get ();
      }

      OfficialThemeConfiguration::PartyWidgetEventboxType& OfficialThemeConfiguration::
      getPartyWidgetEventbox ()
      {
        return this->PartyWidgetEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setPartyWidgetEventbox (const PartyWidgetEventboxType& x)
      {
        this->PartyWidgetEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setPartyWidgetEventbox (::std::auto_ptr< PartyWidgetEventboxType > x)
      {
        this->PartyWidgetEventbox_.set (x);
      }

      const OfficialThemeConfiguration::EventboxImageStepInstallationWizardType& OfficialThemeConfiguration::
      getEventboxImageStepInstallationWizard () const
      {
        return this->EventboxImageStepInstallationWizard_.get ();
      }

      OfficialThemeConfiguration::EventboxImageStepInstallationWizardType& OfficialThemeConfiguration::
      getEventboxImageStepInstallationWizard ()
      {
        return this->EventboxImageStepInstallationWizard_.get ();
      }

      void OfficialThemeConfiguration::
      setEventboxImageStepInstallationWizard (const EventboxImageStepInstallationWizardType& x)
      {
        this->EventboxImageStepInstallationWizard_.set (x);
      }

      void OfficialThemeConfiguration::
      setEventboxImageStepInstallationWizard (::std::auto_ptr< EventboxImageStepInstallationWizardType > x)
      {
        this->EventboxImageStepInstallationWizard_.set (x);
      }

      const OfficialThemeConfiguration::EventboxStepInstallationWizardType& OfficialThemeConfiguration::
      getEventboxStepInstallationWizard () const
      {
        return this->EventboxStepInstallationWizard_.get ();
      }

      OfficialThemeConfiguration::EventboxStepInstallationWizardType& OfficialThemeConfiguration::
      getEventboxStepInstallationWizard ()
      {
        return this->EventboxStepInstallationWizard_.get ();
      }

      void OfficialThemeConfiguration::
      setEventboxStepInstallationWizard (const EventboxStepInstallationWizardType& x)
      {
        this->EventboxStepInstallationWizard_.set (x);
      }

      void OfficialThemeConfiguration::
      setEventboxStepInstallationWizard (::std::auto_ptr< EventboxStepInstallationWizardType > x)
      {
        this->EventboxStepInstallationWizard_.set (x);
      }

      const OfficialThemeConfiguration::ParentKeypadEventboxType& OfficialThemeConfiguration::
      getParentKeypadEventbox () const
      {
        return this->ParentKeypadEventbox_.get ();
      }

      OfficialThemeConfiguration::ParentKeypadEventboxType& OfficialThemeConfiguration::
      getParentKeypadEventbox ()
      {
        return this->ParentKeypadEventbox_.get ();
      }

      void OfficialThemeConfiguration::
      setParentKeypadEventbox (const ParentKeypadEventboxType& x)
      {
        this->ParentKeypadEventbox_.set (x);
      }

      void OfficialThemeConfiguration::
      setParentKeypadEventbox (::std::auto_ptr< ParentKeypadEventboxType > x)
      {
        this->ParentKeypadEventbox_.set (x);
      }

      const OfficialThemeConfiguration::InfoFrameType& OfficialThemeConfiguration::
      getInfoFrame () const
      {
        return this->InfoFrame_.get ();
      }

      OfficialThemeConfiguration::InfoFrameType& OfficialThemeConfiguration::
      getInfoFrame ()
      {
        return this->InfoFrame_.get ();
      }

      void OfficialThemeConfiguration::
      setInfoFrame (const InfoFrameType& x)
      {
        this->InfoFrame_.set (x);
      }

      void OfficialThemeConfiguration::
      setInfoFrame (::std::auto_ptr< InfoFrameType > x)
      {
        this->InfoFrame_.set (x);
      }


      // DemoThemeConfiguration
      // 

      const DemoThemeConfiguration::VotingWindowButtonDemoType& DemoThemeConfiguration::
      getVotingWindowButtonDemo () const
      {
        return this->VotingWindowButtonDemo_.get ();
      }

      DemoThemeConfiguration::VotingWindowButtonDemoType& DemoThemeConfiguration::
      getVotingWindowButtonDemo ()
      {
        return this->VotingWindowButtonDemo_.get ();
      }

      void DemoThemeConfiguration::
      setVotingWindowButtonDemo (const VotingWindowButtonDemoType& x)
      {
        this->VotingWindowButtonDemo_.set (x);
      }

      void DemoThemeConfiguration::
      setVotingWindowButtonDemo (::std::auto_ptr< VotingWindowButtonDemoType > x)
      {
        this->VotingWindowButtonDemo_.set (x);
      }

      const DemoThemeConfiguration::VotingExperiencePartyEventboxDemoType& DemoThemeConfiguration::
      getVotingExperiencePartyEventboxDemo () const
      {
        return this->VotingExperiencePartyEventboxDemo_.get ();
      }

      DemoThemeConfiguration::VotingExperiencePartyEventboxDemoType& DemoThemeConfiguration::
      getVotingExperiencePartyEventboxDemo ()
      {
        return this->VotingExperiencePartyEventboxDemo_.get ();
      }

      void DemoThemeConfiguration::
      setVotingExperiencePartyEventboxDemo (const VotingExperiencePartyEventboxDemoType& x)
      {
        this->VotingExperiencePartyEventboxDemo_.set (x);
      }

      void DemoThemeConfiguration::
      setVotingExperiencePartyEventboxDemo (::std::auto_ptr< VotingExperiencePartyEventboxDemoType > x)
      {
        this->VotingExperiencePartyEventboxDemo_.set (x);
      }

      const DemoThemeConfiguration::VotingExperienceWindowDemoType& DemoThemeConfiguration::
      getVotingExperienceWindowDemo () const
      {
        return this->VotingExperienceWindowDemo_.get ();
      }

      DemoThemeConfiguration::VotingExperienceWindowDemoType& DemoThemeConfiguration::
      getVotingExperienceWindowDemo ()
      {
        return this->VotingExperienceWindowDemo_.get ();
      }

      void DemoThemeConfiguration::
      setVotingExperienceWindowDemo (const VotingExperienceWindowDemoType& x)
      {
        this->VotingExperienceWindowDemo_.set (x);
      }

      void DemoThemeConfiguration::
      setVotingExperienceWindowDemo (::std::auto_ptr< VotingExperienceWindowDemoType > x)
      {
        this->VotingExperienceWindowDemo_.set (x);
      }

      const DemoThemeConfiguration::VotingExperienceBallotOptionEventboxDemoType& DemoThemeConfiguration::
      getVotingExperienceBallotOptionEventboxDemo () const
      {
        return this->VotingExperienceBallotOptionEventboxDemo_.get ();
      }

      DemoThemeConfiguration::VotingExperienceBallotOptionEventboxDemoType& DemoThemeConfiguration::
      getVotingExperienceBallotOptionEventboxDemo ()
      {
        return this->VotingExperienceBallotOptionEventboxDemo_.get ();
      }

      void DemoThemeConfiguration::
      setVotingExperienceBallotOptionEventboxDemo (const VotingExperienceBallotOptionEventboxDemoType& x)
      {
        this->VotingExperienceBallotOptionEventboxDemo_.set (x);
      }

      void DemoThemeConfiguration::
      setVotingExperienceBallotOptionEventboxDemo (::std::auto_ptr< VotingExperienceBallotOptionEventboxDemoType > x)
      {
        this->VotingExperienceBallotOptionEventboxDemo_.set (x);
      }


      // RecoveryThemeConfiguration
      // 

      const RecoveryThemeConfiguration::VotingWindowButtonRecoveryType& RecoveryThemeConfiguration::
      getVotingWindowButtonRecovery () const
      {
        return this->VotingWindowButtonRecovery_.get ();
      }

      RecoveryThemeConfiguration::VotingWindowButtonRecoveryType& RecoveryThemeConfiguration::
      getVotingWindowButtonRecovery ()
      {
        return this->VotingWindowButtonRecovery_.get ();
      }

      void RecoveryThemeConfiguration::
      setVotingWindowButtonRecovery (const VotingWindowButtonRecoveryType& x)
      {
        this->VotingWindowButtonRecovery_.set (x);
      }

      void RecoveryThemeConfiguration::
      setVotingWindowButtonRecovery (::std::auto_ptr< VotingWindowButtonRecoveryType > x)
      {
        this->VotingWindowButtonRecovery_.set (x);
      }

      const RecoveryThemeConfiguration::VotingExperiencePartyEventboxRecoveryType& RecoveryThemeConfiguration::
      getVotingExperiencePartyEventboxRecovery () const
      {
        return this->VotingExperiencePartyEventboxRecovery_.get ();
      }

      RecoveryThemeConfiguration::VotingExperiencePartyEventboxRecoveryType& RecoveryThemeConfiguration::
      getVotingExperiencePartyEventboxRecovery ()
      {
        return this->VotingExperiencePartyEventboxRecovery_.get ();
      }

      void RecoveryThemeConfiguration::
      setVotingExperiencePartyEventboxRecovery (const VotingExperiencePartyEventboxRecoveryType& x)
      {
        this->VotingExperiencePartyEventboxRecovery_.set (x);
      }

      void RecoveryThemeConfiguration::
      setVotingExperiencePartyEventboxRecovery (::std::auto_ptr< VotingExperiencePartyEventboxRecoveryType > x)
      {
        this->VotingExperiencePartyEventboxRecovery_.set (x);
      }

      const RecoveryThemeConfiguration::VotingExperienceWindowRecoveryType& RecoveryThemeConfiguration::
      getVotingExperienceWindowRecovery () const
      {
        return this->VotingExperienceWindowRecovery_.get ();
      }

      RecoveryThemeConfiguration::VotingExperienceWindowRecoveryType& RecoveryThemeConfiguration::
      getVotingExperienceWindowRecovery ()
      {
        return this->VotingExperienceWindowRecovery_.get ();
      }

      void RecoveryThemeConfiguration::
      setVotingExperienceWindowRecovery (const VotingExperienceWindowRecoveryType& x)
      {
        this->VotingExperienceWindowRecovery_.set (x);
      }

      void RecoveryThemeConfiguration::
      setVotingExperienceWindowRecovery (::std::auto_ptr< VotingExperienceWindowRecoveryType > x)
      {
        this->VotingExperienceWindowRecovery_.set (x);
      }

      const RecoveryThemeConfiguration::VotingExperienceBallotOptionEventboxRecoveryType& RecoveryThemeConfiguration::
      getVotingExperienceBallotOptionEventboxRecovery () const
      {
        return this->VotingExperienceBallotOptionEventboxRecovery_.get ();
      }

      RecoveryThemeConfiguration::VotingExperienceBallotOptionEventboxRecoveryType& RecoveryThemeConfiguration::
      getVotingExperienceBallotOptionEventboxRecovery ()
      {
        return this->VotingExperienceBallotOptionEventboxRecovery_.get ();
      }

      void RecoveryThemeConfiguration::
      setVotingExperienceBallotOptionEventboxRecovery (const VotingExperienceBallotOptionEventboxRecoveryType& x)
      {
        this->VotingExperienceBallotOptionEventboxRecovery_.set (x);
      }

      void RecoveryThemeConfiguration::
      setVotingExperienceBallotOptionEventboxRecovery (::std::auto_ptr< VotingExperienceBallotOptionEventboxRecoveryType > x)
      {
        this->VotingExperienceBallotOptionEventboxRecovery_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      // SaesGUIConfiguration
      //

      SaesGUIConfiguration::
      SaesGUIConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        StartConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidCardUseThread_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidCardShowRemoveMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidShowIdCard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PMInstallationWidgetShowPrintPasswordButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBeidEntry_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachine_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperience_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FormsCommonControls_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportPrintingWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceToLoadFrame_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstallationConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ExitMessageLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockMemoryBehaviorMenu_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SendBarcodeConfigurationOnReconnectWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PollingCardConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmBoxMonitorConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartCardReaderDiagnosisConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ChangeHourFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalitiesConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RunFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InstallationWizardConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PMWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRecoveryFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteDemoFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardAssistedActivationFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        GeneralDiagnosisConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TouchScreenCalibrationConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventSoundsConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BrightnessDiagnosisConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AllDiagnosisConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AutomaticWindowConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContingencyCardWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IDCardProcessConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BEIDCardWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MemoryStateWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HelpWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WaitingForCardWindowConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelectionWindowConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElectionFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationWindowConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DurationWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseElectionFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivationConsolidationFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseVotationFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InitializationWindowConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReportFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PollWorkerRegisterFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNoteRegisterFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteConsolidationFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintPreviewFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LogReportFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNotetFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceValidationScreensFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingForDisabledFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PoliceNoteRegisterFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DataUtilsValidatorFunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ThemesConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalityWizardConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SaesGUIConfiguration::
      SaesGUIConfiguration (const StartConfigurationType& StartConfiguration,
                            const BeidCardUseThreadType& BeidCardUseThread,
                            const BeidCardShowRemoveMessageType& BeidCardShowRemoveMessage,
                            const BeidShowIdCardType& BeidShowIdCard,
                            const PMInstallationWidgetShowPrintPasswordButtonType& PMInstallationWidgetShowPrintPasswordButton,
                            const ShowBeidEntryType& ShowBeidEntry,
                            const VotingMachineType& VotingMachine,
                            const VotingExperienceType& VotingExperience,
                            const FormsCommonControlsType& FormsCommonControls,
                            const ReportPrintingWidgetType& ReportPrintingWidget,
                            const ForceToLoadFrameType& ForceToLoadFrame,
                            const VMInstallationConfigurationType& VMInstallationConfiguration,
                            const ExitMessageLabelConfigurationType& ExitMessageLabelConfiguration,
                            const BlockMemoryBehaviorMenuType& BlockMemoryBehaviorMenu,
                            const SendBarcodeConfigurationOnReconnectWidgetType& SendBarcodeConfigurationOnReconnectWidget,
                            const PollingCardConfigurationType& PollingCardConfiguration,
                            const AlarmBoxMonitorConfigurationType& AlarmBoxMonitorConfiguration,
                            const SmartCardReaderDiagnosisConfigurationType& SmartCardReaderDiagnosisConfiguration,
                            const ChangeHourFunctionalityConfigurationType& ChangeHourFunctionalityConfiguration,
                            const FunctionalitiesConfigurationType& FunctionalitiesConfiguration,
                            const RunFunctionalityConfigurationType& RunFunctionalityConfiguration,
                            const InstallationWizardConfigurationType& InstallationWizardConfiguration,
                            const PMWidgetConfigurationType& PMWidgetConfiguration,
                            const CardActivatorFunctionalityConfigurationType& CardActivatorFunctionalityConfiguration,
                            const CardRecoveryFunctionalityConfigurationType& CardRecoveryFunctionalityConfiguration,
                            const VoteDemoFunctionalityConfigurationType& VoteDemoFunctionalityConfiguration,
                            const CardAssistedActivationFunctionalityConfigurationType& CardAssistedActivationFunctionalityConfiguration,
                            const PrinterDiagnosisConfigurationType& PrinterDiagnosisConfiguration,
                            const GeneralDiagnosisConfigurationType& GeneralDiagnosisConfiguration,
                            const TouchScreenCalibrationConfigurationType& TouchScreenCalibrationConfiguration,
                            const EventSoundsConfigurationType& EventSoundsConfiguration,
                            const BarcodeDiagnosisConfigurationType& BarcodeDiagnosisConfiguration,
                            const BrightnessDiagnosisConfigurationType& BrightnessDiagnosisConfiguration,
                            const AllDiagnosisConfigurationType& AllDiagnosisConfiguration,
                            const AutomaticWindowConfigurationType& AutomaticWindowConfiguration,
                            const ContingencyCardWidgetConfigurationType& ContingencyCardWidgetConfiguration,
                            const IDCardProcessConfigurationType& IDCardProcessConfiguration,
                            const BEIDCardWidgetConfigurationType& BEIDCardWidgetConfiguration,
                            const MemoryStateWidgetConfigurationType& MemoryStateWidgetConfiguration,
                            const HelpWidgetConfigurationType& HelpWidgetConfiguration,
                            const WaitingForCardWindowConfigurationType& WaitingForCardWindowConfiguration,
                            const LanguageSelectionWindowConfigurationType& LanguageSelectionWindowConfiguration,
                            const StatisticFunctionalityConfigurationType& StatisticFunctionalityConfiguration,
                            const OpenElectionFunctionalityConfigurationType& OpenElectionFunctionalityConfiguration,
                            const AuthenticationWindowConfigurationType& AuthenticationWindowConfiguration,
                            const DurationWidgetConfigurationType& DurationWidgetConfiguration,
                            const CloseElectionFunctionalityConfigurationType& CloseElectionFunctionalityConfiguration,
                            const ActivationConsolidationFunctionalityConfigurationType& ActivationConsolidationFunctionalityConfiguration,
                            const CloseVotationFunctionalityConfigurationType& CloseVotationFunctionalityConfiguration,
                            const InitializationWindowConfigurationType& InitializationWindowConfiguration,
                            const IncidentReportFunctionalityConfigurationType& IncidentReportFunctionalityConfiguration,
                            const PollWorkerRegisterFunctionalityConfigurationType& PollWorkerRegisterFunctionalityConfiguration,
                            const CloseNoteRegisterFunctionalityConfigurationType& CloseNoteRegisterFunctionalityConfiguration,
                            const VoteConsolidationFunctionalityConfigurationType& VoteConsolidationFunctionalityConfiguration,
                            const PrintPreviewFunctionalityConfigurationType& PrintPreviewFunctionalityConfiguration,
                            const LogReportFunctionalityConfigurationType& LogReportFunctionalityConfiguration,
                            const CloseNotetFunctionalityConfigurationType& CloseNotetFunctionalityConfiguration,
                            const VotingExperienceValidationScreensFunctionalityConfigurationType& VotingExperienceValidationScreensFunctionalityConfiguration,
                            const VotingForDisabledFunctionalityConfigurationType& VotingForDisabledFunctionalityConfiguration,
                            const PoliceNoteRegisterFunctionalityConfigurationType& PoliceNoteRegisterFunctionalityConfiguration,
                            const DataUtilsValidatorFunctionalityConfigurationType& DataUtilsValidatorFunctionalityConfiguration,
                            const ThemesConfigurationType& ThemesConfiguration,
                            const FunctionalityWizardConfigurationType& FunctionalityWizardConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        StartConfiguration_ (StartConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidCardUseThread_ (BeidCardUseThread, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidCardShowRemoveMessage_ (BeidCardShowRemoveMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidShowIdCard_ (BeidShowIdCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PMInstallationWidgetShowPrintPasswordButton_ (PMInstallationWidgetShowPrintPasswordButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBeidEntry_ (ShowBeidEntry, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachine_ (VotingMachine, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperience_ (VotingExperience, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FormsCommonControls_ (FormsCommonControls, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportPrintingWidget_ (ReportPrintingWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceToLoadFrame_ (ForceToLoadFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstallationConfiguration_ (VMInstallationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExitMessageLabelConfiguration_ (ExitMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockMemoryBehaviorMenu_ (BlockMemoryBehaviorMenu, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SendBarcodeConfigurationOnReconnectWidget_ (SendBarcodeConfigurationOnReconnectWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PollingCardConfiguration_ (PollingCardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmBoxMonitorConfiguration_ (AlarmBoxMonitorConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartCardReaderDiagnosisConfiguration_ (SmartCardReaderDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ChangeHourFunctionalityConfiguration_ (ChangeHourFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalitiesConfiguration_ (FunctionalitiesConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RunFunctionalityConfiguration_ (RunFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InstallationWizardConfiguration_ (InstallationWizardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PMWidgetConfiguration_ (PMWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityConfiguration_ (CardActivatorFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRecoveryFunctionalityConfiguration_ (CardRecoveryFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteDemoFunctionalityConfiguration_ (VoteDemoFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardAssistedActivationFunctionalityConfiguration_ (CardAssistedActivationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisConfiguration_ (PrinterDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        GeneralDiagnosisConfiguration_ (GeneralDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TouchScreenCalibrationConfiguration_ (TouchScreenCalibrationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventSoundsConfiguration_ (EventSoundsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisConfiguration_ (BarcodeDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BrightnessDiagnosisConfiguration_ (BrightnessDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllDiagnosisConfiguration_ (AllDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AutomaticWindowConfiguration_ (AutomaticWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContingencyCardWidgetConfiguration_ (ContingencyCardWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IDCardProcessConfiguration_ (IDCardProcessConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BEIDCardWidgetConfiguration_ (BEIDCardWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MemoryStateWidgetConfiguration_ (MemoryStateWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HelpWidgetConfiguration_ (HelpWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WaitingForCardWindowConfiguration_ (WaitingForCardWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelectionWindowConfiguration_ (LanguageSelectionWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticFunctionalityConfiguration_ (StatisticFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElectionFunctionalityConfiguration_ (OpenElectionFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationWindowConfiguration_ (AuthenticationWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DurationWidgetConfiguration_ (DurationWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseElectionFunctionalityConfiguration_ (CloseElectionFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivationConsolidationFunctionalityConfiguration_ (ActivationConsolidationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseVotationFunctionalityConfiguration_ (CloseVotationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InitializationWindowConfiguration_ (InitializationWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReportFunctionalityConfiguration_ (IncidentReportFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PollWorkerRegisterFunctionalityConfiguration_ (PollWorkerRegisterFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNoteRegisterFunctionalityConfiguration_ (CloseNoteRegisterFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteConsolidationFunctionalityConfiguration_ (VoteConsolidationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintPreviewFunctionalityConfiguration_ (PrintPreviewFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LogReportFunctionalityConfiguration_ (LogReportFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNotetFunctionalityConfiguration_ (CloseNotetFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceValidationScreensFunctionalityConfiguration_ (VotingExperienceValidationScreensFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingForDisabledFunctionalityConfiguration_ (VotingForDisabledFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PoliceNoteRegisterFunctionalityConfiguration_ (PoliceNoteRegisterFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DataUtilsValidatorFunctionalityConfiguration_ (DataUtilsValidatorFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ThemesConfiguration_ (ThemesConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalityWizardConfiguration_ (FunctionalityWizardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SaesGUIConfiguration::
      SaesGUIConfiguration (::std::auto_ptr< StartConfigurationType >& StartConfiguration,
                            const BeidCardUseThreadType& BeidCardUseThread,
                            const BeidCardShowRemoveMessageType& BeidCardShowRemoveMessage,
                            const BeidShowIdCardType& BeidShowIdCard,
                            const PMInstallationWidgetShowPrintPasswordButtonType& PMInstallationWidgetShowPrintPasswordButton,
                            const ShowBeidEntryType& ShowBeidEntry,
                            ::std::auto_ptr< VotingMachineType >& VotingMachine,
                            ::std::auto_ptr< VotingExperienceType >& VotingExperience,
                            ::std::auto_ptr< FormsCommonControlsType >& FormsCommonControls,
                            ::std::auto_ptr< ReportPrintingWidgetType >& ReportPrintingWidget,
                            const ForceToLoadFrameType& ForceToLoadFrame,
                            ::std::auto_ptr< VMInstallationConfigurationType >& VMInstallationConfiguration,
                            ::std::auto_ptr< ExitMessageLabelConfigurationType >& ExitMessageLabelConfiguration,
                            const BlockMemoryBehaviorMenuType& BlockMemoryBehaviorMenu,
                            const SendBarcodeConfigurationOnReconnectWidgetType& SendBarcodeConfigurationOnReconnectWidget,
                            ::std::auto_ptr< PollingCardConfigurationType >& PollingCardConfiguration,
                            ::std::auto_ptr< AlarmBoxMonitorConfigurationType >& AlarmBoxMonitorConfiguration,
                            ::std::auto_ptr< SmartCardReaderDiagnosisConfigurationType >& SmartCardReaderDiagnosisConfiguration,
                            ::std::auto_ptr< ChangeHourFunctionalityConfigurationType >& ChangeHourFunctionalityConfiguration,
                            ::std::auto_ptr< FunctionalitiesConfigurationType >& FunctionalitiesConfiguration,
                            ::std::auto_ptr< RunFunctionalityConfigurationType >& RunFunctionalityConfiguration,
                            ::std::auto_ptr< InstallationWizardConfigurationType >& InstallationWizardConfiguration,
                            ::std::auto_ptr< PMWidgetConfigurationType >& PMWidgetConfiguration,
                            ::std::auto_ptr< CardActivatorFunctionalityConfigurationType >& CardActivatorFunctionalityConfiguration,
                            ::std::auto_ptr< CardRecoveryFunctionalityConfigurationType >& CardRecoveryFunctionalityConfiguration,
                            ::std::auto_ptr< VoteDemoFunctionalityConfigurationType >& VoteDemoFunctionalityConfiguration,
                            ::std::auto_ptr< CardAssistedActivationFunctionalityConfigurationType >& CardAssistedActivationFunctionalityConfiguration,
                            ::std::auto_ptr< PrinterDiagnosisConfigurationType >& PrinterDiagnosisConfiguration,
                            ::std::auto_ptr< GeneralDiagnosisConfigurationType >& GeneralDiagnosisConfiguration,
                            ::std::auto_ptr< TouchScreenCalibrationConfigurationType >& TouchScreenCalibrationConfiguration,
                            ::std::auto_ptr< EventSoundsConfigurationType >& EventSoundsConfiguration,
                            ::std::auto_ptr< BarcodeDiagnosisConfigurationType >& BarcodeDiagnosisConfiguration,
                            ::std::auto_ptr< BrightnessDiagnosisConfigurationType >& BrightnessDiagnosisConfiguration,
                            ::std::auto_ptr< AllDiagnosisConfigurationType >& AllDiagnosisConfiguration,
                            ::std::auto_ptr< AutomaticWindowConfigurationType >& AutomaticWindowConfiguration,
                            ::std::auto_ptr< ContingencyCardWidgetConfigurationType >& ContingencyCardWidgetConfiguration,
                            ::std::auto_ptr< IDCardProcessConfigurationType >& IDCardProcessConfiguration,
                            ::std::auto_ptr< BEIDCardWidgetConfigurationType >& BEIDCardWidgetConfiguration,
                            ::std::auto_ptr< MemoryStateWidgetConfigurationType >& MemoryStateWidgetConfiguration,
                            ::std::auto_ptr< HelpWidgetConfigurationType >& HelpWidgetConfiguration,
                            ::std::auto_ptr< WaitingForCardWindowConfigurationType >& WaitingForCardWindowConfiguration,
                            ::std::auto_ptr< LanguageSelectionWindowConfigurationType >& LanguageSelectionWindowConfiguration,
                            ::std::auto_ptr< StatisticFunctionalityConfigurationType >& StatisticFunctionalityConfiguration,
                            ::std::auto_ptr< OpenElectionFunctionalityConfigurationType >& OpenElectionFunctionalityConfiguration,
                            ::std::auto_ptr< AuthenticationWindowConfigurationType >& AuthenticationWindowConfiguration,
                            ::std::auto_ptr< DurationWidgetConfigurationType >& DurationWidgetConfiguration,
                            ::std::auto_ptr< CloseElectionFunctionalityConfigurationType >& CloseElectionFunctionalityConfiguration,
                            ::std::auto_ptr< ActivationConsolidationFunctionalityConfigurationType >& ActivationConsolidationFunctionalityConfiguration,
                            ::std::auto_ptr< CloseVotationFunctionalityConfigurationType >& CloseVotationFunctionalityConfiguration,
                            ::std::auto_ptr< InitializationWindowConfigurationType >& InitializationWindowConfiguration,
                            ::std::auto_ptr< IncidentReportFunctionalityConfigurationType >& IncidentReportFunctionalityConfiguration,
                            ::std::auto_ptr< PollWorkerRegisterFunctionalityConfigurationType >& PollWorkerRegisterFunctionalityConfiguration,
                            ::std::auto_ptr< CloseNoteRegisterFunctionalityConfigurationType >& CloseNoteRegisterFunctionalityConfiguration,
                            ::std::auto_ptr< VoteConsolidationFunctionalityConfigurationType >& VoteConsolidationFunctionalityConfiguration,
                            ::std::auto_ptr< PrintPreviewFunctionalityConfigurationType >& PrintPreviewFunctionalityConfiguration,
                            ::std::auto_ptr< LogReportFunctionalityConfigurationType >& LogReportFunctionalityConfiguration,
                            ::std::auto_ptr< CloseNotetFunctionalityConfigurationType >& CloseNotetFunctionalityConfiguration,
                            ::std::auto_ptr< VotingExperienceValidationScreensFunctionalityConfigurationType >& VotingExperienceValidationScreensFunctionalityConfiguration,
                            ::std::auto_ptr< VotingForDisabledFunctionalityConfigurationType >& VotingForDisabledFunctionalityConfiguration,
                            ::std::auto_ptr< PoliceNoteRegisterFunctionalityConfigurationType >& PoliceNoteRegisterFunctionalityConfiguration,
                            ::std::auto_ptr< DataUtilsValidatorFunctionalityConfigurationType >& DataUtilsValidatorFunctionalityConfiguration,
                            ::std::auto_ptr< ThemesConfigurationType >& ThemesConfiguration,
                            ::std::auto_ptr< FunctionalityWizardConfigurationType >& FunctionalityWizardConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        StartConfiguration_ (StartConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidCardUseThread_ (BeidCardUseThread, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidCardShowRemoveMessage_ (BeidCardShowRemoveMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BeidShowIdCard_ (BeidShowIdCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PMInstallationWidgetShowPrintPasswordButton_ (PMInstallationWidgetShowPrintPasswordButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBeidEntry_ (ShowBeidEntry, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachine_ (VotingMachine, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperience_ (VotingExperience, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FormsCommonControls_ (FormsCommonControls, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportPrintingWidget_ (ReportPrintingWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceToLoadFrame_ (ForceToLoadFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstallationConfiguration_ (VMInstallationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExitMessageLabelConfiguration_ (ExitMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockMemoryBehaviorMenu_ (BlockMemoryBehaviorMenu, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SendBarcodeConfigurationOnReconnectWidget_ (SendBarcodeConfigurationOnReconnectWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PollingCardConfiguration_ (PollingCardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmBoxMonitorConfiguration_ (AlarmBoxMonitorConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartCardReaderDiagnosisConfiguration_ (SmartCardReaderDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ChangeHourFunctionalityConfiguration_ (ChangeHourFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalitiesConfiguration_ (FunctionalitiesConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RunFunctionalityConfiguration_ (RunFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InstallationWizardConfiguration_ (InstallationWizardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PMWidgetConfiguration_ (PMWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityConfiguration_ (CardActivatorFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRecoveryFunctionalityConfiguration_ (CardRecoveryFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteDemoFunctionalityConfiguration_ (VoteDemoFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardAssistedActivationFunctionalityConfiguration_ (CardAssistedActivationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisConfiguration_ (PrinterDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        GeneralDiagnosisConfiguration_ (GeneralDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TouchScreenCalibrationConfiguration_ (TouchScreenCalibrationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventSoundsConfiguration_ (EventSoundsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisConfiguration_ (BarcodeDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BrightnessDiagnosisConfiguration_ (BrightnessDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllDiagnosisConfiguration_ (AllDiagnosisConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AutomaticWindowConfiguration_ (AutomaticWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContingencyCardWidgetConfiguration_ (ContingencyCardWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IDCardProcessConfiguration_ (IDCardProcessConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BEIDCardWidgetConfiguration_ (BEIDCardWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MemoryStateWidgetConfiguration_ (MemoryStateWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HelpWidgetConfiguration_ (HelpWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WaitingForCardWindowConfiguration_ (WaitingForCardWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelectionWindowConfiguration_ (LanguageSelectionWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticFunctionalityConfiguration_ (StatisticFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElectionFunctionalityConfiguration_ (OpenElectionFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationWindowConfiguration_ (AuthenticationWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DurationWidgetConfiguration_ (DurationWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseElectionFunctionalityConfiguration_ (CloseElectionFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivationConsolidationFunctionalityConfiguration_ (ActivationConsolidationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseVotationFunctionalityConfiguration_ (CloseVotationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InitializationWindowConfiguration_ (InitializationWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReportFunctionalityConfiguration_ (IncidentReportFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PollWorkerRegisterFunctionalityConfiguration_ (PollWorkerRegisterFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNoteRegisterFunctionalityConfiguration_ (CloseNoteRegisterFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteConsolidationFunctionalityConfiguration_ (VoteConsolidationFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintPreviewFunctionalityConfiguration_ (PrintPreviewFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LogReportFunctionalityConfiguration_ (LogReportFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNotetFunctionalityConfiguration_ (CloseNotetFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceValidationScreensFunctionalityConfiguration_ (VotingExperienceValidationScreensFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingForDisabledFunctionalityConfiguration_ (VotingForDisabledFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PoliceNoteRegisterFunctionalityConfiguration_ (PoliceNoteRegisterFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DataUtilsValidatorFunctionalityConfiguration_ (DataUtilsValidatorFunctionalityConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ThemesConfiguration_ (ThemesConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalityWizardConfiguration_ (FunctionalityWizardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SaesGUIConfiguration::
      SaesGUIConfiguration (const SaesGUIConfiguration& x,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        StartConfiguration_ (x.StartConfiguration_, f, this),
        BeidCardUseThread_ (x.BeidCardUseThread_, f, this),
        BeidCardShowRemoveMessage_ (x.BeidCardShowRemoveMessage_, f, this),
        BeidShowIdCard_ (x.BeidShowIdCard_, f, this),
        PMInstallationWidgetShowPrintPasswordButton_ (x.PMInstallationWidgetShowPrintPasswordButton_, f, this),
        ShowBeidEntry_ (x.ShowBeidEntry_, f, this),
        VotingMachine_ (x.VotingMachine_, f, this),
        VotingExperience_ (x.VotingExperience_, f, this),
        FormsCommonControls_ (x.FormsCommonControls_, f, this),
        ReportPrintingWidget_ (x.ReportPrintingWidget_, f, this),
        ForceToLoadFrame_ (x.ForceToLoadFrame_, f, this),
        VMInstallationConfiguration_ (x.VMInstallationConfiguration_, f, this),
        ExitMessageLabelConfiguration_ (x.ExitMessageLabelConfiguration_, f, this),
        BlockMemoryBehaviorMenu_ (x.BlockMemoryBehaviorMenu_, f, this),
        SendBarcodeConfigurationOnReconnectWidget_ (x.SendBarcodeConfigurationOnReconnectWidget_, f, this),
        PollingCardConfiguration_ (x.PollingCardConfiguration_, f, this),
        AlarmBoxMonitorConfiguration_ (x.AlarmBoxMonitorConfiguration_, f, this),
        SmartCardReaderDiagnosisConfiguration_ (x.SmartCardReaderDiagnosisConfiguration_, f, this),
        ChangeHourFunctionalityConfiguration_ (x.ChangeHourFunctionalityConfiguration_, f, this),
        FunctionalitiesConfiguration_ (x.FunctionalitiesConfiguration_, f, this),
        RunFunctionalityConfiguration_ (x.RunFunctionalityConfiguration_, f, this),
        InstallationWizardConfiguration_ (x.InstallationWizardConfiguration_, f, this),
        PMWidgetConfiguration_ (x.PMWidgetConfiguration_, f, this),
        CardActivatorFunctionalityConfiguration_ (x.CardActivatorFunctionalityConfiguration_, f, this),
        CardRecoveryFunctionalityConfiguration_ (x.CardRecoveryFunctionalityConfiguration_, f, this),
        VoteDemoFunctionalityConfiguration_ (x.VoteDemoFunctionalityConfiguration_, f, this),
        CardAssistedActivationFunctionalityConfiguration_ (x.CardAssistedActivationFunctionalityConfiguration_, f, this),
        PrinterDiagnosisConfiguration_ (x.PrinterDiagnosisConfiguration_, f, this),
        GeneralDiagnosisConfiguration_ (x.GeneralDiagnosisConfiguration_, f, this),
        TouchScreenCalibrationConfiguration_ (x.TouchScreenCalibrationConfiguration_, f, this),
        EventSoundsConfiguration_ (x.EventSoundsConfiguration_, f, this),
        BarcodeDiagnosisConfiguration_ (x.BarcodeDiagnosisConfiguration_, f, this),
        BrightnessDiagnosisConfiguration_ (x.BrightnessDiagnosisConfiguration_, f, this),
        AllDiagnosisConfiguration_ (x.AllDiagnosisConfiguration_, f, this),
        AutomaticWindowConfiguration_ (x.AutomaticWindowConfiguration_, f, this),
        ContingencyCardWidgetConfiguration_ (x.ContingencyCardWidgetConfiguration_, f, this),
        IDCardProcessConfiguration_ (x.IDCardProcessConfiguration_, f, this),
        BEIDCardWidgetConfiguration_ (x.BEIDCardWidgetConfiguration_, f, this),
        MemoryStateWidgetConfiguration_ (x.MemoryStateWidgetConfiguration_, f, this),
        HelpWidgetConfiguration_ (x.HelpWidgetConfiguration_, f, this),
        WaitingForCardWindowConfiguration_ (x.WaitingForCardWindowConfiguration_, f, this),
        LanguageSelectionWindowConfiguration_ (x.LanguageSelectionWindowConfiguration_, f, this),
        StatisticFunctionalityConfiguration_ (x.StatisticFunctionalityConfiguration_, f, this),
        OpenElectionFunctionalityConfiguration_ (x.OpenElectionFunctionalityConfiguration_, f, this),
        AuthenticationWindowConfiguration_ (x.AuthenticationWindowConfiguration_, f, this),
        DurationWidgetConfiguration_ (x.DurationWidgetConfiguration_, f, this),
        CloseElectionFunctionalityConfiguration_ (x.CloseElectionFunctionalityConfiguration_, f, this),
        ActivationConsolidationFunctionalityConfiguration_ (x.ActivationConsolidationFunctionalityConfiguration_, f, this),
        CloseVotationFunctionalityConfiguration_ (x.CloseVotationFunctionalityConfiguration_, f, this),
        InitializationWindowConfiguration_ (x.InitializationWindowConfiguration_, f, this),
        IncidentReportFunctionalityConfiguration_ (x.IncidentReportFunctionalityConfiguration_, f, this),
        PollWorkerRegisterFunctionalityConfiguration_ (x.PollWorkerRegisterFunctionalityConfiguration_, f, this),
        CloseNoteRegisterFunctionalityConfiguration_ (x.CloseNoteRegisterFunctionalityConfiguration_, f, this),
        VoteConsolidationFunctionalityConfiguration_ (x.VoteConsolidationFunctionalityConfiguration_, f, this),
        PrintPreviewFunctionalityConfiguration_ (x.PrintPreviewFunctionalityConfiguration_, f, this),
        LogReportFunctionalityConfiguration_ (x.LogReportFunctionalityConfiguration_, f, this),
        CloseNotetFunctionalityConfiguration_ (x.CloseNotetFunctionalityConfiguration_, f, this),
        VotingExperienceValidationScreensFunctionalityConfiguration_ (x.VotingExperienceValidationScreensFunctionalityConfiguration_, f, this),
        VotingForDisabledFunctionalityConfiguration_ (x.VotingForDisabledFunctionalityConfiguration_, f, this),
        PoliceNoteRegisterFunctionalityConfiguration_ (x.PoliceNoteRegisterFunctionalityConfiguration_, f, this),
        DataUtilsValidatorFunctionalityConfiguration_ (x.DataUtilsValidatorFunctionalityConfiguration_, f, this),
        ThemesConfiguration_ (x.ThemesConfiguration_, f, this),
        FunctionalityWizardConfiguration_ (x.FunctionalityWizardConfiguration_, f, this)
      {
      }

      SaesGUIConfiguration::
      SaesGUIConfiguration (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        StartConfiguration_ (f, this),
        BeidCardUseThread_ (f, this),
        BeidCardShowRemoveMessage_ (f, this),
        BeidShowIdCard_ (f, this),
        PMInstallationWidgetShowPrintPasswordButton_ (f, this),
        ShowBeidEntry_ (f, this),
        VotingMachine_ (f, this),
        VotingExperience_ (f, this),
        FormsCommonControls_ (f, this),
        ReportPrintingWidget_ (f, this),
        ForceToLoadFrame_ (f, this),
        VMInstallationConfiguration_ (f, this),
        ExitMessageLabelConfiguration_ (f, this),
        BlockMemoryBehaviorMenu_ (f, this),
        SendBarcodeConfigurationOnReconnectWidget_ (f, this),
        PollingCardConfiguration_ (f, this),
        AlarmBoxMonitorConfiguration_ (f, this),
        SmartCardReaderDiagnosisConfiguration_ (f, this),
        ChangeHourFunctionalityConfiguration_ (f, this),
        FunctionalitiesConfiguration_ (f, this),
        RunFunctionalityConfiguration_ (f, this),
        InstallationWizardConfiguration_ (f, this),
        PMWidgetConfiguration_ (f, this),
        CardActivatorFunctionalityConfiguration_ (f, this),
        CardRecoveryFunctionalityConfiguration_ (f, this),
        VoteDemoFunctionalityConfiguration_ (f, this),
        CardAssistedActivationFunctionalityConfiguration_ (f, this),
        PrinterDiagnosisConfiguration_ (f, this),
        GeneralDiagnosisConfiguration_ (f, this),
        TouchScreenCalibrationConfiguration_ (f, this),
        EventSoundsConfiguration_ (f, this),
        BarcodeDiagnosisConfiguration_ (f, this),
        BrightnessDiagnosisConfiguration_ (f, this),
        AllDiagnosisConfiguration_ (f, this),
        AutomaticWindowConfiguration_ (f, this),
        ContingencyCardWidgetConfiguration_ (f, this),
        IDCardProcessConfiguration_ (f, this),
        BEIDCardWidgetConfiguration_ (f, this),
        MemoryStateWidgetConfiguration_ (f, this),
        HelpWidgetConfiguration_ (f, this),
        WaitingForCardWindowConfiguration_ (f, this),
        LanguageSelectionWindowConfiguration_ (f, this),
        StatisticFunctionalityConfiguration_ (f, this),
        OpenElectionFunctionalityConfiguration_ (f, this),
        AuthenticationWindowConfiguration_ (f, this),
        DurationWidgetConfiguration_ (f, this),
        CloseElectionFunctionalityConfiguration_ (f, this),
        ActivationConsolidationFunctionalityConfiguration_ (f, this),
        CloseVotationFunctionalityConfiguration_ (f, this),
        InitializationWindowConfiguration_ (f, this),
        IncidentReportFunctionalityConfiguration_ (f, this),
        PollWorkerRegisterFunctionalityConfiguration_ (f, this),
        CloseNoteRegisterFunctionalityConfiguration_ (f, this),
        VoteConsolidationFunctionalityConfiguration_ (f, this),
        PrintPreviewFunctionalityConfiguration_ (f, this),
        LogReportFunctionalityConfiguration_ (f, this),
        CloseNotetFunctionalityConfiguration_ (f, this),
        VotingExperienceValidationScreensFunctionalityConfiguration_ (f, this),
        VotingForDisabledFunctionalityConfiguration_ (f, this),
        PoliceNoteRegisterFunctionalityConfiguration_ (f, this),
        DataUtilsValidatorFunctionalityConfiguration_ (f, this),
        ThemesConfiguration_ (f, this),
        FunctionalityWizardConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void SaesGUIConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // StartConfiguration
          //
          if (n.name () == "StartConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StartConfigurationType > r (
              StartConfigurationTraits::create (i, f, this));

            if (!StartConfiguration_.present ())
            {
              this->StartConfiguration_.set (r);
              continue;
            }
          }

          // BeidCardUseThread
          //
          if (n.name () == "BeidCardUseThread" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BeidCardUseThread_.present ())
            {
              this->BeidCardUseThread_.set (BeidCardUseThreadTraits::create (i, f, this));
              continue;
            }
          }

          // BeidCardShowRemoveMessage
          //
          if (n.name () == "BeidCardShowRemoveMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BeidCardShowRemoveMessage_.present ())
            {
              this->BeidCardShowRemoveMessage_.set (BeidCardShowRemoveMessageTraits::create (i, f, this));
              continue;
            }
          }

          // BeidShowIdCard
          //
          if (n.name () == "BeidShowIdCard" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BeidShowIdCard_.present ())
            {
              this->BeidShowIdCard_.set (BeidShowIdCardTraits::create (i, f, this));
              continue;
            }
          }

          // PMInstallationWidgetShowPrintPasswordButton
          //
          if (n.name () == "PMInstallationWidgetShowPrintPasswordButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PMInstallationWidgetShowPrintPasswordButton_.present ())
            {
              this->PMInstallationWidgetShowPrintPasswordButton_.set (PMInstallationWidgetShowPrintPasswordButtonTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBeidEntry
          //
          if (n.name () == "ShowBeidEntry" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ShowBeidEntryType > r (
              ShowBeidEntryTraits::create (i, f, this));

            if (!ShowBeidEntry_.present ())
            {
              this->ShowBeidEntry_.set (r);
              continue;
            }
          }

          // VotingMachine
          //
          if (n.name () == "VotingMachine" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingMachineType > r (
              VotingMachineTraits::create (i, f, this));

            if (!VotingMachine_.present ())
            {
              this->VotingMachine_.set (r);
              continue;
            }
          }

          // VotingExperience
          //
          if (n.name () == "VotingExperience" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceType > r (
              VotingExperienceTraits::create (i, f, this));

            if (!VotingExperience_.present ())
            {
              this->VotingExperience_.set (r);
              continue;
            }
          }

          // FormsCommonControls
          //
          if (n.name () == "FormsCommonControls" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FormsCommonControlsType > r (
              FormsCommonControlsTraits::create (i, f, this));

            if (!FormsCommonControls_.present ())
            {
              this->FormsCommonControls_.set (r);
              continue;
            }
          }

          // ReportPrintingWidget
          //
          if (n.name () == "ReportPrintingWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ReportPrintingWidgetType > r (
              ReportPrintingWidgetTraits::create (i, f, this));

            if (!ReportPrintingWidget_.present ())
            {
              this->ReportPrintingWidget_.set (r);
              continue;
            }
          }

          // ForceToLoadFrame
          //
          if (n.name () == "ForceToLoadFrame" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ForceToLoadFrame_.present ())
            {
              this->ForceToLoadFrame_.set (ForceToLoadFrameTraits::create (i, f, this));
              continue;
            }
          }

          // VMInstallationConfiguration
          //
          if (n.name () == "VMInstallationConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VMInstallationConfigurationType > r (
              VMInstallationConfigurationTraits::create (i, f, this));

            if (!VMInstallationConfiguration_.present ())
            {
              this->VMInstallationConfiguration_.set (r);
              continue;
            }
          }

          // ExitMessageLabelConfiguration
          //
          if (n.name () == "ExitMessageLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ExitMessageLabelConfigurationType > r (
              ExitMessageLabelConfigurationTraits::create (i, f, this));

            if (!ExitMessageLabelConfiguration_.present ())
            {
              this->ExitMessageLabelConfiguration_.set (r);
              continue;
            }
          }

          // BlockMemoryBehaviorMenu
          //
          if (n.name () == "BlockMemoryBehaviorMenu" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BlockMemoryBehaviorMenuType > r (
              BlockMemoryBehaviorMenuTraits::create (i, f, this));

            if (!BlockMemoryBehaviorMenu_.present ())
            {
              this->BlockMemoryBehaviorMenu_.set (r);
              continue;
            }
          }

          // SendBarcodeConfigurationOnReconnectWidget
          //
          if (n.name () == "SendBarcodeConfigurationOnReconnectWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SendBarcodeConfigurationOnReconnectWidget_.present ())
            {
              this->SendBarcodeConfigurationOnReconnectWidget_.set (SendBarcodeConfigurationOnReconnectWidgetTraits::create (i, f, this));
              continue;
            }
          }

          // PollingCardConfiguration
          //
          if (n.name () == "PollingCardConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PollingCardConfigurationType > r (
              PollingCardConfigurationTraits::create (i, f, this));

            if (!PollingCardConfiguration_.present ())
            {
              this->PollingCardConfiguration_.set (r);
              continue;
            }
          }

          // AlarmBoxMonitorConfiguration
          //
          if (n.name () == "AlarmBoxMonitorConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AlarmBoxMonitorConfigurationType > r (
              AlarmBoxMonitorConfigurationTraits::create (i, f, this));

            if (!AlarmBoxMonitorConfiguration_.present ())
            {
              this->AlarmBoxMonitorConfiguration_.set (r);
              continue;
            }
          }

          // SmartCardReaderDiagnosisConfiguration
          //
          if (n.name () == "SmartCardReaderDiagnosisConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SmartCardReaderDiagnosisConfigurationType > r (
              SmartCardReaderDiagnosisConfigurationTraits::create (i, f, this));

            if (!SmartCardReaderDiagnosisConfiguration_.present ())
            {
              this->SmartCardReaderDiagnosisConfiguration_.set (r);
              continue;
            }
          }

          // ChangeHourFunctionalityConfiguration
          //
          if (n.name () == "ChangeHourFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ChangeHourFunctionalityConfigurationType > r (
              ChangeHourFunctionalityConfigurationTraits::create (i, f, this));

            if (!ChangeHourFunctionalityConfiguration_.present ())
            {
              this->ChangeHourFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // FunctionalitiesConfiguration
          //
          if (n.name () == "FunctionalitiesConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FunctionalitiesConfigurationType > r (
              FunctionalitiesConfigurationTraits::create (i, f, this));

            if (!FunctionalitiesConfiguration_.present ())
            {
              this->FunctionalitiesConfiguration_.set (r);
              continue;
            }
          }

          // RunFunctionalityConfiguration
          //
          if (n.name () == "RunFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RunFunctionalityConfigurationType > r (
              RunFunctionalityConfigurationTraits::create (i, f, this));

            if (!RunFunctionalityConfiguration_.present ())
            {
              this->RunFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // InstallationWizardConfiguration
          //
          if (n.name () == "InstallationWizardConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InstallationWizardConfigurationType > r (
              InstallationWizardConfigurationTraits::create (i, f, this));

            if (!InstallationWizardConfiguration_.present ())
            {
              this->InstallationWizardConfiguration_.set (r);
              continue;
            }
          }

          // PMWidgetConfiguration
          //
          if (n.name () == "PMWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PMWidgetConfigurationType > r (
              PMWidgetConfigurationTraits::create (i, f, this));

            if (!PMWidgetConfiguration_.present ())
            {
              this->PMWidgetConfiguration_.set (r);
              continue;
            }
          }

          // CardActivatorFunctionalityConfiguration
          //
          if (n.name () == "CardActivatorFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivatorFunctionalityConfigurationType > r (
              CardActivatorFunctionalityConfigurationTraits::create (i, f, this));

            if (!CardActivatorFunctionalityConfiguration_.present ())
            {
              this->CardActivatorFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // CardRecoveryFunctionalityConfiguration
          //
          if (n.name () == "CardRecoveryFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardRecoveryFunctionalityConfigurationType > r (
              CardRecoveryFunctionalityConfigurationTraits::create (i, f, this));

            if (!CardRecoveryFunctionalityConfiguration_.present ())
            {
              this->CardRecoveryFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // VoteDemoFunctionalityConfiguration
          //
          if (n.name () == "VoteDemoFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VoteDemoFunctionalityConfigurationType > r (
              VoteDemoFunctionalityConfigurationTraits::create (i, f, this));

            if (!VoteDemoFunctionalityConfiguration_.present ())
            {
              this->VoteDemoFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // CardAssistedActivationFunctionalityConfiguration
          //
          if (n.name () == "CardAssistedActivationFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardAssistedActivationFunctionalityConfigurationType > r (
              CardAssistedActivationFunctionalityConfigurationTraits::create (i, f, this));

            if (!CardAssistedActivationFunctionalityConfiguration_.present ())
            {
              this->CardAssistedActivationFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // PrinterDiagnosisConfiguration
          //
          if (n.name () == "PrinterDiagnosisConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PrinterDiagnosisConfigurationType > r (
              PrinterDiagnosisConfigurationTraits::create (i, f, this));

            if (!PrinterDiagnosisConfiguration_.present ())
            {
              this->PrinterDiagnosisConfiguration_.set (r);
              continue;
            }
          }

          // GeneralDiagnosisConfiguration
          //
          if (n.name () == "GeneralDiagnosisConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< GeneralDiagnosisConfigurationType > r (
              GeneralDiagnosisConfigurationTraits::create (i, f, this));

            if (!GeneralDiagnosisConfiguration_.present ())
            {
              this->GeneralDiagnosisConfiguration_.set (r);
              continue;
            }
          }

          // TouchScreenCalibrationConfiguration
          //
          if (n.name () == "TouchScreenCalibrationConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TouchScreenCalibrationConfigurationType > r (
              TouchScreenCalibrationConfigurationTraits::create (i, f, this));

            if (!TouchScreenCalibrationConfiguration_.present ())
            {
              this->TouchScreenCalibrationConfiguration_.set (r);
              continue;
            }
          }

          // EventSoundsConfiguration
          //
          if (n.name () == "EventSoundsConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventSoundsConfigurationType > r (
              EventSoundsConfigurationTraits::create (i, f, this));

            if (!EventSoundsConfiguration_.present ())
            {
              this->EventSoundsConfiguration_.set (r);
              continue;
            }
          }

          // BarcodeDiagnosisConfiguration
          //
          if (n.name () == "BarcodeDiagnosisConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeDiagnosisConfigurationType > r (
              BarcodeDiagnosisConfigurationTraits::create (i, f, this));

            if (!BarcodeDiagnosisConfiguration_.present ())
            {
              this->BarcodeDiagnosisConfiguration_.set (r);
              continue;
            }
          }

          // BrightnessDiagnosisConfiguration
          //
          if (n.name () == "BrightnessDiagnosisConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BrightnessDiagnosisConfigurationType > r (
              BrightnessDiagnosisConfigurationTraits::create (i, f, this));

            if (!BrightnessDiagnosisConfiguration_.present ())
            {
              this->BrightnessDiagnosisConfiguration_.set (r);
              continue;
            }
          }

          // AllDiagnosisConfiguration
          //
          if (n.name () == "AllDiagnosisConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AllDiagnosisConfigurationType > r (
              AllDiagnosisConfigurationTraits::create (i, f, this));

            if (!AllDiagnosisConfiguration_.present ())
            {
              this->AllDiagnosisConfiguration_.set (r);
              continue;
            }
          }

          // AutomaticWindowConfiguration
          //
          if (n.name () == "AutomaticWindowConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AutomaticWindowConfigurationType > r (
              AutomaticWindowConfigurationTraits::create (i, f, this));

            if (!AutomaticWindowConfiguration_.present ())
            {
              this->AutomaticWindowConfiguration_.set (r);
              continue;
            }
          }

          // ContingencyCardWidgetConfiguration
          //
          if (n.name () == "ContingencyCardWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ContingencyCardWidgetConfigurationType > r (
              ContingencyCardWidgetConfigurationTraits::create (i, f, this));

            if (!ContingencyCardWidgetConfiguration_.present ())
            {
              this->ContingencyCardWidgetConfiguration_.set (r);
              continue;
            }
          }

          // IDCardProcessConfiguration
          //
          if (n.name () == "IDCardProcessConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IDCardProcessConfigurationType > r (
              IDCardProcessConfigurationTraits::create (i, f, this));

            if (!IDCardProcessConfiguration_.present ())
            {
              this->IDCardProcessConfiguration_.set (r);
              continue;
            }
          }

          // BEIDCardWidgetConfiguration
          //
          if (n.name () == "BEIDCardWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BEIDCardWidgetConfigurationType > r (
              BEIDCardWidgetConfigurationTraits::create (i, f, this));

            if (!BEIDCardWidgetConfiguration_.present ())
            {
              this->BEIDCardWidgetConfiguration_.set (r);
              continue;
            }
          }

          // MemoryStateWidgetConfiguration
          //
          if (n.name () == "MemoryStateWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< MemoryStateWidgetConfigurationType > r (
              MemoryStateWidgetConfigurationTraits::create (i, f, this));

            if (!MemoryStateWidgetConfiguration_.present ())
            {
              this->MemoryStateWidgetConfiguration_.set (r);
              continue;
            }
          }

          // HelpWidgetConfiguration
          //
          if (n.name () == "HelpWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HelpWidgetConfigurationType > r (
              HelpWidgetConfigurationTraits::create (i, f, this));

            if (!HelpWidgetConfiguration_.present ())
            {
              this->HelpWidgetConfiguration_.set (r);
              continue;
            }
          }

          // WaitingForCardWindowConfiguration
          //
          if (n.name () == "WaitingForCardWindowConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< WaitingForCardWindowConfigurationType > r (
              WaitingForCardWindowConfigurationTraits::create (i, f, this));

            if (!WaitingForCardWindowConfiguration_.present ())
            {
              this->WaitingForCardWindowConfiguration_.set (r);
              continue;
            }
          }

          // LanguageSelectionWindowConfiguration
          //
          if (n.name () == "LanguageSelectionWindowConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LanguageSelectionWindowConfigurationType > r (
              LanguageSelectionWindowConfigurationTraits::create (i, f, this));

            if (!LanguageSelectionWindowConfiguration_.present ())
            {
              this->LanguageSelectionWindowConfiguration_.set (r);
              continue;
            }
          }

          // StatisticFunctionalityConfiguration
          //
          if (n.name () == "StatisticFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticFunctionalityConfigurationType > r (
              StatisticFunctionalityConfigurationTraits::create (i, f, this));

            if (!StatisticFunctionalityConfiguration_.present ())
            {
              this->StatisticFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // OpenElectionFunctionalityConfiguration
          //
          if (n.name () == "OpenElectionFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OpenElectionFunctionalityConfigurationType > r (
              OpenElectionFunctionalityConfigurationTraits::create (i, f, this));

            if (!OpenElectionFunctionalityConfiguration_.present ())
            {
              this->OpenElectionFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // AuthenticationWindowConfiguration
          //
          if (n.name () == "AuthenticationWindowConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AuthenticationWindowConfigurationType > r (
              AuthenticationWindowConfigurationTraits::create (i, f, this));

            if (!AuthenticationWindowConfiguration_.present ())
            {
              this->AuthenticationWindowConfiguration_.set (r);
              continue;
            }
          }

          // DurationWidgetConfiguration
          //
          if (n.name () == "DurationWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DurationWidgetConfigurationType > r (
              DurationWidgetConfigurationTraits::create (i, f, this));

            if (!DurationWidgetConfiguration_.present ())
            {
              this->DurationWidgetConfiguration_.set (r);
              continue;
            }
          }

          // CloseElectionFunctionalityConfiguration
          //
          if (n.name () == "CloseElectionFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseElectionFunctionalityConfigurationType > r (
              CloseElectionFunctionalityConfigurationTraits::create (i, f, this));

            if (!CloseElectionFunctionalityConfiguration_.present ())
            {
              this->CloseElectionFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // ActivationConsolidationFunctionalityConfiguration
          //
          if (n.name () == "ActivationConsolidationFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ActivationConsolidationFunctionalityConfigurationType > r (
              ActivationConsolidationFunctionalityConfigurationTraits::create (i, f, this));

            if (!ActivationConsolidationFunctionalityConfiguration_.present ())
            {
              this->ActivationConsolidationFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // CloseVotationFunctionalityConfiguration
          //
          if (n.name () == "CloseVotationFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseVotationFunctionalityConfigurationType > r (
              CloseVotationFunctionalityConfigurationTraits::create (i, f, this));

            if (!CloseVotationFunctionalityConfiguration_.present ())
            {
              this->CloseVotationFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // InitializationWindowConfiguration
          //
          if (n.name () == "InitializationWindowConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InitializationWindowConfigurationType > r (
              InitializationWindowConfigurationTraits::create (i, f, this));

            if (!InitializationWindowConfiguration_.present ())
            {
              this->InitializationWindowConfiguration_.set (r);
              continue;
            }
          }

          // IncidentReportFunctionalityConfiguration
          //
          if (n.name () == "IncidentReportFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IncidentReportFunctionalityConfigurationType > r (
              IncidentReportFunctionalityConfigurationTraits::create (i, f, this));

            if (!IncidentReportFunctionalityConfiguration_.present ())
            {
              this->IncidentReportFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // PollWorkerRegisterFunctionalityConfiguration
          //
          if (n.name () == "PollWorkerRegisterFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PollWorkerRegisterFunctionalityConfigurationType > r (
              PollWorkerRegisterFunctionalityConfigurationTraits::create (i, f, this));

            if (!PollWorkerRegisterFunctionalityConfiguration_.present ())
            {
              this->PollWorkerRegisterFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // CloseNoteRegisterFunctionalityConfiguration
          //
          if (n.name () == "CloseNoteRegisterFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseNoteRegisterFunctionalityConfigurationType > r (
              CloseNoteRegisterFunctionalityConfigurationTraits::create (i, f, this));

            if (!CloseNoteRegisterFunctionalityConfiguration_.present ())
            {
              this->CloseNoteRegisterFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // VoteConsolidationFunctionalityConfiguration
          //
          if (n.name () == "VoteConsolidationFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VoteConsolidationFunctionalityConfigurationType > r (
              VoteConsolidationFunctionalityConfigurationTraits::create (i, f, this));

            if (!VoteConsolidationFunctionalityConfiguration_.present ())
            {
              this->VoteConsolidationFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // PrintPreviewFunctionalityConfiguration
          //
          if (n.name () == "PrintPreviewFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PrintPreviewFunctionalityConfigurationType > r (
              PrintPreviewFunctionalityConfigurationTraits::create (i, f, this));

            if (!PrintPreviewFunctionalityConfiguration_.present ())
            {
              this->PrintPreviewFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // LogReportFunctionalityConfiguration
          //
          if (n.name () == "LogReportFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LogReportFunctionalityConfigurationType > r (
              LogReportFunctionalityConfigurationTraits::create (i, f, this));

            if (!LogReportFunctionalityConfiguration_.present ())
            {
              this->LogReportFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // CloseNotetFunctionalityConfiguration
          //
          if (n.name () == "CloseNotetFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseNotetFunctionalityConfigurationType > r (
              CloseNotetFunctionalityConfigurationTraits::create (i, f, this));

            if (!CloseNotetFunctionalityConfiguration_.present ())
            {
              this->CloseNotetFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // VotingExperienceValidationScreensFunctionalityConfiguration
          //
          if (n.name () == "VotingExperienceValidationScreensFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceValidationScreensFunctionalityConfigurationType > r (
              VotingExperienceValidationScreensFunctionalityConfigurationTraits::create (i, f, this));

            if (!VotingExperienceValidationScreensFunctionalityConfiguration_.present ())
            {
              this->VotingExperienceValidationScreensFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // VotingForDisabledFunctionalityConfiguration
          //
          if (n.name () == "VotingForDisabledFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingForDisabledFunctionalityConfigurationType > r (
              VotingForDisabledFunctionalityConfigurationTraits::create (i, f, this));

            if (!VotingForDisabledFunctionalityConfiguration_.present ())
            {
              this->VotingForDisabledFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // PoliceNoteRegisterFunctionalityConfiguration
          //
          if (n.name () == "PoliceNoteRegisterFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PoliceNoteRegisterFunctionalityConfigurationType > r (
              PoliceNoteRegisterFunctionalityConfigurationTraits::create (i, f, this));

            if (!PoliceNoteRegisterFunctionalityConfiguration_.present ())
            {
              this->PoliceNoteRegisterFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // DataUtilsValidatorFunctionalityConfiguration
          //
          if (n.name () == "DataUtilsValidatorFunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DataUtilsValidatorFunctionalityConfigurationType > r (
              DataUtilsValidatorFunctionalityConfigurationTraits::create (i, f, this));

            if (!DataUtilsValidatorFunctionalityConfiguration_.present ())
            {
              this->DataUtilsValidatorFunctionalityConfiguration_.set (r);
              continue;
            }
          }

          // ThemesConfiguration
          //
          if (n.name () == "ThemesConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ThemesConfigurationType > r (
              ThemesConfigurationTraits::create (i, f, this));

            if (!ThemesConfiguration_.present ())
            {
              this->ThemesConfiguration_.set (r);
              continue;
            }
          }

          // FunctionalityWizardConfiguration
          //
          if (n.name () == "FunctionalityWizardConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FunctionalityWizardConfigurationType > r (
              FunctionalityWizardConfigurationTraits::create (i, f, this));

            if (!FunctionalityWizardConfiguration_.present ())
            {
              this->FunctionalityWizardConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!StartConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StartConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BeidCardUseThread_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BeidCardUseThread",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BeidCardShowRemoveMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BeidCardShowRemoveMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BeidShowIdCard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BeidShowIdCard",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PMInstallationWidgetShowPrintPasswordButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PMInstallationWidgetShowPrintPasswordButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBeidEntry_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBeidEntry",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingMachine_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingMachine",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperience_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperience",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FormsCommonControls_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FormsCommonControls",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ReportPrintingWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ReportPrintingWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ForceToLoadFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ForceToLoadFrame",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VMInstallationConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VMInstallationConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ExitMessageLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ExitMessageLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BlockMemoryBehaviorMenu_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BlockMemoryBehaviorMenu",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SendBarcodeConfigurationOnReconnectWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SendBarcodeConfigurationOnReconnectWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PollingCardConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PollingCardConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AlarmBoxMonitorConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AlarmBoxMonitorConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SmartCardReaderDiagnosisConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SmartCardReaderDiagnosisConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ChangeHourFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ChangeHourFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FunctionalitiesConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FunctionalitiesConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RunFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RunFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InstallationWizardConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InstallationWizardConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PMWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PMWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivatorFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivatorFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardRecoveryFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardRecoveryFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VoteDemoFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteDemoFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardAssistedActivationFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardAssistedActivationFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrinterDiagnosisConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrinterDiagnosisConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!GeneralDiagnosisConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "GeneralDiagnosisConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TouchScreenCalibrationConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TouchScreenCalibrationConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventSoundsConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventSoundsConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeDiagnosisConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeDiagnosisConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BrightnessDiagnosisConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BrightnessDiagnosisConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AllDiagnosisConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AllDiagnosisConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AutomaticWindowConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AutomaticWindowConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContingencyCardWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContingencyCardWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IDCardProcessConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IDCardProcessConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BEIDCardWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BEIDCardWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MemoryStateWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MemoryStateWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HelpWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HelpWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WaitingForCardWindowConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WaitingForCardWindowConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LanguageSelectionWindowConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LanguageSelectionWindowConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!OpenElectionFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OpenElectionFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AuthenticationWindowConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AuthenticationWindowConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DurationWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DurationWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseElectionFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseElectionFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ActivationConsolidationFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ActivationConsolidationFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseVotationFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseVotationFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InitializationWindowConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InitializationWindowConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IncidentReportFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncidentReportFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PollWorkerRegisterFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PollWorkerRegisterFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseNoteRegisterFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseNoteRegisterFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VoteConsolidationFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteConsolidationFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrintPreviewFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrintPreviewFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LogReportFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LogReportFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseNotetFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseNotetFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceValidationScreensFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceValidationScreensFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingForDisabledFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingForDisabledFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PoliceNoteRegisterFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PoliceNoteRegisterFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DataUtilsValidatorFunctionalityConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DataUtilsValidatorFunctionalityConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ThemesConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ThemesConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FunctionalityWizardConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FunctionalityWizardConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      SaesGUIConfiguration* SaesGUIConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class SaesGUIConfiguration (*this, f, c);
      }

      SaesGUIConfiguration::
      ~SaesGUIConfiguration ()
      {
      }

      bool
      operator== (const SaesGUIConfiguration& x, const SaesGUIConfiguration& y)
      {
        if (!(x.getStartConfiguration () == y.getStartConfiguration ()))
          return false;

        if (!(x.getBeidCardUseThread () == y.getBeidCardUseThread ()))
          return false;

        if (!(x.getBeidCardShowRemoveMessage () == y.getBeidCardShowRemoveMessage ()))
          return false;

        if (!(x.getBeidShowIdCard () == y.getBeidShowIdCard ()))
          return false;

        if (!(x.getPMInstallationWidgetShowPrintPasswordButton () == y.getPMInstallationWidgetShowPrintPasswordButton ()))
          return false;

        if (!(x.getShowBeidEntry () == y.getShowBeidEntry ()))
          return false;

        if (!(x.getVotingMachine () == y.getVotingMachine ()))
          return false;

        if (!(x.getVotingExperience () == y.getVotingExperience ()))
          return false;

        if (!(x.getFormsCommonControls () == y.getFormsCommonControls ()))
          return false;

        if (!(x.getReportPrintingWidget () == y.getReportPrintingWidget ()))
          return false;

        if (!(x.getForceToLoadFrame () == y.getForceToLoadFrame ()))
          return false;

        if (!(x.getVMInstallationConfiguration () == y.getVMInstallationConfiguration ()))
          return false;

        if (!(x.getExitMessageLabelConfiguration () == y.getExitMessageLabelConfiguration ()))
          return false;

        if (!(x.getBlockMemoryBehaviorMenu () == y.getBlockMemoryBehaviorMenu ()))
          return false;

        if (!(x.getSendBarcodeConfigurationOnReconnectWidget () == y.getSendBarcodeConfigurationOnReconnectWidget ()))
          return false;

        if (!(x.getPollingCardConfiguration () == y.getPollingCardConfiguration ()))
          return false;

        if (!(x.getAlarmBoxMonitorConfiguration () == y.getAlarmBoxMonitorConfiguration ()))
          return false;

        if (!(x.getSmartCardReaderDiagnosisConfiguration () == y.getSmartCardReaderDiagnosisConfiguration ()))
          return false;

        if (!(x.getChangeHourFunctionalityConfiguration () == y.getChangeHourFunctionalityConfiguration ()))
          return false;

        if (!(x.getFunctionalitiesConfiguration () == y.getFunctionalitiesConfiguration ()))
          return false;

        if (!(x.getRunFunctionalityConfiguration () == y.getRunFunctionalityConfiguration ()))
          return false;

        if (!(x.getInstallationWizardConfiguration () == y.getInstallationWizardConfiguration ()))
          return false;

        if (!(x.getPMWidgetConfiguration () == y.getPMWidgetConfiguration ()))
          return false;

        if (!(x.getCardActivatorFunctionalityConfiguration () == y.getCardActivatorFunctionalityConfiguration ()))
          return false;

        if (!(x.getCardRecoveryFunctionalityConfiguration () == y.getCardRecoveryFunctionalityConfiguration ()))
          return false;

        if (!(x.getVoteDemoFunctionalityConfiguration () == y.getVoteDemoFunctionalityConfiguration ()))
          return false;

        if (!(x.getCardAssistedActivationFunctionalityConfiguration () == y.getCardAssistedActivationFunctionalityConfiguration ()))
          return false;

        if (!(x.getPrinterDiagnosisConfiguration () == y.getPrinterDiagnosisConfiguration ()))
          return false;

        if (!(x.getGeneralDiagnosisConfiguration () == y.getGeneralDiagnosisConfiguration ()))
          return false;

        if (!(x.getTouchScreenCalibrationConfiguration () == y.getTouchScreenCalibrationConfiguration ()))
          return false;

        if (!(x.getEventSoundsConfiguration () == y.getEventSoundsConfiguration ()))
          return false;

        if (!(x.getBarcodeDiagnosisConfiguration () == y.getBarcodeDiagnosisConfiguration ()))
          return false;

        if (!(x.getBrightnessDiagnosisConfiguration () == y.getBrightnessDiagnosisConfiguration ()))
          return false;

        if (!(x.getAllDiagnosisConfiguration () == y.getAllDiagnosisConfiguration ()))
          return false;

        if (!(x.getAutomaticWindowConfiguration () == y.getAutomaticWindowConfiguration ()))
          return false;

        if (!(x.getContingencyCardWidgetConfiguration () == y.getContingencyCardWidgetConfiguration ()))
          return false;

        if (!(x.getIDCardProcessConfiguration () == y.getIDCardProcessConfiguration ()))
          return false;

        if (!(x.getBEIDCardWidgetConfiguration () == y.getBEIDCardWidgetConfiguration ()))
          return false;

        if (!(x.getMemoryStateWidgetConfiguration () == y.getMemoryStateWidgetConfiguration ()))
          return false;

        if (!(x.getHelpWidgetConfiguration () == y.getHelpWidgetConfiguration ()))
          return false;

        if (!(x.getWaitingForCardWindowConfiguration () == y.getWaitingForCardWindowConfiguration ()))
          return false;

        if (!(x.getLanguageSelectionWindowConfiguration () == y.getLanguageSelectionWindowConfiguration ()))
          return false;

        if (!(x.getStatisticFunctionalityConfiguration () == y.getStatisticFunctionalityConfiguration ()))
          return false;

        if (!(x.getOpenElectionFunctionalityConfiguration () == y.getOpenElectionFunctionalityConfiguration ()))
          return false;

        if (!(x.getAuthenticationWindowConfiguration () == y.getAuthenticationWindowConfiguration ()))
          return false;

        if (!(x.getDurationWidgetConfiguration () == y.getDurationWidgetConfiguration ()))
          return false;

        if (!(x.getCloseElectionFunctionalityConfiguration () == y.getCloseElectionFunctionalityConfiguration ()))
          return false;

        if (!(x.getActivationConsolidationFunctionalityConfiguration () == y.getActivationConsolidationFunctionalityConfiguration ()))
          return false;

        if (!(x.getCloseVotationFunctionalityConfiguration () == y.getCloseVotationFunctionalityConfiguration ()))
          return false;

        if (!(x.getInitializationWindowConfiguration () == y.getInitializationWindowConfiguration ()))
          return false;

        if (!(x.getIncidentReportFunctionalityConfiguration () == y.getIncidentReportFunctionalityConfiguration ()))
          return false;

        if (!(x.getPollWorkerRegisterFunctionalityConfiguration () == y.getPollWorkerRegisterFunctionalityConfiguration ()))
          return false;

        if (!(x.getCloseNoteRegisterFunctionalityConfiguration () == y.getCloseNoteRegisterFunctionalityConfiguration ()))
          return false;

        if (!(x.getVoteConsolidationFunctionalityConfiguration () == y.getVoteConsolidationFunctionalityConfiguration ()))
          return false;

        if (!(x.getPrintPreviewFunctionalityConfiguration () == y.getPrintPreviewFunctionalityConfiguration ()))
          return false;

        if (!(x.getLogReportFunctionalityConfiguration () == y.getLogReportFunctionalityConfiguration ()))
          return false;

        if (!(x.getCloseNotetFunctionalityConfiguration () == y.getCloseNotetFunctionalityConfiguration ()))
          return false;

        if (!(x.getVotingExperienceValidationScreensFunctionalityConfiguration () == y.getVotingExperienceValidationScreensFunctionalityConfiguration ()))
          return false;

        if (!(x.getVotingForDisabledFunctionalityConfiguration () == y.getVotingForDisabledFunctionalityConfiguration ()))
          return false;

        if (!(x.getPoliceNoteRegisterFunctionalityConfiguration () == y.getPoliceNoteRegisterFunctionalityConfiguration ()))
          return false;

        if (!(x.getDataUtilsValidatorFunctionalityConfiguration () == y.getDataUtilsValidatorFunctionalityConfiguration ()))
          return false;

        if (!(x.getThemesConfiguration () == y.getThemesConfiguration ()))
          return false;

        if (!(x.getFunctionalityWizardConfiguration () == y.getFunctionalityWizardConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const SaesGUIConfiguration& x, const SaesGUIConfiguration& y)
      {
        return !(x == y);
      }

      // OpenElectionSteps
      //

      OpenElectionSteps::
      OpenElectionSteps (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_OpenElectionSteps_convert ();
      }

      OpenElectionSteps::
      OpenElectionSteps (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_OpenElectionSteps_convert ();
      }

      OpenElectionSteps::
      OpenElectionSteps (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_OpenElectionSteps_convert ();
      }

      OpenElectionSteps* OpenElectionSteps::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class OpenElectionSteps (*this, f, c);
      }

      OpenElectionSteps::Value OpenElectionSteps::
      _xsd_OpenElectionSteps_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OpenElectionSteps_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_OpenElectionSteps_indexes_,
                          _xsd_OpenElectionSteps_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_OpenElectionSteps_indexes_ + 3 || _xsd_OpenElectionSteps_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const OpenElectionSteps::
      _xsd_OpenElectionSteps_literals_[3] =
      {
        "RegisterNote",
        "RequestIDCard",
        "OpenElection"
      };

      const OpenElectionSteps::Value OpenElectionSteps::
      _xsd_OpenElectionSteps_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::OpenElectionSteps::CONFIGURATION_OPENELECTION,
        ::Smartmatic::SAES::Configuration::OpenElectionSteps::CONFIGURATION_REGISTERNOTE,
        ::Smartmatic::SAES::Configuration::OpenElectionSteps::CONFIGURATION_REQUESTIDCARD
      };

      // ScanConsolidationConfiguration
      //

      ScanConsolidationConfiguration::
      ScanConsolidationConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ScanPopUpMessageConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EnabledChangeColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorValid_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorDuplicate_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorBad_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorValid_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorDuplicate_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorBad_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TextConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ScanConsolidationConfiguration::
      ScanConsolidationConfiguration (const ScanPopUpMessageConfigurationType& ScanPopUpMessageConfiguration,
                                      const EnabledChangeColorType& EnabledChangeColor,
                                      const BoxColorValidType& BoxColorValid,
                                      const BoxColorDuplicateType& BoxColorDuplicate,
                                      const BoxColorBadType& BoxColorBad,
                                      const FontColorValidType& FontColorValid,
                                      const FontColorDuplicateType& FontColorDuplicate,
                                      const FontColorBadType& FontColorBad,
                                      const TextConfigurationType& TextConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ScanPopUpMessageConfiguration_ (ScanPopUpMessageConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EnabledChangeColor_ (EnabledChangeColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorValid_ (BoxColorValid, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorDuplicate_ (BoxColorDuplicate, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorBad_ (BoxColorBad, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorValid_ (FontColorValid, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorDuplicate_ (FontColorDuplicate, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorBad_ (FontColorBad, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextConfiguration_ (TextConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ScanConsolidationConfiguration::
      ScanConsolidationConfiguration (::std::auto_ptr< ScanPopUpMessageConfigurationType >& ScanPopUpMessageConfiguration,
                                      const EnabledChangeColorType& EnabledChangeColor,
                                      ::std::auto_ptr< BoxColorValidType >& BoxColorValid,
                                      ::std::auto_ptr< BoxColorDuplicateType >& BoxColorDuplicate,
                                      ::std::auto_ptr< BoxColorBadType >& BoxColorBad,
                                      ::std::auto_ptr< FontColorValidType >& FontColorValid,
                                      ::std::auto_ptr< FontColorDuplicateType >& FontColorDuplicate,
                                      ::std::auto_ptr< FontColorBadType >& FontColorBad,
                                      ::std::auto_ptr< TextConfigurationType >& TextConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ScanPopUpMessageConfiguration_ (ScanPopUpMessageConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EnabledChangeColor_ (EnabledChangeColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorValid_ (BoxColorValid, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorDuplicate_ (BoxColorDuplicate, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BoxColorBad_ (BoxColorBad, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorValid_ (FontColorValid, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorDuplicate_ (FontColorDuplicate, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontColorBad_ (FontColorBad, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextConfiguration_ (TextConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ScanConsolidationConfiguration::
      ScanConsolidationConfiguration (const ScanConsolidationConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ScanPopUpMessageConfiguration_ (x.ScanPopUpMessageConfiguration_, f, this),
        EnabledChangeColor_ (x.EnabledChangeColor_, f, this),
        BoxColorValid_ (x.BoxColorValid_, f, this),
        BoxColorDuplicate_ (x.BoxColorDuplicate_, f, this),
        BoxColorBad_ (x.BoxColorBad_, f, this),
        FontColorValid_ (x.FontColorValid_, f, this),
        FontColorDuplicate_ (x.FontColorDuplicate_, f, this),
        FontColorBad_ (x.FontColorBad_, f, this),
        TextConfiguration_ (x.TextConfiguration_, f, this)
      {
      }

      ScanConsolidationConfiguration::
      ScanConsolidationConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ScanPopUpMessageConfiguration_ (f, this),
        EnabledChangeColor_ (f, this),
        BoxColorValid_ (f, this),
        BoxColorDuplicate_ (f, this),
        BoxColorBad_ (f, this),
        FontColorValid_ (f, this),
        FontColorDuplicate_ (f, this),
        FontColorBad_ (f, this),
        TextConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ScanConsolidationConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ScanPopUpMessageConfiguration
          //
          if (n.name () == "ScanPopUpMessageConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ScanPopUpMessageConfigurationType > r (
              ScanPopUpMessageConfigurationTraits::create (i, f, this));

            if (!ScanPopUpMessageConfiguration_.present ())
            {
              this->ScanPopUpMessageConfiguration_.set (r);
              continue;
            }
          }

          // EnabledChangeColor
          //
          if (n.name () == "EnabledChangeColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EnabledChangeColor_.present ())
            {
              this->EnabledChangeColor_.set (EnabledChangeColorTraits::create (i, f, this));
              continue;
            }
          }

          // BoxColorValid
          //
          if (n.name () == "BoxColorValid" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BoxColorValidType > r (
              BoxColorValidTraits::create (i, f, this));

            if (!BoxColorValid_.present ())
            {
              this->BoxColorValid_.set (r);
              continue;
            }
          }

          // BoxColorDuplicate
          //
          if (n.name () == "BoxColorDuplicate" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BoxColorDuplicateType > r (
              BoxColorDuplicateTraits::create (i, f, this));

            if (!BoxColorDuplicate_.present ())
            {
              this->BoxColorDuplicate_.set (r);
              continue;
            }
          }

          // BoxColorBad
          //
          if (n.name () == "BoxColorBad" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BoxColorBadType > r (
              BoxColorBadTraits::create (i, f, this));

            if (!BoxColorBad_.present ())
            {
              this->BoxColorBad_.set (r);
              continue;
            }
          }

          // FontColorValid
          //
          if (n.name () == "FontColorValid" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FontColorValidType > r (
              FontColorValidTraits::create (i, f, this));

            if (!FontColorValid_.present ())
            {
              this->FontColorValid_.set (r);
              continue;
            }
          }

          // FontColorDuplicate
          //
          if (n.name () == "FontColorDuplicate" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FontColorDuplicateType > r (
              FontColorDuplicateTraits::create (i, f, this));

            if (!FontColorDuplicate_.present ())
            {
              this->FontColorDuplicate_.set (r);
              continue;
            }
          }

          // FontColorBad
          //
          if (n.name () == "FontColorBad" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FontColorBadType > r (
              FontColorBadTraits::create (i, f, this));

            if (!FontColorBad_.present ())
            {
              this->FontColorBad_.set (r);
              continue;
            }
          }

          // TextConfiguration
          //
          if (n.name () == "TextConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TextConfigurationType > r (
              TextConfigurationTraits::create (i, f, this));

            if (!TextConfiguration_.present ())
            {
              this->TextConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ScanPopUpMessageConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ScanPopUpMessageConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EnabledChangeColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EnabledChangeColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BoxColorValid_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BoxColorValid",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BoxColorDuplicate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BoxColorDuplicate",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BoxColorBad_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BoxColorBad",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontColorValid_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontColorValid",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontColorDuplicate_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontColorDuplicate",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontColorBad_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontColorBad",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TextConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ScanConsolidationConfiguration* ScanConsolidationConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ScanConsolidationConfiguration (*this, f, c);
      }

      ScanConsolidationConfiguration::
      ~ScanConsolidationConfiguration ()
      {
      }

      bool
      operator== (const ScanConsolidationConfiguration& x, const ScanConsolidationConfiguration& y)
      {
        if (!(x.getScanPopUpMessageConfiguration () == y.getScanPopUpMessageConfiguration ()))
          return false;

        if (!(x.getEnabledChangeColor () == y.getEnabledChangeColor ()))
          return false;

        if (!(x.getBoxColorValid () == y.getBoxColorValid ()))
          return false;

        if (!(x.getBoxColorDuplicate () == y.getBoxColorDuplicate ()))
          return false;

        if (!(x.getBoxColorBad () == y.getBoxColorBad ()))
          return false;

        if (!(x.getFontColorValid () == y.getFontColorValid ()))
          return false;

        if (!(x.getFontColorDuplicate () == y.getFontColorDuplicate ()))
          return false;

        if (!(x.getFontColorBad () == y.getFontColorBad ()))
          return false;

        if (!(x.getTextConfiguration () == y.getTextConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const ScanConsolidationConfiguration& x, const ScanConsolidationConfiguration& y)
      {
        return !(x == y);
      }

      // ScanPopUpMessageConfiguration
      //

      ScanPopUpMessageConfiguration::
      ScanPopUpMessageConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Visible_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOut_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Opacity_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Width_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Height_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        X_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Y_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Position_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ScanPopUpMessageConfiguration::
      ScanPopUpMessageConfiguration (const VisibleType& Visible,
                                     const TimeOutType& TimeOut,
                                     const OpacityType& Opacity,
                                     const WidthType& Width,
                                     const HeightType& Height,
                                     const XType& X,
                                     const YType& Y,
                                     const PositionType& Position)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Visible_ (Visible, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOut_ (TimeOut, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Opacity_ (Opacity, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Width_ (Width, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Height_ (Height, ::Smartmatic::ConfigurationTypes::Flags (), this),
        X_ (X, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Y_ (Y, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Position_ (Position, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ScanPopUpMessageConfiguration::
      ScanPopUpMessageConfiguration (const ScanPopUpMessageConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Visible_ (x.Visible_, f, this),
        TimeOut_ (x.TimeOut_, f, this),
        Opacity_ (x.Opacity_, f, this),
        Width_ (x.Width_, f, this),
        Height_ (x.Height_, f, this),
        X_ (x.X_, f, this),
        Y_ (x.Y_, f, this),
        Position_ (x.Position_, f, this)
      {
      }

      ScanPopUpMessageConfiguration::
      ScanPopUpMessageConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Visible_ (f, this),
        TimeOut_ (f, this),
        Opacity_ (f, this),
        Width_ (f, this),
        Height_ (f, this),
        X_ (f, this),
        Y_ (f, this),
        Position_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ScanPopUpMessageConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Visible
          //
          if (n.name () == "Visible" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Visible_.present ())
            {
              this->Visible_.set (VisibleTraits::create (i, f, this));
              continue;
            }
          }

          // TimeOut
          //
          if (n.name () == "TimeOut" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeOut_.present ())
            {
              this->TimeOut_.set (TimeOutTraits::create (i, f, this));
              continue;
            }
          }

          // Opacity
          //
          if (n.name () == "Opacity" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Opacity_.present ())
            {
              this->Opacity_.set (OpacityTraits::create (i, f, this));
              continue;
            }
          }

          // Width
          //
          if (n.name () == "Width" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Width_.present ())
            {
              this->Width_.set (WidthTraits::create (i, f, this));
              continue;
            }
          }

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Height_.present ())
            {
              this->Height_.set (HeightTraits::create (i, f, this));
              continue;
            }
          }

          // X
          //
          if (n.name () == "X" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!X_.present ())
            {
              this->X_.set (XTraits::create (i, f, this));
              continue;
            }
          }

          // Y
          //
          if (n.name () == "Y" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Y_.present ())
            {
              this->Y_.set (YTraits::create (i, f, this));
              continue;
            }
          }

          // Position
          //
          if (n.name () == "Position" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PositionType > r (
              PositionTraits::create (i, f, this));

            if (!Position_.present ())
            {
              this->Position_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Visible_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Visible",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeOut_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeOut",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Opacity_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Opacity",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Width_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Width",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Height_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Height",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!X_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "X",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Y_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Y",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Position_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Position",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ScanPopUpMessageConfiguration* ScanPopUpMessageConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ScanPopUpMessageConfiguration (*this, f, c);
      }

      ScanPopUpMessageConfiguration::
      ~ScanPopUpMessageConfiguration ()
      {
      }

      bool
      operator== (const ScanPopUpMessageConfiguration& x, const ScanPopUpMessageConfiguration& y)
      {
        if (!(x.getVisible () == y.getVisible ()))
          return false;

        if (!(x.getTimeOut () == y.getTimeOut ()))
          return false;

        if (!(x.getOpacity () == y.getOpacity ()))
          return false;

        if (!(x.getWidth () == y.getWidth ()))
          return false;

        if (!(x.getHeight () == y.getHeight ()))
          return false;

        if (!(x.getX () == y.getX ()))
          return false;

        if (!(x.getY () == y.getY ()))
          return false;

        if (!(x.getPosition () == y.getPosition ()))
          return false;

        return true;
      }

      bool
      operator!= (const ScanPopUpMessageConfiguration& x, const ScanPopUpMessageConfiguration& y)
      {
        return !(x == y);
      }

      // PositionConfiguration
      //

      PositionConfiguration::
      PositionConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_PositionConfiguration_convert ();
      }

      PositionConfiguration::
      PositionConfiguration (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_PositionConfiguration_convert ();
      }

      PositionConfiguration::
      PositionConfiguration (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_PositionConfiguration_convert ();
      }

      PositionConfiguration* PositionConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PositionConfiguration (*this, f, c);
      }

      PositionConfiguration::Value PositionConfiguration::
      _xsd_PositionConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PositionConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_PositionConfiguration_indexes_,
                          _xsd_PositionConfiguration_indexes_ + 11,
                          *this,
                          c));

        if (i == _xsd_PositionConfiguration_indexes_ + 11 || _xsd_PositionConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const PositionConfiguration::
      _xsd_PositionConfiguration_literals_[11] =
      {
        "top-right",
        "top-left",
        "top-center",
        "center-right",
        "center-left",
        "center-center",
        "bottom-right",
        "bottom-left",
        "bottom-center",
        "full-screen",
        "custom"
      };

      const PositionConfiguration::Value PositionConfiguration::
      _xsd_PositionConfiguration_indexes_[11] =
      {
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_BOTTOM_CENTER,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_BOTTOM_LEFT,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_BOTTOM_RIGHT,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_CENTER_CENTER,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_CENTER_LEFT,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_CENTER_RIGHT,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_CUSTOM,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_FULL_SCREEN,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_TOP_CENTER,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_TOP_LEFT,
        ::Smartmatic::SAES::Configuration::PositionConfiguration::CONFIGURATION_TOP_RIGHT
      };

      // TreeColumnConfiguration
      //

      TreeColumnConfiguration::
      TreeColumnConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Resizable_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MinWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Alignment_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      TreeColumnConfiguration::
      TreeColumnConfiguration (const ResizableType& Resizable,
                               const MaxWidthType& MaxWidth,
                               const MinWidthType& MinWidth,
                               const AlignmentType& Alignment)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Resizable_ (Resizable, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxWidth_ (MaxWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MinWidth_ (MinWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Alignment_ (Alignment, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      TreeColumnConfiguration::
      TreeColumnConfiguration (const TreeColumnConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Resizable_ (x.Resizable_, f, this),
        MaxWidth_ (x.MaxWidth_, f, this),
        MinWidth_ (x.MinWidth_, f, this),
        Alignment_ (x.Alignment_, f, this)
      {
      }

      TreeColumnConfiguration::
      TreeColumnConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Resizable_ (f, this),
        MaxWidth_ (f, this),
        MinWidth_ (f, this),
        Alignment_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void TreeColumnConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Resizable
          //
          if (n.name () == "Resizable" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Resizable_.present ())
            {
              this->Resizable_.set (ResizableTraits::create (i, f, this));
              continue;
            }
          }

          // MaxWidth
          //
          if (n.name () == "MaxWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxWidth_.present ())
            {
              this->MaxWidth_.set (MaxWidthTraits::create (i, f, this));
              continue;
            }
          }

          // MinWidth
          //
          if (n.name () == "MinWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MinWidth_.present ())
            {
              this->MinWidth_.set (MinWidthTraits::create (i, f, this));
              continue;
            }
          }

          // Alignment
          //
          if (n.name () == "Alignment" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Alignment_.present ())
            {
              this->Alignment_.set (AlignmentTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Resizable_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Resizable",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MinWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Alignment_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Alignment",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      TreeColumnConfiguration* TreeColumnConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class TreeColumnConfiguration (*this, f, c);
      }

      TreeColumnConfiguration::
      ~TreeColumnConfiguration ()
      {
      }

      bool
      operator== (const TreeColumnConfiguration& x, const TreeColumnConfiguration& y)
      {
        if (!(x.getResizable () == y.getResizable ()))
          return false;

        if (!(x.getMaxWidth () == y.getMaxWidth ()))
          return false;

        if (!(x.getMinWidth () == y.getMinWidth ()))
          return false;

        if (!(x.getAlignment () == y.getAlignment ()))
          return false;

        return true;
      }

      bool
      operator!= (const TreeColumnConfiguration& x, const TreeColumnConfiguration& y)
      {
        return !(x == y);
      }

      // IncidentReportColumn
      //

      IncidentReportColumn::
      IncidentReportColumn (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_IncidentReportColumn_convert ();
      }

      IncidentReportColumn::
      IncidentReportColumn (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_IncidentReportColumn_convert ();
      }

      IncidentReportColumn::
      IncidentReportColumn (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_IncidentReportColumn_convert ();
      }

      IncidentReportColumn* IncidentReportColumn::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IncidentReportColumn (*this, f, c);
      }

      IncidentReportColumn::Value IncidentReportColumn::
      _xsd_IncidentReportColumn_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_IncidentReportColumn_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_IncidentReportColumn_indexes_,
                          _xsd_IncidentReportColumn_indexes_ + 8,
                          *this,
                          c));

        if (i == _xsd_IncidentReportColumn_indexes_ + 8 || _xsd_IncidentReportColumn_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const IncidentReportColumn::
      _xsd_IncidentReportColumn_literals_[8] =
      {
        "Description",
        "NotificationDate",
        "NamesOfTechnicians",
        "ActivityOfTechnicians",
        "AdditionalObservations",
        "PersonalArrivalDate",
        "IncidentSolutionDate",
        "Complete"
      };

      const IncidentReportColumn::Value IncidentReportColumn::
      _xsd_IncidentReportColumn_indexes_[8] =
      {
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_ACTIVITYOFTECHNICIANS,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_ADDITIONALOBSERVATIONS,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_COMPLETE,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_DESCRIPTION,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_INCIDENTSOLUTIONDATE,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_NAMESOFTECHNICIANS,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_NOTIFICATIONDATE,
        ::Smartmatic::SAES::Configuration::IncidentReportColumn::CONFIGURATION_PERSONALARRIVALDATE
      };

      // IncidentReportTreeViewConfiguration
      //

      IncidentReportTreeViewConfiguration::
      IncidentReportTreeViewConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        IncidentReportColumn_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentColumnConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IncidentReportTreeViewConfiguration::
      IncidentReportTreeViewConfiguration (const IncidentReportColumnType& IncidentReportColumn,
                                           const IncidentColumnConfigurationType& IncidentColumnConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        IncidentReportColumn_ (IncidentReportColumn, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentColumnConfiguration_ (IncidentColumnConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IncidentReportTreeViewConfiguration::
      IncidentReportTreeViewConfiguration (const IncidentReportColumnType& IncidentReportColumn,
                                           ::std::auto_ptr< IncidentColumnConfigurationType >& IncidentColumnConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        IncidentReportColumn_ (IncidentReportColumn, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentColumnConfiguration_ (IncidentColumnConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IncidentReportTreeViewConfiguration::
      IncidentReportTreeViewConfiguration (const IncidentReportTreeViewConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        IncidentReportColumn_ (x.IncidentReportColumn_, f, this),
        IncidentColumnConfiguration_ (x.IncidentColumnConfiguration_, f, this)
      {
      }

      IncidentReportTreeViewConfiguration::
      IncidentReportTreeViewConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        IncidentReportColumn_ (f, this),
        IncidentColumnConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void IncidentReportTreeViewConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // IncidentReportColumn
          //
          if (n.name () == "IncidentReportColumn" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IncidentReportColumnType > r (
              IncidentReportColumnTraits::create (i, f, this));

            if (!IncidentReportColumn_.present ())
            {
              this->IncidentReportColumn_.set (r);
              continue;
            }
          }

          // IncidentColumnConfiguration
          //
          if (n.name () == "IncidentColumnConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IncidentColumnConfigurationType > r (
              IncidentColumnConfigurationTraits::create (i, f, this));

            if (!IncidentColumnConfiguration_.present ())
            {
              this->IncidentColumnConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!IncidentReportColumn_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncidentReportColumn",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IncidentColumnConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncidentColumnConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      IncidentReportTreeViewConfiguration* IncidentReportTreeViewConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IncidentReportTreeViewConfiguration (*this, f, c);
      }

      IncidentReportTreeViewConfiguration::
      ~IncidentReportTreeViewConfiguration ()
      {
      }

      bool
      operator== (const IncidentReportTreeViewConfiguration& x, const IncidentReportTreeViewConfiguration& y)
      {
        if (!(x.getIncidentReportColumn () == y.getIncidentReportColumn ()))
          return false;

        if (!(x.getIncidentColumnConfiguration () == y.getIncidentColumnConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const IncidentReportTreeViewConfiguration& x, const IncidentReportTreeViewConfiguration& y)
      {
        return !(x == y);
      }

      // ButtonConfiguration
      //

      ButtonConfiguration::
      ButtonConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ButtonConfiguration::
      ButtonConfiguration (const ButtonWidthType& ButtonWidth,
                           const ButtonHeightType& ButtonHeight,
                           const FontSizeType& FontSize)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonWidth_ (ButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonHeight_ (ButtonHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (FontSize, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ButtonConfiguration::
      ButtonConfiguration (const ButtonConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ButtonWidth_ (x.ButtonWidth_, f, this),
        ButtonHeight_ (x.ButtonHeight_, f, this),
        FontSize_ (x.FontSize_, f, this)
      {
      }

      ButtonConfiguration::
      ButtonConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ButtonWidth_ (f, this),
        ButtonHeight_ (f, this),
        FontSize_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ButtonConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ButtonWidth
          //
          if (n.name () == "ButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonWidth_.present ())
            {
              this->ButtonWidth_.set (ButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonHeight
          //
          if (n.name () == "ButtonHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonHeight_.present ())
            {
              this->ButtonHeight_.set (ButtonHeightTraits::create (i, f, this));
              continue;
            }
          }

          // FontSize
          //
          if (n.name () == "FontSize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FontSize_.present ())
            {
              this->FontSize_.set (FontSizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontSize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ButtonConfiguration* ButtonConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ButtonConfiguration (*this, f, c);
      }

      ButtonConfiguration::
      ~ButtonConfiguration ()
      {
      }

      bool
      operator== (const ButtonConfiguration& x, const ButtonConfiguration& y)
      {
        if (!(x.getButtonWidth () == y.getButtonWidth ()))
          return false;

        if (!(x.getButtonHeight () == y.getButtonHeight ()))
          return false;

        if (!(x.getFontSize () == y.getFontSize ()))
          return false;

        return true;
      }

      bool
      operator!= (const ButtonConfiguration& x, const ButtonConfiguration& y)
      {
        return !(x == y);
      }

      // ButtonBoxConfiguration
      //

      ButtonBoxConfiguration::
      ButtonBoxConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Spacing_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ButtonBoxConfiguration::
      ButtonBoxConfiguration (const ButtonWidthType& ButtonWidth,
                              const ButtonHeightType& ButtonHeight,
                              const SpacingType& Spacing)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonWidth_ (ButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonHeight_ (ButtonHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Spacing_ (Spacing, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ButtonBoxConfiguration::
      ButtonBoxConfiguration (const ButtonBoxConfiguration& x,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ButtonWidth_ (x.ButtonWidth_, f, this),
        ButtonHeight_ (x.ButtonHeight_, f, this),
        Spacing_ (x.Spacing_, f, this)
      {
      }

      ButtonBoxConfiguration::
      ButtonBoxConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ButtonWidth_ (f, this),
        ButtonHeight_ (f, this),
        Spacing_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ButtonBoxConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ButtonWidth
          //
          if (n.name () == "ButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonWidth_.present ())
            {
              this->ButtonWidth_.set (ButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonHeight
          //
          if (n.name () == "ButtonHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonHeight_.present ())
            {
              this->ButtonHeight_.set (ButtonHeightTraits::create (i, f, this));
              continue;
            }
          }

          // Spacing
          //
          if (n.name () == "Spacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Spacing_.present ())
            {
              this->Spacing_.set (SpacingTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Spacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Spacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ButtonBoxConfiguration* ButtonBoxConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ButtonBoxConfiguration (*this, f, c);
      }

      ButtonBoxConfiguration::
      ~ButtonBoxConfiguration ()
      {
      }

      bool
      operator== (const ButtonBoxConfiguration& x, const ButtonBoxConfiguration& y)
      {
        if (!(x.getButtonWidth () == y.getButtonWidth ()))
          return false;

        if (!(x.getButtonHeight () == y.getButtonHeight ()))
          return false;

        if (!(x.getSpacing () == y.getSpacing ()))
          return false;

        return true;
      }

      bool
      operator!= (const ButtonBoxConfiguration& x, const ButtonBoxConfiguration& y)
      {
        return !(x == y);
      }

      // MenuWidgetConfiguration
      //

      MenuWidgetConfiguration::
      MenuWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        FirstLevelWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelBorderWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelFrameWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelFrameHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelBorderWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelFramePadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HasShortcut_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RootOption_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuWidgetConfiguration::
      MenuWidgetConfiguration (const FirstLevelWidthType& FirstLevelWidth,
                               const FirstLevelHeightType& FirstLevelHeight,
                               const FirstLevelSpacingType& FirstLevelSpacing,
                               const FirstLevelBorderWidthType& FirstLevelBorderWidth,
                               const FirstLevelFrameWidthType& FirstLevelFrameWidth,
                               const FirstLevelFrameHeightType& FirstLevelFrameHeight,
                               const SecondLevelWidthType& SecondLevelWidth,
                               const SecondLevelHeightType& SecondLevelHeight,
                               const SecondLevelSpacingType& SecondLevelSpacing,
                               const SecondLevelBorderWidthType& SecondLevelBorderWidth,
                               const SecondLevelFramePaddingType& SecondLevelFramePadding,
                               const HasShortcutType& HasShortcut,
                               const RootOptionType& RootOption)
      : ::Smartmatic::ConfigurationTypes::Type (),
        FirstLevelWidth_ (FirstLevelWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelHeight_ (FirstLevelHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelSpacing_ (FirstLevelSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelBorderWidth_ (FirstLevelBorderWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelFrameWidth_ (FirstLevelFrameWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelFrameHeight_ (FirstLevelFrameHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelWidth_ (SecondLevelWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelHeight_ (SecondLevelHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelSpacing_ (SecondLevelSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelBorderWidth_ (SecondLevelBorderWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelFramePadding_ (SecondLevelFramePadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HasShortcut_ (HasShortcut, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RootOption_ (RootOption, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuWidgetConfiguration::
      MenuWidgetConfiguration (const FirstLevelWidthType& FirstLevelWidth,
                               const FirstLevelHeightType& FirstLevelHeight,
                               const FirstLevelSpacingType& FirstLevelSpacing,
                               const FirstLevelBorderWidthType& FirstLevelBorderWidth,
                               const FirstLevelFrameWidthType& FirstLevelFrameWidth,
                               const FirstLevelFrameHeightType& FirstLevelFrameHeight,
                               const SecondLevelWidthType& SecondLevelWidth,
                               const SecondLevelHeightType& SecondLevelHeight,
                               const SecondLevelSpacingType& SecondLevelSpacing,
                               const SecondLevelBorderWidthType& SecondLevelBorderWidth,
                               const SecondLevelFramePaddingType& SecondLevelFramePadding,
                               const HasShortcutType& HasShortcut,
                               ::std::auto_ptr< RootOptionType >& RootOption)
      : ::Smartmatic::ConfigurationTypes::Type (),
        FirstLevelWidth_ (FirstLevelWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelHeight_ (FirstLevelHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelSpacing_ (FirstLevelSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelBorderWidth_ (FirstLevelBorderWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelFrameWidth_ (FirstLevelFrameWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FirstLevelFrameHeight_ (FirstLevelFrameHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelWidth_ (SecondLevelWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelHeight_ (SecondLevelHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelSpacing_ (SecondLevelSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelBorderWidth_ (SecondLevelBorderWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SecondLevelFramePadding_ (SecondLevelFramePadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HasShortcut_ (HasShortcut, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RootOption_ (RootOption, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuWidgetConfiguration::
      MenuWidgetConfiguration (const MenuWidgetConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        FirstLevelWidth_ (x.FirstLevelWidth_, f, this),
        FirstLevelHeight_ (x.FirstLevelHeight_, f, this),
        FirstLevelSpacing_ (x.FirstLevelSpacing_, f, this),
        FirstLevelBorderWidth_ (x.FirstLevelBorderWidth_, f, this),
        FirstLevelFrameWidth_ (x.FirstLevelFrameWidth_, f, this),
        FirstLevelFrameHeight_ (x.FirstLevelFrameHeight_, f, this),
        SecondLevelWidth_ (x.SecondLevelWidth_, f, this),
        SecondLevelHeight_ (x.SecondLevelHeight_, f, this),
        SecondLevelSpacing_ (x.SecondLevelSpacing_, f, this),
        SecondLevelBorderWidth_ (x.SecondLevelBorderWidth_, f, this),
        SecondLevelFramePadding_ (x.SecondLevelFramePadding_, f, this),
        HasShortcut_ (x.HasShortcut_, f, this),
        RootOption_ (x.RootOption_, f, this)
      {
      }

      MenuWidgetConfiguration::
      MenuWidgetConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        FirstLevelWidth_ (f, this),
        FirstLevelHeight_ (f, this),
        FirstLevelSpacing_ (f, this),
        FirstLevelBorderWidth_ (f, this),
        FirstLevelFrameWidth_ (f, this),
        FirstLevelFrameHeight_ (f, this),
        SecondLevelWidth_ (f, this),
        SecondLevelHeight_ (f, this),
        SecondLevelSpacing_ (f, this),
        SecondLevelBorderWidth_ (f, this),
        SecondLevelFramePadding_ (f, this),
        HasShortcut_ (f, this),
        RootOption_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MenuWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FirstLevelWidth
          //
          if (n.name () == "FirstLevelWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FirstLevelWidth_.present ())
            {
              this->FirstLevelWidth_.set (FirstLevelWidthTraits::create (i, f, this));
              continue;
            }
          }

          // FirstLevelHeight
          //
          if (n.name () == "FirstLevelHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FirstLevelHeight_.present ())
            {
              this->FirstLevelHeight_.set (FirstLevelHeightTraits::create (i, f, this));
              continue;
            }
          }

          // FirstLevelSpacing
          //
          if (n.name () == "FirstLevelSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FirstLevelSpacing_.present ())
            {
              this->FirstLevelSpacing_.set (FirstLevelSpacingTraits::create (i, f, this));
              continue;
            }
          }

          // FirstLevelBorderWidth
          //
          if (n.name () == "FirstLevelBorderWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FirstLevelBorderWidth_.present ())
            {
              this->FirstLevelBorderWidth_.set (FirstLevelBorderWidthTraits::create (i, f, this));
              continue;
            }
          }

          // FirstLevelFrameWidth
          //
          if (n.name () == "FirstLevelFrameWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FirstLevelFrameWidth_.present ())
            {
              this->FirstLevelFrameWidth_.set (FirstLevelFrameWidthTraits::create (i, f, this));
              continue;
            }
          }

          // FirstLevelFrameHeight
          //
          if (n.name () == "FirstLevelFrameHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FirstLevelFrameHeight_.present ())
            {
              this->FirstLevelFrameHeight_.set (FirstLevelFrameHeightTraits::create (i, f, this));
              continue;
            }
          }

          // SecondLevelWidth
          //
          if (n.name () == "SecondLevelWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SecondLevelWidth_.present ())
            {
              this->SecondLevelWidth_.set (SecondLevelWidthTraits::create (i, f, this));
              continue;
            }
          }

          // SecondLevelHeight
          //
          if (n.name () == "SecondLevelHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SecondLevelHeight_.present ())
            {
              this->SecondLevelHeight_.set (SecondLevelHeightTraits::create (i, f, this));
              continue;
            }
          }

          // SecondLevelSpacing
          //
          if (n.name () == "SecondLevelSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SecondLevelSpacing_.present ())
            {
              this->SecondLevelSpacing_.set (SecondLevelSpacingTraits::create (i, f, this));
              continue;
            }
          }

          // SecondLevelBorderWidth
          //
          if (n.name () == "SecondLevelBorderWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SecondLevelBorderWidth_.present ())
            {
              this->SecondLevelBorderWidth_.set (SecondLevelBorderWidthTraits::create (i, f, this));
              continue;
            }
          }

          // SecondLevelFramePadding
          //
          if (n.name () == "SecondLevelFramePadding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SecondLevelFramePadding_.present ())
            {
              this->SecondLevelFramePadding_.set (SecondLevelFramePaddingTraits::create (i, f, this));
              continue;
            }
          }

          // HasShortcut
          //
          if (n.name () == "HasShortcut" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HasShortcut_.present ())
            {
              this->HasShortcut_.set (HasShortcutTraits::create (i, f, this));
              continue;
            }
          }

          // RootOption
          //
          if (n.name () == "RootOption" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RootOptionType > r (
              RootOptionTraits::create (i, f, this));

            if (!RootOption_.present ())
            {
              this->RootOption_.set (r);
              continue;
            }
          }

          break;
        }

        if (!FirstLevelWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstLevelWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FirstLevelHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstLevelHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FirstLevelSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstLevelSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FirstLevelBorderWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstLevelBorderWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FirstLevelFrameWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstLevelFrameWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FirstLevelFrameHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstLevelFrameHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SecondLevelWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SecondLevelWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SecondLevelHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SecondLevelHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SecondLevelSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SecondLevelSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SecondLevelBorderWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SecondLevelBorderWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SecondLevelFramePadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SecondLevelFramePadding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HasShortcut_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HasShortcut",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RootOption_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RootOption",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      MenuWidgetConfiguration* MenuWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class MenuWidgetConfiguration (*this, f, c);
      }

      MenuWidgetConfiguration::
      ~MenuWidgetConfiguration ()
      {
      }

      bool
      operator== (const MenuWidgetConfiguration& x, const MenuWidgetConfiguration& y)
      {
        if (!(x.getFirstLevelWidth () == y.getFirstLevelWidth ()))
          return false;

        if (!(x.getFirstLevelHeight () == y.getFirstLevelHeight ()))
          return false;

        if (!(x.getFirstLevelSpacing () == y.getFirstLevelSpacing ()))
          return false;

        if (!(x.getFirstLevelBorderWidth () == y.getFirstLevelBorderWidth ()))
          return false;

        if (!(x.getFirstLevelFrameWidth () == y.getFirstLevelFrameWidth ()))
          return false;

        if (!(x.getFirstLevelFrameHeight () == y.getFirstLevelFrameHeight ()))
          return false;

        if (!(x.getSecondLevelWidth () == y.getSecondLevelWidth ()))
          return false;

        if (!(x.getSecondLevelHeight () == y.getSecondLevelHeight ()))
          return false;

        if (!(x.getSecondLevelSpacing () == y.getSecondLevelSpacing ()))
          return false;

        if (!(x.getSecondLevelBorderWidth () == y.getSecondLevelBorderWidth ()))
          return false;

        if (!(x.getSecondLevelFramePadding () == y.getSecondLevelFramePadding ()))
          return false;

        if (!(x.getHasShortcut () == y.getHasShortcut ()))
          return false;

        if (!(x.getRootOption () == y.getRootOption ()))
          return false;

        return true;
      }

      bool
      operator!= (const MenuWidgetConfiguration& x, const MenuWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // MenuOption
      //

      MenuOption::
      MenuOption ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NameKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UntraslatedKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Code_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MappingKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MappingKeyName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuOption::
      MenuOption (const NameKeyType& NameKey,
                  const UntraslatedKeyType& UntraslatedKey,
                  const ImageKeyType& ImageKey,
                  const CodeType& Code,
                  const MappingKeyType& MappingKey,
                  const MappingKeyNameType& MappingKeyName,
                  const OptionTypeType& OptionType,
                  const MenuOptionsType& MenuOptions)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NameKey_ (NameKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UntraslatedKey_ (UntraslatedKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageKey_ (ImageKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Code_ (Code, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MappingKey_ (MappingKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MappingKeyName_ (MappingKeyName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionType_ (OptionType, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MenuOptions_ (MenuOptions, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuOption::
      MenuOption (const NameKeyType& NameKey,
                  const UntraslatedKeyType& UntraslatedKey,
                  const ImageKeyType& ImageKey,
                  const CodeType& Code,
                  const MappingKeyType& MappingKey,
                  const MappingKeyNameType& MappingKeyName,
                  const OptionTypeType& OptionType,
                  ::std::auto_ptr< MenuOptionsType >& MenuOptions)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NameKey_ (NameKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UntraslatedKey_ (UntraslatedKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageKey_ (ImageKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Code_ (Code, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MappingKey_ (MappingKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MappingKeyName_ (MappingKeyName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionType_ (OptionType, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MenuOptions_ (MenuOptions, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuOption::
      MenuOption (const MenuOption& x,
                  ::Smartmatic::ConfigurationTypes::Flags f,
                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NameKey_ (x.NameKey_, f, this),
        UntraslatedKey_ (x.UntraslatedKey_, f, this),
        ImageKey_ (x.ImageKey_, f, this),
        Code_ (x.Code_, f, this),
        MappingKey_ (x.MappingKey_, f, this),
        MappingKeyName_ (x.MappingKeyName_, f, this),
        OptionType_ (x.OptionType_, f, this),
        MenuOptions_ (x.MenuOptions_, f, this)
      {
      }

      MenuOption::
      MenuOption (const ::xercesc::DOMElement& e,
                  ::Smartmatic::ConfigurationTypes::Flags f,
                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NameKey_ (f, this),
        UntraslatedKey_ (f, this),
        ImageKey_ (f, this),
        Code_ (f, this),
        MappingKey_ (f, this),
        MappingKeyName_ (f, this),
        OptionType_ (f, this),
        MenuOptions_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MenuOption::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NameKey
          //
          if (n.name () == "NameKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NameKeyType > r (
              NameKeyTraits::create (i, f, this));

            if (!NameKey_.present ())
            {
              this->NameKey_.set (r);
              continue;
            }
          }

          // UntraslatedKey
          //
          if (n.name () == "UntraslatedKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< UntraslatedKeyType > r (
              UntraslatedKeyTraits::create (i, f, this));

            if (!UntraslatedKey_.present ())
            {
              this->UntraslatedKey_.set (r);
              continue;
            }
          }

          // ImageKey
          //
          if (n.name () == "ImageKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ImageKeyType > r (
              ImageKeyTraits::create (i, f, this));

            if (!ImageKey_.present ())
            {
              this->ImageKey_.set (r);
              continue;
            }
          }

          // Code
          //
          if (n.name () == "Code" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Code_.present ())
            {
              this->Code_.set (CodeTraits::create (i, f, this));
              continue;
            }
          }

          // MappingKey
          //
          if (n.name () == "MappingKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MappingKey_.present ())
            {
              this->MappingKey_.set (MappingKeyTraits::create (i, f, this));
              continue;
            }
          }

          // MappingKeyName
          //
          if (n.name () == "MappingKeyName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< MappingKeyNameType > r (
              MappingKeyNameTraits::create (i, f, this));

            if (!MappingKeyName_.present ())
            {
              this->MappingKeyName_.set (r);
              continue;
            }
          }

          // OptionType
          //
          if (n.name () == "OptionType" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OptionTypeType > r (
              OptionTypeTraits::create (i, f, this));

            if (!OptionType_.present ())
            {
              this->OptionType_.set (r);
              continue;
            }
          }

          // MenuOptions
          //
          if (n.name () == "MenuOptions" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< MenuOptionsType > r (
              MenuOptionsTraits::create (i, f, this));

            if (!MenuOptions_.present ())
            {
              this->MenuOptions_.set (r);
              continue;
            }
          }

          break;
        }

        if (!NameKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NameKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UntraslatedKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UntraslatedKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ImageKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ImageKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Code_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Code",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MappingKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MappingKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MappingKeyName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MappingKeyName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!OptionType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OptionType",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MenuOptions_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MenuOptions",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      MenuOption* MenuOption::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class MenuOption (*this, f, c);
      }

      MenuOption::
      ~MenuOption ()
      {
      }

      bool
      operator== (const MenuOption& x, const MenuOption& y)
      {
        if (!(x.getNameKey () == y.getNameKey ()))
          return false;

        if (!(x.getUntraslatedKey () == y.getUntraslatedKey ()))
          return false;

        if (!(x.getImageKey () == y.getImageKey ()))
          return false;

        if (!(x.getCode () == y.getCode ()))
          return false;

        if (!(x.getMappingKey () == y.getMappingKey ()))
          return false;

        if (!(x.getMappingKeyName () == y.getMappingKeyName ()))
          return false;

        if (!(x.getOptionType () == y.getOptionType ()))
          return false;

        if (!(x.getMenuOptions () == y.getMenuOptions ()))
          return false;

        return true;
      }

      bool
      operator!= (const MenuOption& x, const MenuOption& y)
      {
        return !(x == y);
      }

      // MenuOptionType
      //

      MenuOptionType::
      MenuOptionType (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_MenuOptionType_convert ();
      }

      MenuOptionType::
      MenuOptionType (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_MenuOptionType_convert ();
      }

      MenuOptionType::
      MenuOptionType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_MenuOptionType_convert ();
      }

      MenuOptionType* MenuOptionType::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class MenuOptionType (*this, f, c);
      }

      MenuOptionType::Value MenuOptionType::
      _xsd_MenuOptionType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MenuOptionType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_MenuOptionType_indexes_,
                          _xsd_MenuOptionType_indexes_ + 35,
                          *this,
                          c));

        if (i == _xsd_MenuOptionType_indexes_ + 35 || _xsd_MenuOptionType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const MenuOptionType::
      _xsd_MenuOptionType_literals_[35] =
      {
        "XMLMenu",
        "XMLMOpenElectionFunctionality",
        "XMLMCloseElectionFunctionality",
        "XMLMDiagnosisFunctionality",
        "XMLMSCReaderDiagnosisFunctionality",
        "XMLMPrinterDiagnosisFunctionality",
        "XMLMAlarmBoxDiagnosisFunctionality",
        "XMLMCalibrationDiagnosisFunctionality",
        "XMLMBrightnessDiagnosisFunctionality",
        "XMLMBarcodeDiagnosisFunctionality",
        "XMLMAllDiagnosisFunctionality",
        "XMLMFlashDiagnosisFunctionality",
        "XMLMChangeHourFunctionality",
        "XMLMCardGeneratorFunctionality",
        "XMLMAssistedCardGeneratorFunctionality",
        "XMLMRecoveryCardGeneratorFunctionality",
        "XMLMVotingMachineInstallationFunctionality",
        "XMLMChangeLanguageFunctionality",
        "XMLMVoteProcessDemoFunctionality",
        "XMLMPrintPreviewFunctionality",
        "XMLMIncidentReportFunctionality",
        "XMLMStatisticsReportFunctionality",
        "XMLMPollWorkerRegisterFunctionality",
        "XMLMVotingExperienceValidationFunctionality",
        "XMLMVoteConsolidationFunctionality",
        "XMLMCloseVotationFunctionality",
        "XMLMRegisterPresidentNotesFunctionality",
        "XMLMMReportPrintingFunctionality",
        "XMLMLogReportFunctionality",
        "XMLMShutdowmMachineFunctionality",
        "XMLMFillAssistedActivationInfoFunctionality",
        "XMLMActivationConsolidationFunctionality",
        "XMLMVotingForDisabledFunctionality",
        "XMLMPoliceNotesFunctionality",
        "XMLMDataUtilsValidatorFunctionality"
      };

      const MenuOptionType::Value MenuOptionType::
      _xsd_MenuOptionType_indexes_[35] =
      {
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMACTIVATIONCONSOLIDATIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMALARMBOXDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMALLDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMASSISTEDCARDGENERATORFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMBARCODEDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMBRIGHTNESSDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMCALIBRATIONDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMCARDGENERATORFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMCHANGEHOURFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMCHANGELANGUAGEFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMCLOSEELECTIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMCLOSEVOTATIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMDATAUTILSVALIDATORFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMFILLASSISTEDACTIVATIONINFOFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMFLASHDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMINCIDENTREPORTFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMLOGREPORTFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMMREPORTPRINTINGFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMOPENELECTIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMPOLICENOTESFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMPOLLWORKERREGISTERFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMPRINTPREVIEWFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMPRINTERDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMRECOVERYCARDGENERATORFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMREGISTERPRESIDENTNOTESFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMSCREADERDIAGNOSISFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMSHUTDOWMMACHINEFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMSTATISTICSREPORTFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMVOTECONSOLIDATIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMVOTEPROCESSDEMOFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMVOTINGEXPERIENCEVALIDATIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMVOTINGFORDISABLEDFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMVOTINGMACHINEINSTALLATIONFUNCTIONALITY,
        ::Smartmatic::SAES::Configuration::MenuOptionType::CONFIGURATION_XMLMENU
      };

      // CustomAttributesPresentationType
      //

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_CustomAttributesPresentationType_convert ();
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const ::xercesc::DOMAttr& a,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_CustomAttributesPresentationType_convert ();
      }

      CustomAttributesPresentationType::
      CustomAttributesPresentationType (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_CustomAttributesPresentationType_convert ();
      }

      CustomAttributesPresentationType* CustomAttributesPresentationType::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CustomAttributesPresentationType (*this, f, c);
      }

      CustomAttributesPresentationType::Value CustomAttributesPresentationType::
      _xsd_CustomAttributesPresentationType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CustomAttributesPresentationType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_CustomAttributesPresentationType_indexes_,
                          _xsd_CustomAttributesPresentationType_indexes_ + 4,
                          *this,
                          c));

        if (i == _xsd_CustomAttributesPresentationType_indexes_ + 4 || _xsd_CustomAttributesPresentationType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const CustomAttributesPresentationType::
      _xsd_CustomAttributesPresentationType_literals_[4] =
      {
        "SelectionWindows",
        "EventBoxes",
        "ComboBoxes",
        "RadioButtons"
      };

      const CustomAttributesPresentationType::Value CustomAttributesPresentationType::
      _xsd_CustomAttributesPresentationType_indexes_[4] =
      {
        ::Smartmatic::SAES::Configuration::CustomAttributesPresentationType::CONFIGURATION_COMBOBOXES,
        ::Smartmatic::SAES::Configuration::CustomAttributesPresentationType::CONFIGURATION_EVENTBOXES,
        ::Smartmatic::SAES::Configuration::CustomAttributesPresentationType::CONFIGURATION_RADIOBUTTONS,
        ::Smartmatic::SAES::Configuration::CustomAttributesPresentationType::CONFIGURATION_SELECTIONWINDOWS
      };

      // DiagnosticType
      //

      DiagnosticType::
      DiagnosticType ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Device_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Mandatory_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DiagnosticType::
      DiagnosticType (const DeviceType& Device,
                      const MandatoryType& Mandatory)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Device_ (Device, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Mandatory_ (Mandatory, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DiagnosticType::
      DiagnosticType (const DiagnosticType& x,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Device_ (x.Device_, f, this),
        Mandatory_ (x.Mandatory_, f, this)
      {
      }

      DiagnosticType::
      DiagnosticType (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Device_ (f, this),
        Mandatory_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void DiagnosticType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "Device" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< DeviceType > r (
              DeviceTraits::create (i, f, this));

            this->Device_.set (r);
            continue;
          }

          if (n.name () == "Mandatory" && n.namespace_ ().empty ())
          {
            this->Mandatory_.set (MandatoryTraits::create (i, f, this));
            continue;
          }
        }

        if (!Device_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Device",
            "");
        }

        if (!Mandatory_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Mandatory",
            "");
        }
      }

      DiagnosticType* DiagnosticType::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DiagnosticType (*this, f, c);
      }

      DiagnosticType::
      ~DiagnosticType ()
      {
      }

      bool
      operator== (const DiagnosticType& x, const DiagnosticType& y)
      {
        if (!(x.getDevice () == y.getDevice ()))
          return false;

        if (!(x.getMandatory () == y.getMandatory ()))
          return false;

        return true;
      }

      bool
      operator!= (const DiagnosticType& x, const DiagnosticType& y)
      {
        return !(x == y);
      }

      // DiagnosticDevice
      //

      DiagnosticDevice::
      DiagnosticDevice (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_DiagnosticDevice_convert ();
      }

      DiagnosticDevice::
      DiagnosticDevice (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_DiagnosticDevice_convert ();
      }

      DiagnosticDevice::
      DiagnosticDevice (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_DiagnosticDevice_convert ();
      }

      DiagnosticDevice* DiagnosticDevice::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DiagnosticDevice (*this, f, c);
      }

      DiagnosticDevice::Value DiagnosticDevice::
      _xsd_DiagnosticDevice_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DiagnosticDevice_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_DiagnosticDevice_indexes_,
                          _xsd_DiagnosticDevice_indexes_ + 7,
                          *this,
                          c));

        if (i == _xsd_DiagnosticDevice_indexes_ + 7 || _xsd_DiagnosticDevice_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const DiagnosticDevice::
      _xsd_DiagnosticDevice_literals_[7] =
      {
        "Barcode",
        "Printer",
        "AlarmBox",
        "SmartCard",
        "TouchScreenCalibration",
        "ScreenContrast",
        "Flash"
      };

      const DiagnosticDevice::Value DiagnosticDevice::
      _xsd_DiagnosticDevice_indexes_[7] =
      {
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_ALARMBOX,
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_BARCODE,
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_FLASH,
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_PRINTER,
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_SCREENCONTRAST,
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_SMARTCARD,
        ::Smartmatic::SAES::Configuration::DiagnosticDevice::CONFIGURATION_TOUCHSCREENCALIBRATION
      };

      // VotingExperienceConfiguration
      //

      VotingExperienceConfiguration::
      VotingExperienceConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        SortOptionsAlphabetical_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SortLanguagesAlphabetical_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DetectCardExtraction_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NumberOfExtractionsBeforeStop_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionSelection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ReferendumSelection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAtributtesWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConfirmationWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceLabel_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOutCard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToShowFinalMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveCardFirst_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MarkCardAsUsed_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumFailTimerMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumFailOption_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceConfiguration::
      VotingExperienceConfiguration (const SortOptionsAlphabeticalType& SortOptionsAlphabetical,
                                     const SortLanguagesAlphabeticalType& SortLanguagesAlphabetical,
                                     const DetectCardExtractionType& DetectCardExtraction,
                                     const NumberOfExtractionsBeforeStopType& NumberOfExtractionsBeforeStop,
                                     const VotingWindowType& VotingWindow,
                                     const PartySelectionType& PartySelection,
                                     const BallotOptionSelectionType& BallotOptionSelection,
                                     const ReferendumSelectionType& ReferendumSelection,
                                     const CustomAtributtesWindowType& CustomAtributtesWindow,
                                     const ConfirmationWindowType& ConfirmationWindow,
                                     const VotingExperienceLabelType& VotingExperienceLabel,
                                     const TimeOutCardType& TimeOutCard,
                                     const TimeToShowFinalMessageType& TimeToShowFinalMessage,
                                     const RemoveCardFirstType& RemoveCardFirst,
                                     const MarkCardAsUsedType& MarkCardAsUsed,
                                     const CheckSumFailTimerMessageType& CheckSumFailTimerMessage,
                                     const CheckSumFailOptionType& CheckSumFailOption)
      : ::Smartmatic::ConfigurationTypes::Type (),
        SortOptionsAlphabetical_ (SortOptionsAlphabetical, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SortLanguagesAlphabetical_ (SortLanguagesAlphabetical, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DetectCardExtraction_ (DetectCardExtraction, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NumberOfExtractionsBeforeStop_ (NumberOfExtractionsBeforeStop, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWindow_ (VotingWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelection_ (PartySelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionSelection_ (BallotOptionSelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReferendumSelection_ (ReferendumSelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAtributtesWindow_ (CustomAtributtesWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConfirmationWindow_ (ConfirmationWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceLabel_ (VotingExperienceLabel, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOutCard_ (TimeOutCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToShowFinalMessage_ (TimeToShowFinalMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveCardFirst_ (RemoveCardFirst, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MarkCardAsUsed_ (MarkCardAsUsed, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumFailTimerMessage_ (CheckSumFailTimerMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumFailOption_ (CheckSumFailOption, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceConfiguration::
      VotingExperienceConfiguration (const SortOptionsAlphabeticalType& SortOptionsAlphabetical,
                                     const SortLanguagesAlphabeticalType& SortLanguagesAlphabetical,
                                     const DetectCardExtractionType& DetectCardExtraction,
                                     const NumberOfExtractionsBeforeStopType& NumberOfExtractionsBeforeStop,
                                     ::std::auto_ptr< VotingWindowType >& VotingWindow,
                                     ::std::auto_ptr< PartySelectionType >& PartySelection,
                                     ::std::auto_ptr< BallotOptionSelectionType >& BallotOptionSelection,
                                     ::std::auto_ptr< ReferendumSelectionType >& ReferendumSelection,
                                     ::std::auto_ptr< CustomAtributtesWindowType >& CustomAtributtesWindow,
                                     ::std::auto_ptr< ConfirmationWindowType >& ConfirmationWindow,
                                     ::std::auto_ptr< VotingExperienceLabelType >& VotingExperienceLabel,
                                     const TimeOutCardType& TimeOutCard,
                                     const TimeToShowFinalMessageType& TimeToShowFinalMessage,
                                     const RemoveCardFirstType& RemoveCardFirst,
                                     const MarkCardAsUsedType& MarkCardAsUsed,
                                     const CheckSumFailTimerMessageType& CheckSumFailTimerMessage,
                                     const CheckSumFailOptionType& CheckSumFailOption)
      : ::Smartmatic::ConfigurationTypes::Type (),
        SortOptionsAlphabetical_ (SortOptionsAlphabetical, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SortLanguagesAlphabetical_ (SortLanguagesAlphabetical, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DetectCardExtraction_ (DetectCardExtraction, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NumberOfExtractionsBeforeStop_ (NumberOfExtractionsBeforeStop, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWindow_ (VotingWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelection_ (PartySelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionSelection_ (BallotOptionSelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReferendumSelection_ (ReferendumSelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAtributtesWindow_ (CustomAtributtesWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConfirmationWindow_ (ConfirmationWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceLabel_ (VotingExperienceLabel, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOutCard_ (TimeOutCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToShowFinalMessage_ (TimeToShowFinalMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveCardFirst_ (RemoveCardFirst, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MarkCardAsUsed_ (MarkCardAsUsed, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumFailTimerMessage_ (CheckSumFailTimerMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumFailOption_ (CheckSumFailOption, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceConfiguration::
      VotingExperienceConfiguration (const VotingExperienceConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        SortOptionsAlphabetical_ (x.SortOptionsAlphabetical_, f, this),
        SortLanguagesAlphabetical_ (x.SortLanguagesAlphabetical_, f, this),
        DetectCardExtraction_ (x.DetectCardExtraction_, f, this),
        NumberOfExtractionsBeforeStop_ (x.NumberOfExtractionsBeforeStop_, f, this),
        VotingWindow_ (x.VotingWindow_, f, this),
        PartySelection_ (x.PartySelection_, f, this),
        BallotOptionSelection_ (x.BallotOptionSelection_, f, this),
        ReferendumSelection_ (x.ReferendumSelection_, f, this),
        CustomAtributtesWindow_ (x.CustomAtributtesWindow_, f, this),
        ConfirmationWindow_ (x.ConfirmationWindow_, f, this),
        VotingExperienceLabel_ (x.VotingExperienceLabel_, f, this),
        TimeOutCard_ (x.TimeOutCard_, f, this),
        TimeToShowFinalMessage_ (x.TimeToShowFinalMessage_, f, this),
        RemoveCardFirst_ (x.RemoveCardFirst_, f, this),
        MarkCardAsUsed_ (x.MarkCardAsUsed_, f, this),
        CheckSumFailTimerMessage_ (x.CheckSumFailTimerMessage_, f, this),
        CheckSumFailOption_ (x.CheckSumFailOption_, f, this)
      {
      }

      VotingExperienceConfiguration::
      VotingExperienceConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        SortOptionsAlphabetical_ (f, this),
        SortLanguagesAlphabetical_ (f, this),
        DetectCardExtraction_ (f, this),
        NumberOfExtractionsBeforeStop_ (f, this),
        VotingWindow_ (f, this),
        PartySelection_ (f, this),
        BallotOptionSelection_ (f, this),
        ReferendumSelection_ (f, this),
        CustomAtributtesWindow_ (f, this),
        ConfirmationWindow_ (f, this),
        VotingExperienceLabel_ (f, this),
        TimeOutCard_ (f, this),
        TimeToShowFinalMessage_ (f, this),
        RemoveCardFirst_ (f, this),
        MarkCardAsUsed_ (f, this),
        CheckSumFailTimerMessage_ (f, this),
        CheckSumFailOption_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VotingExperienceConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SortOptionsAlphabetical
          //
          if (n.name () == "SortOptionsAlphabetical" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SortOptionsAlphabetical_.present ())
            {
              this->SortOptionsAlphabetical_.set (SortOptionsAlphabeticalTraits::create (i, f, this));
              continue;
            }
          }

          // SortLanguagesAlphabetical
          //
          if (n.name () == "SortLanguagesAlphabetical" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SortLanguagesAlphabetical_.present ())
            {
              this->SortLanguagesAlphabetical_.set (SortLanguagesAlphabeticalTraits::create (i, f, this));
              continue;
            }
          }

          // DetectCardExtraction
          //
          if (n.name () == "DetectCardExtraction" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!DetectCardExtraction_.present ())
            {
              this->DetectCardExtraction_.set (DetectCardExtractionTraits::create (i, f, this));
              continue;
            }
          }

          // NumberOfExtractionsBeforeStop
          //
          if (n.name () == "NumberOfExtractionsBeforeStop" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberOfExtractionsBeforeStop_.present ())
            {
              this->NumberOfExtractionsBeforeStop_.set (NumberOfExtractionsBeforeStopTraits::create (i, f, this));
              continue;
            }
          }

          // VotingWindow
          //
          if (n.name () == "VotingWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWindowType > r (
              VotingWindowTraits::create (i, f, this));

            if (!VotingWindow_.present ())
            {
              this->VotingWindow_.set (r);
              continue;
            }
          }

          // PartySelection
          //
          if (n.name () == "PartySelection" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartySelectionType > r (
              PartySelectionTraits::create (i, f, this));

            if (!PartySelection_.present ())
            {
              this->PartySelection_.set (r);
              continue;
            }
          }

          // BallotOptionSelection
          //
          if (n.name () == "BallotOptionSelection" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotOptionSelectionType > r (
              BallotOptionSelectionTraits::create (i, f, this));

            if (!BallotOptionSelection_.present ())
            {
              this->BallotOptionSelection_.set (r);
              continue;
            }
          }

          // ReferendumSelection
          //
          if (n.name () == "ReferendumSelection" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ReferendumSelectionType > r (
              ReferendumSelectionTraits::create (i, f, this));

            if (!ReferendumSelection_.present ())
            {
              this->ReferendumSelection_.set (r);
              continue;
            }
          }

          // CustomAtributtesWindow
          //
          if (n.name () == "CustomAtributtesWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CustomAtributtesWindowType > r (
              CustomAtributtesWindowTraits::create (i, f, this));

            if (!CustomAtributtesWindow_.present ())
            {
              this->CustomAtributtesWindow_.set (r);
              continue;
            }
          }

          // ConfirmationWindow
          //
          if (n.name () == "ConfirmationWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ConfirmationWindowType > r (
              ConfirmationWindowTraits::create (i, f, this));

            if (!ConfirmationWindow_.present ())
            {
              this->ConfirmationWindow_.set (r);
              continue;
            }
          }

          // VotingExperienceLabel
          //
          if (n.name () == "VotingExperienceLabel" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceLabelType > r (
              VotingExperienceLabelTraits::create (i, f, this));

            if (!VotingExperienceLabel_.present ())
            {
              this->VotingExperienceLabel_.set (r);
              continue;
            }
          }

          // TimeOutCard
          //
          if (n.name () == "TimeOutCard" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeOutCard_.present ())
            {
              this->TimeOutCard_.set (TimeOutCardTraits::create (i, f, this));
              continue;
            }
          }

          // TimeToShowFinalMessage
          //
          if (n.name () == "TimeToShowFinalMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeToShowFinalMessage_.present ())
            {
              this->TimeToShowFinalMessage_.set (TimeToShowFinalMessageTraits::create (i, f, this));
              continue;
            }
          }

          // RemoveCardFirst
          //
          if (n.name () == "RemoveCardFirst" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RemoveCardFirst_.present ())
            {
              this->RemoveCardFirst_.set (RemoveCardFirstTraits::create (i, f, this));
              continue;
            }
          }

          // MarkCardAsUsed
          //
          if (n.name () == "MarkCardAsUsed" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MarkCardAsUsed_.present ())
            {
              this->MarkCardAsUsed_.set (MarkCardAsUsedTraits::create (i, f, this));
              continue;
            }
          }

          // CheckSumFailTimerMessage
          //
          if (n.name () == "CheckSumFailTimerMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CheckSumFailTimerMessage_.present ())
            {
              this->CheckSumFailTimerMessage_.set (CheckSumFailTimerMessageTraits::create (i, f, this));
              continue;
            }
          }

          // CheckSumFailOption
          //
          if (n.name () == "CheckSumFailOption" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CheckSumFailOptionType > r (
              CheckSumFailOptionTraits::create (i, f, this));

            if (!CheckSumFailOption_.present ())
            {
              this->CheckSumFailOption_.set (r);
              continue;
            }
          }

          break;
        }

        if (!SortOptionsAlphabetical_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SortOptionsAlphabetical",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SortLanguagesAlphabetical_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SortLanguagesAlphabetical",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DetectCardExtraction_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DetectCardExtraction",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NumberOfExtractionsBeforeStop_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberOfExtractionsBeforeStop",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartySelection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartySelection",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotOptionSelection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotOptionSelection",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ReferendumSelection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ReferendumSelection",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CustomAtributtesWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CustomAtributtesWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConfirmationWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfirmationWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceLabel",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeOutCard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeOutCard",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeToShowFinalMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeToShowFinalMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RemoveCardFirst_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RemoveCardFirst",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MarkCardAsUsed_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MarkCardAsUsed",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CheckSumFailTimerMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CheckSumFailTimerMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CheckSumFailOption_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CheckSumFailOption",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VotingExperienceConfiguration* VotingExperienceConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VotingExperienceConfiguration (*this, f, c);
      }

      VotingExperienceConfiguration::
      ~VotingExperienceConfiguration ()
      {
      }

      bool
      operator== (const VotingExperienceConfiguration& x, const VotingExperienceConfiguration& y)
      {
        if (!(x.getSortOptionsAlphabetical () == y.getSortOptionsAlphabetical ()))
          return false;

        if (!(x.getSortLanguagesAlphabetical () == y.getSortLanguagesAlphabetical ()))
          return false;

        if (!(x.getDetectCardExtraction () == y.getDetectCardExtraction ()))
          return false;

        if (!(x.getNumberOfExtractionsBeforeStop () == y.getNumberOfExtractionsBeforeStop ()))
          return false;

        if (!(x.getVotingWindow () == y.getVotingWindow ()))
          return false;

        if (!(x.getPartySelection () == y.getPartySelection ()))
          return false;

        if (!(x.getBallotOptionSelection () == y.getBallotOptionSelection ()))
          return false;

        if (!(x.getReferendumSelection () == y.getReferendumSelection ()))
          return false;

        if (!(x.getCustomAtributtesWindow () == y.getCustomAtributtesWindow ()))
          return false;

        if (!(x.getConfirmationWindow () == y.getConfirmationWindow ()))
          return false;

        if (!(x.getVotingExperienceLabel () == y.getVotingExperienceLabel ()))
          return false;

        if (!(x.getTimeOutCard () == y.getTimeOutCard ()))
          return false;

        if (!(x.getTimeToShowFinalMessage () == y.getTimeToShowFinalMessage ()))
          return false;

        if (!(x.getRemoveCardFirst () == y.getRemoveCardFirst ()))
          return false;

        if (!(x.getMarkCardAsUsed () == y.getMarkCardAsUsed ()))
          return false;

        if (!(x.getCheckSumFailTimerMessage () == y.getCheckSumFailTimerMessage ()))
          return false;

        if (!(x.getCheckSumFailOption () == y.getCheckSumFailOption ()))
          return false;

        return true;
      }

      bool
      operator!= (const VotingExperienceConfiguration& x, const VotingExperienceConfiguration& y)
      {
        return !(x == y);
      }

      // PartySelectionConfiguration
      //

      PartySelectionConfiguration::
      PartySelectionConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseMaxPartyNumerFromAllContest_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullParty_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ExpandButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparateButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Columns_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SizeToColumns_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageRelation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartiesMargin_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelectionAlignment_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartySelectionConfiguration::
      PartySelectionConfiguration (const EnableClickType& EnableClick,
                                   const UseMaxPartyNumerFromAllContestType& UseMaxPartyNumerFromAllContest,
                                   const ShowNullPartyType& ShowNullParty,
                                   const ShowNullButtonType& ShowNullButton,
                                   const PartyButtonType& PartyButton,
                                   const ExpandButtonType& ExpandButton,
                                   const SeparateButtonType& SeparateButton,
                                   const FrameBottomHeightType& FrameBottomHeight,
                                   const ColumnsType& Columns,
                                   const SizeToColumnsType& SizeToColumns,
                                   const ImageRelationType& ImageRelation,
                                   const PartiesMarginType& PartiesMargin,
                                   const PartyWidgetType& PartyWidget,
                                   const PartySelectionAlignmentType& PartySelectionAlignment,
                                   const HeaderLabelConfigurationType& HeaderLabelConfiguration,
                                   const BottomLabelConfigurationType& BottomLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (EnableClick, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseMaxPartyNumerFromAllContest_ (UseMaxPartyNumerFromAllContest, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullParty_ (ShowNullParty, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullButton_ (ShowNullButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyButton_ (PartyButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExpandButton_ (ExpandButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparateButton_ (SeparateButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (FrameBottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Columns_ (Columns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SizeToColumns_ (SizeToColumns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageRelation_ (ImageRelation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartiesMargin_ (PartiesMargin, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyWidget_ (PartyWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelectionAlignment_ (PartySelectionAlignment, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartySelectionConfiguration::
      PartySelectionConfiguration (const EnableClickType& EnableClick,
                                   const UseMaxPartyNumerFromAllContestType& UseMaxPartyNumerFromAllContest,
                                   const ShowNullPartyType& ShowNullParty,
                                   const ShowNullButtonType& ShowNullButton,
                                   const PartyButtonType& PartyButton,
                                   ::std::auto_ptr< ExpandButtonType >& ExpandButton,
                                   ::std::auto_ptr< SeparateButtonType >& SeparateButton,
                                   const FrameBottomHeightType& FrameBottomHeight,
                                   const ColumnsType& Columns,
                                   const SizeToColumnsType& SizeToColumns,
                                   const ImageRelationType& ImageRelation,
                                   const PartiesMarginType& PartiesMargin,
                                   ::std::auto_ptr< PartyWidgetType >& PartyWidget,
                                   const PartySelectionAlignmentType& PartySelectionAlignment,
                                   ::std::auto_ptr< HeaderLabelConfigurationType >& HeaderLabelConfiguration,
                                   ::std::auto_ptr< BottomLabelConfigurationType >& BottomLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (EnableClick, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseMaxPartyNumerFromAllContest_ (UseMaxPartyNumerFromAllContest, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullParty_ (ShowNullParty, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullButton_ (ShowNullButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyButton_ (PartyButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExpandButton_ (ExpandButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparateButton_ (SeparateButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (FrameBottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Columns_ (Columns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SizeToColumns_ (SizeToColumns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageRelation_ (ImageRelation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartiesMargin_ (PartiesMargin, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyWidget_ (PartyWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelectionAlignment_ (PartySelectionAlignment, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartySelectionConfiguration::
      PartySelectionConfiguration (const PartySelectionConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        EnableClick_ (x.EnableClick_, f, this),
        UseMaxPartyNumerFromAllContest_ (x.UseMaxPartyNumerFromAllContest_, f, this),
        ShowNullParty_ (x.ShowNullParty_, f, this),
        ShowNullButton_ (x.ShowNullButton_, f, this),
        PartyButton_ (x.PartyButton_, f, this),
        ExpandButton_ (x.ExpandButton_, f, this),
        SeparateButton_ (x.SeparateButton_, f, this),
        FrameBottomHeight_ (x.FrameBottomHeight_, f, this),
        Columns_ (x.Columns_, f, this),
        SizeToColumns_ (x.SizeToColumns_, f, this),
        ImageRelation_ (x.ImageRelation_, f, this),
        PartiesMargin_ (x.PartiesMargin_, f, this),
        PartyWidget_ (x.PartyWidget_, f, this),
        PartySelectionAlignment_ (x.PartySelectionAlignment_, f, this),
        HeaderLabelConfiguration_ (x.HeaderLabelConfiguration_, f, this),
        BottomLabelConfiguration_ (x.BottomLabelConfiguration_, f, this)
      {
      }

      PartySelectionConfiguration::
      PartySelectionConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        EnableClick_ (f, this),
        UseMaxPartyNumerFromAllContest_ (f, this),
        ShowNullParty_ (f, this),
        ShowNullButton_ (f, this),
        PartyButton_ (f, this),
        ExpandButton_ (f, this),
        SeparateButton_ (f, this),
        FrameBottomHeight_ (f, this),
        Columns_ (f, this),
        SizeToColumns_ (f, this),
        ImageRelation_ (f, this),
        PartiesMargin_ (f, this),
        PartyWidget_ (f, this),
        PartySelectionAlignment_ (f, this),
        HeaderLabelConfiguration_ (f, this),
        BottomLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PartySelectionConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EnableClick
          //
          if (n.name () == "EnableClick" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EnableClick_.present ())
            {
              this->EnableClick_.set (EnableClickTraits::create (i, f, this));
              continue;
            }
          }

          // UseMaxPartyNumerFromAllContest
          //
          if (n.name () == "UseMaxPartyNumerFromAllContest" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseMaxPartyNumerFromAllContest_.present ())
            {
              this->UseMaxPartyNumerFromAllContest_.set (UseMaxPartyNumerFromAllContestTraits::create (i, f, this));
              continue;
            }
          }

          // ShowNullParty
          //
          if (n.name () == "ShowNullParty" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowNullParty_.present ())
            {
              this->ShowNullParty_.set (ShowNullPartyTraits::create (i, f, this));
              continue;
            }
          }

          // ShowNullButton
          //
          if (n.name () == "ShowNullButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowNullButton_.present ())
            {
              this->ShowNullButton_.set (ShowNullButtonTraits::create (i, f, this));
              continue;
            }
          }

          // PartyButton
          //
          if (n.name () == "PartyButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartyButtonType > r (
              PartyButtonTraits::create (i, f, this));

            if (!PartyButton_.present ())
            {
              this->PartyButton_.set (r);
              continue;
            }
          }

          // ExpandButton
          //
          if (n.name () == "ExpandButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ExpandButtonType > r (
              ExpandButtonTraits::create (i, f, this));

            if (!ExpandButton_.present ())
            {
              this->ExpandButton_.set (r);
              continue;
            }
          }

          // SeparateButton
          //
          if (n.name () == "SeparateButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SeparateButtonType > r (
              SeparateButtonTraits::create (i, f, this));

            if (!SeparateButton_.present ())
            {
              this->SeparateButton_.set (r);
              continue;
            }
          }

          // FrameBottomHeight
          //
          if (n.name () == "FrameBottomHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FrameBottomHeight_.present ())
            {
              this->FrameBottomHeight_.set (FrameBottomHeightTraits::create (i, f, this));
              continue;
            }
          }

          // Columns
          //
          if (n.name () == "Columns" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Columns_.present ())
            {
              this->Columns_.set (ColumnsTraits::create (i, f, this));
              continue;
            }
          }

          // SizeToColumns
          //
          if (n.name () == "SizeToColumns" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SizeToColumns_.present ())
            {
              this->SizeToColumns_.set (SizeToColumnsTraits::create (i, f, this));
              continue;
            }
          }

          // ImageRelation
          //
          if (n.name () == "ImageRelation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ImageRelation_.present ())
            {
              this->ImageRelation_.set (ImageRelationTraits::create (i, f, this));
              continue;
            }
          }

          // PartiesMargin
          //
          if (n.name () == "PartiesMargin" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PartiesMargin_.present ())
            {
              this->PartiesMargin_.set (PartiesMarginTraits::create (i, f, this));
              continue;
            }
          }

          // PartyWidget
          //
          if (n.name () == "PartyWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartyWidgetType > r (
              PartyWidgetTraits::create (i, f, this));

            if (!PartyWidget_.present ())
            {
              this->PartyWidget_.set (r);
              continue;
            }
          }

          // PartySelectionAlignment
          //
          if (n.name () == "PartySelectionAlignment" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PartySelectionAlignment_.present ())
            {
              this->PartySelectionAlignment_.set (PartySelectionAlignmentTraits::create (i, f, this));
              continue;
            }
          }

          // HeaderLabelConfiguration
          //
          if (n.name () == "HeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HeaderLabelConfigurationType > r (
              HeaderLabelConfigurationTraits::create (i, f, this));

            if (!HeaderLabelConfiguration_.present ())
            {
              this->HeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // BottomLabelConfiguration
          //
          if (n.name () == "BottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BottomLabelConfigurationType > r (
              BottomLabelConfigurationTraits::create (i, f, this));

            if (!BottomLabelConfiguration_.present ())
            {
              this->BottomLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EnableClick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EnableClick",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseMaxPartyNumerFromAllContest_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseMaxPartyNumerFromAllContest",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowNullParty_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowNullParty",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowNullButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowNullButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartyButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartyButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ExpandButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ExpandButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SeparateButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SeparateButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FrameBottomHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FrameBottomHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Columns_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Columns",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SizeToColumns_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SizeToColumns",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ImageRelation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ImageRelation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartiesMargin_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartiesMargin",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartyWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartyWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartySelectionAlignment_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartySelectionAlignment",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PartySelectionConfiguration* PartySelectionConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PartySelectionConfiguration (*this, f, c);
      }

      PartySelectionConfiguration::
      ~PartySelectionConfiguration ()
      {
      }

      bool
      operator== (const PartySelectionConfiguration& x, const PartySelectionConfiguration& y)
      {
        if (!(x.getEnableClick () == y.getEnableClick ()))
          return false;

        if (!(x.getUseMaxPartyNumerFromAllContest () == y.getUseMaxPartyNumerFromAllContest ()))
          return false;

        if (!(x.getShowNullParty () == y.getShowNullParty ()))
          return false;

        if (!(x.getShowNullButton () == y.getShowNullButton ()))
          return false;

        if (!(x.getPartyButton () == y.getPartyButton ()))
          return false;

        if (!(x.getExpandButton () == y.getExpandButton ()))
          return false;

        if (!(x.getSeparateButton () == y.getSeparateButton ()))
          return false;

        if (!(x.getFrameBottomHeight () == y.getFrameBottomHeight ()))
          return false;

        if (!(x.getColumns () == y.getColumns ()))
          return false;

        if (!(x.getSizeToColumns () == y.getSizeToColumns ()))
          return false;

        if (!(x.getImageRelation () == y.getImageRelation ()))
          return false;

        if (!(x.getPartiesMargin () == y.getPartiesMargin ()))
          return false;

        if (!(x.getPartyWidget () == y.getPartyWidget ()))
          return false;

        if (!(x.getPartySelectionAlignment () == y.getPartySelectionAlignment ()))
          return false;

        if (!(x.getHeaderLabelConfiguration () == y.getHeaderLabelConfiguration ()))
          return false;

        if (!(x.getBottomLabelConfiguration () == y.getBottomLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const PartySelectionConfiguration& x, const PartySelectionConfiguration& y)
      {
        return !(x == y);
      }

      // PartyWidgetConfiguration
      //

      PartyWidgetConfiguration::
      PartyWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseAbbreviation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Padding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFrame_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Display_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseFillByRows_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartyWidgetConfiguration::
      PartyWidgetConfiguration (const NumberWidthType& NumberWidth,
                                const UseAbbreviationType& UseAbbreviation,
                                const PaddingType& Padding,
                                const ShowFrameType& ShowFrame,
                                const DisplayType& Display,
                                const UseFillByRowsType& UseFillByRows)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberWidth_ (NumberWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseAbbreviation_ (UseAbbreviation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Padding_ (Padding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFrame_ (ShowFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Display_ (Display, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseFillByRows_ (UseFillByRows, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartyWidgetConfiguration::
      PartyWidgetConfiguration (const PartyWidgetConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NumberWidth_ (x.NumberWidth_, f, this),
        UseAbbreviation_ (x.UseAbbreviation_, f, this),
        Padding_ (x.Padding_, f, this),
        ShowFrame_ (x.ShowFrame_, f, this),
        Display_ (x.Display_, f, this),
        UseFillByRows_ (x.UseFillByRows_, f, this)
      {
      }

      PartyWidgetConfiguration::
      PartyWidgetConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NumberWidth_ (f, this),
        UseAbbreviation_ (f, this),
        Padding_ (f, this),
        ShowFrame_ (f, this),
        Display_ (f, this),
        UseFillByRows_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PartyWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NumberWidth
          //
          if (n.name () == "NumberWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberWidth_.present ())
            {
              this->NumberWidth_.set (NumberWidthTraits::create (i, f, this));
              continue;
            }
          }

          // UseAbbreviation
          //
          if (n.name () == "UseAbbreviation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseAbbreviation_.present ())
            {
              this->UseAbbreviation_.set (UseAbbreviationTraits::create (i, f, this));
              continue;
            }
          }

          // Padding
          //
          if (n.name () == "Padding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Padding_.present ())
            {
              this->Padding_.set (PaddingTraits::create (i, f, this));
              continue;
            }
          }

          // ShowFrame
          //
          if (n.name () == "ShowFrame" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowFrame_.present ())
            {
              this->ShowFrame_.set (ShowFrameTraits::create (i, f, this));
              continue;
            }
          }

          // Display
          //
          if (n.name () == "Display" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DisplayType > r (
              DisplayTraits::create (i, f, this));

            if (!Display_.present ())
            {
              this->Display_.set (r);
              continue;
            }
          }

          // UseFillByRows
          //
          if (n.name () == "UseFillByRows" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseFillByRows_.present ())
            {
              this->UseFillByRows_.set (UseFillByRowsTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!NumberWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseAbbreviation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseAbbreviation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Padding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Padding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowFrame",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Display_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Display",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseFillByRows_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseFillByRows",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PartyWidgetConfiguration* PartyWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PartyWidgetConfiguration (*this, f, c);
      }

      PartyWidgetConfiguration::
      ~PartyWidgetConfiguration ()
      {
      }

      bool
      operator== (const PartyWidgetConfiguration& x, const PartyWidgetConfiguration& y)
      {
        if (!(x.getNumberWidth () == y.getNumberWidth ()))
          return false;

        if (!(x.getUseAbbreviation () == y.getUseAbbreviation ()))
          return false;

        if (!(x.getPadding () == y.getPadding ()))
          return false;

        if (!(x.getShowFrame () == y.getShowFrame ()))
          return false;

        if (!(x.getDisplay () == y.getDisplay ()))
          return false;

        if (!(x.getUseFillByRows () == y.getUseFillByRows ()))
          return false;

        return true;
      }

      bool
      operator!= (const PartyWidgetConfiguration& x, const PartyWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // DisplayType
      //

      DisplayType::
      DisplayType (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_DisplayType_convert ();
      }

      DisplayType::
      DisplayType (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_DisplayType_convert ();
      }

      DisplayType::
      DisplayType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_DisplayType_convert ();
      }

      DisplayType* DisplayType::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DisplayType (*this, f, c);
      }

      DisplayType::Value DisplayType::
      _xsd_DisplayType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DisplayType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_DisplayType_indexes_,
                          _xsd_DisplayType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_DisplayType_indexes_ + 2 || _xsd_DisplayType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const DisplayType::
      _xsd_DisplayType_literals_[2] =
      {
        "IMAGE",
        "TEXT"
      };

      const DisplayType::Value DisplayType::
      _xsd_DisplayType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::DisplayType::CONFIGURATION_IMAGE,
        ::Smartmatic::SAES::Configuration::DisplayType::CONFIGURATION_TEXT
      };

      // BallotOptionSelectionConfiguration
      //

      BallotOptionSelectionConfiguration::
      BallotOptionSelectionConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HideStandInLabelIfEmpty_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseMaxBallotNumberFromContest_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionTable_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ExpandButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparateButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameHeaderHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxColumns_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxRows_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FixBorder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ResizeBallotBox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotsMargin_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionListLinked_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectListImpliesSelectStandIn_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectStandInImpliesSelectList_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AllowBackWithBallotSelected_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CandidatesButtonsSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseCustomBallotRelation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotRelation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ListSelectedColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ListUnSelectedColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowImageInList_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageInListPadgging_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FillPrincipal_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FillColumnDynamic_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionSelectionConfiguration::
      BallotOptionSelectionConfiguration (const EnableClickType& EnableClick,
                                          const HideStandInLabelIfEmptyType& HideStandInLabelIfEmpty,
                                          const UseMaxBallotNumberFromContestType& UseMaxBallotNumberFromContest,
                                          const BallotOptionTableType& BallotOptionTable,
                                          const BallotOptionButtonType& BallotOptionButton,
                                          const ExpandButtonType& ExpandButton,
                                          const SeparateButtonType& SeparateButton,
                                          const FrameBottomHeightType& FrameBottomHeight,
                                          const FrameHeaderHeightType& FrameHeaderHeight,
                                          const MaxColumnsType& MaxColumns,
                                          const MaxRowsType& MaxRows,
                                          const FixBorderType& FixBorder,
                                          const ResizeBallotBoxType& ResizeBallotBox,
                                          const BallotsMarginType& BallotsMargin,
                                          const OptionListLinkedType& OptionListLinked,
                                          const SelectListImpliesSelectStandInType& SelectListImpliesSelectStandIn,
                                          const SelectStandInImpliesSelectListType& SelectStandInImpliesSelectList,
                                          const AllowBackWithBallotSelectedType& AllowBackWithBallotSelected,
                                          const ShowConfirmationType& ShowConfirmation,
                                          const CandidatesButtonsSpacingType& CandidatesButtonsSpacing,
                                          const UseCustomBallotRelationType& UseCustomBallotRelation,
                                          const BallotRelationType& BallotRelation,
                                          const ListSelectedColorType& ListSelectedColor,
                                          const ListUnSelectedColorType& ListUnSelectedColor,
                                          const StandInColorType& StandInColor,
                                          const BallotOptionWidgetType& BallotOptionWidget,
                                          const HeaderLabelConfigurationType& HeaderLabelConfiguration,
                                          const BottomLabelConfigurationType& BottomLabelConfiguration,
                                          const ShowImageInListType& ShowImageInList,
                                          const ImageInListPadggingType& ImageInListPadgging,
                                          const FillPrincipalType& FillPrincipal,
                                          const FillColumnDynamicType& FillColumnDynamic)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (EnableClick, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideStandInLabelIfEmpty_ (HideStandInLabelIfEmpty, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseMaxBallotNumberFromContest_ (UseMaxBallotNumberFromContest, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionTable_ (BallotOptionTable, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionButton_ (BallotOptionButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExpandButton_ (ExpandButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparateButton_ (SeparateButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (FrameBottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameHeaderHeight_ (FrameHeaderHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxColumns_ (MaxColumns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxRows_ (MaxRows, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FixBorder_ (FixBorder, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ResizeBallotBox_ (ResizeBallotBox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotsMargin_ (BallotsMargin, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionListLinked_ (OptionListLinked, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectListImpliesSelectStandIn_ (SelectListImpliesSelectStandIn, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectStandInImpliesSelectList_ (SelectStandInImpliesSelectList, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllowBackWithBallotSelected_ (AllowBackWithBallotSelected, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmation_ (ShowConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CandidatesButtonsSpacing_ (CandidatesButtonsSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseCustomBallotRelation_ (UseCustomBallotRelation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotRelation_ (BallotRelation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ListSelectedColor_ (ListSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ListUnSelectedColor_ (ListUnSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInColor_ (StandInColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionWidget_ (BallotOptionWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowImageInList_ (ShowImageInList, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageInListPadgging_ (ImageInListPadgging, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FillPrincipal_ (FillPrincipal, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FillColumnDynamic_ (FillColumnDynamic, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionSelectionConfiguration::
      BallotOptionSelectionConfiguration (const EnableClickType& EnableClick,
                                          const HideStandInLabelIfEmptyType& HideStandInLabelIfEmpty,
                                          const UseMaxBallotNumberFromContestType& UseMaxBallotNumberFromContest,
                                          const BallotOptionTableType& BallotOptionTable,
                                          const BallotOptionButtonType& BallotOptionButton,
                                          ::std::auto_ptr< ExpandButtonType >& ExpandButton,
                                          ::std::auto_ptr< SeparateButtonType >& SeparateButton,
                                          const FrameBottomHeightType& FrameBottomHeight,
                                          const FrameHeaderHeightType& FrameHeaderHeight,
                                          const MaxColumnsType& MaxColumns,
                                          const MaxRowsType& MaxRows,
                                          const FixBorderType& FixBorder,
                                          const ResizeBallotBoxType& ResizeBallotBox,
                                          const BallotsMarginType& BallotsMargin,
                                          const OptionListLinkedType& OptionListLinked,
                                          const SelectListImpliesSelectStandInType& SelectListImpliesSelectStandIn,
                                          const SelectStandInImpliesSelectListType& SelectStandInImpliesSelectList,
                                          const AllowBackWithBallotSelectedType& AllowBackWithBallotSelected,
                                          const ShowConfirmationType& ShowConfirmation,
                                          const CandidatesButtonsSpacingType& CandidatesButtonsSpacing,
                                          const UseCustomBallotRelationType& UseCustomBallotRelation,
                                          const BallotRelationType& BallotRelation,
                                          ::std::auto_ptr< ListSelectedColorType >& ListSelectedColor,
                                          ::std::auto_ptr< ListUnSelectedColorType >& ListUnSelectedColor,
                                          ::std::auto_ptr< StandInColorType >& StandInColor,
                                          ::std::auto_ptr< BallotOptionWidgetType >& BallotOptionWidget,
                                          ::std::auto_ptr< HeaderLabelConfigurationType >& HeaderLabelConfiguration,
                                          ::std::auto_ptr< BottomLabelConfigurationType >& BottomLabelConfiguration,
                                          const ShowImageInListType& ShowImageInList,
                                          const ImageInListPadggingType& ImageInListPadgging,
                                          const FillPrincipalType& FillPrincipal,
                                          ::std::auto_ptr< FillColumnDynamicType >& FillColumnDynamic)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (EnableClick, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideStandInLabelIfEmpty_ (HideStandInLabelIfEmpty, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseMaxBallotNumberFromContest_ (UseMaxBallotNumberFromContest, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionTable_ (BallotOptionTable, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionButton_ (BallotOptionButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExpandButton_ (ExpandButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparateButton_ (SeparateButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (FrameBottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameHeaderHeight_ (FrameHeaderHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxColumns_ (MaxColumns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxRows_ (MaxRows, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FixBorder_ (FixBorder, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ResizeBallotBox_ (ResizeBallotBox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotsMargin_ (BallotsMargin, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionListLinked_ (OptionListLinked, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectListImpliesSelectStandIn_ (SelectListImpliesSelectStandIn, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectStandInImpliesSelectList_ (SelectStandInImpliesSelectList, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllowBackWithBallotSelected_ (AllowBackWithBallotSelected, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmation_ (ShowConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CandidatesButtonsSpacing_ (CandidatesButtonsSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseCustomBallotRelation_ (UseCustomBallotRelation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotRelation_ (BallotRelation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ListSelectedColor_ (ListSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ListUnSelectedColor_ (ListUnSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInColor_ (StandInColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionWidget_ (BallotOptionWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowImageInList_ (ShowImageInList, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ImageInListPadgging_ (ImageInListPadgging, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FillPrincipal_ (FillPrincipal, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FillColumnDynamic_ (FillColumnDynamic, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionSelectionConfiguration::
      BallotOptionSelectionConfiguration (const BallotOptionSelectionConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        EnableClick_ (x.EnableClick_, f, this),
        HideStandInLabelIfEmpty_ (x.HideStandInLabelIfEmpty_, f, this),
        UseMaxBallotNumberFromContest_ (x.UseMaxBallotNumberFromContest_, f, this),
        BallotOptionTable_ (x.BallotOptionTable_, f, this),
        BallotOptionButton_ (x.BallotOptionButton_, f, this),
        ExpandButton_ (x.ExpandButton_, f, this),
        SeparateButton_ (x.SeparateButton_, f, this),
        FrameBottomHeight_ (x.FrameBottomHeight_, f, this),
        FrameHeaderHeight_ (x.FrameHeaderHeight_, f, this),
        MaxColumns_ (x.MaxColumns_, f, this),
        MaxRows_ (x.MaxRows_, f, this),
        FixBorder_ (x.FixBorder_, f, this),
        ResizeBallotBox_ (x.ResizeBallotBox_, f, this),
        BallotsMargin_ (x.BallotsMargin_, f, this),
        OptionListLinked_ (x.OptionListLinked_, f, this),
        SelectListImpliesSelectStandIn_ (x.SelectListImpliesSelectStandIn_, f, this),
        SelectStandInImpliesSelectList_ (x.SelectStandInImpliesSelectList_, f, this),
        AllowBackWithBallotSelected_ (x.AllowBackWithBallotSelected_, f, this),
        ShowConfirmation_ (x.ShowConfirmation_, f, this),
        CandidatesButtonsSpacing_ (x.CandidatesButtonsSpacing_, f, this),
        UseCustomBallotRelation_ (x.UseCustomBallotRelation_, f, this),
        BallotRelation_ (x.BallotRelation_, f, this),
        ListSelectedColor_ (x.ListSelectedColor_, f, this),
        ListUnSelectedColor_ (x.ListUnSelectedColor_, f, this),
        StandInColor_ (x.StandInColor_, f, this),
        BallotOptionWidget_ (x.BallotOptionWidget_, f, this),
        HeaderLabelConfiguration_ (x.HeaderLabelConfiguration_, f, this),
        BottomLabelConfiguration_ (x.BottomLabelConfiguration_, f, this),
        ShowImageInList_ (x.ShowImageInList_, f, this),
        ImageInListPadgging_ (x.ImageInListPadgging_, f, this),
        FillPrincipal_ (x.FillPrincipal_, f, this),
        FillColumnDynamic_ (x.FillColumnDynamic_, f, this)
      {
      }

      BallotOptionSelectionConfiguration::
      BallotOptionSelectionConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        EnableClick_ (f, this),
        HideStandInLabelIfEmpty_ (f, this),
        UseMaxBallotNumberFromContest_ (f, this),
        BallotOptionTable_ (f, this),
        BallotOptionButton_ (f, this),
        ExpandButton_ (f, this),
        SeparateButton_ (f, this),
        FrameBottomHeight_ (f, this),
        FrameHeaderHeight_ (f, this),
        MaxColumns_ (f, this),
        MaxRows_ (f, this),
        FixBorder_ (f, this),
        ResizeBallotBox_ (f, this),
        BallotsMargin_ (f, this),
        OptionListLinked_ (f, this),
        SelectListImpliesSelectStandIn_ (f, this),
        SelectStandInImpliesSelectList_ (f, this),
        AllowBackWithBallotSelected_ (f, this),
        ShowConfirmation_ (f, this),
        CandidatesButtonsSpacing_ (f, this),
        UseCustomBallotRelation_ (f, this),
        BallotRelation_ (f, this),
        ListSelectedColor_ (f, this),
        ListUnSelectedColor_ (f, this),
        StandInColor_ (f, this),
        BallotOptionWidget_ (f, this),
        HeaderLabelConfiguration_ (f, this),
        BottomLabelConfiguration_ (f, this),
        ShowImageInList_ (f, this),
        ImageInListPadgging_ (f, this),
        FillPrincipal_ (f, this),
        FillColumnDynamic_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BallotOptionSelectionConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EnableClick
          //
          if (n.name () == "EnableClick" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EnableClick_.present ())
            {
              this->EnableClick_.set (EnableClickTraits::create (i, f, this));
              continue;
            }
          }

          // HideStandInLabelIfEmpty
          //
          if (n.name () == "HideStandInLabelIfEmpty" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideStandInLabelIfEmpty_.present ())
            {
              this->HideStandInLabelIfEmpty_.set (HideStandInLabelIfEmptyTraits::create (i, f, this));
              continue;
            }
          }

          // UseMaxBallotNumberFromContest
          //
          if (n.name () == "UseMaxBallotNumberFromContest" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseMaxBallotNumberFromContest_.present ())
            {
              this->UseMaxBallotNumberFromContest_.set (UseMaxBallotNumberFromContestTraits::create (i, f, this));
              continue;
            }
          }

          // BallotOptionTable
          //
          if (n.name () == "BallotOptionTable" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotOptionTableType > r (
              BallotOptionTableTraits::create (i, f, this));

            if (!BallotOptionTable_.present ())
            {
              this->BallotOptionTable_.set (r);
              continue;
            }
          }

          // BallotOptionButton
          //
          if (n.name () == "BallotOptionButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotOptionButtonType > r (
              BallotOptionButtonTraits::create (i, f, this));

            if (!BallotOptionButton_.present ())
            {
              this->BallotOptionButton_.set (r);
              continue;
            }
          }

          // ExpandButton
          //
          if (n.name () == "ExpandButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ExpandButtonType > r (
              ExpandButtonTraits::create (i, f, this));

            if (!ExpandButton_.present ())
            {
              this->ExpandButton_.set (r);
              continue;
            }
          }

          // SeparateButton
          //
          if (n.name () == "SeparateButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SeparateButtonType > r (
              SeparateButtonTraits::create (i, f, this));

            if (!SeparateButton_.present ())
            {
              this->SeparateButton_.set (r);
              continue;
            }
          }

          // FrameBottomHeight
          //
          if (n.name () == "FrameBottomHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FrameBottomHeight_.present ())
            {
              this->FrameBottomHeight_.set (FrameBottomHeightTraits::create (i, f, this));
              continue;
            }
          }

          // FrameHeaderHeight
          //
          if (n.name () == "FrameHeaderHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FrameHeaderHeight_.present ())
            {
              this->FrameHeaderHeight_.set (FrameHeaderHeightTraits::create (i, f, this));
              continue;
            }
          }

          // MaxColumns
          //
          if (n.name () == "MaxColumns" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxColumns_.present ())
            {
              this->MaxColumns_.set (MaxColumnsTraits::create (i, f, this));
              continue;
            }
          }

          // MaxRows
          //
          if (n.name () == "MaxRows" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxRows_.present ())
            {
              this->MaxRows_.set (MaxRowsTraits::create (i, f, this));
              continue;
            }
          }

          // FixBorder
          //
          if (n.name () == "FixBorder" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FixBorder_.present ())
            {
              this->FixBorder_.set (FixBorderTraits::create (i, f, this));
              continue;
            }
          }

          // ResizeBallotBox
          //
          if (n.name () == "ResizeBallotBox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ResizeBallotBox_.present ())
            {
              this->ResizeBallotBox_.set (ResizeBallotBoxTraits::create (i, f, this));
              continue;
            }
          }

          // BallotsMargin
          //
          if (n.name () == "BallotsMargin" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotsMargin_.present ())
            {
              this->BallotsMargin_.set (BallotsMarginTraits::create (i, f, this));
              continue;
            }
          }

          // OptionListLinked
          //
          if (n.name () == "OptionListLinked" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!OptionListLinked_.present ())
            {
              this->OptionListLinked_.set (OptionListLinkedTraits::create (i, f, this));
              continue;
            }
          }

          // SelectListImpliesSelectStandIn
          //
          if (n.name () == "SelectListImpliesSelectStandIn" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SelectListImpliesSelectStandIn_.present ())
            {
              this->SelectListImpliesSelectStandIn_.set (SelectListImpliesSelectStandInTraits::create (i, f, this));
              continue;
            }
          }

          // SelectStandInImpliesSelectList
          //
          if (n.name () == "SelectStandInImpliesSelectList" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SelectStandInImpliesSelectList_.present ())
            {
              this->SelectStandInImpliesSelectList_.set (SelectStandInImpliesSelectListTraits::create (i, f, this));
              continue;
            }
          }

          // AllowBackWithBallotSelected
          //
          if (n.name () == "AllowBackWithBallotSelected" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AllowBackWithBallotSelected_.present ())
            {
              this->AllowBackWithBallotSelected_.set (AllowBackWithBallotSelectedTraits::create (i, f, this));
              continue;
            }
          }

          // ShowConfirmation
          //
          if (n.name () == "ShowConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowConfirmation_.present ())
            {
              this->ShowConfirmation_.set (ShowConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // CandidatesButtonsSpacing
          //
          if (n.name () == "CandidatesButtonsSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CandidatesButtonsSpacing_.present ())
            {
              this->CandidatesButtonsSpacing_.set (CandidatesButtonsSpacingTraits::create (i, f, this));
              continue;
            }
          }

          // UseCustomBallotRelation
          //
          if (n.name () == "UseCustomBallotRelation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseCustomBallotRelation_.present ())
            {
              this->UseCustomBallotRelation_.set (UseCustomBallotRelationTraits::create (i, f, this));
              continue;
            }
          }

          // BallotRelation
          //
          if (n.name () == "BallotRelation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotRelation_.present ())
            {
              this->BallotRelation_.set (BallotRelationTraits::create (i, f, this));
              continue;
            }
          }

          // ListSelectedColor
          //
          if (n.name () == "ListSelectedColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ListSelectedColorType > r (
              ListSelectedColorTraits::create (i, f, this));

            if (!ListSelectedColor_.present ())
            {
              this->ListSelectedColor_.set (r);
              continue;
            }
          }

          // ListUnSelectedColor
          //
          if (n.name () == "ListUnSelectedColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ListUnSelectedColorType > r (
              ListUnSelectedColorTraits::create (i, f, this));

            if (!ListUnSelectedColor_.present ())
            {
              this->ListUnSelectedColor_.set (r);
              continue;
            }
          }

          // StandInColor
          //
          if (n.name () == "StandInColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StandInColorType > r (
              StandInColorTraits::create (i, f, this));

            if (!StandInColor_.present ())
            {
              this->StandInColor_.set (r);
              continue;
            }
          }

          // BallotOptionWidget
          //
          if (n.name () == "BallotOptionWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotOptionWidgetType > r (
              BallotOptionWidgetTraits::create (i, f, this));

            if (!BallotOptionWidget_.present ())
            {
              this->BallotOptionWidget_.set (r);
              continue;
            }
          }

          // HeaderLabelConfiguration
          //
          if (n.name () == "HeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HeaderLabelConfigurationType > r (
              HeaderLabelConfigurationTraits::create (i, f, this));

            if (!HeaderLabelConfiguration_.present ())
            {
              this->HeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // BottomLabelConfiguration
          //
          if (n.name () == "BottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BottomLabelConfigurationType > r (
              BottomLabelConfigurationTraits::create (i, f, this));

            if (!BottomLabelConfiguration_.present ())
            {
              this->BottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // ShowImageInList
          //
          if (n.name () == "ShowImageInList" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowImageInList_.present ())
            {
              this->ShowImageInList_.set (ShowImageInListTraits::create (i, f, this));
              continue;
            }
          }

          // ImageInListPadgging
          //
          if (n.name () == "ImageInListPadgging" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ImageInListPadgging_.present ())
            {
              this->ImageInListPadgging_.set (ImageInListPadggingTraits::create (i, f, this));
              continue;
            }
          }

          // FillPrincipal
          //
          if (n.name () == "FillPrincipal" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FillPrincipalType > r (
              FillPrincipalTraits::create (i, f, this));

            if (!FillPrincipal_.present ())
            {
              this->FillPrincipal_.set (r);
              continue;
            }
          }

          // FillColumnDynamic
          //
          if (n.name () == "FillColumnDynamic" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FillColumnDynamicType > r (
              FillColumnDynamicTraits::create (i, f, this));

            if (!FillColumnDynamic_.present ())
            {
              this->FillColumnDynamic_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EnableClick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EnableClick",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HideStandInLabelIfEmpty_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideStandInLabelIfEmpty",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseMaxBallotNumberFromContest_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseMaxBallotNumberFromContest",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotOptionTable_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotOptionTable",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotOptionButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotOptionButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ExpandButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ExpandButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SeparateButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SeparateButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FrameBottomHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FrameBottomHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FrameHeaderHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FrameHeaderHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxColumns_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxColumns",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxRows_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxRows",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FixBorder_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FixBorder",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ResizeBallotBox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ResizeBallotBox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotsMargin_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotsMargin",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!OptionListLinked_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OptionListLinked",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectListImpliesSelectStandIn_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectListImpliesSelectStandIn",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectStandInImpliesSelectList_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectStandInImpliesSelectList",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AllowBackWithBallotSelected_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AllowBackWithBallotSelected",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CandidatesButtonsSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CandidatesButtonsSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseCustomBallotRelation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseCustomBallotRelation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotRelation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotRelation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ListSelectedColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ListSelectedColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ListUnSelectedColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ListUnSelectedColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StandInColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StandInColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotOptionWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotOptionWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowImageInList_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowImageInList",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ImageInListPadgging_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ImageInListPadgging",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FillPrincipal_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FillPrincipal",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FillColumnDynamic_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FillColumnDynamic",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      BallotOptionSelectionConfiguration* BallotOptionSelectionConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BallotOptionSelectionConfiguration (*this, f, c);
      }

      BallotOptionSelectionConfiguration::
      ~BallotOptionSelectionConfiguration ()
      {
      }

      bool
      operator== (const BallotOptionSelectionConfiguration& x, const BallotOptionSelectionConfiguration& y)
      {
        if (!(x.getEnableClick () == y.getEnableClick ()))
          return false;

        if (!(x.getHideStandInLabelIfEmpty () == y.getHideStandInLabelIfEmpty ()))
          return false;

        if (!(x.getUseMaxBallotNumberFromContest () == y.getUseMaxBallotNumberFromContest ()))
          return false;

        if (!(x.getBallotOptionTable () == y.getBallotOptionTable ()))
          return false;

        if (!(x.getBallotOptionButton () == y.getBallotOptionButton ()))
          return false;

        if (!(x.getExpandButton () == y.getExpandButton ()))
          return false;

        if (!(x.getSeparateButton () == y.getSeparateButton ()))
          return false;

        if (!(x.getFrameBottomHeight () == y.getFrameBottomHeight ()))
          return false;

        if (!(x.getFrameHeaderHeight () == y.getFrameHeaderHeight ()))
          return false;

        if (!(x.getMaxColumns () == y.getMaxColumns ()))
          return false;

        if (!(x.getMaxRows () == y.getMaxRows ()))
          return false;

        if (!(x.getFixBorder () == y.getFixBorder ()))
          return false;

        if (!(x.getResizeBallotBox () == y.getResizeBallotBox ()))
          return false;

        if (!(x.getBallotsMargin () == y.getBallotsMargin ()))
          return false;

        if (!(x.getOptionListLinked () == y.getOptionListLinked ()))
          return false;

        if (!(x.getSelectListImpliesSelectStandIn () == y.getSelectListImpliesSelectStandIn ()))
          return false;

        if (!(x.getSelectStandInImpliesSelectList () == y.getSelectStandInImpliesSelectList ()))
          return false;

        if (!(x.getAllowBackWithBallotSelected () == y.getAllowBackWithBallotSelected ()))
          return false;

        if (!(x.getShowConfirmation () == y.getShowConfirmation ()))
          return false;

        if (!(x.getCandidatesButtonsSpacing () == y.getCandidatesButtonsSpacing ()))
          return false;

        if (!(x.getUseCustomBallotRelation () == y.getUseCustomBallotRelation ()))
          return false;

        if (!(x.getBallotRelation () == y.getBallotRelation ()))
          return false;

        if (!(x.getListSelectedColor () == y.getListSelectedColor ()))
          return false;

        if (!(x.getListUnSelectedColor () == y.getListUnSelectedColor ()))
          return false;

        if (!(x.getStandInColor () == y.getStandInColor ()))
          return false;

        if (!(x.getBallotOptionWidget () == y.getBallotOptionWidget ()))
          return false;

        if (!(x.getHeaderLabelConfiguration () == y.getHeaderLabelConfiguration ()))
          return false;

        if (!(x.getBottomLabelConfiguration () == y.getBottomLabelConfiguration ()))
          return false;

        if (!(x.getShowImageInList () == y.getShowImageInList ()))
          return false;

        if (!(x.getImageInListPadgging () == y.getImageInListPadgging ()))
          return false;

        if (!(x.getFillPrincipal () == y.getFillPrincipal ()))
          return false;

        if (!(x.getFillColumnDynamic () == y.getFillColumnDynamic ()))
          return false;

        return true;
      }

      bool
      operator!= (const BallotOptionSelectionConfiguration& x, const BallotOptionSelectionConfiguration& y)
      {
        return !(x == y);
      }

      // FillPrincipalConfiguration
      //

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_FillPrincipalConfiguration_convert ();
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const ::xercesc::DOMAttr& a,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_FillPrincipalConfiguration_convert ();
      }

      FillPrincipalConfiguration::
      FillPrincipalConfiguration (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_FillPrincipalConfiguration_convert ();
      }

      FillPrincipalConfiguration* FillPrincipalConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FillPrincipalConfiguration (*this, f, c);
      }

      FillPrincipalConfiguration::Value FillPrincipalConfiguration::
      _xsd_FillPrincipalConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FillPrincipalConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_FillPrincipalConfiguration_indexes_,
                          _xsd_FillPrincipalConfiguration_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_FillPrincipalConfiguration_indexes_ + 2 || _xsd_FillPrincipalConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const FillPrincipalConfiguration::
      _xsd_FillPrincipalConfiguration_literals_[2] =
      {
        "fill-column-fixed",
        "fill-column-dynamic"
      };

      const FillPrincipalConfiguration::Value FillPrincipalConfiguration::
      _xsd_FillPrincipalConfiguration_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::FillPrincipalConfiguration::CONFIGURATION_FILL_COLUMN_DYNAMIC,
        ::Smartmatic::SAES::Configuration::FillPrincipalConfiguration::CONFIGURATION_FILL_COLUMN_FIXED
      };

      // FillColumnDynamicConfiguration
      //

      FillColumnDynamicConfiguration::
      FillColumnDynamicConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PivotConfig_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FillColumnDynamicConfiguration::
      FillColumnDynamicConfiguration (const FillColumnDynamicConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PivotConfig_ (x.PivotConfig_, f, this)
      {
      }

      FillColumnDynamicConfiguration::
      FillColumnDynamicConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PivotConfig_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FillColumnDynamicConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PivotConfig
          //
          if (n.name () == "PivotConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PivotConfigType > r (
              PivotConfigTraits::create (i, f, this));

            this->PivotConfig_.push_back (r);
            continue;
          }

          break;
        }
      }

      FillColumnDynamicConfiguration* FillColumnDynamicConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FillColumnDynamicConfiguration (*this, f, c);
      }

      FillColumnDynamicConfiguration::
      ~FillColumnDynamicConfiguration ()
      {
      }

      bool
      operator== (const FillColumnDynamicConfiguration& x, const FillColumnDynamicConfiguration& y)
      {
        if (!(x.getPivotConfig () == y.getPivotConfig ()))
          return false;

        return true;
      }

      bool
      operator!= (const FillColumnDynamicConfiguration& x, const FillColumnDynamicConfiguration& y)
      {
        return !(x == y);
      }

      // PivotConfig
      //

      PivotConfig::
      PivotConfig ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Value_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ColumnCount_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Wrap_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PivotConfig::
      PivotConfig (const ValueType& Value,
                   const ColumnCountType& ColumnCount,
                   const WrapType& Wrap)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Value_ (Value, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ColumnCount_ (ColumnCount, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Wrap_ (Wrap, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PivotConfig::
      PivotConfig (const PivotConfig& x,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Value_ (x.Value_, f, this),
        ColumnCount_ (x.ColumnCount_, f, this),
        Wrap_ (x.Wrap_, f, this)
      {
      }

      PivotConfig::
      PivotConfig (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Value_ (f, this),
        ColumnCount_ (f, this),
        Wrap_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void PivotConfig::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "Value" && n.namespace_ ().empty ())
          {
            this->Value_.set (ValueTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "ColumnCount" && n.namespace_ ().empty ())
          {
            this->ColumnCount_.set (ColumnCountTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Wrap" && n.namespace_ ().empty ())
          {
            this->Wrap_.set (WrapTraits::create (i, f, this));
            continue;
          }
        }

        if (!Value_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Value",
            "");
        }

        if (!ColumnCount_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "ColumnCount",
            "");
        }

        if (!Wrap_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Wrap",
            "");
        }
      }

      PivotConfig* PivotConfig::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PivotConfig (*this, f, c);
      }

      PivotConfig::
      ~PivotConfig ()
      {
      }

      bool
      operator== (const PivotConfig& x, const PivotConfig& y)
      {
        if (!(x.getValue () == y.getValue ()))
          return false;

        if (!(x.getColumnCount () == y.getColumnCount ()))
          return false;

        if (!(x.getWrap () == y.getWrap ()))
          return false;

        return true;
      }

      bool
      operator!= (const PivotConfig& x, const PivotConfig& y)
      {
        return !(x == y);
      }

      // CustomAtributtesWindowConfiguration
      //

      CustomAtributtesWindowConfiguration::
      CustomAtributtesWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ForceQuestionHeader_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionFooter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionHeaderConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionFooterConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeMessageQuestionCloseButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeMessageQuestionTimer_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowQuestionConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeQuestion_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWindowWith_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWindowHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CenterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CustomAtributtesWindowConfiguration::
      CustomAtributtesWindowConfiguration (const ForceQuestionHeaderType& ForceQuestionHeader,
                                           const ForceQuestionFooterType& ForceQuestionFooter,
                                           const ForceQuestionHeaderConfirmationType& ForceQuestionHeaderConfirmation,
                                           const ForceQuestionFooterConfirmationType& ForceQuestionFooterConfirmation,
                                           const ShowWelcomeMessageQuestionCloseButtonType& ShowWelcomeMessageQuestionCloseButton,
                                           const WelcomeMessageQuestionTimerType& WelcomeMessageQuestionTimer,
                                           const ShowQuestionConfirmationType& ShowQuestionConfirmation,
                                           const ShowWelcomeQuestionType& ShowWelcomeQuestion,
                                           const QuestionWindowWithType& QuestionWindowWith,
                                           const QuestionWindowHeightType& QuestionWindowHeight,
                                           const HeaderLabelConfigurationType& HeaderLabelConfiguration,
                                           const BottomLabelConfigurationType& BottomLabelConfiguration,
                                           const CenterLabelConfigurationType& CenterLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ForceQuestionHeader_ (ForceQuestionHeader, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionFooter_ (ForceQuestionFooter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionHeaderConfirmation_ (ForceQuestionHeaderConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionFooterConfirmation_ (ForceQuestionFooterConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeMessageQuestionCloseButton_ (ShowWelcomeMessageQuestionCloseButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeMessageQuestionTimer_ (WelcomeMessageQuestionTimer, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowQuestionConfirmation_ (ShowQuestionConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeQuestion_ (ShowWelcomeQuestion, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWindowWith_ (QuestionWindowWith, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWindowHeight_ (QuestionWindowHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CenterLabelConfiguration_ (CenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CustomAtributtesWindowConfiguration::
      CustomAtributtesWindowConfiguration (const ForceQuestionHeaderType& ForceQuestionHeader,
                                           const ForceQuestionFooterType& ForceQuestionFooter,
                                           const ForceQuestionHeaderConfirmationType& ForceQuestionHeaderConfirmation,
                                           const ForceQuestionFooterConfirmationType& ForceQuestionFooterConfirmation,
                                           const ShowWelcomeMessageQuestionCloseButtonType& ShowWelcomeMessageQuestionCloseButton,
                                           const WelcomeMessageQuestionTimerType& WelcomeMessageQuestionTimer,
                                           const ShowQuestionConfirmationType& ShowQuestionConfirmation,
                                           const ShowWelcomeQuestionType& ShowWelcomeQuestion,
                                           const QuestionWindowWithType& QuestionWindowWith,
                                           const QuestionWindowHeightType& QuestionWindowHeight,
                                           ::std::auto_ptr< HeaderLabelConfigurationType >& HeaderLabelConfiguration,
                                           ::std::auto_ptr< BottomLabelConfigurationType >& BottomLabelConfiguration,
                                           ::std::auto_ptr< CenterLabelConfigurationType >& CenterLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ForceQuestionHeader_ (ForceQuestionHeader, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionFooter_ (ForceQuestionFooter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionHeaderConfirmation_ (ForceQuestionHeaderConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ForceQuestionFooterConfirmation_ (ForceQuestionFooterConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeMessageQuestionCloseButton_ (ShowWelcomeMessageQuestionCloseButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeMessageQuestionTimer_ (WelcomeMessageQuestionTimer, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowQuestionConfirmation_ (ShowQuestionConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeQuestion_ (ShowWelcomeQuestion, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWindowWith_ (QuestionWindowWith, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWindowHeight_ (QuestionWindowHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CenterLabelConfiguration_ (CenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CustomAtributtesWindowConfiguration::
      CustomAtributtesWindowConfiguration (const CustomAtributtesWindowConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ForceQuestionHeader_ (x.ForceQuestionHeader_, f, this),
        ForceQuestionFooter_ (x.ForceQuestionFooter_, f, this),
        ForceQuestionHeaderConfirmation_ (x.ForceQuestionHeaderConfirmation_, f, this),
        ForceQuestionFooterConfirmation_ (x.ForceQuestionFooterConfirmation_, f, this),
        ShowWelcomeMessageQuestionCloseButton_ (x.ShowWelcomeMessageQuestionCloseButton_, f, this),
        WelcomeMessageQuestionTimer_ (x.WelcomeMessageQuestionTimer_, f, this),
        ShowQuestionConfirmation_ (x.ShowQuestionConfirmation_, f, this),
        ShowWelcomeQuestion_ (x.ShowWelcomeQuestion_, f, this),
        QuestionWindowWith_ (x.QuestionWindowWith_, f, this),
        QuestionWindowHeight_ (x.QuestionWindowHeight_, f, this),
        HeaderLabelConfiguration_ (x.HeaderLabelConfiguration_, f, this),
        BottomLabelConfiguration_ (x.BottomLabelConfiguration_, f, this),
        CenterLabelConfiguration_ (x.CenterLabelConfiguration_, f, this)
      {
      }

      CustomAtributtesWindowConfiguration::
      CustomAtributtesWindowConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ForceQuestionHeader_ (f, this),
        ForceQuestionFooter_ (f, this),
        ForceQuestionHeaderConfirmation_ (f, this),
        ForceQuestionFooterConfirmation_ (f, this),
        ShowWelcomeMessageQuestionCloseButton_ (f, this),
        WelcomeMessageQuestionTimer_ (f, this),
        ShowQuestionConfirmation_ (f, this),
        ShowWelcomeQuestion_ (f, this),
        QuestionWindowWith_ (f, this),
        QuestionWindowHeight_ (f, this),
        HeaderLabelConfiguration_ (f, this),
        BottomLabelConfiguration_ (f, this),
        CenterLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CustomAtributtesWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ForceQuestionHeader
          //
          if (n.name () == "ForceQuestionHeader" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ForceQuestionHeader_.present ())
            {
              this->ForceQuestionHeader_.set (ForceQuestionHeaderTraits::create (i, f, this));
              continue;
            }
          }

          // ForceQuestionFooter
          //
          if (n.name () == "ForceQuestionFooter" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ForceQuestionFooter_.present ())
            {
              this->ForceQuestionFooter_.set (ForceQuestionFooterTraits::create (i, f, this));
              continue;
            }
          }

          // ForceQuestionHeaderConfirmation
          //
          if (n.name () == "ForceQuestionHeaderConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ForceQuestionHeaderConfirmation_.present ())
            {
              this->ForceQuestionHeaderConfirmation_.set (ForceQuestionHeaderConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ForceQuestionFooterConfirmation
          //
          if (n.name () == "ForceQuestionFooterConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ForceQuestionFooterConfirmation_.present ())
            {
              this->ForceQuestionFooterConfirmation_.set (ForceQuestionFooterConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ShowWelcomeMessageQuestionCloseButton
          //
          if (n.name () == "ShowWelcomeMessageQuestionCloseButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowWelcomeMessageQuestionCloseButton_.present ())
            {
              this->ShowWelcomeMessageQuestionCloseButton_.set (ShowWelcomeMessageQuestionCloseButtonTraits::create (i, f, this));
              continue;
            }
          }

          // WelcomeMessageQuestionTimer
          //
          if (n.name () == "WelcomeMessageQuestionTimer" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!WelcomeMessageQuestionTimer_.present ())
            {
              this->WelcomeMessageQuestionTimer_.set (WelcomeMessageQuestionTimerTraits::create (i, f, this));
              continue;
            }
          }

          // ShowQuestionConfirmation
          //
          if (n.name () == "ShowQuestionConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowQuestionConfirmation_.present ())
            {
              this->ShowQuestionConfirmation_.set (ShowQuestionConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ShowWelcomeQuestion
          //
          if (n.name () == "ShowWelcomeQuestion" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowWelcomeQuestion_.present ())
            {
              this->ShowWelcomeQuestion_.set (ShowWelcomeQuestionTraits::create (i, f, this));
              continue;
            }
          }

          // QuestionWindowWith
          //
          if (n.name () == "QuestionWindowWith" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!QuestionWindowWith_.present ())
            {
              this->QuestionWindowWith_.set (QuestionWindowWithTraits::create (i, f, this));
              continue;
            }
          }

          // QuestionWindowHeight
          //
          if (n.name () == "QuestionWindowHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!QuestionWindowHeight_.present ())
            {
              this->QuestionWindowHeight_.set (QuestionWindowHeightTraits::create (i, f, this));
              continue;
            }
          }

          // HeaderLabelConfiguration
          //
          if (n.name () == "HeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HeaderLabelConfigurationType > r (
              HeaderLabelConfigurationTraits::create (i, f, this));

            if (!HeaderLabelConfiguration_.present ())
            {
              this->HeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // BottomLabelConfiguration
          //
          if (n.name () == "BottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BottomLabelConfigurationType > r (
              BottomLabelConfigurationTraits::create (i, f, this));

            if (!BottomLabelConfiguration_.present ())
            {
              this->BottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // CenterLabelConfiguration
          //
          if (n.name () == "CenterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CenterLabelConfigurationType > r (
              CenterLabelConfigurationTraits::create (i, f, this));

            if (!CenterLabelConfiguration_.present ())
            {
              this->CenterLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ForceQuestionHeader_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ForceQuestionHeader",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ForceQuestionFooter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ForceQuestionFooter",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ForceQuestionHeaderConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ForceQuestionHeaderConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ForceQuestionFooterConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ForceQuestionFooterConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowWelcomeMessageQuestionCloseButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowWelcomeMessageQuestionCloseButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WelcomeMessageQuestionTimer_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WelcomeMessageQuestionTimer",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowQuestionConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowQuestionConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowWelcomeQuestion_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowWelcomeQuestion",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionWindowWith_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionWindowWith",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionWindowHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionWindowHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CenterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CenterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CustomAtributtesWindowConfiguration* CustomAtributtesWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CustomAtributtesWindowConfiguration (*this, f, c);
      }

      CustomAtributtesWindowConfiguration::
      ~CustomAtributtesWindowConfiguration ()
      {
      }

      bool
      operator== (const CustomAtributtesWindowConfiguration& x, const CustomAtributtesWindowConfiguration& y)
      {
        if (!(x.getForceQuestionHeader () == y.getForceQuestionHeader ()))
          return false;

        if (!(x.getForceQuestionFooter () == y.getForceQuestionFooter ()))
          return false;

        if (!(x.getForceQuestionHeaderConfirmation () == y.getForceQuestionHeaderConfirmation ()))
          return false;

        if (!(x.getForceQuestionFooterConfirmation () == y.getForceQuestionFooterConfirmation ()))
          return false;

        if (!(x.getShowWelcomeMessageQuestionCloseButton () == y.getShowWelcomeMessageQuestionCloseButton ()))
          return false;

        if (!(x.getWelcomeMessageQuestionTimer () == y.getWelcomeMessageQuestionTimer ()))
          return false;

        if (!(x.getShowQuestionConfirmation () == y.getShowQuestionConfirmation ()))
          return false;

        if (!(x.getShowWelcomeQuestion () == y.getShowWelcomeQuestion ()))
          return false;

        if (!(x.getQuestionWindowWith () == y.getQuestionWindowWith ()))
          return false;

        if (!(x.getQuestionWindowHeight () == y.getQuestionWindowHeight ()))
          return false;

        if (!(x.getHeaderLabelConfiguration () == y.getHeaderLabelConfiguration ()))
          return false;

        if (!(x.getBottomLabelConfiguration () == y.getBottomLabelConfiguration ()))
          return false;

        if (!(x.getCenterLabelConfiguration () == y.getCenterLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const CustomAtributtesWindowConfiguration& x, const CustomAtributtesWindowConfiguration& y)
      {
        return !(x == y);
      }

      // ConfirmationWindowConfiguration
      //

      ConfirmationWindowConfiguration::
      ConfirmationWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        HeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NullButtonsVertical_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ConfirmationWindowConfiguration::
      ConfirmationWindowConfiguration (const HeaderLabelConfigurationType& HeaderLabelConfiguration,
                                       const BottomLabelConfigurationType& BottomLabelConfiguration,
                                       const NullButtonsVerticalType& NullButtonsVertical)
      : ::Smartmatic::ConfigurationTypes::Type (),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NullButtonsVertical_ (NullButtonsVertical, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ConfirmationWindowConfiguration::
      ConfirmationWindowConfiguration (::std::auto_ptr< HeaderLabelConfigurationType >& HeaderLabelConfiguration,
                                       ::std::auto_ptr< BottomLabelConfigurationType >& BottomLabelConfiguration,
                                       const NullButtonsVerticalType& NullButtonsVertical)
      : ::Smartmatic::ConfigurationTypes::Type (),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NullButtonsVertical_ (NullButtonsVertical, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ConfirmationWindowConfiguration::
      ConfirmationWindowConfiguration (const ConfirmationWindowConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        HeaderLabelConfiguration_ (x.HeaderLabelConfiguration_, f, this),
        BottomLabelConfiguration_ (x.BottomLabelConfiguration_, f, this),
        NullButtonsVertical_ (x.NullButtonsVertical_, f, this)
      {
      }

      ConfirmationWindowConfiguration::
      ConfirmationWindowConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        HeaderLabelConfiguration_ (f, this),
        BottomLabelConfiguration_ (f, this),
        NullButtonsVertical_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfirmationWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // HeaderLabelConfiguration
          //
          if (n.name () == "HeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HeaderLabelConfigurationType > r (
              HeaderLabelConfigurationTraits::create (i, f, this));

            if (!HeaderLabelConfiguration_.present ())
            {
              this->HeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // BottomLabelConfiguration
          //
          if (n.name () == "BottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BottomLabelConfigurationType > r (
              BottomLabelConfigurationTraits::create (i, f, this));

            if (!BottomLabelConfiguration_.present ())
            {
              this->BottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // NullButtonsVertical
          //
          if (n.name () == "NullButtonsVertical" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NullButtonsVertical_.present ())
            {
              this->NullButtonsVertical_.set (NullButtonsVerticalTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!HeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NullButtonsVertical_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NullButtonsVertical",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ConfirmationWindowConfiguration* ConfirmationWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ConfirmationWindowConfiguration (*this, f, c);
      }

      ConfirmationWindowConfiguration::
      ~ConfirmationWindowConfiguration ()
      {
      }

      bool
      operator== (const ConfirmationWindowConfiguration& x, const ConfirmationWindowConfiguration& y)
      {
        if (!(x.getHeaderLabelConfiguration () == y.getHeaderLabelConfiguration ()))
          return false;

        if (!(x.getBottomLabelConfiguration () == y.getBottomLabelConfiguration ()))
          return false;

        if (!(x.getNullButtonsVertical () == y.getNullButtonsVertical ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfirmationWindowConfiguration& x, const ConfirmationWindowConfiguration& y)
      {
        return !(x == y);
      }

      // FormsCommonControlsConfigurations
      //

      FormsCommonControlsConfigurations::
      FormsCommonControlsConfigurations ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        FormTitles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FormMesages_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UnableFunctionalityMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UnableMessageCloseTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ExitFunctionalityMessageCloseTime_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsCommonControlsConfigurations::
      FormsCommonControlsConfigurations (const FormTitlesType& FormTitles,
                                         const FormMesagesType& FormMesages,
                                         const UnableFunctionalityMessageType& UnableFunctionalityMessage,
                                         const UnableMessageCloseTimeType& UnableMessageCloseTime,
                                         const ExitFunctionalityMessageCloseTimeType& ExitFunctionalityMessageCloseTime)
      : ::Smartmatic::ConfigurationTypes::Type (),
        FormTitles_ (FormTitles, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FormMesages_ (FormMesages, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnableFunctionalityMessage_ (UnableFunctionalityMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnableMessageCloseTime_ (UnableMessageCloseTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExitFunctionalityMessageCloseTime_ (ExitFunctionalityMessageCloseTime, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsCommonControlsConfigurations::
      FormsCommonControlsConfigurations (::std::auto_ptr< FormTitlesType >& FormTitles,
                                         ::std::auto_ptr< FormMesagesType >& FormMesages,
                                         ::std::auto_ptr< UnableFunctionalityMessageType >& UnableFunctionalityMessage,
                                         const UnableMessageCloseTimeType& UnableMessageCloseTime,
                                         const ExitFunctionalityMessageCloseTimeType& ExitFunctionalityMessageCloseTime)
      : ::Smartmatic::ConfigurationTypes::Type (),
        FormTitles_ (FormTitles, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FormMesages_ (FormMesages, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnableFunctionalityMessage_ (UnableFunctionalityMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnableMessageCloseTime_ (UnableMessageCloseTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ExitFunctionalityMessageCloseTime_ (ExitFunctionalityMessageCloseTime, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsCommonControlsConfigurations::
      FormsCommonControlsConfigurations (const FormsCommonControlsConfigurations& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        FormTitles_ (x.FormTitles_, f, this),
        FormMesages_ (x.FormMesages_, f, this),
        UnableFunctionalityMessage_ (x.UnableFunctionalityMessage_, f, this),
        UnableMessageCloseTime_ (x.UnableMessageCloseTime_, f, this),
        ExitFunctionalityMessageCloseTime_ (x.ExitFunctionalityMessageCloseTime_, f, this)
      {
      }

      FormsCommonControlsConfigurations::
      FormsCommonControlsConfigurations (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        FormTitles_ (f, this),
        FormMesages_ (f, this),
        UnableFunctionalityMessage_ (f, this),
        UnableMessageCloseTime_ (f, this),
        ExitFunctionalityMessageCloseTime_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FormsCommonControlsConfigurations::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FormTitles
          //
          if (n.name () == "FormTitles" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FormTitlesType > r (
              FormTitlesTraits::create (i, f, this));

            if (!FormTitles_.present ())
            {
              this->FormTitles_.set (r);
              continue;
            }
          }

          // FormMesages
          //
          if (n.name () == "FormMesages" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FormMesagesType > r (
              FormMesagesTraits::create (i, f, this));

            if (!FormMesages_.present ())
            {
              this->FormMesages_.set (r);
              continue;
            }
          }

          // UnableFunctionalityMessage
          //
          if (n.name () == "UnableFunctionalityMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< UnableFunctionalityMessageType > r (
              UnableFunctionalityMessageTraits::create (i, f, this));

            if (!UnableFunctionalityMessage_.present ())
            {
              this->UnableFunctionalityMessage_.set (r);
              continue;
            }
          }

          // UnableMessageCloseTime
          //
          if (n.name () == "UnableMessageCloseTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UnableMessageCloseTime_.present ())
            {
              this->UnableMessageCloseTime_.set (UnableMessageCloseTimeTraits::create (i, f, this));
              continue;
            }
          }

          // ExitFunctionalityMessageCloseTime
          //
          if (n.name () == "ExitFunctionalityMessageCloseTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ExitFunctionalityMessageCloseTime_.present ())
            {
              this->ExitFunctionalityMessageCloseTime_.set (ExitFunctionalityMessageCloseTimeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!FormTitles_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FormTitles",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FormMesages_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FormMesages",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UnableFunctionalityMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UnableFunctionalityMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UnableMessageCloseTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UnableMessageCloseTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ExitFunctionalityMessageCloseTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ExitFunctionalityMessageCloseTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      FormsCommonControlsConfigurations* FormsCommonControlsConfigurations::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FormsCommonControlsConfigurations (*this, f, c);
      }

      FormsCommonControlsConfigurations::
      ~FormsCommonControlsConfigurations ()
      {
      }

      bool
      operator== (const FormsCommonControlsConfigurations& x, const FormsCommonControlsConfigurations& y)
      {
        if (!(x.getFormTitles () == y.getFormTitles ()))
          return false;

        if (!(x.getFormMesages () == y.getFormMesages ()))
          return false;

        if (!(x.getUnableFunctionalityMessage () == y.getUnableFunctionalityMessage ()))
          return false;

        if (!(x.getUnableMessageCloseTime () == y.getUnableMessageCloseTime ()))
          return false;

        if (!(x.getExitFunctionalityMessageCloseTime () == y.getExitFunctionalityMessageCloseTime ()))
          return false;

        return true;
      }

      bool
      operator!= (const FormsCommonControlsConfigurations& x, const FormsCommonControlsConfigurations& y)
      {
        return !(x == y);
      }

      // FormsMessagesLabelConfigurations
      //

      FormsMessagesLabelConfigurations::
      FormsMessagesLabelConfigurations ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        VMLogingMessageLabel_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsMessagesLabelConfigurations::
      FormsMessagesLabelConfigurations (const VMLogingMessageLabelType& VMLogingMessageLabel)
      : ::Smartmatic::ConfigurationTypes::Type (),
        VMLogingMessageLabel_ (VMLogingMessageLabel, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsMessagesLabelConfigurations::
      FormsMessagesLabelConfigurations (::std::auto_ptr< VMLogingMessageLabelType >& VMLogingMessageLabel)
      : ::Smartmatic::ConfigurationTypes::Type (),
        VMLogingMessageLabel_ (VMLogingMessageLabel, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsMessagesLabelConfigurations::
      FormsMessagesLabelConfigurations (const FormsMessagesLabelConfigurations& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        VMLogingMessageLabel_ (x.VMLogingMessageLabel_, f, this)
      {
      }

      FormsMessagesLabelConfigurations::
      FormsMessagesLabelConfigurations (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        VMLogingMessageLabel_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FormsMessagesLabelConfigurations::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VMLogingMessageLabel
          //
          if (n.name () == "VMLogingMessageLabel" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VMLogingMessageLabelType > r (
              VMLogingMessageLabelTraits::create (i, f, this));

            if (!VMLogingMessageLabel_.present ())
            {
              this->VMLogingMessageLabel_.set (r);
              continue;
            }
          }

          break;
        }

        if (!VMLogingMessageLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VMLogingMessageLabel",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      FormsMessagesLabelConfigurations* FormsMessagesLabelConfigurations::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FormsMessagesLabelConfigurations (*this, f, c);
      }

      FormsMessagesLabelConfigurations::
      ~FormsMessagesLabelConfigurations ()
      {
      }

      bool
      operator== (const FormsMessagesLabelConfigurations& x, const FormsMessagesLabelConfigurations& y)
      {
        if (!(x.getVMLogingMessageLabel () == y.getVMLogingMessageLabel ()))
          return false;

        return true;
      }

      bool
      operator!= (const FormsMessagesLabelConfigurations& x, const FormsMessagesLabelConfigurations& y)
      {
        return !(x == y);
      }

      // FormsTitleLabelConfigurations
      //

      FormsTitleLabelConfigurations::
      FormsTitleLabelConfigurations ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        EmptyWindowTitleLabel_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsTitleLabelConfigurations::
      FormsTitleLabelConfigurations (const EmptyWindowTitleLabelType& EmptyWindowTitleLabel)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EmptyWindowTitleLabel_ (EmptyWindowTitleLabel, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsTitleLabelConfigurations::
      FormsTitleLabelConfigurations (::std::auto_ptr< EmptyWindowTitleLabelType >& EmptyWindowTitleLabel)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EmptyWindowTitleLabel_ (EmptyWindowTitleLabel, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FormsTitleLabelConfigurations::
      FormsTitleLabelConfigurations (const FormsTitleLabelConfigurations& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        EmptyWindowTitleLabel_ (x.EmptyWindowTitleLabel_, f, this)
      {
      }

      FormsTitleLabelConfigurations::
      FormsTitleLabelConfigurations (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        EmptyWindowTitleLabel_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FormsTitleLabelConfigurations::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EmptyWindowTitleLabel
          //
          if (n.name () == "EmptyWindowTitleLabel" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EmptyWindowTitleLabelType > r (
              EmptyWindowTitleLabelTraits::create (i, f, this));

            if (!EmptyWindowTitleLabel_.present ())
            {
              this->EmptyWindowTitleLabel_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EmptyWindowTitleLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EmptyWindowTitleLabel",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      FormsTitleLabelConfigurations* FormsTitleLabelConfigurations::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FormsTitleLabelConfigurations (*this, f, c);
      }

      FormsTitleLabelConfigurations::
      ~FormsTitleLabelConfigurations ()
      {
      }

      bool
      operator== (const FormsTitleLabelConfigurations& x, const FormsTitleLabelConfigurations& y)
      {
        if (!(x.getEmptyWindowTitleLabel () == y.getEmptyWindowTitleLabel ()))
          return false;

        return true;
      }

      bool
      operator!= (const FormsTitleLabelConfigurations& x, const FormsTitleLabelConfigurations& y)
      {
        return !(x == y);
      }

      // VotingExperienceLabelConfiguration
      //

      VotingExperienceLabelConfiguration::
      VotingExperienceLabelConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        SelectionLanguageHeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageBottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationHeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationBottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationCenterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteHeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteBottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteCenterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationHeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationBottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationCenterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionHeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionBottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionCenterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeContestCenterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetLabelChildLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetTopChildLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetBottomChildLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetNumberChildLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWindowEndMessageLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetPartySelectionLabelChildLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyNullLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LoadingBallotsLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InterrupVotingExperienceMessageLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InterrupVotingExperienceCancelLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceLabelConfiguration::
      VotingExperienceLabelConfiguration (const SelectionLanguageHeaderLabelConfigurationType& SelectionLanguageHeaderLabelConfiguration,
                                          const SelectionLanguageBottomLabelConfigurationType& SelectionLanguageBottomLabelConfiguration,
                                          const SelectionLanguageConfirmationHeaderLabelConfigurationType& SelectionLanguageConfirmationHeaderLabelConfiguration,
                                          const SelectionLanguageConfirmationBottomLabelConfigurationType& SelectionLanguageConfirmationBottomLabelConfiguration,
                                          const SelectionLanguageConfirmationCenterLabelConfigurationType& SelectionLanguageConfirmationCenterLabelConfiguration,
                                          const SuperWhiteHeaderLabelConfigurationType& SuperWhiteHeaderLabelConfiguration,
                                          const SuperWhiteBottomLabelConfigurationType& SuperWhiteBottomLabelConfiguration,
                                          const SuperWhiteCenterLabelConfigurationType& SuperWhiteCenterLabelConfiguration,
                                          const SuperWhiteConfirmationHeaderLabelConfigurationType& SuperWhiteConfirmationHeaderLabelConfiguration,
                                          const SuperWhiteConfirmationBottomLabelConfigurationType& SuperWhiteConfirmationBottomLabelConfiguration,
                                          const SuperWhiteConfirmationCenterLabelConfigurationType& SuperWhiteConfirmationCenterLabelConfiguration,
                                          const ContestWhiteSelectionHeaderLabelConfigurationType& ContestWhiteSelectionHeaderLabelConfiguration,
                                          const ContestWhiteSelectionBottomLabelConfigurationType& ContestWhiteSelectionBottomLabelConfiguration,
                                          const ContestWhiteSelectionCenterLabelConfigurationType& ContestWhiteSelectionCenterLabelConfiguration,
                                          const WelcomeContestCenterLabelConfigurationType& WelcomeContestCenterLabelConfiguration,
                                          const VotingWidgetLabelChildLabelConfigurationType& VotingWidgetLabelChildLabelConfiguration,
                                          const VotingWidgetTopChildLabelConfigurationType& VotingWidgetTopChildLabelConfiguration,
                                          const VotingWidgetBottomChildLabelConfigurationType& VotingWidgetBottomChildLabelConfiguration,
                                          const VotingWidgetNumberChildLabelConfigurationType& VotingWidgetNumberChildLabelConfiguration,
                                          const VotingWindowEndMessageLabelConfigurationType& VotingWindowEndMessageLabelConfiguration,
                                          const VotingWidgetPartySelectionLabelChildLabelConfigurationType& VotingWidgetPartySelectionLabelChildLabelConfiguration,
                                          const PartyNullLabelConfigurationType& PartyNullLabelConfiguration,
                                          const LoadingBallotsLabelConfigurationType& LoadingBallotsLabelConfiguration,
                                          const CheckSumLabelConfigurationType& CheckSumLabelConfiguration,
                                          const InterrupVotingExperienceMessageLabelConfigurationType& InterrupVotingExperienceMessageLabelConfiguration,
                                          const InterrupVotingExperienceCancelLabelConfigurationType& InterrupVotingExperienceCancelLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        SelectionLanguageHeaderLabelConfiguration_ (SelectionLanguageHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageBottomLabelConfiguration_ (SelectionLanguageBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationHeaderLabelConfiguration_ (SelectionLanguageConfirmationHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationBottomLabelConfiguration_ (SelectionLanguageConfirmationBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationCenterLabelConfiguration_ (SelectionLanguageConfirmationCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteHeaderLabelConfiguration_ (SuperWhiteHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteBottomLabelConfiguration_ (SuperWhiteBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteCenterLabelConfiguration_ (SuperWhiteCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationHeaderLabelConfiguration_ (SuperWhiteConfirmationHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationBottomLabelConfiguration_ (SuperWhiteConfirmationBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationCenterLabelConfiguration_ (SuperWhiteConfirmationCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionHeaderLabelConfiguration_ (ContestWhiteSelectionHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionBottomLabelConfiguration_ (ContestWhiteSelectionBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionCenterLabelConfiguration_ (ContestWhiteSelectionCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeContestCenterLabelConfiguration_ (WelcomeContestCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetLabelChildLabelConfiguration_ (VotingWidgetLabelChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetTopChildLabelConfiguration_ (VotingWidgetTopChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetBottomChildLabelConfiguration_ (VotingWidgetBottomChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetNumberChildLabelConfiguration_ (VotingWidgetNumberChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWindowEndMessageLabelConfiguration_ (VotingWindowEndMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetPartySelectionLabelChildLabelConfiguration_ (VotingWidgetPartySelectionLabelChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyNullLabelConfiguration_ (PartyNullLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LoadingBallotsLabelConfiguration_ (LoadingBallotsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumLabelConfiguration_ (CheckSumLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InterrupVotingExperienceMessageLabelConfiguration_ (InterrupVotingExperienceMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InterrupVotingExperienceCancelLabelConfiguration_ (InterrupVotingExperienceCancelLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceLabelConfiguration::
      VotingExperienceLabelConfiguration (::std::auto_ptr< SelectionLanguageHeaderLabelConfigurationType >& SelectionLanguageHeaderLabelConfiguration,
                                          ::std::auto_ptr< SelectionLanguageBottomLabelConfigurationType >& SelectionLanguageBottomLabelConfiguration,
                                          ::std::auto_ptr< SelectionLanguageConfirmationHeaderLabelConfigurationType >& SelectionLanguageConfirmationHeaderLabelConfiguration,
                                          ::std::auto_ptr< SelectionLanguageConfirmationBottomLabelConfigurationType >& SelectionLanguageConfirmationBottomLabelConfiguration,
                                          ::std::auto_ptr< SelectionLanguageConfirmationCenterLabelConfigurationType >& SelectionLanguageConfirmationCenterLabelConfiguration,
                                          ::std::auto_ptr< SuperWhiteHeaderLabelConfigurationType >& SuperWhiteHeaderLabelConfiguration,
                                          ::std::auto_ptr< SuperWhiteBottomLabelConfigurationType >& SuperWhiteBottomLabelConfiguration,
                                          ::std::auto_ptr< SuperWhiteCenterLabelConfigurationType >& SuperWhiteCenterLabelConfiguration,
                                          ::std::auto_ptr< SuperWhiteConfirmationHeaderLabelConfigurationType >& SuperWhiteConfirmationHeaderLabelConfiguration,
                                          ::std::auto_ptr< SuperWhiteConfirmationBottomLabelConfigurationType >& SuperWhiteConfirmationBottomLabelConfiguration,
                                          ::std::auto_ptr< SuperWhiteConfirmationCenterLabelConfigurationType >& SuperWhiteConfirmationCenterLabelConfiguration,
                                          ::std::auto_ptr< ContestWhiteSelectionHeaderLabelConfigurationType >& ContestWhiteSelectionHeaderLabelConfiguration,
                                          ::std::auto_ptr< ContestWhiteSelectionBottomLabelConfigurationType >& ContestWhiteSelectionBottomLabelConfiguration,
                                          ::std::auto_ptr< ContestWhiteSelectionCenterLabelConfigurationType >& ContestWhiteSelectionCenterLabelConfiguration,
                                          ::std::auto_ptr< WelcomeContestCenterLabelConfigurationType >& WelcomeContestCenterLabelConfiguration,
                                          ::std::auto_ptr< VotingWidgetLabelChildLabelConfigurationType >& VotingWidgetLabelChildLabelConfiguration,
                                          ::std::auto_ptr< VotingWidgetTopChildLabelConfigurationType >& VotingWidgetTopChildLabelConfiguration,
                                          ::std::auto_ptr< VotingWidgetBottomChildLabelConfigurationType >& VotingWidgetBottomChildLabelConfiguration,
                                          ::std::auto_ptr< VotingWidgetNumberChildLabelConfigurationType >& VotingWidgetNumberChildLabelConfiguration,
                                          ::std::auto_ptr< VotingWindowEndMessageLabelConfigurationType >& VotingWindowEndMessageLabelConfiguration,
                                          ::std::auto_ptr< VotingWidgetPartySelectionLabelChildLabelConfigurationType >& VotingWidgetPartySelectionLabelChildLabelConfiguration,
                                          ::std::auto_ptr< PartyNullLabelConfigurationType >& PartyNullLabelConfiguration,
                                          ::std::auto_ptr< LoadingBallotsLabelConfigurationType >& LoadingBallotsLabelConfiguration,
                                          ::std::auto_ptr< CheckSumLabelConfigurationType >& CheckSumLabelConfiguration,
                                          ::std::auto_ptr< InterrupVotingExperienceMessageLabelConfigurationType >& InterrupVotingExperienceMessageLabelConfiguration,
                                          ::std::auto_ptr< InterrupVotingExperienceCancelLabelConfigurationType >& InterrupVotingExperienceCancelLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        SelectionLanguageHeaderLabelConfiguration_ (SelectionLanguageHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageBottomLabelConfiguration_ (SelectionLanguageBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationHeaderLabelConfiguration_ (SelectionLanguageConfirmationHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationBottomLabelConfiguration_ (SelectionLanguageConfirmationBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectionLanguageConfirmationCenterLabelConfiguration_ (SelectionLanguageConfirmationCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteHeaderLabelConfiguration_ (SuperWhiteHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteBottomLabelConfiguration_ (SuperWhiteBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteCenterLabelConfiguration_ (SuperWhiteCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationHeaderLabelConfiguration_ (SuperWhiteConfirmationHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationBottomLabelConfiguration_ (SuperWhiteConfirmationBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperWhiteConfirmationCenterLabelConfiguration_ (SuperWhiteConfirmationCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionHeaderLabelConfiguration_ (ContestWhiteSelectionHeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionBottomLabelConfiguration_ (ContestWhiteSelectionBottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContestWhiteSelectionCenterLabelConfiguration_ (ContestWhiteSelectionCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeContestCenterLabelConfiguration_ (WelcomeContestCenterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetLabelChildLabelConfiguration_ (VotingWidgetLabelChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetTopChildLabelConfiguration_ (VotingWidgetTopChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetBottomChildLabelConfiguration_ (VotingWidgetBottomChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetNumberChildLabelConfiguration_ (VotingWidgetNumberChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWindowEndMessageLabelConfiguration_ (VotingWindowEndMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingWidgetPartySelectionLabelChildLabelConfiguration_ (VotingWidgetPartySelectionLabelChildLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyNullLabelConfiguration_ (PartyNullLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LoadingBallotsLabelConfiguration_ (LoadingBallotsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckSumLabelConfiguration_ (CheckSumLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InterrupVotingExperienceMessageLabelConfiguration_ (InterrupVotingExperienceMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InterrupVotingExperienceCancelLabelConfiguration_ (InterrupVotingExperienceCancelLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceLabelConfiguration::
      VotingExperienceLabelConfiguration (const VotingExperienceLabelConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        SelectionLanguageHeaderLabelConfiguration_ (x.SelectionLanguageHeaderLabelConfiguration_, f, this),
        SelectionLanguageBottomLabelConfiguration_ (x.SelectionLanguageBottomLabelConfiguration_, f, this),
        SelectionLanguageConfirmationHeaderLabelConfiguration_ (x.SelectionLanguageConfirmationHeaderLabelConfiguration_, f, this),
        SelectionLanguageConfirmationBottomLabelConfiguration_ (x.SelectionLanguageConfirmationBottomLabelConfiguration_, f, this),
        SelectionLanguageConfirmationCenterLabelConfiguration_ (x.SelectionLanguageConfirmationCenterLabelConfiguration_, f, this),
        SuperWhiteHeaderLabelConfiguration_ (x.SuperWhiteHeaderLabelConfiguration_, f, this),
        SuperWhiteBottomLabelConfiguration_ (x.SuperWhiteBottomLabelConfiguration_, f, this),
        SuperWhiteCenterLabelConfiguration_ (x.SuperWhiteCenterLabelConfiguration_, f, this),
        SuperWhiteConfirmationHeaderLabelConfiguration_ (x.SuperWhiteConfirmationHeaderLabelConfiguration_, f, this),
        SuperWhiteConfirmationBottomLabelConfiguration_ (x.SuperWhiteConfirmationBottomLabelConfiguration_, f, this),
        SuperWhiteConfirmationCenterLabelConfiguration_ (x.SuperWhiteConfirmationCenterLabelConfiguration_, f, this),
        ContestWhiteSelectionHeaderLabelConfiguration_ (x.ContestWhiteSelectionHeaderLabelConfiguration_, f, this),
        ContestWhiteSelectionBottomLabelConfiguration_ (x.ContestWhiteSelectionBottomLabelConfiguration_, f, this),
        ContestWhiteSelectionCenterLabelConfiguration_ (x.ContestWhiteSelectionCenterLabelConfiguration_, f, this),
        WelcomeContestCenterLabelConfiguration_ (x.WelcomeContestCenterLabelConfiguration_, f, this),
        VotingWidgetLabelChildLabelConfiguration_ (x.VotingWidgetLabelChildLabelConfiguration_, f, this),
        VotingWidgetTopChildLabelConfiguration_ (x.VotingWidgetTopChildLabelConfiguration_, f, this),
        VotingWidgetBottomChildLabelConfiguration_ (x.VotingWidgetBottomChildLabelConfiguration_, f, this),
        VotingWidgetNumberChildLabelConfiguration_ (x.VotingWidgetNumberChildLabelConfiguration_, f, this),
        VotingWindowEndMessageLabelConfiguration_ (x.VotingWindowEndMessageLabelConfiguration_, f, this),
        VotingWidgetPartySelectionLabelChildLabelConfiguration_ (x.VotingWidgetPartySelectionLabelChildLabelConfiguration_, f, this),
        PartyNullLabelConfiguration_ (x.PartyNullLabelConfiguration_, f, this),
        LoadingBallotsLabelConfiguration_ (x.LoadingBallotsLabelConfiguration_, f, this),
        CheckSumLabelConfiguration_ (x.CheckSumLabelConfiguration_, f, this),
        InterrupVotingExperienceMessageLabelConfiguration_ (x.InterrupVotingExperienceMessageLabelConfiguration_, f, this),
        InterrupVotingExperienceCancelLabelConfiguration_ (x.InterrupVotingExperienceCancelLabelConfiguration_, f, this)
      {
      }

      VotingExperienceLabelConfiguration::
      VotingExperienceLabelConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        SelectionLanguageHeaderLabelConfiguration_ (f, this),
        SelectionLanguageBottomLabelConfiguration_ (f, this),
        SelectionLanguageConfirmationHeaderLabelConfiguration_ (f, this),
        SelectionLanguageConfirmationBottomLabelConfiguration_ (f, this),
        SelectionLanguageConfirmationCenterLabelConfiguration_ (f, this),
        SuperWhiteHeaderLabelConfiguration_ (f, this),
        SuperWhiteBottomLabelConfiguration_ (f, this),
        SuperWhiteCenterLabelConfiguration_ (f, this),
        SuperWhiteConfirmationHeaderLabelConfiguration_ (f, this),
        SuperWhiteConfirmationBottomLabelConfiguration_ (f, this),
        SuperWhiteConfirmationCenterLabelConfiguration_ (f, this),
        ContestWhiteSelectionHeaderLabelConfiguration_ (f, this),
        ContestWhiteSelectionBottomLabelConfiguration_ (f, this),
        ContestWhiteSelectionCenterLabelConfiguration_ (f, this),
        WelcomeContestCenterLabelConfiguration_ (f, this),
        VotingWidgetLabelChildLabelConfiguration_ (f, this),
        VotingWidgetTopChildLabelConfiguration_ (f, this),
        VotingWidgetBottomChildLabelConfiguration_ (f, this),
        VotingWidgetNumberChildLabelConfiguration_ (f, this),
        VotingWindowEndMessageLabelConfiguration_ (f, this),
        VotingWidgetPartySelectionLabelChildLabelConfiguration_ (f, this),
        PartyNullLabelConfiguration_ (f, this),
        LoadingBallotsLabelConfiguration_ (f, this),
        CheckSumLabelConfiguration_ (f, this),
        InterrupVotingExperienceMessageLabelConfiguration_ (f, this),
        InterrupVotingExperienceCancelLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VotingExperienceLabelConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SelectionLanguageHeaderLabelConfiguration
          //
          if (n.name () == "SelectionLanguageHeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectionLanguageHeaderLabelConfigurationType > r (
              SelectionLanguageHeaderLabelConfigurationTraits::create (i, f, this));

            if (!SelectionLanguageHeaderLabelConfiguration_.present ())
            {
              this->SelectionLanguageHeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // SelectionLanguageBottomLabelConfiguration
          //
          if (n.name () == "SelectionLanguageBottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectionLanguageBottomLabelConfigurationType > r (
              SelectionLanguageBottomLabelConfigurationTraits::create (i, f, this));

            if (!SelectionLanguageBottomLabelConfiguration_.present ())
            {
              this->SelectionLanguageBottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // SelectionLanguageConfirmationHeaderLabelConfiguration
          //
          if (n.name () == "SelectionLanguageConfirmationHeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectionLanguageConfirmationHeaderLabelConfigurationType > r (
              SelectionLanguageConfirmationHeaderLabelConfigurationTraits::create (i, f, this));

            if (!SelectionLanguageConfirmationHeaderLabelConfiguration_.present ())
            {
              this->SelectionLanguageConfirmationHeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // SelectionLanguageConfirmationBottomLabelConfiguration
          //
          if (n.name () == "SelectionLanguageConfirmationBottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectionLanguageConfirmationBottomLabelConfigurationType > r (
              SelectionLanguageConfirmationBottomLabelConfigurationTraits::create (i, f, this));

            if (!SelectionLanguageConfirmationBottomLabelConfiguration_.present ())
            {
              this->SelectionLanguageConfirmationBottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // SelectionLanguageConfirmationCenterLabelConfiguration
          //
          if (n.name () == "SelectionLanguageConfirmationCenterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectionLanguageConfirmationCenterLabelConfigurationType > r (
              SelectionLanguageConfirmationCenterLabelConfigurationTraits::create (i, f, this));

            if (!SelectionLanguageConfirmationCenterLabelConfiguration_.present ())
            {
              this->SelectionLanguageConfirmationCenterLabelConfiguration_.set (r);
              continue;
            }
          }

          // SuperWhiteHeaderLabelConfiguration
          //
          if (n.name () == "SuperWhiteHeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperWhiteHeaderLabelConfigurationType > r (
              SuperWhiteHeaderLabelConfigurationTraits::create (i, f, this));

            if (!SuperWhiteHeaderLabelConfiguration_.present ())
            {
              this->SuperWhiteHeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // SuperWhiteBottomLabelConfiguration
          //
          if (n.name () == "SuperWhiteBottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperWhiteBottomLabelConfigurationType > r (
              SuperWhiteBottomLabelConfigurationTraits::create (i, f, this));

            if (!SuperWhiteBottomLabelConfiguration_.present ())
            {
              this->SuperWhiteBottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // SuperWhiteCenterLabelConfiguration
          //
          if (n.name () == "SuperWhiteCenterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperWhiteCenterLabelConfigurationType > r (
              SuperWhiteCenterLabelConfigurationTraits::create (i, f, this));

            if (!SuperWhiteCenterLabelConfiguration_.present ())
            {
              this->SuperWhiteCenterLabelConfiguration_.set (r);
              continue;
            }
          }

          // SuperWhiteConfirmationHeaderLabelConfiguration
          //
          if (n.name () == "SuperWhiteConfirmationHeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperWhiteConfirmationHeaderLabelConfigurationType > r (
              SuperWhiteConfirmationHeaderLabelConfigurationTraits::create (i, f, this));

            if (!SuperWhiteConfirmationHeaderLabelConfiguration_.present ())
            {
              this->SuperWhiteConfirmationHeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // SuperWhiteConfirmationBottomLabelConfiguration
          //
          if (n.name () == "SuperWhiteConfirmationBottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperWhiteConfirmationBottomLabelConfigurationType > r (
              SuperWhiteConfirmationBottomLabelConfigurationTraits::create (i, f, this));

            if (!SuperWhiteConfirmationBottomLabelConfiguration_.present ())
            {
              this->SuperWhiteConfirmationBottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // SuperWhiteConfirmationCenterLabelConfiguration
          //
          if (n.name () == "SuperWhiteConfirmationCenterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperWhiteConfirmationCenterLabelConfigurationType > r (
              SuperWhiteConfirmationCenterLabelConfigurationTraits::create (i, f, this));

            if (!SuperWhiteConfirmationCenterLabelConfiguration_.present ())
            {
              this->SuperWhiteConfirmationCenterLabelConfiguration_.set (r);
              continue;
            }
          }

          // ContestWhiteSelectionHeaderLabelConfiguration
          //
          if (n.name () == "ContestWhiteSelectionHeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ContestWhiteSelectionHeaderLabelConfigurationType > r (
              ContestWhiteSelectionHeaderLabelConfigurationTraits::create (i, f, this));

            if (!ContestWhiteSelectionHeaderLabelConfiguration_.present ())
            {
              this->ContestWhiteSelectionHeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // ContestWhiteSelectionBottomLabelConfiguration
          //
          if (n.name () == "ContestWhiteSelectionBottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ContestWhiteSelectionBottomLabelConfigurationType > r (
              ContestWhiteSelectionBottomLabelConfigurationTraits::create (i, f, this));

            if (!ContestWhiteSelectionBottomLabelConfiguration_.present ())
            {
              this->ContestWhiteSelectionBottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // ContestWhiteSelectionCenterLabelConfiguration
          //
          if (n.name () == "ContestWhiteSelectionCenterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ContestWhiteSelectionCenterLabelConfigurationType > r (
              ContestWhiteSelectionCenterLabelConfigurationTraits::create (i, f, this));

            if (!ContestWhiteSelectionCenterLabelConfiguration_.present ())
            {
              this->ContestWhiteSelectionCenterLabelConfiguration_.set (r);
              continue;
            }
          }

          // WelcomeContestCenterLabelConfiguration
          //
          if (n.name () == "WelcomeContestCenterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< WelcomeContestCenterLabelConfigurationType > r (
              WelcomeContestCenterLabelConfigurationTraits::create (i, f, this));

            if (!WelcomeContestCenterLabelConfiguration_.present ())
            {
              this->WelcomeContestCenterLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingWidgetLabelChildLabelConfiguration
          //
          if (n.name () == "VotingWidgetLabelChildLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWidgetLabelChildLabelConfigurationType > r (
              VotingWidgetLabelChildLabelConfigurationTraits::create (i, f, this));

            if (!VotingWidgetLabelChildLabelConfiguration_.present ())
            {
              this->VotingWidgetLabelChildLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingWidgetTopChildLabelConfiguration
          //
          if (n.name () == "VotingWidgetTopChildLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWidgetTopChildLabelConfigurationType > r (
              VotingWidgetTopChildLabelConfigurationTraits::create (i, f, this));

            if (!VotingWidgetTopChildLabelConfiguration_.present ())
            {
              this->VotingWidgetTopChildLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingWidgetBottomChildLabelConfiguration
          //
          if (n.name () == "VotingWidgetBottomChildLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWidgetBottomChildLabelConfigurationType > r (
              VotingWidgetBottomChildLabelConfigurationTraits::create (i, f, this));

            if (!VotingWidgetBottomChildLabelConfiguration_.present ())
            {
              this->VotingWidgetBottomChildLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingWidgetNumberChildLabelConfiguration
          //
          if (n.name () == "VotingWidgetNumberChildLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWidgetNumberChildLabelConfigurationType > r (
              VotingWidgetNumberChildLabelConfigurationTraits::create (i, f, this));

            if (!VotingWidgetNumberChildLabelConfiguration_.present ())
            {
              this->VotingWidgetNumberChildLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingWindowEndMessageLabelConfiguration
          //
          if (n.name () == "VotingWindowEndMessageLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWindowEndMessageLabelConfigurationType > r (
              VotingWindowEndMessageLabelConfigurationTraits::create (i, f, this));

            if (!VotingWindowEndMessageLabelConfiguration_.present ())
            {
              this->VotingWindowEndMessageLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingWidgetPartySelectionLabelChildLabelConfiguration
          //
          if (n.name () == "VotingWidgetPartySelectionLabelChildLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWidgetPartySelectionLabelChildLabelConfigurationType > r (
              VotingWidgetPartySelectionLabelChildLabelConfigurationTraits::create (i, f, this));

            if (!VotingWidgetPartySelectionLabelChildLabelConfiguration_.present ())
            {
              this->VotingWidgetPartySelectionLabelChildLabelConfiguration_.set (r);
              continue;
            }
          }

          // PartyNullLabelConfiguration
          //
          if (n.name () == "PartyNullLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartyNullLabelConfigurationType > r (
              PartyNullLabelConfigurationTraits::create (i, f, this));

            if (!PartyNullLabelConfiguration_.present ())
            {
              this->PartyNullLabelConfiguration_.set (r);
              continue;
            }
          }

          // LoadingBallotsLabelConfiguration
          //
          if (n.name () == "LoadingBallotsLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LoadingBallotsLabelConfigurationType > r (
              LoadingBallotsLabelConfigurationTraits::create (i, f, this));

            if (!LoadingBallotsLabelConfiguration_.present ())
            {
              this->LoadingBallotsLabelConfiguration_.set (r);
              continue;
            }
          }

          // CheckSumLabelConfiguration
          //
          if (n.name () == "CheckSumLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CheckSumLabelConfigurationType > r (
              CheckSumLabelConfigurationTraits::create (i, f, this));

            if (!CheckSumLabelConfiguration_.present ())
            {
              this->CheckSumLabelConfiguration_.set (r);
              continue;
            }
          }

          // InterrupVotingExperienceMessageLabelConfiguration
          //
          if (n.name () == "InterrupVotingExperienceMessageLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InterrupVotingExperienceMessageLabelConfigurationType > r (
              InterrupVotingExperienceMessageLabelConfigurationTraits::create (i, f, this));

            if (!InterrupVotingExperienceMessageLabelConfiguration_.present ())
            {
              this->InterrupVotingExperienceMessageLabelConfiguration_.set (r);
              continue;
            }
          }

          // InterrupVotingExperienceCancelLabelConfiguration
          //
          if (n.name () == "InterrupVotingExperienceCancelLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InterrupVotingExperienceCancelLabelConfigurationType > r (
              InterrupVotingExperienceCancelLabelConfigurationTraits::create (i, f, this));

            if (!InterrupVotingExperienceCancelLabelConfiguration_.present ())
            {
              this->InterrupVotingExperienceCancelLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!SelectionLanguageHeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectionLanguageHeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectionLanguageBottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectionLanguageBottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectionLanguageConfirmationHeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectionLanguageConfirmationHeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectionLanguageConfirmationBottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectionLanguageConfirmationBottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectionLanguageConfirmationCenterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectionLanguageConfirmationCenterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperWhiteHeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperWhiteHeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperWhiteBottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperWhiteBottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperWhiteCenterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperWhiteCenterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperWhiteConfirmationHeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperWhiteConfirmationHeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperWhiteConfirmationBottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperWhiteConfirmationBottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperWhiteConfirmationCenterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperWhiteConfirmationCenterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContestWhiteSelectionHeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContestWhiteSelectionHeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContestWhiteSelectionBottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContestWhiteSelectionBottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContestWhiteSelectionCenterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContestWhiteSelectionCenterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WelcomeContestCenterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WelcomeContestCenterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWidgetLabelChildLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWidgetLabelChildLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWidgetTopChildLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWidgetTopChildLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWidgetBottomChildLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWidgetBottomChildLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWidgetNumberChildLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWidgetNumberChildLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWindowEndMessageLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWindowEndMessageLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingWidgetPartySelectionLabelChildLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWidgetPartySelectionLabelChildLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartyNullLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartyNullLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LoadingBallotsLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LoadingBallotsLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CheckSumLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CheckSumLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InterrupVotingExperienceMessageLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InterrupVotingExperienceMessageLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InterrupVotingExperienceCancelLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InterrupVotingExperienceCancelLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VotingExperienceLabelConfiguration* VotingExperienceLabelConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VotingExperienceLabelConfiguration (*this, f, c);
      }

      VotingExperienceLabelConfiguration::
      ~VotingExperienceLabelConfiguration ()
      {
      }

      bool
      operator== (const VotingExperienceLabelConfiguration& x, const VotingExperienceLabelConfiguration& y)
      {
        if (!(x.getSelectionLanguageHeaderLabelConfiguration () == y.getSelectionLanguageHeaderLabelConfiguration ()))
          return false;

        if (!(x.getSelectionLanguageBottomLabelConfiguration () == y.getSelectionLanguageBottomLabelConfiguration ()))
          return false;

        if (!(x.getSelectionLanguageConfirmationHeaderLabelConfiguration () == y.getSelectionLanguageConfirmationHeaderLabelConfiguration ()))
          return false;

        if (!(x.getSelectionLanguageConfirmationBottomLabelConfiguration () == y.getSelectionLanguageConfirmationBottomLabelConfiguration ()))
          return false;

        if (!(x.getSelectionLanguageConfirmationCenterLabelConfiguration () == y.getSelectionLanguageConfirmationCenterLabelConfiguration ()))
          return false;

        if (!(x.getSuperWhiteHeaderLabelConfiguration () == y.getSuperWhiteHeaderLabelConfiguration ()))
          return false;

        if (!(x.getSuperWhiteBottomLabelConfiguration () == y.getSuperWhiteBottomLabelConfiguration ()))
          return false;

        if (!(x.getSuperWhiteCenterLabelConfiguration () == y.getSuperWhiteCenterLabelConfiguration ()))
          return false;

        if (!(x.getSuperWhiteConfirmationHeaderLabelConfiguration () == y.getSuperWhiteConfirmationHeaderLabelConfiguration ()))
          return false;

        if (!(x.getSuperWhiteConfirmationBottomLabelConfiguration () == y.getSuperWhiteConfirmationBottomLabelConfiguration ()))
          return false;

        if (!(x.getSuperWhiteConfirmationCenterLabelConfiguration () == y.getSuperWhiteConfirmationCenterLabelConfiguration ()))
          return false;

        if (!(x.getContestWhiteSelectionHeaderLabelConfiguration () == y.getContestWhiteSelectionHeaderLabelConfiguration ()))
          return false;

        if (!(x.getContestWhiteSelectionBottomLabelConfiguration () == y.getContestWhiteSelectionBottomLabelConfiguration ()))
          return false;

        if (!(x.getContestWhiteSelectionCenterLabelConfiguration () == y.getContestWhiteSelectionCenterLabelConfiguration ()))
          return false;

        if (!(x.getWelcomeContestCenterLabelConfiguration () == y.getWelcomeContestCenterLabelConfiguration ()))
          return false;

        if (!(x.getVotingWidgetLabelChildLabelConfiguration () == y.getVotingWidgetLabelChildLabelConfiguration ()))
          return false;

        if (!(x.getVotingWidgetTopChildLabelConfiguration () == y.getVotingWidgetTopChildLabelConfiguration ()))
          return false;

        if (!(x.getVotingWidgetBottomChildLabelConfiguration () == y.getVotingWidgetBottomChildLabelConfiguration ()))
          return false;

        if (!(x.getVotingWidgetNumberChildLabelConfiguration () == y.getVotingWidgetNumberChildLabelConfiguration ()))
          return false;

        if (!(x.getVotingWindowEndMessageLabelConfiguration () == y.getVotingWindowEndMessageLabelConfiguration ()))
          return false;

        if (!(x.getVotingWidgetPartySelectionLabelChildLabelConfiguration () == y.getVotingWidgetPartySelectionLabelChildLabelConfiguration ()))
          return false;

        if (!(x.getPartyNullLabelConfiguration () == y.getPartyNullLabelConfiguration ()))
          return false;

        if (!(x.getLoadingBallotsLabelConfiguration () == y.getLoadingBallotsLabelConfiguration ()))
          return false;

        if (!(x.getCheckSumLabelConfiguration () == y.getCheckSumLabelConfiguration ()))
          return false;

        if (!(x.getInterrupVotingExperienceMessageLabelConfiguration () == y.getInterrupVotingExperienceMessageLabelConfiguration ()))
          return false;

        if (!(x.getInterrupVotingExperienceCancelLabelConfiguration () == y.getInterrupVotingExperienceCancelLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const VotingExperienceLabelConfiguration& x, const VotingExperienceLabelConfiguration& y)
      {
        return !(x == y);
      }

      // BallotOptionWidgetConfiguration
      //

      BallotOptionWidgetConfiguration::
      BallotOptionWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Padding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Display_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFrame_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UnSelectedColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotFont_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparatorCharacter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NameIsBeforeSeparator_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionWidgetConfiguration::
      BallotOptionWidgetConfiguration (const NumberWidthType& NumberWidth,
                                       const PaddingType& Padding,
                                       const DisplayType& Display,
                                       const ShowFrameType& ShowFrame,
                                       const SelectedColorType& SelectedColor,
                                       const UnSelectedColorType& UnSelectedColor,
                                       const BallotFontType& BallotFont,
                                       const SeparatorCharacterType& SeparatorCharacter,
                                       const NameIsBeforeSeparatorType& NameIsBeforeSeparator)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberWidth_ (NumberWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Padding_ (Padding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Display_ (Display, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFrame_ (ShowFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedColor_ (SelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnSelectedColor_ (UnSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotFont_ (BallotFont, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparatorCharacter_ (SeparatorCharacter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NameIsBeforeSeparator_ (NameIsBeforeSeparator, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionWidgetConfiguration::
      BallotOptionWidgetConfiguration (const NumberWidthType& NumberWidth,
                                       const PaddingType& Padding,
                                       const DisplayType& Display,
                                       const ShowFrameType& ShowFrame,
                                       ::std::auto_ptr< SelectedColorType >& SelectedColor,
                                       ::std::auto_ptr< UnSelectedColorType >& UnSelectedColor,
                                       ::std::auto_ptr< BallotFontType >& BallotFont,
                                       const SeparatorCharacterType& SeparatorCharacter,
                                       const NameIsBeforeSeparatorType& NameIsBeforeSeparator)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberWidth_ (NumberWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Padding_ (Padding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Display_ (Display, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFrame_ (ShowFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedColor_ (SelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnSelectedColor_ (UnSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotFont_ (BallotFont, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SeparatorCharacter_ (SeparatorCharacter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NameIsBeforeSeparator_ (NameIsBeforeSeparator, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionWidgetConfiguration::
      BallotOptionWidgetConfiguration (const BallotOptionWidgetConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NumberWidth_ (x.NumberWidth_, f, this),
        Padding_ (x.Padding_, f, this),
        Display_ (x.Display_, f, this),
        ShowFrame_ (x.ShowFrame_, f, this),
        SelectedColor_ (x.SelectedColor_, f, this),
        UnSelectedColor_ (x.UnSelectedColor_, f, this),
        BallotFont_ (x.BallotFont_, f, this),
        SeparatorCharacter_ (x.SeparatorCharacter_, f, this),
        NameIsBeforeSeparator_ (x.NameIsBeforeSeparator_, f, this)
      {
      }

      BallotOptionWidgetConfiguration::
      BallotOptionWidgetConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NumberWidth_ (f, this),
        Padding_ (f, this),
        Display_ (f, this),
        ShowFrame_ (f, this),
        SelectedColor_ (f, this),
        UnSelectedColor_ (f, this),
        BallotFont_ (f, this),
        SeparatorCharacter_ (f, this),
        NameIsBeforeSeparator_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BallotOptionWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NumberWidth
          //
          if (n.name () == "NumberWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberWidth_.present ())
            {
              this->NumberWidth_.set (NumberWidthTraits::create (i, f, this));
              continue;
            }
          }

          // Padding
          //
          if (n.name () == "Padding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Padding_.present ())
            {
              this->Padding_.set (PaddingTraits::create (i, f, this));
              continue;
            }
          }

          // Display
          //
          if (n.name () == "Display" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DisplayType > r (
              DisplayTraits::create (i, f, this));

            if (!Display_.present ())
            {
              this->Display_.set (r);
              continue;
            }
          }

          // ShowFrame
          //
          if (n.name () == "ShowFrame" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowFrame_.present ())
            {
              this->ShowFrame_.set (ShowFrameTraits::create (i, f, this));
              continue;
            }
          }

          // SelectedColor
          //
          if (n.name () == "SelectedColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectedColorType > r (
              SelectedColorTraits::create (i, f, this));

            if (!SelectedColor_.present ())
            {
              this->SelectedColor_.set (r);
              continue;
            }
          }

          // UnSelectedColor
          //
          if (n.name () == "UnSelectedColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< UnSelectedColorType > r (
              UnSelectedColorTraits::create (i, f, this));

            if (!UnSelectedColor_.present ())
            {
              this->UnSelectedColor_.set (r);
              continue;
            }
          }

          // BallotFont
          //
          if (n.name () == "BallotFont" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotFontType > r (
              BallotFontTraits::create (i, f, this));

            if (!BallotFont_.present ())
            {
              this->BallotFont_.set (r);
              continue;
            }
          }

          // SeparatorCharacter
          //
          if (n.name () == "SeparatorCharacter" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SeparatorCharacterType > r (
              SeparatorCharacterTraits::create (i, f, this));

            if (!SeparatorCharacter_.present ())
            {
              this->SeparatorCharacter_.set (r);
              continue;
            }
          }

          // NameIsBeforeSeparator
          //
          if (n.name () == "NameIsBeforeSeparator" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NameIsBeforeSeparator_.present ())
            {
              this->NameIsBeforeSeparator_.set (NameIsBeforeSeparatorTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!NumberWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Padding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Padding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Display_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Display",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowFrame",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectedColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectedColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UnSelectedColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UnSelectedColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotFont_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotFont",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SeparatorCharacter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SeparatorCharacter",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NameIsBeforeSeparator_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NameIsBeforeSeparator",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      BallotOptionWidgetConfiguration* BallotOptionWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BallotOptionWidgetConfiguration (*this, f, c);
      }

      BallotOptionWidgetConfiguration::
      ~BallotOptionWidgetConfiguration ()
      {
      }

      bool
      operator== (const BallotOptionWidgetConfiguration& x, const BallotOptionWidgetConfiguration& y)
      {
        if (!(x.getNumberWidth () == y.getNumberWidth ()))
          return false;

        if (!(x.getPadding () == y.getPadding ()))
          return false;

        if (!(x.getDisplay () == y.getDisplay ()))
          return false;

        if (!(x.getShowFrame () == y.getShowFrame ()))
          return false;

        if (!(x.getSelectedColor () == y.getSelectedColor ()))
          return false;

        if (!(x.getUnSelectedColor () == y.getUnSelectedColor ()))
          return false;

        if (!(x.getBallotFont () == y.getBallotFont ()))
          return false;

        if (!(x.getSeparatorCharacter () == y.getSeparatorCharacter ()))
          return false;

        if (!(x.getNameIsBeforeSeparator () == y.getNameIsBeforeSeparator ()))
          return false;

        return true;
      }

      bool
      operator!= (const BallotOptionWidgetConfiguration& x, const BallotOptionWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // VotingWindowConfiguration
      //

      VotingWindowConfiguration::
      VotingWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowBallotOptionFooter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFrameMargin_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFrameHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFont_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowLanguageConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeMessageContestTimer_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBlankVoteQuestion_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBlankVoteConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullQuestionInBack_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowLanguageSelectionInBack_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBallotOptionsInContestBack_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeContest_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EraseBallotOptionsInPartyChanged_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionHeaderSameInConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimer_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimerLoading_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimerLanguage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LoadingBallotMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NumberOfBallotsToDisplayLoadingBallotMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingWindowConfiguration::
      VotingWindowConfiguration (const ShowBallotOptionFooterType& ShowBallotOptionFooter,
                                 const BottomFrameMarginType& BottomFrameMargin,
                                 const BottomFrameHeightType& BottomFrameHeight,
                                 const BottomFontType& BottomFont,
                                 const ShowLanguageConfirmationType& ShowLanguageConfirmation,
                                 const WelcomeMessageContestTimerType& WelcomeMessageContestTimer,
                                 const ShowBlankVoteQuestionType& ShowBlankVoteQuestion,
                                 const ShowBlankVoteConfirmationType& ShowBlankVoteConfirmation,
                                 const ShowNullQuestionInBackType& ShowNullQuestionInBack,
                                 const ShowLanguageSelectionInBackType& ShowLanguageSelectionInBack,
                                 const ShowBallotOptionsInContestBackType& ShowBallotOptionsInContestBack,
                                 const ShowWelcomeContestType& ShowWelcomeContest,
                                 const EraseBallotOptionsInPartyChangedType& EraseBallotOptionsInPartyChanged,
                                 const QuestionHeaderSameInConfirmationType& QuestionHeaderSameInConfirmation,
                                 const ConnectTimerType& ConnectTimer,
                                 const ConnectTimerLoadingType& ConnectTimerLoading,
                                 const ConnectTimerLanguageType& ConnectTimerLanguage,
                                 const LoadingBallotMessageType& LoadingBallotMessage,
                                 const NumberOfBallotsToDisplayLoadingBallotMessageType& NumberOfBallotsToDisplayLoadingBallotMessage)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowBallotOptionFooter_ (ShowBallotOptionFooter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFrameMargin_ (BottomFrameMargin, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFrameHeight_ (BottomFrameHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFont_ (BottomFont, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowLanguageConfirmation_ (ShowLanguageConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeMessageContestTimer_ (WelcomeMessageContestTimer, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBlankVoteQuestion_ (ShowBlankVoteQuestion, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBlankVoteConfirmation_ (ShowBlankVoteConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullQuestionInBack_ (ShowNullQuestionInBack, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowLanguageSelectionInBack_ (ShowLanguageSelectionInBack, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBallotOptionsInContestBack_ (ShowBallotOptionsInContestBack, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeContest_ (ShowWelcomeContest, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EraseBallotOptionsInPartyChanged_ (EraseBallotOptionsInPartyChanged, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionHeaderSameInConfirmation_ (QuestionHeaderSameInConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimer_ (ConnectTimer, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimerLoading_ (ConnectTimerLoading, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimerLanguage_ (ConnectTimerLanguage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LoadingBallotMessage_ (LoadingBallotMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NumberOfBallotsToDisplayLoadingBallotMessage_ (NumberOfBallotsToDisplayLoadingBallotMessage, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingWindowConfiguration::
      VotingWindowConfiguration (const ShowBallotOptionFooterType& ShowBallotOptionFooter,
                                 const BottomFrameMarginType& BottomFrameMargin,
                                 const BottomFrameHeightType& BottomFrameHeight,
                                 ::std::auto_ptr< BottomFontType >& BottomFont,
                                 const ShowLanguageConfirmationType& ShowLanguageConfirmation,
                                 const WelcomeMessageContestTimerType& WelcomeMessageContestTimer,
                                 const ShowBlankVoteQuestionType& ShowBlankVoteQuestion,
                                 const ShowBlankVoteConfirmationType& ShowBlankVoteConfirmation,
                                 const ShowNullQuestionInBackType& ShowNullQuestionInBack,
                                 const ShowLanguageSelectionInBackType& ShowLanguageSelectionInBack,
                                 const ShowBallotOptionsInContestBackType& ShowBallotOptionsInContestBack,
                                 const ShowWelcomeContestType& ShowWelcomeContest,
                                 const EraseBallotOptionsInPartyChangedType& EraseBallotOptionsInPartyChanged,
                                 const QuestionHeaderSameInConfirmationType& QuestionHeaderSameInConfirmation,
                                 const ConnectTimerType& ConnectTimer,
                                 const ConnectTimerLoadingType& ConnectTimerLoading,
                                 const ConnectTimerLanguageType& ConnectTimerLanguage,
                                 const LoadingBallotMessageType& LoadingBallotMessage,
                                 const NumberOfBallotsToDisplayLoadingBallotMessageType& NumberOfBallotsToDisplayLoadingBallotMessage)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowBallotOptionFooter_ (ShowBallotOptionFooter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFrameMargin_ (BottomFrameMargin, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFrameHeight_ (BottomFrameHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomFont_ (BottomFont, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowLanguageConfirmation_ (ShowLanguageConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeMessageContestTimer_ (WelcomeMessageContestTimer, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBlankVoteQuestion_ (ShowBlankVoteQuestion, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBlankVoteConfirmation_ (ShowBlankVoteConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullQuestionInBack_ (ShowNullQuestionInBack, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowLanguageSelectionInBack_ (ShowLanguageSelectionInBack, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBallotOptionsInContestBack_ (ShowBallotOptionsInContestBack, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowWelcomeContest_ (ShowWelcomeContest, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EraseBallotOptionsInPartyChanged_ (EraseBallotOptionsInPartyChanged, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionHeaderSameInConfirmation_ (QuestionHeaderSameInConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimer_ (ConnectTimer, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimerLoading_ (ConnectTimerLoading, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConnectTimerLanguage_ (ConnectTimerLanguage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LoadingBallotMessage_ (LoadingBallotMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NumberOfBallotsToDisplayLoadingBallotMessage_ (NumberOfBallotsToDisplayLoadingBallotMessage, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingWindowConfiguration::
      VotingWindowConfiguration (const VotingWindowConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ShowBallotOptionFooter_ (x.ShowBallotOptionFooter_, f, this),
        BottomFrameMargin_ (x.BottomFrameMargin_, f, this),
        BottomFrameHeight_ (x.BottomFrameHeight_, f, this),
        BottomFont_ (x.BottomFont_, f, this),
        ShowLanguageConfirmation_ (x.ShowLanguageConfirmation_, f, this),
        WelcomeMessageContestTimer_ (x.WelcomeMessageContestTimer_, f, this),
        ShowBlankVoteQuestion_ (x.ShowBlankVoteQuestion_, f, this),
        ShowBlankVoteConfirmation_ (x.ShowBlankVoteConfirmation_, f, this),
        ShowNullQuestionInBack_ (x.ShowNullQuestionInBack_, f, this),
        ShowLanguageSelectionInBack_ (x.ShowLanguageSelectionInBack_, f, this),
        ShowBallotOptionsInContestBack_ (x.ShowBallotOptionsInContestBack_, f, this),
        ShowWelcomeContest_ (x.ShowWelcomeContest_, f, this),
        EraseBallotOptionsInPartyChanged_ (x.EraseBallotOptionsInPartyChanged_, f, this),
        QuestionHeaderSameInConfirmation_ (x.QuestionHeaderSameInConfirmation_, f, this),
        ConnectTimer_ (x.ConnectTimer_, f, this),
        ConnectTimerLoading_ (x.ConnectTimerLoading_, f, this),
        ConnectTimerLanguage_ (x.ConnectTimerLanguage_, f, this),
        LoadingBallotMessage_ (x.LoadingBallotMessage_, f, this),
        NumberOfBallotsToDisplayLoadingBallotMessage_ (x.NumberOfBallotsToDisplayLoadingBallotMessage_, f, this)
      {
      }

      VotingWindowConfiguration::
      VotingWindowConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ShowBallotOptionFooter_ (f, this),
        BottomFrameMargin_ (f, this),
        BottomFrameHeight_ (f, this),
        BottomFont_ (f, this),
        ShowLanguageConfirmation_ (f, this),
        WelcomeMessageContestTimer_ (f, this),
        ShowBlankVoteQuestion_ (f, this),
        ShowBlankVoteConfirmation_ (f, this),
        ShowNullQuestionInBack_ (f, this),
        ShowLanguageSelectionInBack_ (f, this),
        ShowBallotOptionsInContestBack_ (f, this),
        ShowWelcomeContest_ (f, this),
        EraseBallotOptionsInPartyChanged_ (f, this),
        QuestionHeaderSameInConfirmation_ (f, this),
        ConnectTimer_ (f, this),
        ConnectTimerLoading_ (f, this),
        ConnectTimerLanguage_ (f, this),
        LoadingBallotMessage_ (f, this),
        NumberOfBallotsToDisplayLoadingBallotMessage_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VotingWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShowBallotOptionFooter
          //
          if (n.name () == "ShowBallotOptionFooter" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBallotOptionFooter_.present ())
            {
              this->ShowBallotOptionFooter_.set (ShowBallotOptionFooterTraits::create (i, f, this));
              continue;
            }
          }

          // BottomFrameMargin
          //
          if (n.name () == "BottomFrameMargin" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BottomFrameMargin_.present ())
            {
              this->BottomFrameMargin_.set (BottomFrameMarginTraits::create (i, f, this));
              continue;
            }
          }

          // BottomFrameHeight
          //
          if (n.name () == "BottomFrameHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BottomFrameHeight_.present ())
            {
              this->BottomFrameHeight_.set (BottomFrameHeightTraits::create (i, f, this));
              continue;
            }
          }

          // BottomFont
          //
          if (n.name () == "BottomFont" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BottomFontType > r (
              BottomFontTraits::create (i, f, this));

            if (!BottomFont_.present ())
            {
              this->BottomFont_.set (r);
              continue;
            }
          }

          // ShowLanguageConfirmation
          //
          if (n.name () == "ShowLanguageConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowLanguageConfirmation_.present ())
            {
              this->ShowLanguageConfirmation_.set (ShowLanguageConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // WelcomeMessageContestTimer
          //
          if (n.name () == "WelcomeMessageContestTimer" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!WelcomeMessageContestTimer_.present ())
            {
              this->WelcomeMessageContestTimer_.set (WelcomeMessageContestTimerTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBlankVoteQuestion
          //
          if (n.name () == "ShowBlankVoteQuestion" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBlankVoteQuestion_.present ())
            {
              this->ShowBlankVoteQuestion_.set (ShowBlankVoteQuestionTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBlankVoteConfirmation
          //
          if (n.name () == "ShowBlankVoteConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBlankVoteConfirmation_.present ())
            {
              this->ShowBlankVoteConfirmation_.set (ShowBlankVoteConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ShowNullQuestionInBack
          //
          if (n.name () == "ShowNullQuestionInBack" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowNullQuestionInBack_.present ())
            {
              this->ShowNullQuestionInBack_.set (ShowNullQuestionInBackTraits::create (i, f, this));
              continue;
            }
          }

          // ShowLanguageSelectionInBack
          //
          if (n.name () == "ShowLanguageSelectionInBack" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowLanguageSelectionInBack_.present ())
            {
              this->ShowLanguageSelectionInBack_.set (ShowLanguageSelectionInBackTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBallotOptionsInContestBack
          //
          if (n.name () == "ShowBallotOptionsInContestBack" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBallotOptionsInContestBack_.present ())
            {
              this->ShowBallotOptionsInContestBack_.set (ShowBallotOptionsInContestBackTraits::create (i, f, this));
              continue;
            }
          }

          // ShowWelcomeContest
          //
          if (n.name () == "ShowWelcomeContest" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowWelcomeContest_.present ())
            {
              this->ShowWelcomeContest_.set (ShowWelcomeContestTraits::create (i, f, this));
              continue;
            }
          }

          // EraseBallotOptionsInPartyChanged
          //
          if (n.name () == "EraseBallotOptionsInPartyChanged" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EraseBallotOptionsInPartyChanged_.present ())
            {
              this->EraseBallotOptionsInPartyChanged_.set (EraseBallotOptionsInPartyChangedTraits::create (i, f, this));
              continue;
            }
          }

          // QuestionHeaderSameInConfirmation
          //
          if (n.name () == "QuestionHeaderSameInConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!QuestionHeaderSameInConfirmation_.present ())
            {
              this->QuestionHeaderSameInConfirmation_.set (QuestionHeaderSameInConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ConnectTimer
          //
          if (n.name () == "ConnectTimer" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ConnectTimer_.present ())
            {
              this->ConnectTimer_.set (ConnectTimerTraits::create (i, f, this));
              continue;
            }
          }

          // ConnectTimerLoading
          //
          if (n.name () == "ConnectTimerLoading" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ConnectTimerLoading_.present ())
            {
              this->ConnectTimerLoading_.set (ConnectTimerLoadingTraits::create (i, f, this));
              continue;
            }
          }

          // ConnectTimerLanguage
          //
          if (n.name () == "ConnectTimerLanguage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ConnectTimerLanguage_.present ())
            {
              this->ConnectTimerLanguage_.set (ConnectTimerLanguageTraits::create (i, f, this));
              continue;
            }
          }

          // LoadingBallotMessage
          //
          if (n.name () == "LoadingBallotMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LoadingBallotMessageType > r (
              LoadingBallotMessageTraits::create (i, f, this));

            if (!LoadingBallotMessage_.present ())
            {
              this->LoadingBallotMessage_.set (r);
              continue;
            }
          }

          // NumberOfBallotsToDisplayLoadingBallotMessage
          //
          if (n.name () == "NumberOfBallotsToDisplayLoadingBallotMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberOfBallotsToDisplayLoadingBallotMessage_.present ())
            {
              this->NumberOfBallotsToDisplayLoadingBallotMessage_.set (NumberOfBallotsToDisplayLoadingBallotMessageTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ShowBallotOptionFooter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBallotOptionFooter",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomFrameMargin_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomFrameMargin",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomFrameHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomFrameHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomFont_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomFont",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowLanguageConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowLanguageConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WelcomeMessageContestTimer_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WelcomeMessageContestTimer",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBlankVoteQuestion_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBlankVoteQuestion",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBlankVoteConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBlankVoteConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowNullQuestionInBack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowNullQuestionInBack",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowLanguageSelectionInBack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowLanguageSelectionInBack",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBallotOptionsInContestBack_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBallotOptionsInContestBack",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowWelcomeContest_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowWelcomeContest",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EraseBallotOptionsInPartyChanged_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EraseBallotOptionsInPartyChanged",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionHeaderSameInConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionHeaderSameInConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConnectTimer_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConnectTimer",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConnectTimerLoading_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConnectTimerLoading",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConnectTimerLanguage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConnectTimerLanguage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LoadingBallotMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LoadingBallotMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NumberOfBallotsToDisplayLoadingBallotMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberOfBallotsToDisplayLoadingBallotMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VotingWindowConfiguration* VotingWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VotingWindowConfiguration (*this, f, c);
      }

      VotingWindowConfiguration::
      ~VotingWindowConfiguration ()
      {
      }

      bool
      operator== (const VotingWindowConfiguration& x, const VotingWindowConfiguration& y)
      {
        if (!(x.getShowBallotOptionFooter () == y.getShowBallotOptionFooter ()))
          return false;

        if (!(x.getBottomFrameMargin () == y.getBottomFrameMargin ()))
          return false;

        if (!(x.getBottomFrameHeight () == y.getBottomFrameHeight ()))
          return false;

        if (!(x.getBottomFont () == y.getBottomFont ()))
          return false;

        if (!(x.getShowLanguageConfirmation () == y.getShowLanguageConfirmation ()))
          return false;

        if (!(x.getWelcomeMessageContestTimer () == y.getWelcomeMessageContestTimer ()))
          return false;

        if (!(x.getShowBlankVoteQuestion () == y.getShowBlankVoteQuestion ()))
          return false;

        if (!(x.getShowBlankVoteConfirmation () == y.getShowBlankVoteConfirmation ()))
          return false;

        if (!(x.getShowNullQuestionInBack () == y.getShowNullQuestionInBack ()))
          return false;

        if (!(x.getShowLanguageSelectionInBack () == y.getShowLanguageSelectionInBack ()))
          return false;

        if (!(x.getShowBallotOptionsInContestBack () == y.getShowBallotOptionsInContestBack ()))
          return false;

        if (!(x.getShowWelcomeContest () == y.getShowWelcomeContest ()))
          return false;

        if (!(x.getEraseBallotOptionsInPartyChanged () == y.getEraseBallotOptionsInPartyChanged ()))
          return false;

        if (!(x.getQuestionHeaderSameInConfirmation () == y.getQuestionHeaderSameInConfirmation ()))
          return false;

        if (!(x.getConnectTimer () == y.getConnectTimer ()))
          return false;

        if (!(x.getConnectTimerLoading () == y.getConnectTimerLoading ()))
          return false;

        if (!(x.getConnectTimerLanguage () == y.getConnectTimerLanguage ()))
          return false;

        if (!(x.getLoadingBallotMessage () == y.getLoadingBallotMessage ()))
          return false;

        if (!(x.getNumberOfBallotsToDisplayLoadingBallotMessage () == y.getNumberOfBallotsToDisplayLoadingBallotMessage ()))
          return false;

        return true;
      }

      bool
      operator!= (const VotingWindowConfiguration& x, const VotingWindowConfiguration& y)
      {
        return !(x == y);
      }

      // ReportPrintingWidgetConfiguration
      //

      ReportPrintingWidgetConfiguration::
      ReportPrintingWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        CompositeDescriptionLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportListTitleLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ProgressMessageLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportListItemLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ReportPrintingWidgetConfiguration::
      ReportPrintingWidgetConfiguration (const CompositeDescriptionLabelConfigurationType& CompositeDescriptionLabelConfiguration,
                                         const ReportListTitleLabelConfigurationType& ReportListTitleLabelConfiguration,
                                         const ProgressMessageLabelConfigurationType& ProgressMessageLabelConfiguration,
                                         const ReportListItemLabelConfigurationType& ReportListItemLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        CompositeDescriptionLabelConfiguration_ (CompositeDescriptionLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportListTitleLabelConfiguration_ (ReportListTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ProgressMessageLabelConfiguration_ (ProgressMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportListItemLabelConfiguration_ (ReportListItemLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ReportPrintingWidgetConfiguration::
      ReportPrintingWidgetConfiguration (::std::auto_ptr< CompositeDescriptionLabelConfigurationType >& CompositeDescriptionLabelConfiguration,
                                         ::std::auto_ptr< ReportListTitleLabelConfigurationType >& ReportListTitleLabelConfiguration,
                                         ::std::auto_ptr< ProgressMessageLabelConfigurationType >& ProgressMessageLabelConfiguration,
                                         ::std::auto_ptr< ReportListItemLabelConfigurationType >& ReportListItemLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        CompositeDescriptionLabelConfiguration_ (CompositeDescriptionLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportListTitleLabelConfiguration_ (ReportListTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ProgressMessageLabelConfiguration_ (ProgressMessageLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ReportListItemLabelConfiguration_ (ReportListItemLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ReportPrintingWidgetConfiguration::
      ReportPrintingWidgetConfiguration (const ReportPrintingWidgetConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        CompositeDescriptionLabelConfiguration_ (x.CompositeDescriptionLabelConfiguration_, f, this),
        ReportListTitleLabelConfiguration_ (x.ReportListTitleLabelConfiguration_, f, this),
        ProgressMessageLabelConfiguration_ (x.ProgressMessageLabelConfiguration_, f, this),
        ReportListItemLabelConfiguration_ (x.ReportListItemLabelConfiguration_, f, this)
      {
      }

      ReportPrintingWidgetConfiguration::
      ReportPrintingWidgetConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        CompositeDescriptionLabelConfiguration_ (f, this),
        ReportListTitleLabelConfiguration_ (f, this),
        ProgressMessageLabelConfiguration_ (f, this),
        ReportListItemLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ReportPrintingWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CompositeDescriptionLabelConfiguration
          //
          if (n.name () == "CompositeDescriptionLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CompositeDescriptionLabelConfigurationType > r (
              CompositeDescriptionLabelConfigurationTraits::create (i, f, this));

            if (!CompositeDescriptionLabelConfiguration_.present ())
            {
              this->CompositeDescriptionLabelConfiguration_.set (r);
              continue;
            }
          }

          // ReportListTitleLabelConfiguration
          //
          if (n.name () == "ReportListTitleLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ReportListTitleLabelConfigurationType > r (
              ReportListTitleLabelConfigurationTraits::create (i, f, this));

            if (!ReportListTitleLabelConfiguration_.present ())
            {
              this->ReportListTitleLabelConfiguration_.set (r);
              continue;
            }
          }

          // ProgressMessageLabelConfiguration
          //
          if (n.name () == "ProgressMessageLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ProgressMessageLabelConfigurationType > r (
              ProgressMessageLabelConfigurationTraits::create (i, f, this));

            if (!ProgressMessageLabelConfiguration_.present ())
            {
              this->ProgressMessageLabelConfiguration_.set (r);
              continue;
            }
          }

          // ReportListItemLabelConfiguration
          //
          if (n.name () == "ReportListItemLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ReportListItemLabelConfigurationType > r (
              ReportListItemLabelConfigurationTraits::create (i, f, this));

            if (!ReportListItemLabelConfiguration_.present ())
            {
              this->ReportListItemLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!CompositeDescriptionLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CompositeDescriptionLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ReportListTitleLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ReportListTitleLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ProgressMessageLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ProgressMessageLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ReportListItemLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ReportListItemLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ReportPrintingWidgetConfiguration* ReportPrintingWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ReportPrintingWidgetConfiguration (*this, f, c);
      }

      ReportPrintingWidgetConfiguration::
      ~ReportPrintingWidgetConfiguration ()
      {
      }

      bool
      operator== (const ReportPrintingWidgetConfiguration& x, const ReportPrintingWidgetConfiguration& y)
      {
        if (!(x.getCompositeDescriptionLabelConfiguration () == y.getCompositeDescriptionLabelConfiguration ()))
          return false;

        if (!(x.getReportListTitleLabelConfiguration () == y.getReportListTitleLabelConfiguration ()))
          return false;

        if (!(x.getProgressMessageLabelConfiguration () == y.getProgressMessageLabelConfiguration ()))
          return false;

        if (!(x.getReportListItemLabelConfiguration () == y.getReportListItemLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const ReportPrintingWidgetConfiguration& x, const ReportPrintingWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // FontConfiguration
      //

      FontConfiguration::
      FontConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Size_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontName_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FontConfiguration::
      FontConfiguration (const SizeType& Size,
                         const FontNameType& FontName)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Size_ (Size, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontName_ (FontName, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FontConfiguration::
      FontConfiguration (const FontConfiguration& x,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Size_ (x.Size_, f, this),
        FontName_ (x.FontName_, f, this)
      {
      }

      FontConfiguration::
      FontConfiguration (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Size_ (f, this),
        FontName_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FontConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Size
          //
          if (n.name () == "Size" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Size_.present ())
            {
              this->Size_.set (SizeTraits::create (i, f, this));
              continue;
            }
          }

          // FontName
          //
          if (n.name () == "FontName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FontNameType > r (
              FontNameTraits::create (i, f, this));

            if (!FontName_.present ())
            {
              this->FontName_.set (r);
              continue;
            }
          }

          break;
        }

        if (!Size_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Size",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      FontConfiguration* FontConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FontConfiguration (*this, f, c);
      }

      FontConfiguration::
      ~FontConfiguration ()
      {
      }

      bool
      operator== (const FontConfiguration& x, const FontConfiguration& y)
      {
        if (!(x.getSize () == y.getSize ()))
          return false;

        if (!(x.getFontName () == y.getFontName ()))
          return false;

        return true;
      }

      bool
      operator!= (const FontConfiguration& x, const FontConfiguration& y)
      {
        return !(x == y);
      }

      // ColorConfiguration
      //

      ColorConfiguration::
      ColorConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Red_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Blue_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Green_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ColorConfiguration::
      ColorConfiguration (const RedType& Red,
                          const BlueType& Blue,
                          const GreenType& Green)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Red_ (Red, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Blue_ (Blue, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Green_ (Green, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ColorConfiguration::
      ColorConfiguration (const ColorConfiguration& x,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Red_ (x.Red_, f, this),
        Blue_ (x.Blue_, f, this),
        Green_ (x.Green_, f, this)
      {
      }

      ColorConfiguration::
      ColorConfiguration (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Red_ (f, this),
        Blue_ (f, this),
        Green_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ColorConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Red
          //
          if (n.name () == "Red" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Red_.present ())
            {
              this->Red_.set (RedTraits::create (i, f, this));
              continue;
            }
          }

          // Blue
          //
          if (n.name () == "Blue" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Blue_.present ())
            {
              this->Blue_.set (BlueTraits::create (i, f, this));
              continue;
            }
          }

          // Green
          //
          if (n.name () == "Green" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Green_.present ())
            {
              this->Green_.set (GreenTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Red_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Red",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Blue_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Blue",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Green_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Green",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ColorConfiguration* ColorConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ColorConfiguration (*this, f, c);
      }

      ColorConfiguration::
      ~ColorConfiguration ()
      {
      }

      bool
      operator== (const ColorConfiguration& x, const ColorConfiguration& y)
      {
        if (!(x.getRed () == y.getRed ()))
          return false;

        if (!(x.getBlue () == y.getBlue ()))
          return false;

        if (!(x.getGreen () == y.getGreen ()))
          return false;

        return true;
      }

      bool
      operator!= (const ColorConfiguration& x, const ColorConfiguration& y)
      {
        return !(x == y);
      }

      // XMLLabelConfiguration
      //

      XMLLabelConfiguration::
      XMLLabelConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Label_Alignment_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_VerticalPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_HorizontalPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Family_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Style_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Weight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Size_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      XMLLabelConfiguration::
      XMLLabelConfiguration (const Label_AlignmentType& Label_Alignment,
                             const Label_VerticalPaddingType& Label_VerticalPadding,
                             const Label_HorizontalPaddingType& Label_HorizontalPadding,
                             const Label_FamilyType& Label_Family,
                             const Label_StyleType& Label_Style,
                             const Label_WeightType& Label_Weight,
                             const Label_SizeType& Label_Size)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Label_Alignment_ (Label_Alignment, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_VerticalPadding_ (Label_VerticalPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_HorizontalPadding_ (Label_HorizontalPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Family_ (Label_Family, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Style_ (Label_Style, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Weight_ (Label_Weight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Label_Size_ (Label_Size, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      XMLLabelConfiguration::
      XMLLabelConfiguration (const XMLLabelConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Label_Alignment_ (x.Label_Alignment_, f, this),
        Label_VerticalPadding_ (x.Label_VerticalPadding_, f, this),
        Label_HorizontalPadding_ (x.Label_HorizontalPadding_, f, this),
        Label_Family_ (x.Label_Family_, f, this),
        Label_Style_ (x.Label_Style_, f, this),
        Label_Weight_ (x.Label_Weight_, f, this),
        Label_Size_ (x.Label_Size_, f, this)
      {
      }

      XMLLabelConfiguration::
      XMLLabelConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Label_Alignment_ (f, this),
        Label_VerticalPadding_ (f, this),
        Label_HorizontalPadding_ (f, this),
        Label_Family_ (f, this),
        Label_Style_ (f, this),
        Label_Weight_ (f, this),
        Label_Size_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void XMLLabelConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Label_Alignment
          //
          if (n.name () == "Label_Alignment" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< Label_AlignmentType > r (
              Label_AlignmentTraits::create (i, f, this));

            if (!Label_Alignment_.present ())
            {
              this->Label_Alignment_.set (r);
              continue;
            }
          }

          // Label_VerticalPadding
          //
          if (n.name () == "Label_VerticalPadding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Label_VerticalPadding_.present ())
            {
              this->Label_VerticalPadding_.set (Label_VerticalPaddingTraits::create (i, f, this));
              continue;
            }
          }

          // Label_HorizontalPadding
          //
          if (n.name () == "Label_HorizontalPadding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Label_HorizontalPadding_.present ())
            {
              this->Label_HorizontalPadding_.set (Label_HorizontalPaddingTraits::create (i, f, this));
              continue;
            }
          }

          // Label_Family
          //
          if (n.name () == "Label_Family" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< Label_FamilyType > r (
              Label_FamilyTraits::create (i, f, this));

            if (!Label_Family_.present ())
            {
              this->Label_Family_.set (r);
              continue;
            }
          }

          // Label_Style
          //
          if (n.name () == "Label_Style" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< Label_StyleType > r (
              Label_StyleTraits::create (i, f, this));

            if (!Label_Style_.present ())
            {
              this->Label_Style_.set (r);
              continue;
            }
          }

          // Label_Weight
          //
          if (n.name () == "Label_Weight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< Label_WeightType > r (
              Label_WeightTraits::create (i, f, this));

            if (!Label_Weight_.present ())
            {
              this->Label_Weight_.set (r);
              continue;
            }
          }

          // Label_Size
          //
          if (n.name () == "Label_Size" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Label_Size_.present ())
            {
              this->Label_Size_.set (Label_SizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Label_Alignment_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_Alignment",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Label_VerticalPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_VerticalPadding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Label_HorizontalPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_HorizontalPadding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Label_Family_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_Family",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Label_Style_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_Style",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Label_Weight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_Weight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Label_Size_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Label_Size",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      XMLLabelConfiguration* XMLLabelConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class XMLLabelConfiguration (*this, f, c);
      }

      XMLLabelConfiguration::
      ~XMLLabelConfiguration ()
      {
      }

      bool
      operator== (const XMLLabelConfiguration& x, const XMLLabelConfiguration& y)
      {
        if (!(x.getLabel_Alignment () == y.getLabel_Alignment ()))
          return false;

        if (!(x.getLabel_VerticalPadding () == y.getLabel_VerticalPadding ()))
          return false;

        if (!(x.getLabel_HorizontalPadding () == y.getLabel_HorizontalPadding ()))
          return false;

        if (!(x.getLabel_Family () == y.getLabel_Family ()))
          return false;

        if (!(x.getLabel_Style () == y.getLabel_Style ()))
          return false;

        if (!(x.getLabel_Weight () == y.getLabel_Weight ()))
          return false;

        if (!(x.getLabel_Size () == y.getLabel_Size ()))
          return false;

        return true;
      }

      bool
      operator!= (const XMLLabelConfiguration& x, const XMLLabelConfiguration& y)
      {
        return !(x == y);
      }

      // IncomePassphraseEnum
      //

      IncomePassphraseEnum::
      IncomePassphraseEnum (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_IncomePassphraseEnum_convert ();
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_IncomePassphraseEnum_convert ();
      }

      IncomePassphraseEnum::
      IncomePassphraseEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_IncomePassphraseEnum_convert ();
      }

      IncomePassphraseEnum* IncomePassphraseEnum::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IncomePassphraseEnum (*this, f, c);
      }

      IncomePassphraseEnum::Value IncomePassphraseEnum::
      _xsd_IncomePassphraseEnum_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_IncomePassphraseEnum_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_IncomePassphraseEnum_indexes_,
                          _xsd_IncomePassphraseEnum_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_IncomePassphraseEnum_indexes_ + 2 || _xsd_IncomePassphraseEnum_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const IncomePassphraseEnum::
      _xsd_IncomePassphraseEnum_literals_[2] =
      {
        "Token",
        "Screen"
      };

      const IncomePassphraseEnum::Value IncomePassphraseEnum::
      _xsd_IncomePassphraseEnum_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::IncomePassphraseEnum::CONFIGURATION_SCREEN,
        ::Smartmatic::SAES::Configuration::IncomePassphraseEnum::CONFIGURATION_TOKEN
      };

      // ViewButtonConfiguration
      //

      ViewButtonConfiguration::
      ViewButtonConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_ViewButtonConfiguration_convert ();
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (const ::xercesc::DOMAttr& a,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_ViewButtonConfiguration_convert ();
      }

      ViewButtonConfiguration::
      ViewButtonConfiguration (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_ViewButtonConfiguration_convert ();
      }

      ViewButtonConfiguration* ViewButtonConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ViewButtonConfiguration (*this, f, c);
      }

      ViewButtonConfiguration::Value ViewButtonConfiguration::
      _xsd_ViewButtonConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ViewButtonConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_ViewButtonConfiguration_indexes_,
                          _xsd_ViewButtonConfiguration_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_ViewButtonConfiguration_indexes_ + 2 || _xsd_ViewButtonConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const ViewButtonConfiguration::
      _xsd_ViewButtonConfiguration_literals_[2] =
      {
        "expand-buttons",
        "separate-buttons"
      };

      const ViewButtonConfiguration::Value ViewButtonConfiguration::
      _xsd_ViewButtonConfiguration_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::ViewButtonConfiguration::CONFIGURATION_EXPAND_BUTTONS,
        ::Smartmatic::SAES::Configuration::ViewButtonConfiguration::CONFIGURATION_SEPARATE_BUTTONS
      };

      // ViewTableConfiguration
      //

      ViewTableConfiguration::
      ViewTableConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_ViewTableConfiguration_convert ();
      }

      ViewTableConfiguration::
      ViewTableConfiguration (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_ViewTableConfiguration_convert ();
      }

      ViewTableConfiguration::
      ViewTableConfiguration (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_ViewTableConfiguration_convert ();
      }

      ViewTableConfiguration* ViewTableConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ViewTableConfiguration (*this, f, c);
      }

      ViewTableConfiguration::Value ViewTableConfiguration::
      _xsd_ViewTableConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ViewTableConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_ViewTableConfiguration_indexes_,
                          _xsd_ViewTableConfiguration_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_ViewTableConfiguration_indexes_ + 2 || _xsd_ViewTableConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const ViewTableConfiguration::
      _xsd_ViewTableConfiguration_literals_[2] =
      {
        "column-fixed",
        "column-center"
      };

      const ViewTableConfiguration::Value ViewTableConfiguration::
      _xsd_ViewTableConfiguration_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::ViewTableConfiguration::CONFIGURATION_COLUMN_CENTER,
        ::Smartmatic::SAES::Configuration::ViewTableConfiguration::CONFIGURATION_COLUMN_FIXED
      };

      // ExpandButtonConfiguration
      //

      ExpandButtonConfiguration::
      ExpandButtonConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Spacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ExpandButtonConfiguration::
      ExpandButtonConfiguration (const SpacingType& Spacing,
                                 const FontSizeType& FontSize)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Spacing_ (Spacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (FontSize, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ExpandButtonConfiguration::
      ExpandButtonConfiguration (const ExpandButtonConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Spacing_ (x.Spacing_, f, this),
        FontSize_ (x.FontSize_, f, this)
      {
      }

      ExpandButtonConfiguration::
      ExpandButtonConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Spacing_ (f, this),
        FontSize_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ExpandButtonConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Spacing
          //
          if (n.name () == "Spacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Spacing_.present ())
            {
              this->Spacing_.set (SpacingTraits::create (i, f, this));
              continue;
            }
          }

          // FontSize
          //
          if (n.name () == "FontSize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FontSize_.present ())
            {
              this->FontSize_.set (FontSizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Spacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Spacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontSize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ExpandButtonConfiguration* ExpandButtonConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ExpandButtonConfiguration (*this, f, c);
      }

      ExpandButtonConfiguration::
      ~ExpandButtonConfiguration ()
      {
      }

      bool
      operator== (const ExpandButtonConfiguration& x, const ExpandButtonConfiguration& y)
      {
        if (!(x.getSpacing () == y.getSpacing ()))
          return false;

        if (!(x.getFontSize () == y.getFontSize ()))
          return false;

        return true;
      }

      bool
      operator!= (const ExpandButtonConfiguration& x, const ExpandButtonConfiguration& y)
      {
        return !(x == y);
      }

      // BallotOptionSeparateButtonConfiguration
      //

      BallotOptionSeparateButtonConfiguration::
      BallotOptionSeparateButtonConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ClearButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AcceptButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BackButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionSeparateButtonConfiguration::
      BallotOptionSeparateButtonConfiguration (const ClearButtonWidthType& ClearButtonWidth,
                                               const AcceptButtonWidthType& AcceptButtonWidth,
                                               const BackButtonWidthType& BackButtonWidth,
                                               const FontSizeType& FontSize)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ClearButtonWidth_ (ClearButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AcceptButtonWidth_ (AcceptButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BackButtonWidth_ (BackButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (FontSize, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BallotOptionSeparateButtonConfiguration::
      BallotOptionSeparateButtonConfiguration (const BallotOptionSeparateButtonConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ClearButtonWidth_ (x.ClearButtonWidth_, f, this),
        AcceptButtonWidth_ (x.AcceptButtonWidth_, f, this),
        BackButtonWidth_ (x.BackButtonWidth_, f, this),
        FontSize_ (x.FontSize_, f, this)
      {
      }

      BallotOptionSeparateButtonConfiguration::
      BallotOptionSeparateButtonConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ClearButtonWidth_ (f, this),
        AcceptButtonWidth_ (f, this),
        BackButtonWidth_ (f, this),
        FontSize_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BallotOptionSeparateButtonConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ClearButtonWidth
          //
          if (n.name () == "ClearButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ClearButtonWidth_.present ())
            {
              this->ClearButtonWidth_.set (ClearButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // AcceptButtonWidth
          //
          if (n.name () == "AcceptButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AcceptButtonWidth_.present ())
            {
              this->AcceptButtonWidth_.set (AcceptButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // BackButtonWidth
          //
          if (n.name () == "BackButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BackButtonWidth_.present ())
            {
              this->BackButtonWidth_.set (BackButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // FontSize
          //
          if (n.name () == "FontSize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FontSize_.present ())
            {
              this->FontSize_.set (FontSizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ClearButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ClearButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AcceptButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AcceptButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BackButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BackButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontSize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      BallotOptionSeparateButtonConfiguration* BallotOptionSeparateButtonConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BallotOptionSeparateButtonConfiguration (*this, f, c);
      }

      BallotOptionSeparateButtonConfiguration::
      ~BallotOptionSeparateButtonConfiguration ()
      {
      }

      bool
      operator== (const BallotOptionSeparateButtonConfiguration& x, const BallotOptionSeparateButtonConfiguration& y)
      {
        if (!(x.getClearButtonWidth () == y.getClearButtonWidth ()))
          return false;

        if (!(x.getAcceptButtonWidth () == y.getAcceptButtonWidth ()))
          return false;

        if (!(x.getBackButtonWidth () == y.getBackButtonWidth ()))
          return false;

        if (!(x.getFontSize () == y.getFontSize ()))
          return false;

        return true;
      }

      bool
      operator!= (const BallotOptionSeparateButtonConfiguration& x, const BallotOptionSeparateButtonConfiguration& y)
      {
        return !(x == y);
      }

      // PartySeparateButtonConfiguration
      //

      PartySeparateButtonConfiguration::
      PartySeparateButtonConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NullButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BackButtonWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartySeparateButtonConfiguration::
      PartySeparateButtonConfiguration (const NullButtonWidthType& NullButtonWidth,
                                        const BackButtonWidthType& BackButtonWidth,
                                        const FontSizeType& FontSize)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NullButtonWidth_ (NullButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BackButtonWidth_ (BackButtonWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontSize_ (FontSize, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PartySeparateButtonConfiguration::
      PartySeparateButtonConfiguration (const PartySeparateButtonConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NullButtonWidth_ (x.NullButtonWidth_, f, this),
        BackButtonWidth_ (x.BackButtonWidth_, f, this),
        FontSize_ (x.FontSize_, f, this)
      {
      }

      PartySeparateButtonConfiguration::
      PartySeparateButtonConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NullButtonWidth_ (f, this),
        BackButtonWidth_ (f, this),
        FontSize_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PartySeparateButtonConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NullButtonWidth
          //
          if (n.name () == "NullButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NullButtonWidth_.present ())
            {
              this->NullButtonWidth_.set (NullButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // BackButtonWidth
          //
          if (n.name () == "BackButtonWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BackButtonWidth_.present ())
            {
              this->BackButtonWidth_.set (BackButtonWidthTraits::create (i, f, this));
              continue;
            }
          }

          // FontSize
          //
          if (n.name () == "FontSize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FontSize_.present ())
            {
              this->FontSize_.set (FontSizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!NullButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NullButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BackButtonWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BackButtonWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontSize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PartySeparateButtonConfiguration* PartySeparateButtonConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PartySeparateButtonConfiguration (*this, f, c);
      }

      PartySeparateButtonConfiguration::
      ~PartySeparateButtonConfiguration ()
      {
      }

      bool
      operator== (const PartySeparateButtonConfiguration& x, const PartySeparateButtonConfiguration& y)
      {
        if (!(x.getNullButtonWidth () == y.getNullButtonWidth ()))
          return false;

        if (!(x.getBackButtonWidth () == y.getBackButtonWidth ()))
          return false;

        if (!(x.getFontSize () == y.getFontSize ()))
          return false;

        return true;
      }

      bool
      operator!= (const PartySeparateButtonConfiguration& x, const PartySeparateButtonConfiguration& y)
      {
        return !(x == y);
      }

      // CloseElectionSteps
      //

      CloseElectionSteps::
      CloseElectionSteps (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_CloseElectionSteps_convert ();
      }

      CloseElectionSteps::
      CloseElectionSteps (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_CloseElectionSteps_convert ();
      }

      CloseElectionSteps::
      CloseElectionSteps (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_CloseElectionSteps_convert ();
      }

      CloseElectionSteps* CloseElectionSteps::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CloseElectionSteps (*this, f, c);
      }

      CloseElectionSteps::Value CloseElectionSteps::
      _xsd_CloseElectionSteps_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CloseElectionSteps_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_CloseElectionSteps_indexes_,
                          _xsd_CloseElectionSteps_indexes_ + 11,
                          *this,
                          c));

        if (i == _xsd_CloseElectionSteps_indexes_ + 11 || _xsd_CloseElectionSteps_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const CloseElectionSteps::
      _xsd_CloseElectionSteps_literals_[11] =
      {
        "CloseConfirmation",
        "RequestIDCard",
        "GenerateAllResult",
        "SignTransmissionPackage",
        "SignElectionResource",
        "CloseElection",
        "PrintPV",
        "GeneratePVReport",
        "RegisterCloseNote",
        "Statistics",
        "VoteDuration"
      };

      const CloseElectionSteps::Value CloseElectionSteps::
      _xsd_CloseElectionSteps_indexes_[11] =
      {
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_CLOSECONFIRMATION,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_CLOSEELECTION,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_GENERATEALLRESULT,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_GENERATEPVREPORT,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_PRINTPV,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_REGISTERCLOSENOTE,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_REQUESTIDCARD,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_SIGNELECTIONRESOURCE,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_SIGNTRANSMISSIONPACKAGE,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_STATISTICS,
        ::Smartmatic::SAES::Configuration::CloseElectionSteps::CONFIGURATION_VOTEDURATION
      };

      // ChallengePasswordSourceEnum
      //

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_ChallengePasswordSourceEnum_convert ();
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const ::xercesc::DOMAttr& a,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_ChallengePasswordSourceEnum_convert ();
      }

      ChallengePasswordSourceEnum::
      ChallengePasswordSourceEnum (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_ChallengePasswordSourceEnum_convert ();
      }

      ChallengePasswordSourceEnum* ChallengePasswordSourceEnum::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ChallengePasswordSourceEnum (*this, f, c);
      }

      ChallengePasswordSourceEnum::Value ChallengePasswordSourceEnum::
      _xsd_ChallengePasswordSourceEnum_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ChallengePasswordSourceEnum_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_ChallengePasswordSourceEnum_indexes_,
                          _xsd_ChallengePasswordSourceEnum_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_ChallengePasswordSourceEnum_indexes_ + 2 || _xsd_ChallengePasswordSourceEnum_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const ChallengePasswordSourceEnum::
      _xsd_ChallengePasswordSourceEnum_literals_[2] =
      {
        "PresidentPassphrase",
        "Role"
      };

      const ChallengePasswordSourceEnum::Value ChallengePasswordSourceEnum::
      _xsd_ChallengePasswordSourceEnum_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::ChallengePasswordSourceEnum::CONFIGURATION_PRESIDENTPASSPHRASE,
        ::Smartmatic::SAES::Configuration::ChallengePasswordSourceEnum::CONFIGURATION_ROLE
      };

      // ActivatedCardStatisticsConfiguration
      //

      ActivatedCardStatisticsConfiguration::
      ActivatedCardStatisticsConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        HideOfficial_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HideDemo_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HideRecovery_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HideAudio_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HideNonAudio_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HideCA_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ActivatedCardStatisticsConfiguration::
      ActivatedCardStatisticsConfiguration (const HideOfficialType& HideOfficial,
                                            const HideDemoType& HideDemo,
                                            const HideRecoveryType& HideRecovery,
                                            const HideAudioType& HideAudio,
                                            const HideNonAudioType& HideNonAudio,
                                            const HideCAType& HideCA)
      : ::Smartmatic::ConfigurationTypes::Type (),
        HideOfficial_ (HideOfficial, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideDemo_ (HideDemo, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideRecovery_ (HideRecovery, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideAudio_ (HideAudio, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideNonAudio_ (HideNonAudio, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HideCA_ (HideCA, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ActivatedCardStatisticsConfiguration::
      ActivatedCardStatisticsConfiguration (const ActivatedCardStatisticsConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        HideOfficial_ (x.HideOfficial_, f, this),
        HideDemo_ (x.HideDemo_, f, this),
        HideRecovery_ (x.HideRecovery_, f, this),
        HideAudio_ (x.HideAudio_, f, this),
        HideNonAudio_ (x.HideNonAudio_, f, this),
        HideCA_ (x.HideCA_, f, this)
      {
      }

      ActivatedCardStatisticsConfiguration::
      ActivatedCardStatisticsConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        HideOfficial_ (f, this),
        HideDemo_ (f, this),
        HideRecovery_ (f, this),
        HideAudio_ (f, this),
        HideNonAudio_ (f, this),
        HideCA_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ActivatedCardStatisticsConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // HideOfficial
          //
          if (n.name () == "HideOfficial" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideOfficial_.present ())
            {
              this->HideOfficial_.set (HideOfficialTraits::create (i, f, this));
              continue;
            }
          }

          // HideDemo
          //
          if (n.name () == "HideDemo" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideDemo_.present ())
            {
              this->HideDemo_.set (HideDemoTraits::create (i, f, this));
              continue;
            }
          }

          // HideRecovery
          //
          if (n.name () == "HideRecovery" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideRecovery_.present ())
            {
              this->HideRecovery_.set (HideRecoveryTraits::create (i, f, this));
              continue;
            }
          }

          // HideAudio
          //
          if (n.name () == "HideAudio" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideAudio_.present ())
            {
              this->HideAudio_.set (HideAudioTraits::create (i, f, this));
              continue;
            }
          }

          // HideNonAudio
          //
          if (n.name () == "HideNonAudio" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideNonAudio_.present ())
            {
              this->HideNonAudio_.set (HideNonAudioTraits::create (i, f, this));
              continue;
            }
          }

          // HideCA
          //
          if (n.name () == "HideCA" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HideCA_.present ())
            {
              this->HideCA_.set (HideCATraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!HideOfficial_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideOfficial",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HideDemo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideDemo",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HideRecovery_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideRecovery",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HideAudio_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideAudio",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HideNonAudio_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideNonAudio",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HideCA_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HideCA",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ActivatedCardStatisticsConfiguration* ActivatedCardStatisticsConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ActivatedCardStatisticsConfiguration (*this, f, c);
      }

      ActivatedCardStatisticsConfiguration::
      ~ActivatedCardStatisticsConfiguration ()
      {
      }

      bool
      operator== (const ActivatedCardStatisticsConfiguration& x, const ActivatedCardStatisticsConfiguration& y)
      {
        if (!(x.getHideOfficial () == y.getHideOfficial ()))
          return false;

        if (!(x.getHideDemo () == y.getHideDemo ()))
          return false;

        if (!(x.getHideRecovery () == y.getHideRecovery ()))
          return false;

        if (!(x.getHideAudio () == y.getHideAudio ()))
          return false;

        if (!(x.getHideNonAudio () == y.getHideNonAudio ()))
          return false;

        if (!(x.getHideCA () == y.getHideCA ()))
          return false;

        return true;
      }

      bool
      operator!= (const ActivatedCardStatisticsConfiguration& x, const ActivatedCardStatisticsConfiguration& y)
      {
        return !(x == y);
      }

      // VMInstallationWidgetConfiguration
      //

      VMInstallationWidgetConfiguration::
      VMInstallationWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Type_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VMInstallationWidgetConfiguration::
      VMInstallationWidgetConfiguration (const TypeType& Type,
                                         const ButtonsWidthType& ButtonsWidth,
                                         const ButtonsHeightType& ButtonsHeight)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Type_ (Type, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsWidth_ (ButtonsWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsHeight_ (ButtonsHeight, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VMInstallationWidgetConfiguration::
      VMInstallationWidgetConfiguration (const VMInstallationWidgetConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Type_ (x.Type_, f, this),
        ButtonsWidth_ (x.ButtonsWidth_, f, this),
        ButtonsHeight_ (x.ButtonsHeight_, f, this)
      {
      }

      VMInstallationWidgetConfiguration::
      VMInstallationWidgetConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Type_ (f, this),
        ButtonsWidth_ (f, this),
        ButtonsHeight_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VMInstallationWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Type
          //
          if (n.name () == "Type" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TypeType > r (
              TypeTraits::create (i, f, this));

            if (!Type_.present ())
            {
              this->Type_.set (r);
              continue;
            }
          }

          // ButtonsWidth
          //
          if (n.name () == "ButtonsWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonsWidth_.present ())
            {
              this->ButtonsWidth_.set (ButtonsWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonsHeight
          //
          if (n.name () == "ButtonsHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonsHeight_.present ())
            {
              this->ButtonsHeight_.set (ButtonsHeightTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Type_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Type",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VMInstallationWidgetConfiguration* VMInstallationWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VMInstallationWidgetConfiguration (*this, f, c);
      }

      VMInstallationWidgetConfiguration::
      ~VMInstallationWidgetConfiguration ()
      {
      }

      bool
      operator== (const VMInstallationWidgetConfiguration& x, const VMInstallationWidgetConfiguration& y)
      {
        if (!(x.getType () == y.getType ()))
          return false;

        if (!(x.getButtonsWidth () == y.getButtonsWidth ()))
          return false;

        if (!(x.getButtonsHeight () == y.getButtonsHeight ()))
          return false;

        return true;
      }

      bool
      operator!= (const VMInstallationWidgetConfiguration& x, const VMInstallationWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // VMInstallationWidgetTypeConfiguration
      //

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_VMInstallationWidgetTypeConfiguration_convert ();
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const ::xercesc::DOMAttr& a,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_VMInstallationWidgetTypeConfiguration_convert ();
      }

      VMInstallationWidgetTypeConfiguration::
      VMInstallationWidgetTypeConfiguration (const ::std::string& s,
                                             const ::xercesc::DOMElement* e,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_VMInstallationWidgetTypeConfiguration_convert ();
      }

      VMInstallationWidgetTypeConfiguration* VMInstallationWidgetTypeConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VMInstallationWidgetTypeConfiguration (*this, f, c);
      }

      VMInstallationWidgetTypeConfiguration::Value VMInstallationWidgetTypeConfiguration::
      _xsd_VMInstallationWidgetTypeConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VMInstallationWidgetTypeConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_VMInstallationWidgetTypeConfiguration_indexes_,
                          _xsd_VMInstallationWidgetTypeConfiguration_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_VMInstallationWidgetTypeConfiguration_indexes_ + 3 || _xsd_VMInstallationWidgetTypeConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const VMInstallationWidgetTypeConfiguration::
      _xsd_VMInstallationWidgetTypeConfiguration_literals_[3] =
      {
        "OnlyKeyWordXML",
        "OnlyTokenXML",
        "keywordAndTokenXML"
      };

      const VMInstallationWidgetTypeConfiguration::Value VMInstallationWidgetTypeConfiguration::
      _xsd_VMInstallationWidgetTypeConfiguration_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::VMInstallationWidgetTypeConfiguration::CONFIGURATION_ONLYKEYWORDXML,
        ::Smartmatic::SAES::Configuration::VMInstallationWidgetTypeConfiguration::CONFIGURATION_ONLYTOKENXML,
        ::Smartmatic::SAES::Configuration::VMInstallationWidgetTypeConfiguration::CONFIGURATION_KEYWORDANDTOKENXML
      };

      // ShowBeidEntryTypeConfiguration
      //

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_ShowBeidEntryTypeConfiguration_convert ();
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const ::xercesc::DOMAttr& a,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_ShowBeidEntryTypeConfiguration_convert ();
      }

      ShowBeidEntryTypeConfiguration::
      ShowBeidEntryTypeConfiguration (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_ShowBeidEntryTypeConfiguration_convert ();
      }

      ShowBeidEntryTypeConfiguration* ShowBeidEntryTypeConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ShowBeidEntryTypeConfiguration (*this, f, c);
      }

      ShowBeidEntryTypeConfiguration::Value ShowBeidEntryTypeConfiguration::
      _xsd_ShowBeidEntryTypeConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ShowBeidEntryTypeConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_ShowBeidEntryTypeConfiguration_indexes_,
                          _xsd_ShowBeidEntryTypeConfiguration_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_ShowBeidEntryTypeConfiguration_indexes_ + 3 || _xsd_ShowBeidEntryTypeConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const ShowBeidEntryTypeConfiguration::
      _xsd_ShowBeidEntryTypeConfiguration_literals_[3] =
      {
        "ShowWithSecurity",
        "NoShow",
        "Show"
      };

      const ShowBeidEntryTypeConfiguration::Value ShowBeidEntryTypeConfiguration::
      _xsd_ShowBeidEntryTypeConfiguration_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::ShowBeidEntryTypeConfiguration::CONFIGURATION_NOSHOW,
        ::Smartmatic::SAES::Configuration::ShowBeidEntryTypeConfiguration::CONFIGURATION_SHOW,
        ::Smartmatic::SAES::Configuration::ShowBeidEntryTypeConfiguration::CONFIGURATION_SHOWWITHSECURITY
      };

      // ElectionBlockStatusList
      //

      ElectionBlockStatusList::
      ElectionBlockStatusList ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ElectionStatus_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ElectionBlockStatusList::
      ElectionBlockStatusList (const ElectionBlockStatusList& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ElectionStatus_ (x.ElectionStatus_, f, this)
      {
      }

      ElectionBlockStatusList::
      ElectionBlockStatusList (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ElectionStatus_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ElectionBlockStatusList::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ElectionStatus
          //
          if (n.name () == "ElectionStatus" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ElectionStatusType > r (
              ElectionStatusTraits::create (i, f, this));

            this->ElectionStatus_.push_back (r);
            continue;
          }

          break;
        }
      }

      ElectionBlockStatusList* ElectionBlockStatusList::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ElectionBlockStatusList (*this, f, c);
      }

      ElectionBlockStatusList::
      ~ElectionBlockStatusList ()
      {
      }

      bool
      operator== (const ElectionBlockStatusList& x, const ElectionBlockStatusList& y)
      {
        if (!(x.getElectionStatus () == y.getElectionStatus ()))
          return false;

        return true;
      }

      bool
      operator!= (const ElectionBlockStatusList& x, const ElectionBlockStatusList& y)
      {
        return !(x == y);
      }

      // HelpConfiguration
      //

      HelpConfiguration::
      HelpConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ImageHelp_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PdfHelp_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseHelp_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      HelpConfiguration::
      HelpConfiguration (const ImageHelpType& ImageHelp,
                         const PdfHelpType& PdfHelp,
                         const TitleKeyType& TitleKey,
                         const UseHelpType& UseHelp)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ImageHelp_ (ImageHelp, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PdfHelp_ (PdfHelp, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleKey_ (TitleKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseHelp_ (UseHelp, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      HelpConfiguration::
      HelpConfiguration (const HelpConfiguration& x,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ImageHelp_ (x.ImageHelp_, f, this),
        PdfHelp_ (x.PdfHelp_, f, this),
        TitleKey_ (x.TitleKey_, f, this),
        UseHelp_ (x.UseHelp_, f, this)
      {
      }

      HelpConfiguration::
      HelpConfiguration (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ImageHelp_ (f, this),
        PdfHelp_ (f, this),
        TitleKey_ (f, this),
        UseHelp_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void HelpConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ImageHelp
          //
          if (n.name () == "ImageHelp" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ImageHelpType > r (
              ImageHelpTraits::create (i, f, this));

            if (!ImageHelp_.present ())
            {
              this->ImageHelp_.set (r);
              continue;
            }
          }

          // PdfHelp
          //
          if (n.name () == "PdfHelp" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PdfHelpType > r (
              PdfHelpTraits::create (i, f, this));

            if (!PdfHelp_.present ())
            {
              this->PdfHelp_.set (r);
              continue;
            }
          }

          // TitleKey
          //
          if (n.name () == "TitleKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleKeyType > r (
              TitleKeyTraits::create (i, f, this));

            if (!TitleKey_.present ())
            {
              this->TitleKey_.set (r);
              continue;
            }
          }

          // UseHelp
          //
          if (n.name () == "UseHelp" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseHelp_.present ())
            {
              this->UseHelp_.set (UseHelpTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ImageHelp_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ImageHelp",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PdfHelp_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PdfHelp",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseHelp_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseHelp",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      HelpConfiguration* HelpConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class HelpConfiguration (*this, f, c);
      }

      HelpConfiguration::
      ~HelpConfiguration ()
      {
      }

      bool
      operator== (const HelpConfiguration& x, const HelpConfiguration& y)
      {
        if (!(x.getImageHelp () == y.getImageHelp ()))
          return false;

        if (!(x.getPdfHelp () == y.getPdfHelp ()))
          return false;

        if (!(x.getTitleKey () == y.getTitleKey ()))
          return false;

        if (!(x.getUseHelp () == y.getUseHelp ()))
          return false;

        return true;
      }

      bool
      operator!= (const HelpConfiguration& x, const HelpConfiguration& y)
      {
        return !(x == y);
      }

      // WizardStateTimeLineConfiguration
      //

      WizardStateTimeLineConfiguration::
      WizardStateTimeLineConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NameKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DescriptionKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RelativeImagePath_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateTimeLineConfiguration::
      WizardStateTimeLineConfiguration (const NameKeyType& NameKey,
                                        const DescriptionKeyType& DescriptionKey,
                                        const RelativeImagePathType& RelativeImagePath)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NameKey_ (NameKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DescriptionKey_ (DescriptionKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RelativeImagePath_ (RelativeImagePath, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateTimeLineConfiguration::
      WizardStateTimeLineConfiguration (const WizardStateTimeLineConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NameKey_ (x.NameKey_, f, this),
        DescriptionKey_ (x.DescriptionKey_, f, this),
        RelativeImagePath_ (x.RelativeImagePath_, f, this)
      {
      }

      WizardStateTimeLineConfiguration::
      WizardStateTimeLineConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NameKey_ (f, this),
        DescriptionKey_ (f, this),
        RelativeImagePath_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void WizardStateTimeLineConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NameKey
          //
          if (n.name () == "NameKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NameKeyType > r (
              NameKeyTraits::create (i, f, this));

            if (!NameKey_.present ())
            {
              this->NameKey_.set (r);
              continue;
            }
          }

          // DescriptionKey
          //
          if (n.name () == "DescriptionKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DescriptionKeyType > r (
              DescriptionKeyTraits::create (i, f, this));

            if (!DescriptionKey_.present ())
            {
              this->DescriptionKey_.set (r);
              continue;
            }
          }

          // RelativeImagePath
          //
          if (n.name () == "RelativeImagePath" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RelativeImagePathType > r (
              RelativeImagePathTraits::create (i, f, this));

            if (!RelativeImagePath_.present ())
            {
              this->RelativeImagePath_.set (r);
              continue;
            }
          }

          break;
        }

        if (!NameKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NameKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DescriptionKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DescriptionKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RelativeImagePath_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RelativeImagePath",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      WizardStateTimeLineConfiguration* WizardStateTimeLineConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class WizardStateTimeLineConfiguration (*this, f, c);
      }

      WizardStateTimeLineConfiguration::
      ~WizardStateTimeLineConfiguration ()
      {
      }

      bool
      operator== (const WizardStateTimeLineConfiguration& x, const WizardStateTimeLineConfiguration& y)
      {
        if (!(x.getNameKey () == y.getNameKey ()))
          return false;

        if (!(x.getDescriptionKey () == y.getDescriptionKey ()))
          return false;

        if (!(x.getRelativeImagePath () == y.getRelativeImagePath ()))
          return false;

        return true;
      }

      bool
      operator!= (const WizardStateTimeLineConfiguration& x, const WizardStateTimeLineConfiguration& y)
      {
        return !(x == y);
      }

      // WizardStateToolboxConfiguration
      //

      WizardStateToolboxConfiguration::
      WizardStateToolboxConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ToolboxElementWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolboxElementHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateToolboxConfiguration::
      WizardStateToolboxConfiguration (const ToolboxElementWidthType& ToolboxElementWidth,
                                       const ToolboxElementHeightType& ToolboxElementHeight)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ToolboxElementWidth_ (ToolboxElementWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolboxElementHeight_ (ToolboxElementHeight, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateToolboxConfiguration::
      WizardStateToolboxConfiguration (const WizardStateToolboxConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ToolboxElementWidth_ (x.ToolboxElementWidth_, f, this),
        ToolboxElementHeight_ (x.ToolboxElementHeight_, f, this)
      {
      }

      WizardStateToolboxConfiguration::
      WizardStateToolboxConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ToolboxElementWidth_ (f, this),
        ToolboxElementHeight_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void WizardStateToolboxConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ToolboxElementWidth
          //
          if (n.name () == "ToolboxElementWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ToolboxElementWidth_.present ())
            {
              this->ToolboxElementWidth_.set (ToolboxElementWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ToolboxElementHeight
          //
          if (n.name () == "ToolboxElementHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ToolboxElementHeight_.present ())
            {
              this->ToolboxElementHeight_.set (ToolboxElementHeightTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ToolboxElementWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ToolboxElementWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ToolboxElementHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ToolboxElementHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      WizardStateToolboxConfiguration* WizardStateToolboxConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class WizardStateToolboxConfiguration (*this, f, c);
      }

      WizardStateToolboxConfiguration::
      ~WizardStateToolboxConfiguration ()
      {
      }

      bool
      operator== (const WizardStateToolboxConfiguration& x, const WizardStateToolboxConfiguration& y)
      {
        if (!(x.getToolboxElementWidth () == y.getToolboxElementWidth ()))
          return false;

        if (!(x.getToolboxElementHeight () == y.getToolboxElementHeight ()))
          return false;

        return true;
      }

      bool
      operator!= (const WizardStateToolboxConfiguration& x, const WizardStateToolboxConfiguration& y)
      {
        return !(x == y);
      }

      // WizardStateHelpConfiguration
      //

      WizardStateHelpConfiguration::
      WizardStateHelpConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        TitleKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContentKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RelativeImagePath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Help_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateHelpConfiguration::
      WizardStateHelpConfiguration (const TitleKeyType& TitleKey,
                                    const ContentKeyType& ContentKey,
                                    const RelativeImagePathType& RelativeImagePath,
                                    const HelpType& Help)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TitleKey_ (TitleKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContentKey_ (ContentKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RelativeImagePath_ (RelativeImagePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Help_ (Help, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateHelpConfiguration::
      WizardStateHelpConfiguration (const TitleKeyType& TitleKey,
                                    const ContentKeyType& ContentKey,
                                    const RelativeImagePathType& RelativeImagePath,
                                    ::std::auto_ptr< HelpType >& Help)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TitleKey_ (TitleKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContentKey_ (ContentKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RelativeImagePath_ (RelativeImagePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Help_ (Help, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WizardStateHelpConfiguration::
      WizardStateHelpConfiguration (const WizardStateHelpConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        TitleKey_ (x.TitleKey_, f, this),
        ContentKey_ (x.ContentKey_, f, this),
        RelativeImagePath_ (x.RelativeImagePath_, f, this),
        Help_ (x.Help_, f, this)
      {
      }

      WizardStateHelpConfiguration::
      WizardStateHelpConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        TitleKey_ (f, this),
        ContentKey_ (f, this),
        RelativeImagePath_ (f, this),
        Help_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void WizardStateHelpConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TitleKey
          //
          if (n.name () == "TitleKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleKeyType > r (
              TitleKeyTraits::create (i, f, this));

            if (!TitleKey_.present ())
            {
              this->TitleKey_.set (r);
              continue;
            }
          }

          // ContentKey
          //
          if (n.name () == "ContentKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ContentKeyType > r (
              ContentKeyTraits::create (i, f, this));

            if (!ContentKey_.present ())
            {
              this->ContentKey_.set (r);
              continue;
            }
          }

          // RelativeImagePath
          //
          if (n.name () == "RelativeImagePath" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RelativeImagePathType > r (
              RelativeImagePathTraits::create (i, f, this));

            if (!RelativeImagePath_.present ())
            {
              this->RelativeImagePath_.set (r);
              continue;
            }
          }

          // Help
          //
          if (n.name () == "Help" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HelpType > r (
              HelpTraits::create (i, f, this));

            if (!Help_.present ())
            {
              this->Help_.set (r);
              continue;
            }
          }

          break;
        }

        if (!TitleKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContentKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContentKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RelativeImagePath_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RelativeImagePath",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Help_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Help",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      WizardStateHelpConfiguration* WizardStateHelpConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class WizardStateHelpConfiguration (*this, f, c);
      }

      WizardStateHelpConfiguration::
      ~WizardStateHelpConfiguration ()
      {
      }

      bool
      operator== (const WizardStateHelpConfiguration& x, const WizardStateHelpConfiguration& y)
      {
        if (!(x.getTitleKey () == y.getTitleKey ()))
          return false;

        if (!(x.getContentKey () == y.getContentKey ()))
          return false;

        if (!(x.getRelativeImagePath () == y.getRelativeImagePath ()))
          return false;

        if (!(x.getHelp () == y.getHelp ()))
          return false;

        return true;
      }

      bool
      operator!= (const WizardStateHelpConfiguration& x, const WizardStateHelpConfiguration& y)
      {
        return !(x == y);
      }

      // FunctionalityWizardStateConfiguration
      //

      FunctionalityWizardStateConfiguration::
      FunctionalityWizardStateConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrincipalMenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolbarMenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StateNameKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StateDescriptionKey_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ProcessStatus_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StateHelp_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeLineConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolboxConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHelpLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HelpLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalityWizardStateConfiguration::
      FunctionalityWizardStateConfiguration (const StateNameKeyType& StateNameKey,
                                             const StateDescriptionKeyType& StateDescriptionKey,
                                             const ProcessStatusType& ProcessStatus,
                                             const StateHelpType& StateHelp,
                                             const TimeLineConfigurationType& TimeLineConfiguration,
                                             const ToolboxConfigurationType& ToolboxConfiguration,
                                             const ButtonsLabelConfigurationType& ButtonsLabelConfiguration,
                                             const TitleHelpLabelConfigurationType& TitleHelpLabelConfiguration,
                                             const HelpLabelConfigurationType& HelpLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrincipalMenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolbarMenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StateNameKey_ (StateNameKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StateDescriptionKey_ (StateDescriptionKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ProcessStatus_ (ProcessStatus, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StateHelp_ (StateHelp, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeLineConfiguration_ (TimeLineConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolboxConfiguration_ (ToolboxConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsLabelConfiguration_ (ButtonsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHelpLabelConfiguration_ (TitleHelpLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HelpLabelConfiguration_ (HelpLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalityWizardStateConfiguration::
      FunctionalityWizardStateConfiguration (const StateNameKeyType& StateNameKey,
                                             const StateDescriptionKeyType& StateDescriptionKey,
                                             const ProcessStatusType& ProcessStatus,
                                             ::std::auto_ptr< StateHelpType >& StateHelp,
                                             ::std::auto_ptr< TimeLineConfigurationType >& TimeLineConfiguration,
                                             ::std::auto_ptr< ToolboxConfigurationType >& ToolboxConfiguration,
                                             ::std::auto_ptr< ButtonsLabelConfigurationType >& ButtonsLabelConfiguration,
                                             ::std::auto_ptr< TitleHelpLabelConfigurationType >& TitleHelpLabelConfiguration,
                                             ::std::auto_ptr< HelpLabelConfigurationType >& HelpLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrincipalMenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolbarMenuOptions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StateNameKey_ (StateNameKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StateDescriptionKey_ (StateDescriptionKey, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ProcessStatus_ (ProcessStatus, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StateHelp_ (StateHelp, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeLineConfiguration_ (TimeLineConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ToolboxConfiguration_ (ToolboxConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsLabelConfiguration_ (ButtonsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHelpLabelConfiguration_ (TitleHelpLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HelpLabelConfiguration_ (HelpLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalityWizardStateConfiguration::
      FunctionalityWizardStateConfiguration (const FunctionalityWizardStateConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PrincipalMenuOptions_ (x.PrincipalMenuOptions_, f, this),
        ToolbarMenuOptions_ (x.ToolbarMenuOptions_, f, this),
        StateNameKey_ (x.StateNameKey_, f, this),
        StateDescriptionKey_ (x.StateDescriptionKey_, f, this),
        ProcessStatus_ (x.ProcessStatus_, f, this),
        StateHelp_ (x.StateHelp_, f, this),
        TimeLineConfiguration_ (x.TimeLineConfiguration_, f, this),
        ToolboxConfiguration_ (x.ToolboxConfiguration_, f, this),
        ButtonsLabelConfiguration_ (x.ButtonsLabelConfiguration_, f, this),
        TitleHelpLabelConfiguration_ (x.TitleHelpLabelConfiguration_, f, this),
        HelpLabelConfiguration_ (x.HelpLabelConfiguration_, f, this)
      {
      }

      FunctionalityWizardStateConfiguration::
      FunctionalityWizardStateConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PrincipalMenuOptions_ (f, this),
        ToolbarMenuOptions_ (f, this),
        StateNameKey_ (f, this),
        StateDescriptionKey_ (f, this),
        ProcessStatus_ (f, this),
        StateHelp_ (f, this),
        TimeLineConfiguration_ (f, this),
        ToolboxConfiguration_ (f, this),
        ButtonsLabelConfiguration_ (f, this),
        TitleHelpLabelConfiguration_ (f, this),
        HelpLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FunctionalityWizardStateConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PrincipalMenuOptions
          //
          if (n.name () == "PrincipalMenuOptions" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PrincipalMenuOptionsType > r (
              PrincipalMenuOptionsTraits::create (i, f, this));

            this->PrincipalMenuOptions_.push_back (r);
            continue;
          }

          // ToolbarMenuOptions
          //
          if (n.name () == "ToolbarMenuOptions" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ToolbarMenuOptionsType > r (
              ToolbarMenuOptionsTraits::create (i, f, this));

            this->ToolbarMenuOptions_.push_back (r);
            continue;
          }

          // StateNameKey
          //
          if (n.name () == "StateNameKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StateNameKeyType > r (
              StateNameKeyTraits::create (i, f, this));

            if (!StateNameKey_.present ())
            {
              this->StateNameKey_.set (r);
              continue;
            }
          }

          // StateDescriptionKey
          //
          if (n.name () == "StateDescriptionKey" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StateDescriptionKeyType > r (
              StateDescriptionKeyTraits::create (i, f, this));

            if (!StateDescriptionKey_.present ())
            {
              this->StateDescriptionKey_.set (r);
              continue;
            }
          }

          // ProcessStatus
          //
          if (n.name () == "ProcessStatus" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ProcessStatusType > r (
              ProcessStatusTraits::create (i, f, this));

            if (!ProcessStatus_.present ())
            {
              this->ProcessStatus_.set (r);
              continue;
            }
          }

          // StateHelp
          //
          if (n.name () == "StateHelp" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StateHelpType > r (
              StateHelpTraits::create (i, f, this));

            if (!StateHelp_.present ())
            {
              this->StateHelp_.set (r);
              continue;
            }
          }

          // TimeLineConfiguration
          //
          if (n.name () == "TimeLineConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TimeLineConfigurationType > r (
              TimeLineConfigurationTraits::create (i, f, this));

            if (!TimeLineConfiguration_.present ())
            {
              this->TimeLineConfiguration_.set (r);
              continue;
            }
          }

          // ToolboxConfiguration
          //
          if (n.name () == "ToolboxConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ToolboxConfigurationType > r (
              ToolboxConfigurationTraits::create (i, f, this));

            if (!ToolboxConfiguration_.present ())
            {
              this->ToolboxConfiguration_.set (r);
              continue;
            }
          }

          // ButtonsLabelConfiguration
          //
          if (n.name () == "ButtonsLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonsLabelConfigurationType > r (
              ButtonsLabelConfigurationTraits::create (i, f, this));

            if (!ButtonsLabelConfiguration_.present ())
            {
              this->ButtonsLabelConfiguration_.set (r);
              continue;
            }
          }

          // TitleHelpLabelConfiguration
          //
          if (n.name () == "TitleHelpLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleHelpLabelConfigurationType > r (
              TitleHelpLabelConfigurationTraits::create (i, f, this));

            if (!TitleHelpLabelConfiguration_.present ())
            {
              this->TitleHelpLabelConfiguration_.set (r);
              continue;
            }
          }

          // HelpLabelConfiguration
          //
          if (n.name () == "HelpLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HelpLabelConfigurationType > r (
              HelpLabelConfigurationTraits::create (i, f, this));

            if (!HelpLabelConfiguration_.present ())
            {
              this->HelpLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!StateNameKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StateNameKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StateDescriptionKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StateDescriptionKey",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ProcessStatus_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ProcessStatus",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StateHelp_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StateHelp",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeLineConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeLineConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ToolboxConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ToolboxConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleHelpLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleHelpLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HelpLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HelpLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      FunctionalityWizardStateConfiguration* FunctionalityWizardStateConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FunctionalityWizardStateConfiguration (*this, f, c);
      }

      FunctionalityWizardStateConfiguration::
      ~FunctionalityWizardStateConfiguration ()
      {
      }

      bool
      operator== (const FunctionalityWizardStateConfiguration& x, const FunctionalityWizardStateConfiguration& y)
      {
        if (!(x.getPrincipalMenuOptions () == y.getPrincipalMenuOptions ()))
          return false;

        if (!(x.getToolbarMenuOptions () == y.getToolbarMenuOptions ()))
          return false;

        if (!(x.getStateNameKey () == y.getStateNameKey ()))
          return false;

        if (!(x.getStateDescriptionKey () == y.getStateDescriptionKey ()))
          return false;

        if (!(x.getProcessStatus () == y.getProcessStatus ()))
          return false;

        if (!(x.getStateHelp () == y.getStateHelp ()))
          return false;

        if (!(x.getTimeLineConfiguration () == y.getTimeLineConfiguration ()))
          return false;

        if (!(x.getToolboxConfiguration () == y.getToolboxConfiguration ()))
          return false;

        if (!(x.getButtonsLabelConfiguration () == y.getButtonsLabelConfiguration ()))
          return false;

        if (!(x.getTitleHelpLabelConfiguration () == y.getTitleHelpLabelConfiguration ()))
          return false;

        if (!(x.getHelpLabelConfiguration () == y.getHelpLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const FunctionalityWizardStateConfiguration& x, const FunctionalityWizardStateConfiguration& y)
      {
        return !(x == y);
      }

      // FunctionalityWizardFlowConfiguration
      //

      FunctionalityWizardFlowConfiguration::
      FunctionalityWizardFlowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        WizardStatesConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalityWizardFlowConfiguration::
      FunctionalityWizardFlowConfiguration (const FunctionalityWizardFlowConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        WizardStatesConfiguration_ (x.WizardStatesConfiguration_, f, this)
      {
      }

      FunctionalityWizardFlowConfiguration::
      FunctionalityWizardFlowConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        WizardStatesConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FunctionalityWizardFlowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // WizardStatesConfiguration
          //
          if (n.name () == "WizardStatesConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< WizardStatesConfigurationType > r (
              WizardStatesConfigurationTraits::create (i, f, this));

            this->WizardStatesConfiguration_.push_back (r);
            continue;
          }

          break;
        }
      }

      FunctionalityWizardFlowConfiguration* FunctionalityWizardFlowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FunctionalityWizardFlowConfiguration (*this, f, c);
      }

      FunctionalityWizardFlowConfiguration::
      ~FunctionalityWizardFlowConfiguration ()
      {
      }

      bool
      operator== (const FunctionalityWizardFlowConfiguration& x, const FunctionalityWizardFlowConfiguration& y)
      {
        if (!(x.getWizardStatesConfiguration () == y.getWizardStatesConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const FunctionalityWizardFlowConfiguration& x, const FunctionalityWizardFlowConfiguration& y)
      {
        return !(x == y);
      }

      // NecessaryDevicesConfiguration
      //

      NecessaryDevicesConfiguration::
      NecessaryDevicesConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        DeviceConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      NecessaryDevicesConfiguration::
      NecessaryDevicesConfiguration (const NecessaryDevicesConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        DeviceConfiguration_ (x.DeviceConfiguration_, f, this)
      {
      }

      NecessaryDevicesConfiguration::
      NecessaryDevicesConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        DeviceConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void NecessaryDevicesConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DeviceConfiguration
          //
          if (n.name () == "DeviceConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DeviceConfigurationType > r (
              DeviceConfigurationTraits::create (i, f, this));

            this->DeviceConfiguration_.push_back (r);
            continue;
          }

          break;
        }
      }

      NecessaryDevicesConfiguration* NecessaryDevicesConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class NecessaryDevicesConfiguration (*this, f, c);
      }

      NecessaryDevicesConfiguration::
      ~NecessaryDevicesConfiguration ()
      {
      }

      bool
      operator== (const NecessaryDevicesConfiguration& x, const NecessaryDevicesConfiguration& y)
      {
        if (!(x.getDeviceConfiguration () == y.getDeviceConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const NecessaryDevicesConfiguration& x, const NecessaryDevicesConfiguration& y)
      {
        return !(x == y);
      }

      // DeviceConfiguration
      //

      DeviceConfiguration::
      DeviceConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_DeviceConfiguration_convert ();
      }

      DeviceConfiguration::
      DeviceConfiguration (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_DeviceConfiguration_convert ();
      }

      DeviceConfiguration::
      DeviceConfiguration (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_DeviceConfiguration_convert ();
      }

      DeviceConfiguration* DeviceConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DeviceConfiguration (*this, f, c);
      }

      DeviceConfiguration::Value DeviceConfiguration::
      _xsd_DeviceConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DeviceConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_DeviceConfiguration_indexes_,
                          _xsd_DeviceConfiguration_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_DeviceConfiguration_indexes_ + 3 || _xsd_DeviceConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const DeviceConfiguration::
      _xsd_DeviceConfiguration_literals_[3] =
      {
        "barcode",
        "smartcard",
        "printer"
      };

      const DeviceConfiguration::Value DeviceConfiguration::
      _xsd_DeviceConfiguration_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::DeviceConfiguration::CONFIGURATION_BARCODE,
        ::Smartmatic::SAES::Configuration::DeviceConfiguration::CONFIGURATION_PRINTER,
        ::Smartmatic::SAES::Configuration::DeviceConfiguration::CONFIGURATION_SMARTCARD
      };

      // MemoryBlock
      //

      MemoryBlock::
      MemoryBlock (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_MemoryBlock_convert ();
      }

      MemoryBlock::
      MemoryBlock (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_MemoryBlock_convert ();
      }

      MemoryBlock::
      MemoryBlock (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_MemoryBlock_convert ();
      }

      MemoryBlock* MemoryBlock::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class MemoryBlock (*this, f, c);
      }

      MemoryBlock::Value MemoryBlock::
      _xsd_MemoryBlock_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MemoryBlock_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_MemoryBlock_indexes_,
                          _xsd_MemoryBlock_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_MemoryBlock_indexes_ + 3 || _xsd_MemoryBlock_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const MemoryBlock::
      _xsd_MemoryBlock_literals_[3] =
      {
        "Block",
        "Suspend",
        "Allow"
      };

      const MemoryBlock::Value MemoryBlock::
      _xsd_MemoryBlock_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::MemoryBlock::CONFIGURATION_ALLOW,
        ::Smartmatic::SAES::Configuration::MemoryBlock::CONFIGURATION_BLOCK,
        ::Smartmatic::SAES::Configuration::MemoryBlock::CONFIGURATION_SUSPEND
      };

      // ReferendumConfiguration
      //

      ReferendumConfiguration::
      ReferendumConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotsLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsVertical_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxTopPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxLeftPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBackButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullOption_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ReferendumConfiguration::
      ReferendumConfiguration (const EnableClickType& EnableClick,
                               const HeaderLabelConfigurationType& HeaderLabelConfiguration,
                               const BottomLabelConfigurationType& BottomLabelConfiguration,
                               const QuestionLabelConfigurationType& QuestionLabelConfiguration,
                               const BallotsLabelConfigurationType& BallotsLabelConfiguration,
                               const FrameBottomHeightType& FrameBottomHeight,
                               const QuestionWidthType& QuestionWidth,
                               const QuestionHeightType& QuestionHeight,
                               const ButtonsVerticalType& ButtonsVertical,
                               const BallotBoxTopPaddingType& BallotBoxTopPadding,
                               const BallotBoxLeftPaddingType& BallotBoxLeftPadding,
                               const BallotBoxSpacingType& BallotBoxSpacing,
                               const BallotWidthType& BallotWidth,
                               const BallotHeightType& BallotHeight,
                               const ShowBackButtonType& ShowBackButton,
                               const ShowNullOptionType& ShowNullOption)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (EnableClick, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionLabelConfiguration_ (QuestionLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotsLabelConfiguration_ (BallotsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (FrameBottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWidth_ (QuestionWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionHeight_ (QuestionHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsVertical_ (ButtonsVertical, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxTopPadding_ (BallotBoxTopPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxLeftPadding_ (BallotBoxLeftPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxSpacing_ (BallotBoxSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotWidth_ (BallotWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotHeight_ (BallotHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBackButton_ (ShowBackButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullOption_ (ShowNullOption, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ReferendumConfiguration::
      ReferendumConfiguration (const EnableClickType& EnableClick,
                               ::std::auto_ptr< HeaderLabelConfigurationType >& HeaderLabelConfiguration,
                               ::std::auto_ptr< BottomLabelConfigurationType >& BottomLabelConfiguration,
                               ::std::auto_ptr< QuestionLabelConfigurationType >& QuestionLabelConfiguration,
                               ::std::auto_ptr< BallotsLabelConfigurationType >& BallotsLabelConfiguration,
                               const FrameBottomHeightType& FrameBottomHeight,
                               const QuestionWidthType& QuestionWidth,
                               const QuestionHeightType& QuestionHeight,
                               const ButtonsVerticalType& ButtonsVertical,
                               const BallotBoxTopPaddingType& BallotBoxTopPadding,
                               const BallotBoxLeftPaddingType& BallotBoxLeftPadding,
                               const BallotBoxSpacingType& BallotBoxSpacing,
                               const BallotWidthType& BallotWidth,
                               const BallotHeightType& BallotHeight,
                               const ShowBackButtonType& ShowBackButton,
                               const ShowNullOptionType& ShowNullOption)
      : ::Smartmatic::ConfigurationTypes::Type (),
        EnableClick_ (EnableClick, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderLabelConfiguration_ (HeaderLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomLabelConfiguration_ (BottomLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionLabelConfiguration_ (QuestionLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotsLabelConfiguration_ (BallotsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FrameBottomHeight_ (FrameBottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionWidth_ (QuestionWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionHeight_ (QuestionHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsVertical_ (ButtonsVertical, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxTopPadding_ (BallotBoxTopPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxLeftPadding_ (BallotBoxLeftPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotBoxSpacing_ (BallotBoxSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotWidth_ (BallotWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotHeight_ (BallotHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBackButton_ (ShowBackButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowNullOption_ (ShowNullOption, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ReferendumConfiguration::
      ReferendumConfiguration (const ReferendumConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        EnableClick_ (x.EnableClick_, f, this),
        HeaderLabelConfiguration_ (x.HeaderLabelConfiguration_, f, this),
        BottomLabelConfiguration_ (x.BottomLabelConfiguration_, f, this),
        QuestionLabelConfiguration_ (x.QuestionLabelConfiguration_, f, this),
        BallotsLabelConfiguration_ (x.BallotsLabelConfiguration_, f, this),
        FrameBottomHeight_ (x.FrameBottomHeight_, f, this),
        QuestionWidth_ (x.QuestionWidth_, f, this),
        QuestionHeight_ (x.QuestionHeight_, f, this),
        ButtonsVertical_ (x.ButtonsVertical_, f, this),
        BallotBoxTopPadding_ (x.BallotBoxTopPadding_, f, this),
        BallotBoxLeftPadding_ (x.BallotBoxLeftPadding_, f, this),
        BallotBoxSpacing_ (x.BallotBoxSpacing_, f, this),
        BallotWidth_ (x.BallotWidth_, f, this),
        BallotHeight_ (x.BallotHeight_, f, this),
        ShowBackButton_ (x.ShowBackButton_, f, this),
        ShowNullOption_ (x.ShowNullOption_, f, this)
      {
      }

      ReferendumConfiguration::
      ReferendumConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        EnableClick_ (f, this),
        HeaderLabelConfiguration_ (f, this),
        BottomLabelConfiguration_ (f, this),
        QuestionLabelConfiguration_ (f, this),
        BallotsLabelConfiguration_ (f, this),
        FrameBottomHeight_ (f, this),
        QuestionWidth_ (f, this),
        QuestionHeight_ (f, this),
        ButtonsVertical_ (f, this),
        BallotBoxTopPadding_ (f, this),
        BallotBoxLeftPadding_ (f, this),
        BallotBoxSpacing_ (f, this),
        BallotWidth_ (f, this),
        BallotHeight_ (f, this),
        ShowBackButton_ (f, this),
        ShowNullOption_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ReferendumConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EnableClick
          //
          if (n.name () == "EnableClick" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EnableClick_.present ())
            {
              this->EnableClick_.set (EnableClickTraits::create (i, f, this));
              continue;
            }
          }

          // HeaderLabelConfiguration
          //
          if (n.name () == "HeaderLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HeaderLabelConfigurationType > r (
              HeaderLabelConfigurationTraits::create (i, f, this));

            if (!HeaderLabelConfiguration_.present ())
            {
              this->HeaderLabelConfiguration_.set (r);
              continue;
            }
          }

          // BottomLabelConfiguration
          //
          if (n.name () == "BottomLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BottomLabelConfigurationType > r (
              BottomLabelConfigurationTraits::create (i, f, this));

            if (!BottomLabelConfiguration_.present ())
            {
              this->BottomLabelConfiguration_.set (r);
              continue;
            }
          }

          // QuestionLabelConfiguration
          //
          if (n.name () == "QuestionLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< QuestionLabelConfigurationType > r (
              QuestionLabelConfigurationTraits::create (i, f, this));

            if (!QuestionLabelConfiguration_.present ())
            {
              this->QuestionLabelConfiguration_.set (r);
              continue;
            }
          }

          // BallotsLabelConfiguration
          //
          if (n.name () == "BallotsLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotsLabelConfigurationType > r (
              BallotsLabelConfigurationTraits::create (i, f, this));

            if (!BallotsLabelConfiguration_.present ())
            {
              this->BallotsLabelConfiguration_.set (r);
              continue;
            }
          }

          // FrameBottomHeight
          //
          if (n.name () == "FrameBottomHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FrameBottomHeight_.present ())
            {
              this->FrameBottomHeight_.set (FrameBottomHeightTraits::create (i, f, this));
              continue;
            }
          }

          // QuestionWidth
          //
          if (n.name () == "QuestionWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!QuestionWidth_.present ())
            {
              this->QuestionWidth_.set (QuestionWidthTraits::create (i, f, this));
              continue;
            }
          }

          // QuestionHeight
          //
          if (n.name () == "QuestionHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!QuestionHeight_.present ())
            {
              this->QuestionHeight_.set (QuestionHeightTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonsVertical
          //
          if (n.name () == "ButtonsVertical" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonsVertical_.present ())
            {
              this->ButtonsVertical_.set (ButtonsVerticalTraits::create (i, f, this));
              continue;
            }
          }

          // BallotBoxTopPadding
          //
          if (n.name () == "BallotBoxTopPadding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotBoxTopPadding_.present ())
            {
              this->BallotBoxTopPadding_.set (BallotBoxTopPaddingTraits::create (i, f, this));
              continue;
            }
          }

          // BallotBoxLeftPadding
          //
          if (n.name () == "BallotBoxLeftPadding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotBoxLeftPadding_.present ())
            {
              this->BallotBoxLeftPadding_.set (BallotBoxLeftPaddingTraits::create (i, f, this));
              continue;
            }
          }

          // BallotBoxSpacing
          //
          if (n.name () == "BallotBoxSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotBoxSpacing_.present ())
            {
              this->BallotBoxSpacing_.set (BallotBoxSpacingTraits::create (i, f, this));
              continue;
            }
          }

          // BallotWidth
          //
          if (n.name () == "BallotWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotWidth_.present ())
            {
              this->BallotWidth_.set (BallotWidthTraits::create (i, f, this));
              continue;
            }
          }

          // BallotHeight
          //
          if (n.name () == "BallotHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BallotHeight_.present ())
            {
              this->BallotHeight_.set (BallotHeightTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBackButton
          //
          if (n.name () == "ShowBackButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBackButton_.present ())
            {
              this->ShowBackButton_.set (ShowBackButtonTraits::create (i, f, this));
              continue;
            }
          }

          // ShowNullOption
          //
          if (n.name () == "ShowNullOption" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowNullOption_.present ())
            {
              this->ShowNullOption_.set (ShowNullOptionTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!EnableClick_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EnableClick",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HeaderLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BottomLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotsLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotsLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FrameBottomHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FrameBottomHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsVertical_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsVertical",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotBoxTopPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotBoxTopPadding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotBoxLeftPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotBoxLeftPadding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotBoxSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotBoxSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBackButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBackButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowNullOption_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowNullOption",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ReferendumConfiguration* ReferendumConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ReferendumConfiguration (*this, f, c);
      }

      ReferendumConfiguration::
      ~ReferendumConfiguration ()
      {
      }

      bool
      operator== (const ReferendumConfiguration& x, const ReferendumConfiguration& y)
      {
        if (!(x.getEnableClick () == y.getEnableClick ()))
          return false;

        if (!(x.getHeaderLabelConfiguration () == y.getHeaderLabelConfiguration ()))
          return false;

        if (!(x.getBottomLabelConfiguration () == y.getBottomLabelConfiguration ()))
          return false;

        if (!(x.getQuestionLabelConfiguration () == y.getQuestionLabelConfiguration ()))
          return false;

        if (!(x.getBallotsLabelConfiguration () == y.getBallotsLabelConfiguration ()))
          return false;

        if (!(x.getFrameBottomHeight () == y.getFrameBottomHeight ()))
          return false;

        if (!(x.getQuestionWidth () == y.getQuestionWidth ()))
          return false;

        if (!(x.getQuestionHeight () == y.getQuestionHeight ()))
          return false;

        if (!(x.getButtonsVertical () == y.getButtonsVertical ()))
          return false;

        if (!(x.getBallotBoxTopPadding () == y.getBallotBoxTopPadding ()))
          return false;

        if (!(x.getBallotBoxLeftPadding () == y.getBallotBoxLeftPadding ()))
          return false;

        if (!(x.getBallotBoxSpacing () == y.getBallotBoxSpacing ()))
          return false;

        if (!(x.getBallotWidth () == y.getBallotWidth ()))
          return false;

        if (!(x.getBallotHeight () == y.getBallotHeight ()))
          return false;

        if (!(x.getShowBackButton () == y.getShowBackButton ()))
          return false;

        if (!(x.getShowNullOption () == y.getShowNullOption ()))
          return false;

        return true;
      }

      bool
      operator!= (const ReferendumConfiguration& x, const ReferendumConfiguration& y)
      {
        return !(x == y);
      }

      // PollingCardConfiguration
      //

      PollingCardConfiguration::
      PollingCardConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstallationWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstallationWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EndVotingExperienceWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedCardGeneratorFunctionality_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardGeneratorFunctionality_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RecoveryCardGeneratorFunctionality_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteProcessDemoFunctionality_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BEIDCardWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivationStatsWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WaitingCardWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartCardReaderDiagnosisWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachineInstallationWidgetInsert_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachineInstallationWidgetExtract_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollingCardConfiguration::
      PollingCardConfiguration (const PMInstallationWindowType& PMInstallationWindow,
                                const VMInstallationWindowType& VMInstallationWindow,
                                const VotingExperienceWindowType& VotingExperienceWindow,
                                const EndVotingExperienceWindowType& EndVotingExperienceWindow,
                                const AssistedCardGeneratorFunctionalityType& AssistedCardGeneratorFunctionality,
                                const CardGeneratorFunctionalityType& CardGeneratorFunctionality,
                                const RecoveryCardGeneratorFunctionalityType& RecoveryCardGeneratorFunctionality,
                                const VoteProcessDemoFunctionalityType& VoteProcessDemoFunctionality,
                                const BEIDCardWidgetType& BEIDCardWidget,
                                const ActivationStatsWidgetType& ActivationStatsWidget,
                                const WaitingCardWidgetType& WaitingCardWidget,
                                const SmartCardReaderDiagnosisWidgetType& SmartCardReaderDiagnosisWidget,
                                const VotingMachineInstallationWidgetInsertType& VotingMachineInstallationWidgetInsert,
                                const VotingMachineInstallationWidgetExtractType& VotingMachineInstallationWidgetExtract)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstallationWindow_ (PMInstallationWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstallationWindow_ (VMInstallationWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindow_ (VotingExperienceWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EndVotingExperienceWindow_ (EndVotingExperienceWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedCardGeneratorFunctionality_ (AssistedCardGeneratorFunctionality, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardGeneratorFunctionality_ (CardGeneratorFunctionality, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RecoveryCardGeneratorFunctionality_ (RecoveryCardGeneratorFunctionality, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteProcessDemoFunctionality_ (VoteProcessDemoFunctionality, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BEIDCardWidget_ (BEIDCardWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivationStatsWidget_ (ActivationStatsWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WaitingCardWidget_ (WaitingCardWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartCardReaderDiagnosisWidget_ (SmartCardReaderDiagnosisWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachineInstallationWidgetInsert_ (VotingMachineInstallationWidgetInsert, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingMachineInstallationWidgetExtract_ (VotingMachineInstallationWidgetExtract, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollingCardConfiguration::
      PollingCardConfiguration (const PollingCardConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PMInstallationWindow_ (x.PMInstallationWindow_, f, this),
        VMInstallationWindow_ (x.VMInstallationWindow_, f, this),
        VotingExperienceWindow_ (x.VotingExperienceWindow_, f, this),
        EndVotingExperienceWindow_ (x.EndVotingExperienceWindow_, f, this),
        AssistedCardGeneratorFunctionality_ (x.AssistedCardGeneratorFunctionality_, f, this),
        CardGeneratorFunctionality_ (x.CardGeneratorFunctionality_, f, this),
        RecoveryCardGeneratorFunctionality_ (x.RecoveryCardGeneratorFunctionality_, f, this),
        VoteProcessDemoFunctionality_ (x.VoteProcessDemoFunctionality_, f, this),
        BEIDCardWidget_ (x.BEIDCardWidget_, f, this),
        ActivationStatsWidget_ (x.ActivationStatsWidget_, f, this),
        WaitingCardWidget_ (x.WaitingCardWidget_, f, this),
        SmartCardReaderDiagnosisWidget_ (x.SmartCardReaderDiagnosisWidget_, f, this),
        VotingMachineInstallationWidgetInsert_ (x.VotingMachineInstallationWidgetInsert_, f, this),
        VotingMachineInstallationWidgetExtract_ (x.VotingMachineInstallationWidgetExtract_, f, this)
      {
      }

      PollingCardConfiguration::
      PollingCardConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PMInstallationWindow_ (f, this),
        VMInstallationWindow_ (f, this),
        VotingExperienceWindow_ (f, this),
        EndVotingExperienceWindow_ (f, this),
        AssistedCardGeneratorFunctionality_ (f, this),
        CardGeneratorFunctionality_ (f, this),
        RecoveryCardGeneratorFunctionality_ (f, this),
        VoteProcessDemoFunctionality_ (f, this),
        BEIDCardWidget_ (f, this),
        ActivationStatsWidget_ (f, this),
        WaitingCardWidget_ (f, this),
        SmartCardReaderDiagnosisWidget_ (f, this),
        VotingMachineInstallationWidgetInsert_ (f, this),
        VotingMachineInstallationWidgetExtract_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PollingCardConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PMInstallationWindow
          //
          if (n.name () == "PMInstallationWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PMInstallationWindow_.present ())
            {
              this->PMInstallationWindow_.set (PMInstallationWindowTraits::create (i, f, this));
              continue;
            }
          }

          // VMInstallationWindow
          //
          if (n.name () == "VMInstallationWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!VMInstallationWindow_.present ())
            {
              this->VMInstallationWindow_.set (VMInstallationWindowTraits::create (i, f, this));
              continue;
            }
          }

          // VotingExperienceWindow
          //
          if (n.name () == "VotingExperienceWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!VotingExperienceWindow_.present ())
            {
              this->VotingExperienceWindow_.set (VotingExperienceWindowTraits::create (i, f, this));
              continue;
            }
          }

          // EndVotingExperienceWindow
          //
          if (n.name () == "EndVotingExperienceWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EndVotingExperienceWindow_.present ())
            {
              this->EndVotingExperienceWindow_.set (EndVotingExperienceWindowTraits::create (i, f, this));
              continue;
            }
          }

          // AssistedCardGeneratorFunctionality
          //
          if (n.name () == "AssistedCardGeneratorFunctionality" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AssistedCardGeneratorFunctionality_.present ())
            {
              this->AssistedCardGeneratorFunctionality_.set (AssistedCardGeneratorFunctionalityTraits::create (i, f, this));
              continue;
            }
          }

          // CardGeneratorFunctionality
          //
          if (n.name () == "CardGeneratorFunctionality" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CardGeneratorFunctionality_.present ())
            {
              this->CardGeneratorFunctionality_.set (CardGeneratorFunctionalityTraits::create (i, f, this));
              continue;
            }
          }

          // RecoveryCardGeneratorFunctionality
          //
          if (n.name () == "RecoveryCardGeneratorFunctionality" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RecoveryCardGeneratorFunctionality_.present ())
            {
              this->RecoveryCardGeneratorFunctionality_.set (RecoveryCardGeneratorFunctionalityTraits::create (i, f, this));
              continue;
            }
          }

          // VoteProcessDemoFunctionality
          //
          if (n.name () == "VoteProcessDemoFunctionality" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!VoteProcessDemoFunctionality_.present ())
            {
              this->VoteProcessDemoFunctionality_.set (VoteProcessDemoFunctionalityTraits::create (i, f, this));
              continue;
            }
          }

          // BEIDCardWidget
          //
          if (n.name () == "BEIDCardWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BEIDCardWidget_.present ())
            {
              this->BEIDCardWidget_.set (BEIDCardWidgetTraits::create (i, f, this));
              continue;
            }
          }

          // ActivationStatsWidget
          //
          if (n.name () == "ActivationStatsWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ActivationStatsWidget_.present ())
            {
              this->ActivationStatsWidget_.set (ActivationStatsWidgetTraits::create (i, f, this));
              continue;
            }
          }

          // WaitingCardWidget
          //
          if (n.name () == "WaitingCardWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!WaitingCardWidget_.present ())
            {
              this->WaitingCardWidget_.set (WaitingCardWidgetTraits::create (i, f, this));
              continue;
            }
          }

          // SmartCardReaderDiagnosisWidget
          //
          if (n.name () == "SmartCardReaderDiagnosisWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SmartCardReaderDiagnosisWidget_.present ())
            {
              this->SmartCardReaderDiagnosisWidget_.set (SmartCardReaderDiagnosisWidgetTraits::create (i, f, this));
              continue;
            }
          }

          // VotingMachineInstallationWidgetInsert
          //
          if (n.name () == "VotingMachineInstallationWidgetInsert" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!VotingMachineInstallationWidgetInsert_.present ())
            {
              this->VotingMachineInstallationWidgetInsert_.set (VotingMachineInstallationWidgetInsertTraits::create (i, f, this));
              continue;
            }
          }

          // VotingMachineInstallationWidgetExtract
          //
          if (n.name () == "VotingMachineInstallationWidgetExtract" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!VotingMachineInstallationWidgetExtract_.present ())
            {
              this->VotingMachineInstallationWidgetExtract_.set (VotingMachineInstallationWidgetExtractTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!PMInstallationWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PMInstallationWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VMInstallationWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VMInstallationWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EndVotingExperienceWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EndVotingExperienceWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AssistedCardGeneratorFunctionality_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AssistedCardGeneratorFunctionality",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardGeneratorFunctionality_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardGeneratorFunctionality",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RecoveryCardGeneratorFunctionality_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RecoveryCardGeneratorFunctionality",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VoteProcessDemoFunctionality_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteProcessDemoFunctionality",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BEIDCardWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BEIDCardWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ActivationStatsWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ActivationStatsWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WaitingCardWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WaitingCardWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SmartCardReaderDiagnosisWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SmartCardReaderDiagnosisWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingMachineInstallationWidgetInsert_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingMachineInstallationWidgetInsert",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingMachineInstallationWidgetExtract_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingMachineInstallationWidgetExtract",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PollingCardConfiguration* PollingCardConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PollingCardConfiguration (*this, f, c);
      }

      PollingCardConfiguration::
      ~PollingCardConfiguration ()
      {
      }

      bool
      operator== (const PollingCardConfiguration& x, const PollingCardConfiguration& y)
      {
        if (!(x.getPMInstallationWindow () == y.getPMInstallationWindow ()))
          return false;

        if (!(x.getVMInstallationWindow () == y.getVMInstallationWindow ()))
          return false;

        if (!(x.getVotingExperienceWindow () == y.getVotingExperienceWindow ()))
          return false;

        if (!(x.getEndVotingExperienceWindow () == y.getEndVotingExperienceWindow ()))
          return false;

        if (!(x.getAssistedCardGeneratorFunctionality () == y.getAssistedCardGeneratorFunctionality ()))
          return false;

        if (!(x.getCardGeneratorFunctionality () == y.getCardGeneratorFunctionality ()))
          return false;

        if (!(x.getRecoveryCardGeneratorFunctionality () == y.getRecoveryCardGeneratorFunctionality ()))
          return false;

        if (!(x.getVoteProcessDemoFunctionality () == y.getVoteProcessDemoFunctionality ()))
          return false;

        if (!(x.getBEIDCardWidget () == y.getBEIDCardWidget ()))
          return false;

        if (!(x.getActivationStatsWidget () == y.getActivationStatsWidget ()))
          return false;

        if (!(x.getWaitingCardWidget () == y.getWaitingCardWidget ()))
          return false;

        if (!(x.getSmartCardReaderDiagnosisWidget () == y.getSmartCardReaderDiagnosisWidget ()))
          return false;

        if (!(x.getVotingMachineInstallationWidgetInsert () == y.getVotingMachineInstallationWidgetInsert ()))
          return false;

        if (!(x.getVotingMachineInstallationWidgetExtract () == y.getVotingMachineInstallationWidgetExtract ()))
          return false;

        return true;
      }

      bool
      operator!= (const PollingCardConfiguration& x, const PollingCardConfiguration& y)
      {
        return !(x == y);
      }

      // AlarmBoxMonitorConfiguration
      //

      AlarmBoxMonitorConfiguration::
      AlarmBoxMonitorConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Enable_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MonitoringTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SearchTime_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AlarmBoxMonitorConfiguration::
      AlarmBoxMonitorConfiguration (const EnableType& Enable,
                                    const MonitoringTimeType& MonitoringTime,
                                    const SearchTimeType& SearchTime)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Enable_ (Enable, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MonitoringTime_ (MonitoringTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SearchTime_ (SearchTime, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AlarmBoxMonitorConfiguration::
      AlarmBoxMonitorConfiguration (const AlarmBoxMonitorConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Enable_ (x.Enable_, f, this),
        MonitoringTime_ (x.MonitoringTime_, f, this),
        SearchTime_ (x.SearchTime_, f, this)
      {
      }

      AlarmBoxMonitorConfiguration::
      AlarmBoxMonitorConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Enable_ (f, this),
        MonitoringTime_ (f, this),
        SearchTime_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void AlarmBoxMonitorConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Enable
          //
          if (n.name () == "Enable" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Enable_.present ())
            {
              this->Enable_.set (EnableTraits::create (i, f, this));
              continue;
            }
          }

          // MonitoringTime
          //
          if (n.name () == "MonitoringTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MonitoringTime_.present ())
            {
              this->MonitoringTime_.set (MonitoringTimeTraits::create (i, f, this));
              continue;
            }
          }

          // SearchTime
          //
          if (n.name () == "SearchTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SearchTime_.present ())
            {
              this->SearchTime_.set (SearchTimeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Enable_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Enable",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MonitoringTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MonitoringTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SearchTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SearchTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      AlarmBoxMonitorConfiguration* AlarmBoxMonitorConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class AlarmBoxMonitorConfiguration (*this, f, c);
      }

      AlarmBoxMonitorConfiguration::
      ~AlarmBoxMonitorConfiguration ()
      {
      }

      bool
      operator== (const AlarmBoxMonitorConfiguration& x, const AlarmBoxMonitorConfiguration& y)
      {
        if (!(x.getEnable () == y.getEnable ()))
          return false;

        if (!(x.getMonitoringTime () == y.getMonitoringTime ()))
          return false;

        if (!(x.getSearchTime () == y.getSearchTime ()))
          return false;

        return true;
      }

      bool
      operator!= (const AlarmBoxMonitorConfiguration& x, const AlarmBoxMonitorConfiguration& y)
      {
        return !(x == y);
      }

      // PreviewLanguageConfig
      //

      PreviewLanguageConfig::
      PreviewLanguageConfig (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_PreviewLanguageConfig_convert ();
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_PreviewLanguageConfig_convert ();
      }

      PreviewLanguageConfig::
      PreviewLanguageConfig (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_PreviewLanguageConfig_convert ();
      }

      PreviewLanguageConfig* PreviewLanguageConfig::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PreviewLanguageConfig (*this, f, c);
      }

      PreviewLanguageConfig::Value PreviewLanguageConfig::
      _xsd_PreviewLanguageConfig_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PreviewLanguageConfig_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_PreviewLanguageConfig_indexes_,
                          _xsd_PreviewLanguageConfig_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_PreviewLanguageConfig_indexes_ + 3 || _xsd_PreviewLanguageConfig_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const PreviewLanguageConfig::
      _xsd_PreviewLanguageConfig_literals_[3] =
      {
        "language-install",
        "language-vote",
        "language-elector"
      };

      const PreviewLanguageConfig::Value PreviewLanguageConfig::
      _xsd_PreviewLanguageConfig_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::PreviewLanguageConfig::CONFIGURATION_LANGUAGE_ELECTOR,
        ::Smartmatic::SAES::Configuration::PreviewLanguageConfig::CONFIGURATION_LANGUAGE_INSTALL,
        ::Smartmatic::SAES::Configuration::PreviewLanguageConfig::CONFIGURATION_LANGUAGE_VOTE
      };

      // EntryDividedWidgetConfiguration
      //

      EntryDividedWidgetConfiguration::
      EntryDividedWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberOfDivision_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxCharacters_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Visibility_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      EntryDividedWidgetConfiguration::
      EntryDividedWidgetConfiguration (const NumberOfDivisionType& NumberOfDivision,
                                       const MaxCharactersType& MaxCharacters,
                                       const EntryWidthType& EntryWidth,
                                       const VisibilityType& Visibility)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberOfDivision_ (NumberOfDivision, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxCharacters_ (MaxCharacters, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (EntryWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Visibility_ (Visibility, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      EntryDividedWidgetConfiguration::
      EntryDividedWidgetConfiguration (const EntryDividedWidgetConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NumberOfDivision_ (x.NumberOfDivision_, f, this),
        MaxCharacters_ (x.MaxCharacters_, f, this),
        EntryWidth_ (x.EntryWidth_, f, this),
        Visibility_ (x.Visibility_, f, this)
      {
      }

      EntryDividedWidgetConfiguration::
      EntryDividedWidgetConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NumberOfDivision_ (f, this),
        MaxCharacters_ (f, this),
        EntryWidth_ (f, this),
        Visibility_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void EntryDividedWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NumberOfDivision
          //
          if (n.name () == "NumberOfDivision" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberOfDivision_.present ())
            {
              this->NumberOfDivision_.set (NumberOfDivisionTraits::create (i, f, this));
              continue;
            }
          }

          // MaxCharacters
          //
          if (n.name () == "MaxCharacters" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxCharacters_.present ())
            {
              this->MaxCharacters_.set (MaxCharactersTraits::create (i, f, this));
              continue;
            }
          }

          // EntryWidth
          //
          if (n.name () == "EntryWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EntryWidth_.present ())
            {
              this->EntryWidth_.set (EntryWidthTraits::create (i, f, this));
              continue;
            }
          }

          // Visibility
          //
          if (n.name () == "Visibility" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Visibility_.present ())
            {
              this->Visibility_.set (VisibilityTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!NumberOfDivision_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberOfDivision",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxCharacters_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxCharacters",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EntryWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EntryWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Visibility_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Visibility",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      EntryDividedWidgetConfiguration* EntryDividedWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class EntryDividedWidgetConfiguration (*this, f, c);
      }

      EntryDividedWidgetConfiguration::
      ~EntryDividedWidgetConfiguration ()
      {
      }

      bool
      operator== (const EntryDividedWidgetConfiguration& x, const EntryDividedWidgetConfiguration& y)
      {
        if (!(x.getNumberOfDivision () == y.getNumberOfDivision ()))
          return false;

        if (!(x.getMaxCharacters () == y.getMaxCharacters ()))
          return false;

        if (!(x.getEntryWidth () == y.getEntryWidth ()))
          return false;

        if (!(x.getVisibility () == y.getVisibility ()))
          return false;

        return true;
      }

      bool
      operator!= (const EntryDividedWidgetConfiguration& x, const EntryDividedWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // CountConfiguration
      //

      CountConfiguration::
      CountConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        CountType_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CountConfiguration::
      CountConfiguration (const CountConfiguration& x,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        CountType_ (x.CountType_, f, this)
      {
      }

      CountConfiguration::
      CountConfiguration (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        CountType_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CountConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CountType
          //
          if (n.name () == "CountType" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CountTypeType > r (
              CountTypeTraits::create (i, f, this));

            this->CountType_.push_back (r);
            continue;
          }

          break;
        }
      }

      CountConfiguration* CountConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CountConfiguration (*this, f, c);
      }

      CountConfiguration::
      ~CountConfiguration ()
      {
      }

      bool
      operator== (const CountConfiguration& x, const CountConfiguration& y)
      {
        if (!(x.getCountType () == y.getCountType ()))
          return false;

        return true;
      }

      bool
      operator!= (const CountConfiguration& x, const CountConfiguration& y)
      {
        return !(x == y);
      }

      // CountTypeConfig
      //

      CountTypeConfig::
      CountTypeConfig (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_CountTypeConfig_convert ();
      }

      CountTypeConfig::
      CountTypeConfig (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_CountTypeConfig_convert ();
      }

      CountTypeConfig::
      CountTypeConfig (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_CountTypeConfig_convert ();
      }

      CountTypeConfig* CountTypeConfig::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CountTypeConfig (*this, f, c);
      }

      CountTypeConfig::Value CountTypeConfig::
      _xsd_CountTypeConfig_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CountTypeConfig_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_CountTypeConfig_indexes_,
                          _xsd_CountTypeConfig_indexes_ + 5,
                          *this,
                          c));

        if (i == _xsd_CountTypeConfig_indexes_ + 5 || _xsd_CountTypeConfig_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const CountTypeConfig::
      _xsd_CountTypeConfig_literals_[5] =
      {
        "total",
        "official",
        "demo",
        "recovery",
        "simulate"
      };

      const CountTypeConfig::Value CountTypeConfig::
      _xsd_CountTypeConfig_indexes_[5] =
      {
        ::Smartmatic::SAES::Configuration::CountTypeConfig::CONFIGURATION_DEMO,
        ::Smartmatic::SAES::Configuration::CountTypeConfig::CONFIGURATION_OFFICIAL,
        ::Smartmatic::SAES::Configuration::CountTypeConfig::CONFIGURATION_RECOVERY,
        ::Smartmatic::SAES::Configuration::CountTypeConfig::CONFIGURATION_SIMULATE,
        ::Smartmatic::SAES::Configuration::CountTypeConfig::CONFIGURATION_TOTAL
      };

      // StartConfiguration
      //

      StartConfiguration::
      StartConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        LoadSelectionLanguage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PersistLanguage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoMachine_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      StartConfiguration::
      StartConfiguration (const LoadSelectionLanguageType& LoadSelectionLanguage,
                          const PersistLanguageType& PersistLanguage,
                          const InfoMachineType& InfoMachine)
      : ::Smartmatic::ConfigurationTypes::Type (),
        LoadSelectionLanguage_ (LoadSelectionLanguage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PersistLanguage_ (PersistLanguage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoMachine_ (InfoMachine, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      StartConfiguration::
      StartConfiguration (const StartConfiguration& x,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        LoadSelectionLanguage_ (x.LoadSelectionLanguage_, f, this),
        PersistLanguage_ (x.PersistLanguage_, f, this),
        InfoMachine_ (x.InfoMachine_, f, this)
      {
      }

      StartConfiguration::
      StartConfiguration (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        LoadSelectionLanguage_ (f, this),
        PersistLanguage_ (f, this),
        InfoMachine_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void StartConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LoadSelectionLanguage
          //
          if (n.name () == "LoadSelectionLanguage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!LoadSelectionLanguage_.present ())
            {
              this->LoadSelectionLanguage_.set (LoadSelectionLanguageTraits::create (i, f, this));
              continue;
            }
          }

          // PersistLanguage
          //
          if (n.name () == "PersistLanguage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PersistLanguage_.present ())
            {
              this->PersistLanguage_.set (PersistLanguageTraits::create (i, f, this));
              continue;
            }
          }

          // InfoMachine
          //
          if (n.name () == "InfoMachine" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoMachineType > r (
              InfoMachineTraits::create (i, f, this));

            if (!InfoMachine_.present ())
            {
              this->InfoMachine_.set (r);
              continue;
            }
          }

          break;
        }

        if (!LoadSelectionLanguage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LoadSelectionLanguage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PersistLanguage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PersistLanguage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoMachine_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoMachine",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      StartConfiguration* StartConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class StartConfiguration (*this, f, c);
      }

      StartConfiguration::
      ~StartConfiguration ()
      {
      }

      bool
      operator== (const StartConfiguration& x, const StartConfiguration& y)
      {
        if (!(x.getLoadSelectionLanguage () == y.getLoadSelectionLanguage ()))
          return false;

        if (!(x.getPersistLanguage () == y.getPersistLanguage ()))
          return false;

        if (!(x.getInfoMachine () == y.getInfoMachine ()))
          return false;

        return true;
      }

      bool
      operator!= (const StartConfiguration& x, const StartConfiguration& y)
      {
        return !(x == y);
      }

      // BEIDCardWidgetConfiguration
      //

      BEIDCardWidgetConfiguration::
      BEIDCardWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        TitleErrorFontConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TextErrorFontConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutError_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BEIDCardWidgetConfiguration::
      BEIDCardWidgetConfiguration (const TitleErrorFontConfType& TitleErrorFontConf,
                                   const TextErrorFontConfType& TextErrorFontConf,
                                   const TimeoutErrorType& TimeoutError)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TitleErrorFontConf_ (TitleErrorFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextErrorFontConf_ (TextErrorFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutError_ (TimeoutError, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BEIDCardWidgetConfiguration::
      BEIDCardWidgetConfiguration (::std::auto_ptr< TitleErrorFontConfType >& TitleErrorFontConf,
                                   ::std::auto_ptr< TextErrorFontConfType >& TextErrorFontConf,
                                   const TimeoutErrorType& TimeoutError)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TitleErrorFontConf_ (TitleErrorFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextErrorFontConf_ (TextErrorFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutError_ (TimeoutError, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BEIDCardWidgetConfiguration::
      BEIDCardWidgetConfiguration (const BEIDCardWidgetConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        TitleErrorFontConf_ (x.TitleErrorFontConf_, f, this),
        TextErrorFontConf_ (x.TextErrorFontConf_, f, this),
        TimeoutError_ (x.TimeoutError_, f, this)
      {
      }

      BEIDCardWidgetConfiguration::
      BEIDCardWidgetConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        TitleErrorFontConf_ (f, this),
        TextErrorFontConf_ (f, this),
        TimeoutError_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BEIDCardWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TitleErrorFontConf
          //
          if (n.name () == "TitleErrorFontConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleErrorFontConfType > r (
              TitleErrorFontConfTraits::create (i, f, this));

            if (!TitleErrorFontConf_.present ())
            {
              this->TitleErrorFontConf_.set (r);
              continue;
            }
          }

          // TextErrorFontConf
          //
          if (n.name () == "TextErrorFontConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TextErrorFontConfType > r (
              TextErrorFontConfTraits::create (i, f, this));

            if (!TextErrorFontConf_.present ())
            {
              this->TextErrorFontConf_.set (r);
              continue;
            }
          }

          // TimeoutError
          //
          if (n.name () == "TimeoutError" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeoutError_.present ())
            {
              this->TimeoutError_.set (TimeoutErrorTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!TitleErrorFontConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleErrorFontConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TextErrorFontConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextErrorFontConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeoutError_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeoutError",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      BEIDCardWidgetConfiguration* BEIDCardWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BEIDCardWidgetConfiguration (*this, f, c);
      }

      BEIDCardWidgetConfiguration::
      ~BEIDCardWidgetConfiguration ()
      {
      }

      bool
      operator== (const BEIDCardWidgetConfiguration& x, const BEIDCardWidgetConfiguration& y)
      {
        if (!(x.getTitleErrorFontConf () == y.getTitleErrorFontConf ()))
          return false;

        if (!(x.getTextErrorFontConf () == y.getTextErrorFontConf ()))
          return false;

        if (!(x.getTimeoutError () == y.getTimeoutError ()))
          return false;

        return true;
      }

      bool
      operator!= (const BEIDCardWidgetConfiguration& x, const BEIDCardWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // IDCardProcessConfiguration
      //

      IDCardProcessConfiguration::
      IDCardProcessConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstall_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstall_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseVotation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseElection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNoteRegister_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReport_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedActivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DisabledVoter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DisabledVoterHelper_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PoliceNote_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IDCardProcessConfiguration::
      IDCardProcessConfiguration (const PMInstallType& PMInstall,
                                  const VMInstallType& VMInstall,
                                  const OpenElectionType& OpenElection,
                                  const CloseVotationType& CloseVotation,
                                  const CloseElectionType& CloseElection,
                                  const CloseNoteRegisterType& CloseNoteRegister,
                                  const IncidentReportType& IncidentReport,
                                  const AssistedActivationType& AssistedActivation,
                                  const DisabledVoterType& DisabledVoter,
                                  const DisabledVoterHelperType& DisabledVoterHelper,
                                  const PoliceNoteType& PoliceNote)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstall_ (PMInstall, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstall_ (VMInstall, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElection_ (OpenElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseVotation_ (CloseVotation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseElection_ (CloseElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNoteRegister_ (CloseNoteRegister, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReport_ (IncidentReport, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedActivation_ (AssistedActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DisabledVoter_ (DisabledVoter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DisabledVoterHelper_ (DisabledVoterHelper, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PoliceNote_ (PoliceNote, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IDCardProcessConfiguration::
      IDCardProcessConfiguration (::std::auto_ptr< PMInstallType >& PMInstall,
                                  ::std::auto_ptr< VMInstallType >& VMInstall,
                                  ::std::auto_ptr< OpenElectionType >& OpenElection,
                                  ::std::auto_ptr< CloseVotationType >& CloseVotation,
                                  ::std::auto_ptr< CloseElectionType >& CloseElection,
                                  ::std::auto_ptr< CloseNoteRegisterType >& CloseNoteRegister,
                                  ::std::auto_ptr< IncidentReportType >& IncidentReport,
                                  ::std::auto_ptr< AssistedActivationType >& AssistedActivation,
                                  ::std::auto_ptr< DisabledVoterType >& DisabledVoter,
                                  ::std::auto_ptr< DisabledVoterHelperType >& DisabledVoterHelper,
                                  ::std::auto_ptr< PoliceNoteType >& PoliceNote)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstall_ (PMInstall, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstall_ (VMInstall, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElection_ (OpenElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseVotation_ (CloseVotation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseElection_ (CloseElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CloseNoteRegister_ (CloseNoteRegister, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReport_ (IncidentReport, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedActivation_ (AssistedActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DisabledVoter_ (DisabledVoter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DisabledVoterHelper_ (DisabledVoterHelper, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PoliceNote_ (PoliceNote, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IDCardProcessConfiguration::
      IDCardProcessConfiguration (const IDCardProcessConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PMInstall_ (x.PMInstall_, f, this),
        VMInstall_ (x.VMInstall_, f, this),
        OpenElection_ (x.OpenElection_, f, this),
        CloseVotation_ (x.CloseVotation_, f, this),
        CloseElection_ (x.CloseElection_, f, this),
        CloseNoteRegister_ (x.CloseNoteRegister_, f, this),
        IncidentReport_ (x.IncidentReport_, f, this),
        AssistedActivation_ (x.AssistedActivation_, f, this),
        DisabledVoter_ (x.DisabledVoter_, f, this),
        DisabledVoterHelper_ (x.DisabledVoterHelper_, f, this),
        PoliceNote_ (x.PoliceNote_, f, this)
      {
      }

      IDCardProcessConfiguration::
      IDCardProcessConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PMInstall_ (f, this),
        VMInstall_ (f, this),
        OpenElection_ (f, this),
        CloseVotation_ (f, this),
        CloseElection_ (f, this),
        CloseNoteRegister_ (f, this),
        IncidentReport_ (f, this),
        AssistedActivation_ (f, this),
        DisabledVoter_ (f, this),
        DisabledVoterHelper_ (f, this),
        PoliceNote_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void IDCardProcessConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PMInstall
          //
          if (n.name () == "PMInstall" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PMInstallType > r (
              PMInstallTraits::create (i, f, this));

            if (!PMInstall_.present ())
            {
              this->PMInstall_.set (r);
              continue;
            }
          }

          // VMInstall
          //
          if (n.name () == "VMInstall" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VMInstallType > r (
              VMInstallTraits::create (i, f, this));

            if (!VMInstall_.present ())
            {
              this->VMInstall_.set (r);
              continue;
            }
          }

          // OpenElection
          //
          if (n.name () == "OpenElection" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OpenElectionType > r (
              OpenElectionTraits::create (i, f, this));

            if (!OpenElection_.present ())
            {
              this->OpenElection_.set (r);
              continue;
            }
          }

          // CloseVotation
          //
          if (n.name () == "CloseVotation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseVotationType > r (
              CloseVotationTraits::create (i, f, this));

            if (!CloseVotation_.present ())
            {
              this->CloseVotation_.set (r);
              continue;
            }
          }

          // CloseElection
          //
          if (n.name () == "CloseElection" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseElectionType > r (
              CloseElectionTraits::create (i, f, this));

            if (!CloseElection_.present ())
            {
              this->CloseElection_.set (r);
              continue;
            }
          }

          // CloseNoteRegister
          //
          if (n.name () == "CloseNoteRegister" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CloseNoteRegisterType > r (
              CloseNoteRegisterTraits::create (i, f, this));

            if (!CloseNoteRegister_.present ())
            {
              this->CloseNoteRegister_.set (r);
              continue;
            }
          }

          // IncidentReport
          //
          if (n.name () == "IncidentReport" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IncidentReportType > r (
              IncidentReportTraits::create (i, f, this));

            if (!IncidentReport_.present ())
            {
              this->IncidentReport_.set (r);
              continue;
            }
          }

          // AssistedActivation
          //
          if (n.name () == "AssistedActivation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AssistedActivationType > r (
              AssistedActivationTraits::create (i, f, this));

            if (!AssistedActivation_.present ())
            {
              this->AssistedActivation_.set (r);
              continue;
            }
          }

          // DisabledVoter
          //
          if (n.name () == "DisabledVoter" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DisabledVoterType > r (
              DisabledVoterTraits::create (i, f, this));

            if (!DisabledVoter_.present ())
            {
              this->DisabledVoter_.set (r);
              continue;
            }
          }

          // DisabledVoterHelper
          //
          if (n.name () == "DisabledVoterHelper" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DisabledVoterHelperType > r (
              DisabledVoterHelperTraits::create (i, f, this));

            if (!DisabledVoterHelper_.present ())
            {
              this->DisabledVoterHelper_.set (r);
              continue;
            }
          }

          // PoliceNote
          //
          if (n.name () == "PoliceNote" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PoliceNoteType > r (
              PoliceNoteTraits::create (i, f, this));

            if (!PoliceNote_.present ())
            {
              this->PoliceNote_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PMInstall_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PMInstall",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VMInstall_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VMInstall",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!OpenElection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OpenElection",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseVotation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseVotation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseElection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseElection",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CloseNoteRegister_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CloseNoteRegister",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IncidentReport_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncidentReport",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AssistedActivation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AssistedActivation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DisabledVoter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DisabledVoter",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DisabledVoterHelper_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DisabledVoterHelper",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PoliceNote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PoliceNote",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      IDCardProcessConfiguration* IDCardProcessConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IDCardProcessConfiguration (*this, f, c);
      }

      IDCardProcessConfiguration::
      ~IDCardProcessConfiguration ()
      {
      }

      bool
      operator== (const IDCardProcessConfiguration& x, const IDCardProcessConfiguration& y)
      {
        if (!(x.getPMInstall () == y.getPMInstall ()))
          return false;

        if (!(x.getVMInstall () == y.getVMInstall ()))
          return false;

        if (!(x.getOpenElection () == y.getOpenElection ()))
          return false;

        if (!(x.getCloseVotation () == y.getCloseVotation ()))
          return false;

        if (!(x.getCloseElection () == y.getCloseElection ()))
          return false;

        if (!(x.getCloseNoteRegister () == y.getCloseNoteRegister ()))
          return false;

        if (!(x.getIncidentReport () == y.getIncidentReport ()))
          return false;

        if (!(x.getAssistedActivation () == y.getAssistedActivation ()))
          return false;

        if (!(x.getDisabledVoter () == y.getDisabledVoter ()))
          return false;

        if (!(x.getDisabledVoterHelper () == y.getDisabledVoterHelper ()))
          return false;

        if (!(x.getPoliceNote () == y.getPoliceNote ()))
          return false;

        return true;
      }

      bool
      operator!= (const IDCardProcessConfiguration& x, const IDCardProcessConfiguration& y)
      {
        return !(x == y);
      }

      // PollWorkerRegisterConfiguration
      //

      PollWorkerRegisterConfiguration::
      PollWorkerRegisterConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        WorkerMemberType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterMax_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterRequired_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IDConfig_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollWorkerRegisterConfiguration::
      PollWorkerRegisterConfiguration (const WorkerMemberTypeType& WorkerMemberType,
                                       const RegisterMaxType& RegisterMax,
                                       const RegisterRequiredType& RegisterRequired,
                                       const IDConfigType& IDConfig)
      : ::Smartmatic::ConfigurationTypes::Type (),
        WorkerMemberType_ (WorkerMemberType, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterMax_ (RegisterMax, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterRequired_ (RegisterRequired, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IDConfig_ (IDConfig, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollWorkerRegisterConfiguration::
      PollWorkerRegisterConfiguration (const WorkerMemberTypeType& WorkerMemberType,
                                       const RegisterMaxType& RegisterMax,
                                       const RegisterRequiredType& RegisterRequired,
                                       ::std::auto_ptr< IDConfigType >& IDConfig)
      : ::Smartmatic::ConfigurationTypes::Type (),
        WorkerMemberType_ (WorkerMemberType, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterMax_ (RegisterMax, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterRequired_ (RegisterRequired, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IDConfig_ (IDConfig, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollWorkerRegisterConfiguration::
      PollWorkerRegisterConfiguration (const PollWorkerRegisterConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        WorkerMemberType_ (x.WorkerMemberType_, f, this),
        RegisterMax_ (x.RegisterMax_, f, this),
        RegisterRequired_ (x.RegisterRequired_, f, this),
        IDConfig_ (x.IDConfig_, f, this)
      {
      }

      PollWorkerRegisterConfiguration::
      PollWorkerRegisterConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        WorkerMemberType_ (f, this),
        RegisterMax_ (f, this),
        RegisterRequired_ (f, this),
        IDConfig_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PollWorkerRegisterConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // WorkerMemberType
          //
          if (n.name () == "WorkerMemberType" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< WorkerMemberTypeType > r (
              WorkerMemberTypeTraits::create (i, f, this));

            if (!WorkerMemberType_.present ())
            {
              this->WorkerMemberType_.set (r);
              continue;
            }
          }

          // RegisterMax
          //
          if (n.name () == "RegisterMax" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RegisterMax_.present ())
            {
              this->RegisterMax_.set (RegisterMaxTraits::create (i, f, this));
              continue;
            }
          }

          // RegisterRequired
          //
          if (n.name () == "RegisterRequired" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RegisterRequired_.present ())
            {
              this->RegisterRequired_.set (RegisterRequiredTraits::create (i, f, this));
              continue;
            }
          }

          // IDConfig
          //
          if (n.name () == "IDConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IDConfigType > r (
              IDConfigTraits::create (i, f, this));

            if (!IDConfig_.present ())
            {
              this->IDConfig_.set (r);
              continue;
            }
          }

          break;
        }

        if (!WorkerMemberType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WorkerMemberType",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RegisterMax_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterMax",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RegisterRequired_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterRequired",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IDConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IDConfig",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PollWorkerRegisterConfiguration* PollWorkerRegisterConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PollWorkerRegisterConfiguration (*this, f, c);
      }

      PollWorkerRegisterConfiguration::
      ~PollWorkerRegisterConfiguration ()
      {
      }

      bool
      operator== (const PollWorkerRegisterConfiguration& x, const PollWorkerRegisterConfiguration& y)
      {
        if (!(x.getWorkerMemberType () == y.getWorkerMemberType ()))
          return false;

        if (!(x.getRegisterMax () == y.getRegisterMax ()))
          return false;

        if (!(x.getRegisterRequired () == y.getRegisterRequired ()))
          return false;

        if (!(x.getIDConfig () == y.getIDConfig ()))
          return false;

        return true;
      }

      bool
      operator!= (const PollWorkerRegisterConfiguration& x, const PollWorkerRegisterConfiguration& y)
      {
        return !(x == y);
      }

      // IDConfig
      //

      IDConfig::
      IDConfig ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Name_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LastName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IDNumber_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Gender_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Nationality_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NationalityNumber_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Account_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Party_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Phone_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AllDay_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoDeputy_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BureauAssigned_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IDConfig::
      IDConfig (const IDConfig& x,
                ::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Name_ (x.Name_, f, this),
        LastName_ (x.LastName_, f, this),
        IDNumber_ (x.IDNumber_, f, this),
        Gender_ (x.Gender_, f, this),
        Nationality_ (x.Nationality_, f, this),
        NationalityNumber_ (x.NationalityNumber_, f, this),
        Account_ (x.Account_, f, this),
        Party_ (x.Party_, f, this),
        Phone_ (x.Phone_, f, this),
        AllDay_ (x.AllDay_, f, this),
        InfoDeputy_ (x.InfoDeputy_, f, this),
        BureauAssigned_ (x.BureauAssigned_, f, this)
      {
      }

      IDConfig::
      IDConfig (const ::xercesc::DOMElement& e,
                ::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Name_ (f, this),
        LastName_ (f, this),
        IDNumber_ (f, this),
        Gender_ (f, this),
        Nationality_ (f, this),
        NationalityNumber_ (f, this),
        Account_ (f, this),
        Party_ (f, this),
        Phone_ (f, this),
        AllDay_ (f, this),
        InfoDeputy_ (f, this),
        BureauAssigned_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void IDConfig::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NameType > r (
              NameTraits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // LastName
          //
          if (n.name () == "LastName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LastNameType > r (
              LastNameTraits::create (i, f, this));

            if (!this->LastName_)
            {
              this->LastName_.set (r);
              continue;
            }
          }

          // IDNumber
          //
          if (n.name () == "IDNumber" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IDNumberType > r (
              IDNumberTraits::create (i, f, this));

            if (!this->IDNumber_)
            {
              this->IDNumber_.set (r);
              continue;
            }
          }

          // Gender
          //
          if (n.name () == "Gender" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< GenderType > r (
              GenderTraits::create (i, f, this));

            if (!this->Gender_)
            {
              this->Gender_.set (r);
              continue;
            }
          }

          // Nationality
          //
          if (n.name () == "Nationality" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NationalityType > r (
              NationalityTraits::create (i, f, this));

            if (!this->Nationality_)
            {
              this->Nationality_.set (r);
              continue;
            }
          }

          // NationalityNumber
          //
          if (n.name () == "NationalityNumber" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NationalityNumberType > r (
              NationalityNumberTraits::create (i, f, this));

            if (!this->NationalityNumber_)
            {
              this->NationalityNumber_.set (r);
              continue;
            }
          }

          // Account
          //
          if (n.name () == "Account" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AccountType > r (
              AccountTraits::create (i, f, this));

            if (!this->Account_)
            {
              this->Account_.set (r);
              continue;
            }
          }

          // Party
          //
          if (n.name () == "Party" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartyType > r (
              PartyTraits::create (i, f, this));

            if (!this->Party_)
            {
              this->Party_.set (r);
              continue;
            }
          }

          // Phone
          //
          if (n.name () == "Phone" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PhoneType > r (
              PhoneTraits::create (i, f, this));

            if (!this->Phone_)
            {
              this->Phone_.set (r);
              continue;
            }
          }

          // AllDay
          //
          if (n.name () == "AllDay" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AllDayType > r (
              AllDayTraits::create (i, f, this));

            if (!this->AllDay_)
            {
              this->AllDay_.set (r);
              continue;
            }
          }

          // InfoDeputy
          //
          if (n.name () == "InfoDeputy" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoDeputyType > r (
              InfoDeputyTraits::create (i, f, this));

            if (!this->InfoDeputy_)
            {
              this->InfoDeputy_.set (r);
              continue;
            }
          }

          // BureauAssigned
          //
          if (n.name () == "BureauAssigned" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BureauAssignedType > r (
              BureauAssignedTraits::create (i, f, this));

            if (!this->BureauAssigned_)
            {
              this->BureauAssigned_.set (r);
              continue;
            }
          }

          break;
        }
      }

      IDConfig* IDConfig::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IDConfig (*this, f, c);
      }

      IDConfig::
      ~IDConfig ()
      {
      }

      bool
      operator== (const IDConfig& x, const IDConfig& y)
      {
        if (!(x.getName () == y.getName ()))
          return false;

        if (!(x.getLastName () == y.getLastName ()))
          return false;

        if (!(x.getIDNumber () == y.getIDNumber ()))
          return false;

        if (!(x.getGender () == y.getGender ()))
          return false;

        if (!(x.getNationality () == y.getNationality ()))
          return false;

        if (!(x.getNationalityNumber () == y.getNationalityNumber ()))
          return false;

        if (!(x.getAccount () == y.getAccount ()))
          return false;

        if (!(x.getParty () == y.getParty ()))
          return false;

        if (!(x.getPhone () == y.getPhone ()))
          return false;

        if (!(x.getAllDay () == y.getAllDay ()))
          return false;

        if (!(x.getInfoDeputy () == y.getInfoDeputy ()))
          return false;

        if (!(x.getBureauAssigned () == y.getBureauAssigned ()))
          return false;

        return true;
      }

      bool
      operator!= (const IDConfig& x, const IDConfig& y)
      {
        return !(x == y);
      }

      // IDProperties
      //

      IDProperties::
      IDProperties ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Mandatory_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Type_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Max_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Mask_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Regex_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IDProperties::
      IDProperties (const MandatoryType& Mandatory)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Mandatory_ (Mandatory, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Type_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Max_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Mask_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Regex_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IDProperties::
      IDProperties (const IDProperties& x,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Mandatory_ (x.Mandatory_, f, this),
        Type_ (x.Type_, f, this),
        Max_ (x.Max_, f, this),
        Mask_ (x.Mask_, f, this),
        Regex_ (x.Regex_, f, this)
      {
      }

      IDProperties::
      IDProperties (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Mandatory_ (f, this),
        Type_ (f, this),
        Max_ (f, this),
        Mask_ (f, this),
        Regex_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void IDProperties::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "Mandatory" && n.namespace_ ().empty ())
          {
            this->Mandatory_.set (MandatoryTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Type" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< TypeType > r (
              TypeTraits::create (i, f, this));

            this->Type_.set (r);
            continue;
          }

          if (n.name () == "Max" && n.namespace_ ().empty ())
          {
            this->Max_.set (MaxTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Mask" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< MaskType > r (
              MaskTraits::create (i, f, this));

            this->Mask_.set (r);
            continue;
          }

          if (n.name () == "Regex" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< RegexType > r (
              RegexTraits::create (i, f, this));

            this->Regex_.set (r);
            continue;
          }
        }

        if (!Mandatory_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Mandatory",
            "");
        }
      }

      IDProperties* IDProperties::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IDProperties (*this, f, c);
      }

      IDProperties::
      ~IDProperties ()
      {
      }

      bool
      operator== (const IDProperties& x, const IDProperties& y)
      {
        if (!(x.getMandatory () == y.getMandatory ()))
          return false;

        if (!(x.getType () == y.getType ()))
          return false;

        if (!(x.getMax () == y.getMax ()))
          return false;

        if (!(x.getMask () == y.getMask ()))
          return false;

        if (!(x.getRegex () == y.getRegex ()))
          return false;

        return true;
      }

      bool
      operator!= (const IDProperties& x, const IDProperties& y)
      {
        return !(x == y);
      }

      // RegisterWidgetConfiguration
      //

      RegisterWidgetConfiguration::
      RegisterWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        VerticalFilling_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxColumn_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxRow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WidthBox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeigthBox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SpacingBox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowHeader_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowCenter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBottom_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      RegisterWidgetConfiguration::
      RegisterWidgetConfiguration (const VerticalFillingType& VerticalFilling,
                                   const MaxColumnType& MaxColumn,
                                   const MaxRowType& MaxRow,
                                   const WidthBoxType& WidthBox,
                                   const HeigthBoxType& HeigthBox,
                                   const SpacingBoxType& SpacingBox,
                                   const ShowHeaderType& ShowHeader,
                                   const ShowCenterType& ShowCenter,
                                   const ShowBottomType& ShowBottom)
      : ::Smartmatic::ConfigurationTypes::Type (),
        VerticalFilling_ (VerticalFilling, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxColumn_ (MaxColumn, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxRow_ (MaxRow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WidthBox_ (WidthBox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeigthBox_ (HeigthBox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SpacingBox_ (SpacingBox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowHeader_ (ShowHeader, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowCenter_ (ShowCenter, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBottom_ (ShowBottom, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      RegisterWidgetConfiguration::
      RegisterWidgetConfiguration (const RegisterWidgetConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        VerticalFilling_ (x.VerticalFilling_, f, this),
        MaxColumn_ (x.MaxColumn_, f, this),
        MaxRow_ (x.MaxRow_, f, this),
        WidthBox_ (x.WidthBox_, f, this),
        HeigthBox_ (x.HeigthBox_, f, this),
        SpacingBox_ (x.SpacingBox_, f, this),
        ShowHeader_ (x.ShowHeader_, f, this),
        ShowCenter_ (x.ShowCenter_, f, this),
        ShowBottom_ (x.ShowBottom_, f, this)
      {
      }

      RegisterWidgetConfiguration::
      RegisterWidgetConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        VerticalFilling_ (f, this),
        MaxColumn_ (f, this),
        MaxRow_ (f, this),
        WidthBox_ (f, this),
        HeigthBox_ (f, this),
        SpacingBox_ (f, this),
        ShowHeader_ (f, this),
        ShowCenter_ (f, this),
        ShowBottom_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RegisterWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VerticalFilling
          //
          if (n.name () == "VerticalFilling" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!VerticalFilling_.present ())
            {
              this->VerticalFilling_.set (VerticalFillingTraits::create (i, f, this));
              continue;
            }
          }

          // MaxColumn
          //
          if (n.name () == "MaxColumn" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxColumn_.present ())
            {
              this->MaxColumn_.set (MaxColumnTraits::create (i, f, this));
              continue;
            }
          }

          // MaxRow
          //
          if (n.name () == "MaxRow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxRow_.present ())
            {
              this->MaxRow_.set (MaxRowTraits::create (i, f, this));
              continue;
            }
          }

          // WidthBox
          //
          if (n.name () == "WidthBox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!WidthBox_.present ())
            {
              this->WidthBox_.set (WidthBoxTraits::create (i, f, this));
              continue;
            }
          }

          // HeigthBox
          //
          if (n.name () == "HeigthBox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HeigthBox_.present ())
            {
              this->HeigthBox_.set (HeigthBoxTraits::create (i, f, this));
              continue;
            }
          }

          // SpacingBox
          //
          if (n.name () == "SpacingBox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SpacingBox_.present ())
            {
              this->SpacingBox_.set (SpacingBoxTraits::create (i, f, this));
              continue;
            }
          }

          // ShowHeader
          //
          if (n.name () == "ShowHeader" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowHeader_.present ())
            {
              this->ShowHeader_.set (ShowHeaderTraits::create (i, f, this));
              continue;
            }
          }

          // ShowCenter
          //
          if (n.name () == "ShowCenter" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowCenter_.present ())
            {
              this->ShowCenter_.set (ShowCenterTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBottom
          //
          if (n.name () == "ShowBottom" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBottom_.present ())
            {
              this->ShowBottom_.set (ShowBottomTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!VerticalFilling_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VerticalFilling",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxColumn_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxColumn",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxRow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxRow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WidthBox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WidthBox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HeigthBox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeigthBox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SpacingBox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SpacingBox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowHeader_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowHeader",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowCenter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowCenter",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBottom_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBottom",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      RegisterWidgetConfiguration* RegisterWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class RegisterWidgetConfiguration (*this, f, c);
      }

      RegisterWidgetConfiguration::
      ~RegisterWidgetConfiguration ()
      {
      }

      bool
      operator== (const RegisterWidgetConfiguration& x, const RegisterWidgetConfiguration& y)
      {
        if (!(x.getVerticalFilling () == y.getVerticalFilling ()))
          return false;

        if (!(x.getMaxColumn () == y.getMaxColumn ()))
          return false;

        if (!(x.getMaxRow () == y.getMaxRow ()))
          return false;

        if (!(x.getWidthBox () == y.getWidthBox ()))
          return false;

        if (!(x.getHeigthBox () == y.getHeigthBox ()))
          return false;

        if (!(x.getSpacingBox () == y.getSpacingBox ()))
          return false;

        if (!(x.getShowHeader () == y.getShowHeader ()))
          return false;

        if (!(x.getShowCenter () == y.getShowCenter ()))
          return false;

        if (!(x.getShowBottom () == y.getShowBottom ()))
          return false;

        return true;
      }

      bool
      operator!= (const RegisterWidgetConfiguration& x, const RegisterWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // ElementType
      //

      ElementType::
      ElementType (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_ElementType_convert ();
      }

      ElementType::
      ElementType (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_ElementType_convert ();
      }

      ElementType::
      ElementType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_ElementType_convert ();
      }

      ElementType* ElementType::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ElementType (*this, f, c);
      }

      ElementType::Value ElementType::
      _xsd_ElementType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ElementType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_ElementType_indexes_,
                          _xsd_ElementType_indexes_ + 4,
                          *this,
                          c));

        if (i == _xsd_ElementType_indexes_ + 4 || _xsd_ElementType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const ElementType::
      _xsd_ElementType_literals_[4] =
      {
        "numeric",
        "alpha",
        "alpha-numeric",
        "custom"
      };

      const ElementType::Value ElementType::
      _xsd_ElementType_indexes_[4] =
      {
        ::Smartmatic::SAES::Configuration::ElementType::CONFIGURATION_ALPHA,
        ::Smartmatic::SAES::Configuration::ElementType::CONFIGURATION_ALPHA_NUMERIC,
        ::Smartmatic::SAES::Configuration::ElementType::CONFIGURATION_CUSTOM,
        ::Smartmatic::SAES::Configuration::ElementType::CONFIGURATION_NUMERIC
      };

      // InfoMachineConfiguration
      //

      InfoMachineConfiguration::
      InfoMachineConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_InfoMachineConfiguration_convert ();
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (const ::xercesc::DOMAttr& a,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_InfoMachineConfiguration_convert ();
      }

      InfoMachineConfiguration::
      InfoMachineConfiguration (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_InfoMachineConfiguration_convert ();
      }

      InfoMachineConfiguration* InfoMachineConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class InfoMachineConfiguration (*this, f, c);
      }

      InfoMachineConfiguration::Value InfoMachineConfiguration::
      _xsd_InfoMachineConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_InfoMachineConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_InfoMachineConfiguration_indexes_,
                          _xsd_InfoMachineConfiguration_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_InfoMachineConfiguration_indexes_ + 2 || _xsd_InfoMachineConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const InfoMachineConfiguration::
      _xsd_InfoMachineConfiguration_literals_[2] =
      {
        "pm",
        "vm"
      };

      const InfoMachineConfiguration::Value InfoMachineConfiguration::
      _xsd_InfoMachineConfiguration_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::InfoMachineConfiguration::CONFIGURATION_PM,
        ::Smartmatic::SAES::Configuration::InfoMachineConfiguration::CONFIGURATION_VM
      };

      // SmartCardReaderDiagnosisConfiguration
      //

      SmartCardReaderDiagnosisConfiguration::
      SmartCardReaderDiagnosisConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeoutToFail_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SmartCardReaderDiagnosisConfiguration::
      SmartCardReaderDiagnosisConfiguration (const TimeoutToFailType& TimeoutToFail)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeoutToFail_ (TimeoutToFail, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SmartCardReaderDiagnosisConfiguration::
      SmartCardReaderDiagnosisConfiguration (const SmartCardReaderDiagnosisConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        TimeoutToFail_ (x.TimeoutToFail_, f, this)
      {
      }

      SmartCardReaderDiagnosisConfiguration::
      SmartCardReaderDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f,
                                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        TimeoutToFail_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void SmartCardReaderDiagnosisConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TimeoutToFail
          //
          if (n.name () == "TimeoutToFail" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeoutToFail_.present ())
            {
              this->TimeoutToFail_.set (TimeoutToFailTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!TimeoutToFail_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeoutToFail",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      SmartCardReaderDiagnosisConfiguration* SmartCardReaderDiagnosisConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class SmartCardReaderDiagnosisConfiguration (*this, f, c);
      }

      SmartCardReaderDiagnosisConfiguration::
      ~SmartCardReaderDiagnosisConfiguration ()
      {
      }

      bool
      operator== (const SmartCardReaderDiagnosisConfiguration& x, const SmartCardReaderDiagnosisConfiguration& y)
      {
        if (!(x.getTimeoutToFail () == y.getTimeoutToFail ()))
          return false;

        return true;
      }

      bool
      operator!= (const SmartCardReaderDiagnosisConfiguration& x, const SmartCardReaderDiagnosisConfiguration& y)
      {
        return !(x == y);
      }

      // ChangeHourFunctionalityConfiguration
      //

      ChangeHourFunctionalityConfiguration::
      ChangeHourFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitlesLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrincipalTitleLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonArrowWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonArrowHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonValidateWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonValidateHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FontEntrySize_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TableVerticalSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ChangeHourFunctionalityConfiguration::
      ChangeHourFunctionalityConfiguration (const TimeLabelConfigurationType& TimeLabelConfiguration,
                                            const TitlesLabelConfigurationType& TitlesLabelConfiguration,
                                            const PrincipalTitleLabelConfigurationType& PrincipalTitleLabelConfiguration,
                                            const ButtonArrowWidthType& ButtonArrowWidth,
                                            const ButtonArrowHeightType& ButtonArrowHeight,
                                            const ButtonValidateWidthType& ButtonValidateWidth,
                                            const ButtonValidateHeightType& ButtonValidateHeight,
                                            const EntryWidthType& EntryWidth,
                                            const EntryHeightType& EntryHeight,
                                            const FontEntrySizeType& FontEntrySize,
                                            const TableVerticalSpacingType& TableVerticalSpacing)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeLabelConfiguration_ (TimeLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitlesLabelConfiguration_ (TitlesLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrincipalTitleLabelConfiguration_ (PrincipalTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonArrowWidth_ (ButtonArrowWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonArrowHeight_ (ButtonArrowHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonValidateWidth_ (ButtonValidateWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonValidateHeight_ (ButtonValidateHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (EntryWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryHeight_ (EntryHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontEntrySize_ (FontEntrySize, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TableVerticalSpacing_ (TableVerticalSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ChangeHourFunctionalityConfiguration::
      ChangeHourFunctionalityConfiguration (::std::auto_ptr< TimeLabelConfigurationType >& TimeLabelConfiguration,
                                            ::std::auto_ptr< TitlesLabelConfigurationType >& TitlesLabelConfiguration,
                                            ::std::auto_ptr< PrincipalTitleLabelConfigurationType >& PrincipalTitleLabelConfiguration,
                                            const ButtonArrowWidthType& ButtonArrowWidth,
                                            const ButtonArrowHeightType& ButtonArrowHeight,
                                            const ButtonValidateWidthType& ButtonValidateWidth,
                                            const ButtonValidateHeightType& ButtonValidateHeight,
                                            const EntryWidthType& EntryWidth,
                                            const EntryHeightType& EntryHeight,
                                            const FontEntrySizeType& FontEntrySize,
                                            const TableVerticalSpacingType& TableVerticalSpacing)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeLabelConfiguration_ (TimeLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitlesLabelConfiguration_ (TitlesLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrincipalTitleLabelConfiguration_ (PrincipalTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonArrowWidth_ (ButtonArrowWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonArrowHeight_ (ButtonArrowHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonValidateWidth_ (ButtonValidateWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonValidateHeight_ (ButtonValidateHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (EntryWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryHeight_ (EntryHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FontEntrySize_ (FontEntrySize, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TableVerticalSpacing_ (TableVerticalSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ChangeHourFunctionalityConfiguration::
      ChangeHourFunctionalityConfiguration (const ChangeHourFunctionalityConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        TimeLabelConfiguration_ (x.TimeLabelConfiguration_, f, this),
        TitlesLabelConfiguration_ (x.TitlesLabelConfiguration_, f, this),
        PrincipalTitleLabelConfiguration_ (x.PrincipalTitleLabelConfiguration_, f, this),
        ButtonArrowWidth_ (x.ButtonArrowWidth_, f, this),
        ButtonArrowHeight_ (x.ButtonArrowHeight_, f, this),
        ButtonValidateWidth_ (x.ButtonValidateWidth_, f, this),
        ButtonValidateHeight_ (x.ButtonValidateHeight_, f, this),
        EntryWidth_ (x.EntryWidth_, f, this),
        EntryHeight_ (x.EntryHeight_, f, this),
        FontEntrySize_ (x.FontEntrySize_, f, this),
        TableVerticalSpacing_ (x.TableVerticalSpacing_, f, this)
      {
      }

      ChangeHourFunctionalityConfiguration::
      ChangeHourFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        TimeLabelConfiguration_ (f, this),
        TitlesLabelConfiguration_ (f, this),
        PrincipalTitleLabelConfiguration_ (f, this),
        ButtonArrowWidth_ (f, this),
        ButtonArrowHeight_ (f, this),
        ButtonValidateWidth_ (f, this),
        ButtonValidateHeight_ (f, this),
        EntryWidth_ (f, this),
        EntryHeight_ (f, this),
        FontEntrySize_ (f, this),
        TableVerticalSpacing_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ChangeHourFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TimeLabelConfiguration
          //
          if (n.name () == "TimeLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TimeLabelConfigurationType > r (
              TimeLabelConfigurationTraits::create (i, f, this));

            if (!TimeLabelConfiguration_.present ())
            {
              this->TimeLabelConfiguration_.set (r);
              continue;
            }
          }

          // TitlesLabelConfiguration
          //
          if (n.name () == "TitlesLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitlesLabelConfigurationType > r (
              TitlesLabelConfigurationTraits::create (i, f, this));

            if (!TitlesLabelConfiguration_.present ())
            {
              this->TitlesLabelConfiguration_.set (r);
              continue;
            }
          }

          // PrincipalTitleLabelConfiguration
          //
          if (n.name () == "PrincipalTitleLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PrincipalTitleLabelConfigurationType > r (
              PrincipalTitleLabelConfigurationTraits::create (i, f, this));

            if (!PrincipalTitleLabelConfiguration_.present ())
            {
              this->PrincipalTitleLabelConfiguration_.set (r);
              continue;
            }
          }

          // ButtonArrowWidth
          //
          if (n.name () == "ButtonArrowWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonArrowWidth_.present ())
            {
              this->ButtonArrowWidth_.set (ButtonArrowWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonArrowHeight
          //
          if (n.name () == "ButtonArrowHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonArrowHeight_.present ())
            {
              this->ButtonArrowHeight_.set (ButtonArrowHeightTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonValidateWidth
          //
          if (n.name () == "ButtonValidateWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonValidateWidth_.present ())
            {
              this->ButtonValidateWidth_.set (ButtonValidateWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonValidateHeight
          //
          if (n.name () == "ButtonValidateHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonValidateHeight_.present ())
            {
              this->ButtonValidateHeight_.set (ButtonValidateHeightTraits::create (i, f, this));
              continue;
            }
          }

          // EntryWidth
          //
          if (n.name () == "EntryWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EntryWidth_.present ())
            {
              this->EntryWidth_.set (EntryWidthTraits::create (i, f, this));
              continue;
            }
          }

          // EntryHeight
          //
          if (n.name () == "EntryHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EntryHeight_.present ())
            {
              this->EntryHeight_.set (EntryHeightTraits::create (i, f, this));
              continue;
            }
          }

          // FontEntrySize
          //
          if (n.name () == "FontEntrySize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FontEntrySize_.present ())
            {
              this->FontEntrySize_.set (FontEntrySizeTraits::create (i, f, this));
              continue;
            }
          }

          // TableVerticalSpacing
          //
          if (n.name () == "TableVerticalSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TableVerticalSpacing_.present ())
            {
              this->TableVerticalSpacing_.set (TableVerticalSpacingTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!TimeLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitlesLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitlesLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrincipalTitleLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrincipalTitleLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonArrowWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonArrowWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonArrowHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonArrowHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonValidateWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonValidateWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonValidateHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonValidateHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EntryWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EntryWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EntryHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EntryHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FontEntrySize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontEntrySize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TableVerticalSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TableVerticalSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ChangeHourFunctionalityConfiguration* ChangeHourFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ChangeHourFunctionalityConfiguration (*this, f, c);
      }

      ChangeHourFunctionalityConfiguration::
      ~ChangeHourFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const ChangeHourFunctionalityConfiguration& x, const ChangeHourFunctionalityConfiguration& y)
      {
        if (!(x.getTimeLabelConfiguration () == y.getTimeLabelConfiguration ()))
          return false;

        if (!(x.getTitlesLabelConfiguration () == y.getTitlesLabelConfiguration ()))
          return false;

        if (!(x.getPrincipalTitleLabelConfiguration () == y.getPrincipalTitleLabelConfiguration ()))
          return false;

        if (!(x.getButtonArrowWidth () == y.getButtonArrowWidth ()))
          return false;

        if (!(x.getButtonArrowHeight () == y.getButtonArrowHeight ()))
          return false;

        if (!(x.getButtonValidateWidth () == y.getButtonValidateWidth ()))
          return false;

        if (!(x.getButtonValidateHeight () == y.getButtonValidateHeight ()))
          return false;

        if (!(x.getEntryWidth () == y.getEntryWidth ()))
          return false;

        if (!(x.getEntryHeight () == y.getEntryHeight ()))
          return false;

        if (!(x.getFontEntrySize () == y.getFontEntrySize ()))
          return false;

        if (!(x.getTableVerticalSpacing () == y.getTableVerticalSpacing ()))
          return false;

        return true;
      }

      bool
      operator!= (const ChangeHourFunctionalityConfiguration& x, const ChangeHourFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // FunctionalitiesConfiguration
      //

      FunctionalitiesConfiguration::
      FunctionalitiesConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        FunctionalityConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalitiesConfiguration::
      FunctionalitiesConfiguration (const FunctionalitiesConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        FunctionalityConfiguration_ (x.FunctionalityConfiguration_, f, this)
      {
      }

      FunctionalitiesConfiguration::
      FunctionalitiesConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        FunctionalityConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FunctionalitiesConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FunctionalityConfiguration
          //
          if (n.name () == "FunctionalityConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FunctionalityConfigurationType > r (
              FunctionalityConfigurationTraits::create (i, f, this));

            this->FunctionalityConfiguration_.push_back (r);
            continue;
          }

          break;
        }
      }

      FunctionalitiesConfiguration* FunctionalitiesConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FunctionalitiesConfiguration (*this, f, c);
      }

      FunctionalitiesConfiguration::
      ~FunctionalitiesConfiguration ()
      {
      }

      bool
      operator== (const FunctionalitiesConfiguration& x, const FunctionalitiesConfiguration& y)
      {
        if (!(x.getFunctionalityConfiguration () == y.getFunctionalityConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const FunctionalitiesConfiguration& x, const FunctionalitiesConfiguration& y)
      {
        return !(x == y);
      }

      // RunFunctionalityConfiguration
      //

      RunFunctionalityConfiguration::
      RunFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        FunctionalityDescriptor_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      RunFunctionalityConfiguration::
      RunFunctionalityConfiguration (const FunctionalityDescriptorType& FunctionalityDescriptor)
      : ::Smartmatic::ConfigurationTypes::Type (),
        FunctionalityDescriptor_ (FunctionalityDescriptor, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      RunFunctionalityConfiguration::
      RunFunctionalityConfiguration (const RunFunctionalityConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        FunctionalityDescriptor_ (x.FunctionalityDescriptor_, f, this)
      {
      }

      RunFunctionalityConfiguration::
      RunFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        FunctionalityDescriptor_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RunFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FunctionalityDescriptor
          //
          if (n.name () == "FunctionalityDescriptor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FunctionalityDescriptorType > r (
              FunctionalityDescriptorTraits::create (i, f, this));

            if (!FunctionalityDescriptor_.present ())
            {
              this->FunctionalityDescriptor_.set (r);
              continue;
            }
          }

          break;
        }

        if (!FunctionalityDescriptor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FunctionalityDescriptor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      RunFunctionalityConfiguration* RunFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class RunFunctionalityConfiguration (*this, f, c);
      }

      RunFunctionalityConfiguration::
      ~RunFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const RunFunctionalityConfiguration& x, const RunFunctionalityConfiguration& y)
      {
        if (!(x.getFunctionalityDescriptor () == y.getFunctionalityDescriptor ()))
          return false;

        return true;
      }

      bool
      operator!= (const RunFunctionalityConfiguration& x, const RunFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // InstallationWizardConfiguration
      //

      InstallationWizardConfiguration::
      InstallationWizardConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        AskForId_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IncomePassphrase_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      InstallationWizardConfiguration::
      InstallationWizardConfiguration (const AskForIdType& AskForId,
                                       const IncomePassphraseType& IncomePassphrase)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AskForId_ (AskForId, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncomePassphrase_ (IncomePassphrase, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      InstallationWizardConfiguration::
      InstallationWizardConfiguration (const InstallationWizardConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        AskForId_ (x.AskForId_, f, this),
        IncomePassphrase_ (x.IncomePassphrase_, f, this)
      {
      }

      InstallationWizardConfiguration::
      InstallationWizardConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        AskForId_ (f, this),
        IncomePassphrase_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void InstallationWizardConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // AskForId
          //
          if (n.name () == "AskForId" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AskForId_.present ())
            {
              this->AskForId_.set (AskForIdTraits::create (i, f, this));
              continue;
            }
          }

          // IncomePassphrase
          //
          if (n.name () == "IncomePassphrase" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IncomePassphraseType > r (
              IncomePassphraseTraits::create (i, f, this));

            if (!IncomePassphrase_.present ())
            {
              this->IncomePassphrase_.set (r);
              continue;
            }
          }

          break;
        }

        if (!AskForId_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AskForId",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IncomePassphrase_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncomePassphrase",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      InstallationWizardConfiguration* InstallationWizardConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class InstallationWizardConfiguration (*this, f, c);
      }

      InstallationWizardConfiguration::
      ~InstallationWizardConfiguration ()
      {
      }

      bool
      operator== (const InstallationWizardConfiguration& x, const InstallationWizardConfiguration& y)
      {
        if (!(x.getAskForId () == y.getAskForId ()))
          return false;

        if (!(x.getIncomePassphrase () == y.getIncomePassphrase ()))
          return false;

        return true;
      }

      bool
      operator!= (const InstallationWizardConfiguration& x, const InstallationWizardConfiguration& y)
      {
        return !(x == y);
      }

      // PMWidgetConfiguration
      //

      PMWidgetConfiguration::
      PMWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowImages_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LoginCaseSensitiveConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PasswordWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContingencyWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PMWidgetConfiguration::
      PMWidgetConfiguration (const ShowImagesType& ShowImages,
                             const LoginCaseSensitiveConfigurationType& LoginCaseSensitiveConfiguration,
                             const PasswordWidgetConfigurationType& PasswordWidgetConfiguration,
                             const ContingencyWidgetConfigurationType& ContingencyWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowImages_ (ShowImages, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LoginCaseSensitiveConfiguration_ (LoginCaseSensitiveConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PasswordWidgetConfiguration_ (PasswordWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContingencyWidgetConfiguration_ (ContingencyWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PMWidgetConfiguration::
      PMWidgetConfiguration (const ShowImagesType& ShowImages,
                             const LoginCaseSensitiveConfigurationType& LoginCaseSensitiveConfiguration,
                             ::std::auto_ptr< PasswordWidgetConfigurationType >& PasswordWidgetConfiguration,
                             ::std::auto_ptr< ContingencyWidgetConfigurationType >& ContingencyWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowImages_ (ShowImages, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LoginCaseSensitiveConfiguration_ (LoginCaseSensitiveConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PasswordWidgetConfiguration_ (PasswordWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContingencyWidgetConfiguration_ (ContingencyWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PMWidgetConfiguration::
      PMWidgetConfiguration (const PMWidgetConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ShowImages_ (x.ShowImages_, f, this),
        LoginCaseSensitiveConfiguration_ (x.LoginCaseSensitiveConfiguration_, f, this),
        PasswordWidgetConfiguration_ (x.PasswordWidgetConfiguration_, f, this),
        ContingencyWidgetConfiguration_ (x.ContingencyWidgetConfiguration_, f, this)
      {
      }

      PMWidgetConfiguration::
      PMWidgetConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ShowImages_ (f, this),
        LoginCaseSensitiveConfiguration_ (f, this),
        PasswordWidgetConfiguration_ (f, this),
        ContingencyWidgetConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PMWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShowImages
          //
          if (n.name () == "ShowImages" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowImages_.present ())
            {
              this->ShowImages_.set (ShowImagesTraits::create (i, f, this));
              continue;
            }
          }

          // LoginCaseSensitiveConfiguration
          //
          if (n.name () == "LoginCaseSensitiveConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!LoginCaseSensitiveConfiguration_.present ())
            {
              this->LoginCaseSensitiveConfiguration_.set (LoginCaseSensitiveConfigurationTraits::create (i, f, this));
              continue;
            }
          }

          // PasswordWidgetConfiguration
          //
          if (n.name () == "PasswordWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PasswordWidgetConfigurationType > r (
              PasswordWidgetConfigurationTraits::create (i, f, this));

            if (!PasswordWidgetConfiguration_.present ())
            {
              this->PasswordWidgetConfiguration_.set (r);
              continue;
            }
          }

          // ContingencyWidgetConfiguration
          //
          if (n.name () == "ContingencyWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ContingencyWidgetConfigurationType > r (
              ContingencyWidgetConfigurationTraits::create (i, f, this));

            if (!ContingencyWidgetConfiguration_.present ())
            {
              this->ContingencyWidgetConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ShowImages_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowImages",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LoginCaseSensitiveConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LoginCaseSensitiveConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PasswordWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PasswordWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContingencyWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContingencyWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PMWidgetConfiguration* PMWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PMWidgetConfiguration (*this, f, c);
      }

      PMWidgetConfiguration::
      ~PMWidgetConfiguration ()
      {
      }

      bool
      operator== (const PMWidgetConfiguration& x, const PMWidgetConfiguration& y)
      {
        if (!(x.getShowImages () == y.getShowImages ()))
          return false;

        if (!(x.getLoginCaseSensitiveConfiguration () == y.getLoginCaseSensitiveConfiguration ()))
          return false;

        if (!(x.getPasswordWidgetConfiguration () == y.getPasswordWidgetConfiguration ()))
          return false;

        if (!(x.getContingencyWidgetConfiguration () == y.getContingencyWidgetConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const PMWidgetConfiguration& x, const PMWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // CardActivatorFunctionalityConfiguration
      //

      CardActivatorFunctionalityConfiguration::
      CardActivatorFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        CustomAttributesPresentation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UnSelectedColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MinimumDemoCounterToAllowActivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedActivationBySelection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardStatisticsConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivatedAfterInsertingCard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowAudioCheck_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivationTotalCountConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardActivatorFunctionalityConfiguration::
      CardActivatorFunctionalityConfiguration (const CustomAttributesPresentationType& CustomAttributesPresentation,
                                               const SelectedColorType& SelectedColor,
                                               const UnSelectedColorType& UnSelectedColor,
                                               const MinimumDemoCounterToAllowActivationType& MinimumDemoCounterToAllowActivation,
                                               const AssistedActivationBySelectionType& AssistedActivationBySelection,
                                               const ShowConfirmationButtonsType& ShowConfirmationButtons,
                                               const CardStatisticsConfigurationType& CardStatisticsConfiguration,
                                               const StatisticsTitleLabelConfigurationType& StatisticsTitleLabelConfiguration,
                                               const StatisticsTitleColorType& StatisticsTitleColor,
                                               const ActivatedAfterInsertingCardType& ActivatedAfterInsertingCard,
                                               const ShowAudioCheckType& ShowAudioCheck,
                                               const CardActivationTotalCountConfigurationType& CardActivationTotalCountConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        CustomAttributesPresentation_ (CustomAttributesPresentation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedColor_ (SelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnSelectedColor_ (UnSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MinimumDemoCounterToAllowActivation_ (MinimumDemoCounterToAllowActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedActivationBySelection_ (AssistedActivationBySelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationButtons_ (ShowConfirmationButtons, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardStatisticsConfiguration_ (CardStatisticsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (StatisticsTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (StatisticsTitleColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivatedAfterInsertingCard_ (ActivatedAfterInsertingCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowAudioCheck_ (ShowAudioCheck, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivationTotalCountConfiguration_ (CardActivationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardActivatorFunctionalityConfiguration::
      CardActivatorFunctionalityConfiguration (const CustomAttributesPresentationType& CustomAttributesPresentation,
                                               ::std::auto_ptr< SelectedColorType >& SelectedColor,
                                               ::std::auto_ptr< UnSelectedColorType >& UnSelectedColor,
                                               const MinimumDemoCounterToAllowActivationType& MinimumDemoCounterToAllowActivation,
                                               const AssistedActivationBySelectionType& AssistedActivationBySelection,
                                               const ShowConfirmationButtonsType& ShowConfirmationButtons,
                                               ::std::auto_ptr< CardStatisticsConfigurationType >& CardStatisticsConfiguration,
                                               ::std::auto_ptr< StatisticsTitleLabelConfigurationType >& StatisticsTitleLabelConfiguration,
                                               ::std::auto_ptr< StatisticsTitleColorType >& StatisticsTitleColor,
                                               const ActivatedAfterInsertingCardType& ActivatedAfterInsertingCard,
                                               const ShowAudioCheckType& ShowAudioCheck,
                                               ::std::auto_ptr< CardActivationTotalCountConfigurationType >& CardActivationTotalCountConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        CustomAttributesPresentation_ (CustomAttributesPresentation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedColor_ (SelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnSelectedColor_ (UnSelectedColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MinimumDemoCounterToAllowActivation_ (MinimumDemoCounterToAllowActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AssistedActivationBySelection_ (AssistedActivationBySelection, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationButtons_ (ShowConfirmationButtons, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardStatisticsConfiguration_ (CardStatisticsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (StatisticsTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (StatisticsTitleColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivatedAfterInsertingCard_ (ActivatedAfterInsertingCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowAudioCheck_ (ShowAudioCheck, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivationTotalCountConfiguration_ (CardActivationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardActivatorFunctionalityConfiguration::
      CardActivatorFunctionalityConfiguration (const CardActivatorFunctionalityConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        CustomAttributesPresentation_ (x.CustomAttributesPresentation_, f, this),
        SelectedColor_ (x.SelectedColor_, f, this),
        UnSelectedColor_ (x.UnSelectedColor_, f, this),
        MinimumDemoCounterToAllowActivation_ (x.MinimumDemoCounterToAllowActivation_, f, this),
        AssistedActivationBySelection_ (x.AssistedActivationBySelection_, f, this),
        ShowConfirmationButtons_ (x.ShowConfirmationButtons_, f, this),
        CardStatisticsConfiguration_ (x.CardStatisticsConfiguration_, f, this),
        StatisticsTitleLabelConfiguration_ (x.StatisticsTitleLabelConfiguration_, f, this),
        StatisticsTitleColor_ (x.StatisticsTitleColor_, f, this),
        ActivatedAfterInsertingCard_ (x.ActivatedAfterInsertingCard_, f, this),
        ShowAudioCheck_ (x.ShowAudioCheck_, f, this),
        CardActivationTotalCountConfiguration_ (x.CardActivationTotalCountConfiguration_, f, this)
      {
      }

      CardActivatorFunctionalityConfiguration::
      CardActivatorFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        CustomAttributesPresentation_ (f, this),
        SelectedColor_ (f, this),
        UnSelectedColor_ (f, this),
        MinimumDemoCounterToAllowActivation_ (f, this),
        AssistedActivationBySelection_ (f, this),
        ShowConfirmationButtons_ (f, this),
        CardStatisticsConfiguration_ (f, this),
        StatisticsTitleLabelConfiguration_ (f, this),
        StatisticsTitleColor_ (f, this),
        ActivatedAfterInsertingCard_ (f, this),
        ShowAudioCheck_ (f, this),
        CardActivationTotalCountConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CardActivatorFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // CustomAttributesPresentation
          //
          if (n.name () == "CustomAttributesPresentation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CustomAttributesPresentationType > r (
              CustomAttributesPresentationTraits::create (i, f, this));

            if (!CustomAttributesPresentation_.present ())
            {
              this->CustomAttributesPresentation_.set (r);
              continue;
            }
          }

          // SelectedColor
          //
          if (n.name () == "SelectedColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectedColorType > r (
              SelectedColorTraits::create (i, f, this));

            if (!SelectedColor_.present ())
            {
              this->SelectedColor_.set (r);
              continue;
            }
          }

          // UnSelectedColor
          //
          if (n.name () == "UnSelectedColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< UnSelectedColorType > r (
              UnSelectedColorTraits::create (i, f, this));

            if (!UnSelectedColor_.present ())
            {
              this->UnSelectedColor_.set (r);
              continue;
            }
          }

          // MinimumDemoCounterToAllowActivation
          //
          if (n.name () == "MinimumDemoCounterToAllowActivation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MinimumDemoCounterToAllowActivation_.present ())
            {
              this->MinimumDemoCounterToAllowActivation_.set (MinimumDemoCounterToAllowActivationTraits::create (i, f, this));
              continue;
            }
          }

          // AssistedActivationBySelection
          //
          if (n.name () == "AssistedActivationBySelection" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AssistedActivationBySelection_.present ())
            {
              this->AssistedActivationBySelection_.set (AssistedActivationBySelectionTraits::create (i, f, this));
              continue;
            }
          }

          // ShowConfirmationButtons
          //
          if (n.name () == "ShowConfirmationButtons" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowConfirmationButtons_.present ())
            {
              this->ShowConfirmationButtons_.set (ShowConfirmationButtonsTraits::create (i, f, this));
              continue;
            }
          }

          // CardStatisticsConfiguration
          //
          if (n.name () == "CardStatisticsConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardStatisticsConfigurationType > r (
              CardStatisticsConfigurationTraits::create (i, f, this));

            if (!CardStatisticsConfiguration_.present ())
            {
              this->CardStatisticsConfiguration_.set (r);
              continue;
            }
          }

          // StatisticsTitleLabelConfiguration
          //
          if (n.name () == "StatisticsTitleLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsTitleLabelConfigurationType > r (
              StatisticsTitleLabelConfigurationTraits::create (i, f, this));

            if (!StatisticsTitleLabelConfiguration_.present ())
            {
              this->StatisticsTitleLabelConfiguration_.set (r);
              continue;
            }
          }

          // StatisticsTitleColor
          //
          if (n.name () == "StatisticsTitleColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsTitleColorType > r (
              StatisticsTitleColorTraits::create (i, f, this));

            if (!StatisticsTitleColor_.present ())
            {
              this->StatisticsTitleColor_.set (r);
              continue;
            }
          }

          // ActivatedAfterInsertingCard
          //
          if (n.name () == "ActivatedAfterInsertingCard" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ActivatedAfterInsertingCard_.present ())
            {
              this->ActivatedAfterInsertingCard_.set (ActivatedAfterInsertingCardTraits::create (i, f, this));
              continue;
            }
          }

          // ShowAudioCheck
          //
          if (n.name () == "ShowAudioCheck" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowAudioCheck_.present ())
            {
              this->ShowAudioCheck_.set (ShowAudioCheckTraits::create (i, f, this));
              continue;
            }
          }

          // CardActivationTotalCountConfiguration
          //
          if (n.name () == "CardActivationTotalCountConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivationTotalCountConfigurationType > r (
              CardActivationTotalCountConfigurationTraits::create (i, f, this));

            if (!CardActivationTotalCountConfiguration_.present ())
            {
              this->CardActivationTotalCountConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!CustomAttributesPresentation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CustomAttributesPresentation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectedColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectedColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UnSelectedColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UnSelectedColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MinimumDemoCounterToAllowActivation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinimumDemoCounterToAllowActivation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AssistedActivationBySelection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AssistedActivationBySelection",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowConfirmationButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowConfirmationButtons",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardStatisticsConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardStatisticsConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsTitleLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsTitleLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsTitleColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsTitleColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ActivatedAfterInsertingCard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ActivatedAfterInsertingCard",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowAudioCheck_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowAudioCheck",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivationTotalCountConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivationTotalCountConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CardActivatorFunctionalityConfiguration* CardActivatorFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CardActivatorFunctionalityConfiguration (*this, f, c);
      }

      CardActivatorFunctionalityConfiguration::
      ~CardActivatorFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CardActivatorFunctionalityConfiguration& x, const CardActivatorFunctionalityConfiguration& y)
      {
        if (!(x.getCustomAttributesPresentation () == y.getCustomAttributesPresentation ()))
          return false;

        if (!(x.getSelectedColor () == y.getSelectedColor ()))
          return false;

        if (!(x.getUnSelectedColor () == y.getUnSelectedColor ()))
          return false;

        if (!(x.getMinimumDemoCounterToAllowActivation () == y.getMinimumDemoCounterToAllowActivation ()))
          return false;

        if (!(x.getAssistedActivationBySelection () == y.getAssistedActivationBySelection ()))
          return false;

        if (!(x.getShowConfirmationButtons () == y.getShowConfirmationButtons ()))
          return false;

        if (!(x.getCardStatisticsConfiguration () == y.getCardStatisticsConfiguration ()))
          return false;

        if (!(x.getStatisticsTitleLabelConfiguration () == y.getStatisticsTitleLabelConfiguration ()))
          return false;

        if (!(x.getStatisticsTitleColor () == y.getStatisticsTitleColor ()))
          return false;

        if (!(x.getActivatedAfterInsertingCard () == y.getActivatedAfterInsertingCard ()))
          return false;

        if (!(x.getShowAudioCheck () == y.getShowAudioCheck ()))
          return false;

        if (!(x.getCardActivationTotalCountConfiguration () == y.getCardActivationTotalCountConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const CardActivatorFunctionalityConfiguration& x, const CardActivatorFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // CardRecoveryFunctionalityConfiguration
      //

      CardRecoveryFunctionalityConfiguration::
      CardRecoveryFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimumDemoCounterToAllowActivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CleanOnCorrectActivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CleanOnIncorrectActivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardStatisticsConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardRecoveryFunctionalityConfiguration::
      CardRecoveryFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType& MinimumDemoCounterToAllowActivation,
                                              const ShowConfirmationButtonsType& ShowConfirmationButtons,
                                              const CleanOnCorrectActivationType& CleanOnCorrectActivation,
                                              const CleanOnIncorrectActivationType& CleanOnIncorrectActivation,
                                              const CardStatisticsConfigurationType& CardStatisticsConfiguration,
                                              const StatisticsTitleLabelConfigurationType& StatisticsTitleLabelConfiguration,
                                              const StatisticsTitleColorType& StatisticsTitleColor)
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimumDemoCounterToAllowActivation_ (MinimumDemoCounterToAllowActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationButtons_ (ShowConfirmationButtons, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CleanOnCorrectActivation_ (CleanOnCorrectActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CleanOnIncorrectActivation_ (CleanOnIncorrectActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardStatisticsConfiguration_ (CardStatisticsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (StatisticsTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (StatisticsTitleColor, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardRecoveryFunctionalityConfiguration::
      CardRecoveryFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType& MinimumDemoCounterToAllowActivation,
                                              const ShowConfirmationButtonsType& ShowConfirmationButtons,
                                              const CleanOnCorrectActivationType& CleanOnCorrectActivation,
                                              const CleanOnIncorrectActivationType& CleanOnIncorrectActivation,
                                              ::std::auto_ptr< CardStatisticsConfigurationType >& CardStatisticsConfiguration,
                                              ::std::auto_ptr< StatisticsTitleLabelConfigurationType >& StatisticsTitleLabelConfiguration,
                                              ::std::auto_ptr< StatisticsTitleColorType >& StatisticsTitleColor)
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimumDemoCounterToAllowActivation_ (MinimumDemoCounterToAllowActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationButtons_ (ShowConfirmationButtons, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CleanOnCorrectActivation_ (CleanOnCorrectActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CleanOnIncorrectActivation_ (CleanOnIncorrectActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardStatisticsConfiguration_ (CardStatisticsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (StatisticsTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (StatisticsTitleColor, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardRecoveryFunctionalityConfiguration::
      CardRecoveryFunctionalityConfiguration (const CardRecoveryFunctionalityConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f,
                                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        MinimumDemoCounterToAllowActivation_ (x.MinimumDemoCounterToAllowActivation_, f, this),
        ShowConfirmationButtons_ (x.ShowConfirmationButtons_, f, this),
        CleanOnCorrectActivation_ (x.CleanOnCorrectActivation_, f, this),
        CleanOnIncorrectActivation_ (x.CleanOnIncorrectActivation_, f, this),
        CardStatisticsConfiguration_ (x.CardStatisticsConfiguration_, f, this),
        StatisticsTitleLabelConfiguration_ (x.StatisticsTitleLabelConfiguration_, f, this),
        StatisticsTitleColor_ (x.StatisticsTitleColor_, f, this)
      {
      }

      CardRecoveryFunctionalityConfiguration::
      CardRecoveryFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f,
                                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        MinimumDemoCounterToAllowActivation_ (f, this),
        ShowConfirmationButtons_ (f, this),
        CleanOnCorrectActivation_ (f, this),
        CleanOnIncorrectActivation_ (f, this),
        CardStatisticsConfiguration_ (f, this),
        StatisticsTitleLabelConfiguration_ (f, this),
        StatisticsTitleColor_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CardRecoveryFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MinimumDemoCounterToAllowActivation
          //
          if (n.name () == "MinimumDemoCounterToAllowActivation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MinimumDemoCounterToAllowActivation_.present ())
            {
              this->MinimumDemoCounterToAllowActivation_.set (MinimumDemoCounterToAllowActivationTraits::create (i, f, this));
              continue;
            }
          }

          // ShowConfirmationButtons
          //
          if (n.name () == "ShowConfirmationButtons" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowConfirmationButtons_.present ())
            {
              this->ShowConfirmationButtons_.set (ShowConfirmationButtonsTraits::create (i, f, this));
              continue;
            }
          }

          // CleanOnCorrectActivation
          //
          if (n.name () == "CleanOnCorrectActivation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CleanOnCorrectActivation_.present ())
            {
              this->CleanOnCorrectActivation_.set (CleanOnCorrectActivationTraits::create (i, f, this));
              continue;
            }
          }

          // CleanOnIncorrectActivation
          //
          if (n.name () == "CleanOnIncorrectActivation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CleanOnIncorrectActivation_.present ())
            {
              this->CleanOnIncorrectActivation_.set (CleanOnIncorrectActivationTraits::create (i, f, this));
              continue;
            }
          }

          // CardStatisticsConfiguration
          //
          if (n.name () == "CardStatisticsConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardStatisticsConfigurationType > r (
              CardStatisticsConfigurationTraits::create (i, f, this));

            if (!CardStatisticsConfiguration_.present ())
            {
              this->CardStatisticsConfiguration_.set (r);
              continue;
            }
          }

          // StatisticsTitleLabelConfiguration
          //
          if (n.name () == "StatisticsTitleLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsTitleLabelConfigurationType > r (
              StatisticsTitleLabelConfigurationTraits::create (i, f, this));

            if (!StatisticsTitleLabelConfiguration_.present ())
            {
              this->StatisticsTitleLabelConfiguration_.set (r);
              continue;
            }
          }

          // StatisticsTitleColor
          //
          if (n.name () == "StatisticsTitleColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsTitleColorType > r (
              StatisticsTitleColorTraits::create (i, f, this));

            if (!StatisticsTitleColor_.present ())
            {
              this->StatisticsTitleColor_.set (r);
              continue;
            }
          }

          break;
        }

        if (!MinimumDemoCounterToAllowActivation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinimumDemoCounterToAllowActivation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowConfirmationButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowConfirmationButtons",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CleanOnCorrectActivation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CleanOnCorrectActivation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CleanOnIncorrectActivation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CleanOnIncorrectActivation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardStatisticsConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardStatisticsConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsTitleLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsTitleLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsTitleColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsTitleColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CardRecoveryFunctionalityConfiguration* CardRecoveryFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CardRecoveryFunctionalityConfiguration (*this, f, c);
      }

      CardRecoveryFunctionalityConfiguration::
      ~CardRecoveryFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CardRecoveryFunctionalityConfiguration& x, const CardRecoveryFunctionalityConfiguration& y)
      {
        if (!(x.getMinimumDemoCounterToAllowActivation () == y.getMinimumDemoCounterToAllowActivation ()))
          return false;

        if (!(x.getShowConfirmationButtons () == y.getShowConfirmationButtons ()))
          return false;

        if (!(x.getCleanOnCorrectActivation () == y.getCleanOnCorrectActivation ()))
          return false;

        if (!(x.getCleanOnIncorrectActivation () == y.getCleanOnIncorrectActivation ()))
          return false;

        if (!(x.getCardStatisticsConfiguration () == y.getCardStatisticsConfiguration ()))
          return false;

        if (!(x.getStatisticsTitleLabelConfiguration () == y.getStatisticsTitleLabelConfiguration ()))
          return false;

        if (!(x.getStatisticsTitleColor () == y.getStatisticsTitleColor ()))
          return false;

        return true;
      }

      bool
      operator!= (const CardRecoveryFunctionalityConfiguration& x, const CardRecoveryFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // VoteDemoFunctionalityConfiguration
      //

      VoteDemoFunctionalityConfiguration::
      VoteDemoFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PersistVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelSelectedConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelUnselectedConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VoteDemoFunctionalityConfiguration::
      VoteDemoFunctionalityConfiguration (const PersistVoteType& PersistVote,
                                          const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                          const BarcodeInParamsType& BarcodeInParams,
                                          const BarcodeOutParamsType& BarcodeOutParams,
                                          const LabelSelectedConfigurationType& LabelSelectedConfiguration,
                                          const LabelUnselectedConfigurationType& LabelUnselectedConfiguration,
                                          const TitleFontConfigurationType& TitleFontConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PersistVote_ (PersistVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelSelectedConfiguration_ (LabelSelectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelUnselectedConfiguration_ (LabelUnselectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConfiguration_ (TitleFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VoteDemoFunctionalityConfiguration::
      VoteDemoFunctionalityConfiguration (const PersistVoteType& PersistVote,
                                          const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                          const BarcodeInParamsType& BarcodeInParams,
                                          const BarcodeOutParamsType& BarcodeOutParams,
                                          ::std::auto_ptr< LabelSelectedConfigurationType >& LabelSelectedConfiguration,
                                          ::std::auto_ptr< LabelUnselectedConfigurationType >& LabelUnselectedConfiguration,
                                          ::std::auto_ptr< TitleFontConfigurationType >& TitleFontConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PersistVote_ (PersistVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelSelectedConfiguration_ (LabelSelectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelUnselectedConfiguration_ (LabelUnselectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConfiguration_ (TitleFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VoteDemoFunctionalityConfiguration::
      VoteDemoFunctionalityConfiguration (const VoteDemoFunctionalityConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PersistVote_ (x.PersistVote_, f, this),
        ShowBarcodeInPreview_ (x.ShowBarcodeInPreview_, f, this),
        BarcodeInParams_ (x.BarcodeInParams_, f, this),
        BarcodeOutParams_ (x.BarcodeOutParams_, f, this),
        LabelSelectedConfiguration_ (x.LabelSelectedConfiguration_, f, this),
        LabelUnselectedConfiguration_ (x.LabelUnselectedConfiguration_, f, this),
        TitleFontConfiguration_ (x.TitleFontConfiguration_, f, this)
      {
      }

      VoteDemoFunctionalityConfiguration::
      VoteDemoFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PersistVote_ (f, this),
        ShowBarcodeInPreview_ (f, this),
        BarcodeInParams_ (f, this),
        BarcodeOutParams_ (f, this),
        LabelSelectedConfiguration_ (f, this),
        LabelUnselectedConfiguration_ (f, this),
        TitleFontConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VoteDemoFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PersistVote
          //
          if (n.name () == "PersistVote" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PersistVote_.present ())
            {
              this->PersistVote_.set (PersistVoteTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBarcodeInPreview
          //
          if (n.name () == "ShowBarcodeInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBarcodeInPreview_.present ())
            {
              this->ShowBarcodeInPreview_.set (ShowBarcodeInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeInParams
          //
          if (n.name () == "BarcodeInParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeInParamsType > r (
              BarcodeInParamsTraits::create (i, f, this));

            if (!BarcodeInParams_.present ())
            {
              this->BarcodeInParams_.set (r);
              continue;
            }
          }

          // BarcodeOutParams
          //
          if (n.name () == "BarcodeOutParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeOutParamsType > r (
              BarcodeOutParamsTraits::create (i, f, this));

            if (!BarcodeOutParams_.present ())
            {
              this->BarcodeOutParams_.set (r);
              continue;
            }
          }

          // LabelSelectedConfiguration
          //
          if (n.name () == "LabelSelectedConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LabelSelectedConfigurationType > r (
              LabelSelectedConfigurationTraits::create (i, f, this));

            if (!LabelSelectedConfiguration_.present ())
            {
              this->LabelSelectedConfiguration_.set (r);
              continue;
            }
          }

          // LabelUnselectedConfiguration
          //
          if (n.name () == "LabelUnselectedConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LabelUnselectedConfigurationType > r (
              LabelUnselectedConfigurationTraits::create (i, f, this));

            if (!LabelUnselectedConfiguration_.present ())
            {
              this->LabelUnselectedConfiguration_.set (r);
              continue;
            }
          }

          // TitleFontConfiguration
          //
          if (n.name () == "TitleFontConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleFontConfigurationType > r (
              TitleFontConfigurationTraits::create (i, f, this));

            if (!TitleFontConfiguration_.present ())
            {
              this->TitleFontConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PersistVote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PersistVote",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBarcodeInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBarcodeInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeInParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeInParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeOutParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeOutParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LabelSelectedConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LabelSelectedConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LabelUnselectedConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LabelUnselectedConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleFontConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleFontConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VoteDemoFunctionalityConfiguration* VoteDemoFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VoteDemoFunctionalityConfiguration (*this, f, c);
      }

      VoteDemoFunctionalityConfiguration::
      ~VoteDemoFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const VoteDemoFunctionalityConfiguration& x, const VoteDemoFunctionalityConfiguration& y)
      {
        if (!(x.getPersistVote () == y.getPersistVote ()))
          return false;

        if (!(x.getShowBarcodeInPreview () == y.getShowBarcodeInPreview ()))
          return false;

        if (!(x.getBarcodeInParams () == y.getBarcodeInParams ()))
          return false;

        if (!(x.getBarcodeOutParams () == y.getBarcodeOutParams ()))
          return false;

        if (!(x.getLabelSelectedConfiguration () == y.getLabelSelectedConfiguration ()))
          return false;

        if (!(x.getLabelUnselectedConfiguration () == y.getLabelUnselectedConfiguration ()))
          return false;

        if (!(x.getTitleFontConfiguration () == y.getTitleFontConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const VoteDemoFunctionalityConfiguration& x, const VoteDemoFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // CardAssistedActivationFunctionalityConfiguration
      //

      CardAssistedActivationFunctionalityConfiguration::
      CardAssistedActivationFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimumDemoCounterToAllowActivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewTitlesColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewContentsColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InstrunctionLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NameLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardAssistedActivationFunctionalityConfiguration::
      CardAssistedActivationFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType& MinimumDemoCounterToAllowActivation,
                                                        const PreviewTitlesColorType& PreviewTitlesColor,
                                                        const PreviewContentsColorType& PreviewContentsColor,
                                                        const InstrunctionLabelConfigurationType& InstrunctionLabelConfiguration,
                                                        const NameLabelConfigurationType& NameLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimumDemoCounterToAllowActivation_ (MinimumDemoCounterToAllowActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewTitlesColor_ (PreviewTitlesColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewContentsColor_ (PreviewContentsColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InstrunctionLabelConfiguration_ (InstrunctionLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NameLabelConfiguration_ (NameLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardAssistedActivationFunctionalityConfiguration::
      CardAssistedActivationFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType& MinimumDemoCounterToAllowActivation,
                                                        ::std::auto_ptr< PreviewTitlesColorType >& PreviewTitlesColor,
                                                        ::std::auto_ptr< PreviewContentsColorType >& PreviewContentsColor,
                                                        ::std::auto_ptr< InstrunctionLabelConfigurationType >& InstrunctionLabelConfiguration,
                                                        ::std::auto_ptr< NameLabelConfigurationType >& NameLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimumDemoCounterToAllowActivation_ (MinimumDemoCounterToAllowActivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewTitlesColor_ (PreviewTitlesColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewContentsColor_ (PreviewContentsColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InstrunctionLabelConfiguration_ (InstrunctionLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NameLabelConfiguration_ (NameLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CardAssistedActivationFunctionalityConfiguration::
      CardAssistedActivationFunctionalityConfiguration (const CardAssistedActivationFunctionalityConfiguration& x,
                                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        MinimumDemoCounterToAllowActivation_ (x.MinimumDemoCounterToAllowActivation_, f, this),
        PreviewTitlesColor_ (x.PreviewTitlesColor_, f, this),
        PreviewContentsColor_ (x.PreviewContentsColor_, f, this),
        InstrunctionLabelConfiguration_ (x.InstrunctionLabelConfiguration_, f, this),
        NameLabelConfiguration_ (x.NameLabelConfiguration_, f, this)
      {
      }

      CardAssistedActivationFunctionalityConfiguration::
      CardAssistedActivationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        MinimumDemoCounterToAllowActivation_ (f, this),
        PreviewTitlesColor_ (f, this),
        PreviewContentsColor_ (f, this),
        InstrunctionLabelConfiguration_ (f, this),
        NameLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CardAssistedActivationFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MinimumDemoCounterToAllowActivation
          //
          if (n.name () == "MinimumDemoCounterToAllowActivation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MinimumDemoCounterToAllowActivation_.present ())
            {
              this->MinimumDemoCounterToAllowActivation_.set (MinimumDemoCounterToAllowActivationTraits::create (i, f, this));
              continue;
            }
          }

          // PreviewTitlesColor
          //
          if (n.name () == "PreviewTitlesColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PreviewTitlesColorType > r (
              PreviewTitlesColorTraits::create (i, f, this));

            if (!PreviewTitlesColor_.present ())
            {
              this->PreviewTitlesColor_.set (r);
              continue;
            }
          }

          // PreviewContentsColor
          //
          if (n.name () == "PreviewContentsColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PreviewContentsColorType > r (
              PreviewContentsColorTraits::create (i, f, this));

            if (!PreviewContentsColor_.present ())
            {
              this->PreviewContentsColor_.set (r);
              continue;
            }
          }

          // InstrunctionLabelConfiguration
          //
          if (n.name () == "InstrunctionLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InstrunctionLabelConfigurationType > r (
              InstrunctionLabelConfigurationTraits::create (i, f, this));

            if (!InstrunctionLabelConfiguration_.present ())
            {
              this->InstrunctionLabelConfiguration_.set (r);
              continue;
            }
          }

          // NameLabelConfiguration
          //
          if (n.name () == "NameLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NameLabelConfigurationType > r (
              NameLabelConfigurationTraits::create (i, f, this));

            if (!NameLabelConfiguration_.present ())
            {
              this->NameLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!MinimumDemoCounterToAllowActivation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinimumDemoCounterToAllowActivation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PreviewTitlesColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PreviewTitlesColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PreviewContentsColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PreviewContentsColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InstrunctionLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InstrunctionLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NameLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NameLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CardAssistedActivationFunctionalityConfiguration* CardAssistedActivationFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CardAssistedActivationFunctionalityConfiguration (*this, f, c);
      }

      CardAssistedActivationFunctionalityConfiguration::
      ~CardAssistedActivationFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CardAssistedActivationFunctionalityConfiguration& x, const CardAssistedActivationFunctionalityConfiguration& y)
      {
        if (!(x.getMinimumDemoCounterToAllowActivation () == y.getMinimumDemoCounterToAllowActivation ()))
          return false;

        if (!(x.getPreviewTitlesColor () == y.getPreviewTitlesColor ()))
          return false;

        if (!(x.getPreviewContentsColor () == y.getPreviewContentsColor ()))
          return false;

        if (!(x.getInstrunctionLabelConfiguration () == y.getInstrunctionLabelConfiguration ()))
          return false;

        if (!(x.getNameLabelConfiguration () == y.getNameLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const CardAssistedActivationFunctionalityConfiguration& x, const CardAssistedActivationFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // PrinterDiagnosisConfiguration
      //

      PrinterDiagnosisConfiguration::
      PrinterDiagnosisConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrintGraphicalForPresident_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DoNotCheckBeforePrintDiagnostic_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsFontSize_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PrinterDiagnosisConfiguration::
      PrinterDiagnosisConfiguration (const PrintGraphicalForPresidentType& PrintGraphicalForPresident,
                                     const DoNotCheckBeforePrintDiagnosticType& DoNotCheckBeforePrintDiagnostic,
                                     const ButtonsWidthType& ButtonsWidth,
                                     const ButtonsHeightType& ButtonsHeight,
                                     const ButtonsFontSizeType& ButtonsFontSize)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrintGraphicalForPresident_ (PrintGraphicalForPresident, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DoNotCheckBeforePrintDiagnostic_ (DoNotCheckBeforePrintDiagnostic, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsWidth_ (ButtonsWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsHeight_ (ButtonsHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsFontSize_ (ButtonsFontSize, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PrinterDiagnosisConfiguration::
      PrinterDiagnosisConfiguration (const PrinterDiagnosisConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PrintGraphicalForPresident_ (x.PrintGraphicalForPresident_, f, this),
        DoNotCheckBeforePrintDiagnostic_ (x.DoNotCheckBeforePrintDiagnostic_, f, this),
        ButtonsWidth_ (x.ButtonsWidth_, f, this),
        ButtonsHeight_ (x.ButtonsHeight_, f, this),
        ButtonsFontSize_ (x.ButtonsFontSize_, f, this)
      {
      }

      PrinterDiagnosisConfiguration::
      PrinterDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PrintGraphicalForPresident_ (f, this),
        DoNotCheckBeforePrintDiagnostic_ (f, this),
        ButtonsWidth_ (f, this),
        ButtonsHeight_ (f, this),
        ButtonsFontSize_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PrinterDiagnosisConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PrintGraphicalForPresident
          //
          if (n.name () == "PrintGraphicalForPresident" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrintGraphicalForPresident_.present ())
            {
              this->PrintGraphicalForPresident_.set (PrintGraphicalForPresidentTraits::create (i, f, this));
              continue;
            }
          }

          // DoNotCheckBeforePrintDiagnostic
          //
          if (n.name () == "DoNotCheckBeforePrintDiagnostic" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!DoNotCheckBeforePrintDiagnostic_.present ())
            {
              this->DoNotCheckBeforePrintDiagnostic_.set (DoNotCheckBeforePrintDiagnosticTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonsWidth
          //
          if (n.name () == "ButtonsWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonsWidth_.present ())
            {
              this->ButtonsWidth_.set (ButtonsWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonsHeight
          //
          if (n.name () == "ButtonsHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonsHeight_.present ())
            {
              this->ButtonsHeight_.set (ButtonsHeightTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonsFontSize
          //
          if (n.name () == "ButtonsFontSize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonsFontSize_.present ())
            {
              this->ButtonsFontSize_.set (ButtonsFontSizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!PrintGraphicalForPresident_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrintGraphicalForPresident",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DoNotCheckBeforePrintDiagnostic_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DoNotCheckBeforePrintDiagnostic",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonsFontSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsFontSize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PrinterDiagnosisConfiguration* PrinterDiagnosisConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PrinterDiagnosisConfiguration (*this, f, c);
      }

      PrinterDiagnosisConfiguration::
      ~PrinterDiagnosisConfiguration ()
      {
      }

      bool
      operator== (const PrinterDiagnosisConfiguration& x, const PrinterDiagnosisConfiguration& y)
      {
        if (!(x.getPrintGraphicalForPresident () == y.getPrintGraphicalForPresident ()))
          return false;

        if (!(x.getDoNotCheckBeforePrintDiagnostic () == y.getDoNotCheckBeforePrintDiagnostic ()))
          return false;

        if (!(x.getButtonsWidth () == y.getButtonsWidth ()))
          return false;

        if (!(x.getButtonsHeight () == y.getButtonsHeight ()))
          return false;

        if (!(x.getButtonsFontSize () == y.getButtonsFontSize ()))
          return false;

        return true;
      }

      bool
      operator!= (const PrinterDiagnosisConfiguration& x, const PrinterDiagnosisConfiguration& y)
      {
        return !(x == y);
      }

      // GeneralDiagnosisConfiguration
      //

      GeneralDiagnosisConfiguration::
      GeneralDiagnosisConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosisLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosisFooterLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ResultErrorLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      GeneralDiagnosisConfiguration::
      GeneralDiagnosisConfiguration (const DiagnosisLabelConfigurationType& DiagnosisLabelConfiguration,
                                     const DiagnosisFooterLabelConfigurationType& DiagnosisFooterLabelConfiguration,
                                     const ResultErrorLabelConfigurationType& ResultErrorLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosisLabelConfiguration_ (DiagnosisLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosisFooterLabelConfiguration_ (DiagnosisFooterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ResultErrorLabelConfiguration_ (ResultErrorLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      GeneralDiagnosisConfiguration::
      GeneralDiagnosisConfiguration (::std::auto_ptr< DiagnosisLabelConfigurationType >& DiagnosisLabelConfiguration,
                                     ::std::auto_ptr< DiagnosisFooterLabelConfigurationType >& DiagnosisFooterLabelConfiguration,
                                     ::std::auto_ptr< ResultErrorLabelConfigurationType >& ResultErrorLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosisLabelConfiguration_ (DiagnosisLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosisFooterLabelConfiguration_ (DiagnosisFooterLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ResultErrorLabelConfiguration_ (ResultErrorLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      GeneralDiagnosisConfiguration::
      GeneralDiagnosisConfiguration (const GeneralDiagnosisConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        DiagnosisLabelConfiguration_ (x.DiagnosisLabelConfiguration_, f, this),
        DiagnosisFooterLabelConfiguration_ (x.DiagnosisFooterLabelConfiguration_, f, this),
        ResultErrorLabelConfiguration_ (x.ResultErrorLabelConfiguration_, f, this)
      {
      }

      GeneralDiagnosisConfiguration::
      GeneralDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        DiagnosisLabelConfiguration_ (f, this),
        DiagnosisFooterLabelConfiguration_ (f, this),
        ResultErrorLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void GeneralDiagnosisConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DiagnosisLabelConfiguration
          //
          if (n.name () == "DiagnosisLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DiagnosisLabelConfigurationType > r (
              DiagnosisLabelConfigurationTraits::create (i, f, this));

            if (!DiagnosisLabelConfiguration_.present ())
            {
              this->DiagnosisLabelConfiguration_.set (r);
              continue;
            }
          }

          // DiagnosisFooterLabelConfiguration
          //
          if (n.name () == "DiagnosisFooterLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DiagnosisFooterLabelConfigurationType > r (
              DiagnosisFooterLabelConfigurationTraits::create (i, f, this));

            if (!DiagnosisFooterLabelConfiguration_.present ())
            {
              this->DiagnosisFooterLabelConfiguration_.set (r);
              continue;
            }
          }

          // ResultErrorLabelConfiguration
          //
          if (n.name () == "ResultErrorLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ResultErrorLabelConfigurationType > r (
              ResultErrorLabelConfigurationTraits::create (i, f, this));

            if (!ResultErrorLabelConfiguration_.present ())
            {
              this->ResultErrorLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!DiagnosisLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DiagnosisLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DiagnosisFooterLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DiagnosisFooterLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ResultErrorLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ResultErrorLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      GeneralDiagnosisConfiguration* GeneralDiagnosisConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class GeneralDiagnosisConfiguration (*this, f, c);
      }

      GeneralDiagnosisConfiguration::
      ~GeneralDiagnosisConfiguration ()
      {
      }

      bool
      operator== (const GeneralDiagnosisConfiguration& x, const GeneralDiagnosisConfiguration& y)
      {
        if (!(x.getDiagnosisLabelConfiguration () == y.getDiagnosisLabelConfiguration ()))
          return false;

        if (!(x.getDiagnosisFooterLabelConfiguration () == y.getDiagnosisFooterLabelConfiguration ()))
          return false;

        if (!(x.getResultErrorLabelConfiguration () == y.getResultErrorLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const GeneralDiagnosisConfiguration& x, const GeneralDiagnosisConfiguration& y)
      {
        return !(x == y);
      }

      // TouchScreenCalibrationConfiguration
      //

      TouchScreenCalibrationConfiguration::
      TouchScreenCalibrationConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberOfCalibrationPoints_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeightOfButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WidthOfButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      TouchScreenCalibrationConfiguration::
      TouchScreenCalibrationConfiguration (const NumberOfCalibrationPointsType& NumberOfCalibrationPoints,
                                           const HeightOfButtonsType& HeightOfButtons,
                                           const WidthOfButtonsType& WidthOfButtons)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberOfCalibrationPoints_ (NumberOfCalibrationPoints, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeightOfButtons_ (HeightOfButtons, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WidthOfButtons_ (WidthOfButtons, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      TouchScreenCalibrationConfiguration::
      TouchScreenCalibrationConfiguration (const TouchScreenCalibrationConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NumberOfCalibrationPoints_ (x.NumberOfCalibrationPoints_, f, this),
        HeightOfButtons_ (x.HeightOfButtons_, f, this),
        WidthOfButtons_ (x.WidthOfButtons_, f, this)
      {
      }

      TouchScreenCalibrationConfiguration::
      TouchScreenCalibrationConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NumberOfCalibrationPoints_ (f, this),
        HeightOfButtons_ (f, this),
        WidthOfButtons_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void TouchScreenCalibrationConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NumberOfCalibrationPoints
          //
          if (n.name () == "NumberOfCalibrationPoints" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberOfCalibrationPoints_.present ())
            {
              this->NumberOfCalibrationPoints_.set (NumberOfCalibrationPointsTraits::create (i, f, this));
              continue;
            }
          }

          // HeightOfButtons
          //
          if (n.name () == "HeightOfButtons" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!HeightOfButtons_.present ())
            {
              this->HeightOfButtons_.set (HeightOfButtonsTraits::create (i, f, this));
              continue;
            }
          }

          // WidthOfButtons
          //
          if (n.name () == "WidthOfButtons" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!WidthOfButtons_.present ())
            {
              this->WidthOfButtons_.set (WidthOfButtonsTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!NumberOfCalibrationPoints_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberOfCalibrationPoints",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!HeightOfButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeightOfButtons",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WidthOfButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WidthOfButtons",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      TouchScreenCalibrationConfiguration* TouchScreenCalibrationConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class TouchScreenCalibrationConfiguration (*this, f, c);
      }

      TouchScreenCalibrationConfiguration::
      ~TouchScreenCalibrationConfiguration ()
      {
      }

      bool
      operator== (const TouchScreenCalibrationConfiguration& x, const TouchScreenCalibrationConfiguration& y)
      {
        if (!(x.getNumberOfCalibrationPoints () == y.getNumberOfCalibrationPoints ()))
          return false;

        if (!(x.getHeightOfButtons () == y.getHeightOfButtons ()))
          return false;

        if (!(x.getWidthOfButtons () == y.getWidthOfButtons ()))
          return false;

        return true;
      }

      bool
      operator!= (const TouchScreenCalibrationConfiguration& x, const TouchScreenCalibrationConfiguration& y)
      {
        return !(x == y);
      }

      // EventSoundsConfiguration
      //

      EventSoundsConfiguration::
      EventSoundsConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstalationSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstalationSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationValidPasswordSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationInvalidPasswordSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionSelectSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelectSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosisSound_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      EventSoundsConfiguration::
      EventSoundsConfiguration (const PMInstalationSoundType& PMInstalationSound,
                                const VMInstalationSoundType& VMInstalationSound,
                                const AuthenticationValidPasswordSoundType& AuthenticationValidPasswordSound,
                                const AuthenticationInvalidPasswordSoundType& AuthenticationInvalidPasswordSound,
                                const VotingExperienceSoundType& VotingExperienceSound,
                                const BallotOptionSelectSoundType& BallotOptionSelectSound,
                                const PartySelectSoundType& PartySelectSound,
                                const DiagnosisSoundType& DiagnosisSound)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PMInstalationSound_ (PMInstalationSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VMInstalationSound_ (VMInstalationSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationValidPasswordSound_ (AuthenticationValidPasswordSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AuthenticationInvalidPasswordSound_ (AuthenticationInvalidPasswordSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceSound_ (VotingExperienceSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BallotOptionSelectSound_ (BallotOptionSelectSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelectSound_ (PartySelectSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosisSound_ (DiagnosisSound, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      EventSoundsConfiguration::
      EventSoundsConfiguration (const EventSoundsConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PMInstalationSound_ (x.PMInstalationSound_, f, this),
        VMInstalationSound_ (x.VMInstalationSound_, f, this),
        AuthenticationValidPasswordSound_ (x.AuthenticationValidPasswordSound_, f, this),
        AuthenticationInvalidPasswordSound_ (x.AuthenticationInvalidPasswordSound_, f, this),
        VotingExperienceSound_ (x.VotingExperienceSound_, f, this),
        BallotOptionSelectSound_ (x.BallotOptionSelectSound_, f, this),
        PartySelectSound_ (x.PartySelectSound_, f, this),
        DiagnosisSound_ (x.DiagnosisSound_, f, this)
      {
      }

      EventSoundsConfiguration::
      EventSoundsConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PMInstalationSound_ (f, this),
        VMInstalationSound_ (f, this),
        AuthenticationValidPasswordSound_ (f, this),
        AuthenticationInvalidPasswordSound_ (f, this),
        VotingExperienceSound_ (f, this),
        BallotOptionSelectSound_ (f, this),
        PartySelectSound_ (f, this),
        DiagnosisSound_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void EventSoundsConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PMInstalationSound
          //
          if (n.name () == "PMInstalationSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PMInstalationSoundType > r (
              PMInstalationSoundTraits::create (i, f, this));

            if (!PMInstalationSound_.present ())
            {
              this->PMInstalationSound_.set (r);
              continue;
            }
          }

          // VMInstalationSound
          //
          if (n.name () == "VMInstalationSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VMInstalationSoundType > r (
              VMInstalationSoundTraits::create (i, f, this));

            if (!VMInstalationSound_.present ())
            {
              this->VMInstalationSound_.set (r);
              continue;
            }
          }

          // AuthenticationValidPasswordSound
          //
          if (n.name () == "AuthenticationValidPasswordSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AuthenticationValidPasswordSoundType > r (
              AuthenticationValidPasswordSoundTraits::create (i, f, this));

            if (!AuthenticationValidPasswordSound_.present ())
            {
              this->AuthenticationValidPasswordSound_.set (r);
              continue;
            }
          }

          // AuthenticationInvalidPasswordSound
          //
          if (n.name () == "AuthenticationInvalidPasswordSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AuthenticationInvalidPasswordSoundType > r (
              AuthenticationInvalidPasswordSoundTraits::create (i, f, this));

            if (!AuthenticationInvalidPasswordSound_.present ())
            {
              this->AuthenticationInvalidPasswordSound_.set (r);
              continue;
            }
          }

          // VotingExperienceSound
          //
          if (n.name () == "VotingExperienceSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceSoundType > r (
              VotingExperienceSoundTraits::create (i, f, this));

            if (!VotingExperienceSound_.present ())
            {
              this->VotingExperienceSound_.set (r);
              continue;
            }
          }

          // BallotOptionSelectSound
          //
          if (n.name () == "BallotOptionSelectSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BallotOptionSelectSoundType > r (
              BallotOptionSelectSoundTraits::create (i, f, this));

            if (!BallotOptionSelectSound_.present ())
            {
              this->BallotOptionSelectSound_.set (r);
              continue;
            }
          }

          // PartySelectSound
          //
          if (n.name () == "PartySelectSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartySelectSoundType > r (
              PartySelectSoundTraits::create (i, f, this));

            if (!PartySelectSound_.present ())
            {
              this->PartySelectSound_.set (r);
              continue;
            }
          }

          // DiagnosisSound
          //
          if (n.name () == "DiagnosisSound" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DiagnosisSoundType > r (
              DiagnosisSoundTraits::create (i, f, this));

            if (!DiagnosisSound_.present ())
            {
              this->DiagnosisSound_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PMInstalationSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PMInstalationSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VMInstalationSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VMInstalationSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AuthenticationValidPasswordSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AuthenticationValidPasswordSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AuthenticationInvalidPasswordSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AuthenticationInvalidPasswordSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BallotOptionSelectSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotOptionSelectSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartySelectSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartySelectSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DiagnosisSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DiagnosisSound",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      EventSoundsConfiguration* EventSoundsConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class EventSoundsConfiguration (*this, f, c);
      }

      EventSoundsConfiguration::
      ~EventSoundsConfiguration ()
      {
      }

      bool
      operator== (const EventSoundsConfiguration& x, const EventSoundsConfiguration& y)
      {
        if (!(x.getPMInstalationSound () == y.getPMInstalationSound ()))
          return false;

        if (!(x.getVMInstalationSound () == y.getVMInstalationSound ()))
          return false;

        if (!(x.getAuthenticationValidPasswordSound () == y.getAuthenticationValidPasswordSound ()))
          return false;

        if (!(x.getAuthenticationInvalidPasswordSound () == y.getAuthenticationInvalidPasswordSound ()))
          return false;

        if (!(x.getVotingExperienceSound () == y.getVotingExperienceSound ()))
          return false;

        if (!(x.getBallotOptionSelectSound () == y.getBallotOptionSelectSound ()))
          return false;

        if (!(x.getPartySelectSound () == y.getPartySelectSound ()))
          return false;

        if (!(x.getDiagnosisSound () == y.getDiagnosisSound ()))
          return false;

        return true;
      }

      bool
      operator!= (const EventSoundsConfiguration& x, const EventSoundsConfiguration& y)
      {
        return !(x == y);
      }

      // BarcodeDiagnosisConfiguration
      //

      BarcodeDiagnosisConfiguration::
      BarcodeDiagnosisConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeOut_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StringToEncode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintAutomaticBarcode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeCommandsName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SkipPrinterError_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BarcodeDiagnosisConfiguration::
      BarcodeDiagnosisConfiguration (const TimeOutType& TimeOut,
                                     const StringToEncodeType& StringToEncode,
                                     const PrintAutomaticBarcodeType& PrintAutomaticBarcode,
                                     const BarcodeCommandsNameType& BarcodeCommandsName,
                                     const SkipPrinterErrorType& SkipPrinterError,
                                     const BarcodeInParamsType& BarcodeInParams,
                                     const BarcodeOutParamsType& BarcodeOutParams)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeOut_ (TimeOut, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StringToEncode_ (StringToEncode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintAutomaticBarcode_ (PrintAutomaticBarcode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeCommandsName_ (BarcodeCommandsName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SkipPrinterError_ (SkipPrinterError, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BarcodeDiagnosisConfiguration::
      BarcodeDiagnosisConfiguration (const BarcodeDiagnosisConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        TimeOut_ (x.TimeOut_, f, this),
        StringToEncode_ (x.StringToEncode_, f, this),
        PrintAutomaticBarcode_ (x.PrintAutomaticBarcode_, f, this),
        BarcodeCommandsName_ (x.BarcodeCommandsName_, f, this),
        SkipPrinterError_ (x.SkipPrinterError_, f, this),
        BarcodeInParams_ (x.BarcodeInParams_, f, this),
        BarcodeOutParams_ (x.BarcodeOutParams_, f, this)
      {
      }

      BarcodeDiagnosisConfiguration::
      BarcodeDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        TimeOut_ (f, this),
        StringToEncode_ (f, this),
        PrintAutomaticBarcode_ (f, this),
        BarcodeCommandsName_ (f, this),
        SkipPrinterError_ (f, this),
        BarcodeInParams_ (f, this),
        BarcodeOutParams_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BarcodeDiagnosisConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TimeOut
          //
          if (n.name () == "TimeOut" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeOut_.present ())
            {
              this->TimeOut_.set (TimeOutTraits::create (i, f, this));
              continue;
            }
          }

          // StringToEncode
          //
          if (n.name () == "StringToEncode" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StringToEncodeType > r (
              StringToEncodeTraits::create (i, f, this));

            if (!StringToEncode_.present ())
            {
              this->StringToEncode_.set (r);
              continue;
            }
          }

          // PrintAutomaticBarcode
          //
          if (n.name () == "PrintAutomaticBarcode" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrintAutomaticBarcode_.present ())
            {
              this->PrintAutomaticBarcode_.set (PrintAutomaticBarcodeTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeCommandsName
          //
          if (n.name () == "BarcodeCommandsName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeCommandsNameType > r (
              BarcodeCommandsNameTraits::create (i, f, this));

            if (!BarcodeCommandsName_.present ())
            {
              this->BarcodeCommandsName_.set (r);
              continue;
            }
          }

          // SkipPrinterError
          //
          if (n.name () == "SkipPrinterError" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SkipPrinterError_.present ())
            {
              this->SkipPrinterError_.set (SkipPrinterErrorTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeInParams
          //
          if (n.name () == "BarcodeInParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeInParamsType > r (
              BarcodeInParamsTraits::create (i, f, this));

            if (!BarcodeInParams_.present ())
            {
              this->BarcodeInParams_.set (r);
              continue;
            }
          }

          // BarcodeOutParams
          //
          if (n.name () == "BarcodeOutParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeOutParamsType > r (
              BarcodeOutParamsTraits::create (i, f, this));

            if (!BarcodeOutParams_.present ())
            {
              this->BarcodeOutParams_.set (r);
              continue;
            }
          }

          break;
        }

        if (!TimeOut_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeOut",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StringToEncode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StringToEncode",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrintAutomaticBarcode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrintAutomaticBarcode",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeCommandsName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeCommandsName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SkipPrinterError_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SkipPrinterError",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeInParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeInParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeOutParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeOutParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      BarcodeDiagnosisConfiguration* BarcodeDiagnosisConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BarcodeDiagnosisConfiguration (*this, f, c);
      }

      BarcodeDiagnosisConfiguration::
      ~BarcodeDiagnosisConfiguration ()
      {
      }

      bool
      operator== (const BarcodeDiagnosisConfiguration& x, const BarcodeDiagnosisConfiguration& y)
      {
        if (!(x.getTimeOut () == y.getTimeOut ()))
          return false;

        if (!(x.getStringToEncode () == y.getStringToEncode ()))
          return false;

        if (!(x.getPrintAutomaticBarcode () == y.getPrintAutomaticBarcode ()))
          return false;

        if (!(x.getBarcodeCommandsName () == y.getBarcodeCommandsName ()))
          return false;

        if (!(x.getSkipPrinterError () == y.getSkipPrinterError ()))
          return false;

        if (!(x.getBarcodeInParams () == y.getBarcodeInParams ()))
          return false;

        if (!(x.getBarcodeOutParams () == y.getBarcodeOutParams ()))
          return false;

        return true;
      }

      bool
      operator!= (const BarcodeDiagnosisConfiguration& x, const BarcodeDiagnosisConfiguration& y)
      {
        return !(x == y);
      }

      // BrightnessDiagnosisConfiguration
      //

      BrightnessDiagnosisConfiguration::
      BrightnessDiagnosisConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeDelayButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BrightnessDiagnosisConfiguration::
      BrightnessDiagnosisConfiguration (const TimeDelayButtonsType& TimeDelayButtons)
      : ::Smartmatic::ConfigurationTypes::Type (),
        TimeDelayButtons_ (TimeDelayButtons, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BrightnessDiagnosisConfiguration::
      BrightnessDiagnosisConfiguration (const BrightnessDiagnosisConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        TimeDelayButtons_ (x.TimeDelayButtons_, f, this)
      {
      }

      BrightnessDiagnosisConfiguration::
      BrightnessDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        TimeDelayButtons_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BrightnessDiagnosisConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TimeDelayButtons
          //
          if (n.name () == "TimeDelayButtons" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeDelayButtons_.present ())
            {
              this->TimeDelayButtons_.set (TimeDelayButtonsTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!TimeDelayButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeDelayButtons",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      BrightnessDiagnosisConfiguration* BrightnessDiagnosisConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BrightnessDiagnosisConfiguration (*this, f, c);
      }

      BrightnessDiagnosisConfiguration::
      ~BrightnessDiagnosisConfiguration ()
      {
      }

      bool
      operator== (const BrightnessDiagnosisConfiguration& x, const BrightnessDiagnosisConfiguration& y)
      {
        if (!(x.getTimeDelayButtons () == y.getTimeDelayButtons ()))
          return false;

        return true;
      }

      bool
      operator!= (const BrightnessDiagnosisConfiguration& x, const BrightnessDiagnosisConfiguration& y)
      {
        return !(x == y);
      }

      // AllDiagnosisConfiguration
      //

      AllDiagnosisConfiguration::
      AllDiagnosisConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosticToApply_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContrastDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CalibrationDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FlashDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartcardDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTimeOnOk_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTimeOnCancel_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CalibrationDiagnosisWaitTimeOnOk_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContrastDiagnosisWaitTimeOnOk_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AllDiagnosisConfiguration::
      AllDiagnosisConfiguration (const AlarmDiagnosisWaitTimeType& AlarmDiagnosisWaitTime,
                                 const BarcodeDiagnosisWaitTimeType& BarcodeDiagnosisWaitTime,
                                 const ContrastDiagnosisWaitTimeType& ContrastDiagnosisWaitTime,
                                 const CalibrationDiagnosisWaitTimeType& CalibrationDiagnosisWaitTime,
                                 const FlashDiagnosisWaitTimeType& FlashDiagnosisWaitTime,
                                 const PrinterDiagnosisWaitTimeType& PrinterDiagnosisWaitTime,
                                 const SmartcardDiagnosisWaitTimeType& SmartcardDiagnosisWaitTime,
                                 const PrinterDiagnosisWaitTimeOnOkType& PrinterDiagnosisWaitTimeOnOk,
                                 const PrinterDiagnosisWaitTimeOnCancelType& PrinterDiagnosisWaitTimeOnCancel,
                                 const CalibrationDiagnosisWaitTimeOnOkType& CalibrationDiagnosisWaitTimeOnOk,
                                 const ContrastDiagnosisWaitTimeOnOkType& ContrastDiagnosisWaitTimeOnOk)
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosticToApply_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmDiagnosisWaitTime_ (AlarmDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisWaitTime_ (BarcodeDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContrastDiagnosisWaitTime_ (ContrastDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CalibrationDiagnosisWaitTime_ (CalibrationDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FlashDiagnosisWaitTime_ (FlashDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTime_ (PrinterDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartcardDiagnosisWaitTime_ (SmartcardDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTimeOnOk_ (PrinterDiagnosisWaitTimeOnOk, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTimeOnCancel_ (PrinterDiagnosisWaitTimeOnCancel, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CalibrationDiagnosisWaitTimeOnOk_ (CalibrationDiagnosisWaitTimeOnOk, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContrastDiagnosisWaitTimeOnOk_ (ContrastDiagnosisWaitTimeOnOk, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AllDiagnosisConfiguration::
      AllDiagnosisConfiguration (const AllDiagnosisConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        DiagnosticToApply_ (x.DiagnosticToApply_, f, this),
        AlarmDiagnosisWaitTime_ (x.AlarmDiagnosisWaitTime_, f, this),
        BarcodeDiagnosisWaitTime_ (x.BarcodeDiagnosisWaitTime_, f, this),
        ContrastDiagnosisWaitTime_ (x.ContrastDiagnosisWaitTime_, f, this),
        CalibrationDiagnosisWaitTime_ (x.CalibrationDiagnosisWaitTime_, f, this),
        FlashDiagnosisWaitTime_ (x.FlashDiagnosisWaitTime_, f, this),
        PrinterDiagnosisWaitTime_ (x.PrinterDiagnosisWaitTime_, f, this),
        SmartcardDiagnosisWaitTime_ (x.SmartcardDiagnosisWaitTime_, f, this),
        PrinterDiagnosisWaitTimeOnOk_ (x.PrinterDiagnosisWaitTimeOnOk_, f, this),
        PrinterDiagnosisWaitTimeOnCancel_ (x.PrinterDiagnosisWaitTimeOnCancel_, f, this),
        CalibrationDiagnosisWaitTimeOnOk_ (x.CalibrationDiagnosisWaitTimeOnOk_, f, this),
        ContrastDiagnosisWaitTimeOnOk_ (x.ContrastDiagnosisWaitTimeOnOk_, f, this)
      {
      }

      AllDiagnosisConfiguration::
      AllDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        DiagnosticToApply_ (f, this),
        AlarmDiagnosisWaitTime_ (f, this),
        BarcodeDiagnosisWaitTime_ (f, this),
        ContrastDiagnosisWaitTime_ (f, this),
        CalibrationDiagnosisWaitTime_ (f, this),
        FlashDiagnosisWaitTime_ (f, this),
        PrinterDiagnosisWaitTime_ (f, this),
        SmartcardDiagnosisWaitTime_ (f, this),
        PrinterDiagnosisWaitTimeOnOk_ (f, this),
        PrinterDiagnosisWaitTimeOnCancel_ (f, this),
        CalibrationDiagnosisWaitTimeOnOk_ (f, this),
        ContrastDiagnosisWaitTimeOnOk_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void AllDiagnosisConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DiagnosticToApply
          //
          if (n.name () == "DiagnosticToApply" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DiagnosticToApplyType > r (
              DiagnosticToApplyTraits::create (i, f, this));

            this->DiagnosticToApply_.push_back (r);
            continue;
          }

          // AlarmDiagnosisWaitTime
          //
          if (n.name () == "AlarmDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AlarmDiagnosisWaitTime_.present ())
            {
              this->AlarmDiagnosisWaitTime_.set (AlarmDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeDiagnosisWaitTime
          //
          if (n.name () == "BarcodeDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BarcodeDiagnosisWaitTime_.present ())
            {
              this->BarcodeDiagnosisWaitTime_.set (BarcodeDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // ContrastDiagnosisWaitTime
          //
          if (n.name () == "ContrastDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ContrastDiagnosisWaitTime_.present ())
            {
              this->ContrastDiagnosisWaitTime_.set (ContrastDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // CalibrationDiagnosisWaitTime
          //
          if (n.name () == "CalibrationDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CalibrationDiagnosisWaitTime_.present ())
            {
              this->CalibrationDiagnosisWaitTime_.set (CalibrationDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // FlashDiagnosisWaitTime
          //
          if (n.name () == "FlashDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FlashDiagnosisWaitTime_.present ())
            {
              this->FlashDiagnosisWaitTime_.set (FlashDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // PrinterDiagnosisWaitTime
          //
          if (n.name () == "PrinterDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrinterDiagnosisWaitTime_.present ())
            {
              this->PrinterDiagnosisWaitTime_.set (PrinterDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // SmartcardDiagnosisWaitTime
          //
          if (n.name () == "SmartcardDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SmartcardDiagnosisWaitTime_.present ())
            {
              this->SmartcardDiagnosisWaitTime_.set (SmartcardDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // PrinterDiagnosisWaitTimeOnOk
          //
          if (n.name () == "PrinterDiagnosisWaitTimeOnOk" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrinterDiagnosisWaitTimeOnOk_.present ())
            {
              this->PrinterDiagnosisWaitTimeOnOk_.set (PrinterDiagnosisWaitTimeOnOkTraits::create (i, f, this));
              continue;
            }
          }

          // PrinterDiagnosisWaitTimeOnCancel
          //
          if (n.name () == "PrinterDiagnosisWaitTimeOnCancel" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrinterDiagnosisWaitTimeOnCancel_.present ())
            {
              this->PrinterDiagnosisWaitTimeOnCancel_.set (PrinterDiagnosisWaitTimeOnCancelTraits::create (i, f, this));
              continue;
            }
          }

          // CalibrationDiagnosisWaitTimeOnOk
          //
          if (n.name () == "CalibrationDiagnosisWaitTimeOnOk" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CalibrationDiagnosisWaitTimeOnOk_.present ())
            {
              this->CalibrationDiagnosisWaitTimeOnOk_.set (CalibrationDiagnosisWaitTimeOnOkTraits::create (i, f, this));
              continue;
            }
          }

          // ContrastDiagnosisWaitTimeOnOk
          //
          if (n.name () == "ContrastDiagnosisWaitTimeOnOk" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ContrastDiagnosisWaitTimeOnOk_.present ())
            {
              this->ContrastDiagnosisWaitTimeOnOk_.set (ContrastDiagnosisWaitTimeOnOkTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!AlarmDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AlarmDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContrastDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContrastDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CalibrationDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CalibrationDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FlashDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FlashDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrinterDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrinterDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SmartcardDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SmartcardDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrinterDiagnosisWaitTimeOnOk_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrinterDiagnosisWaitTimeOnOk",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrinterDiagnosisWaitTimeOnCancel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrinterDiagnosisWaitTimeOnCancel",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CalibrationDiagnosisWaitTimeOnOk_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CalibrationDiagnosisWaitTimeOnOk",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContrastDiagnosisWaitTimeOnOk_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContrastDiagnosisWaitTimeOnOk",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      AllDiagnosisConfiguration* AllDiagnosisConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class AllDiagnosisConfiguration (*this, f, c);
      }

      AllDiagnosisConfiguration::
      ~AllDiagnosisConfiguration ()
      {
      }

      bool
      operator== (const AllDiagnosisConfiguration& x, const AllDiagnosisConfiguration& y)
      {
        if (!(x.getDiagnosticToApply () == y.getDiagnosticToApply ()))
          return false;

        if (!(x.getAlarmDiagnosisWaitTime () == y.getAlarmDiagnosisWaitTime ()))
          return false;

        if (!(x.getBarcodeDiagnosisWaitTime () == y.getBarcodeDiagnosisWaitTime ()))
          return false;

        if (!(x.getContrastDiagnosisWaitTime () == y.getContrastDiagnosisWaitTime ()))
          return false;

        if (!(x.getCalibrationDiagnosisWaitTime () == y.getCalibrationDiagnosisWaitTime ()))
          return false;

        if (!(x.getFlashDiagnosisWaitTime () == y.getFlashDiagnosisWaitTime ()))
          return false;

        if (!(x.getPrinterDiagnosisWaitTime () == y.getPrinterDiagnosisWaitTime ()))
          return false;

        if (!(x.getSmartcardDiagnosisWaitTime () == y.getSmartcardDiagnosisWaitTime ()))
          return false;

        if (!(x.getPrinterDiagnosisWaitTimeOnOk () == y.getPrinterDiagnosisWaitTimeOnOk ()))
          return false;

        if (!(x.getPrinterDiagnosisWaitTimeOnCancel () == y.getPrinterDiagnosisWaitTimeOnCancel ()))
          return false;

        if (!(x.getCalibrationDiagnosisWaitTimeOnOk () == y.getCalibrationDiagnosisWaitTimeOnOk ()))
          return false;

        if (!(x.getContrastDiagnosisWaitTimeOnOk () == y.getContrastDiagnosisWaitTimeOnOk ()))
          return false;

        return true;
      }

      bool
      operator!= (const AllDiagnosisConfiguration& x, const AllDiagnosisConfiguration& y)
      {
        return !(x == y);
      }

      // AutomaticWindowConfiguration
      //

      AutomaticWindowConfiguration::
      AutomaticWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosticToApply_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnostic_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnosticTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnosticButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseOkButtonOnSomeNonMandatoryDiagnosticFailed_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseShutDownButtonOnSomeMandatoryDiagnosticFailed_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FlashDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartcardDiagnosisWaitTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFooterInAutoDiagnosis_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AutomaticWindowConfiguration::
      AutomaticWindowConfiguration (const BlockDiagnosticType& BlockDiagnostic,
                                    const BlockDiagnosticTitleType& BlockDiagnosticTitle,
                                    const BlockDiagnosticButtonType& BlockDiagnosticButton,
                                    const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType& UseOkButtonOnSomeNonMandatoryDiagnosticFailed,
                                    const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType& UseShutDownButtonOnSomeMandatoryDiagnosticFailed,
                                    const AlarmDiagnosisWaitTimeType& AlarmDiagnosisWaitTime,
                                    const BarcodeDiagnosisWaitTimeType& BarcodeDiagnosisWaitTime,
                                    const FlashDiagnosisWaitTimeType& FlashDiagnosisWaitTime,
                                    const PrinterDiagnosisWaitTimeType& PrinterDiagnosisWaitTime,
                                    const SmartcardDiagnosisWaitTimeType& SmartcardDiagnosisWaitTime,
                                    const DiagnosticReviewWidthType& DiagnosticReviewWidth,
                                    const DiagnosticReviewHeightType& DiagnosticReviewHeight,
                                    const DiagnosticReviewLabelConfigurationType& DiagnosticReviewLabelConfiguration,
                                    const ShowFooterInAutoDiagnosisType& ShowFooterInAutoDiagnosis)
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosticToApply_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnostic_ (BlockDiagnostic, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnosticTitle_ (BlockDiagnosticTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnosticButton_ (BlockDiagnosticButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseOkButtonOnSomeNonMandatoryDiagnosticFailed_ (UseOkButtonOnSomeNonMandatoryDiagnosticFailed, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseShutDownButtonOnSomeMandatoryDiagnosticFailed_ (UseShutDownButtonOnSomeMandatoryDiagnosticFailed, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmDiagnosisWaitTime_ (AlarmDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisWaitTime_ (BarcodeDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FlashDiagnosisWaitTime_ (FlashDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTime_ (PrinterDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartcardDiagnosisWaitTime_ (SmartcardDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewWidth_ (DiagnosticReviewWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewHeight_ (DiagnosticReviewHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewLabelConfiguration_ (DiagnosticReviewLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFooterInAutoDiagnosis_ (ShowFooterInAutoDiagnosis, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AutomaticWindowConfiguration::
      AutomaticWindowConfiguration (const BlockDiagnosticType& BlockDiagnostic,
                                    ::std::auto_ptr< BlockDiagnosticTitleType >& BlockDiagnosticTitle,
                                    ::std::auto_ptr< BlockDiagnosticButtonType >& BlockDiagnosticButton,
                                    const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType& UseOkButtonOnSomeNonMandatoryDiagnosticFailed,
                                    const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType& UseShutDownButtonOnSomeMandatoryDiagnosticFailed,
                                    const AlarmDiagnosisWaitTimeType& AlarmDiagnosisWaitTime,
                                    const BarcodeDiagnosisWaitTimeType& BarcodeDiagnosisWaitTime,
                                    const FlashDiagnosisWaitTimeType& FlashDiagnosisWaitTime,
                                    const PrinterDiagnosisWaitTimeType& PrinterDiagnosisWaitTime,
                                    const SmartcardDiagnosisWaitTimeType& SmartcardDiagnosisWaitTime,
                                    const DiagnosticReviewWidthType& DiagnosticReviewWidth,
                                    const DiagnosticReviewHeightType& DiagnosticReviewHeight,
                                    ::std::auto_ptr< DiagnosticReviewLabelConfigurationType >& DiagnosticReviewLabelConfiguration,
                                    const ShowFooterInAutoDiagnosisType& ShowFooterInAutoDiagnosis)
      : ::Smartmatic::ConfigurationTypes::Type (),
        DiagnosticToApply_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnostic_ (BlockDiagnostic, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnosticTitle_ (BlockDiagnosticTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockDiagnosticButton_ (BlockDiagnosticButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseOkButtonOnSomeNonMandatoryDiagnosticFailed_ (UseOkButtonOnSomeNonMandatoryDiagnosticFailed, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseShutDownButtonOnSomeMandatoryDiagnosticFailed_ (UseShutDownButtonOnSomeMandatoryDiagnosticFailed, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmDiagnosisWaitTime_ (AlarmDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeDiagnosisWaitTime_ (BarcodeDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FlashDiagnosisWaitTime_ (FlashDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrinterDiagnosisWaitTime_ (PrinterDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SmartcardDiagnosisWaitTime_ (SmartcardDiagnosisWaitTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewWidth_ (DiagnosticReviewWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewHeight_ (DiagnosticReviewHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DiagnosticReviewLabelConfiguration_ (DiagnosticReviewLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFooterInAutoDiagnosis_ (ShowFooterInAutoDiagnosis, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AutomaticWindowConfiguration::
      AutomaticWindowConfiguration (const AutomaticWindowConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        DiagnosticToApply_ (x.DiagnosticToApply_, f, this),
        BlockDiagnostic_ (x.BlockDiagnostic_, f, this),
        BlockDiagnosticTitle_ (x.BlockDiagnosticTitle_, f, this),
        BlockDiagnosticButton_ (x.BlockDiagnosticButton_, f, this),
        UseOkButtonOnSomeNonMandatoryDiagnosticFailed_ (x.UseOkButtonOnSomeNonMandatoryDiagnosticFailed_, f, this),
        UseShutDownButtonOnSomeMandatoryDiagnosticFailed_ (x.UseShutDownButtonOnSomeMandatoryDiagnosticFailed_, f, this),
        AlarmDiagnosisWaitTime_ (x.AlarmDiagnosisWaitTime_, f, this),
        BarcodeDiagnosisWaitTime_ (x.BarcodeDiagnosisWaitTime_, f, this),
        FlashDiagnosisWaitTime_ (x.FlashDiagnosisWaitTime_, f, this),
        PrinterDiagnosisWaitTime_ (x.PrinterDiagnosisWaitTime_, f, this),
        SmartcardDiagnosisWaitTime_ (x.SmartcardDiagnosisWaitTime_, f, this),
        DiagnosticReviewWidth_ (x.DiagnosticReviewWidth_, f, this),
        DiagnosticReviewHeight_ (x.DiagnosticReviewHeight_, f, this),
        DiagnosticReviewLabelConfiguration_ (x.DiagnosticReviewLabelConfiguration_, f, this),
        ShowFooterInAutoDiagnosis_ (x.ShowFooterInAutoDiagnosis_, f, this)
      {
      }

      AutomaticWindowConfiguration::
      AutomaticWindowConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        DiagnosticToApply_ (f, this),
        BlockDiagnostic_ (f, this),
        BlockDiagnosticTitle_ (f, this),
        BlockDiagnosticButton_ (f, this),
        UseOkButtonOnSomeNonMandatoryDiagnosticFailed_ (f, this),
        UseShutDownButtonOnSomeMandatoryDiagnosticFailed_ (f, this),
        AlarmDiagnosisWaitTime_ (f, this),
        BarcodeDiagnosisWaitTime_ (f, this),
        FlashDiagnosisWaitTime_ (f, this),
        PrinterDiagnosisWaitTime_ (f, this),
        SmartcardDiagnosisWaitTime_ (f, this),
        DiagnosticReviewWidth_ (f, this),
        DiagnosticReviewHeight_ (f, this),
        DiagnosticReviewLabelConfiguration_ (f, this),
        ShowFooterInAutoDiagnosis_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void AutomaticWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DiagnosticToApply
          //
          if (n.name () == "DiagnosticToApply" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DiagnosticToApplyType > r (
              DiagnosticToApplyTraits::create (i, f, this));

            this->DiagnosticToApply_.push_back (r);
            continue;
          }

          // BlockDiagnostic
          //
          if (n.name () == "BlockDiagnostic" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BlockDiagnostic_.present ())
            {
              this->BlockDiagnostic_.set (BlockDiagnosticTraits::create (i, f, this));
              continue;
            }
          }

          // BlockDiagnosticTitle
          //
          if (n.name () == "BlockDiagnosticTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BlockDiagnosticTitleType > r (
              BlockDiagnosticTitleTraits::create (i, f, this));

            if (!BlockDiagnosticTitle_.present ())
            {
              this->BlockDiagnosticTitle_.set (r);
              continue;
            }
          }

          // BlockDiagnosticButton
          //
          if (n.name () == "BlockDiagnosticButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BlockDiagnosticButtonType > r (
              BlockDiagnosticButtonTraits::create (i, f, this));

            if (!BlockDiagnosticButton_.present ())
            {
              this->BlockDiagnosticButton_.set (r);
              continue;
            }
          }

          // UseOkButtonOnSomeNonMandatoryDiagnosticFailed
          //
          if (n.name () == "UseOkButtonOnSomeNonMandatoryDiagnosticFailed" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseOkButtonOnSomeNonMandatoryDiagnosticFailed_.present ())
            {
              this->UseOkButtonOnSomeNonMandatoryDiagnosticFailed_.set (UseOkButtonOnSomeNonMandatoryDiagnosticFailedTraits::create (i, f, this));
              continue;
            }
          }

          // UseShutDownButtonOnSomeMandatoryDiagnosticFailed
          //
          if (n.name () == "UseShutDownButtonOnSomeMandatoryDiagnosticFailed" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseShutDownButtonOnSomeMandatoryDiagnosticFailed_.present ())
            {
              this->UseShutDownButtonOnSomeMandatoryDiagnosticFailed_.set (UseShutDownButtonOnSomeMandatoryDiagnosticFailedTraits::create (i, f, this));
              continue;
            }
          }

          // AlarmDiagnosisWaitTime
          //
          if (n.name () == "AlarmDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AlarmDiagnosisWaitTime_.present ())
            {
              this->AlarmDiagnosisWaitTime_.set (AlarmDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeDiagnosisWaitTime
          //
          if (n.name () == "BarcodeDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BarcodeDiagnosisWaitTime_.present ())
            {
              this->BarcodeDiagnosisWaitTime_.set (BarcodeDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // FlashDiagnosisWaitTime
          //
          if (n.name () == "FlashDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FlashDiagnosisWaitTime_.present ())
            {
              this->FlashDiagnosisWaitTime_.set (FlashDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // PrinterDiagnosisWaitTime
          //
          if (n.name () == "PrinterDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrinterDiagnosisWaitTime_.present ())
            {
              this->PrinterDiagnosisWaitTime_.set (PrinterDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // SmartcardDiagnosisWaitTime
          //
          if (n.name () == "SmartcardDiagnosisWaitTime" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!SmartcardDiagnosisWaitTime_.present ())
            {
              this->SmartcardDiagnosisWaitTime_.set (SmartcardDiagnosisWaitTimeTraits::create (i, f, this));
              continue;
            }
          }

          // DiagnosticReviewWidth
          //
          if (n.name () == "DiagnosticReviewWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!DiagnosticReviewWidth_.present ())
            {
              this->DiagnosticReviewWidth_.set (DiagnosticReviewWidthTraits::create (i, f, this));
              continue;
            }
          }

          // DiagnosticReviewHeight
          //
          if (n.name () == "DiagnosticReviewHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!DiagnosticReviewHeight_.present ())
            {
              this->DiagnosticReviewHeight_.set (DiagnosticReviewHeightTraits::create (i, f, this));
              continue;
            }
          }

          // DiagnosticReviewLabelConfiguration
          //
          if (n.name () == "DiagnosticReviewLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DiagnosticReviewLabelConfigurationType > r (
              DiagnosticReviewLabelConfigurationTraits::create (i, f, this));

            if (!DiagnosticReviewLabelConfiguration_.present ())
            {
              this->DiagnosticReviewLabelConfiguration_.set (r);
              continue;
            }
          }

          // ShowFooterInAutoDiagnosis
          //
          if (n.name () == "ShowFooterInAutoDiagnosis" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowFooterInAutoDiagnosis_.present ())
            {
              this->ShowFooterInAutoDiagnosis_.set (ShowFooterInAutoDiagnosisTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!BlockDiagnostic_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BlockDiagnostic",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BlockDiagnosticTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BlockDiagnosticTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BlockDiagnosticButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BlockDiagnosticButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseOkButtonOnSomeNonMandatoryDiagnosticFailed_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseOkButtonOnSomeNonMandatoryDiagnosticFailed",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseShutDownButtonOnSomeMandatoryDiagnosticFailed_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseShutDownButtonOnSomeMandatoryDiagnosticFailed",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AlarmDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AlarmDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FlashDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FlashDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrinterDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrinterDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SmartcardDiagnosisWaitTime_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SmartcardDiagnosisWaitTime",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DiagnosticReviewWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DiagnosticReviewWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DiagnosticReviewHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DiagnosticReviewHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DiagnosticReviewLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DiagnosticReviewLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowFooterInAutoDiagnosis_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowFooterInAutoDiagnosis",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      AutomaticWindowConfiguration* AutomaticWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class AutomaticWindowConfiguration (*this, f, c);
      }

      AutomaticWindowConfiguration::
      ~AutomaticWindowConfiguration ()
      {
      }

      bool
      operator== (const AutomaticWindowConfiguration& x, const AutomaticWindowConfiguration& y)
      {
        if (!(x.getDiagnosticToApply () == y.getDiagnosticToApply ()))
          return false;

        if (!(x.getBlockDiagnostic () == y.getBlockDiagnostic ()))
          return false;

        if (!(x.getBlockDiagnosticTitle () == y.getBlockDiagnosticTitle ()))
          return false;

        if (!(x.getBlockDiagnosticButton () == y.getBlockDiagnosticButton ()))
          return false;

        if (!(x.getUseOkButtonOnSomeNonMandatoryDiagnosticFailed () == y.getUseOkButtonOnSomeNonMandatoryDiagnosticFailed ()))
          return false;

        if (!(x.getUseShutDownButtonOnSomeMandatoryDiagnosticFailed () == y.getUseShutDownButtonOnSomeMandatoryDiagnosticFailed ()))
          return false;

        if (!(x.getAlarmDiagnosisWaitTime () == y.getAlarmDiagnosisWaitTime ()))
          return false;

        if (!(x.getBarcodeDiagnosisWaitTime () == y.getBarcodeDiagnosisWaitTime ()))
          return false;

        if (!(x.getFlashDiagnosisWaitTime () == y.getFlashDiagnosisWaitTime ()))
          return false;

        if (!(x.getPrinterDiagnosisWaitTime () == y.getPrinterDiagnosisWaitTime ()))
          return false;

        if (!(x.getSmartcardDiagnosisWaitTime () == y.getSmartcardDiagnosisWaitTime ()))
          return false;

        if (!(x.getDiagnosticReviewWidth () == y.getDiagnosticReviewWidth ()))
          return false;

        if (!(x.getDiagnosticReviewHeight () == y.getDiagnosticReviewHeight ()))
          return false;

        if (!(x.getDiagnosticReviewLabelConfiguration () == y.getDiagnosticReviewLabelConfiguration ()))
          return false;

        if (!(x.getShowFooterInAutoDiagnosis () == y.getShowFooterInAutoDiagnosis ()))
          return false;

        return true;
      }

      bool
      operator!= (const AutomaticWindowConfiguration& x, const AutomaticWindowConfiguration& y)
      {
        return !(x == y);
      }

      // ContingencyCardWidgetConfiguration
      //

      ContingencyCardWidgetConfiguration::
      ContingencyCardWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        RetryButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShutdownButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TextFontConf_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ContingencyCardWidgetConfiguration::
      ContingencyCardWidgetConfiguration (const RetryButtonConfType& RetryButtonConf,
                                          const ShutdownButtonConfType& ShutdownButtonConf,
                                          const TitleFontConfType& TitleFontConf,
                                          const TextFontConfType& TextFontConf)
      : ::Smartmatic::ConfigurationTypes::Type (),
        RetryButtonConf_ (RetryButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShutdownButtonConf_ (ShutdownButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConf_ (TitleFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextFontConf_ (TextFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ContingencyCardWidgetConfiguration::
      ContingencyCardWidgetConfiguration (::std::auto_ptr< RetryButtonConfType >& RetryButtonConf,
                                          ::std::auto_ptr< ShutdownButtonConfType >& ShutdownButtonConf,
                                          ::std::auto_ptr< TitleFontConfType >& TitleFontConf,
                                          ::std::auto_ptr< TextFontConfType >& TextFontConf)
      : ::Smartmatic::ConfigurationTypes::Type (),
        RetryButtonConf_ (RetryButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShutdownButtonConf_ (ShutdownButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConf_ (TitleFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextFontConf_ (TextFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ContingencyCardWidgetConfiguration::
      ContingencyCardWidgetConfiguration (const ContingencyCardWidgetConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        RetryButtonConf_ (x.RetryButtonConf_, f, this),
        ShutdownButtonConf_ (x.ShutdownButtonConf_, f, this),
        TitleFontConf_ (x.TitleFontConf_, f, this),
        TextFontConf_ (x.TextFontConf_, f, this)
      {
      }

      ContingencyCardWidgetConfiguration::
      ContingencyCardWidgetConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f,
                                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        RetryButtonConf_ (f, this),
        ShutdownButtonConf_ (f, this),
        TitleFontConf_ (f, this),
        TextFontConf_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ContingencyCardWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RetryButtonConf
          //
          if (n.name () == "RetryButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RetryButtonConfType > r (
              RetryButtonConfTraits::create (i, f, this));

            if (!RetryButtonConf_.present ())
            {
              this->RetryButtonConf_.set (r);
              continue;
            }
          }

          // ShutdownButtonConf
          //
          if (n.name () == "ShutdownButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ShutdownButtonConfType > r (
              ShutdownButtonConfTraits::create (i, f, this));

            if (!ShutdownButtonConf_.present ())
            {
              this->ShutdownButtonConf_.set (r);
              continue;
            }
          }

          // TitleFontConf
          //
          if (n.name () == "TitleFontConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleFontConfType > r (
              TitleFontConfTraits::create (i, f, this));

            if (!TitleFontConf_.present ())
            {
              this->TitleFontConf_.set (r);
              continue;
            }
          }

          // TextFontConf
          //
          if (n.name () == "TextFontConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TextFontConfType > r (
              TextFontConfTraits::create (i, f, this));

            if (!TextFontConf_.present ())
            {
              this->TextFontConf_.set (r);
              continue;
            }
          }

          break;
        }

        if (!RetryButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RetryButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShutdownButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShutdownButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleFontConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleFontConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TextFontConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextFontConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ContingencyCardWidgetConfiguration* ContingencyCardWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ContingencyCardWidgetConfiguration (*this, f, c);
      }

      ContingencyCardWidgetConfiguration::
      ~ContingencyCardWidgetConfiguration ()
      {
      }

      bool
      operator== (const ContingencyCardWidgetConfiguration& x, const ContingencyCardWidgetConfiguration& y)
      {
        if (!(x.getRetryButtonConf () == y.getRetryButtonConf ()))
          return false;

        if (!(x.getShutdownButtonConf () == y.getShutdownButtonConf ()))
          return false;

        if (!(x.getTitleFontConf () == y.getTitleFontConf ()))
          return false;

        if (!(x.getTextFontConf () == y.getTextFontConf ()))
          return false;

        return true;
      }

      bool
      operator!= (const ContingencyCardWidgetConfiguration& x, const ContingencyCardWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // MemoryStateWidgetConfiguration
      //

      MemoryStateWidgetConfiguration::
      MemoryStateWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonDelay_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TextFontConf_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MemoryStateWidgetConfiguration::
      MemoryStateWidgetConfiguration (const ButtonDelayType& ButtonDelay,
                                      const ButtonConfType& ButtonConf,
                                      const TextFontConfType& TextFontConf)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonDelay_ (ButtonDelay, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConf_ (ButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextFontConf_ (TextFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MemoryStateWidgetConfiguration::
      MemoryStateWidgetConfiguration (const ButtonDelayType& ButtonDelay,
                                      ::std::auto_ptr< ButtonConfType >& ButtonConf,
                                      ::std::auto_ptr< TextFontConfType >& TextFontConf)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonDelay_ (ButtonDelay, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConf_ (ButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TextFontConf_ (TextFontConf, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MemoryStateWidgetConfiguration::
      MemoryStateWidgetConfiguration (const MemoryStateWidgetConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ButtonDelay_ (x.ButtonDelay_, f, this),
        ButtonConf_ (x.ButtonConf_, f, this),
        TextFontConf_ (x.TextFontConf_, f, this)
      {
      }

      MemoryStateWidgetConfiguration::
      MemoryStateWidgetConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ButtonDelay_ (f, this),
        ButtonConf_ (f, this),
        TextFontConf_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MemoryStateWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ButtonDelay
          //
          if (n.name () == "ButtonDelay" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ButtonDelay_.present ())
            {
              this->ButtonDelay_.set (ButtonDelayTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonConf
          //
          if (n.name () == "ButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonConfType > r (
              ButtonConfTraits::create (i, f, this));

            if (!ButtonConf_.present ())
            {
              this->ButtonConf_.set (r);
              continue;
            }
          }

          // TextFontConf
          //
          if (n.name () == "TextFontConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TextFontConfType > r (
              TextFontConfTraits::create (i, f, this));

            if (!TextFontConf_.present ())
            {
              this->TextFontConf_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ButtonDelay_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonDelay",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TextFontConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextFontConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      MemoryStateWidgetConfiguration* MemoryStateWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class MemoryStateWidgetConfiguration (*this, f, c);
      }

      MemoryStateWidgetConfiguration::
      ~MemoryStateWidgetConfiguration ()
      {
      }

      bool
      operator== (const MemoryStateWidgetConfiguration& x, const MemoryStateWidgetConfiguration& y)
      {
        if (!(x.getButtonDelay () == y.getButtonDelay ()))
          return false;

        if (!(x.getButtonConf () == y.getButtonConf ()))
          return false;

        if (!(x.getTextFontConf () == y.getTextFontConf ()))
          return false;

        return true;
      }

      bool
      operator!= (const MemoryStateWidgetConfiguration& x, const MemoryStateWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // HelpWidgetConfiguration
      //

      HelpWidgetConfiguration::
      HelpWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrintButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      HelpWidgetConfiguration::
      HelpWidgetConfiguration (const PrintButtonConfType& PrintButtonConf)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrintButtonConf_ (PrintButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      HelpWidgetConfiguration::
      HelpWidgetConfiguration (::std::auto_ptr< PrintButtonConfType >& PrintButtonConf)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrintButtonConf_ (PrintButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      HelpWidgetConfiguration::
      HelpWidgetConfiguration (const HelpWidgetConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PrintButtonConf_ (x.PrintButtonConf_, f, this)
      {
      }

      HelpWidgetConfiguration::
      HelpWidgetConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PrintButtonConf_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void HelpWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PrintButtonConf
          //
          if (n.name () == "PrintButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PrintButtonConfType > r (
              PrintButtonConfTraits::create (i, f, this));

            if (!PrintButtonConf_.present ())
            {
              this->PrintButtonConf_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PrintButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrintButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      HelpWidgetConfiguration* HelpWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class HelpWidgetConfiguration (*this, f, c);
      }

      HelpWidgetConfiguration::
      ~HelpWidgetConfiguration ()
      {
      }

      bool
      operator== (const HelpWidgetConfiguration& x, const HelpWidgetConfiguration& y)
      {
        if (!(x.getPrintButtonConf () == y.getPrintButtonConf ()))
          return false;

        return true;
      }

      bool
      operator!= (const HelpWidgetConfiguration& x, const HelpWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // WaitingForCardWindowConfiguration
      //

      WaitingForCardWindowConfiguration::
      WaitingForCardWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowSimulateButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBackButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ViewPrevious_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AllowVotePreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UsePrintPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewVoteLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewVoteButtonConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutPreviewVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutPreviewVoteClose_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeCommandsName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewLanguageConfig_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockOnCardInsertionError_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IsNeopBlockingCondition_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WaitingForCardWindowConfiguration::
      WaitingForCardWindowConfiguration (const ShowSimulateButtonType& ShowSimulateButton,
                                         const ShowBackButtonType& ShowBackButton,
                                         const ViewPreviousType& ViewPrevious,
                                         const AllowVotePreviewType& AllowVotePreview,
                                         const UsePrintPreviewType& UsePrintPreview,
                                         const UseVerticalTableInPreviewType& UseVerticalTableInPreview,
                                         const PreviewVoteLabelConfigurationType& PreviewVoteLabelConfiguration,
                                         const PreviewVoteButtonConfigurationType& PreviewVoteButtonConfiguration,
                                         const TimeoutPreviewVoteType& TimeoutPreviewVote,
                                         const TimeoutPreviewVoteCloseType& TimeoutPreviewVoteClose,
                                         const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                         const BarcodeCommandsNameType& BarcodeCommandsName,
                                         const PreviewLanguageConfigType& PreviewLanguageConfig,
                                         const BlockOnCardInsertionErrorType& BlockOnCardInsertionError,
                                         const IsNeopBlockingConditionType& IsNeopBlockingCondition)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowSimulateButton_ (ShowSimulateButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBackButton_ (ShowBackButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ViewPrevious_ (ViewPrevious, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllowVotePreview_ (AllowVotePreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UsePrintPreview_ (UsePrintPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (UseVerticalTableInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewVoteLabelConfiguration_ (PreviewVoteLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewVoteButtonConfiguration_ (PreviewVoteButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutPreviewVote_ (TimeoutPreviewVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutPreviewVoteClose_ (TimeoutPreviewVoteClose, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeCommandsName_ (BarcodeCommandsName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewLanguageConfig_ (PreviewLanguageConfig, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockOnCardInsertionError_ (BlockOnCardInsertionError, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IsNeopBlockingCondition_ (IsNeopBlockingCondition, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WaitingForCardWindowConfiguration::
      WaitingForCardWindowConfiguration (const ShowSimulateButtonType& ShowSimulateButton,
                                         const ShowBackButtonType& ShowBackButton,
                                         const ViewPreviousType& ViewPrevious,
                                         const AllowVotePreviewType& AllowVotePreview,
                                         const UsePrintPreviewType& UsePrintPreview,
                                         const UseVerticalTableInPreviewType& UseVerticalTableInPreview,
                                         ::std::auto_ptr< PreviewVoteLabelConfigurationType >& PreviewVoteLabelConfiguration,
                                         ::std::auto_ptr< PreviewVoteButtonConfigurationType >& PreviewVoteButtonConfiguration,
                                         const TimeoutPreviewVoteType& TimeoutPreviewVote,
                                         const TimeoutPreviewVoteCloseType& TimeoutPreviewVoteClose,
                                         const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                         const BarcodeCommandsNameType& BarcodeCommandsName,
                                         const PreviewLanguageConfigType& PreviewLanguageConfig,
                                         const BlockOnCardInsertionErrorType& BlockOnCardInsertionError,
                                         const IsNeopBlockingConditionType& IsNeopBlockingCondition)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowSimulateButton_ (ShowSimulateButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBackButton_ (ShowBackButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ViewPrevious_ (ViewPrevious, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllowVotePreview_ (AllowVotePreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UsePrintPreview_ (UsePrintPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (UseVerticalTableInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewVoteLabelConfiguration_ (PreviewVoteLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewVoteButtonConfiguration_ (PreviewVoteButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutPreviewVote_ (TimeoutPreviewVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeoutPreviewVoteClose_ (TimeoutPreviewVoteClose, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeCommandsName_ (BarcodeCommandsName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PreviewLanguageConfig_ (PreviewLanguageConfig, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockOnCardInsertionError_ (BlockOnCardInsertionError, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IsNeopBlockingCondition_ (IsNeopBlockingCondition, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      WaitingForCardWindowConfiguration::
      WaitingForCardWindowConfiguration (const WaitingForCardWindowConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ShowSimulateButton_ (x.ShowSimulateButton_, f, this),
        ShowBackButton_ (x.ShowBackButton_, f, this),
        ViewPrevious_ (x.ViewPrevious_, f, this),
        AllowVotePreview_ (x.AllowVotePreview_, f, this),
        UsePrintPreview_ (x.UsePrintPreview_, f, this),
        UseVerticalTableInPreview_ (x.UseVerticalTableInPreview_, f, this),
        PreviewVoteLabelConfiguration_ (x.PreviewVoteLabelConfiguration_, f, this),
        PreviewVoteButtonConfiguration_ (x.PreviewVoteButtonConfiguration_, f, this),
        TimeoutPreviewVote_ (x.TimeoutPreviewVote_, f, this),
        TimeoutPreviewVoteClose_ (x.TimeoutPreviewVoteClose_, f, this),
        ShowBarcodeInPreview_ (x.ShowBarcodeInPreview_, f, this),
        BarcodeCommandsName_ (x.BarcodeCommandsName_, f, this),
        PreviewLanguageConfig_ (x.PreviewLanguageConfig_, f, this),
        BlockOnCardInsertionError_ (x.BlockOnCardInsertionError_, f, this),
        IsNeopBlockingCondition_ (x.IsNeopBlockingCondition_, f, this)
      {
      }

      WaitingForCardWindowConfiguration::
      WaitingForCardWindowConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ShowSimulateButton_ (f, this),
        ShowBackButton_ (f, this),
        ViewPrevious_ (f, this),
        AllowVotePreview_ (f, this),
        UsePrintPreview_ (f, this),
        UseVerticalTableInPreview_ (f, this),
        PreviewVoteLabelConfiguration_ (f, this),
        PreviewVoteButtonConfiguration_ (f, this),
        TimeoutPreviewVote_ (f, this),
        TimeoutPreviewVoteClose_ (f, this),
        ShowBarcodeInPreview_ (f, this),
        BarcodeCommandsName_ (f, this),
        PreviewLanguageConfig_ (f, this),
        BlockOnCardInsertionError_ (f, this),
        IsNeopBlockingCondition_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void WaitingForCardWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShowSimulateButton
          //
          if (n.name () == "ShowSimulateButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowSimulateButton_.present ())
            {
              this->ShowSimulateButton_.set (ShowSimulateButtonTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBackButton
          //
          if (n.name () == "ShowBackButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBackButton_.present ())
            {
              this->ShowBackButton_.set (ShowBackButtonTraits::create (i, f, this));
              continue;
            }
          }

          // ViewPrevious
          //
          if (n.name () == "ViewPrevious" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ViewPrevious_.present ())
            {
              this->ViewPrevious_.set (ViewPreviousTraits::create (i, f, this));
              continue;
            }
          }

          // AllowVotePreview
          //
          if (n.name () == "AllowVotePreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AllowVotePreview_.present ())
            {
              this->AllowVotePreview_.set (AllowVotePreviewTraits::create (i, f, this));
              continue;
            }
          }

          // UsePrintPreview
          //
          if (n.name () == "UsePrintPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UsePrintPreview_.present ())
            {
              this->UsePrintPreview_.set (UsePrintPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // UseVerticalTableInPreview
          //
          if (n.name () == "UseVerticalTableInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseVerticalTableInPreview_.present ())
            {
              this->UseVerticalTableInPreview_.set (UseVerticalTableInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // PreviewVoteLabelConfiguration
          //
          if (n.name () == "PreviewVoteLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PreviewVoteLabelConfigurationType > r (
              PreviewVoteLabelConfigurationTraits::create (i, f, this));

            if (!PreviewVoteLabelConfiguration_.present ())
            {
              this->PreviewVoteLabelConfiguration_.set (r);
              continue;
            }
          }

          // PreviewVoteButtonConfiguration
          //
          if (n.name () == "PreviewVoteButtonConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PreviewVoteButtonConfigurationType > r (
              PreviewVoteButtonConfigurationTraits::create (i, f, this));

            if (!PreviewVoteButtonConfiguration_.present ())
            {
              this->PreviewVoteButtonConfiguration_.set (r);
              continue;
            }
          }

          // TimeoutPreviewVote
          //
          if (n.name () == "TimeoutPreviewVote" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeoutPreviewVote_.present ())
            {
              this->TimeoutPreviewVote_.set (TimeoutPreviewVoteTraits::create (i, f, this));
              continue;
            }
          }

          // TimeoutPreviewVoteClose
          //
          if (n.name () == "TimeoutPreviewVoteClose" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeoutPreviewVoteClose_.present ())
            {
              this->TimeoutPreviewVoteClose_.set (TimeoutPreviewVoteCloseTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBarcodeInPreview
          //
          if (n.name () == "ShowBarcodeInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBarcodeInPreview_.present ())
            {
              this->ShowBarcodeInPreview_.set (ShowBarcodeInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeCommandsName
          //
          if (n.name () == "BarcodeCommandsName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeCommandsNameType > r (
              BarcodeCommandsNameTraits::create (i, f, this));

            if (!BarcodeCommandsName_.present ())
            {
              this->BarcodeCommandsName_.set (r);
              continue;
            }
          }

          // PreviewLanguageConfig
          //
          if (n.name () == "PreviewLanguageConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PreviewLanguageConfigType > r (
              PreviewLanguageConfigTraits::create (i, f, this));

            if (!PreviewLanguageConfig_.present ())
            {
              this->PreviewLanguageConfig_.set (r);
              continue;
            }
          }

          // BlockOnCardInsertionError
          //
          if (n.name () == "BlockOnCardInsertionError" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!BlockOnCardInsertionError_.present ())
            {
              this->BlockOnCardInsertionError_.set (BlockOnCardInsertionErrorTraits::create (i, f, this));
              continue;
            }
          }

          // IsNeopBlockingCondition
          //
          if (n.name () == "IsNeopBlockingCondition" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!IsNeopBlockingCondition_.present ())
            {
              this->IsNeopBlockingCondition_.set (IsNeopBlockingConditionTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ShowSimulateButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowSimulateButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBackButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBackButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ViewPrevious_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ViewPrevious",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AllowVotePreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AllowVotePreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UsePrintPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UsePrintPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseVerticalTableInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseVerticalTableInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PreviewVoteLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PreviewVoteLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PreviewVoteButtonConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PreviewVoteButtonConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeoutPreviewVote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeoutPreviewVote",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeoutPreviewVoteClose_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeoutPreviewVoteClose",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBarcodeInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBarcodeInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeCommandsName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeCommandsName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PreviewLanguageConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PreviewLanguageConfig",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BlockOnCardInsertionError_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BlockOnCardInsertionError",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!IsNeopBlockingCondition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IsNeopBlockingCondition",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      WaitingForCardWindowConfiguration* WaitingForCardWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class WaitingForCardWindowConfiguration (*this, f, c);
      }

      WaitingForCardWindowConfiguration::
      ~WaitingForCardWindowConfiguration ()
      {
      }

      bool
      operator== (const WaitingForCardWindowConfiguration& x, const WaitingForCardWindowConfiguration& y)
      {
        if (!(x.getShowSimulateButton () == y.getShowSimulateButton ()))
          return false;

        if (!(x.getShowBackButton () == y.getShowBackButton ()))
          return false;

        if (!(x.getViewPrevious () == y.getViewPrevious ()))
          return false;

        if (!(x.getAllowVotePreview () == y.getAllowVotePreview ()))
          return false;

        if (!(x.getUsePrintPreview () == y.getUsePrintPreview ()))
          return false;

        if (!(x.getUseVerticalTableInPreview () == y.getUseVerticalTableInPreview ()))
          return false;

        if (!(x.getPreviewVoteLabelConfiguration () == y.getPreviewVoteLabelConfiguration ()))
          return false;

        if (!(x.getPreviewVoteButtonConfiguration () == y.getPreviewVoteButtonConfiguration ()))
          return false;

        if (!(x.getTimeoutPreviewVote () == y.getTimeoutPreviewVote ()))
          return false;

        if (!(x.getTimeoutPreviewVoteClose () == y.getTimeoutPreviewVoteClose ()))
          return false;

        if (!(x.getShowBarcodeInPreview () == y.getShowBarcodeInPreview ()))
          return false;

        if (!(x.getBarcodeCommandsName () == y.getBarcodeCommandsName ()))
          return false;

        if (!(x.getPreviewLanguageConfig () == y.getPreviewLanguageConfig ()))
          return false;

        if (!(x.getBlockOnCardInsertionError () == y.getBlockOnCardInsertionError ()))
          return false;

        if (!(x.getIsNeopBlockingCondition () == y.getIsNeopBlockingCondition ()))
          return false;

        return true;
      }

      bool
      operator!= (const WaitingForCardWindowConfiguration& x, const WaitingForCardWindowConfiguration& y)
      {
        return !(x == y);
      }

      // LanguageSelectionWindowConfiguration
      //

      LanguageSelectionWindowConfiguration::
      LanguageSelectionWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        LanguageButton_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      LanguageSelectionWindowConfiguration::
      LanguageSelectionWindowConfiguration (const LanguageSelectionWindowConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        LanguageButton_ (x.LanguageButton_, f, this)
      {
      }

      LanguageSelectionWindowConfiguration::
      LanguageSelectionWindowConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        LanguageButton_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LanguageSelectionWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LanguageButton
          //
          if (n.name () == "LanguageButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LanguageButtonType > r (
              LanguageButtonTraits::create (i, f, this));

            this->LanguageButton_.push_back (r);
            continue;
          }

          break;
        }
      }

      LanguageSelectionWindowConfiguration* LanguageSelectionWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class LanguageSelectionWindowConfiguration (*this, f, c);
      }

      LanguageSelectionWindowConfiguration::
      ~LanguageSelectionWindowConfiguration ()
      {
      }

      bool
      operator== (const LanguageSelectionWindowConfiguration& x, const LanguageSelectionWindowConfiguration& y)
      {
        if (!(x.getLanguageButton () == y.getLanguageButton ()))
          return false;

        return true;
      }

      bool
      operator!= (const LanguageSelectionWindowConfiguration& x, const LanguageSelectionWindowConfiguration& y)
      {
        return !(x == y);
      }

      // StatisticFunctionalityConfiguration
      //

      StatisticFunctionalityConfiguration::
      StatisticFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        RowsSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ColumnsSpacing_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticFunctionalityConfiguration::
      StatisticFunctionalityConfiguration (const RowsSpacingType& RowsSpacing,
                                           const ColumnsSpacingType& ColumnsSpacing,
                                           const ButtonConfigurationType& ButtonConfiguration,
                                           const TitleLabelConfigurationType& TitleLabelConfiguration,
                                           const StatisticsLabelConfigurationType& StatisticsLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        RowsSpacing_ (RowsSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ColumnsSpacing_ (ColumnsSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleLabelConfiguration_ (TitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsLabelConfiguration_ (StatisticsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticFunctionalityConfiguration::
      StatisticFunctionalityConfiguration (const RowsSpacingType& RowsSpacing,
                                           const ColumnsSpacingType& ColumnsSpacing,
                                           ::std::auto_ptr< ButtonConfigurationType >& ButtonConfiguration,
                                           ::std::auto_ptr< TitleLabelConfigurationType >& TitleLabelConfiguration,
                                           ::std::auto_ptr< StatisticsLabelConfigurationType >& StatisticsLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        RowsSpacing_ (RowsSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ColumnsSpacing_ (ColumnsSpacing, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleLabelConfiguration_ (TitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsLabelConfiguration_ (StatisticsLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticFunctionalityConfiguration::
      StatisticFunctionalityConfiguration (const StatisticFunctionalityConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        RowsSpacing_ (x.RowsSpacing_, f, this),
        ColumnsSpacing_ (x.ColumnsSpacing_, f, this),
        ButtonConfiguration_ (x.ButtonConfiguration_, f, this),
        TitleLabelConfiguration_ (x.TitleLabelConfiguration_, f, this),
        StatisticsLabelConfiguration_ (x.StatisticsLabelConfiguration_, f, this)
      {
      }

      StatisticFunctionalityConfiguration::
      StatisticFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        RowsSpacing_ (f, this),
        ColumnsSpacing_ (f, this),
        ButtonConfiguration_ (f, this),
        TitleLabelConfiguration_ (f, this),
        StatisticsLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void StatisticFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RowsSpacing
          //
          if (n.name () == "RowsSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RowsSpacing_.present ())
            {
              this->RowsSpacing_.set (RowsSpacingTraits::create (i, f, this));
              continue;
            }
          }

          // ColumnsSpacing
          //
          if (n.name () == "ColumnsSpacing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ColumnsSpacing_.present ())
            {
              this->ColumnsSpacing_.set (ColumnsSpacingTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonConfiguration
          //
          if (n.name () == "ButtonConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonConfigurationType > r (
              ButtonConfigurationTraits::create (i, f, this));

            if (!ButtonConfiguration_.present ())
            {
              this->ButtonConfiguration_.set (r);
              continue;
            }
          }

          // TitleLabelConfiguration
          //
          if (n.name () == "TitleLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleLabelConfigurationType > r (
              TitleLabelConfigurationTraits::create (i, f, this));

            if (!TitleLabelConfiguration_.present ())
            {
              this->TitleLabelConfiguration_.set (r);
              continue;
            }
          }

          // StatisticsLabelConfiguration
          //
          if (n.name () == "StatisticsLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsLabelConfigurationType > r (
              StatisticsLabelConfigurationTraits::create (i, f, this));

            if (!StatisticsLabelConfiguration_.present ())
            {
              this->StatisticsLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!RowsSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RowsSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ColumnsSpacing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ColumnsSpacing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      StatisticFunctionalityConfiguration* StatisticFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class StatisticFunctionalityConfiguration (*this, f, c);
      }

      StatisticFunctionalityConfiguration::
      ~StatisticFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const StatisticFunctionalityConfiguration& x, const StatisticFunctionalityConfiguration& y)
      {
        if (!(x.getRowsSpacing () == y.getRowsSpacing ()))
          return false;

        if (!(x.getColumnsSpacing () == y.getColumnsSpacing ()))
          return false;

        if (!(x.getButtonConfiguration () == y.getButtonConfiguration ()))
          return false;

        if (!(x.getTitleLabelConfiguration () == y.getTitleLabelConfiguration ()))
          return false;

        if (!(x.getStatisticsLabelConfiguration () == y.getStatisticsLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const StatisticFunctionalityConfiguration& x, const StatisticFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // OpenElectionFunctionalityConfiguration
      //

      OpenElectionFunctionalityConfiguration::
      OpenElectionFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DialogLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElectionSteps_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      OpenElectionFunctionalityConfiguration::
      OpenElectionFunctionalityConfiguration (const ShowTitleType& ShowTitle,
                                              const ButtonConfigurationType& ButtonConfiguration,
                                              const DialogLabelConfigurationType& DialogLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowTitle_ (ShowTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DialogLabelConfiguration_ (DialogLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElectionSteps_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      OpenElectionFunctionalityConfiguration::
      OpenElectionFunctionalityConfiguration (const ShowTitleType& ShowTitle,
                                              ::std::auto_ptr< ButtonConfigurationType >& ButtonConfiguration,
                                              ::std::auto_ptr< DialogLabelConfigurationType >& DialogLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowTitle_ (ShowTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DialogLabelConfiguration_ (DialogLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OpenElectionSteps_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      OpenElectionFunctionalityConfiguration::
      OpenElectionFunctionalityConfiguration (const OpenElectionFunctionalityConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f,
                                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ShowTitle_ (x.ShowTitle_, f, this),
        ButtonConfiguration_ (x.ButtonConfiguration_, f, this),
        DialogLabelConfiguration_ (x.DialogLabelConfiguration_, f, this),
        OpenElectionSteps_ (x.OpenElectionSteps_, f, this)
      {
      }

      OpenElectionFunctionalityConfiguration::
      OpenElectionFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f,
                                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ShowTitle_ (f, this),
        ButtonConfiguration_ (f, this),
        DialogLabelConfiguration_ (f, this),
        OpenElectionSteps_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void OpenElectionFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShowTitle
          //
          if (n.name () == "ShowTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowTitle_.present ())
            {
              this->ShowTitle_.set (ShowTitleTraits::create (i, f, this));
              continue;
            }
          }

          // ButtonConfiguration
          //
          if (n.name () == "ButtonConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonConfigurationType > r (
              ButtonConfigurationTraits::create (i, f, this));

            if (!ButtonConfiguration_.present ())
            {
              this->ButtonConfiguration_.set (r);
              continue;
            }
          }

          // DialogLabelConfiguration
          //
          if (n.name () == "DialogLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DialogLabelConfigurationType > r (
              DialogLabelConfigurationTraits::create (i, f, this));

            if (!DialogLabelConfiguration_.present ())
            {
              this->DialogLabelConfiguration_.set (r);
              continue;
            }
          }

          // OpenElectionSteps
          //
          if (n.name () == "OpenElectionSteps" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OpenElectionStepsType > r (
              OpenElectionStepsTraits::create (i, f, this));

            this->OpenElectionSteps_.push_back (r);
            continue;
          }

          break;
        }

        if (!ShowTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ButtonConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DialogLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DialogLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      OpenElectionFunctionalityConfiguration* OpenElectionFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class OpenElectionFunctionalityConfiguration (*this, f, c);
      }

      OpenElectionFunctionalityConfiguration::
      ~OpenElectionFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const OpenElectionFunctionalityConfiguration& x, const OpenElectionFunctionalityConfiguration& y)
      {
        if (!(x.getShowTitle () == y.getShowTitle ()))
          return false;

        if (!(x.getButtonConfiguration () == y.getButtonConfiguration ()))
          return false;

        if (!(x.getDialogLabelConfiguration () == y.getDialogLabelConfiguration ()))
          return false;

        if (!(x.getOpenElectionSteps () == y.getOpenElectionSteps ()))
          return false;

        return true;
      }

      bool
      operator!= (const OpenElectionFunctionalityConfiguration& x, const OpenElectionFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // AuthenticationWindowConfiguration
      //

      AuthenticationWindowConfiguration::
      AuthenticationWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PasswordLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingInfoLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AuthenticationWindowConfiguration::
      AuthenticationWindowConfiguration (const PasswordLabelConfigurationType& PasswordLabelConfiguration,
                                         const AlarmLabelConfigurationType& AlarmLabelConfiguration,
                                         const InfoLabelConfigurationType& InfoLabelConfiguration,
                                         const VotingInfoLabelConfigurationType& VotingInfoLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PasswordLabelConfiguration_ (PasswordLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmLabelConfiguration_ (AlarmLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoLabelConfiguration_ (InfoLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingInfoLabelConfiguration_ (VotingInfoLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AuthenticationWindowConfiguration::
      AuthenticationWindowConfiguration (::std::auto_ptr< PasswordLabelConfigurationType >& PasswordLabelConfiguration,
                                         ::std::auto_ptr< AlarmLabelConfigurationType >& AlarmLabelConfiguration,
                                         ::std::auto_ptr< InfoLabelConfigurationType >& InfoLabelConfiguration,
                                         ::std::auto_ptr< VotingInfoLabelConfigurationType >& VotingInfoLabelConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PasswordLabelConfiguration_ (PasswordLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AlarmLabelConfiguration_ (AlarmLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoLabelConfiguration_ (InfoLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingInfoLabelConfiguration_ (VotingInfoLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AuthenticationWindowConfiguration::
      AuthenticationWindowConfiguration (const AuthenticationWindowConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PasswordLabelConfiguration_ (x.PasswordLabelConfiguration_, f, this),
        AlarmLabelConfiguration_ (x.AlarmLabelConfiguration_, f, this),
        InfoLabelConfiguration_ (x.InfoLabelConfiguration_, f, this),
        VotingInfoLabelConfiguration_ (x.VotingInfoLabelConfiguration_, f, this)
      {
      }

      AuthenticationWindowConfiguration::
      AuthenticationWindowConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PasswordLabelConfiguration_ (f, this),
        AlarmLabelConfiguration_ (f, this),
        InfoLabelConfiguration_ (f, this),
        VotingInfoLabelConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void AuthenticationWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PasswordLabelConfiguration
          //
          if (n.name () == "PasswordLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PasswordLabelConfigurationType > r (
              PasswordLabelConfigurationTraits::create (i, f, this));

            if (!PasswordLabelConfiguration_.present ())
            {
              this->PasswordLabelConfiguration_.set (r);
              continue;
            }
          }

          // AlarmLabelConfiguration
          //
          if (n.name () == "AlarmLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AlarmLabelConfigurationType > r (
              AlarmLabelConfigurationTraits::create (i, f, this));

            if (!AlarmLabelConfiguration_.present ())
            {
              this->AlarmLabelConfiguration_.set (r);
              continue;
            }
          }

          // InfoLabelConfiguration
          //
          if (n.name () == "InfoLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoLabelConfigurationType > r (
              InfoLabelConfigurationTraits::create (i, f, this));

            if (!InfoLabelConfiguration_.present ())
            {
              this->InfoLabelConfiguration_.set (r);
              continue;
            }
          }

          // VotingInfoLabelConfiguration
          //
          if (n.name () == "VotingInfoLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingInfoLabelConfigurationType > r (
              VotingInfoLabelConfigurationTraits::create (i, f, this));

            if (!VotingInfoLabelConfiguration_.present ())
            {
              this->VotingInfoLabelConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PasswordLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PasswordLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AlarmLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AlarmLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingInfoLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingInfoLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      AuthenticationWindowConfiguration* AuthenticationWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class AuthenticationWindowConfiguration (*this, f, c);
      }

      AuthenticationWindowConfiguration::
      ~AuthenticationWindowConfiguration ()
      {
      }

      bool
      operator== (const AuthenticationWindowConfiguration& x, const AuthenticationWindowConfiguration& y)
      {
        if (!(x.getPasswordLabelConfiguration () == y.getPasswordLabelConfiguration ()))
          return false;

        if (!(x.getAlarmLabelConfiguration () == y.getAlarmLabelConfiguration ()))
          return false;

        if (!(x.getInfoLabelConfiguration () == y.getInfoLabelConfiguration ()))
          return false;

        if (!(x.getVotingInfoLabelConfiguration () == y.getVotingInfoLabelConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const AuthenticationWindowConfiguration& x, const AuthenticationWindowConfiguration& y)
      {
        return !(x == y);
      }

      // DurationWidgetConfiguration
      //

      DurationWidgetConfiguration::
      DurationWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        LeaveFieldsBlank_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DurationWidgetConfiguration::
      DurationWidgetConfiguration (const LeaveFieldsBlankType& LeaveFieldsBlank)
      : ::Smartmatic::ConfigurationTypes::Type (),
        LeaveFieldsBlank_ (LeaveFieldsBlank, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DurationWidgetConfiguration::
      DurationWidgetConfiguration (const DurationWidgetConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        LeaveFieldsBlank_ (x.LeaveFieldsBlank_, f, this)
      {
      }

      DurationWidgetConfiguration::
      DurationWidgetConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        LeaveFieldsBlank_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void DurationWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LeaveFieldsBlank
          //
          if (n.name () == "LeaveFieldsBlank" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!LeaveFieldsBlank_.present ())
            {
              this->LeaveFieldsBlank_.set (LeaveFieldsBlankTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!LeaveFieldsBlank_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LeaveFieldsBlank",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      DurationWidgetConfiguration* DurationWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DurationWidgetConfiguration (*this, f, c);
      }

      DurationWidgetConfiguration::
      ~DurationWidgetConfiguration ()
      {
      }

      bool
      operator== (const DurationWidgetConfiguration& x, const DurationWidgetConfiguration& y)
      {
        if (!(x.getLeaveFieldsBlank () == y.getLeaveFieldsBlank ()))
          return false;

        return true;
      }

      bool
      operator!= (const DurationWidgetConfiguration& x, const DurationWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // CloseElectionFunctionalityConfiguration
      //

      CloseElectionFunctionalityConfiguration::
      CloseElectionFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ClosingElectionSteps_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowSignQuestion_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowSignConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ContinueCloseOnSignFail_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseElectionFunctionalityConfiguration::
      CloseElectionFunctionalityConfiguration (const ButtonConfigurationType& ButtonConfiguration,
                                               const ShowSignQuestionType& ShowSignQuestion,
                                               const ShowSignConfirmationType& ShowSignConfirmation,
                                               const ContinueCloseOnSignFailType& ContinueCloseOnSignFail,
                                               const ShowConfirmationType& ShowConfirmation)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ClosingElectionSteps_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowSignQuestion_ (ShowSignQuestion, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowSignConfirmation_ (ShowSignConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContinueCloseOnSignFail_ (ContinueCloseOnSignFail, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmation_ (ShowConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseElectionFunctionalityConfiguration::
      CloseElectionFunctionalityConfiguration (::std::auto_ptr< ButtonConfigurationType >& ButtonConfiguration,
                                               const ShowSignQuestionType& ShowSignQuestion,
                                               const ShowSignConfirmationType& ShowSignConfirmation,
                                               const ContinueCloseOnSignFailType& ContinueCloseOnSignFail,
                                               const ShowConfirmationType& ShowConfirmation)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ClosingElectionSteps_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowSignQuestion_ (ShowSignQuestion, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowSignConfirmation_ (ShowSignConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ContinueCloseOnSignFail_ (ContinueCloseOnSignFail, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmation_ (ShowConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseElectionFunctionalityConfiguration::
      CloseElectionFunctionalityConfiguration (const CloseElectionFunctionalityConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ButtonConfiguration_ (x.ButtonConfiguration_, f, this),
        ClosingElectionSteps_ (x.ClosingElectionSteps_, f, this),
        ShowSignQuestion_ (x.ShowSignQuestion_, f, this),
        ShowSignConfirmation_ (x.ShowSignConfirmation_, f, this),
        ContinueCloseOnSignFail_ (x.ContinueCloseOnSignFail_, f, this),
        ShowConfirmation_ (x.ShowConfirmation_, f, this)
      {
      }

      CloseElectionFunctionalityConfiguration::
      CloseElectionFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ButtonConfiguration_ (f, this),
        ClosingElectionSteps_ (f, this),
        ShowSignQuestion_ (f, this),
        ShowSignConfirmation_ (f, this),
        ContinueCloseOnSignFail_ (f, this),
        ShowConfirmation_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CloseElectionFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ButtonConfiguration
          //
          if (n.name () == "ButtonConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonConfigurationType > r (
              ButtonConfigurationTraits::create (i, f, this));

            if (!ButtonConfiguration_.present ())
            {
              this->ButtonConfiguration_.set (r);
              continue;
            }
          }

          // ClosingElectionSteps
          //
          if (n.name () == "ClosingElectionSteps" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ClosingElectionStepsType > r (
              ClosingElectionStepsTraits::create (i, f, this));

            this->ClosingElectionSteps_.push_back (r);
            continue;
          }

          // ShowSignQuestion
          //
          if (n.name () == "ShowSignQuestion" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowSignQuestion_.present ())
            {
              this->ShowSignQuestion_.set (ShowSignQuestionTraits::create (i, f, this));
              continue;
            }
          }

          // ShowSignConfirmation
          //
          if (n.name () == "ShowSignConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowSignConfirmation_.present ())
            {
              this->ShowSignConfirmation_.set (ShowSignConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ContinueCloseOnSignFail
          //
          if (n.name () == "ContinueCloseOnSignFail" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ContinueCloseOnSignFail_.present ())
            {
              this->ContinueCloseOnSignFail_.set (ContinueCloseOnSignFailTraits::create (i, f, this));
              continue;
            }
          }

          // ShowConfirmation
          //
          if (n.name () == "ShowConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowConfirmation_.present ())
            {
              this->ShowConfirmation_.set (ShowConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ButtonConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowSignQuestion_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowSignQuestion",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowSignConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowSignConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ContinueCloseOnSignFail_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContinueCloseOnSignFail",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CloseElectionFunctionalityConfiguration* CloseElectionFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CloseElectionFunctionalityConfiguration (*this, f, c);
      }

      CloseElectionFunctionalityConfiguration::
      ~CloseElectionFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CloseElectionFunctionalityConfiguration& x, const CloseElectionFunctionalityConfiguration& y)
      {
        if (!(x.getButtonConfiguration () == y.getButtonConfiguration ()))
          return false;

        if (!(x.getClosingElectionSteps () == y.getClosingElectionSteps ()))
          return false;

        if (!(x.getShowSignQuestion () == y.getShowSignQuestion ()))
          return false;

        if (!(x.getShowSignConfirmation () == y.getShowSignConfirmation ()))
          return false;

        if (!(x.getContinueCloseOnSignFail () == y.getContinueCloseOnSignFail ()))
          return false;

        if (!(x.getShowConfirmation () == y.getShowConfirmation ()))
          return false;

        return true;
      }

      bool
      operator!= (const CloseElectionFunctionalityConfiguration& x, const CloseElectionFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // ActivationConsolidationFunctionalityConfiguration
      //

      ActivationConsolidationFunctionalityConfiguration::
      ActivationConsolidationFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowTotalVotes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowOfficialVotes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDuplicatesVotes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowScanMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowActivateCards_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedBoxColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UnselectedBoxColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedFontColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UnselectedFontColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelSelectedConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelUnselectedConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsConsolidationHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsConsolidationFontConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsActivationHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsActivationFontConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InstructionFontConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DevicesLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivateCardsWithoutBarcode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateVoteWithOneMemory_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ScanConsolidationConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivationTotalCountConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationTotalCountConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationOfficialCountConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimerSleepWriteCard_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ActivationConsolidationFunctionalityConfiguration::
      ActivationConsolidationFunctionalityConfiguration (const ShowTotalVotesType& ShowTotalVotes,
                                                         const ShowOfficialVotesType& ShowOfficialVotes,
                                                         const ShowDuplicatesVotesType& ShowDuplicatesVotes,
                                                         const ShowScanMessageType& ShowScanMessage,
                                                         const ShowBarcodeMessageType& ShowBarcodeMessage,
                                                         const ShowActivateCardsType& ShowActivateCards,
                                                         const SelectedBoxColorType& SelectedBoxColor,
                                                         const UnselectedBoxColorType& UnselectedBoxColor,
                                                         const SelectedFontColorType& SelectedFontColor,
                                                         const UnselectedFontColorType& UnselectedFontColor,
                                                         const LabelSelectedConfigurationType& LabelSelectedConfiguration,
                                                         const LabelUnselectedConfigurationType& LabelUnselectedConfiguration,
                                                         const TitleHeightType& TitleHeight,
                                                         const TitleFontConfigurationType& TitleFontConfiguration,
                                                         const StatsConsolidationHeightType& StatsConsolidationHeight,
                                                         const StatsConsolidationFontConfigurationType& StatsConsolidationFontConfiguration,
                                                         const StatsActivationHeightType& StatsActivationHeight,
                                                         const StatsActivationFontConfigurationType& StatsActivationFontConfiguration,
                                                         const InstructionFontConfigurationType& InstructionFontConfiguration,
                                                         const DevicesLabelConfigurationType& DevicesLabelConfiguration,
                                                         const ActivateCardsWithoutBarcodeType& ActivateCardsWithoutBarcode,
                                                         const ConsolidateVoteWithOneMemoryType& ConsolidateVoteWithOneMemory,
                                                         const BarcodeInParamsType& BarcodeInParams,
                                                         const BarcodeOutParamsType& BarcodeOutParams,
                                                         const ScanConsolidationConfigurationType& ScanConsolidationConfiguration,
                                                         const CardActivationTotalCountConfigurationType& CardActivationTotalCountConfiguration,
                                                         const ConsolidationTotalCountConfigurationType& ConsolidationTotalCountConfiguration,
                                                         const ConsolidationOfficialCountConfigurationType& ConsolidationOfficialCountConfiguration,
                                                         const TimerSleepWriteCardType& TimerSleepWriteCard)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowTotalVotes_ (ShowTotalVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowOfficialVotes_ (ShowOfficialVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDuplicatesVotes_ (ShowDuplicatesVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowScanMessage_ (ShowScanMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeMessage_ (ShowBarcodeMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowActivateCards_ (ShowActivateCards, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedBoxColor_ (SelectedBoxColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnselectedBoxColor_ (UnselectedBoxColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedFontColor_ (SelectedFontColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnselectedFontColor_ (UnselectedFontColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelSelectedConfiguration_ (LabelSelectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelUnselectedConfiguration_ (LabelUnselectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHeight_ (TitleHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConfiguration_ (TitleFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsConsolidationHeight_ (StatsConsolidationHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsConsolidationFontConfiguration_ (StatsConsolidationFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsActivationHeight_ (StatsActivationHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsActivationFontConfiguration_ (StatsActivationFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InstructionFontConfiguration_ (InstructionFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DevicesLabelConfiguration_ (DevicesLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivateCardsWithoutBarcode_ (ActivateCardsWithoutBarcode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateVoteWithOneMemory_ (ConsolidateVoteWithOneMemory, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ScanConsolidationConfiguration_ (ScanConsolidationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivationTotalCountConfiguration_ (CardActivationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationTotalCountConfiguration_ (ConsolidationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationOfficialCountConfiguration_ (ConsolidationOfficialCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimerSleepWriteCard_ (TimerSleepWriteCard, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ActivationConsolidationFunctionalityConfiguration::
      ActivationConsolidationFunctionalityConfiguration (const ShowTotalVotesType& ShowTotalVotes,
                                                         const ShowOfficialVotesType& ShowOfficialVotes,
                                                         const ShowDuplicatesVotesType& ShowDuplicatesVotes,
                                                         const ShowScanMessageType& ShowScanMessage,
                                                         const ShowBarcodeMessageType& ShowBarcodeMessage,
                                                         const ShowActivateCardsType& ShowActivateCards,
                                                         ::std::auto_ptr< SelectedBoxColorType >& SelectedBoxColor,
                                                         ::std::auto_ptr< UnselectedBoxColorType >& UnselectedBoxColor,
                                                         ::std::auto_ptr< SelectedFontColorType >& SelectedFontColor,
                                                         ::std::auto_ptr< UnselectedFontColorType >& UnselectedFontColor,
                                                         ::std::auto_ptr< LabelSelectedConfigurationType >& LabelSelectedConfiguration,
                                                         ::std::auto_ptr< LabelUnselectedConfigurationType >& LabelUnselectedConfiguration,
                                                         const TitleHeightType& TitleHeight,
                                                         ::std::auto_ptr< TitleFontConfigurationType >& TitleFontConfiguration,
                                                         const StatsConsolidationHeightType& StatsConsolidationHeight,
                                                         ::std::auto_ptr< StatsConsolidationFontConfigurationType >& StatsConsolidationFontConfiguration,
                                                         const StatsActivationHeightType& StatsActivationHeight,
                                                         ::std::auto_ptr< StatsActivationFontConfigurationType >& StatsActivationFontConfiguration,
                                                         ::std::auto_ptr< InstructionFontConfigurationType >& InstructionFontConfiguration,
                                                         ::std::auto_ptr< DevicesLabelConfigurationType >& DevicesLabelConfiguration,
                                                         const ActivateCardsWithoutBarcodeType& ActivateCardsWithoutBarcode,
                                                         const ConsolidateVoteWithOneMemoryType& ConsolidateVoteWithOneMemory,
                                                         const BarcodeInParamsType& BarcodeInParams,
                                                         const BarcodeOutParamsType& BarcodeOutParams,
                                                         ::std::auto_ptr< ScanConsolidationConfigurationType >& ScanConsolidationConfiguration,
                                                         ::std::auto_ptr< CardActivationTotalCountConfigurationType >& CardActivationTotalCountConfiguration,
                                                         ::std::auto_ptr< ConsolidationTotalCountConfigurationType >& ConsolidationTotalCountConfiguration,
                                                         ::std::auto_ptr< ConsolidationOfficialCountConfigurationType >& ConsolidationOfficialCountConfiguration,
                                                         const TimerSleepWriteCardType& TimerSleepWriteCard)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowTotalVotes_ (ShowTotalVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowOfficialVotes_ (ShowOfficialVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDuplicatesVotes_ (ShowDuplicatesVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowScanMessage_ (ShowScanMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeMessage_ (ShowBarcodeMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowActivateCards_ (ShowActivateCards, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedBoxColor_ (SelectedBoxColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnselectedBoxColor_ (UnselectedBoxColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SelectedFontColor_ (SelectedFontColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UnselectedFontColor_ (UnselectedFontColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelSelectedConfiguration_ (LabelSelectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LabelUnselectedConfiguration_ (LabelUnselectedConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHeight_ (TitleHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleFontConfiguration_ (TitleFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsConsolidationHeight_ (StatsConsolidationHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsConsolidationFontConfiguration_ (StatsConsolidationFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsActivationHeight_ (StatsActivationHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatsActivationFontConfiguration_ (StatsActivationFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InstructionFontConfiguration_ (InstructionFontConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DevicesLabelConfiguration_ (DevicesLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ActivateCardsWithoutBarcode_ (ActivateCardsWithoutBarcode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateVoteWithOneMemory_ (ConsolidateVoteWithOneMemory, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ScanConsolidationConfiguration_ (ScanConsolidationConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivationTotalCountConfiguration_ (CardActivationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationTotalCountConfiguration_ (ConsolidationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationOfficialCountConfiguration_ (ConsolidationOfficialCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimerSleepWriteCard_ (TimerSleepWriteCard, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ActivationConsolidationFunctionalityConfiguration::
      ActivationConsolidationFunctionalityConfiguration (const ActivationConsolidationFunctionalityConfiguration& x,
                                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ShowTotalVotes_ (x.ShowTotalVotes_, f, this),
        ShowOfficialVotes_ (x.ShowOfficialVotes_, f, this),
        ShowDuplicatesVotes_ (x.ShowDuplicatesVotes_, f, this),
        ShowScanMessage_ (x.ShowScanMessage_, f, this),
        ShowBarcodeMessage_ (x.ShowBarcodeMessage_, f, this),
        ShowActivateCards_ (x.ShowActivateCards_, f, this),
        SelectedBoxColor_ (x.SelectedBoxColor_, f, this),
        UnselectedBoxColor_ (x.UnselectedBoxColor_, f, this),
        SelectedFontColor_ (x.SelectedFontColor_, f, this),
        UnselectedFontColor_ (x.UnselectedFontColor_, f, this),
        LabelSelectedConfiguration_ (x.LabelSelectedConfiguration_, f, this),
        LabelUnselectedConfiguration_ (x.LabelUnselectedConfiguration_, f, this),
        TitleHeight_ (x.TitleHeight_, f, this),
        TitleFontConfiguration_ (x.TitleFontConfiguration_, f, this),
        StatsConsolidationHeight_ (x.StatsConsolidationHeight_, f, this),
        StatsConsolidationFontConfiguration_ (x.StatsConsolidationFontConfiguration_, f, this),
        StatsActivationHeight_ (x.StatsActivationHeight_, f, this),
        StatsActivationFontConfiguration_ (x.StatsActivationFontConfiguration_, f, this),
        InstructionFontConfiguration_ (x.InstructionFontConfiguration_, f, this),
        DevicesLabelConfiguration_ (x.DevicesLabelConfiguration_, f, this),
        ActivateCardsWithoutBarcode_ (x.ActivateCardsWithoutBarcode_, f, this),
        ConsolidateVoteWithOneMemory_ (x.ConsolidateVoteWithOneMemory_, f, this),
        BarcodeInParams_ (x.BarcodeInParams_, f, this),
        BarcodeOutParams_ (x.BarcodeOutParams_, f, this),
        ScanConsolidationConfiguration_ (x.ScanConsolidationConfiguration_, f, this),
        CardActivationTotalCountConfiguration_ (x.CardActivationTotalCountConfiguration_, f, this),
        ConsolidationTotalCountConfiguration_ (x.ConsolidationTotalCountConfiguration_, f, this),
        ConsolidationOfficialCountConfiguration_ (x.ConsolidationOfficialCountConfiguration_, f, this),
        TimerSleepWriteCard_ (x.TimerSleepWriteCard_, f, this)
      {
      }

      ActivationConsolidationFunctionalityConfiguration::
      ActivationConsolidationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ShowTotalVotes_ (f, this),
        ShowOfficialVotes_ (f, this),
        ShowDuplicatesVotes_ (f, this),
        ShowScanMessage_ (f, this),
        ShowBarcodeMessage_ (f, this),
        ShowActivateCards_ (f, this),
        SelectedBoxColor_ (f, this),
        UnselectedBoxColor_ (f, this),
        SelectedFontColor_ (f, this),
        UnselectedFontColor_ (f, this),
        LabelSelectedConfiguration_ (f, this),
        LabelUnselectedConfiguration_ (f, this),
        TitleHeight_ (f, this),
        TitleFontConfiguration_ (f, this),
        StatsConsolidationHeight_ (f, this),
        StatsConsolidationFontConfiguration_ (f, this),
        StatsActivationHeight_ (f, this),
        StatsActivationFontConfiguration_ (f, this),
        InstructionFontConfiguration_ (f, this),
        DevicesLabelConfiguration_ (f, this),
        ActivateCardsWithoutBarcode_ (f, this),
        ConsolidateVoteWithOneMemory_ (f, this),
        BarcodeInParams_ (f, this),
        BarcodeOutParams_ (f, this),
        ScanConsolidationConfiguration_ (f, this),
        CardActivationTotalCountConfiguration_ (f, this),
        ConsolidationTotalCountConfiguration_ (f, this),
        ConsolidationOfficialCountConfiguration_ (f, this),
        TimerSleepWriteCard_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ActivationConsolidationFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShowTotalVotes
          //
          if (n.name () == "ShowTotalVotes" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowTotalVotes_.present ())
            {
              this->ShowTotalVotes_.set (ShowTotalVotesTraits::create (i, f, this));
              continue;
            }
          }

          // ShowOfficialVotes
          //
          if (n.name () == "ShowOfficialVotes" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowOfficialVotes_.present ())
            {
              this->ShowOfficialVotes_.set (ShowOfficialVotesTraits::create (i, f, this));
              continue;
            }
          }

          // ShowDuplicatesVotes
          //
          if (n.name () == "ShowDuplicatesVotes" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowDuplicatesVotes_.present ())
            {
              this->ShowDuplicatesVotes_.set (ShowDuplicatesVotesTraits::create (i, f, this));
              continue;
            }
          }

          // ShowScanMessage
          //
          if (n.name () == "ShowScanMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowScanMessage_.present ())
            {
              this->ShowScanMessage_.set (ShowScanMessageTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBarcodeMessage
          //
          if (n.name () == "ShowBarcodeMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBarcodeMessage_.present ())
            {
              this->ShowBarcodeMessage_.set (ShowBarcodeMessageTraits::create (i, f, this));
              continue;
            }
          }

          // ShowActivateCards
          //
          if (n.name () == "ShowActivateCards" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowActivateCards_.present ())
            {
              this->ShowActivateCards_.set (ShowActivateCardsTraits::create (i, f, this));
              continue;
            }
          }

          // SelectedBoxColor
          //
          if (n.name () == "SelectedBoxColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectedBoxColorType > r (
              SelectedBoxColorTraits::create (i, f, this));

            if (!SelectedBoxColor_.present ())
            {
              this->SelectedBoxColor_.set (r);
              continue;
            }
          }

          // UnselectedBoxColor
          //
          if (n.name () == "UnselectedBoxColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< UnselectedBoxColorType > r (
              UnselectedBoxColorTraits::create (i, f, this));

            if (!UnselectedBoxColor_.present ())
            {
              this->UnselectedBoxColor_.set (r);
              continue;
            }
          }

          // SelectedFontColor
          //
          if (n.name () == "SelectedFontColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SelectedFontColorType > r (
              SelectedFontColorTraits::create (i, f, this));

            if (!SelectedFontColor_.present ())
            {
              this->SelectedFontColor_.set (r);
              continue;
            }
          }

          // UnselectedFontColor
          //
          if (n.name () == "UnselectedFontColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< UnselectedFontColorType > r (
              UnselectedFontColorTraits::create (i, f, this));

            if (!UnselectedFontColor_.present ())
            {
              this->UnselectedFontColor_.set (r);
              continue;
            }
          }

          // LabelSelectedConfiguration
          //
          if (n.name () == "LabelSelectedConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LabelSelectedConfigurationType > r (
              LabelSelectedConfigurationTraits::create (i, f, this));

            if (!LabelSelectedConfiguration_.present ())
            {
              this->LabelSelectedConfiguration_.set (r);
              continue;
            }
          }

          // LabelUnselectedConfiguration
          //
          if (n.name () == "LabelUnselectedConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LabelUnselectedConfigurationType > r (
              LabelUnselectedConfigurationTraits::create (i, f, this));

            if (!LabelUnselectedConfiguration_.present ())
            {
              this->LabelUnselectedConfiguration_.set (r);
              continue;
            }
          }

          // TitleHeight
          //
          if (n.name () == "TitleHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TitleHeight_.present ())
            {
              this->TitleHeight_.set (TitleHeightTraits::create (i, f, this));
              continue;
            }
          }

          // TitleFontConfiguration
          //
          if (n.name () == "TitleFontConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< TitleFontConfigurationType > r (
              TitleFontConfigurationTraits::create (i, f, this));

            if (!TitleFontConfiguration_.present ())
            {
              this->TitleFontConfiguration_.set (r);
              continue;
            }
          }

          // StatsConsolidationHeight
          //
          if (n.name () == "StatsConsolidationHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!StatsConsolidationHeight_.present ())
            {
              this->StatsConsolidationHeight_.set (StatsConsolidationHeightTraits::create (i, f, this));
              continue;
            }
          }

          // StatsConsolidationFontConfiguration
          //
          if (n.name () == "StatsConsolidationFontConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatsConsolidationFontConfigurationType > r (
              StatsConsolidationFontConfigurationTraits::create (i, f, this));

            if (!StatsConsolidationFontConfiguration_.present ())
            {
              this->StatsConsolidationFontConfiguration_.set (r);
              continue;
            }
          }

          // StatsActivationHeight
          //
          if (n.name () == "StatsActivationHeight" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!StatsActivationHeight_.present ())
            {
              this->StatsActivationHeight_.set (StatsActivationHeightTraits::create (i, f, this));
              continue;
            }
          }

          // StatsActivationFontConfiguration
          //
          if (n.name () == "StatsActivationFontConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatsActivationFontConfigurationType > r (
              StatsActivationFontConfigurationTraits::create (i, f, this));

            if (!StatsActivationFontConfiguration_.present ())
            {
              this->StatsActivationFontConfiguration_.set (r);
              continue;
            }
          }

          // InstructionFontConfiguration
          //
          if (n.name () == "InstructionFontConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InstructionFontConfigurationType > r (
              InstructionFontConfigurationTraits::create (i, f, this));

            if (!InstructionFontConfiguration_.present ())
            {
              this->InstructionFontConfiguration_.set (r);
              continue;
            }
          }

          // DevicesLabelConfiguration
          //
          if (n.name () == "DevicesLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DevicesLabelConfigurationType > r (
              DevicesLabelConfigurationTraits::create (i, f, this));

            if (!DevicesLabelConfiguration_.present ())
            {
              this->DevicesLabelConfiguration_.set (r);
              continue;
            }
          }

          // ActivateCardsWithoutBarcode
          //
          if (n.name () == "ActivateCardsWithoutBarcode" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ActivateCardsWithoutBarcode_.present ())
            {
              this->ActivateCardsWithoutBarcode_.set (ActivateCardsWithoutBarcodeTraits::create (i, f, this));
              continue;
            }
          }

          // ConsolidateVoteWithOneMemory
          //
          if (n.name () == "ConsolidateVoteWithOneMemory" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ConsolidateVoteWithOneMemory_.present ())
            {
              this->ConsolidateVoteWithOneMemory_.set (ConsolidateVoteWithOneMemoryTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeInParams
          //
          if (n.name () == "BarcodeInParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeInParamsType > r (
              BarcodeInParamsTraits::create (i, f, this));

            if (!BarcodeInParams_.present ())
            {
              this->BarcodeInParams_.set (r);
              continue;
            }
          }

          // BarcodeOutParams
          //
          if (n.name () == "BarcodeOutParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeOutParamsType > r (
              BarcodeOutParamsTraits::create (i, f, this));

            if (!BarcodeOutParams_.present ())
            {
              this->BarcodeOutParams_.set (r);
              continue;
            }
          }

          // ScanConsolidationConfiguration
          //
          if (n.name () == "ScanConsolidationConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ScanConsolidationConfigurationType > r (
              ScanConsolidationConfigurationTraits::create (i, f, this));

            if (!ScanConsolidationConfiguration_.present ())
            {
              this->ScanConsolidationConfiguration_.set (r);
              continue;
            }
          }

          // CardActivationTotalCountConfiguration
          //
          if (n.name () == "CardActivationTotalCountConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivationTotalCountConfigurationType > r (
              CardActivationTotalCountConfigurationTraits::create (i, f, this));

            if (!CardActivationTotalCountConfiguration_.present ())
            {
              this->CardActivationTotalCountConfiguration_.set (r);
              continue;
            }
          }

          // ConsolidationTotalCountConfiguration
          //
          if (n.name () == "ConsolidationTotalCountConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ConsolidationTotalCountConfigurationType > r (
              ConsolidationTotalCountConfigurationTraits::create (i, f, this));

            if (!ConsolidationTotalCountConfiguration_.present ())
            {
              this->ConsolidationTotalCountConfiguration_.set (r);
              continue;
            }
          }

          // ConsolidationOfficialCountConfiguration
          //
          if (n.name () == "ConsolidationOfficialCountConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ConsolidationOfficialCountConfigurationType > r (
              ConsolidationOfficialCountConfigurationTraits::create (i, f, this));

            if (!ConsolidationOfficialCountConfiguration_.present ())
            {
              this->ConsolidationOfficialCountConfiguration_.set (r);
              continue;
            }
          }

          // TimerSleepWriteCard
          //
          if (n.name () == "TimerSleepWriteCard" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimerSleepWriteCard_.present ())
            {
              this->TimerSleepWriteCard_.set (TimerSleepWriteCardTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ShowTotalVotes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowTotalVotes",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowOfficialVotes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowOfficialVotes",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowDuplicatesVotes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowDuplicatesVotes",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowScanMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowScanMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBarcodeMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBarcodeMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowActivateCards_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowActivateCards",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectedBoxColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectedBoxColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UnselectedBoxColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UnselectedBoxColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SelectedFontColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SelectedFontColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UnselectedFontColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UnselectedFontColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LabelSelectedConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LabelSelectedConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LabelUnselectedConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LabelUnselectedConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TitleFontConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleFontConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatsConsolidationHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatsConsolidationHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatsConsolidationFontConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatsConsolidationFontConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatsActivationHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatsActivationHeight",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatsActivationFontConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatsActivationFontConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InstructionFontConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InstructionFontConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DevicesLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DevicesLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ActivateCardsWithoutBarcode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ActivateCardsWithoutBarcode",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidateVoteWithOneMemory_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidateVoteWithOneMemory",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeInParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeInParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeOutParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeOutParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ScanConsolidationConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ScanConsolidationConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivationTotalCountConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivationTotalCountConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidationTotalCountConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidationTotalCountConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidationOfficialCountConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidationOfficialCountConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimerSleepWriteCard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimerSleepWriteCard",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ActivationConsolidationFunctionalityConfiguration* ActivationConsolidationFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ActivationConsolidationFunctionalityConfiguration (*this, f, c);
      }

      ActivationConsolidationFunctionalityConfiguration::
      ~ActivationConsolidationFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const ActivationConsolidationFunctionalityConfiguration& x, const ActivationConsolidationFunctionalityConfiguration& y)
      {
        if (!(x.getShowTotalVotes () == y.getShowTotalVotes ()))
          return false;

        if (!(x.getShowOfficialVotes () == y.getShowOfficialVotes ()))
          return false;

        if (!(x.getShowDuplicatesVotes () == y.getShowDuplicatesVotes ()))
          return false;

        if (!(x.getShowScanMessage () == y.getShowScanMessage ()))
          return false;

        if (!(x.getShowBarcodeMessage () == y.getShowBarcodeMessage ()))
          return false;

        if (!(x.getShowActivateCards () == y.getShowActivateCards ()))
          return false;

        if (!(x.getSelectedBoxColor () == y.getSelectedBoxColor ()))
          return false;

        if (!(x.getUnselectedBoxColor () == y.getUnselectedBoxColor ()))
          return false;

        if (!(x.getSelectedFontColor () == y.getSelectedFontColor ()))
          return false;

        if (!(x.getUnselectedFontColor () == y.getUnselectedFontColor ()))
          return false;

        if (!(x.getLabelSelectedConfiguration () == y.getLabelSelectedConfiguration ()))
          return false;

        if (!(x.getLabelUnselectedConfiguration () == y.getLabelUnselectedConfiguration ()))
          return false;

        if (!(x.getTitleHeight () == y.getTitleHeight ()))
          return false;

        if (!(x.getTitleFontConfiguration () == y.getTitleFontConfiguration ()))
          return false;

        if (!(x.getStatsConsolidationHeight () == y.getStatsConsolidationHeight ()))
          return false;

        if (!(x.getStatsConsolidationFontConfiguration () == y.getStatsConsolidationFontConfiguration ()))
          return false;

        if (!(x.getStatsActivationHeight () == y.getStatsActivationHeight ()))
          return false;

        if (!(x.getStatsActivationFontConfiguration () == y.getStatsActivationFontConfiguration ()))
          return false;

        if (!(x.getInstructionFontConfiguration () == y.getInstructionFontConfiguration ()))
          return false;

        if (!(x.getDevicesLabelConfiguration () == y.getDevicesLabelConfiguration ()))
          return false;

        if (!(x.getActivateCardsWithoutBarcode () == y.getActivateCardsWithoutBarcode ()))
          return false;

        if (!(x.getConsolidateVoteWithOneMemory () == y.getConsolidateVoteWithOneMemory ()))
          return false;

        if (!(x.getBarcodeInParams () == y.getBarcodeInParams ()))
          return false;

        if (!(x.getBarcodeOutParams () == y.getBarcodeOutParams ()))
          return false;

        if (!(x.getScanConsolidationConfiguration () == y.getScanConsolidationConfiguration ()))
          return false;

        if (!(x.getCardActivationTotalCountConfiguration () == y.getCardActivationTotalCountConfiguration ()))
          return false;

        if (!(x.getConsolidationTotalCountConfiguration () == y.getConsolidationTotalCountConfiguration ()))
          return false;

        if (!(x.getConsolidationOfficialCountConfiguration () == y.getConsolidationOfficialCountConfiguration ()))
          return false;

        if (!(x.getTimerSleepWriteCard () == y.getTimerSleepWriteCard ()))
          return false;

        return true;
      }

      bool
      operator!= (const ActivationConsolidationFunctionalityConfiguration& x, const ActivationConsolidationFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // CloseVotationFunctionalityConfiguration
      //

      CloseVotationFunctionalityConfiguration::
      CloseVotationFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        RequestForID_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MinimumOfficialsActivationForConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationMessageWhenClosing_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseVotationFunctionalityConfiguration::
      CloseVotationFunctionalityConfiguration (const RequestForIDType& RequestForID,
                                               const MinimumOfficialsActivationForConfirmationType& MinimumOfficialsActivationForConfirmation,
                                               const ShowConfirmationMessageWhenClosingType& ShowConfirmationMessageWhenClosing)
      : ::Smartmatic::ConfigurationTypes::Type (),
        RequestForID_ (RequestForID, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MinimumOfficialsActivationForConfirmation_ (MinimumOfficialsActivationForConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowConfirmationMessageWhenClosing_ (ShowConfirmationMessageWhenClosing, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseVotationFunctionalityConfiguration::
      CloseVotationFunctionalityConfiguration (const CloseVotationFunctionalityConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        RequestForID_ (x.RequestForID_, f, this),
        MinimumOfficialsActivationForConfirmation_ (x.MinimumOfficialsActivationForConfirmation_, f, this),
        ShowConfirmationMessageWhenClosing_ (x.ShowConfirmationMessageWhenClosing_, f, this)
      {
      }

      CloseVotationFunctionalityConfiguration::
      CloseVotationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f,
                                               ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        RequestForID_ (f, this),
        MinimumOfficialsActivationForConfirmation_ (f, this),
        ShowConfirmationMessageWhenClosing_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CloseVotationFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RequestForID
          //
          if (n.name () == "RequestForID" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RequestForID_.present ())
            {
              this->RequestForID_.set (RequestForIDTraits::create (i, f, this));
              continue;
            }
          }

          // MinimumOfficialsActivationForConfirmation
          //
          if (n.name () == "MinimumOfficialsActivationForConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MinimumOfficialsActivationForConfirmation_.present ())
            {
              this->MinimumOfficialsActivationForConfirmation_.set (MinimumOfficialsActivationForConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // ShowConfirmationMessageWhenClosing
          //
          if (n.name () == "ShowConfirmationMessageWhenClosing" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowConfirmationMessageWhenClosing_.present ())
            {
              this->ShowConfirmationMessageWhenClosing_.set (ShowConfirmationMessageWhenClosingTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!RequestForID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RequestForID",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MinimumOfficialsActivationForConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinimumOfficialsActivationForConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowConfirmationMessageWhenClosing_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowConfirmationMessageWhenClosing",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CloseVotationFunctionalityConfiguration* CloseVotationFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CloseVotationFunctionalityConfiguration (*this, f, c);
      }

      CloseVotationFunctionalityConfiguration::
      ~CloseVotationFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CloseVotationFunctionalityConfiguration& x, const CloseVotationFunctionalityConfiguration& y)
      {
        if (!(x.getRequestForID () == y.getRequestForID ()))
          return false;

        if (!(x.getMinimumOfficialsActivationForConfirmation () == y.getMinimumOfficialsActivationForConfirmation ()))
          return false;

        if (!(x.getShowConfirmationMessageWhenClosing () == y.getShowConfirmationMessageWhenClosing ()))
          return false;

        return true;
      }

      bool
      operator!= (const CloseVotationFunctionalityConfiguration& x, const CloseVotationFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // InitializationWindowConfiguration
      //

      InitializationWindowConfiguration::
      InitializationWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ContingencyCardEnabled_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveContingencyCardTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveContingencyCardText_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RequestForIDOnPresidentMachineInitialization_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      InitializationWindowConfiguration::
      InitializationWindowConfiguration (const ContingencyCardEnabledType& ContingencyCardEnabled,
                                         const RemoveContingencyCardTitleType& RemoveContingencyCardTitle,
                                         const RemoveContingencyCardTextType& RemoveContingencyCardText,
                                         const RequestForIDOnPresidentMachineInitializationType& RequestForIDOnPresidentMachineInitialization)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ContingencyCardEnabled_ (ContingencyCardEnabled, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveContingencyCardTitle_ (RemoveContingencyCardTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveContingencyCardText_ (RemoveContingencyCardText, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RequestForIDOnPresidentMachineInitialization_ (RequestForIDOnPresidentMachineInitialization, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      InitializationWindowConfiguration::
      InitializationWindowConfiguration (const ContingencyCardEnabledType& ContingencyCardEnabled,
                                         ::std::auto_ptr< RemoveContingencyCardTitleType >& RemoveContingencyCardTitle,
                                         ::std::auto_ptr< RemoveContingencyCardTextType >& RemoveContingencyCardText,
                                         const RequestForIDOnPresidentMachineInitializationType& RequestForIDOnPresidentMachineInitialization)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ContingencyCardEnabled_ (ContingencyCardEnabled, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveContingencyCardTitle_ (RemoveContingencyCardTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RemoveContingencyCardText_ (RemoveContingencyCardText, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RequestForIDOnPresidentMachineInitialization_ (RequestForIDOnPresidentMachineInitialization, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      InitializationWindowConfiguration::
      InitializationWindowConfiguration (const InitializationWindowConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ContingencyCardEnabled_ (x.ContingencyCardEnabled_, f, this),
        RemoveContingencyCardTitle_ (x.RemoveContingencyCardTitle_, f, this),
        RemoveContingencyCardText_ (x.RemoveContingencyCardText_, f, this),
        RequestForIDOnPresidentMachineInitialization_ (x.RequestForIDOnPresidentMachineInitialization_, f, this)
      {
      }

      InitializationWindowConfiguration::
      InitializationWindowConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ContingencyCardEnabled_ (f, this),
        RemoveContingencyCardTitle_ (f, this),
        RemoveContingencyCardText_ (f, this),
        RequestForIDOnPresidentMachineInitialization_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void InitializationWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ContingencyCardEnabled
          //
          if (n.name () == "ContingencyCardEnabled" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ContingencyCardEnabled_.present ())
            {
              this->ContingencyCardEnabled_.set (ContingencyCardEnabledTraits::create (i, f, this));
              continue;
            }
          }

          // RemoveContingencyCardTitle
          //
          if (n.name () == "RemoveContingencyCardTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RemoveContingencyCardTitleType > r (
              RemoveContingencyCardTitleTraits::create (i, f, this));

            if (!RemoveContingencyCardTitle_.present ())
            {
              this->RemoveContingencyCardTitle_.set (r);
              continue;
            }
          }

          // RemoveContingencyCardText
          //
          if (n.name () == "RemoveContingencyCardText" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RemoveContingencyCardTextType > r (
              RemoveContingencyCardTextTraits::create (i, f, this));

            if (!RemoveContingencyCardText_.present ())
            {
              this->RemoveContingencyCardText_.set (r);
              continue;
            }
          }

          // RequestForIDOnPresidentMachineInitialization
          //
          if (n.name () == "RequestForIDOnPresidentMachineInitialization" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!RequestForIDOnPresidentMachineInitialization_.present ())
            {
              this->RequestForIDOnPresidentMachineInitialization_.set (RequestForIDOnPresidentMachineInitializationTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ContingencyCardEnabled_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ContingencyCardEnabled",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RemoveContingencyCardTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RemoveContingencyCardTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RemoveContingencyCardText_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RemoveContingencyCardText",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RequestForIDOnPresidentMachineInitialization_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RequestForIDOnPresidentMachineInitialization",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      InitializationWindowConfiguration* InitializationWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class InitializationWindowConfiguration (*this, f, c);
      }

      InitializationWindowConfiguration::
      ~InitializationWindowConfiguration ()
      {
      }

      bool
      operator== (const InitializationWindowConfiguration& x, const InitializationWindowConfiguration& y)
      {
        if (!(x.getContingencyCardEnabled () == y.getContingencyCardEnabled ()))
          return false;

        if (!(x.getRemoveContingencyCardTitle () == y.getRemoveContingencyCardTitle ()))
          return false;

        if (!(x.getRemoveContingencyCardText () == y.getRemoveContingencyCardText ()))
          return false;

        if (!(x.getRequestForIDOnPresidentMachineInitialization () == y.getRequestForIDOnPresidentMachineInitialization ()))
          return false;

        return true;
      }

      bool
      operator!= (const InitializationWindowConfiguration& x, const InitializationWindowConfiguration& y)
      {
        return !(x == y);
      }

      // IncidentReportFunctionalityConfiguration
      //

      IncidentReportFunctionalityConfiguration::
      IncidentReportFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReportConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CompleteReportParameters_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowID_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDeleteConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IncidentReportFunctionalityConfiguration::
      IncidentReportFunctionalityConfiguration (const ButtonConfigurationType& ButtonConfiguration,
                                                const ShowIDType& ShowID,
                                                const ShowDeleteConfirmationType& ShowDeleteConfirmation)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReportConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CompleteReportParameters_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowID_ (ShowID, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDeleteConfirmation_ (ShowDeleteConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IncidentReportFunctionalityConfiguration::
      IncidentReportFunctionalityConfiguration (::std::auto_ptr< ButtonConfigurationType >& ButtonConfiguration,
                                                const ShowIDType& ShowID,
                                                const ShowDeleteConfirmationType& ShowDeleteConfirmation)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        IncidentReportConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CompleteReportParameters_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowID_ (ShowID, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDeleteConfirmation_ (ShowDeleteConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      IncidentReportFunctionalityConfiguration::
      IncidentReportFunctionalityConfiguration (const IncidentReportFunctionalityConfiguration& x,
                                                ::Smartmatic::ConfigurationTypes::Flags f,
                                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ButtonConfiguration_ (x.ButtonConfiguration_, f, this),
        IncidentReportConfiguration_ (x.IncidentReportConfiguration_, f, this),
        CompleteReportParameters_ (x.CompleteReportParameters_, f, this),
        ShowID_ (x.ShowID_, f, this),
        ShowDeleteConfirmation_ (x.ShowDeleteConfirmation_, f, this)
      {
      }

      IncidentReportFunctionalityConfiguration::
      IncidentReportFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                ::Smartmatic::ConfigurationTypes::Flags f,
                                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ButtonConfiguration_ (f, this),
        IncidentReportConfiguration_ (f, this),
        CompleteReportParameters_ (f, this),
        ShowID_ (f, this),
        ShowDeleteConfirmation_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void IncidentReportFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ButtonConfiguration
          //
          if (n.name () == "ButtonConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonConfigurationType > r (
              ButtonConfigurationTraits::create (i, f, this));

            if (!ButtonConfiguration_.present ())
            {
              this->ButtonConfiguration_.set (r);
              continue;
            }
          }

          // IncidentReportConfiguration
          //
          if (n.name () == "IncidentReportConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< IncidentReportConfigurationType > r (
              IncidentReportConfigurationTraits::create (i, f, this));

            this->IncidentReportConfiguration_.push_back (r);
            continue;
          }

          // CompleteReportParameters
          //
          if (n.name () == "CompleteReportParameters" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CompleteReportParametersType > r (
              CompleteReportParametersTraits::create (i, f, this));

            this->CompleteReportParameters_.push_back (r);
            continue;
          }

          // ShowID
          //
          if (n.name () == "ShowID" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowID_.present ())
            {
              this->ShowID_.set (ShowIDTraits::create (i, f, this));
              continue;
            }
          }

          // ShowDeleteConfirmation
          //
          if (n.name () == "ShowDeleteConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowDeleteConfirmation_.present ())
            {
              this->ShowDeleteConfirmation_.set (ShowDeleteConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ButtonConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowID",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowDeleteConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowDeleteConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      IncidentReportFunctionalityConfiguration* IncidentReportFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class IncidentReportFunctionalityConfiguration (*this, f, c);
      }

      IncidentReportFunctionalityConfiguration::
      ~IncidentReportFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const IncidentReportFunctionalityConfiguration& x, const IncidentReportFunctionalityConfiguration& y)
      {
        if (!(x.getButtonConfiguration () == y.getButtonConfiguration ()))
          return false;

        if (!(x.getIncidentReportConfiguration () == y.getIncidentReportConfiguration ()))
          return false;

        if (!(x.getCompleteReportParameters () == y.getCompleteReportParameters ()))
          return false;

        if (!(x.getShowID () == y.getShowID ()))
          return false;

        if (!(x.getShowDeleteConfirmation () == y.getShowDeleteConfirmation ()))
          return false;

        return true;
      }

      bool
      operator!= (const IncidentReportFunctionalityConfiguration& x, const IncidentReportFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // PollWorkerRegisterFunctionalityConfiguration
      //

      PollWorkerRegisterFunctionalityConfiguration::
      PollWorkerRegisterFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDeleteConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PollWorkerRegisterConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollWorkerRegisterFunctionalityConfiguration::
      PollWorkerRegisterFunctionalityConfiguration (const ButtonConfigurationType& ButtonConfiguration,
                                                    const ShowDeleteConfirmationType& ShowDeleteConfirmation,
                                                    const RegisterWidgetConfigurationType& RegisterWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDeleteConfirmation_ (ShowDeleteConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PollWorkerRegisterConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollWorkerRegisterFunctionalityConfiguration::
      PollWorkerRegisterFunctionalityConfiguration (::std::auto_ptr< ButtonConfigurationType >& ButtonConfiguration,
                                                    const ShowDeleteConfirmationType& ShowDeleteConfirmation,
                                                    ::std::auto_ptr< RegisterWidgetConfigurationType >& RegisterWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ButtonConfiguration_ (ButtonConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDeleteConfirmation_ (ShowDeleteConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PollWorkerRegisterConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PollWorkerRegisterFunctionalityConfiguration::
      PollWorkerRegisterFunctionalityConfiguration (const PollWorkerRegisterFunctionalityConfiguration& x,
                                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ButtonConfiguration_ (x.ButtonConfiguration_, f, this),
        ShowDeleteConfirmation_ (x.ShowDeleteConfirmation_, f, this),
        RegisterWidgetConfiguration_ (x.RegisterWidgetConfiguration_, f, this),
        PollWorkerRegisterConfiguration_ (x.PollWorkerRegisterConfiguration_, f, this)
      {
      }

      PollWorkerRegisterFunctionalityConfiguration::
      PollWorkerRegisterFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ButtonConfiguration_ (f, this),
        ShowDeleteConfirmation_ (f, this),
        RegisterWidgetConfiguration_ (f, this),
        PollWorkerRegisterConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PollWorkerRegisterFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ButtonConfiguration
          //
          if (n.name () == "ButtonConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ButtonConfigurationType > r (
              ButtonConfigurationTraits::create (i, f, this));

            if (!ButtonConfiguration_.present ())
            {
              this->ButtonConfiguration_.set (r);
              continue;
            }
          }

          // ShowDeleteConfirmation
          //
          if (n.name () == "ShowDeleteConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowDeleteConfirmation_.present ())
            {
              this->ShowDeleteConfirmation_.set (ShowDeleteConfirmationTraits::create (i, f, this));
              continue;
            }
          }

          // RegisterWidgetConfiguration
          //
          if (n.name () == "RegisterWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RegisterWidgetConfigurationType > r (
              RegisterWidgetConfigurationTraits::create (i, f, this));

            if (!RegisterWidgetConfiguration_.present ())
            {
              this->RegisterWidgetConfiguration_.set (r);
              continue;
            }
          }

          // PollWorkerRegisterConfiguration
          //
          if (n.name () == "PollWorkerRegisterConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PollWorkerRegisterConfigurationType > r (
              PollWorkerRegisterConfigurationTraits::create (i, f, this));

            this->PollWorkerRegisterConfiguration_.push_back (r);
            continue;
          }

          break;
        }

        if (!ButtonConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowDeleteConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowDeleteConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RegisterWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PollWorkerRegisterFunctionalityConfiguration* PollWorkerRegisterFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PollWorkerRegisterFunctionalityConfiguration (*this, f, c);
      }

      PollWorkerRegisterFunctionalityConfiguration::
      ~PollWorkerRegisterFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const PollWorkerRegisterFunctionalityConfiguration& x, const PollWorkerRegisterFunctionalityConfiguration& y)
      {
        if (!(x.getButtonConfiguration () == y.getButtonConfiguration ()))
          return false;

        if (!(x.getShowDeleteConfirmation () == y.getShowDeleteConfirmation ()))
          return false;

        if (!(x.getRegisterWidgetConfiguration () == y.getRegisterWidgetConfiguration ()))
          return false;

        if (!(x.getPollWorkerRegisterConfiguration () == y.getPollWorkerRegisterConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const PollWorkerRegisterFunctionalityConfiguration& x, const PollWorkerRegisterFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // CloseNoteRegisterFunctionalityConfiguration
      //

      CloseNoteRegisterFunctionalityConfiguration::
      CloseNoteRegisterFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NextButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseNoteRegisterFunctionalityConfiguration::
      CloseNoteRegisterFunctionalityConfiguration (const AddButtonConfType& AddButtonConf,
                                                   const NextButtonConfType& NextButtonConf,
                                                   const AddCancelButtonConfType& AddCancelButtonConf,
                                                   const RegisterWidgetConfigurationType& RegisterWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (AddButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NextButtonConf_ (NextButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (AddCancelButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseNoteRegisterFunctionalityConfiguration::
      CloseNoteRegisterFunctionalityConfiguration (::std::auto_ptr< AddButtonConfType >& AddButtonConf,
                                                   ::std::auto_ptr< NextButtonConfType >& NextButtonConf,
                                                   ::std::auto_ptr< AddCancelButtonConfType >& AddCancelButtonConf,
                                                   ::std::auto_ptr< RegisterWidgetConfigurationType >& RegisterWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (AddButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NextButtonConf_ (NextButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (AddCancelButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseNoteRegisterFunctionalityConfiguration::
      CloseNoteRegisterFunctionalityConfiguration (const CloseNoteRegisterFunctionalityConfiguration& x,
                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        AddButtonConf_ (x.AddButtonConf_, f, this),
        NextButtonConf_ (x.NextButtonConf_, f, this),
        AddCancelButtonConf_ (x.AddCancelButtonConf_, f, this),
        RegisterWidgetConfiguration_ (x.RegisterWidgetConfiguration_, f, this)
      {
      }

      CloseNoteRegisterFunctionalityConfiguration::
      CloseNoteRegisterFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        AddButtonConf_ (f, this),
        NextButtonConf_ (f, this),
        AddCancelButtonConf_ (f, this),
        RegisterWidgetConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CloseNoteRegisterFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // AddButtonConf
          //
          if (n.name () == "AddButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AddButtonConfType > r (
              AddButtonConfTraits::create (i, f, this));

            if (!AddButtonConf_.present ())
            {
              this->AddButtonConf_.set (r);
              continue;
            }
          }

          // NextButtonConf
          //
          if (n.name () == "NextButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NextButtonConfType > r (
              NextButtonConfTraits::create (i, f, this));

            if (!NextButtonConf_.present ())
            {
              this->NextButtonConf_.set (r);
              continue;
            }
          }

          // AddCancelButtonConf
          //
          if (n.name () == "AddCancelButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AddCancelButtonConfType > r (
              AddCancelButtonConfTraits::create (i, f, this));

            if (!AddCancelButtonConf_.present ())
            {
              this->AddCancelButtonConf_.set (r);
              continue;
            }
          }

          // RegisterWidgetConfiguration
          //
          if (n.name () == "RegisterWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RegisterWidgetConfigurationType > r (
              RegisterWidgetConfigurationTraits::create (i, f, this));

            if (!RegisterWidgetConfiguration_.present ())
            {
              this->RegisterWidgetConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!AddButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NextButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NextButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AddCancelButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddCancelButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RegisterWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CloseNoteRegisterFunctionalityConfiguration* CloseNoteRegisterFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CloseNoteRegisterFunctionalityConfiguration (*this, f, c);
      }

      CloseNoteRegisterFunctionalityConfiguration::
      ~CloseNoteRegisterFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CloseNoteRegisterFunctionalityConfiguration& x, const CloseNoteRegisterFunctionalityConfiguration& y)
      {
        if (!(x.getAddButtonConf () == y.getAddButtonConf ()))
          return false;

        if (!(x.getNextButtonConf () == y.getNextButtonConf ()))
          return false;

        if (!(x.getAddCancelButtonConf () == y.getAddCancelButtonConf ()))
          return false;

        if (!(x.getRegisterWidgetConfiguration () == y.getRegisterWidgetConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const CloseNoteRegisterFunctionalityConfiguration& x, const CloseNoteRegisterFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // VoteConsolidationFunctionalityConfiguration
      //

      VoteConsolidationFunctionalityConfiguration::
      VoteConsolidationFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        UsePrintPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CounterWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CounterPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowVotingMachineCustomAttribute_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateDemoVotes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateSimulatedVotes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AuditModeResources_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationTotalCountConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationOfficialCountConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VoteConsolidationFunctionalityConfiguration::
      VoteConsolidationFunctionalityConfiguration (const UsePrintPreviewType& UsePrintPreview,
                                                   const UseVerticalTableInPreviewType& UseVerticalTableInPreview,
                                                   const CounterWidthType& CounterWidth,
                                                   const CounterPaddingType& CounterPadding,
                                                   const ShowVotingMachineCustomAttributeType& ShowVotingMachineCustomAttribute,
                                                   const StatisticsTitleLabelConfigurationType& StatisticsTitleLabelConfiguration,
                                                   const StatisticsTitleColorType& StatisticsTitleColor,
                                                   const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                                   const ConsolidateDemoVotesType& ConsolidateDemoVotes,
                                                   const ConsolidateSimulatedVotesType& ConsolidateSimulatedVotes,
                                                   const AuditModeResourcesType& AuditModeResources,
                                                   const BarcodeInParamsType& BarcodeInParams,
                                                   const BarcodeOutParamsType& BarcodeOutParams,
                                                   const ConsolidationTotalCountConfigurationType& ConsolidationTotalCountConfiguration,
                                                   const ConsolidationOfficialCountConfigurationType& ConsolidationOfficialCountConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        UsePrintPreview_ (UsePrintPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (UseVerticalTableInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CounterWidth_ (CounterWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CounterPadding_ (CounterPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowVotingMachineCustomAttribute_ (ShowVotingMachineCustomAttribute, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (StatisticsTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (StatisticsTitleColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateDemoVotes_ (ConsolidateDemoVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateSimulatedVotes_ (ConsolidateSimulatedVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AuditModeResources_ (AuditModeResources, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationTotalCountConfiguration_ (ConsolidationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationOfficialCountConfiguration_ (ConsolidationOfficialCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VoteConsolidationFunctionalityConfiguration::
      VoteConsolidationFunctionalityConfiguration (const UsePrintPreviewType& UsePrintPreview,
                                                   const UseVerticalTableInPreviewType& UseVerticalTableInPreview,
                                                   const CounterWidthType& CounterWidth,
                                                   const CounterPaddingType& CounterPadding,
                                                   const ShowVotingMachineCustomAttributeType& ShowVotingMachineCustomAttribute,
                                                   ::std::auto_ptr< StatisticsTitleLabelConfigurationType >& StatisticsTitleLabelConfiguration,
                                                   ::std::auto_ptr< StatisticsTitleColorType >& StatisticsTitleColor,
                                                   const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                                   const ConsolidateDemoVotesType& ConsolidateDemoVotes,
                                                   const ConsolidateSimulatedVotesType& ConsolidateSimulatedVotes,
                                                   const AuditModeResourcesType& AuditModeResources,
                                                   const BarcodeInParamsType& BarcodeInParams,
                                                   const BarcodeOutParamsType& BarcodeOutParams,
                                                   ::std::auto_ptr< ConsolidationTotalCountConfigurationType >& ConsolidationTotalCountConfiguration,
                                                   ::std::auto_ptr< ConsolidationOfficialCountConfigurationType >& ConsolidationOfficialCountConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        UsePrintPreview_ (UsePrintPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (UseVerticalTableInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CounterWidth_ (CounterWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CounterPadding_ (CounterPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowVotingMachineCustomAttribute_ (ShowVotingMachineCustomAttribute, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleLabelConfiguration_ (StatisticsTitleLabelConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StatisticsTitleColor_ (StatisticsTitleColor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateDemoVotes_ (ConsolidateDemoVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidateSimulatedVotes_ (ConsolidateSimulatedVotes, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AuditModeResources_ (AuditModeResources, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationTotalCountConfiguration_ (ConsolidationTotalCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConsolidationOfficialCountConfiguration_ (ConsolidationOfficialCountConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VoteConsolidationFunctionalityConfiguration::
      VoteConsolidationFunctionalityConfiguration (const VoteConsolidationFunctionalityConfiguration& x,
                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        UsePrintPreview_ (x.UsePrintPreview_, f, this),
        UseVerticalTableInPreview_ (x.UseVerticalTableInPreview_, f, this),
        CounterWidth_ (x.CounterWidth_, f, this),
        CounterPadding_ (x.CounterPadding_, f, this),
        ShowVotingMachineCustomAttribute_ (x.ShowVotingMachineCustomAttribute_, f, this),
        StatisticsTitleLabelConfiguration_ (x.StatisticsTitleLabelConfiguration_, f, this),
        StatisticsTitleColor_ (x.StatisticsTitleColor_, f, this),
        ShowBarcodeInPreview_ (x.ShowBarcodeInPreview_, f, this),
        ConsolidateDemoVotes_ (x.ConsolidateDemoVotes_, f, this),
        ConsolidateSimulatedVotes_ (x.ConsolidateSimulatedVotes_, f, this),
        AuditModeResources_ (x.AuditModeResources_, f, this),
        BarcodeInParams_ (x.BarcodeInParams_, f, this),
        BarcodeOutParams_ (x.BarcodeOutParams_, f, this),
        ConsolidationTotalCountConfiguration_ (x.ConsolidationTotalCountConfiguration_, f, this),
        ConsolidationOfficialCountConfiguration_ (x.ConsolidationOfficialCountConfiguration_, f, this)
      {
      }

      VoteConsolidationFunctionalityConfiguration::
      VoteConsolidationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        UsePrintPreview_ (f, this),
        UseVerticalTableInPreview_ (f, this),
        CounterWidth_ (f, this),
        CounterPadding_ (f, this),
        ShowVotingMachineCustomAttribute_ (f, this),
        StatisticsTitleLabelConfiguration_ (f, this),
        StatisticsTitleColor_ (f, this),
        ShowBarcodeInPreview_ (f, this),
        ConsolidateDemoVotes_ (f, this),
        ConsolidateSimulatedVotes_ (f, this),
        AuditModeResources_ (f, this),
        BarcodeInParams_ (f, this),
        BarcodeOutParams_ (f, this),
        ConsolidationTotalCountConfiguration_ (f, this),
        ConsolidationOfficialCountConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VoteConsolidationFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // UsePrintPreview
          //
          if (n.name () == "UsePrintPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UsePrintPreview_.present ())
            {
              this->UsePrintPreview_.set (UsePrintPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // UseVerticalTableInPreview
          //
          if (n.name () == "UseVerticalTableInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseVerticalTableInPreview_.present ())
            {
              this->UseVerticalTableInPreview_.set (UseVerticalTableInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // CounterWidth
          //
          if (n.name () == "CounterWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CounterWidth_.present ())
            {
              this->CounterWidth_.set (CounterWidthTraits::create (i, f, this));
              continue;
            }
          }

          // CounterPadding
          //
          if (n.name () == "CounterPadding" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CounterPadding_.present ())
            {
              this->CounterPadding_.set (CounterPaddingTraits::create (i, f, this));
              continue;
            }
          }

          // ShowVotingMachineCustomAttribute
          //
          if (n.name () == "ShowVotingMachineCustomAttribute" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowVotingMachineCustomAttribute_.present ())
            {
              this->ShowVotingMachineCustomAttribute_.set (ShowVotingMachineCustomAttributeTraits::create (i, f, this));
              continue;
            }
          }

          // StatisticsTitleLabelConfiguration
          //
          if (n.name () == "StatisticsTitleLabelConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsTitleLabelConfigurationType > r (
              StatisticsTitleLabelConfigurationTraits::create (i, f, this));

            if (!StatisticsTitleLabelConfiguration_.present ())
            {
              this->StatisticsTitleLabelConfiguration_.set (r);
              continue;
            }
          }

          // StatisticsTitleColor
          //
          if (n.name () == "StatisticsTitleColor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StatisticsTitleColorType > r (
              StatisticsTitleColorTraits::create (i, f, this));

            if (!StatisticsTitleColor_.present ())
            {
              this->StatisticsTitleColor_.set (r);
              continue;
            }
          }

          // ShowBarcodeInPreview
          //
          if (n.name () == "ShowBarcodeInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBarcodeInPreview_.present ())
            {
              this->ShowBarcodeInPreview_.set (ShowBarcodeInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // ConsolidateDemoVotes
          //
          if (n.name () == "ConsolidateDemoVotes" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ConsolidateDemoVotes_.present ())
            {
              this->ConsolidateDemoVotes_.set (ConsolidateDemoVotesTraits::create (i, f, this));
              continue;
            }
          }

          // ConsolidateSimulatedVotes
          //
          if (n.name () == "ConsolidateSimulatedVotes" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ConsolidateSimulatedVotes_.present ())
            {
              this->ConsolidateSimulatedVotes_.set (ConsolidateSimulatedVotesTraits::create (i, f, this));
              continue;
            }
          }

          // AuditModeResources
          //
          if (n.name () == "AuditModeResources" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!AuditModeResources_.present ())
            {
              this->AuditModeResources_.set (AuditModeResourcesTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeInParams
          //
          if (n.name () == "BarcodeInParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeInParamsType > r (
              BarcodeInParamsTraits::create (i, f, this));

            if (!BarcodeInParams_.present ())
            {
              this->BarcodeInParams_.set (r);
              continue;
            }
          }

          // BarcodeOutParams
          //
          if (n.name () == "BarcodeOutParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeOutParamsType > r (
              BarcodeOutParamsTraits::create (i, f, this));

            if (!BarcodeOutParams_.present ())
            {
              this->BarcodeOutParams_.set (r);
              continue;
            }
          }

          // ConsolidationTotalCountConfiguration
          //
          if (n.name () == "ConsolidationTotalCountConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ConsolidationTotalCountConfigurationType > r (
              ConsolidationTotalCountConfigurationTraits::create (i, f, this));

            if (!ConsolidationTotalCountConfiguration_.present ())
            {
              this->ConsolidationTotalCountConfiguration_.set (r);
              continue;
            }
          }

          // ConsolidationOfficialCountConfiguration
          //
          if (n.name () == "ConsolidationOfficialCountConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ConsolidationOfficialCountConfigurationType > r (
              ConsolidationOfficialCountConfigurationTraits::create (i, f, this));

            if (!ConsolidationOfficialCountConfiguration_.present ())
            {
              this->ConsolidationOfficialCountConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!UsePrintPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UsePrintPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseVerticalTableInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseVerticalTableInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CounterWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CounterWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CounterPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CounterPadding",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowVotingMachineCustomAttribute_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowVotingMachineCustomAttribute",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsTitleLabelConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsTitleLabelConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StatisticsTitleColor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticsTitleColor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBarcodeInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBarcodeInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidateDemoVotes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidateDemoVotes",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidateSimulatedVotes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidateSimulatedVotes",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AuditModeResources_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AuditModeResources",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeInParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeInParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeOutParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeOutParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidationTotalCountConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidationTotalCountConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ConsolidationOfficialCountConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConsolidationOfficialCountConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VoteConsolidationFunctionalityConfiguration* VoteConsolidationFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VoteConsolidationFunctionalityConfiguration (*this, f, c);
      }

      VoteConsolidationFunctionalityConfiguration::
      ~VoteConsolidationFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const VoteConsolidationFunctionalityConfiguration& x, const VoteConsolidationFunctionalityConfiguration& y)
      {
        if (!(x.getUsePrintPreview () == y.getUsePrintPreview ()))
          return false;

        if (!(x.getUseVerticalTableInPreview () == y.getUseVerticalTableInPreview ()))
          return false;

        if (!(x.getCounterWidth () == y.getCounterWidth ()))
          return false;

        if (!(x.getCounterPadding () == y.getCounterPadding ()))
          return false;

        if (!(x.getShowVotingMachineCustomAttribute () == y.getShowVotingMachineCustomAttribute ()))
          return false;

        if (!(x.getStatisticsTitleLabelConfiguration () == y.getStatisticsTitleLabelConfiguration ()))
          return false;

        if (!(x.getStatisticsTitleColor () == y.getStatisticsTitleColor ()))
          return false;

        if (!(x.getShowBarcodeInPreview () == y.getShowBarcodeInPreview ()))
          return false;

        if (!(x.getConsolidateDemoVotes () == y.getConsolidateDemoVotes ()))
          return false;

        if (!(x.getConsolidateSimulatedVotes () == y.getConsolidateSimulatedVotes ()))
          return false;

        if (!(x.getAuditModeResources () == y.getAuditModeResources ()))
          return false;

        if (!(x.getBarcodeInParams () == y.getBarcodeInParams ()))
          return false;

        if (!(x.getBarcodeOutParams () == y.getBarcodeOutParams ()))
          return false;

        if (!(x.getConsolidationTotalCountConfiguration () == y.getConsolidationTotalCountConfiguration ()))
          return false;

        if (!(x.getConsolidationOfficialCountConfiguration () == y.getConsolidationOfficialCountConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const VoteConsolidationFunctionalityConfiguration& x, const VoteConsolidationFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // PrintPreviewFunctionalityConfiguration
      //

      PrintPreviewFunctionalityConfiguration::
      PrintPreviewFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        UsePrintPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PrintPreviewFunctionalityConfiguration::
      PrintPreviewFunctionalityConfiguration (const UsePrintPreviewType& UsePrintPreview,
                                              const UseVerticalTableInPreviewType& UseVerticalTableInPreview,
                                              const ShowBarcodeInPreviewType& ShowBarcodeInPreview,
                                              const BarcodeInParamsType& BarcodeInParams,
                                              const BarcodeOutParamsType& BarcodeOutParams)
      : ::Smartmatic::ConfigurationTypes::Type (),
        UsePrintPreview_ (UsePrintPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        UseVerticalTableInPreview_ (UseVerticalTableInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowBarcodeInPreview_ (ShowBarcodeInPreview, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeInParams_ (BarcodeInParams, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BarcodeOutParams_ (BarcodeOutParams, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PrintPreviewFunctionalityConfiguration::
      PrintPreviewFunctionalityConfiguration (const PrintPreviewFunctionalityConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f,
                                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        UsePrintPreview_ (x.UsePrintPreview_, f, this),
        UseVerticalTableInPreview_ (x.UseVerticalTableInPreview_, f, this),
        ShowBarcodeInPreview_ (x.ShowBarcodeInPreview_, f, this),
        BarcodeInParams_ (x.BarcodeInParams_, f, this),
        BarcodeOutParams_ (x.BarcodeOutParams_, f, this)
      {
      }

      PrintPreviewFunctionalityConfiguration::
      PrintPreviewFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f,
                                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        UsePrintPreview_ (f, this),
        UseVerticalTableInPreview_ (f, this),
        ShowBarcodeInPreview_ (f, this),
        BarcodeInParams_ (f, this),
        BarcodeOutParams_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PrintPreviewFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // UsePrintPreview
          //
          if (n.name () == "UsePrintPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UsePrintPreview_.present ())
            {
              this->UsePrintPreview_.set (UsePrintPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // UseVerticalTableInPreview
          //
          if (n.name () == "UseVerticalTableInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!UseVerticalTableInPreview_.present ())
            {
              this->UseVerticalTableInPreview_.set (UseVerticalTableInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBarcodeInPreview
          //
          if (n.name () == "ShowBarcodeInPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowBarcodeInPreview_.present ())
            {
              this->ShowBarcodeInPreview_.set (ShowBarcodeInPreviewTraits::create (i, f, this));
              continue;
            }
          }

          // BarcodeInParams
          //
          if (n.name () == "BarcodeInParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeInParamsType > r (
              BarcodeInParamsTraits::create (i, f, this));

            if (!BarcodeInParams_.present ())
            {
              this->BarcodeInParams_.set (r);
              continue;
            }
          }

          // BarcodeOutParams
          //
          if (n.name () == "BarcodeOutParams" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BarcodeOutParamsType > r (
              BarcodeOutParamsTraits::create (i, f, this));

            if (!BarcodeOutParams_.present ())
            {
              this->BarcodeOutParams_.set (r);
              continue;
            }
          }

          break;
        }

        if (!UsePrintPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UsePrintPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!UseVerticalTableInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseVerticalTableInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowBarcodeInPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBarcodeInPreview",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeInParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeInParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!BarcodeOutParams_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeOutParams",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PrintPreviewFunctionalityConfiguration* PrintPreviewFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PrintPreviewFunctionalityConfiguration (*this, f, c);
      }

      PrintPreviewFunctionalityConfiguration::
      ~PrintPreviewFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const PrintPreviewFunctionalityConfiguration& x, const PrintPreviewFunctionalityConfiguration& y)
      {
        if (!(x.getUsePrintPreview () == y.getUsePrintPreview ()))
          return false;

        if (!(x.getUseVerticalTableInPreview () == y.getUseVerticalTableInPreview ()))
          return false;

        if (!(x.getShowBarcodeInPreview () == y.getShowBarcodeInPreview ()))
          return false;

        if (!(x.getBarcodeInParams () == y.getBarcodeInParams ()))
          return false;

        if (!(x.getBarcodeOutParams () == y.getBarcodeOutParams ()))
          return false;

        return true;
      }

      bool
      operator!= (const PrintPreviewFunctionalityConfiguration& x, const PrintPreviewFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // LogReportFunctionalityConfiguration
      //

      LogReportFunctionalityConfiguration::
      LogReportFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrinterMessageTimeout_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PageSize_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      LogReportFunctionalityConfiguration::
      LogReportFunctionalityConfiguration (const PrinterMessageTimeoutType& PrinterMessageTimeout,
                                           const PageSizeType& PageSize)
      : ::Smartmatic::ConfigurationTypes::Type (),
        PrinterMessageTimeout_ (PrinterMessageTimeout, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PageSize_ (PageSize, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      LogReportFunctionalityConfiguration::
      LogReportFunctionalityConfiguration (const LogReportFunctionalityConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        PrinterMessageTimeout_ (x.PrinterMessageTimeout_, f, this),
        PageSize_ (x.PageSize_, f, this)
      {
      }

      LogReportFunctionalityConfiguration::
      LogReportFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f,
                                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        PrinterMessageTimeout_ (f, this),
        PageSize_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LogReportFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PrinterMessageTimeout
          //
          if (n.name () == "PrinterMessageTimeout" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PrinterMessageTimeout_.present ())
            {
              this->PrinterMessageTimeout_.set (PrinterMessageTimeoutTraits::create (i, f, this));
              continue;
            }
          }

          // PageSize
          //
          if (n.name () == "PageSize" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PageSize_.present ())
            {
              this->PageSize_.set (PageSizeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!PrinterMessageTimeout_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrinterMessageTimeout",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PageSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PageSize",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      LogReportFunctionalityConfiguration* LogReportFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class LogReportFunctionalityConfiguration (*this, f, c);
      }

      LogReportFunctionalityConfiguration::
      ~LogReportFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const LogReportFunctionalityConfiguration& x, const LogReportFunctionalityConfiguration& y)
      {
        if (!(x.getPrinterMessageTimeout () == y.getPrinterMessageTimeout ()))
          return false;

        if (!(x.getPageSize () == y.getPageSize ()))
          return false;

        return true;
      }

      bool
      operator!= (const LogReportFunctionalityConfiguration& x, const LogReportFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // CloseNotetFunctionalityConfiguration
      //

      CloseNotetFunctionalityConfiguration::
      CloseNotetFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimunNotesToRegister_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseNotetFunctionalityConfiguration::
      CloseNotetFunctionalityConfiguration (const MinimunNotesToRegisterType& MinimunNotesToRegister)
      : ::Smartmatic::ConfigurationTypes::Type (),
        MinimunNotesToRegister_ (MinimunNotesToRegister, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      CloseNotetFunctionalityConfiguration::
      CloseNotetFunctionalityConfiguration (const CloseNotetFunctionalityConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        MinimunNotesToRegister_ (x.MinimunNotesToRegister_, f, this)
      {
      }

      CloseNotetFunctionalityConfiguration::
      CloseNotetFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f,
                                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        MinimunNotesToRegister_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CloseNotetFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MinimunNotesToRegister
          //
          if (n.name () == "MinimunNotesToRegister" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MinimunNotesToRegister_.present ())
            {
              this->MinimunNotesToRegister_.set (MinimunNotesToRegisterTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!MinimunNotesToRegister_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MinimunNotesToRegister",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      CloseNotetFunctionalityConfiguration* CloseNotetFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CloseNotetFunctionalityConfiguration (*this, f, c);
      }

      CloseNotetFunctionalityConfiguration::
      ~CloseNotetFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const CloseNotetFunctionalityConfiguration& x, const CloseNotetFunctionalityConfiguration& y)
      {
        if (!(x.getMinimunNotesToRegister () == y.getMinimunNotesToRegister ()))
          return false;

        return true;
      }

      bool
      operator!= (const CloseNotetFunctionalityConfiguration& x, const CloseNotetFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // VotingExperienceValidationScreensFunctionalityConfiguration
      //

      VotingExperienceValidationScreensFunctionalityConfiguration::
      VotingExperienceValidationScreensFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ScreenOnlyFirstBallot_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Autorun_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeForStart_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Autoclose_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeForClose_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToShow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToHide_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeAfterCapture_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CaptureWholeScreen_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionSelImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttrSelImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttrConfImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelImageFormatNameConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperNullImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperNullImageFormatNameConfirmation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRemotionIndImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRemovedImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FoldVoteImageFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NullImageConfirmationFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeScreenFormatName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDialog_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ScreensButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckImageFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFinalMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::
      VotingExperienceValidationScreensFunctionalityConfiguration (const ScreenOnlyFirstBallotType& ScreenOnlyFirstBallot,
                                                                   const AutorunType& Autorun,
                                                                   const TimeForStartType& TimeForStart,
                                                                   const AutocloseType& Autoclose,
                                                                   const TimeForCloseType& TimeForClose,
                                                                   const TimeToShowType& TimeToShow,
                                                                   const TimeToHideType& TimeToHide,
                                                                   const TimeAfterCaptureType& TimeAfterCapture,
                                                                   const CaptureWholeScreenType& CaptureWholeScreen,
                                                                   const PartySelImageFormatNameType& PartySelImageFormatName,
                                                                   const OptionSelImageFormatNameType& OptionSelImageFormatName,
                                                                   const CustomAttrSelImageFormatNameType& CustomAttrSelImageFormatName,
                                                                   const CustomAttrConfImageFormatNameType& CustomAttrConfImageFormatName,
                                                                   const LanguageSelImageFormatNameType& LanguageSelImageFormatName,
                                                                   const LanguageSelImageFormatNameConfirmationType& LanguageSelImageFormatNameConfirmation,
                                                                   const SuperNullImageFormatNameType& SuperNullImageFormatName,
                                                                   const SuperNullImageFormatNameConfirmationType& SuperNullImageFormatNameConfirmation,
                                                                   const PrintImageFormatNameType& PrintImageFormatName,
                                                                   const CardRemotionIndImageFormatNameType& CardRemotionIndImageFormatName,
                                                                   const CardRemovedImageFormatNameType& CardRemovedImageFormatName,
                                                                   const FoldVoteImageFormatNameType& FoldVoteImageFormatName,
                                                                   const NullImageConfirmationFormatNameType& NullImageConfirmationFormatName,
                                                                   const WelcomeScreenFormatNameType& WelcomeScreenFormatName,
                                                                   const ShowDialogType& ShowDialog,
                                                                   const ScreensButtonConfType& ScreensButtonConf,
                                                                   const CheckImageFileType& CheckImageFile,
                                                                   const ShowFinalMessageType& ShowFinalMessage)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ScreenOnlyFirstBallot_ (ScreenOnlyFirstBallot, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Autorun_ (Autorun, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeForStart_ (TimeForStart, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Autoclose_ (Autoclose, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeForClose_ (TimeForClose, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToShow_ (TimeToShow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToHide_ (TimeToHide, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeAfterCapture_ (TimeAfterCapture, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CaptureWholeScreen_ (CaptureWholeScreen, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelImageFormatName_ (PartySelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionSelImageFormatName_ (OptionSelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttrSelImageFormatName_ (CustomAttrSelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttrConfImageFormatName_ (CustomAttrConfImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelImageFormatName_ (LanguageSelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelImageFormatNameConfirmation_ (LanguageSelImageFormatNameConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperNullImageFormatName_ (SuperNullImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperNullImageFormatNameConfirmation_ (SuperNullImageFormatNameConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintImageFormatName_ (PrintImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRemotionIndImageFormatName_ (CardRemotionIndImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRemovedImageFormatName_ (CardRemovedImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FoldVoteImageFormatName_ (FoldVoteImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NullImageConfirmationFormatName_ (NullImageConfirmationFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeScreenFormatName_ (WelcomeScreenFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDialog_ (ShowDialog, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ScreensButtonConf_ (ScreensButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckImageFile_ (CheckImageFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFinalMessage_ (ShowFinalMessage, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::
      VotingExperienceValidationScreensFunctionalityConfiguration (const ScreenOnlyFirstBallotType& ScreenOnlyFirstBallot,
                                                                   const AutorunType& Autorun,
                                                                   const TimeForStartType& TimeForStart,
                                                                   const AutocloseType& Autoclose,
                                                                   const TimeForCloseType& TimeForClose,
                                                                   const TimeToShowType& TimeToShow,
                                                                   const TimeToHideType& TimeToHide,
                                                                   const TimeAfterCaptureType& TimeAfterCapture,
                                                                   const CaptureWholeScreenType& CaptureWholeScreen,
                                                                   const PartySelImageFormatNameType& PartySelImageFormatName,
                                                                   const OptionSelImageFormatNameType& OptionSelImageFormatName,
                                                                   const CustomAttrSelImageFormatNameType& CustomAttrSelImageFormatName,
                                                                   const CustomAttrConfImageFormatNameType& CustomAttrConfImageFormatName,
                                                                   const LanguageSelImageFormatNameType& LanguageSelImageFormatName,
                                                                   const LanguageSelImageFormatNameConfirmationType& LanguageSelImageFormatNameConfirmation,
                                                                   const SuperNullImageFormatNameType& SuperNullImageFormatName,
                                                                   const SuperNullImageFormatNameConfirmationType& SuperNullImageFormatNameConfirmation,
                                                                   const PrintImageFormatNameType& PrintImageFormatName,
                                                                   const CardRemotionIndImageFormatNameType& CardRemotionIndImageFormatName,
                                                                   const CardRemovedImageFormatNameType& CardRemovedImageFormatName,
                                                                   const FoldVoteImageFormatNameType& FoldVoteImageFormatName,
                                                                   const NullImageConfirmationFormatNameType& NullImageConfirmationFormatName,
                                                                   const WelcomeScreenFormatNameType& WelcomeScreenFormatName,
                                                                   const ShowDialogType& ShowDialog,
                                                                   ::std::auto_ptr< ScreensButtonConfType >& ScreensButtonConf,
                                                                   const CheckImageFileType& CheckImageFile,
                                                                   const ShowFinalMessageType& ShowFinalMessage)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ScreenOnlyFirstBallot_ (ScreenOnlyFirstBallot, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Autorun_ (Autorun, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeForStart_ (TimeForStart, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Autoclose_ (Autoclose, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeForClose_ (TimeForClose, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToShow_ (TimeToShow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeToHide_ (TimeToHide, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeAfterCapture_ (TimeAfterCapture, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CaptureWholeScreen_ (CaptureWholeScreen, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartySelImageFormatName_ (PartySelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        OptionSelImageFormatName_ (OptionSelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttrSelImageFormatName_ (CustomAttrSelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttrConfImageFormatName_ (CustomAttrConfImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelImageFormatName_ (LanguageSelImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageSelImageFormatNameConfirmation_ (LanguageSelImageFormatNameConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperNullImageFormatName_ (SuperNullImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        SuperNullImageFormatNameConfirmation_ (SuperNullImageFormatNameConfirmation, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PrintImageFormatName_ (PrintImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRemotionIndImageFormatName_ (CardRemotionIndImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardRemovedImageFormatName_ (CardRemovedImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FoldVoteImageFormatName_ (FoldVoteImageFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        NullImageConfirmationFormatName_ (NullImageConfirmationFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        WelcomeScreenFormatName_ (WelcomeScreenFormatName, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowDialog_ (ShowDialog, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ScreensButtonConf_ (ScreensButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CheckImageFile_ (CheckImageFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowFinalMessage_ (ShowFinalMessage, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::
      VotingExperienceValidationScreensFunctionalityConfiguration (const VotingExperienceValidationScreensFunctionalityConfiguration& x,
                                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ScreenOnlyFirstBallot_ (x.ScreenOnlyFirstBallot_, f, this),
        Autorun_ (x.Autorun_, f, this),
        TimeForStart_ (x.TimeForStart_, f, this),
        Autoclose_ (x.Autoclose_, f, this),
        TimeForClose_ (x.TimeForClose_, f, this),
        TimeToShow_ (x.TimeToShow_, f, this),
        TimeToHide_ (x.TimeToHide_, f, this),
        TimeAfterCapture_ (x.TimeAfterCapture_, f, this),
        CaptureWholeScreen_ (x.CaptureWholeScreen_, f, this),
        PartySelImageFormatName_ (x.PartySelImageFormatName_, f, this),
        OptionSelImageFormatName_ (x.OptionSelImageFormatName_, f, this),
        CustomAttrSelImageFormatName_ (x.CustomAttrSelImageFormatName_, f, this),
        CustomAttrConfImageFormatName_ (x.CustomAttrConfImageFormatName_, f, this),
        LanguageSelImageFormatName_ (x.LanguageSelImageFormatName_, f, this),
        LanguageSelImageFormatNameConfirmation_ (x.LanguageSelImageFormatNameConfirmation_, f, this),
        SuperNullImageFormatName_ (x.SuperNullImageFormatName_, f, this),
        SuperNullImageFormatNameConfirmation_ (x.SuperNullImageFormatNameConfirmation_, f, this),
        PrintImageFormatName_ (x.PrintImageFormatName_, f, this),
        CardRemotionIndImageFormatName_ (x.CardRemotionIndImageFormatName_, f, this),
        CardRemovedImageFormatName_ (x.CardRemovedImageFormatName_, f, this),
        FoldVoteImageFormatName_ (x.FoldVoteImageFormatName_, f, this),
        NullImageConfirmationFormatName_ (x.NullImageConfirmationFormatName_, f, this),
        WelcomeScreenFormatName_ (x.WelcomeScreenFormatName_, f, this),
        ShowDialog_ (x.ShowDialog_, f, this),
        ScreensButtonConf_ (x.ScreensButtonConf_, f, this),
        CheckImageFile_ (x.CheckImageFile_, f, this),
        ShowFinalMessage_ (x.ShowFinalMessage_, f, this)
      {
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::
      VotingExperienceValidationScreensFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ScreenOnlyFirstBallot_ (f, this),
        Autorun_ (f, this),
        TimeForStart_ (f, this),
        Autoclose_ (f, this),
        TimeForClose_ (f, this),
        TimeToShow_ (f, this),
        TimeToHide_ (f, this),
        TimeAfterCapture_ (f, this),
        CaptureWholeScreen_ (f, this),
        PartySelImageFormatName_ (f, this),
        OptionSelImageFormatName_ (f, this),
        CustomAttrSelImageFormatName_ (f, this),
        CustomAttrConfImageFormatName_ (f, this),
        LanguageSelImageFormatName_ (f, this),
        LanguageSelImageFormatNameConfirmation_ (f, this),
        SuperNullImageFormatName_ (f, this),
        SuperNullImageFormatNameConfirmation_ (f, this),
        PrintImageFormatName_ (f, this),
        CardRemotionIndImageFormatName_ (f, this),
        CardRemovedImageFormatName_ (f, this),
        FoldVoteImageFormatName_ (f, this),
        NullImageConfirmationFormatName_ (f, this),
        WelcomeScreenFormatName_ (f, this),
        ShowDialog_ (f, this),
        ScreensButtonConf_ (f, this),
        CheckImageFile_ (f, this),
        ShowFinalMessage_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VotingExperienceValidationScreensFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ScreenOnlyFirstBallot
          //
          if (n.name () == "ScreenOnlyFirstBallot" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ScreenOnlyFirstBallot_.present ())
            {
              this->ScreenOnlyFirstBallot_.set (ScreenOnlyFirstBallotTraits::create (i, f, this));
              continue;
            }
          }

          // Autorun
          //
          if (n.name () == "Autorun" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Autorun_.present ())
            {
              this->Autorun_.set (AutorunTraits::create (i, f, this));
              continue;
            }
          }

          // TimeForStart
          //
          if (n.name () == "TimeForStart" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeForStart_.present ())
            {
              this->TimeForStart_.set (TimeForStartTraits::create (i, f, this));
              continue;
            }
          }

          // Autoclose
          //
          if (n.name () == "Autoclose" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Autoclose_.present ())
            {
              this->Autoclose_.set (AutocloseTraits::create (i, f, this));
              continue;
            }
          }

          // TimeForClose
          //
          if (n.name () == "TimeForClose" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeForClose_.present ())
            {
              this->TimeForClose_.set (TimeForCloseTraits::create (i, f, this));
              continue;
            }
          }

          // TimeToShow
          //
          if (n.name () == "TimeToShow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeToShow_.present ())
            {
              this->TimeToShow_.set (TimeToShowTraits::create (i, f, this));
              continue;
            }
          }

          // TimeToHide
          //
          if (n.name () == "TimeToHide" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeToHide_.present ())
            {
              this->TimeToHide_.set (TimeToHideTraits::create (i, f, this));
              continue;
            }
          }

          // TimeAfterCapture
          //
          if (n.name () == "TimeAfterCapture" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeAfterCapture_.present ())
            {
              this->TimeAfterCapture_.set (TimeAfterCaptureTraits::create (i, f, this));
              continue;
            }
          }

          // CaptureWholeScreen
          //
          if (n.name () == "CaptureWholeScreen" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CaptureWholeScreen_.present ())
            {
              this->CaptureWholeScreen_.set (CaptureWholeScreenTraits::create (i, f, this));
              continue;
            }
          }

          // PartySelImageFormatName
          //
          if (n.name () == "PartySelImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartySelImageFormatNameType > r (
              PartySelImageFormatNameTraits::create (i, f, this));

            if (!PartySelImageFormatName_.present ())
            {
              this->PartySelImageFormatName_.set (r);
              continue;
            }
          }

          // OptionSelImageFormatName
          //
          if (n.name () == "OptionSelImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OptionSelImageFormatNameType > r (
              OptionSelImageFormatNameTraits::create (i, f, this));

            if (!OptionSelImageFormatName_.present ())
            {
              this->OptionSelImageFormatName_.set (r);
              continue;
            }
          }

          // CustomAttrSelImageFormatName
          //
          if (n.name () == "CustomAttrSelImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CustomAttrSelImageFormatNameType > r (
              CustomAttrSelImageFormatNameTraits::create (i, f, this));

            if (!CustomAttrSelImageFormatName_.present ())
            {
              this->CustomAttrSelImageFormatName_.set (r);
              continue;
            }
          }

          // CustomAttrConfImageFormatName
          //
          if (n.name () == "CustomAttrConfImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CustomAttrConfImageFormatNameType > r (
              CustomAttrConfImageFormatNameTraits::create (i, f, this));

            if (!CustomAttrConfImageFormatName_.present ())
            {
              this->CustomAttrConfImageFormatName_.set (r);
              continue;
            }
          }

          // LanguageSelImageFormatName
          //
          if (n.name () == "LanguageSelImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LanguageSelImageFormatNameType > r (
              LanguageSelImageFormatNameTraits::create (i, f, this));

            if (!LanguageSelImageFormatName_.present ())
            {
              this->LanguageSelImageFormatName_.set (r);
              continue;
            }
          }

          // LanguageSelImageFormatNameConfirmation
          //
          if (n.name () == "LanguageSelImageFormatNameConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LanguageSelImageFormatNameConfirmationType > r (
              LanguageSelImageFormatNameConfirmationTraits::create (i, f, this));

            if (!LanguageSelImageFormatNameConfirmation_.present ())
            {
              this->LanguageSelImageFormatNameConfirmation_.set (r);
              continue;
            }
          }

          // SuperNullImageFormatName
          //
          if (n.name () == "SuperNullImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperNullImageFormatNameType > r (
              SuperNullImageFormatNameTraits::create (i, f, this));

            if (!SuperNullImageFormatName_.present ())
            {
              this->SuperNullImageFormatName_.set (r);
              continue;
            }
          }

          // SuperNullImageFormatNameConfirmation
          //
          if (n.name () == "SuperNullImageFormatNameConfirmation" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SuperNullImageFormatNameConfirmationType > r (
              SuperNullImageFormatNameConfirmationTraits::create (i, f, this));

            if (!SuperNullImageFormatNameConfirmation_.present ())
            {
              this->SuperNullImageFormatNameConfirmation_.set (r);
              continue;
            }
          }

          // PrintImageFormatName
          //
          if (n.name () == "PrintImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PrintImageFormatNameType > r (
              PrintImageFormatNameTraits::create (i, f, this));

            if (!PrintImageFormatName_.present ())
            {
              this->PrintImageFormatName_.set (r);
              continue;
            }
          }

          // CardRemotionIndImageFormatName
          //
          if (n.name () == "CardRemotionIndImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardRemotionIndImageFormatNameType > r (
              CardRemotionIndImageFormatNameTraits::create (i, f, this));

            if (!CardRemotionIndImageFormatName_.present ())
            {
              this->CardRemotionIndImageFormatName_.set (r);
              continue;
            }
          }

          // CardRemovedImageFormatName
          //
          if (n.name () == "CardRemovedImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardRemovedImageFormatNameType > r (
              CardRemovedImageFormatNameTraits::create (i, f, this));

            if (!CardRemovedImageFormatName_.present ())
            {
              this->CardRemovedImageFormatName_.set (r);
              continue;
            }
          }

          // FoldVoteImageFormatName
          //
          if (n.name () == "FoldVoteImageFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FoldVoteImageFormatNameType > r (
              FoldVoteImageFormatNameTraits::create (i, f, this));

            if (!FoldVoteImageFormatName_.present ())
            {
              this->FoldVoteImageFormatName_.set (r);
              continue;
            }
          }

          // NullImageConfirmationFormatName
          //
          if (n.name () == "NullImageConfirmationFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NullImageConfirmationFormatNameType > r (
              NullImageConfirmationFormatNameTraits::create (i, f, this));

            if (!NullImageConfirmationFormatName_.present ())
            {
              this->NullImageConfirmationFormatName_.set (r);
              continue;
            }
          }

          // WelcomeScreenFormatName
          //
          if (n.name () == "WelcomeScreenFormatName" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< WelcomeScreenFormatNameType > r (
              WelcomeScreenFormatNameTraits::create (i, f, this));

            if (!WelcomeScreenFormatName_.present ())
            {
              this->WelcomeScreenFormatName_.set (r);
              continue;
            }
          }

          // ShowDialog
          //
          if (n.name () == "ShowDialog" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowDialog_.present ())
            {
              this->ShowDialog_.set (ShowDialogTraits::create (i, f, this));
              continue;
            }
          }

          // ScreensButtonConf
          //
          if (n.name () == "ScreensButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ScreensButtonConfType > r (
              ScreensButtonConfTraits::create (i, f, this));

            if (!ScreensButtonConf_.present ())
            {
              this->ScreensButtonConf_.set (r);
              continue;
            }
          }

          // CheckImageFile
          //
          if (n.name () == "CheckImageFile" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!CheckImageFile_.present ())
            {
              this->CheckImageFile_.set (CheckImageFileTraits::create (i, f, this));
              continue;
            }
          }

          // ShowFinalMessage
          //
          if (n.name () == "ShowFinalMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowFinalMessage_.present ())
            {
              this->ShowFinalMessage_.set (ShowFinalMessageTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ScreenOnlyFirstBallot_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ScreenOnlyFirstBallot",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Autorun_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Autorun",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeForStart_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeForStart",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Autoclose_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Autoclose",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeForClose_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeForClose",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeToShow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeToShow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeToHide_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeToHide",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeAfterCapture_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeAfterCapture",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CaptureWholeScreen_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CaptureWholeScreen",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartySelImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartySelImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!OptionSelImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OptionSelImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CustomAttrSelImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CustomAttrSelImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CustomAttrConfImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CustomAttrConfImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LanguageSelImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LanguageSelImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LanguageSelImageFormatNameConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LanguageSelImageFormatNameConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperNullImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperNullImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!SuperNullImageFormatNameConfirmation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SuperNullImageFormatNameConfirmation",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PrintImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrintImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardRemotionIndImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardRemotionIndImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardRemovedImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardRemovedImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FoldVoteImageFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FoldVoteImageFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!NullImageConfirmationFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NullImageConfirmationFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!WelcomeScreenFormatName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "WelcomeScreenFormatName",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowDialog_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowDialog",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ScreensButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ScreensButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CheckImageFile_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CheckImageFile",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowFinalMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowFinalMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VotingExperienceValidationScreensFunctionalityConfiguration* VotingExperienceValidationScreensFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VotingExperienceValidationScreensFunctionalityConfiguration (*this, f, c);
      }

      VotingExperienceValidationScreensFunctionalityConfiguration::
      ~VotingExperienceValidationScreensFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const VotingExperienceValidationScreensFunctionalityConfiguration& x, const VotingExperienceValidationScreensFunctionalityConfiguration& y)
      {
        if (!(x.getScreenOnlyFirstBallot () == y.getScreenOnlyFirstBallot ()))
          return false;

        if (!(x.getAutorun () == y.getAutorun ()))
          return false;

        if (!(x.getTimeForStart () == y.getTimeForStart ()))
          return false;

        if (!(x.getAutoclose () == y.getAutoclose ()))
          return false;

        if (!(x.getTimeForClose () == y.getTimeForClose ()))
          return false;

        if (!(x.getTimeToShow () == y.getTimeToShow ()))
          return false;

        if (!(x.getTimeToHide () == y.getTimeToHide ()))
          return false;

        if (!(x.getTimeAfterCapture () == y.getTimeAfterCapture ()))
          return false;

        if (!(x.getCaptureWholeScreen () == y.getCaptureWholeScreen ()))
          return false;

        if (!(x.getPartySelImageFormatName () == y.getPartySelImageFormatName ()))
          return false;

        if (!(x.getOptionSelImageFormatName () == y.getOptionSelImageFormatName ()))
          return false;

        if (!(x.getCustomAttrSelImageFormatName () == y.getCustomAttrSelImageFormatName ()))
          return false;

        if (!(x.getCustomAttrConfImageFormatName () == y.getCustomAttrConfImageFormatName ()))
          return false;

        if (!(x.getLanguageSelImageFormatName () == y.getLanguageSelImageFormatName ()))
          return false;

        if (!(x.getLanguageSelImageFormatNameConfirmation () == y.getLanguageSelImageFormatNameConfirmation ()))
          return false;

        if (!(x.getSuperNullImageFormatName () == y.getSuperNullImageFormatName ()))
          return false;

        if (!(x.getSuperNullImageFormatNameConfirmation () == y.getSuperNullImageFormatNameConfirmation ()))
          return false;

        if (!(x.getPrintImageFormatName () == y.getPrintImageFormatName ()))
          return false;

        if (!(x.getCardRemotionIndImageFormatName () == y.getCardRemotionIndImageFormatName ()))
          return false;

        if (!(x.getCardRemovedImageFormatName () == y.getCardRemovedImageFormatName ()))
          return false;

        if (!(x.getFoldVoteImageFormatName () == y.getFoldVoteImageFormatName ()))
          return false;

        if (!(x.getNullImageConfirmationFormatName () == y.getNullImageConfirmationFormatName ()))
          return false;

        if (!(x.getWelcomeScreenFormatName () == y.getWelcomeScreenFormatName ()))
          return false;

        if (!(x.getShowDialog () == y.getShowDialog ()))
          return false;

        if (!(x.getScreensButtonConf () == y.getScreensButtonConf ()))
          return false;

        if (!(x.getCheckImageFile () == y.getCheckImageFile ()))
          return false;

        if (!(x.getShowFinalMessage () == y.getShowFinalMessage ()))
          return false;

        return true;
      }

      bool
      operator!= (const VotingExperienceValidationScreensFunctionalityConfiguration& x, const VotingExperienceValidationScreensFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // VotingForDisabledFunctionalityConfiguration
      //

      VotingForDisabledFunctionalityConfiguration::
      VotingForDisabledFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionTitleConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoTitleConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoIDConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoTextConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoErrorConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOutInfoError_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CommentConfig_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingForDisabledFunctionalityConfiguration::
      VotingForDisabledFunctionalityConfiguration (const AddButtonConfType& AddButtonConf,
                                                   const QuestionTitleConfigurationType& QuestionTitleConfiguration,
                                                   const QuestionButtonConfType& QuestionButtonConf,
                                                   const InfoTitleConfigurationType& InfoTitleConfiguration,
                                                   const InfoIDConfigurationType& InfoIDConfiguration,
                                                   const InfoTextConfigurationType& InfoTextConfiguration,
                                                   const InfoErrorConfigurationType& InfoErrorConfiguration,
                                                   const TimeOutInfoErrorType& TimeOutInfoError,
                                                   const AddCancelButtonConfType& AddCancelButtonConf,
                                                   const RegisterWidgetConfigurationType& RegisterWidgetConfiguration,
                                                   const CommentConfigType& CommentConfig)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (AddButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionTitleConfiguration_ (QuestionTitleConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionButtonConf_ (QuestionButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoTitleConfiguration_ (InfoTitleConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoIDConfiguration_ (InfoIDConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoTextConfiguration_ (InfoTextConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoErrorConfiguration_ (InfoErrorConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOutInfoError_ (TimeOutInfoError, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (AddCancelButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CommentConfig_ (CommentConfig, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingForDisabledFunctionalityConfiguration::
      VotingForDisabledFunctionalityConfiguration (::std::auto_ptr< AddButtonConfType >& AddButtonConf,
                                                   ::std::auto_ptr< QuestionTitleConfigurationType >& QuestionTitleConfiguration,
                                                   ::std::auto_ptr< QuestionButtonConfType >& QuestionButtonConf,
                                                   ::std::auto_ptr< InfoTitleConfigurationType >& InfoTitleConfiguration,
                                                   ::std::auto_ptr< InfoIDConfigurationType >& InfoIDConfiguration,
                                                   ::std::auto_ptr< InfoTextConfigurationType >& InfoTextConfiguration,
                                                   ::std::auto_ptr< InfoErrorConfigurationType >& InfoErrorConfiguration,
                                                   const TimeOutInfoErrorType& TimeOutInfoError,
                                                   ::std::auto_ptr< AddCancelButtonConfType >& AddCancelButtonConf,
                                                   ::std::auto_ptr< RegisterWidgetConfigurationType >& RegisterWidgetConfiguration,
                                                   ::std::auto_ptr< CommentConfigType >& CommentConfig)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (AddButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionTitleConfiguration_ (QuestionTitleConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        QuestionButtonConf_ (QuestionButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoTitleConfiguration_ (InfoTitleConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoIDConfiguration_ (InfoIDConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoTextConfiguration_ (InfoTextConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoErrorConfiguration_ (InfoErrorConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TimeOutInfoError_ (TimeOutInfoError, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (AddCancelButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CommentConfig_ (CommentConfig, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      VotingForDisabledFunctionalityConfiguration::
      VotingForDisabledFunctionalityConfiguration (const VotingForDisabledFunctionalityConfiguration& x,
                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        AddButtonConf_ (x.AddButtonConf_, f, this),
        QuestionTitleConfiguration_ (x.QuestionTitleConfiguration_, f, this),
        QuestionButtonConf_ (x.QuestionButtonConf_, f, this),
        InfoTitleConfiguration_ (x.InfoTitleConfiguration_, f, this),
        InfoIDConfiguration_ (x.InfoIDConfiguration_, f, this),
        InfoTextConfiguration_ (x.InfoTextConfiguration_, f, this),
        InfoErrorConfiguration_ (x.InfoErrorConfiguration_, f, this),
        TimeOutInfoError_ (x.TimeOutInfoError_, f, this),
        AddCancelButtonConf_ (x.AddCancelButtonConf_, f, this),
        RegisterWidgetConfiguration_ (x.RegisterWidgetConfiguration_, f, this),
        CommentConfig_ (x.CommentConfig_, f, this)
      {
      }

      VotingForDisabledFunctionalityConfiguration::
      VotingForDisabledFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        AddButtonConf_ (f, this),
        QuestionTitleConfiguration_ (f, this),
        QuestionButtonConf_ (f, this),
        InfoTitleConfiguration_ (f, this),
        InfoIDConfiguration_ (f, this),
        InfoTextConfiguration_ (f, this),
        InfoErrorConfiguration_ (f, this),
        TimeOutInfoError_ (f, this),
        AddCancelButtonConf_ (f, this),
        RegisterWidgetConfiguration_ (f, this),
        CommentConfig_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VotingForDisabledFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // AddButtonConf
          //
          if (n.name () == "AddButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AddButtonConfType > r (
              AddButtonConfTraits::create (i, f, this));

            if (!AddButtonConf_.present ())
            {
              this->AddButtonConf_.set (r);
              continue;
            }
          }

          // QuestionTitleConfiguration
          //
          if (n.name () == "QuestionTitleConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< QuestionTitleConfigurationType > r (
              QuestionTitleConfigurationTraits::create (i, f, this));

            if (!QuestionTitleConfiguration_.present ())
            {
              this->QuestionTitleConfiguration_.set (r);
              continue;
            }
          }

          // QuestionButtonConf
          //
          if (n.name () == "QuestionButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< QuestionButtonConfType > r (
              QuestionButtonConfTraits::create (i, f, this));

            if (!QuestionButtonConf_.present ())
            {
              this->QuestionButtonConf_.set (r);
              continue;
            }
          }

          // InfoTitleConfiguration
          //
          if (n.name () == "InfoTitleConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoTitleConfigurationType > r (
              InfoTitleConfigurationTraits::create (i, f, this));

            if (!InfoTitleConfiguration_.present ())
            {
              this->InfoTitleConfiguration_.set (r);
              continue;
            }
          }

          // InfoIDConfiguration
          //
          if (n.name () == "InfoIDConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoIDConfigurationType > r (
              InfoIDConfigurationTraits::create (i, f, this));

            if (!InfoIDConfiguration_.present ())
            {
              this->InfoIDConfiguration_.set (r);
              continue;
            }
          }

          // InfoTextConfiguration
          //
          if (n.name () == "InfoTextConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoTextConfigurationType > r (
              InfoTextConfigurationTraits::create (i, f, this));

            if (!InfoTextConfiguration_.present ())
            {
              this->InfoTextConfiguration_.set (r);
              continue;
            }
          }

          // InfoErrorConfiguration
          //
          if (n.name () == "InfoErrorConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoErrorConfigurationType > r (
              InfoErrorConfigurationTraits::create (i, f, this));

            if (!InfoErrorConfiguration_.present ())
            {
              this->InfoErrorConfiguration_.set (r);
              continue;
            }
          }

          // TimeOutInfoError
          //
          if (n.name () == "TimeOutInfoError" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!TimeOutInfoError_.present ())
            {
              this->TimeOutInfoError_.set (TimeOutInfoErrorTraits::create (i, f, this));
              continue;
            }
          }

          // AddCancelButtonConf
          //
          if (n.name () == "AddCancelButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AddCancelButtonConfType > r (
              AddCancelButtonConfTraits::create (i, f, this));

            if (!AddCancelButtonConf_.present ())
            {
              this->AddCancelButtonConf_.set (r);
              continue;
            }
          }

          // RegisterWidgetConfiguration
          //
          if (n.name () == "RegisterWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RegisterWidgetConfigurationType > r (
              RegisterWidgetConfigurationTraits::create (i, f, this));

            if (!RegisterWidgetConfiguration_.present ())
            {
              this->RegisterWidgetConfiguration_.set (r);
              continue;
            }
          }

          // CommentConfig
          //
          if (n.name () == "CommentConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CommentConfigType > r (
              CommentConfigTraits::create (i, f, this));

            if (!CommentConfig_.present ())
            {
              this->CommentConfig_.set (r);
              continue;
            }
          }

          break;
        }

        if (!AddButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionTitleConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionTitleConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!QuestionButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QuestionButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoTitleConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoTitleConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoIDConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoIDConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoTextConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoTextConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoErrorConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoErrorConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!TimeOutInfoError_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeOutInfoError",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AddCancelButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddCancelButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RegisterWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CommentConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CommentConfig",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      VotingForDisabledFunctionalityConfiguration* VotingForDisabledFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class VotingForDisabledFunctionalityConfiguration (*this, f, c);
      }

      VotingForDisabledFunctionalityConfiguration::
      ~VotingForDisabledFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const VotingForDisabledFunctionalityConfiguration& x, const VotingForDisabledFunctionalityConfiguration& y)
      {
        if (!(x.getAddButtonConf () == y.getAddButtonConf ()))
          return false;

        if (!(x.getQuestionTitleConfiguration () == y.getQuestionTitleConfiguration ()))
          return false;

        if (!(x.getQuestionButtonConf () == y.getQuestionButtonConf ()))
          return false;

        if (!(x.getInfoTitleConfiguration () == y.getInfoTitleConfiguration ()))
          return false;

        if (!(x.getInfoIDConfiguration () == y.getInfoIDConfiguration ()))
          return false;

        if (!(x.getInfoTextConfiguration () == y.getInfoTextConfiguration ()))
          return false;

        if (!(x.getInfoErrorConfiguration () == y.getInfoErrorConfiguration ()))
          return false;

        if (!(x.getTimeOutInfoError () == y.getTimeOutInfoError ()))
          return false;

        if (!(x.getAddCancelButtonConf () == y.getAddCancelButtonConf ()))
          return false;

        if (!(x.getRegisterWidgetConfiguration () == y.getRegisterWidgetConfiguration ()))
          return false;

        if (!(x.getCommentConfig () == y.getCommentConfig ()))
          return false;

        return true;
      }

      bool
      operator!= (const VotingForDisabledFunctionalityConfiguration& x, const VotingForDisabledFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // PoliceNoteRegisterFunctionalityConfiguration
      //

      PoliceNoteRegisterFunctionalityConfiguration::
      PoliceNoteRegisterFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PoliceNoteRegisterFunctionalityConfiguration::
      PoliceNoteRegisterFunctionalityConfiguration (const AddButtonConfType& AddButtonConf,
                                                    const AddCancelButtonConfType& AddCancelButtonConf,
                                                    const RegisterWidgetConfigurationType& RegisterWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (AddButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (AddCancelButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PoliceNoteRegisterFunctionalityConfiguration::
      PoliceNoteRegisterFunctionalityConfiguration (::std::auto_ptr< AddButtonConfType >& AddButtonConf,
                                                    ::std::auto_ptr< AddCancelButtonConfType >& AddCancelButtonConf,
                                                    ::std::auto_ptr< RegisterWidgetConfigurationType >& RegisterWidgetConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        AddButtonConf_ (AddButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AddCancelButtonConf_ (AddCancelButtonConf, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RegisterWidgetConfiguration_ (RegisterWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PoliceNoteRegisterFunctionalityConfiguration::
      PoliceNoteRegisterFunctionalityConfiguration (const PoliceNoteRegisterFunctionalityConfiguration& x,
                                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        AddButtonConf_ (x.AddButtonConf_, f, this),
        AddCancelButtonConf_ (x.AddCancelButtonConf_, f, this),
        RegisterWidgetConfiguration_ (x.RegisterWidgetConfiguration_, f, this)
      {
      }

      PoliceNoteRegisterFunctionalityConfiguration::
      PoliceNoteRegisterFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        AddButtonConf_ (f, this),
        AddCancelButtonConf_ (f, this),
        RegisterWidgetConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PoliceNoteRegisterFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // AddButtonConf
          //
          if (n.name () == "AddButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AddButtonConfType > r (
              AddButtonConfTraits::create (i, f, this));

            if (!AddButtonConf_.present ())
            {
              this->AddButtonConf_.set (r);
              continue;
            }
          }

          // AddCancelButtonConf
          //
          if (n.name () == "AddCancelButtonConf" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< AddCancelButtonConfType > r (
              AddCancelButtonConfTraits::create (i, f, this));

            if (!AddCancelButtonConf_.present ())
            {
              this->AddCancelButtonConf_.set (r);
              continue;
            }
          }

          // RegisterWidgetConfiguration
          //
          if (n.name () == "RegisterWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RegisterWidgetConfigurationType > r (
              RegisterWidgetConfigurationTraits::create (i, f, this));

            if (!RegisterWidgetConfiguration_.present ())
            {
              this->RegisterWidgetConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!AddButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!AddCancelButtonConf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddCancelButtonConf",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RegisterWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PoliceNoteRegisterFunctionalityConfiguration* PoliceNoteRegisterFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PoliceNoteRegisterFunctionalityConfiguration (*this, f, c);
      }

      PoliceNoteRegisterFunctionalityConfiguration::
      ~PoliceNoteRegisterFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const PoliceNoteRegisterFunctionalityConfiguration& x, const PoliceNoteRegisterFunctionalityConfiguration& y)
      {
        if (!(x.getAddButtonConf () == y.getAddButtonConf ()))
          return false;

        if (!(x.getAddCancelButtonConf () == y.getAddCancelButtonConf ()))
          return false;

        if (!(x.getRegisterWidgetConfiguration () == y.getRegisterWidgetConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const PoliceNoteRegisterFunctionalityConfiguration& x, const PoliceNoteRegisterFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // DataUtilsValidatorFunctionalityConfiguration
      //

      DataUtilsValidatorFunctionalityConfiguration::
      DataUtilsValidatorFunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        KeyFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Separator_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PositionCode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PositionPassword_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Columns_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Width_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Height_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DataUtilsValidatorFunctionalityConfiguration::
      DataUtilsValidatorFunctionalityConfiguration (const KeyFileType& KeyFile,
                                                    const SeparatorType& Separator,
                                                    const PositionCodeType& PositionCode,
                                                    const PositionPasswordType& PositionPassword,
                                                    const ColumnsType& Columns,
                                                    const WidthType& Width,
                                                    const HeightType& Height)
      : ::Smartmatic::ConfigurationTypes::Type (),
        KeyFile_ (KeyFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Separator_ (Separator, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PositionCode_ (PositionCode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PositionPassword_ (PositionPassword, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Columns_ (Columns, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Width_ (Width, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Height_ (Height, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DataUtilsValidatorFunctionalityConfiguration::
      DataUtilsValidatorFunctionalityConfiguration (const DataUtilsValidatorFunctionalityConfiguration& x,
                                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        KeyFile_ (x.KeyFile_, f, this),
        Separator_ (x.Separator_, f, this),
        PositionCode_ (x.PositionCode_, f, this),
        PositionPassword_ (x.PositionPassword_, f, this),
        Columns_ (x.Columns_, f, this),
        Width_ (x.Width_, f, this),
        Height_ (x.Height_, f, this)
      {
      }

      DataUtilsValidatorFunctionalityConfiguration::
      DataUtilsValidatorFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        KeyFile_ (f, this),
        Separator_ (f, this),
        PositionCode_ (f, this),
        PositionPassword_ (f, this),
        Columns_ (f, this),
        Width_ (f, this),
        Height_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void DataUtilsValidatorFunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // KeyFile
          //
          if (n.name () == "KeyFile" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< KeyFileType > r (
              KeyFileTraits::create (i, f, this));

            if (!KeyFile_.present ())
            {
              this->KeyFile_.set (r);
              continue;
            }
          }

          // Separator
          //
          if (n.name () == "Separator" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< SeparatorType > r (
              SeparatorTraits::create (i, f, this));

            if (!Separator_.present ())
            {
              this->Separator_.set (r);
              continue;
            }
          }

          // PositionCode
          //
          if (n.name () == "PositionCode" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PositionCode_.present ())
            {
              this->PositionCode_.set (PositionCodeTraits::create (i, f, this));
              continue;
            }
          }

          // PositionPassword
          //
          if (n.name () == "PositionPassword" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!PositionPassword_.present ())
            {
              this->PositionPassword_.set (PositionPasswordTraits::create (i, f, this));
              continue;
            }
          }

          // Columns
          //
          if (n.name () == "Columns" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Columns_.present ())
            {
              this->Columns_.set (ColumnsTraits::create (i, f, this));
              continue;
            }
          }

          // Width
          //
          if (n.name () == "Width" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Width_.present ())
            {
              this->Width_.set (WidthTraits::create (i, f, this));
              continue;
            }
          }

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!Height_.present ())
            {
              this->Height_.set (HeightTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!KeyFile_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "KeyFile",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Separator_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Separator",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PositionCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PositionCode",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PositionPassword_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PositionPassword",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Columns_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Columns",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Width_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Width",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!Height_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Height",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      DataUtilsValidatorFunctionalityConfiguration* DataUtilsValidatorFunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DataUtilsValidatorFunctionalityConfiguration (*this, f, c);
      }

      DataUtilsValidatorFunctionalityConfiguration::
      ~DataUtilsValidatorFunctionalityConfiguration ()
      {
      }

      bool
      operator== (const DataUtilsValidatorFunctionalityConfiguration& x, const DataUtilsValidatorFunctionalityConfiguration& y)
      {
        if (!(x.getKeyFile () == y.getKeyFile ()))
          return false;

        if (!(x.getSeparator () == y.getSeparator ()))
          return false;

        if (!(x.getPositionCode () == y.getPositionCode ()))
          return false;

        if (!(x.getPositionPassword () == y.getPositionPassword ()))
          return false;

        if (!(x.getColumns () == y.getColumns ()))
          return false;

        if (!(x.getWidth () == y.getWidth ()))
          return false;

        if (!(x.getHeight () == y.getHeight ()))
          return false;

        return true;
      }

      bool
      operator!= (const DataUtilsValidatorFunctionalityConfiguration& x, const DataUtilsValidatorFunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // ThemesConfiguration
      //

      ThemesConfiguration::
      ThemesConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        OfficialThemeConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        DemoThemeConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        RecoveryThemeConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ThemesConfiguration::
      ThemesConfiguration (const OfficialThemeConfigurationType& OfficialThemeConfiguration,
                           const DemoThemeConfigurationType& DemoThemeConfiguration,
                           const RecoveryThemeConfigurationType& RecoveryThemeConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        OfficialThemeConfiguration_ (OfficialThemeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DemoThemeConfiguration_ (DemoThemeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RecoveryThemeConfiguration_ (RecoveryThemeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ThemesConfiguration::
      ThemesConfiguration (::std::auto_ptr< OfficialThemeConfigurationType >& OfficialThemeConfiguration,
                           ::std::auto_ptr< DemoThemeConfigurationType >& DemoThemeConfiguration,
                           ::std::auto_ptr< RecoveryThemeConfigurationType >& RecoveryThemeConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        OfficialThemeConfiguration_ (OfficialThemeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        DemoThemeConfiguration_ (DemoThemeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        RecoveryThemeConfiguration_ (RecoveryThemeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ThemesConfiguration::
      ThemesConfiguration (const ThemesConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        OfficialThemeConfiguration_ (x.OfficialThemeConfiguration_, f, this),
        DemoThemeConfiguration_ (x.DemoThemeConfiguration_, f, this),
        RecoveryThemeConfiguration_ (x.RecoveryThemeConfiguration_, f, this)
      {
      }

      ThemesConfiguration::
      ThemesConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        OfficialThemeConfiguration_ (f, this),
        DemoThemeConfiguration_ (f, this),
        RecoveryThemeConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ThemesConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // OfficialThemeConfiguration
          //
          if (n.name () == "OfficialThemeConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OfficialThemeConfigurationType > r (
              OfficialThemeConfigurationTraits::create (i, f, this));

            if (!OfficialThemeConfiguration_.present ())
            {
              this->OfficialThemeConfiguration_.set (r);
              continue;
            }
          }

          // DemoThemeConfiguration
          //
          if (n.name () == "DemoThemeConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< DemoThemeConfigurationType > r (
              DemoThemeConfigurationTraits::create (i, f, this));

            if (!DemoThemeConfiguration_.present ())
            {
              this->DemoThemeConfiguration_.set (r);
              continue;
            }
          }

          // RecoveryThemeConfiguration
          //
          if (n.name () == "RecoveryThemeConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< RecoveryThemeConfigurationType > r (
              RecoveryThemeConfigurationTraits::create (i, f, this));

            if (!RecoveryThemeConfiguration_.present ())
            {
              this->RecoveryThemeConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!OfficialThemeConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "OfficialThemeConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!DemoThemeConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DemoThemeConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!RecoveryThemeConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RecoveryThemeConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ThemesConfiguration* ThemesConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ThemesConfiguration (*this, f, c);
      }

      ThemesConfiguration::
      ~ThemesConfiguration ()
      {
      }

      bool
      operator== (const ThemesConfiguration& x, const ThemesConfiguration& y)
      {
        if (!(x.getOfficialThemeConfiguration () == y.getOfficialThemeConfiguration ()))
          return false;

        if (!(x.getDemoThemeConfiguration () == y.getDemoThemeConfiguration ()))
          return false;

        if (!(x.getRecoveryThemeConfiguration () == y.getRecoveryThemeConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const ThemesConfiguration& x, const ThemesConfiguration& y)
      {
        return !(x == y);
      }

      // MenuOptions
      //

      MenuOptions::
      MenuOptions ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Option_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      MenuOptions::
      MenuOptions (const MenuOptions& x,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Option_ (x.Option_, f, this)
      {
      }

      MenuOptions::
      MenuOptions (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Option_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MenuOptions::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Option
          //
          if (n.name () == "Option" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< OptionType > r (
              OptionTraits::create (i, f, this));

            this->Option_.push_back (r);
            continue;
          }

          break;
        }
      }

      MenuOptions* MenuOptions::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class MenuOptions (*this, f, c);
      }

      MenuOptions::
      ~MenuOptions ()
      {
      }

      bool
      operator== (const MenuOptions& x, const MenuOptions& y)
      {
        if (!(x.getOption () == y.getOption ()))
          return false;

        return true;
      }

      bool
      operator!= (const MenuOptions& x, const MenuOptions& y)
      {
        return !(x == y);
      }

      // CheckSumFailOption
      //

      CheckSumFailOption::
      CheckSumFailOption (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_CheckSumFailOption_convert ();
      }

      CheckSumFailOption::
      CheckSumFailOption (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_CheckSumFailOption_convert ();
      }

      CheckSumFailOption::
      CheckSumFailOption (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::ConfigurationTypes::Flags f,
                          ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_CheckSumFailOption_convert ();
      }

      CheckSumFailOption* CheckSumFailOption::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class CheckSumFailOption (*this, f, c);
      }

      CheckSumFailOption::Value CheckSumFailOption::
      _xsd_CheckSumFailOption_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CheckSumFailOption_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_CheckSumFailOption_indexes_,
                          _xsd_CheckSumFailOption_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_CheckSumFailOption_indexes_ + 3 || _xsd_CheckSumFailOption_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const CheckSumFailOption::
      _xsd_CheckSumFailOption_literals_[3] =
      {
        "CleanSelections",
        "MaintainSelections",
        "CloseVotingExperience"
      };

      const CheckSumFailOption::Value CheckSumFailOption::
      _xsd_CheckSumFailOption_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::CheckSumFailOption::CONFIGURATION_CLEANSELECTIONS,
        ::Smartmatic::SAES::Configuration::CheckSumFailOption::CONFIGURATION_CLOSEVOTINGEXPERIENCE,
        ::Smartmatic::SAES::Configuration::CheckSumFailOption::CONFIGURATION_MAINTAINSELECTIONS
      };

      // LoadingBallotMessage
      //

      LoadingBallotMessage::
      LoadingBallotMessage (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_LoadingBallotMessage_convert ();
      }

      LoadingBallotMessage::
      LoadingBallotMessage (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_LoadingBallotMessage_convert ();
      }

      LoadingBallotMessage::
      LoadingBallotMessage (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_LoadingBallotMessage_convert ();
      }

      LoadingBallotMessage* LoadingBallotMessage::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class LoadingBallotMessage (*this, f, c);
      }

      LoadingBallotMessage::Value LoadingBallotMessage::
      _xsd_LoadingBallotMessage_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LoadingBallotMessage_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_LoadingBallotMessage_indexes_,
                          _xsd_LoadingBallotMessage_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_LoadingBallotMessage_indexes_ + 3 || _xsd_LoadingBallotMessage_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const LoadingBallotMessage::
      _xsd_LoadingBallotMessage_literals_[3] =
      {
        "Never",
        "Always",
        "Selective"
      };

      const LoadingBallotMessage::Value LoadingBallotMessage::
      _xsd_LoadingBallotMessage_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::LoadingBallotMessage::CONFIGURATION_ALWAYS,
        ::Smartmatic::SAES::Configuration::LoadingBallotMessage::CONFIGURATION_NEVER,
        ::Smartmatic::SAES::Configuration::LoadingBallotMessage::CONFIGURATION_SELECTIVE
      };

      // Label_Alignment
      //

      Label_Alignment::
      Label_Alignment (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_Label_Alignment_convert ();
      }

      Label_Alignment::
      Label_Alignment (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_Label_Alignment_convert ();
      }

      Label_Alignment::
      Label_Alignment (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_Label_Alignment_convert ();
      }

      Label_Alignment* Label_Alignment::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class Label_Alignment (*this, f, c);
      }

      Label_Alignment::Value Label_Alignment::
      _xsd_Label_Alignment_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Label_Alignment_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_Label_Alignment_indexes_,
                          _xsd_Label_Alignment_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_Label_Alignment_indexes_ + 3 || _xsd_Label_Alignment_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const Label_Alignment::
      _xsd_Label_Alignment_literals_[3] =
      {
        "Left",
        "Center",
        "Right"
      };

      const Label_Alignment::Value Label_Alignment::
      _xsd_Label_Alignment_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::Label_Alignment::CONFIGURATION_CENTER,
        ::Smartmatic::SAES::Configuration::Label_Alignment::CONFIGURATION_LEFT,
        ::Smartmatic::SAES::Configuration::Label_Alignment::CONFIGURATION_RIGHT
      };

      // Label_Style
      //

      Label_Style::
      Label_Style (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_Label_Style_convert ();
      }

      Label_Style::
      Label_Style (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_Label_Style_convert ();
      }

      Label_Style::
      Label_Style (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_Label_Style_convert ();
      }

      Label_Style* Label_Style::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class Label_Style (*this, f, c);
      }

      Label_Style::Value Label_Style::
      _xsd_Label_Style_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Label_Style_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_Label_Style_indexes_,
                          _xsd_Label_Style_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_Label_Style_indexes_ + 3 || _xsd_Label_Style_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const Label_Style::
      _xsd_Label_Style_literals_[3] =
      {
        "Normal",
        "Oblique",
        "Italic"
      };

      const Label_Style::Value Label_Style::
      _xsd_Label_Style_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::Label_Style::CONFIGURATION_ITALIC,
        ::Smartmatic::SAES::Configuration::Label_Style::CONFIGURATION_NORMAL,
        ::Smartmatic::SAES::Configuration::Label_Style::CONFIGURATION_OBLIQUE
      };

      // Label_Weight
      //

      Label_Weight::
      Label_Weight (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_Label_Weight_convert ();
      }

      Label_Weight::
      Label_Weight (const ::xercesc::DOMAttr& a,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_Label_Weight_convert ();
      }

      Label_Weight::
      Label_Weight (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_Label_Weight_convert ();
      }

      Label_Weight* Label_Weight::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class Label_Weight (*this, f, c);
      }

      Label_Weight::Value Label_Weight::
      _xsd_Label_Weight_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Label_Weight_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_Label_Weight_indexes_,
                          _xsd_Label_Weight_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_Label_Weight_indexes_ + 3 || _xsd_Label_Weight_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const Label_Weight::
      _xsd_Label_Weight_literals_[3] =
      {
        "Light",
        "Normal",
        "Bold"
      };

      const Label_Weight::Value Label_Weight::
      _xsd_Label_Weight_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::Label_Weight::CONFIGURATION_BOLD,
        ::Smartmatic::SAES::Configuration::Label_Weight::CONFIGURATION_LIGHT,
        ::Smartmatic::SAES::Configuration::Label_Weight::CONFIGURATION_NORMAL
      };

      // PMWidgetConfiguration1
      //

      PMWidgetConfiguration1::
      PMWidgetConfiguration1 ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberOfDivision_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxCharacters_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowImages_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PMWidgetConfiguration1::
      PMWidgetConfiguration1 (const NumberOfDivisionType& NumberOfDivision,
                              const MaxCharactersType& MaxCharacters,
                              const EntryWidthType& EntryWidth,
                              const ShowImagesType& ShowImages)
      : ::Smartmatic::ConfigurationTypes::Type (),
        NumberOfDivision_ (NumberOfDivision, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MaxCharacters_ (MaxCharacters, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryWidth_ (EntryWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowImages_ (ShowImages, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      PMWidgetConfiguration1::
      PMWidgetConfiguration1 (const PMWidgetConfiguration1& x,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        NumberOfDivision_ (x.NumberOfDivision_, f, this),
        MaxCharacters_ (x.MaxCharacters_, f, this),
        EntryWidth_ (x.EntryWidth_, f, this),
        ShowImages_ (x.ShowImages_, f, this)
      {
      }

      PMWidgetConfiguration1::
      PMWidgetConfiguration1 (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        NumberOfDivision_ (f, this),
        MaxCharacters_ (f, this),
        EntryWidth_ (f, this),
        ShowImages_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void PMWidgetConfiguration1::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // NumberOfDivision
          //
          if (n.name () == "NumberOfDivision" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!NumberOfDivision_.present ())
            {
              this->NumberOfDivision_.set (NumberOfDivisionTraits::create (i, f, this));
              continue;
            }
          }

          // MaxCharacters
          //
          if (n.name () == "MaxCharacters" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!MaxCharacters_.present ())
            {
              this->MaxCharacters_.set (MaxCharactersTraits::create (i, f, this));
              continue;
            }
          }

          // EntryWidth
          //
          if (n.name () == "EntryWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!EntryWidth_.present ())
            {
              this->EntryWidth_.set (EntryWidthTraits::create (i, f, this));
              continue;
            }
          }

          // ShowImages
          //
          if (n.name () == "ShowImages" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowImages_.present ())
            {
              this->ShowImages_.set (ShowImagesTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!NumberOfDivision_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumberOfDivision",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!MaxCharacters_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxCharacters",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EntryWidth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EntryWidth",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowImages_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowImages",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      PMWidgetConfiguration1* PMWidgetConfiguration1::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class PMWidgetConfiguration1 (*this, f, c);
      }

      PMWidgetConfiguration1::
      ~PMWidgetConfiguration1 ()
      {
      }

      bool
      operator== (const PMWidgetConfiguration1& x, const PMWidgetConfiguration1& y)
      {
        if (!(x.getNumberOfDivision () == y.getNumberOfDivision ()))
          return false;

        if (!(x.getMaxCharacters () == y.getMaxCharacters ()))
          return false;

        if (!(x.getEntryWidth () == y.getEntryWidth ()))
          return false;

        if (!(x.getShowImages () == y.getShowImages ()))
          return false;

        return true;
      }

      bool
      operator!= (const PMWidgetConfiguration1& x, const PMWidgetConfiguration1& y)
      {
        return !(x == y);
      }

      // FunctionalityConfiguration
      //

      FunctionalityConfiguration::
      FunctionalityConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        FunctionalityDescriptor_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalityExitToAuthentication_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ChallengeIsEnable_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ChallengePasswordSource_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ElectionBlockStatus_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Help_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NecessaryDevicesConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowExitMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockMemoryBehavior_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalityConfiguration::
      FunctionalityConfiguration (const FunctionalityDescriptorType& FunctionalityDescriptor,
                                  const FunctionalityExitToAuthenticationType& FunctionalityExitToAuthentication,
                                  const ChallengeIsEnableType& ChallengeIsEnable,
                                  const ChallengePasswordSourceType& ChallengePasswordSource,
                                  const ShowExitMessageType& ShowExitMessage)
      : ::Smartmatic::ConfigurationTypes::Type (),
        FunctionalityDescriptor_ (FunctionalityDescriptor, ::Smartmatic::ConfigurationTypes::Flags (), this),
        FunctionalityExitToAuthentication_ (FunctionalityExitToAuthentication, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ChallengeIsEnable_ (ChallengeIsEnable, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ChallengePasswordSource_ (ChallengePasswordSource, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ElectionBlockStatus_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Help_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        NecessaryDevicesConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ShowExitMessage_ (ShowExitMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BlockMemoryBehavior_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      FunctionalityConfiguration::
      FunctionalityConfiguration (const FunctionalityConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        FunctionalityDescriptor_ (x.FunctionalityDescriptor_, f, this),
        FunctionalityExitToAuthentication_ (x.FunctionalityExitToAuthentication_, f, this),
        ChallengeIsEnable_ (x.ChallengeIsEnable_, f, this),
        ChallengePasswordSource_ (x.ChallengePasswordSource_, f, this),
        ElectionBlockStatus_ (x.ElectionBlockStatus_, f, this),
        Help_ (x.Help_, f, this),
        NecessaryDevicesConfiguration_ (x.NecessaryDevicesConfiguration_, f, this),
        ShowExitMessage_ (x.ShowExitMessage_, f, this),
        BlockMemoryBehavior_ (x.BlockMemoryBehavior_, f, this)
      {
      }

      FunctionalityConfiguration::
      FunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        FunctionalityDescriptor_ (f, this),
        FunctionalityExitToAuthentication_ (f, this),
        ChallengeIsEnable_ (f, this),
        ChallengePasswordSource_ (f, this),
        ElectionBlockStatus_ (f, this),
        Help_ (f, this),
        NecessaryDevicesConfiguration_ (f, this),
        ShowExitMessage_ (f, this),
        BlockMemoryBehavior_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void FunctionalityConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FunctionalityDescriptor
          //
          if (n.name () == "FunctionalityDescriptor" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< FunctionalityDescriptorType > r (
              FunctionalityDescriptorTraits::create (i, f, this));

            if (!FunctionalityDescriptor_.present ())
            {
              this->FunctionalityDescriptor_.set (r);
              continue;
            }
          }

          // FunctionalityExitToAuthentication
          //
          if (n.name () == "FunctionalityExitToAuthentication" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!FunctionalityExitToAuthentication_.present ())
            {
              this->FunctionalityExitToAuthentication_.set (FunctionalityExitToAuthenticationTraits::create (i, f, this));
              continue;
            }
          }

          // ChallengeIsEnable
          //
          if (n.name () == "ChallengeIsEnable" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ChallengeIsEnable_.present ())
            {
              this->ChallengeIsEnable_.set (ChallengeIsEnableTraits::create (i, f, this));
              continue;
            }
          }

          // ChallengePasswordSource
          //
          if (n.name () == "ChallengePasswordSource" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ChallengePasswordSourceType > r (
              ChallengePasswordSourceTraits::create (i, f, this));

            if (!ChallengePasswordSource_.present ())
            {
              this->ChallengePasswordSource_.set (r);
              continue;
            }
          }

          // ElectionBlockStatus
          //
          if (n.name () == "ElectionBlockStatus" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ElectionBlockStatusType > r (
              ElectionBlockStatusTraits::create (i, f, this));

            if (!this->ElectionBlockStatus_)
            {
              this->ElectionBlockStatus_.set (r);
              continue;
            }
          }

          // Help
          //
          if (n.name () == "Help" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< HelpType > r (
              HelpTraits::create (i, f, this));

            if (!this->Help_)
            {
              this->Help_.set (r);
              continue;
            }
          }

          // NecessaryDevicesConfiguration
          //
          if (n.name () == "NecessaryDevicesConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< NecessaryDevicesConfigurationType > r (
              NecessaryDevicesConfigurationTraits::create (i, f, this));

            if (!this->NecessaryDevicesConfiguration_)
            {
              this->NecessaryDevicesConfiguration_.set (r);
              continue;
            }
          }

          // ShowExitMessage
          //
          if (n.name () == "ShowExitMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            if (!ShowExitMessage_.present ())
            {
              this->ShowExitMessage_.set (ShowExitMessageTraits::create (i, f, this));
              continue;
            }
          }

          // BlockMemoryBehavior
          //
          if (n.name () == "BlockMemoryBehavior" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< BlockMemoryBehaviorType > r (
              BlockMemoryBehaviorTraits::create (i, f, this));

            if (!this->BlockMemoryBehavior_)
            {
              this->BlockMemoryBehavior_.set (r);
              continue;
            }
          }

          break;
        }

        if (!FunctionalityDescriptor_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FunctionalityDescriptor",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!FunctionalityExitToAuthentication_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FunctionalityExitToAuthentication",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ChallengeIsEnable_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ChallengeIsEnable",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ChallengePasswordSource_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ChallengePasswordSource",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ShowExitMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowExitMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      FunctionalityConfiguration* FunctionalityConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class FunctionalityConfiguration (*this, f, c);
      }

      FunctionalityConfiguration::
      ~FunctionalityConfiguration ()
      {
      }

      bool
      operator== (const FunctionalityConfiguration& x, const FunctionalityConfiguration& y)
      {
        if (!(x.getFunctionalityDescriptor () == y.getFunctionalityDescriptor ()))
          return false;

        if (!(x.getFunctionalityExitToAuthentication () == y.getFunctionalityExitToAuthentication ()))
          return false;

        if (!(x.getChallengeIsEnable () == y.getChallengeIsEnable ()))
          return false;

        if (!(x.getChallengePasswordSource () == y.getChallengePasswordSource ()))
          return false;

        if (!(x.getElectionBlockStatus () == y.getElectionBlockStatus ()))
          return false;

        if (!(x.getHelp () == y.getHelp ()))
          return false;

        if (!(x.getNecessaryDevicesConfiguration () == y.getNecessaryDevicesConfiguration ()))
          return false;

        if (!(x.getShowExitMessage () == y.getShowExitMessage ()))
          return false;

        if (!(x.getBlockMemoryBehavior () == y.getBlockMemoryBehavior ()))
          return false;

        return true;
      }

      bool
      operator!= (const FunctionalityConfiguration& x, const FunctionalityConfiguration& y)
      {
        return !(x == y);
      }

      // LanguageButton
      //

      LanguageButton::
      LanguageButton ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        LanguageCode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageImageFile_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      LanguageButton::
      LanguageButton (const LanguageCodeType& LanguageCode,
                      const LanguageImageFileType& LanguageImageFile)
      : ::Smartmatic::ConfigurationTypes::Type (),
        LanguageCode_ (LanguageCode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        LanguageImageFile_ (LanguageImageFile, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      LanguageButton::
      LanguageButton (const LanguageButton& x,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        LanguageCode_ (x.LanguageCode_, f, this),
        LanguageImageFile_ (x.LanguageImageFile_, f, this)
      {
      }

      LanguageButton::
      LanguageButton (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        LanguageCode_ (f, this),
        LanguageImageFile_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LanguageButton::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LanguageCode
          //
          if (n.name () == "LanguageCode" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LanguageCodeType > r (
              LanguageCodeTraits::create (i, f, this));

            if (!LanguageCode_.present ())
            {
              this->LanguageCode_.set (r);
              continue;
            }
          }

          // LanguageImageFile
          //
          if (n.name () == "LanguageImageFile" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< LanguageImageFileType > r (
              LanguageImageFileTraits::create (i, f, this));

            if (!LanguageImageFile_.present ())
            {
              this->LanguageImageFile_.set (r);
              continue;
            }
          }

          break;
        }

        if (!LanguageCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LanguageCode",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!LanguageImageFile_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LanguageImageFile",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      LanguageButton* LanguageButton::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class LanguageButton (*this, f, c);
      }

      LanguageButton::
      ~LanguageButton ()
      {
      }

      bool
      operator== (const LanguageButton& x, const LanguageButton& y)
      {
        if (!(x.getLanguageCode () == y.getLanguageCode ()))
          return false;

        if (!(x.getLanguageImageFile () == y.getLanguageImageFile ()))
          return false;

        return true;
      }

      bool
      operator!= (const LanguageButton& x, const LanguageButton& y)
      {
        return !(x == y);
      }

      // OfficialThemeConfiguration
      //

      OfficialThemeConfiguration::
      OfficialThemeConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        VotingWindowButton_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindow_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceBallotOptionEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorMessageEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorValuesEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityCenterFrame_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepBarcode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepBarcodeTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepCardTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteDemoFunctionalityMessage_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInLabelLabel_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInLabelEvent_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceSelectBallotOptionWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ChangeLanguageMessageWigdetEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttributeComboSelectionsWidgetTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttributeCounterWidgetTitle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxChooseWidgetFrame_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyWidget_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyWidgetEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxImageStepInstallationWizard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepInstallationWizard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ParentKeypadEventbox_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoFrame_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      OfficialThemeConfiguration::
      OfficialThemeConfiguration (const VotingWindowButtonType& VotingWindowButton,
                                  const VotingExperiencePartyEventboxType& VotingExperiencePartyEventbox,
                                  const VotingExperienceWindowType& VotingExperienceWindow,
                                  const VotingExperienceBallotOptionEventboxType& VotingExperienceBallotOptionEventbox,
                                  const CardActivatorFunctionalityMessageType& CardActivatorFunctionalityMessage,
                                  const CardActivatorMessageEventboxType& CardActivatorMessageEventbox,
                                  const CardActivatorFunctionalityEventboxType& CardActivatorFunctionalityEventbox,
                                  const CardActivatorValuesEventboxType& CardActivatorValuesEventbox,
                                  const CardActivatorFunctionalityCenterFrameType& CardActivatorFunctionalityCenterFrame,
                                  const EventboxStepBarcodeType& EventboxStepBarcode,
                                  const EventboxStepBarcodeTitleType& EventboxStepBarcodeTitle,
                                  const EventboxStepCardTitleType& EventboxStepCardTitle,
                                  const VoteDemoFunctionalityMessageType& VoteDemoFunctionalityMessage,
                                  const StandInLabelLabelType& StandInLabelLabel,
                                  const StandInLabelEventType& StandInLabelEvent,
                                  const VotingExperienceSelectBallotOptionWidgetType& VotingExperienceSelectBallotOptionWidget,
                                  const ChangeLanguageMessageWigdetEventboxType& ChangeLanguageMessageWigdetEventbox,
                                  const CustomAttributeComboSelectionsWidgetTitleType& CustomAttributeComboSelectionsWidgetTitle,
                                  const CustomAttributeCounterWidgetTitleType& CustomAttributeCounterWidgetTitle,
                                  const EventboxChooseWidgetFrameType& EventboxChooseWidgetFrame,
                                  const VotingExperiencePartyWidgetType& VotingExperiencePartyWidget,
                                  const PartyWidgetEventboxType& PartyWidgetEventbox,
                                  const EventboxImageStepInstallationWizardType& EventboxImageStepInstallationWizard,
                                  const EventboxStepInstallationWizardType& EventboxStepInstallationWizard,
                                  const ParentKeypadEventboxType& ParentKeypadEventbox,
                                  const InfoFrameType& InfoFrame)
      : ::Smartmatic::ConfigurationTypes::Type (),
        VotingWindowButton_ (VotingWindowButton, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyEventbox_ (VotingExperiencePartyEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindow_ (VotingExperienceWindow, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceBallotOptionEventbox_ (VotingExperienceBallotOptionEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityMessage_ (CardActivatorFunctionalityMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorMessageEventbox_ (CardActivatorMessageEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityEventbox_ (CardActivatorFunctionalityEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorValuesEventbox_ (CardActivatorValuesEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CardActivatorFunctionalityCenterFrame_ (CardActivatorFunctionalityCenterFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepBarcode_ (EventboxStepBarcode, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepBarcodeTitle_ (EventboxStepBarcodeTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepCardTitle_ (EventboxStepCardTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VoteDemoFunctionalityMessage_ (VoteDemoFunctionalityMessage, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInLabelLabel_ (StandInLabelLabel, ::Smartmatic::ConfigurationTypes::Flags (), this),
        StandInLabelEvent_ (StandInLabelEvent, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceSelectBallotOptionWidget_ (VotingExperienceSelectBallotOptionWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ChangeLanguageMessageWigdetEventbox_ (ChangeLanguageMessageWigdetEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttributeComboSelectionsWidgetTitle_ (CustomAttributeComboSelectionsWidgetTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        CustomAttributeCounterWidgetTitle_ (CustomAttributeCounterWidgetTitle, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxChooseWidgetFrame_ (EventboxChooseWidgetFrame, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyWidget_ (VotingExperiencePartyWidget, ::Smartmatic::ConfigurationTypes::Flags (), this),
        PartyWidgetEventbox_ (PartyWidgetEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxImageStepInstallationWizard_ (EventboxImageStepInstallationWizard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventboxStepInstallationWizard_ (EventboxStepInstallationWizard, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ParentKeypadEventbox_ (ParentKeypadEventbox, ::Smartmatic::ConfigurationTypes::Flags (), this),
        InfoFrame_ (InfoFrame, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      OfficialThemeConfiguration::
      OfficialThemeConfiguration (const OfficialThemeConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        VotingWindowButton_ (x.VotingWindowButton_, f, this),
        VotingExperiencePartyEventbox_ (x.VotingExperiencePartyEventbox_, f, this),
        VotingExperienceWindow_ (x.VotingExperienceWindow_, f, this),
        VotingExperienceBallotOptionEventbox_ (x.VotingExperienceBallotOptionEventbox_, f, this),
        CardActivatorFunctionalityMessage_ (x.CardActivatorFunctionalityMessage_, f, this),
        CardActivatorMessageEventbox_ (x.CardActivatorMessageEventbox_, f, this),
        CardActivatorFunctionalityEventbox_ (x.CardActivatorFunctionalityEventbox_, f, this),
        CardActivatorValuesEventbox_ (x.CardActivatorValuesEventbox_, f, this),
        CardActivatorFunctionalityCenterFrame_ (x.CardActivatorFunctionalityCenterFrame_, f, this),
        EventboxStepBarcode_ (x.EventboxStepBarcode_, f, this),
        EventboxStepBarcodeTitle_ (x.EventboxStepBarcodeTitle_, f, this),
        EventboxStepCardTitle_ (x.EventboxStepCardTitle_, f, this),
        VoteDemoFunctionalityMessage_ (x.VoteDemoFunctionalityMessage_, f, this),
        StandInLabelLabel_ (x.StandInLabelLabel_, f, this),
        StandInLabelEvent_ (x.StandInLabelEvent_, f, this),
        VotingExperienceSelectBallotOptionWidget_ (x.VotingExperienceSelectBallotOptionWidget_, f, this),
        ChangeLanguageMessageWigdetEventbox_ (x.ChangeLanguageMessageWigdetEventbox_, f, this),
        CustomAttributeComboSelectionsWidgetTitle_ (x.CustomAttributeComboSelectionsWidgetTitle_, f, this),
        CustomAttributeCounterWidgetTitle_ (x.CustomAttributeCounterWidgetTitle_, f, this),
        EventboxChooseWidgetFrame_ (x.EventboxChooseWidgetFrame_, f, this),
        VotingExperiencePartyWidget_ (x.VotingExperiencePartyWidget_, f, this),
        PartyWidgetEventbox_ (x.PartyWidgetEventbox_, f, this),
        EventboxImageStepInstallationWizard_ (x.EventboxImageStepInstallationWizard_, f, this),
        EventboxStepInstallationWizard_ (x.EventboxStepInstallationWizard_, f, this),
        ParentKeypadEventbox_ (x.ParentKeypadEventbox_, f, this),
        InfoFrame_ (x.InfoFrame_, f, this)
      {
      }

      OfficialThemeConfiguration::
      OfficialThemeConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        VotingWindowButton_ (f, this),
        VotingExperiencePartyEventbox_ (f, this),
        VotingExperienceWindow_ (f, this),
        VotingExperienceBallotOptionEventbox_ (f, this),
        CardActivatorFunctionalityMessage_ (f, this),
        CardActivatorMessageEventbox_ (f, this),
        CardActivatorFunctionalityEventbox_ (f, this),
        CardActivatorValuesEventbox_ (f, this),
        CardActivatorFunctionalityCenterFrame_ (f, this),
        EventboxStepBarcode_ (f, this),
        EventboxStepBarcodeTitle_ (f, this),
        EventboxStepCardTitle_ (f, this),
        VoteDemoFunctionalityMessage_ (f, this),
        StandInLabelLabel_ (f, this),
        StandInLabelEvent_ (f, this),
        VotingExperienceSelectBallotOptionWidget_ (f, this),
        ChangeLanguageMessageWigdetEventbox_ (f, this),
        CustomAttributeComboSelectionsWidgetTitle_ (f, this),
        CustomAttributeCounterWidgetTitle_ (f, this),
        EventboxChooseWidgetFrame_ (f, this),
        VotingExperiencePartyWidget_ (f, this),
        PartyWidgetEventbox_ (f, this),
        EventboxImageStepInstallationWizard_ (f, this),
        EventboxStepInstallationWizard_ (f, this),
        ParentKeypadEventbox_ (f, this),
        InfoFrame_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void OfficialThemeConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VotingWindowButton
          //
          if (n.name () == "VotingWindowButton" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWindowButtonType > r (
              VotingWindowButtonTraits::create (i, f, this));

            if (!VotingWindowButton_.present ())
            {
              this->VotingWindowButton_.set (r);
              continue;
            }
          }

          // VotingExperiencePartyEventbox
          //
          if (n.name () == "VotingExperiencePartyEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperiencePartyEventboxType > r (
              VotingExperiencePartyEventboxTraits::create (i, f, this));

            if (!VotingExperiencePartyEventbox_.present ())
            {
              this->VotingExperiencePartyEventbox_.set (r);
              continue;
            }
          }

          // VotingExperienceWindow
          //
          if (n.name () == "VotingExperienceWindow" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceWindowType > r (
              VotingExperienceWindowTraits::create (i, f, this));

            if (!VotingExperienceWindow_.present ())
            {
              this->VotingExperienceWindow_.set (r);
              continue;
            }
          }

          // VotingExperienceBallotOptionEventbox
          //
          if (n.name () == "VotingExperienceBallotOptionEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceBallotOptionEventboxType > r (
              VotingExperienceBallotOptionEventboxTraits::create (i, f, this));

            if (!VotingExperienceBallotOptionEventbox_.present ())
            {
              this->VotingExperienceBallotOptionEventbox_.set (r);
              continue;
            }
          }

          // CardActivatorFunctionalityMessage
          //
          if (n.name () == "CardActivatorFunctionalityMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivatorFunctionalityMessageType > r (
              CardActivatorFunctionalityMessageTraits::create (i, f, this));

            if (!CardActivatorFunctionalityMessage_.present ())
            {
              this->CardActivatorFunctionalityMessage_.set (r);
              continue;
            }
          }

          // CardActivatorMessageEventbox
          //
          if (n.name () == "CardActivatorMessageEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivatorMessageEventboxType > r (
              CardActivatorMessageEventboxTraits::create (i, f, this));

            if (!CardActivatorMessageEventbox_.present ())
            {
              this->CardActivatorMessageEventbox_.set (r);
              continue;
            }
          }

          // CardActivatorFunctionalityEventbox
          //
          if (n.name () == "CardActivatorFunctionalityEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivatorFunctionalityEventboxType > r (
              CardActivatorFunctionalityEventboxTraits::create (i, f, this));

            if (!CardActivatorFunctionalityEventbox_.present ())
            {
              this->CardActivatorFunctionalityEventbox_.set (r);
              continue;
            }
          }

          // CardActivatorValuesEventbox
          //
          if (n.name () == "CardActivatorValuesEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivatorValuesEventboxType > r (
              CardActivatorValuesEventboxTraits::create (i, f, this));

            if (!CardActivatorValuesEventbox_.present ())
            {
              this->CardActivatorValuesEventbox_.set (r);
              continue;
            }
          }

          // CardActivatorFunctionalityCenterFrame
          //
          if (n.name () == "CardActivatorFunctionalityCenterFrame" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CardActivatorFunctionalityCenterFrameType > r (
              CardActivatorFunctionalityCenterFrameTraits::create (i, f, this));

            if (!CardActivatorFunctionalityCenterFrame_.present ())
            {
              this->CardActivatorFunctionalityCenterFrame_.set (r);
              continue;
            }
          }

          // EventboxStepBarcode
          //
          if (n.name () == "EventboxStepBarcode" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventboxStepBarcodeType > r (
              EventboxStepBarcodeTraits::create (i, f, this));

            if (!EventboxStepBarcode_.present ())
            {
              this->EventboxStepBarcode_.set (r);
              continue;
            }
          }

          // EventboxStepBarcodeTitle
          //
          if (n.name () == "EventboxStepBarcodeTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventboxStepBarcodeTitleType > r (
              EventboxStepBarcodeTitleTraits::create (i, f, this));

            if (!EventboxStepBarcodeTitle_.present ())
            {
              this->EventboxStepBarcodeTitle_.set (r);
              continue;
            }
          }

          // EventboxStepCardTitle
          //
          if (n.name () == "EventboxStepCardTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventboxStepCardTitleType > r (
              EventboxStepCardTitleTraits::create (i, f, this));

            if (!EventboxStepCardTitle_.present ())
            {
              this->EventboxStepCardTitle_.set (r);
              continue;
            }
          }

          // VoteDemoFunctionalityMessage
          //
          if (n.name () == "VoteDemoFunctionalityMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VoteDemoFunctionalityMessageType > r (
              VoteDemoFunctionalityMessageTraits::create (i, f, this));

            if (!VoteDemoFunctionalityMessage_.present ())
            {
              this->VoteDemoFunctionalityMessage_.set (r);
              continue;
            }
          }

          // StandInLabelLabel
          //
          if (n.name () == "StandInLabelLabel" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StandInLabelLabelType > r (
              StandInLabelLabelTraits::create (i, f, this));

            if (!StandInLabelLabel_.present ())
            {
              this->StandInLabelLabel_.set (r);
              continue;
            }
          }

          // StandInLabelEvent
          //
          if (n.name () == "StandInLabelEvent" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< StandInLabelEventType > r (
              StandInLabelEventTraits::create (i, f, this));

            if (!StandInLabelEvent_.present ())
            {
              this->StandInLabelEvent_.set (r);
              continue;
            }
          }

          // VotingExperienceSelectBallotOptionWidget
          //
          if (n.name () == "VotingExperienceSelectBallotOptionWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceSelectBallotOptionWidgetType > r (
              VotingExperienceSelectBallotOptionWidgetTraits::create (i, f, this));

            if (!VotingExperienceSelectBallotOptionWidget_.present ())
            {
              this->VotingExperienceSelectBallotOptionWidget_.set (r);
              continue;
            }
          }

          // ChangeLanguageMessageWigdetEventbox
          //
          if (n.name () == "ChangeLanguageMessageWigdetEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ChangeLanguageMessageWigdetEventboxType > r (
              ChangeLanguageMessageWigdetEventboxTraits::create (i, f, this));

            if (!ChangeLanguageMessageWigdetEventbox_.present ())
            {
              this->ChangeLanguageMessageWigdetEventbox_.set (r);
              continue;
            }
          }

          // CustomAttributeComboSelectionsWidgetTitle
          //
          if (n.name () == "CustomAttributeComboSelectionsWidgetTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CustomAttributeComboSelectionsWidgetTitleType > r (
              CustomAttributeComboSelectionsWidgetTitleTraits::create (i, f, this));

            if (!CustomAttributeComboSelectionsWidgetTitle_.present ())
            {
              this->CustomAttributeComboSelectionsWidgetTitle_.set (r);
              continue;
            }
          }

          // CustomAttributeCounterWidgetTitle
          //
          if (n.name () == "CustomAttributeCounterWidgetTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< CustomAttributeCounterWidgetTitleType > r (
              CustomAttributeCounterWidgetTitleTraits::create (i, f, this));

            if (!CustomAttributeCounterWidgetTitle_.present ())
            {
              this->CustomAttributeCounterWidgetTitle_.set (r);
              continue;
            }
          }

          // EventboxChooseWidgetFrame
          //
          if (n.name () == "EventboxChooseWidgetFrame" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventboxChooseWidgetFrameType > r (
              EventboxChooseWidgetFrameTraits::create (i, f, this));

            if (!EventboxChooseWidgetFrame_.present ())
            {
              this->EventboxChooseWidgetFrame_.set (r);
              continue;
            }
          }

          // VotingExperiencePartyWidget
          //
          if (n.name () == "VotingExperiencePartyWidget" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperiencePartyWidgetType > r (
              VotingExperiencePartyWidgetTraits::create (i, f, this));

            if (!VotingExperiencePartyWidget_.present ())
            {
              this->VotingExperiencePartyWidget_.set (r);
              continue;
            }
          }

          // PartyWidgetEventbox
          //
          if (n.name () == "PartyWidgetEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< PartyWidgetEventboxType > r (
              PartyWidgetEventboxTraits::create (i, f, this));

            if (!PartyWidgetEventbox_.present ())
            {
              this->PartyWidgetEventbox_.set (r);
              continue;
            }
          }

          // EventboxImageStepInstallationWizard
          //
          if (n.name () == "EventboxImageStepInstallationWizard" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventboxImageStepInstallationWizardType > r (
              EventboxImageStepInstallationWizardTraits::create (i, f, this));

            if (!EventboxImageStepInstallationWizard_.present ())
            {
              this->EventboxImageStepInstallationWizard_.set (r);
              continue;
            }
          }

          // EventboxStepInstallationWizard
          //
          if (n.name () == "EventboxStepInstallationWizard" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< EventboxStepInstallationWizardType > r (
              EventboxStepInstallationWizardTraits::create (i, f, this));

            if (!EventboxStepInstallationWizard_.present ())
            {
              this->EventboxStepInstallationWizard_.set (r);
              continue;
            }
          }

          // ParentKeypadEventbox
          //
          if (n.name () == "ParentKeypadEventbox" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< ParentKeypadEventboxType > r (
              ParentKeypadEventboxTraits::create (i, f, this));

            if (!ParentKeypadEventbox_.present ())
            {
              this->ParentKeypadEventbox_.set (r);
              continue;
            }
          }

          // InfoFrame
          //
          if (n.name () == "InfoFrame" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< InfoFrameType > r (
              InfoFrameTraits::create (i, f, this));

            if (!InfoFrame_.present ())
            {
              this->InfoFrame_.set (r);
              continue;
            }
          }

          break;
        }

        if (!VotingWindowButton_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWindowButton",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperiencePartyEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperiencePartyEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceWindow_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceWindow",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceBallotOptionEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceBallotOptionEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivatorFunctionalityMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivatorFunctionalityMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivatorMessageEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivatorMessageEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivatorFunctionalityEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivatorFunctionalityEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivatorValuesEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivatorValuesEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CardActivatorFunctionalityCenterFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CardActivatorFunctionalityCenterFrame",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventboxStepBarcode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventboxStepBarcode",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventboxStepBarcodeTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventboxStepBarcodeTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventboxStepCardTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventboxStepCardTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VoteDemoFunctionalityMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteDemoFunctionalityMessage",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StandInLabelLabel_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StandInLabelLabel",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!StandInLabelEvent_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StandInLabelEvent",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceSelectBallotOptionWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceSelectBallotOptionWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ChangeLanguageMessageWigdetEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ChangeLanguageMessageWigdetEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CustomAttributeComboSelectionsWidgetTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CustomAttributeComboSelectionsWidgetTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!CustomAttributeCounterWidgetTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CustomAttributeCounterWidgetTitle",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventboxChooseWidgetFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventboxChooseWidgetFrame",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperiencePartyWidget_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperiencePartyWidget",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!PartyWidgetEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PartyWidgetEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventboxImageStepInstallationWizard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventboxImageStepInstallationWizard",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!EventboxStepInstallationWizard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventboxStepInstallationWizard",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!ParentKeypadEventbox_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ParentKeypadEventbox",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!InfoFrame_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "InfoFrame",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      OfficialThemeConfiguration* OfficialThemeConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class OfficialThemeConfiguration (*this, f, c);
      }

      OfficialThemeConfiguration::
      ~OfficialThemeConfiguration ()
      {
      }

      bool
      operator== (const OfficialThemeConfiguration& x, const OfficialThemeConfiguration& y)
      {
        if (!(x.getVotingWindowButton () == y.getVotingWindowButton ()))
          return false;

        if (!(x.getVotingExperiencePartyEventbox () == y.getVotingExperiencePartyEventbox ()))
          return false;

        if (!(x.getVotingExperienceWindow () == y.getVotingExperienceWindow ()))
          return false;

        if (!(x.getVotingExperienceBallotOptionEventbox () == y.getVotingExperienceBallotOptionEventbox ()))
          return false;

        if (!(x.getCardActivatorFunctionalityMessage () == y.getCardActivatorFunctionalityMessage ()))
          return false;

        if (!(x.getCardActivatorMessageEventbox () == y.getCardActivatorMessageEventbox ()))
          return false;

        if (!(x.getCardActivatorFunctionalityEventbox () == y.getCardActivatorFunctionalityEventbox ()))
          return false;

        if (!(x.getCardActivatorValuesEventbox () == y.getCardActivatorValuesEventbox ()))
          return false;

        if (!(x.getCardActivatorFunctionalityCenterFrame () == y.getCardActivatorFunctionalityCenterFrame ()))
          return false;

        if (!(x.getEventboxStepBarcode () == y.getEventboxStepBarcode ()))
          return false;

        if (!(x.getEventboxStepBarcodeTitle () == y.getEventboxStepBarcodeTitle ()))
          return false;

        if (!(x.getEventboxStepCardTitle () == y.getEventboxStepCardTitle ()))
          return false;

        if (!(x.getVoteDemoFunctionalityMessage () == y.getVoteDemoFunctionalityMessage ()))
          return false;

        if (!(x.getStandInLabelLabel () == y.getStandInLabelLabel ()))
          return false;

        if (!(x.getStandInLabelEvent () == y.getStandInLabelEvent ()))
          return false;

        if (!(x.getVotingExperienceSelectBallotOptionWidget () == y.getVotingExperienceSelectBallotOptionWidget ()))
          return false;

        if (!(x.getChangeLanguageMessageWigdetEventbox () == y.getChangeLanguageMessageWigdetEventbox ()))
          return false;

        if (!(x.getCustomAttributeComboSelectionsWidgetTitle () == y.getCustomAttributeComboSelectionsWidgetTitle ()))
          return false;

        if (!(x.getCustomAttributeCounterWidgetTitle () == y.getCustomAttributeCounterWidgetTitle ()))
          return false;

        if (!(x.getEventboxChooseWidgetFrame () == y.getEventboxChooseWidgetFrame ()))
          return false;

        if (!(x.getVotingExperiencePartyWidget () == y.getVotingExperiencePartyWidget ()))
          return false;

        if (!(x.getPartyWidgetEventbox () == y.getPartyWidgetEventbox ()))
          return false;

        if (!(x.getEventboxImageStepInstallationWizard () == y.getEventboxImageStepInstallationWizard ()))
          return false;

        if (!(x.getEventboxStepInstallationWizard () == y.getEventboxStepInstallationWizard ()))
          return false;

        if (!(x.getParentKeypadEventbox () == y.getParentKeypadEventbox ()))
          return false;

        if (!(x.getInfoFrame () == y.getInfoFrame ()))
          return false;

        return true;
      }

      bool
      operator!= (const OfficialThemeConfiguration& x, const OfficialThemeConfiguration& y)
      {
        return !(x == y);
      }

      // DemoThemeConfiguration
      //

      DemoThemeConfiguration::
      DemoThemeConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        VotingWindowButtonDemo_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyEventboxDemo_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindowDemo_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceBallotOptionEventboxDemo_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DemoThemeConfiguration::
      DemoThemeConfiguration (const VotingWindowButtonDemoType& VotingWindowButtonDemo,
                              const VotingExperiencePartyEventboxDemoType& VotingExperiencePartyEventboxDemo,
                              const VotingExperienceWindowDemoType& VotingExperienceWindowDemo,
                              const VotingExperienceBallotOptionEventboxDemoType& VotingExperienceBallotOptionEventboxDemo)
      : ::Smartmatic::ConfigurationTypes::Type (),
        VotingWindowButtonDemo_ (VotingWindowButtonDemo, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyEventboxDemo_ (VotingExperiencePartyEventboxDemo, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindowDemo_ (VotingExperienceWindowDemo, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceBallotOptionEventboxDemo_ (VotingExperienceBallotOptionEventboxDemo, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      DemoThemeConfiguration::
      DemoThemeConfiguration (const DemoThemeConfiguration& x,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        VotingWindowButtonDemo_ (x.VotingWindowButtonDemo_, f, this),
        VotingExperiencePartyEventboxDemo_ (x.VotingExperiencePartyEventboxDemo_, f, this),
        VotingExperienceWindowDemo_ (x.VotingExperienceWindowDemo_, f, this),
        VotingExperienceBallotOptionEventboxDemo_ (x.VotingExperienceBallotOptionEventboxDemo_, f, this)
      {
      }

      DemoThemeConfiguration::
      DemoThemeConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        VotingWindowButtonDemo_ (f, this),
        VotingExperiencePartyEventboxDemo_ (f, this),
        VotingExperienceWindowDemo_ (f, this),
        VotingExperienceBallotOptionEventboxDemo_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void DemoThemeConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VotingWindowButtonDemo
          //
          if (n.name () == "VotingWindowButtonDemo" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWindowButtonDemoType > r (
              VotingWindowButtonDemoTraits::create (i, f, this));

            if (!VotingWindowButtonDemo_.present ())
            {
              this->VotingWindowButtonDemo_.set (r);
              continue;
            }
          }

          // VotingExperiencePartyEventboxDemo
          //
          if (n.name () == "VotingExperiencePartyEventboxDemo" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperiencePartyEventboxDemoType > r (
              VotingExperiencePartyEventboxDemoTraits::create (i, f, this));

            if (!VotingExperiencePartyEventboxDemo_.present ())
            {
              this->VotingExperiencePartyEventboxDemo_.set (r);
              continue;
            }
          }

          // VotingExperienceWindowDemo
          //
          if (n.name () == "VotingExperienceWindowDemo" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceWindowDemoType > r (
              VotingExperienceWindowDemoTraits::create (i, f, this));

            if (!VotingExperienceWindowDemo_.present ())
            {
              this->VotingExperienceWindowDemo_.set (r);
              continue;
            }
          }

          // VotingExperienceBallotOptionEventboxDemo
          //
          if (n.name () == "VotingExperienceBallotOptionEventboxDemo" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceBallotOptionEventboxDemoType > r (
              VotingExperienceBallotOptionEventboxDemoTraits::create (i, f, this));

            if (!VotingExperienceBallotOptionEventboxDemo_.present ())
            {
              this->VotingExperienceBallotOptionEventboxDemo_.set (r);
              continue;
            }
          }

          break;
        }

        if (!VotingWindowButtonDemo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWindowButtonDemo",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperiencePartyEventboxDemo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperiencePartyEventboxDemo",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceWindowDemo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceWindowDemo",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceBallotOptionEventboxDemo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceBallotOptionEventboxDemo",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      DemoThemeConfiguration* DemoThemeConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class DemoThemeConfiguration (*this, f, c);
      }

      DemoThemeConfiguration::
      ~DemoThemeConfiguration ()
      {
      }

      bool
      operator== (const DemoThemeConfiguration& x, const DemoThemeConfiguration& y)
      {
        if (!(x.getVotingWindowButtonDemo () == y.getVotingWindowButtonDemo ()))
          return false;

        if (!(x.getVotingExperiencePartyEventboxDemo () == y.getVotingExperiencePartyEventboxDemo ()))
          return false;

        if (!(x.getVotingExperienceWindowDemo () == y.getVotingExperienceWindowDemo ()))
          return false;

        if (!(x.getVotingExperienceBallotOptionEventboxDemo () == y.getVotingExperienceBallotOptionEventboxDemo ()))
          return false;

        return true;
      }

      bool
      operator!= (const DemoThemeConfiguration& x, const DemoThemeConfiguration& y)
      {
        return !(x == y);
      }

      // RecoveryThemeConfiguration
      //

      RecoveryThemeConfiguration::
      RecoveryThemeConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        VotingWindowButtonRecovery_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyEventboxRecovery_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindowRecovery_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceBallotOptionEventboxRecovery_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      RecoveryThemeConfiguration::
      RecoveryThemeConfiguration (const VotingWindowButtonRecoveryType& VotingWindowButtonRecovery,
                                  const VotingExperiencePartyEventboxRecoveryType& VotingExperiencePartyEventboxRecovery,
                                  const VotingExperienceWindowRecoveryType& VotingExperienceWindowRecovery,
                                  const VotingExperienceBallotOptionEventboxRecoveryType& VotingExperienceBallotOptionEventboxRecovery)
      : ::Smartmatic::ConfigurationTypes::Type (),
        VotingWindowButtonRecovery_ (VotingWindowButtonRecovery, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperiencePartyEventboxRecovery_ (VotingExperiencePartyEventboxRecovery, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceWindowRecovery_ (VotingExperienceWindowRecovery, ::Smartmatic::ConfigurationTypes::Flags (), this),
        VotingExperienceBallotOptionEventboxRecovery_ (VotingExperienceBallotOptionEventboxRecovery, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      RecoveryThemeConfiguration::
      RecoveryThemeConfiguration (const RecoveryThemeConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        VotingWindowButtonRecovery_ (x.VotingWindowButtonRecovery_, f, this),
        VotingExperiencePartyEventboxRecovery_ (x.VotingExperiencePartyEventboxRecovery_, f, this),
        VotingExperienceWindowRecovery_ (x.VotingExperienceWindowRecovery_, f, this),
        VotingExperienceBallotOptionEventboxRecovery_ (x.VotingExperienceBallotOptionEventboxRecovery_, f, this)
      {
      }

      RecoveryThemeConfiguration::
      RecoveryThemeConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        VotingWindowButtonRecovery_ (f, this),
        VotingExperiencePartyEventboxRecovery_ (f, this),
        VotingExperienceWindowRecovery_ (f, this),
        VotingExperienceBallotOptionEventboxRecovery_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RecoveryThemeConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VotingWindowButtonRecovery
          //
          if (n.name () == "VotingWindowButtonRecovery" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingWindowButtonRecoveryType > r (
              VotingWindowButtonRecoveryTraits::create (i, f, this));

            if (!VotingWindowButtonRecovery_.present ())
            {
              this->VotingWindowButtonRecovery_.set (r);
              continue;
            }
          }

          // VotingExperiencePartyEventboxRecovery
          //
          if (n.name () == "VotingExperiencePartyEventboxRecovery" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperiencePartyEventboxRecoveryType > r (
              VotingExperiencePartyEventboxRecoveryTraits::create (i, f, this));

            if (!VotingExperiencePartyEventboxRecovery_.present ())
            {
              this->VotingExperiencePartyEventboxRecovery_.set (r);
              continue;
            }
          }

          // VotingExperienceWindowRecovery
          //
          if (n.name () == "VotingExperienceWindowRecovery" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceWindowRecoveryType > r (
              VotingExperienceWindowRecoveryTraits::create (i, f, this));

            if (!VotingExperienceWindowRecovery_.present ())
            {
              this->VotingExperienceWindowRecovery_.set (r);
              continue;
            }
          }

          // VotingExperienceBallotOptionEventboxRecovery
          //
          if (n.name () == "VotingExperienceBallotOptionEventboxRecovery" && n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
          {
            ::std::auto_ptr< VotingExperienceBallotOptionEventboxRecoveryType > r (
              VotingExperienceBallotOptionEventboxRecoveryTraits::create (i, f, this));

            if (!VotingExperienceBallotOptionEventboxRecovery_.present ())
            {
              this->VotingExperienceBallotOptionEventboxRecovery_.set (r);
              continue;
            }
          }

          break;
        }

        if (!VotingWindowButtonRecovery_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingWindowButtonRecovery",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperiencePartyEventboxRecovery_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperiencePartyEventboxRecovery",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceWindowRecovery_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceWindowRecovery",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }

        if (!VotingExperienceBallotOptionEventboxRecovery_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VotingExperienceBallotOptionEventboxRecovery",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      RecoveryThemeConfiguration* RecoveryThemeConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class RecoveryThemeConfiguration (*this, f, c);
      }

      RecoveryThemeConfiguration::
      ~RecoveryThemeConfiguration ()
      {
      }

      bool
      operator== (const RecoveryThemeConfiguration& x, const RecoveryThemeConfiguration& y)
      {
        if (!(x.getVotingWindowButtonRecovery () == y.getVotingWindowButtonRecovery ()))
          return false;

        if (!(x.getVotingExperiencePartyEventboxRecovery () == y.getVotingExperiencePartyEventboxRecovery ()))
          return false;

        if (!(x.getVotingExperienceWindowRecovery () == y.getVotingExperienceWindowRecovery ()))
          return false;

        if (!(x.getVotingExperienceBallotOptionEventboxRecovery () == y.getVotingExperienceBallotOptionEventboxRecovery ()))
          return false;

        return true;
      }

      bool
      operator!= (const RecoveryThemeConfiguration& x, const RecoveryThemeConfiguration& y)
      {
        return !(x == y);
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::std::string& u,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
          ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::std::string& u,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
          ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
          ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::xercesc::InputSource& i,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
          ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::xercesc::InputSource& i,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
          ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
          ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
            ::Smartmatic::SAES::Configuration::parsePMWidgetConfiguration (
              c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PMWidgetConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PMWidgetConfiguration",
          "http://www.smartmatic.com/SaesGUIConfiguration");
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties&)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
           !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
          doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PMWidgetConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PMWidgetConfiguration",
          "http://www.smartmatic.com/SaesGUIConfiguration");
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::std::string& u,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::std::string& u,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::xercesc::InputSource& i,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::xercesc::InputSource& i,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::xercesc::DOMDocument& d,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
            ::Smartmatic::SAES::Configuration::parseSaesGUIConfiguration (
              c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SaesGUIConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SaesGUIConfiguration",
          "http://www.smartmatic.com/SaesGUIConfiguration");
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 const ::Smartmatic::ConfigurationTypes::Properties&)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
           !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
          doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SaesGUIConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SaesGUIConfiguration",
          "http://www.smartmatic.com/SaesGUIConfiguration");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      void
      operator<< (::xercesc::DOMElement& e, const SaesGUIConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // StartConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StartConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStartConfiguration ();
        }

        // BeidCardUseThread
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BeidCardUseThread",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBeidCardUseThread ();
        }

        // BeidCardShowRemoveMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BeidCardShowRemoveMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBeidCardShowRemoveMessage ();
        }

        // BeidShowIdCard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BeidShowIdCard",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBeidShowIdCard ();
        }

        // PMInstallationWidgetShowPrintPasswordButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PMInstallationWidgetShowPrintPasswordButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPMInstallationWidgetShowPrintPasswordButton ();
        }

        // ShowBeidEntry
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBeidEntry",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBeidEntry ();
        }

        // VotingMachine
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingMachine",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingMachine ();
        }

        // VotingExperience
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperience",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperience ();
        }

        // FormsCommonControls
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FormsCommonControls",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFormsCommonControls ();
        }

        // ReportPrintingWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportPrintingWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getReportPrintingWidget ();
        }

        // ForceToLoadFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ForceToLoadFrame",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getForceToLoadFrame ();
        }

        // VMInstallationConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VMInstallationConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVMInstallationConfiguration ();
        }

        // ExitMessageLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExitMessageLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getExitMessageLabelConfiguration ();
        }

        // BlockMemoryBehaviorMenu
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlockMemoryBehaviorMenu",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBlockMemoryBehaviorMenu ();
        }

        // SendBarcodeConfigurationOnReconnectWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SendBarcodeConfigurationOnReconnectWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSendBarcodeConfigurationOnReconnectWidget ();
        }

        // PollingCardConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PollingCardConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPollingCardConfiguration ();
        }

        // AlarmBoxMonitorConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlarmBoxMonitorConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAlarmBoxMonitorConfiguration ();
        }

        // SmartCardReaderDiagnosisConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SmartCardReaderDiagnosisConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSmartCardReaderDiagnosisConfiguration ();
        }

        // ChangeHourFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChangeHourFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getChangeHourFunctionalityConfiguration ();
        }

        // FunctionalitiesConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FunctionalitiesConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFunctionalitiesConfiguration ();
        }

        // RunFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RunFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRunFunctionalityConfiguration ();
        }

        // InstallationWizardConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InstallationWizardConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInstallationWizardConfiguration ();
        }

        // PMWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PMWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPMWidgetConfiguration ();
        }

        // CardActivatorFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivatorFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivatorFunctionalityConfiguration ();
        }

        // CardRecoveryFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardRecoveryFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardRecoveryFunctionalityConfiguration ();
        }

        // VoteDemoFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteDemoFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVoteDemoFunctionalityConfiguration ();
        }

        // CardAssistedActivationFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardAssistedActivationFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardAssistedActivationFunctionalityConfiguration ();
        }

        // PrinterDiagnosisConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrinterDiagnosisConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrinterDiagnosisConfiguration ();
        }

        // GeneralDiagnosisConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GeneralDiagnosisConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getGeneralDiagnosisConfiguration ();
        }

        // TouchScreenCalibrationConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TouchScreenCalibrationConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTouchScreenCalibrationConfiguration ();
        }

        // EventSoundsConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventSoundsConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventSoundsConfiguration ();
        }

        // BarcodeDiagnosisConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeDiagnosisConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeDiagnosisConfiguration ();
        }

        // BrightnessDiagnosisConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BrightnessDiagnosisConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBrightnessDiagnosisConfiguration ();
        }

        // AllDiagnosisConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AllDiagnosisConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAllDiagnosisConfiguration ();
        }

        // AutomaticWindowConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AutomaticWindowConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAutomaticWindowConfiguration ();
        }

        // ContingencyCardWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContingencyCardWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContingencyCardWidgetConfiguration ();
        }

        // IDCardProcessConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IDCardProcessConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIDCardProcessConfiguration ();
        }

        // BEIDCardWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BEIDCardWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBEIDCardWidgetConfiguration ();
        }

        // MemoryStateWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MemoryStateWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMemoryStateWidgetConfiguration ();
        }

        // HelpWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HelpWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHelpWidgetConfiguration ();
        }

        // WaitingForCardWindowConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WaitingForCardWindowConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWaitingForCardWindowConfiguration ();
        }

        // LanguageSelectionWindowConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LanguageSelectionWindowConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLanguageSelectionWindowConfiguration ();
        }

        // StatisticFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticFunctionalityConfiguration ();
        }

        // OpenElectionFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OpenElectionFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOpenElectionFunctionalityConfiguration ();
        }

        // AuthenticationWindowConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AuthenticationWindowConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAuthenticationWindowConfiguration ();
        }

        // DurationWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DurationWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDurationWidgetConfiguration ();
        }

        // CloseElectionFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseElectionFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseElectionFunctionalityConfiguration ();
        }

        // ActivationConsolidationFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ActivationConsolidationFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getActivationConsolidationFunctionalityConfiguration ();
        }

        // CloseVotationFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseVotationFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseVotationFunctionalityConfiguration ();
        }

        // InitializationWindowConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InitializationWindowConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInitializationWindowConfiguration ();
        }

        // IncidentReportFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncidentReportFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIncidentReportFunctionalityConfiguration ();
        }

        // PollWorkerRegisterFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PollWorkerRegisterFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPollWorkerRegisterFunctionalityConfiguration ();
        }

        // CloseNoteRegisterFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseNoteRegisterFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseNoteRegisterFunctionalityConfiguration ();
        }

        // VoteConsolidationFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteConsolidationFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVoteConsolidationFunctionalityConfiguration ();
        }

        // PrintPreviewFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrintPreviewFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrintPreviewFunctionalityConfiguration ();
        }

        // LogReportFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LogReportFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLogReportFunctionalityConfiguration ();
        }

        // CloseNotetFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseNotetFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseNotetFunctionalityConfiguration ();
        }

        // VotingExperienceValidationScreensFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceValidationScreensFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceValidationScreensFunctionalityConfiguration ();
        }

        // VotingForDisabledFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingForDisabledFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingForDisabledFunctionalityConfiguration ();
        }

        // PoliceNoteRegisterFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PoliceNoteRegisterFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPoliceNoteRegisterFunctionalityConfiguration ();
        }

        // DataUtilsValidatorFunctionalityConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DataUtilsValidatorFunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDataUtilsValidatorFunctionalityConfiguration ();
        }

        // ThemesConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ThemesConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getThemesConfiguration ();
        }

        // FunctionalityWizardConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FunctionalityWizardConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFunctionalityWizardConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const OpenElectionSteps& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const OpenElectionSteps& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const OpenElectionSteps& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ScanConsolidationConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ScanPopUpMessageConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScanPopUpMessageConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getScanPopUpMessageConfiguration ();
        }

        // EnabledChangeColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EnabledChangeColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEnabledChangeColor ();
        }

        // BoxColorValid
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BoxColorValid",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBoxColorValid ();
        }

        // BoxColorDuplicate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BoxColorDuplicate",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBoxColorDuplicate ();
        }

        // BoxColorBad
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BoxColorBad",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBoxColorBad ();
        }

        // FontColorValid
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontColorValid",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontColorValid ();
        }

        // FontColorDuplicate
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontColorDuplicate",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontColorDuplicate ();
        }

        // FontColorBad
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontColorBad",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontColorBad ();
        }

        // TextConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTextConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ScanPopUpMessageConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Visible
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Visible",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVisible ();
        }

        // TimeOut
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeOut",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeOut ();
        }

        // Opacity
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Opacity",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOpacity ();
        }

        // Width
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Width",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWidth ();
        }

        // Height
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Height",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeight ();
        }

        // X
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "X",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getX ();
        }

        // Y
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Y",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getY ();
        }

        // Position
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Position",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPosition ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PositionConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const PositionConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const PositionConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const TreeColumnConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Resizable
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Resizable",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getResizable ();
        }

        // MaxWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxWidth ();
        }

        // MinWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMinWidth ();
        }

        // Alignment
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Alignment",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getAlignment ());
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const IncidentReportColumn& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const IncidentReportColumn& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const IncidentReportColumn& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const IncidentReportTreeViewConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // IncidentReportColumn
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncidentReportColumn",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIncidentReportColumn ();
        }

        // IncidentColumnConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncidentColumnConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIncidentColumnConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ButtonConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonWidth ();
        }

        // ButtonHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonHeight ();
        }

        // FontSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontSize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontSize ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ButtonBoxConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonWidth ();
        }

        // ButtonHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonHeight ();
        }

        // Spacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Spacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSpacing ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const MenuWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // FirstLevelWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstLevelWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFirstLevelWidth ();
        }

        // FirstLevelHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstLevelHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFirstLevelHeight ();
        }

        // FirstLevelSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstLevelSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFirstLevelSpacing ();
        }

        // FirstLevelBorderWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstLevelBorderWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFirstLevelBorderWidth ();
        }

        // FirstLevelFrameWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstLevelFrameWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFirstLevelFrameWidth ();
        }

        // FirstLevelFrameHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstLevelFrameHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFirstLevelFrameHeight ();
        }

        // SecondLevelWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondLevelWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSecondLevelWidth ();
        }

        // SecondLevelHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondLevelHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSecondLevelHeight ();
        }

        // SecondLevelSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondLevelSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSecondLevelSpacing ();
        }

        // SecondLevelBorderWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondLevelBorderWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSecondLevelBorderWidth ();
        }

        // SecondLevelFramePadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SecondLevelFramePadding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSecondLevelFramePadding ();
        }

        // HasShortcut
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HasShortcut",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHasShortcut ();
        }

        // RootOption
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RootOption",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRootOption ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const MenuOption& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NameKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NameKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNameKey ();
        }

        // UntraslatedKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UntraslatedKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUntraslatedKey ();
        }

        // ImageKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getImageKey ();
        }

        // Code
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Code",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCode ();
        }

        // MappingKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MappingKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMappingKey ();
        }

        // MappingKeyName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MappingKeyName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMappingKeyName ();
        }

        // OptionType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OptionType",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOptionType ();
        }

        // MenuOptions
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MenuOptions",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMenuOptions ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const MenuOptionType& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const MenuOptionType& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const MenuOptionType& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const CustomAttributesPresentationType& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const CustomAttributesPresentationType& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const CustomAttributesPresentationType& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const DiagnosticType& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Device
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Device",
              e));

          a << i.getDevice ();
        }

        // Mandatory
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Mandatory",
              e));

          a << i.getMandatory ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DiagnosticDevice& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const DiagnosticDevice& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const DiagnosticDevice& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const VotingExperienceConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // SortOptionsAlphabetical
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SortOptionsAlphabetical",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSortOptionsAlphabetical ();
        }

        // SortLanguagesAlphabetical
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SortLanguagesAlphabetical",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSortLanguagesAlphabetical ();
        }

        // DetectCardExtraction
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DetectCardExtraction",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDetectCardExtraction ();
        }

        // NumberOfExtractionsBeforeStop
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberOfExtractionsBeforeStop",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberOfExtractionsBeforeStop ();
        }

        // VotingWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWindow ();
        }

        // PartySelection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartySelection",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartySelection ();
        }

        // BallotOptionSelection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotOptionSelection",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotOptionSelection ();
        }

        // ReferendumSelection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReferendumSelection",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getReferendumSelection ();
        }

        // CustomAtributtesWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CustomAtributtesWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCustomAtributtesWindow ();
        }

        // ConfirmationWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfirmationWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConfirmationWindow ();
        }

        // VotingExperienceLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceLabel",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceLabel ();
        }

        // TimeOutCard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeOutCard",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeOutCard ();
        }

        // TimeToShowFinalMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeToShowFinalMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeToShowFinalMessage ();
        }

        // RemoveCardFirst
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RemoveCardFirst",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRemoveCardFirst ();
        }

        // MarkCardAsUsed
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MarkCardAsUsed",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMarkCardAsUsed ();
        }

        // CheckSumFailTimerMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CheckSumFailTimerMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCheckSumFailTimerMessage ();
        }

        // CheckSumFailOption
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CheckSumFailOption",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCheckSumFailOption ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PartySelectionConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // EnableClick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EnableClick",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEnableClick ();
        }

        // UseMaxPartyNumerFromAllContest
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseMaxPartyNumerFromAllContest",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseMaxPartyNumerFromAllContest ();
        }

        // ShowNullParty
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowNullParty",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowNullParty ();
        }

        // ShowNullButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowNullButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowNullButton ();
        }

        // PartyButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartyButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartyButton ();
        }

        // ExpandButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExpandButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getExpandButton ();
        }

        // SeparateButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SeparateButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSeparateButton ();
        }

        // FrameBottomHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameBottomHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFrameBottomHeight ();
        }

        // Columns
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Columns",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getColumns ();
        }

        // SizeToColumns
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SizeToColumns",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSizeToColumns ();
        }

        // ImageRelation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageRelation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getImageRelation ());
        }

        // PartiesMargin
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartiesMargin",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartiesMargin ();
        }

        // PartyWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartyWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartyWidget ();
        }

        // PartySelectionAlignment
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartySelectionAlignment",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getPartySelectionAlignment ());
        }

        // HeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeaderLabelConfiguration ();
        }

        // BottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PartyWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NumberWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberWidth ();
        }

        // UseAbbreviation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseAbbreviation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseAbbreviation ();
        }

        // Padding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Padding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPadding ();
        }

        // ShowFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowFrame",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowFrame ();
        }

        // Display
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Display",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDisplay ();
        }

        // UseFillByRows
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseFillByRows",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseFillByRows ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DisplayType& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const DisplayType& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const DisplayType& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const BallotOptionSelectionConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // EnableClick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EnableClick",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEnableClick ();
        }

        // HideStandInLabelIfEmpty
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideStandInLabelIfEmpty",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideStandInLabelIfEmpty ();
        }

        // UseMaxBallotNumberFromContest
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseMaxBallotNumberFromContest",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseMaxBallotNumberFromContest ();
        }

        // BallotOptionTable
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotOptionTable",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotOptionTable ();
        }

        // BallotOptionButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotOptionButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotOptionButton ();
        }

        // ExpandButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExpandButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getExpandButton ();
        }

        // SeparateButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SeparateButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSeparateButton ();
        }

        // FrameBottomHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameBottomHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFrameBottomHeight ();
        }

        // FrameHeaderHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameHeaderHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFrameHeaderHeight ();
        }

        // MaxColumns
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxColumns",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxColumns ();
        }

        // MaxRows
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxRows",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxRows ();
        }

        // FixBorder
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FixBorder",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFixBorder ();
        }

        // ResizeBallotBox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ResizeBallotBox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getResizeBallotBox ();
        }

        // BallotsMargin
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotsMargin",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotsMargin ();
        }

        // OptionListLinked
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OptionListLinked",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOptionListLinked ();
        }

        // SelectListImpliesSelectStandIn
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectListImpliesSelectStandIn",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectListImpliesSelectStandIn ();
        }

        // SelectStandInImpliesSelectList
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectStandInImpliesSelectList",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectStandInImpliesSelectList ();
        }

        // AllowBackWithBallotSelected
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AllowBackWithBallotSelected",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAllowBackWithBallotSelected ();
        }

        // ShowConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowConfirmation ();
        }

        // CandidatesButtonsSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CandidatesButtonsSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCandidatesButtonsSpacing ();
        }

        // UseCustomBallotRelation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseCustomBallotRelation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseCustomBallotRelation ();
        }

        // BallotRelation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotRelation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getBallotRelation ());
        }

        // ListSelectedColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ListSelectedColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getListSelectedColor ();
        }

        // ListUnSelectedColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ListUnSelectedColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getListUnSelectedColor ();
        }

        // StandInColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StandInColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStandInColor ();
        }

        // BallotOptionWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotOptionWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotOptionWidget ();
        }

        // HeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeaderLabelConfiguration ();
        }

        // BottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomLabelConfiguration ();
        }

        // ShowImageInList
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowImageInList",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowImageInList ();
        }

        // ImageInListPadgging
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageInListPadgging",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getImageInListPadgging ();
        }

        // FillPrincipal
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FillPrincipal",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFillPrincipal ();
        }

        // FillColumnDynamic
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FillColumnDynamic",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFillColumnDynamic ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FillPrincipalConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const FillPrincipalConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const FillPrincipalConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const FillColumnDynamicConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PivotConfig
        //
        for (FillColumnDynamicConfiguration::PivotConfigConstIterator
             b (i.getPivotConfig ().begin ()), n (i.getPivotConfig ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PivotConfig",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PivotConfig& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Value
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Value",
              e));

          a << i.getValue ();
        }

        // ColumnCount
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "ColumnCount",
              e));

          a << i.getColumnCount ();
        }

        // Wrap
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Wrap",
              e));

          a << i.getWrap ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CustomAtributtesWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ForceQuestionHeader
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ForceQuestionHeader",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getForceQuestionHeader ();
        }

        // ForceQuestionFooter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ForceQuestionFooter",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getForceQuestionFooter ();
        }

        // ForceQuestionHeaderConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ForceQuestionHeaderConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getForceQuestionHeaderConfirmation ();
        }

        // ForceQuestionFooterConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ForceQuestionFooterConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getForceQuestionFooterConfirmation ();
        }

        // ShowWelcomeMessageQuestionCloseButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowWelcomeMessageQuestionCloseButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowWelcomeMessageQuestionCloseButton ();
        }

        // WelcomeMessageQuestionTimer
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WelcomeMessageQuestionTimer",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWelcomeMessageQuestionTimer ();
        }

        // ShowQuestionConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowQuestionConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowQuestionConfirmation ();
        }

        // ShowWelcomeQuestion
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowWelcomeQuestion",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowWelcomeQuestion ();
        }

        // QuestionWindowWith
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionWindowWith",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionWindowWith ();
        }

        // QuestionWindowHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionWindowHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionWindowHeight ();
        }

        // HeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeaderLabelConfiguration ();
        }

        // BottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomLabelConfiguration ();
        }

        // CenterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CenterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCenterLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfirmationWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // HeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeaderLabelConfiguration ();
        }

        // BottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomLabelConfiguration ();
        }

        // NullButtonsVertical
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NullButtonsVertical",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNullButtonsVertical ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FormsCommonControlsConfigurations& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // FormTitles
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FormTitles",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFormTitles ();
        }

        // FormMesages
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FormMesages",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFormMesages ();
        }

        // UnableFunctionalityMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UnableFunctionalityMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUnableFunctionalityMessage ();
        }

        // UnableMessageCloseTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UnableMessageCloseTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUnableMessageCloseTime ();
        }

        // ExitFunctionalityMessageCloseTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ExitFunctionalityMessageCloseTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getExitFunctionalityMessageCloseTime ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FormsMessagesLabelConfigurations& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // VMLogingMessageLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VMLogingMessageLabel",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVMLogingMessageLabel ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FormsTitleLabelConfigurations& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // EmptyWindowTitleLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EmptyWindowTitleLabel",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEmptyWindowTitleLabel ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VotingExperienceLabelConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // SelectionLanguageHeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectionLanguageHeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectionLanguageHeaderLabelConfiguration ();
        }

        // SelectionLanguageBottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectionLanguageBottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectionLanguageBottomLabelConfiguration ();
        }

        // SelectionLanguageConfirmationHeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectionLanguageConfirmationHeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectionLanguageConfirmationHeaderLabelConfiguration ();
        }

        // SelectionLanguageConfirmationBottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectionLanguageConfirmationBottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectionLanguageConfirmationBottomLabelConfiguration ();
        }

        // SelectionLanguageConfirmationCenterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectionLanguageConfirmationCenterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectionLanguageConfirmationCenterLabelConfiguration ();
        }

        // SuperWhiteHeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperWhiteHeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperWhiteHeaderLabelConfiguration ();
        }

        // SuperWhiteBottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperWhiteBottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperWhiteBottomLabelConfiguration ();
        }

        // SuperWhiteCenterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperWhiteCenterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperWhiteCenterLabelConfiguration ();
        }

        // SuperWhiteConfirmationHeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperWhiteConfirmationHeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperWhiteConfirmationHeaderLabelConfiguration ();
        }

        // SuperWhiteConfirmationBottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperWhiteConfirmationBottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperWhiteConfirmationBottomLabelConfiguration ();
        }

        // SuperWhiteConfirmationCenterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperWhiteConfirmationCenterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperWhiteConfirmationCenterLabelConfiguration ();
        }

        // ContestWhiteSelectionHeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContestWhiteSelectionHeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContestWhiteSelectionHeaderLabelConfiguration ();
        }

        // ContestWhiteSelectionBottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContestWhiteSelectionBottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContestWhiteSelectionBottomLabelConfiguration ();
        }

        // ContestWhiteSelectionCenterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContestWhiteSelectionCenterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContestWhiteSelectionCenterLabelConfiguration ();
        }

        // WelcomeContestCenterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WelcomeContestCenterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWelcomeContestCenterLabelConfiguration ();
        }

        // VotingWidgetLabelChildLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWidgetLabelChildLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWidgetLabelChildLabelConfiguration ();
        }

        // VotingWidgetTopChildLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWidgetTopChildLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWidgetTopChildLabelConfiguration ();
        }

        // VotingWidgetBottomChildLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWidgetBottomChildLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWidgetBottomChildLabelConfiguration ();
        }

        // VotingWidgetNumberChildLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWidgetNumberChildLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWidgetNumberChildLabelConfiguration ();
        }

        // VotingWindowEndMessageLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWindowEndMessageLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWindowEndMessageLabelConfiguration ();
        }

        // VotingWidgetPartySelectionLabelChildLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWidgetPartySelectionLabelChildLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWidgetPartySelectionLabelChildLabelConfiguration ();
        }

        // PartyNullLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartyNullLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartyNullLabelConfiguration ();
        }

        // LoadingBallotsLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LoadingBallotsLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLoadingBallotsLabelConfiguration ();
        }

        // CheckSumLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CheckSumLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCheckSumLabelConfiguration ();
        }

        // InterrupVotingExperienceMessageLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InterrupVotingExperienceMessageLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInterrupVotingExperienceMessageLabelConfiguration ();
        }

        // InterrupVotingExperienceCancelLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InterrupVotingExperienceCancelLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInterrupVotingExperienceCancelLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const BallotOptionWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NumberWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberWidth ();
        }

        // Padding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Padding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPadding ();
        }

        // Display
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Display",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDisplay ();
        }

        // ShowFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowFrame",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowFrame ();
        }

        // SelectedColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectedColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectedColor ();
        }

        // UnSelectedColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UnSelectedColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUnSelectedColor ();
        }

        // BallotFont
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotFont",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotFont ();
        }

        // SeparatorCharacter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SeparatorCharacter",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSeparatorCharacter ();
        }

        // NameIsBeforeSeparator
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NameIsBeforeSeparator",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNameIsBeforeSeparator ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VotingWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ShowBallotOptionFooter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBallotOptionFooter",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBallotOptionFooter ();
        }

        // BottomFrameMargin
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomFrameMargin",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomFrameMargin ();
        }

        // BottomFrameHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomFrameHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomFrameHeight ();
        }

        // BottomFont
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomFont",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomFont ();
        }

        // ShowLanguageConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowLanguageConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowLanguageConfirmation ();
        }

        // WelcomeMessageContestTimer
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WelcomeMessageContestTimer",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWelcomeMessageContestTimer ();
        }

        // ShowBlankVoteQuestion
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBlankVoteQuestion",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBlankVoteQuestion ();
        }

        // ShowBlankVoteConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBlankVoteConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBlankVoteConfirmation ();
        }

        // ShowNullQuestionInBack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowNullQuestionInBack",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowNullQuestionInBack ();
        }

        // ShowLanguageSelectionInBack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowLanguageSelectionInBack",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowLanguageSelectionInBack ();
        }

        // ShowBallotOptionsInContestBack
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBallotOptionsInContestBack",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBallotOptionsInContestBack ();
        }

        // ShowWelcomeContest
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowWelcomeContest",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowWelcomeContest ();
        }

        // EraseBallotOptionsInPartyChanged
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EraseBallotOptionsInPartyChanged",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEraseBallotOptionsInPartyChanged ();
        }

        // QuestionHeaderSameInConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionHeaderSameInConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionHeaderSameInConfirmation ();
        }

        // ConnectTimer
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConnectTimer",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConnectTimer ();
        }

        // ConnectTimerLoading
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConnectTimerLoading",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConnectTimerLoading ();
        }

        // ConnectTimerLanguage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConnectTimerLanguage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConnectTimerLanguage ();
        }

        // LoadingBallotMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LoadingBallotMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLoadingBallotMessage ();
        }

        // NumberOfBallotsToDisplayLoadingBallotMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberOfBallotsToDisplayLoadingBallotMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberOfBallotsToDisplayLoadingBallotMessage ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ReportPrintingWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // CompositeDescriptionLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CompositeDescriptionLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCompositeDescriptionLabelConfiguration ();
        }

        // ReportListTitleLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportListTitleLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getReportListTitleLabelConfiguration ();
        }

        // ProgressMessageLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProgressMessageLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getProgressMessageLabelConfiguration ();
        }

        // ReportListItemLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportListItemLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getReportListItemLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FontConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Size
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Size",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSize ();
        }

        // FontName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontName ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ColorConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Red
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Red",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getRed ());
        }

        // Blue
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Blue",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getBlue ());
        }

        // Green
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Green",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << ::Smartmatic::ConfigurationTypes::AsDouble(i.getGreen ());
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const XMLLabelConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Label_Alignment
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_Alignment",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_Alignment ();
        }

        // Label_VerticalPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_VerticalPadding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_VerticalPadding ();
        }

        // Label_HorizontalPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_HorizontalPadding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_HorizontalPadding ();
        }

        // Label_Family
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_Family",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_Family ();
        }

        // Label_Style
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_Style",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_Style ();
        }

        // Label_Weight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_Weight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_Weight ();
        }

        // Label_Size
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Label_Size",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabel_Size ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const IncomePassphraseEnum& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const IncomePassphraseEnum& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const IncomePassphraseEnum& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ViewButtonConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ViewButtonConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const ViewButtonConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ViewTableConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ViewTableConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const ViewTableConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ExpandButtonConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Spacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Spacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSpacing ();
        }

        // FontSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontSize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontSize ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const BallotOptionSeparateButtonConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ClearButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClearButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getClearButtonWidth ();
        }

        // AcceptButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AcceptButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAcceptButtonWidth ();
        }

        // BackButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BackButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBackButtonWidth ();
        }

        // FontSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontSize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontSize ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PartySeparateButtonConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NullButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NullButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNullButtonWidth ();
        }

        // BackButtonWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BackButtonWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBackButtonWidth ();
        }

        // FontSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontSize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontSize ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CloseElectionSteps& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const CloseElectionSteps& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const CloseElectionSteps& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ChallengePasswordSourceEnum& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ChallengePasswordSourceEnum& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const ChallengePasswordSourceEnum& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ActivatedCardStatisticsConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // HideOfficial
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideOfficial",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideOfficial ();
        }

        // HideDemo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideDemo",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideDemo ();
        }

        // HideRecovery
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideRecovery",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideRecovery ();
        }

        // HideAudio
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideAudio",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideAudio ();
        }

        // HideNonAudio
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideNonAudio",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideNonAudio ();
        }

        // HideCA
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HideCA",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHideCA ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VMInstallationWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Type
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Type",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getType ();
        }

        // ButtonsWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsWidth ();
        }

        // ButtonsHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsHeight ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VMInstallationWidgetTypeConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const VMInstallationWidgetTypeConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const VMInstallationWidgetTypeConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ShowBeidEntryTypeConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ShowBeidEntryTypeConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const ShowBeidEntryTypeConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ElectionBlockStatusList& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ElectionStatus
        //
        for (ElectionBlockStatusList::ElectionStatusConstIterator
             b (i.getElectionStatus ().begin ()), n (i.getElectionStatus ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ElectionStatus",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const HelpConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ImageHelp
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ImageHelp",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getImageHelp ();
        }

        // PdfHelp
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PdfHelp",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPdfHelp ();
        }

        // TitleKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleKey ();
        }

        // UseHelp
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseHelp",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseHelp ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const WizardStateTimeLineConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NameKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NameKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNameKey ();
        }

        // DescriptionKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DescriptionKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDescriptionKey ();
        }

        // RelativeImagePath
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RelativeImagePath",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRelativeImagePath ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const WizardStateToolboxConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ToolboxElementWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ToolboxElementWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getToolboxElementWidth ();
        }

        // ToolboxElementHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ToolboxElementHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getToolboxElementHeight ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const WizardStateHelpConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // TitleKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleKey ();
        }

        // ContentKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContentKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContentKey ();
        }

        // RelativeImagePath
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RelativeImagePath",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRelativeImagePath ();
        }

        // Help
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Help",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHelp ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FunctionalityWizardStateConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PrincipalMenuOptions
        //
        for (FunctionalityWizardStateConfiguration::PrincipalMenuOptionsConstIterator
             b (i.getPrincipalMenuOptions ().begin ()), n (i.getPrincipalMenuOptions ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrincipalMenuOptions",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // ToolbarMenuOptions
        //
        for (FunctionalityWizardStateConfiguration::ToolbarMenuOptionsConstIterator
             b (i.getToolbarMenuOptions ().begin ()), n (i.getToolbarMenuOptions ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ToolbarMenuOptions",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // StateNameKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StateNameKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStateNameKey ();
        }

        // StateDescriptionKey
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StateDescriptionKey",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStateDescriptionKey ();
        }

        // ProcessStatus
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ProcessStatus",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getProcessStatus ();
        }

        // StateHelp
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StateHelp",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStateHelp ();
        }

        // TimeLineConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeLineConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeLineConfiguration ();
        }

        // ToolboxConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ToolboxConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getToolboxConfiguration ();
        }

        // ButtonsLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsLabelConfiguration ();
        }

        // TitleHelpLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleHelpLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleHelpLabelConfiguration ();
        }

        // HelpLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HelpLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHelpLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FunctionalityWizardFlowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // WizardStatesConfiguration
        //
        for (FunctionalityWizardFlowConfiguration::WizardStatesConfigurationConstIterator
             b (i.getWizardStatesConfiguration ().begin ()), n (i.getWizardStatesConfiguration ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WizardStatesConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const NecessaryDevicesConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // DeviceConfiguration
        //
        for (NecessaryDevicesConfiguration::DeviceConfigurationConstIterator
             b (i.getDeviceConfiguration ().begin ()), n (i.getDeviceConfiguration ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DeviceConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DeviceConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const DeviceConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const DeviceConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const MemoryBlock& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const MemoryBlock& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const MemoryBlock& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ReferendumConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // EnableClick
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EnableClick",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEnableClick ();
        }

        // HeaderLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeaderLabelConfiguration ();
        }

        // BottomLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBottomLabelConfiguration ();
        }

        // QuestionLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionLabelConfiguration ();
        }

        // BallotsLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotsLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotsLabelConfiguration ();
        }

        // FrameBottomHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FrameBottomHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFrameBottomHeight ();
        }

        // QuestionWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionWidth ();
        }

        // QuestionHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionHeight ();
        }

        // ButtonsVertical
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsVertical",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsVertical ();
        }

        // BallotBoxTopPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotBoxTopPadding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotBoxTopPadding ();
        }

        // BallotBoxLeftPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotBoxLeftPadding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotBoxLeftPadding ();
        }

        // BallotBoxSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotBoxSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotBoxSpacing ();
        }

        // BallotWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotWidth ();
        }

        // BallotHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotHeight ();
        }

        // ShowBackButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBackButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBackButton ();
        }

        // ShowNullOption
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowNullOption",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowNullOption ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PollingCardConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PMInstallationWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PMInstallationWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPMInstallationWindow ();
        }

        // VMInstallationWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VMInstallationWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVMInstallationWindow ();
        }

        // VotingExperienceWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceWindow ();
        }

        // EndVotingExperienceWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EndVotingExperienceWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEndVotingExperienceWindow ();
        }

        // AssistedCardGeneratorFunctionality
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AssistedCardGeneratorFunctionality",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAssistedCardGeneratorFunctionality ();
        }

        // CardGeneratorFunctionality
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardGeneratorFunctionality",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardGeneratorFunctionality ();
        }

        // RecoveryCardGeneratorFunctionality
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RecoveryCardGeneratorFunctionality",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRecoveryCardGeneratorFunctionality ();
        }

        // VoteProcessDemoFunctionality
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteProcessDemoFunctionality",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVoteProcessDemoFunctionality ();
        }

        // BEIDCardWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BEIDCardWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBEIDCardWidget ();
        }

        // ActivationStatsWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ActivationStatsWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getActivationStatsWidget ();
        }

        // WaitingCardWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WaitingCardWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWaitingCardWidget ();
        }

        // SmartCardReaderDiagnosisWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SmartCardReaderDiagnosisWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSmartCardReaderDiagnosisWidget ();
        }

        // VotingMachineInstallationWidgetInsert
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingMachineInstallationWidgetInsert",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingMachineInstallationWidgetInsert ();
        }

        // VotingMachineInstallationWidgetExtract
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingMachineInstallationWidgetExtract",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingMachineInstallationWidgetExtract ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const AlarmBoxMonitorConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Enable
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Enable",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEnable ();
        }

        // MonitoringTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MonitoringTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMonitoringTime ();
        }

        // SearchTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SearchTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSearchTime ();
        }
      }

      void
      serializePMWidgetConfiguration (::std::ostream& o,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializePMWidgetConfiguration (::std::ostream& o,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializePMWidgetConfiguration (::std::ostream& o,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializePMWidgetConfiguration (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializePMWidgetConfiguration (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializePMWidgetConfiguration (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializePMWidgetConfiguration (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      ::Smartmatic::ConfigurationTypes::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PMWidgetConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PMWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializePMWidgetConfiguration (const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& s,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "PMWidgetConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration",
            m, f));

        ::Smartmatic::SAES::Configuration::serializePMWidgetConfiguration (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const PreviewLanguageConfig& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const PreviewLanguageConfig& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const PreviewLanguageConfig& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const EntryDividedWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NumberOfDivision
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberOfDivision",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberOfDivision ();
        }

        // MaxCharacters
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxCharacters",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxCharacters ();
        }

        // EntryWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EntryWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEntryWidth ();
        }

        // Visibility
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Visibility",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVisibility ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CountConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // CountType
        //
        for (CountConfiguration::CountTypeConstIterator
             b (i.getCountType ().begin ()), n (i.getCountType ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CountType",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CountTypeConfig& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const CountTypeConfig& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const CountTypeConfig& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const StartConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // LoadSelectionLanguage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LoadSelectionLanguage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLoadSelectionLanguage ();
        }

        // PersistLanguage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersistLanguage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPersistLanguage ();
        }

        // InfoMachine
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoMachine",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoMachine ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const BEIDCardWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // TitleErrorFontConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleErrorFontConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleErrorFontConf ();
        }

        // TextErrorFontConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextErrorFontConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTextErrorFontConf ();
        }

        // TimeoutError
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeoutError",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeoutError ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const IDCardProcessConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PMInstall
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PMInstall",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPMInstall ();
        }

        // VMInstall
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VMInstall",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVMInstall ();
        }

        // OpenElection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OpenElection",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOpenElection ();
        }

        // CloseVotation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseVotation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseVotation ();
        }

        // CloseElection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseElection",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseElection ();
        }

        // CloseNoteRegister
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CloseNoteRegister",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCloseNoteRegister ();
        }

        // IncidentReport
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncidentReport",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIncidentReport ();
        }

        // AssistedActivation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AssistedActivation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAssistedActivation ();
        }

        // DisabledVoter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisabledVoter",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDisabledVoter ();
        }

        // DisabledVoterHelper
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DisabledVoterHelper",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDisabledVoterHelper ();
        }

        // PoliceNote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PoliceNote",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPoliceNote ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PollWorkerRegisterConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // WorkerMemberType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WorkerMemberType",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWorkerMemberType ();
        }

        // RegisterMax
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterMax",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRegisterMax ();
        }

        // RegisterRequired
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterRequired",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRegisterRequired ();
        }

        // IDConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IDConfig",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIDConfig ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const IDConfig& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Name
        //
        if (i.getName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Name",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getName ();
        }

        // LastName
        //
        if (i.getLastName ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LastName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getLastName ();
        }

        // IDNumber
        //
        if (i.getIDNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IDNumber",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getIDNumber ();
        }

        // Gender
        //
        if (i.getGender ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Gender",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getGender ();
        }

        // Nationality
        //
        if (i.getNationality ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Nationality",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getNationality ();
        }

        // NationalityNumber
        //
        if (i.getNationalityNumber ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NationalityNumber",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getNationalityNumber ();
        }

        // Account
        //
        if (i.getAccount ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Account",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getAccount ();
        }

        // Party
        //
        if (i.getParty ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Party",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getParty ();
        }

        // Phone
        //
        if (i.getPhone ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Phone",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getPhone ();
        }

        // AllDay
        //
        if (i.getAllDay ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AllDay",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getAllDay ();
        }

        // InfoDeputy
        //
        if (i.getInfoDeputy ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoDeputy",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getInfoDeputy ();
        }

        // BureauAssigned
        //
        if (i.getBureauAssigned ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BureauAssigned",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getBureauAssigned ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const IDProperties& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Mandatory
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Mandatory",
              e));

          a << i.getMandatory ();
        }

        // Type
        //
        if (i.getType ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Type",
              e));

          a << *i.getType ();
        }

        // Max
        //
        if (i.getMax ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Max",
              e));

          a << *i.getMax ();
        }

        // Mask
        //
        if (i.getMask ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Mask",
              e));

          a << *i.getMask ();
        }

        // Regex
        //
        if (i.getRegex ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Regex",
              e));

          a << *i.getRegex ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RegisterWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // VerticalFilling
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VerticalFilling",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVerticalFilling ();
        }

        // MaxColumn
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxColumn",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxColumn ();
        }

        // MaxRow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxRow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxRow ();
        }

        // WidthBox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WidthBox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWidthBox ();
        }

        // HeigthBox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeigthBox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeigthBox ();
        }

        // SpacingBox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SpacingBox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSpacingBox ();
        }

        // ShowHeader
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowHeader",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowHeader ();
        }

        // ShowCenter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowCenter",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowCenter ();
        }

        // ShowBottom
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBottom",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBottom ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ElementType& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ElementType& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const ElementType& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const InfoMachineConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const InfoMachineConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const InfoMachineConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      serializeSaesGUIConfiguration (::std::ostream& o,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeSaesGUIConfiguration (::std::ostream& o,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesGUIConfiguration (::std::ostream& o,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     ::xercesc::DOMErrorHandler& h,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesGUIConfiguration (::xercesc::XMLFormatTarget& t,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeSaesGUIConfiguration (::xercesc::XMLFormatTarget& t,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesGUIConfiguration (::xercesc::XMLFormatTarget& t,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     ::xercesc::DOMErrorHandler& h,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesGUIConfiguration (::xercesc::DOMDocument& d,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     ::Smartmatic::ConfigurationTypes::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SaesGUIConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesGUIConfiguration")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesGUIConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration");
        }
      }

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeSaesGUIConfiguration (const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& s,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                     ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SaesGUIConfiguration",
            "http://www.smartmatic.com/SaesGUIConfiguration",
            m, f));

        ::Smartmatic::SAES::Configuration::serializeSaesGUIConfiguration (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const SmartCardReaderDiagnosisConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // TimeoutToFail
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeoutToFail",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeoutToFail ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ChangeHourFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // TimeLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeLabelConfiguration ();
        }

        // TitlesLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitlesLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitlesLabelConfiguration ();
        }

        // PrincipalTitleLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrincipalTitleLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrincipalTitleLabelConfiguration ();
        }

        // ButtonArrowWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonArrowWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonArrowWidth ();
        }

        // ButtonArrowHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonArrowHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonArrowHeight ();
        }

        // ButtonValidateWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonValidateWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonValidateWidth ();
        }

        // ButtonValidateHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonValidateHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonValidateHeight ();
        }

        // EntryWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EntryWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEntryWidth ();
        }

        // EntryHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EntryHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEntryHeight ();
        }

        // FontEntrySize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontEntrySize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFontEntrySize ();
        }

        // TableVerticalSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TableVerticalSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTableVerticalSpacing ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FunctionalitiesConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // FunctionalityConfiguration
        //
        for (FunctionalitiesConfiguration::FunctionalityConfigurationConstIterator
             b (i.getFunctionalityConfiguration ().begin ()), n (i.getFunctionalityConfiguration ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FunctionalityConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RunFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // FunctionalityDescriptor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FunctionalityDescriptor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFunctionalityDescriptor ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const InstallationWizardConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // AskForId
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AskForId",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAskForId ();
        }

        // IncomePassphrase
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncomePassphrase",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIncomePassphrase ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PMWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ShowImages
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowImages",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowImages ();
        }

        // LoginCaseSensitiveConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LoginCaseSensitiveConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLoginCaseSensitiveConfiguration ();
        }

        // PasswordWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PasswordWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPasswordWidgetConfiguration ();
        }

        // ContingencyWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContingencyWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContingencyWidgetConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CardActivatorFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // CustomAttributesPresentation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CustomAttributesPresentation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCustomAttributesPresentation ();
        }

        // SelectedColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectedColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectedColor ();
        }

        // UnSelectedColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UnSelectedColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUnSelectedColor ();
        }

        // MinimumDemoCounterToAllowActivation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinimumDemoCounterToAllowActivation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMinimumDemoCounterToAllowActivation ();
        }

        // AssistedActivationBySelection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AssistedActivationBySelection",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAssistedActivationBySelection ();
        }

        // ShowConfirmationButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowConfirmationButtons",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowConfirmationButtons ();
        }

        // CardStatisticsConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardStatisticsConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardStatisticsConfiguration ();
        }

        // StatisticsTitleLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsTitleLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsTitleLabelConfiguration ();
        }

        // StatisticsTitleColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsTitleColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsTitleColor ();
        }

        // ActivatedAfterInsertingCard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ActivatedAfterInsertingCard",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getActivatedAfterInsertingCard ();
        }

        // ShowAudioCheck
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowAudioCheck",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowAudioCheck ();
        }

        // CardActivationTotalCountConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivationTotalCountConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivationTotalCountConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CardRecoveryFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // MinimumDemoCounterToAllowActivation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinimumDemoCounterToAllowActivation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMinimumDemoCounterToAllowActivation ();
        }

        // ShowConfirmationButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowConfirmationButtons",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowConfirmationButtons ();
        }

        // CleanOnCorrectActivation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CleanOnCorrectActivation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCleanOnCorrectActivation ();
        }

        // CleanOnIncorrectActivation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CleanOnIncorrectActivation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCleanOnIncorrectActivation ();
        }

        // CardStatisticsConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardStatisticsConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardStatisticsConfiguration ();
        }

        // StatisticsTitleLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsTitleLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsTitleLabelConfiguration ();
        }

        // StatisticsTitleColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsTitleColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsTitleColor ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteDemoFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PersistVote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersistVote",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPersistVote ();
        }

        // ShowBarcodeInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBarcodeInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBarcodeInPreview ();
        }

        // BarcodeInParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeInParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeInParams ();
        }

        // BarcodeOutParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeOutParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeOutParams ();
        }

        // LabelSelectedConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LabelSelectedConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabelSelectedConfiguration ();
        }

        // LabelUnselectedConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LabelUnselectedConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabelUnselectedConfiguration ();
        }

        // TitleFontConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleFontConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleFontConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CardAssistedActivationFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // MinimumDemoCounterToAllowActivation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinimumDemoCounterToAllowActivation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMinimumDemoCounterToAllowActivation ();
        }

        // PreviewTitlesColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PreviewTitlesColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPreviewTitlesColor ();
        }

        // PreviewContentsColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PreviewContentsColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPreviewContentsColor ();
        }

        // InstrunctionLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InstrunctionLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInstrunctionLabelConfiguration ();
        }

        // NameLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NameLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNameLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PrinterDiagnosisConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PrintGraphicalForPresident
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrintGraphicalForPresident",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrintGraphicalForPresident ();
        }

        // DoNotCheckBeforePrintDiagnostic
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DoNotCheckBeforePrintDiagnostic",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDoNotCheckBeforePrintDiagnostic ();
        }

        // ButtonsWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsWidth ();
        }

        // ButtonsHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsHeight ();
        }

        // ButtonsFontSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsFontSize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonsFontSize ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const GeneralDiagnosisConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // DiagnosisLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosisLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDiagnosisLabelConfiguration ();
        }

        // DiagnosisFooterLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosisFooterLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDiagnosisFooterLabelConfiguration ();
        }

        // ResultErrorLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ResultErrorLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getResultErrorLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const TouchScreenCalibrationConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NumberOfCalibrationPoints
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberOfCalibrationPoints",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberOfCalibrationPoints ();
        }

        // HeightOfButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeightOfButtons",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeightOfButtons ();
        }

        // WidthOfButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WidthOfButtons",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWidthOfButtons ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const EventSoundsConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PMInstalationSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PMInstalationSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPMInstalationSound ();
        }

        // VMInstalationSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VMInstalationSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVMInstalationSound ();
        }

        // AuthenticationValidPasswordSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AuthenticationValidPasswordSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAuthenticationValidPasswordSound ();
        }

        // AuthenticationInvalidPasswordSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AuthenticationInvalidPasswordSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAuthenticationInvalidPasswordSound ();
        }

        // VotingExperienceSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceSound ();
        }

        // BallotOptionSelectSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotOptionSelectSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBallotOptionSelectSound ();
        }

        // PartySelectSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartySelectSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartySelectSound ();
        }

        // DiagnosisSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosisSound",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDiagnosisSound ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const BarcodeDiagnosisConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // TimeOut
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeOut",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeOut ();
        }

        // StringToEncode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StringToEncode",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStringToEncode ();
        }

        // PrintAutomaticBarcode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrintAutomaticBarcode",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrintAutomaticBarcode ();
        }

        // BarcodeCommandsName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeCommandsName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeCommandsName ();
        }

        // SkipPrinterError
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SkipPrinterError",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSkipPrinterError ();
        }

        // BarcodeInParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeInParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeInParams ();
        }

        // BarcodeOutParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeOutParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeOutParams ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const BrightnessDiagnosisConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // TimeDelayButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeDelayButtons",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeDelayButtons ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const AllDiagnosisConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // DiagnosticToApply
        //
        for (AllDiagnosisConfiguration::DiagnosticToApplyConstIterator
             b (i.getDiagnosticToApply ().begin ()), n (i.getDiagnosticToApply ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosticToApply",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // AlarmDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlarmDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAlarmDiagnosisWaitTime ();
        }

        // BarcodeDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeDiagnosisWaitTime ();
        }

        // ContrastDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContrastDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContrastDiagnosisWaitTime ();
        }

        // CalibrationDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CalibrationDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCalibrationDiagnosisWaitTime ();
        }

        // FlashDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FlashDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFlashDiagnosisWaitTime ();
        }

        // PrinterDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrinterDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrinterDiagnosisWaitTime ();
        }

        // SmartcardDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SmartcardDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSmartcardDiagnosisWaitTime ();
        }

        // PrinterDiagnosisWaitTimeOnOk
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrinterDiagnosisWaitTimeOnOk",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrinterDiagnosisWaitTimeOnOk ();
        }

        // PrinterDiagnosisWaitTimeOnCancel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrinterDiagnosisWaitTimeOnCancel",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrinterDiagnosisWaitTimeOnCancel ();
        }

        // CalibrationDiagnosisWaitTimeOnOk
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CalibrationDiagnosisWaitTimeOnOk",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCalibrationDiagnosisWaitTimeOnOk ();
        }

        // ContrastDiagnosisWaitTimeOnOk
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContrastDiagnosisWaitTimeOnOk",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContrastDiagnosisWaitTimeOnOk ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const AutomaticWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // DiagnosticToApply
        //
        for (AutomaticWindowConfiguration::DiagnosticToApplyConstIterator
             b (i.getDiagnosticToApply ().begin ()), n (i.getDiagnosticToApply ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosticToApply",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // BlockDiagnostic
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlockDiagnostic",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBlockDiagnostic ();
        }

        // BlockDiagnosticTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlockDiagnosticTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBlockDiagnosticTitle ();
        }

        // BlockDiagnosticButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlockDiagnosticButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBlockDiagnosticButton ();
        }

        // UseOkButtonOnSomeNonMandatoryDiagnosticFailed
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseOkButtonOnSomeNonMandatoryDiagnosticFailed",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseOkButtonOnSomeNonMandatoryDiagnosticFailed ();
        }

        // UseShutDownButtonOnSomeMandatoryDiagnosticFailed
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseShutDownButtonOnSomeMandatoryDiagnosticFailed",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseShutDownButtonOnSomeMandatoryDiagnosticFailed ();
        }

        // AlarmDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlarmDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAlarmDiagnosisWaitTime ();
        }

        // BarcodeDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeDiagnosisWaitTime ();
        }

        // FlashDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FlashDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFlashDiagnosisWaitTime ();
        }

        // PrinterDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrinterDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrinterDiagnosisWaitTime ();
        }

        // SmartcardDiagnosisWaitTime
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SmartcardDiagnosisWaitTime",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSmartcardDiagnosisWaitTime ();
        }

        // DiagnosticReviewWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosticReviewWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDiagnosticReviewWidth ();
        }

        // DiagnosticReviewHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosticReviewHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDiagnosticReviewHeight ();
        }

        // DiagnosticReviewLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DiagnosticReviewLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDiagnosticReviewLabelConfiguration ();
        }

        // ShowFooterInAutoDiagnosis
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowFooterInAutoDiagnosis",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowFooterInAutoDiagnosis ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ContingencyCardWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // RetryButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RetryButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRetryButtonConf ();
        }

        // ShutdownButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShutdownButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShutdownButtonConf ();
        }

        // TitleFontConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleFontConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleFontConf ();
        }

        // TextFontConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextFontConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTextFontConf ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const MemoryStateWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ButtonDelay
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonDelay",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonDelay ();
        }

        // ButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonConf ();
        }

        // TextFontConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextFontConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTextFontConf ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const HelpWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PrintButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrintButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrintButtonConf ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const WaitingForCardWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ShowSimulateButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowSimulateButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowSimulateButton ();
        }

        // ShowBackButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBackButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBackButton ();
        }

        // ViewPrevious
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ViewPrevious",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getViewPrevious ();
        }

        // AllowVotePreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AllowVotePreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAllowVotePreview ();
        }

        // UsePrintPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UsePrintPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUsePrintPreview ();
        }

        // UseVerticalTableInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseVerticalTableInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseVerticalTableInPreview ();
        }

        // PreviewVoteLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PreviewVoteLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPreviewVoteLabelConfiguration ();
        }

        // PreviewVoteButtonConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PreviewVoteButtonConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPreviewVoteButtonConfiguration ();
        }

        // TimeoutPreviewVote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeoutPreviewVote",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeoutPreviewVote ();
        }

        // TimeoutPreviewVoteClose
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeoutPreviewVoteClose",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeoutPreviewVoteClose ();
        }

        // ShowBarcodeInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBarcodeInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBarcodeInPreview ();
        }

        // BarcodeCommandsName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeCommandsName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeCommandsName ();
        }

        // PreviewLanguageConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PreviewLanguageConfig",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPreviewLanguageConfig ();
        }

        // BlockOnCardInsertionError
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlockOnCardInsertionError",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBlockOnCardInsertionError ();
        }

        // IsNeopBlockingCondition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IsNeopBlockingCondition",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getIsNeopBlockingCondition ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const LanguageSelectionWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // LanguageButton
        //
        for (LanguageSelectionWindowConfiguration::LanguageButtonConstIterator
             b (i.getLanguageButton ().begin ()), n (i.getLanguageButton ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LanguageButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const StatisticFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // RowsSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RowsSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRowsSpacing ();
        }

        // ColumnsSpacing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ColumnsSpacing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getColumnsSpacing ();
        }

        // ButtonConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonConfiguration ();
        }

        // TitleLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleLabelConfiguration ();
        }

        // StatisticsLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const OpenElectionFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ShowTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowTitle ();
        }

        // ButtonConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonConfiguration ();
        }

        // DialogLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DialogLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDialogLabelConfiguration ();
        }

        // OpenElectionSteps
        //
        for (OpenElectionFunctionalityConfiguration::OpenElectionStepsConstIterator
             b (i.getOpenElectionSteps ().begin ()), n (i.getOpenElectionSteps ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OpenElectionSteps",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const AuthenticationWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PasswordLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PasswordLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPasswordLabelConfiguration ();
        }

        // AlarmLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AlarmLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAlarmLabelConfiguration ();
        }

        // InfoLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoLabelConfiguration ();
        }

        // VotingInfoLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingInfoLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingInfoLabelConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DurationWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // LeaveFieldsBlank
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LeaveFieldsBlank",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLeaveFieldsBlank ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CloseElectionFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ButtonConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonConfiguration ();
        }

        // ClosingElectionSteps
        //
        for (CloseElectionFunctionalityConfiguration::ClosingElectionStepsConstIterator
             b (i.getClosingElectionSteps ().begin ()), n (i.getClosingElectionSteps ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ClosingElectionSteps",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // ShowSignQuestion
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowSignQuestion",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowSignQuestion ();
        }

        // ShowSignConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowSignConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowSignConfirmation ();
        }

        // ContinueCloseOnSignFail
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContinueCloseOnSignFail",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContinueCloseOnSignFail ();
        }

        // ShowConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowConfirmation ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ActivationConsolidationFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ShowTotalVotes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowTotalVotes",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowTotalVotes ();
        }

        // ShowOfficialVotes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowOfficialVotes",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowOfficialVotes ();
        }

        // ShowDuplicatesVotes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowDuplicatesVotes",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowDuplicatesVotes ();
        }

        // ShowScanMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowScanMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowScanMessage ();
        }

        // ShowBarcodeMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBarcodeMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBarcodeMessage ();
        }

        // ShowActivateCards
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowActivateCards",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowActivateCards ();
        }

        // SelectedBoxColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectedBoxColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectedBoxColor ();
        }

        // UnselectedBoxColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UnselectedBoxColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUnselectedBoxColor ();
        }

        // SelectedFontColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SelectedFontColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSelectedFontColor ();
        }

        // UnselectedFontColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UnselectedFontColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUnselectedFontColor ();
        }

        // LabelSelectedConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LabelSelectedConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabelSelectedConfiguration ();
        }

        // LabelUnselectedConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LabelUnselectedConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLabelUnselectedConfiguration ();
        }

        // TitleHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleHeight ();
        }

        // TitleFontConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleFontConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTitleFontConfiguration ();
        }

        // StatsConsolidationHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatsConsolidationHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatsConsolidationHeight ();
        }

        // StatsConsolidationFontConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatsConsolidationFontConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatsConsolidationFontConfiguration ();
        }

        // StatsActivationHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatsActivationHeight",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatsActivationHeight ();
        }

        // StatsActivationFontConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatsActivationFontConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatsActivationFontConfiguration ();
        }

        // InstructionFontConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InstructionFontConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInstructionFontConfiguration ();
        }

        // DevicesLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DevicesLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDevicesLabelConfiguration ();
        }

        // ActivateCardsWithoutBarcode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ActivateCardsWithoutBarcode",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getActivateCardsWithoutBarcode ();
        }

        // ConsolidateVoteWithOneMemory
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidateVoteWithOneMemory",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidateVoteWithOneMemory ();
        }

        // BarcodeInParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeInParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeInParams ();
        }

        // BarcodeOutParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeOutParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeOutParams ();
        }

        // ScanConsolidationConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScanConsolidationConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getScanConsolidationConfiguration ();
        }

        // CardActivationTotalCountConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivationTotalCountConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivationTotalCountConfiguration ();
        }

        // ConsolidationTotalCountConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidationTotalCountConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidationTotalCountConfiguration ();
        }

        // ConsolidationOfficialCountConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidationOfficialCountConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidationOfficialCountConfiguration ();
        }

        // TimerSleepWriteCard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimerSleepWriteCard",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimerSleepWriteCard ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CloseVotationFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // RequestForID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RequestForID",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRequestForID ();
        }

        // MinimumOfficialsActivationForConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinimumOfficialsActivationForConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMinimumOfficialsActivationForConfirmation ();
        }

        // ShowConfirmationMessageWhenClosing
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowConfirmationMessageWhenClosing",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowConfirmationMessageWhenClosing ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const InitializationWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ContingencyCardEnabled
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ContingencyCardEnabled",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getContingencyCardEnabled ();
        }

        // RemoveContingencyCardTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RemoveContingencyCardTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRemoveContingencyCardTitle ();
        }

        // RemoveContingencyCardText
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RemoveContingencyCardText",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRemoveContingencyCardText ();
        }

        // RequestForIDOnPresidentMachineInitialization
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RequestForIDOnPresidentMachineInitialization",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRequestForIDOnPresidentMachineInitialization ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const IncidentReportFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ButtonConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonConfiguration ();
        }

        // IncidentReportConfiguration
        //
        for (IncidentReportFunctionalityConfiguration::IncidentReportConfigurationConstIterator
             b (i.getIncidentReportConfiguration ().begin ()), n (i.getIncidentReportConfiguration ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncidentReportConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // CompleteReportParameters
        //
        for (IncidentReportFunctionalityConfiguration::CompleteReportParametersConstIterator
             b (i.getCompleteReportParameters ().begin ()), n (i.getCompleteReportParameters ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CompleteReportParameters",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }

        // ShowID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowID",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowID ();
        }

        // ShowDeleteConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowDeleteConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowDeleteConfirmation ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PollWorkerRegisterFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ButtonConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getButtonConfiguration ();
        }

        // ShowDeleteConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowDeleteConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowDeleteConfirmation ();
        }

        // RegisterWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRegisterWidgetConfiguration ();
        }

        // PollWorkerRegisterConfiguration
        //
        for (PollWorkerRegisterFunctionalityConfiguration::PollWorkerRegisterConfigurationConstIterator
             b (i.getPollWorkerRegisterConfiguration ().begin ()), n (i.getPollWorkerRegisterConfiguration ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PollWorkerRegisterConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CloseNoteRegisterFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // AddButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAddButtonConf ();
        }

        // NextButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NextButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNextButtonConf ();
        }

        // AddCancelButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddCancelButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAddCancelButtonConf ();
        }

        // RegisterWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRegisterWidgetConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteConsolidationFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // UsePrintPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UsePrintPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUsePrintPreview ();
        }

        // UseVerticalTableInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseVerticalTableInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseVerticalTableInPreview ();
        }

        // CounterWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CounterWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCounterWidth ();
        }

        // CounterPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CounterPadding",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCounterPadding ();
        }

        // ShowVotingMachineCustomAttribute
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowVotingMachineCustomAttribute",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowVotingMachineCustomAttribute ();
        }

        // StatisticsTitleLabelConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsTitleLabelConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsTitleLabelConfiguration ();
        }

        // StatisticsTitleColor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticsTitleColor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStatisticsTitleColor ();
        }

        // ShowBarcodeInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBarcodeInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBarcodeInPreview ();
        }

        // ConsolidateDemoVotes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidateDemoVotes",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidateDemoVotes ();
        }

        // ConsolidateSimulatedVotes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidateSimulatedVotes",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidateSimulatedVotes ();
        }

        // AuditModeResources
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AuditModeResources",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAuditModeResources ();
        }

        // BarcodeInParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeInParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeInParams ();
        }

        // BarcodeOutParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeOutParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeOutParams ();
        }

        // ConsolidationTotalCountConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidationTotalCountConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidationTotalCountConfiguration ();
        }

        // ConsolidationOfficialCountConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConsolidationOfficialCountConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getConsolidationOfficialCountConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PrintPreviewFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // UsePrintPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UsePrintPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUsePrintPreview ();
        }

        // UseVerticalTableInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseVerticalTableInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getUseVerticalTableInPreview ();
        }

        // ShowBarcodeInPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBarcodeInPreview",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowBarcodeInPreview ();
        }

        // BarcodeInParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeInParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeInParams ();
        }

        // BarcodeOutParams
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeOutParams",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getBarcodeOutParams ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const LogReportFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // PrinterMessageTimeout
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrinterMessageTimeout",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrinterMessageTimeout ();
        }

        // PageSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PageSize",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPageSize ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CloseNotetFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // MinimunNotesToRegister
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MinimunNotesToRegister",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMinimunNotesToRegister ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VotingExperienceValidationScreensFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ScreenOnlyFirstBallot
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScreenOnlyFirstBallot",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getScreenOnlyFirstBallot ();
        }

        // Autorun
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Autorun",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAutorun ();
        }

        // TimeForStart
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeForStart",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeForStart ();
        }

        // Autoclose
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Autoclose",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAutoclose ();
        }

        // TimeForClose
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeForClose",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeForClose ();
        }

        // TimeToShow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeToShow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeToShow ();
        }

        // TimeToHide
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeToHide",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeToHide ();
        }

        // TimeAfterCapture
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeAfterCapture",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeAfterCapture ();
        }

        // CaptureWholeScreen
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CaptureWholeScreen",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCaptureWholeScreen ();
        }

        // PartySelImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartySelImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartySelImageFormatName ();
        }

        // OptionSelImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OptionSelImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOptionSelImageFormatName ();
        }

        // CustomAttrSelImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CustomAttrSelImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCustomAttrSelImageFormatName ();
        }

        // CustomAttrConfImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CustomAttrConfImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCustomAttrConfImageFormatName ();
        }

        // LanguageSelImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LanguageSelImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLanguageSelImageFormatName ();
        }

        // LanguageSelImageFormatNameConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LanguageSelImageFormatNameConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLanguageSelImageFormatNameConfirmation ();
        }

        // SuperNullImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperNullImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperNullImageFormatName ();
        }

        // SuperNullImageFormatNameConfirmation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SuperNullImageFormatNameConfirmation",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSuperNullImageFormatNameConfirmation ();
        }

        // PrintImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrintImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPrintImageFormatName ();
        }

        // CardRemotionIndImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardRemotionIndImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardRemotionIndImageFormatName ();
        }

        // CardRemovedImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardRemovedImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardRemovedImageFormatName ();
        }

        // FoldVoteImageFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FoldVoteImageFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFoldVoteImageFormatName ();
        }

        // NullImageConfirmationFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NullImageConfirmationFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNullImageConfirmationFormatName ();
        }

        // WelcomeScreenFormatName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "WelcomeScreenFormatName",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWelcomeScreenFormatName ();
        }

        // ShowDialog
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowDialog",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowDialog ();
        }

        // ScreensButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ScreensButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getScreensButtonConf ();
        }

        // CheckImageFile
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CheckImageFile",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCheckImageFile ();
        }

        // ShowFinalMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowFinalMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowFinalMessage ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VotingForDisabledFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // AddButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAddButtonConf ();
        }

        // QuestionTitleConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionTitleConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionTitleConfiguration ();
        }

        // QuestionButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QuestionButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getQuestionButtonConf ();
        }

        // InfoTitleConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoTitleConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoTitleConfiguration ();
        }

        // InfoIDConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoIDConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoIDConfiguration ();
        }

        // InfoTextConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoTextConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoTextConfiguration ();
        }

        // InfoErrorConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoErrorConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoErrorConfiguration ();
        }

        // TimeOutInfoError
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeOutInfoError",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getTimeOutInfoError ();
        }

        // AddCancelButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddCancelButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAddCancelButtonConf ();
        }

        // RegisterWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRegisterWidgetConfiguration ();
        }

        // CommentConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CommentConfig",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCommentConfig ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const PoliceNoteRegisterFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // AddButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAddButtonConf ();
        }

        // AddCancelButtonConf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddCancelButtonConf",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getAddCancelButtonConf ();
        }

        // RegisterWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterWidgetConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRegisterWidgetConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DataUtilsValidatorFunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // KeyFile
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KeyFile",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getKeyFile ();
        }

        // Separator
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Separator",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getSeparator ();
        }

        // PositionCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PositionCode",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPositionCode ();
        }

        // PositionPassword
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PositionPassword",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPositionPassword ();
        }

        // Columns
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Columns",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getColumns ();
        }

        // Width
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Width",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getWidth ();
        }

        // Height
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Height",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getHeight ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ThemesConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // OfficialThemeConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "OfficialThemeConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getOfficialThemeConfiguration ();
        }

        // DemoThemeConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DemoThemeConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getDemoThemeConfiguration ();
        }

        // RecoveryThemeConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RecoveryThemeConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getRecoveryThemeConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const MenuOptions& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Option
        //
        for (MenuOptions::OptionConstIterator
             b (i.getOption ().begin ()), n (i.getOption ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Option",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CheckSumFailOption& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const CheckSumFailOption& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const CheckSumFailOption& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LoadingBallotMessage& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const LoadingBallotMessage& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const LoadingBallotMessage& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Label_Alignment& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Label_Alignment& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const Label_Alignment& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Label_Style& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Label_Style& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const Label_Style& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const Label_Weight& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const Label_Weight& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const Label_Weight& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const PMWidgetConfiguration1& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // NumberOfDivision
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumberOfDivision",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getNumberOfDivision ();
        }

        // MaxCharacters
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxCharacters",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getMaxCharacters ();
        }

        // EntryWidth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EntryWidth",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEntryWidth ();
        }

        // ShowImages
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowImages",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowImages ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const FunctionalityConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // FunctionalityDescriptor
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FunctionalityDescriptor",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFunctionalityDescriptor ();
        }

        // FunctionalityExitToAuthentication
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FunctionalityExitToAuthentication",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getFunctionalityExitToAuthentication ();
        }

        // ChallengeIsEnable
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChallengeIsEnable",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getChallengeIsEnable ();
        }

        // ChallengePasswordSource
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChallengePasswordSource",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getChallengePasswordSource ();
        }

        // ElectionBlockStatus
        //
        if (i.getElectionBlockStatus ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ElectionBlockStatus",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getElectionBlockStatus ();
        }

        // Help
        //
        if (i.getHelp ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Help",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getHelp ();
        }

        // NecessaryDevicesConfiguration
        //
        if (i.getNecessaryDevicesConfiguration ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NecessaryDevicesConfiguration",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getNecessaryDevicesConfiguration ();
        }

        // ShowExitMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowExitMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getShowExitMessage ();
        }

        // BlockMemoryBehavior
        //
        if (i.getBlockMemoryBehavior ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BlockMemoryBehavior",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << *i.getBlockMemoryBehavior ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const LanguageButton& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // LanguageCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LanguageCode",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLanguageCode ();
        }

        // LanguageImageFile
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LanguageImageFile",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getLanguageImageFile ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const OfficialThemeConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // VotingWindowButton
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWindowButton",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWindowButton ();
        }

        // VotingExperiencePartyEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperiencePartyEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperiencePartyEventbox ();
        }

        // VotingExperienceWindow
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceWindow",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceWindow ();
        }

        // VotingExperienceBallotOptionEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceBallotOptionEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceBallotOptionEventbox ();
        }

        // CardActivatorFunctionalityMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivatorFunctionalityMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivatorFunctionalityMessage ();
        }

        // CardActivatorMessageEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivatorMessageEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivatorMessageEventbox ();
        }

        // CardActivatorFunctionalityEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivatorFunctionalityEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivatorFunctionalityEventbox ();
        }

        // CardActivatorValuesEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivatorValuesEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivatorValuesEventbox ();
        }

        // CardActivatorFunctionalityCenterFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CardActivatorFunctionalityCenterFrame",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCardActivatorFunctionalityCenterFrame ();
        }

        // EventboxStepBarcode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventboxStepBarcode",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventboxStepBarcode ();
        }

        // EventboxStepBarcodeTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventboxStepBarcodeTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventboxStepBarcodeTitle ();
        }

        // EventboxStepCardTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventboxStepCardTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventboxStepCardTitle ();
        }

        // VoteDemoFunctionalityMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteDemoFunctionalityMessage",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVoteDemoFunctionalityMessage ();
        }

        // StandInLabelLabel
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StandInLabelLabel",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStandInLabelLabel ();
        }

        // StandInLabelEvent
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StandInLabelEvent",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getStandInLabelEvent ();
        }

        // VotingExperienceSelectBallotOptionWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceSelectBallotOptionWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceSelectBallotOptionWidget ();
        }

        // ChangeLanguageMessageWigdetEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChangeLanguageMessageWigdetEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getChangeLanguageMessageWigdetEventbox ();
        }

        // CustomAttributeComboSelectionsWidgetTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CustomAttributeComboSelectionsWidgetTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCustomAttributeComboSelectionsWidgetTitle ();
        }

        // CustomAttributeCounterWidgetTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CustomAttributeCounterWidgetTitle",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getCustomAttributeCounterWidgetTitle ();
        }

        // EventboxChooseWidgetFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventboxChooseWidgetFrame",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventboxChooseWidgetFrame ();
        }

        // VotingExperiencePartyWidget
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperiencePartyWidget",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperiencePartyWidget ();
        }

        // PartyWidgetEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PartyWidgetEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getPartyWidgetEventbox ();
        }

        // EventboxImageStepInstallationWizard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventboxImageStepInstallationWizard",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventboxImageStepInstallationWizard ();
        }

        // EventboxStepInstallationWizard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventboxStepInstallationWizard",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getEventboxStepInstallationWizard ();
        }

        // ParentKeypadEventbox
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ParentKeypadEventbox",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getParentKeypadEventbox ();
        }

        // InfoFrame
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "InfoFrame",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getInfoFrame ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DemoThemeConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // VotingWindowButtonDemo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWindowButtonDemo",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWindowButtonDemo ();
        }

        // VotingExperiencePartyEventboxDemo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperiencePartyEventboxDemo",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperiencePartyEventboxDemo ();
        }

        // VotingExperienceWindowDemo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceWindowDemo",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceWindowDemo ();
        }

        // VotingExperienceBallotOptionEventboxDemo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceBallotOptionEventboxDemo",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceBallotOptionEventboxDemo ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RecoveryThemeConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // VotingWindowButtonRecovery
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingWindowButtonRecovery",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingWindowButtonRecovery ();
        }

        // VotingExperiencePartyEventboxRecovery
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperiencePartyEventboxRecovery",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperiencePartyEventboxRecovery ();
        }

        // VotingExperienceWindowRecovery
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceWindowRecovery",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceWindowRecovery ();
        }

        // VotingExperienceBallotOptionEventboxRecovery
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VotingExperienceBallotOptionEventboxRecovery",
              "http://www.smartmatic.com/SaesGUIConfiguration",
              e));

          s << i.getVotingExperienceBallotOptionEventboxRecovery ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

