// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SaesGUIConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SAES_GUICONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SAES_GUICONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
#include <Voting/Status/election-status-schema.hxx>
#include <Voting/PBReports/pollworkers-schema.hxx>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
   * schema namespace.
   */
  namespace ConfigurationTypes
  {
    // anyType and anySimpleType.
    //

    /**
     * @brief C++ type corresponding to the anyType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::type Type;

    /**
     * @brief C++ type corresponding to the anySimpleType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

    /**
     * @brief Alias for the anyType type.
     */
    typedef ::xsd::cxx::tree::type Container;


    // 8-bit
    //

    /**
     * @brief C++ type corresponding to the byte XML Schema
     * built-in type.
     */
    typedef signed char Byte;

    /**
     * @brief C++ type corresponding to the unsignedByte XML Schema
     * built-in type.
     */
    typedef unsigned char UnsignedByte;


    // 16-bit
    //

    /**
     * @brief C++ type corresponding to the short XML Schema
     * built-in type.
     */
    typedef short Short;

    /**
     * @brief C++ type corresponding to the unsignedShort XML Schema
     * built-in type.
     */
    typedef unsigned short UnsignedShort;


    // 32-bit
    //

    /**
     * @brief C++ type corresponding to the int XML Schema
     * built-in type.
     */
    typedef int Int;

    /**
     * @brief C++ type corresponding to the unsignedInt XML Schema
     * built-in type.
     */
    typedef unsigned int UnsignedInt;


    // 64-bit
    //

    /**
     * @brief C++ type corresponding to the long XML Schema
     * built-in type.
     */
    typedef long long Long;

    /**
     * @brief C++ type corresponding to the unsignedLong XML Schema
     * built-in type.
     */
    typedef unsigned long long UnsignedLong;


    // Supposed to be arbitrary-length integral types.
    //

    /**
     * @brief C++ type corresponding to the integer XML Schema
     * built-in type.
     */
    typedef long long Integer;

    /**
     * @brief C++ type corresponding to the nonPositiveInteger XML Schema
     * built-in type.
     */
    typedef long long NonPositiveInteger;

    /**
     * @brief C++ type corresponding to the nonNegativeInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long NonNegativeInteger;

    /**
     * @brief C++ type corresponding to the positiveInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long PositiveInteger;

    /**
     * @brief C++ type corresponding to the negativeInteger XML Schema
     * built-in type.
     */
    typedef long long NegativeInteger;


    // Boolean.
    //

    /**
     * @brief C++ type corresponding to the boolean XML Schema
     * built-in type.
     */
    typedef bool Boolean;


    // Floating-point types.
    //

    /**
     * @brief C++ type corresponding to the float XML Schema
     * built-in type.
     */
    typedef float Float;

    /**
     * @brief C++ type corresponding to the double XML Schema
     * built-in type.
     */
    typedef double Double;

    /**
     * @brief C++ type corresponding to the decimal XML Schema
     * built-in type.
     */
    typedef double Decimal;


    // String types.
    //

    /**
     * @brief C++ type corresponding to the string XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::string< char, SimpleType > String;

    /**
     * @brief C++ type corresponding to the normalizedString XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

    /**
     * @brief C++ type corresponding to the token XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

    /**
     * @brief C++ type corresponding to the Name XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::name< char, Token > Name;

    /**
     * @brief C++ type corresponding to the NMTOKEN XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

    /**
     * @brief C++ type corresponding to the NMTOKENS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

    /**
     * @brief C++ type corresponding to the NCName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

    /**
     * @brief C++ type corresponding to the language XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::language< char, Token > Language;


    // ID/IDREF.
    //

    /**
     * @brief C++ type corresponding to the ID XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::id< char, Ncname > Id;

    /**
     * @brief C++ type corresponding to the IDREF XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

    /**
     * @brief C++ type corresponding to the IDREFS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


    // URI.
    //

    /**
     * @brief C++ type corresponding to the anyURI XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


    // Qualified name.
    //

    /**
     * @brief C++ type corresponding to the QName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


    // Binary.
    //

    /**
     * @brief Binary buffer type.
     */
    typedef ::xsd::cxx::tree::buffer< char > Buffer;

    /**
     * @brief C++ type corresponding to the base64Binary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

    /**
     * @brief C++ type corresponding to the hexBinary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


    // Date/time.
    //

    /**
     * @brief Time zone type.
     */
    typedef ::xsd::cxx::tree::time_zone TimeZone;

    /**
     * @brief C++ type corresponding to the date XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

    /**
     * @brief C++ type corresponding to the dateTime XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

    /**
     * @brief C++ type corresponding to the duration XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

    /**
     * @brief C++ type corresponding to the gDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

    /**
     * @brief C++ type corresponding to the gMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

    /**
     * @brief C++ type corresponding to the gMonthDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

    /**
     * @brief C++ type corresponding to the gYear XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

    /**
     * @brief C++ type corresponding to the gYearMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

    /**
     * @brief C++ type corresponding to the time XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


    // Entity.
    //

    /**
     * @brief C++ type corresponding to the ENTITY XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

    /**
     * @brief C++ type corresponding to the ENTITIES XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


    // Namespace information and list stream. Used in
    // serialization functions.
    //
    /**
     * @brief Namespace serialization information.
     */
    typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

    /**
     * @brief Namespace serialization information map.
     */
    typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

    /**
     * @brief List serialization stream.
     */
    typedef ::xsd::cxx::tree::list_stream< char > ListStream;

    /**
     * @brief Serialization wrapper for the %double type.
     */
    typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

    /**
     * @brief Serialization wrapper for the %decimal type.
     */
    typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

    /**
     * @brief Simple type facet.
     */
    typedef ::xsd::cxx::tree::facet Facet;

    // Flags and properties.
    //

    /**
     * @brief Parsing and serialization flags.
     */
    typedef ::xsd::cxx::tree::flags Flags;

    /**
     * @brief Parsing properties.
     */
    typedef ::xsd::cxx::tree::properties< char > Properties;

    // Parsing/serialization diagnostics.
    //

    /**
     * @brief Error severity.
     */
    typedef ::xsd::cxx::tree::severity Severity;

    /**
     * @brief Error condition.
     */
    typedef ::xsd::cxx::tree::error< char > Error;

    /**
     * @brief List of %error conditions.
     */
    typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

    // Exceptions.
    //

    /**
     * @brief Root of the C++/Tree %exception hierarchy.
     */
    typedef ::xsd::cxx::tree::exception< char > Exception;

    /**
     * @brief Exception indicating that the size argument exceeds
     * the capacity argument.
     */
    typedef ::xsd::cxx::tree::bounds< char > Bounds;

    /**
     * @brief Exception indicating that a duplicate ID value
     * was encountered in the object model.
     */
    typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

    /**
     * @brief Exception indicating a parsing failure.
     */
    typedef ::xsd::cxx::tree::parsing< char > Parsing;

    /**
     * @brief Exception indicating that an expected element
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

    /**
     * @brief Exception indicating that an unexpected element
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

    /**
     * @brief Exception indicating that an expected attribute
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

    /**
     * @brief Exception indicating that an unexpected enumerator
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

    /**
     * @brief Exception indicating that the text content was
     * expected for an element.
     */
    typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

    /**
     * @brief Exception indicating that a prefix-namespace
     * mapping was not provided.
     */
    typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

    /**
     * @brief Exception indicating a serialization failure.
     */
    typedef ::xsd::cxx::tree::serialization< char > Serialization;

    /**
     * @brief Error handler callback interface.
     */
    typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

    /**
     * @brief DOM interaction.
     */
    namespace dom
    {
      /**
       * @brief Automatic pointer for DOMDocument.
       */
      using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
      /**
       * @brief DOM user data key for back pointers to tree nodes.
       */
      const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      class SaesGUIConfiguration;
      class OpenElectionSteps;
      class ScanConsolidationConfiguration;
      class ScanPopUpMessageConfiguration;
      class PositionConfiguration;
      class TreeColumnConfiguration;
      class IncidentReportColumn;
      class IncidentReportTreeViewConfiguration;
      class ButtonConfiguration;
      class ButtonBoxConfiguration;
      class MenuWidgetConfiguration;
      class MenuOption;
      class MenuOptionType;
      class CustomAttributesPresentationType;
      class DiagnosticType;
      class DiagnosticDevice;
      class VotingExperienceConfiguration;
      class PartySelectionConfiguration;
      class PartyWidgetConfiguration;
      class DisplayType;
      class BallotOptionSelectionConfiguration;
      class FillPrincipalConfiguration;
      class FillColumnDynamicConfiguration;
      class PivotConfig;
      class CustomAtributtesWindowConfiguration;
      class ConfirmationWindowConfiguration;
      class FormsCommonControlsConfigurations;
      class FormsMessagesLabelConfigurations;
      class FormsTitleLabelConfigurations;
      class VotingExperienceLabelConfiguration;
      class BallotOptionWidgetConfiguration;
      class VotingWindowConfiguration;
      class ReportPrintingWidgetConfiguration;
      class FontConfiguration;
      class ColorConfiguration;
      class XMLLabelConfiguration;
      class IncomePassphraseEnum;
      class ViewButtonConfiguration;
      class ViewTableConfiguration;
      class ExpandButtonConfiguration;
      class BallotOptionSeparateButtonConfiguration;
      class PartySeparateButtonConfiguration;
      class CloseElectionSteps;
      class ChallengePasswordSourceEnum;
      class ActivatedCardStatisticsConfiguration;
      class VMInstallationWidgetConfiguration;
      class VMInstallationWidgetTypeConfiguration;
      class ShowBeidEntryTypeConfiguration;
      class ElectionBlockStatusList;
      class HelpConfiguration;
      class WizardStateTimeLineConfiguration;
      class WizardStateToolboxConfiguration;
      class WizardStateHelpConfiguration;
      class FunctionalityWizardStateConfiguration;
      class FunctionalityWizardFlowConfiguration;
      class NecessaryDevicesConfiguration;
      class DeviceConfiguration;
      class MemoryBlock;
      class ReferendumConfiguration;
      class PollingCardConfiguration;
      class AlarmBoxMonitorConfiguration;
      class PreviewLanguageConfig;
      class EntryDividedWidgetConfiguration;
      class CountConfiguration;
      class CountTypeConfig;
      class StartConfiguration;
      class BEIDCardWidgetConfiguration;
      typedef Smartmatic::SAES::Voting::Status::ProcessStatus ProcessStatus;
      typedef Smartmatic::SAES::Voting::PBReports::WorkerMemberType WorkerMemberType;
      class IDCardProcessConfiguration;
      class PollWorkerRegisterConfiguration;
      class IDConfig;
      class IDProperties;
      class RegisterWidgetConfiguration;
      class ElementType;
      class InfoMachineConfiguration;
      class SmartCardReaderDiagnosisConfiguration;
      class ChangeHourFunctionalityConfiguration;
      class FunctionalitiesConfiguration;
      class RunFunctionalityConfiguration;
      class InstallationWizardConfiguration;
      class PMWidgetConfiguration;
      class CardActivatorFunctionalityConfiguration;
      class CardRecoveryFunctionalityConfiguration;
      class VoteDemoFunctionalityConfiguration;
      class CardAssistedActivationFunctionalityConfiguration;
      class PrinterDiagnosisConfiguration;
      class GeneralDiagnosisConfiguration;
      class TouchScreenCalibrationConfiguration;
      class EventSoundsConfiguration;
      class BarcodeDiagnosisConfiguration;
      class BrightnessDiagnosisConfiguration;
      class AllDiagnosisConfiguration;
      class AutomaticWindowConfiguration;
      class ContingencyCardWidgetConfiguration;
      class MemoryStateWidgetConfiguration;
      class HelpWidgetConfiguration;
      class WaitingForCardWindowConfiguration;
      class LanguageSelectionWindowConfiguration;
      class StatisticFunctionalityConfiguration;
      class OpenElectionFunctionalityConfiguration;
      class AuthenticationWindowConfiguration;
      class DurationWidgetConfiguration;
      class CloseElectionFunctionalityConfiguration;
      class ActivationConsolidationFunctionalityConfiguration;
      class CloseVotationFunctionalityConfiguration;
      class InitializationWindowConfiguration;
      class IncidentReportFunctionalityConfiguration;
      class PollWorkerRegisterFunctionalityConfiguration;
      class CloseNoteRegisterFunctionalityConfiguration;
      class VoteConsolidationFunctionalityConfiguration;
      class PrintPreviewFunctionalityConfiguration;
      class LogReportFunctionalityConfiguration;
      class CloseNotetFunctionalityConfiguration;
      class VotingExperienceValidationScreensFunctionalityConfiguration;
      class VotingForDisabledFunctionalityConfiguration;
      class PoliceNoteRegisterFunctionalityConfiguration;
      class DataUtilsValidatorFunctionalityConfiguration;
      class ThemesConfiguration;
      class MenuOptions;
      class CheckSumFailOption;
      class LoadingBallotMessage;
      class Label_Alignment;
      class Label_Style;
      class Label_Weight;
      class PMWidgetConfiguration1;
      class FunctionalityConfiguration;
      class LanguageButton;
      class OfficialThemeConfiguration;
      class DemoThemeConfiguration;
      class RecoveryThemeConfiguration;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    /**
     * @brief C++ namespace for the %http://www.smartmatic.com/SaesGUIConfiguration
     * schema namespace.
     */
    namespace Configuration
    {
      /**
       * @brief Class corresponding to the %SaesGUIConfiguration schema type.
       *
       * @nosubgrouping
       */
      class SaesGUIConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name StartConfiguration
         *
         * @brief Accessor and modifier functions for the %StartConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::StartConfiguration StartConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StartConfigurationType, char > StartConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StartConfigurationType&
        getStartConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StartConfigurationType&
        getStartConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStartConfiguration (const StartConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStartConfiguration (::std::auto_ptr< StartConfigurationType > p);

        //@}

        /**
         * @name BeidCardUseThread
         *
         * @brief Accessor and modifier functions for the %BeidCardUseThread
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean BeidCardUseThreadType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BeidCardUseThreadType, char > BeidCardUseThreadTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BeidCardUseThreadType&
        getBeidCardUseThread () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BeidCardUseThreadType&
        getBeidCardUseThread ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBeidCardUseThread (const BeidCardUseThreadType& x);

        //@}

        /**
         * @name BeidCardShowRemoveMessage
         *
         * @brief Accessor and modifier functions for the %BeidCardShowRemoveMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean BeidCardShowRemoveMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BeidCardShowRemoveMessageType, char > BeidCardShowRemoveMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BeidCardShowRemoveMessageType&
        getBeidCardShowRemoveMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BeidCardShowRemoveMessageType&
        getBeidCardShowRemoveMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBeidCardShowRemoveMessage (const BeidCardShowRemoveMessageType& x);

        //@}

        /**
         * @name BeidShowIdCard
         *
         * @brief Accessor and modifier functions for the %BeidShowIdCard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean BeidShowIdCardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BeidShowIdCardType, char > BeidShowIdCardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BeidShowIdCardType&
        getBeidShowIdCard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BeidShowIdCardType&
        getBeidShowIdCard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBeidShowIdCard (const BeidShowIdCardType& x);

        //@}

        /**
         * @name PMInstallationWidgetShowPrintPasswordButton
         *
         * @brief Accessor and modifier functions for the %PMInstallationWidgetShowPrintPasswordButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean PMInstallationWidgetShowPrintPasswordButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PMInstallationWidgetShowPrintPasswordButtonType, char > PMInstallationWidgetShowPrintPasswordButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PMInstallationWidgetShowPrintPasswordButtonType&
        getPMInstallationWidgetShowPrintPasswordButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PMInstallationWidgetShowPrintPasswordButtonType&
        getPMInstallationWidgetShowPrintPasswordButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPMInstallationWidgetShowPrintPasswordButton (const PMInstallationWidgetShowPrintPasswordButtonType& x);

        //@}

        /**
         * @name ShowBeidEntry
         *
         * @brief Accessor and modifier functions for the %ShowBeidEntry
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ShowBeidEntryTypeConfiguration ShowBeidEntryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBeidEntryType, char > ShowBeidEntryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBeidEntryType&
        getShowBeidEntry () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBeidEntryType&
        getShowBeidEntry ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBeidEntry (const ShowBeidEntryType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setShowBeidEntry (::std::auto_ptr< ShowBeidEntryType > p);

        //@}

        /**
         * @name VotingMachine
         *
         * @brief Accessor and modifier functions for the %VotingMachine
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuWidgetConfiguration VotingMachineType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingMachineType, char > VotingMachineTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingMachineType&
        getVotingMachine () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingMachineType&
        getVotingMachine ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingMachine (const VotingMachineType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingMachine (::std::auto_ptr< VotingMachineType > p);

        //@}

        /**
         * @name VotingExperience
         *
         * @brief Accessor and modifier functions for the %VotingExperience
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VotingExperienceConfiguration VotingExperienceType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceType, char > VotingExperienceTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceType&
        getVotingExperience () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceType&
        getVotingExperience ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperience (const VotingExperienceType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperience (::std::auto_ptr< VotingExperienceType > p);

        //@}

        /**
         * @name FormsCommonControls
         *
         * @brief Accessor and modifier functions for the %FormsCommonControls
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FormsCommonControlsConfigurations FormsCommonControlsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FormsCommonControlsType, char > FormsCommonControlsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FormsCommonControlsType&
        getFormsCommonControls () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FormsCommonControlsType&
        getFormsCommonControls ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFormsCommonControls (const FormsCommonControlsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFormsCommonControls (::std::auto_ptr< FormsCommonControlsType > p);

        //@}

        /**
         * @name ReportPrintingWidget
         *
         * @brief Accessor and modifier functions for the %ReportPrintingWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ReportPrintingWidgetConfiguration ReportPrintingWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReportPrintingWidgetType, char > ReportPrintingWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ReportPrintingWidgetType&
        getReportPrintingWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ReportPrintingWidgetType&
        getReportPrintingWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setReportPrintingWidget (const ReportPrintingWidgetType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setReportPrintingWidget (::std::auto_ptr< ReportPrintingWidgetType > p);

        //@}

        /**
         * @name ForceToLoadFrame
         *
         * @brief Accessor and modifier functions for the %ForceToLoadFrame
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ForceToLoadFrameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ForceToLoadFrameType, char > ForceToLoadFrameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ForceToLoadFrameType&
        getForceToLoadFrame () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ForceToLoadFrameType&
        getForceToLoadFrame ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setForceToLoadFrame (const ForceToLoadFrameType& x);

        //@}

        /**
         * @name VMInstallationConfiguration
         *
         * @brief Accessor and modifier functions for the %VMInstallationConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VMInstallationWidgetConfiguration VMInstallationConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VMInstallationConfigurationType, char > VMInstallationConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VMInstallationConfigurationType&
        getVMInstallationConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VMInstallationConfigurationType&
        getVMInstallationConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVMInstallationConfiguration (const VMInstallationConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVMInstallationConfiguration (::std::auto_ptr< VMInstallationConfigurationType > p);

        //@}

        /**
         * @name ExitMessageLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ExitMessageLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ExitMessageLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ExitMessageLabelConfigurationType, char > ExitMessageLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ExitMessageLabelConfigurationType&
        getExitMessageLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ExitMessageLabelConfigurationType&
        getExitMessageLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setExitMessageLabelConfiguration (const ExitMessageLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setExitMessageLabelConfiguration (::std::auto_ptr< ExitMessageLabelConfigurationType > p);

        //@}

        /**
         * @name BlockMemoryBehaviorMenu
         *
         * @brief Accessor and modifier functions for the %BlockMemoryBehaviorMenu
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MemoryBlock BlockMemoryBehaviorMenuType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockMemoryBehaviorMenuType, char > BlockMemoryBehaviorMenuTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BlockMemoryBehaviorMenuType&
        getBlockMemoryBehaviorMenu () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BlockMemoryBehaviorMenuType&
        getBlockMemoryBehaviorMenu ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlockMemoryBehaviorMenu (const BlockMemoryBehaviorMenuType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBlockMemoryBehaviorMenu (::std::auto_ptr< BlockMemoryBehaviorMenuType > p);

        //@}

        /**
         * @name SendBarcodeConfigurationOnReconnectWidget
         *
         * @brief Accessor and modifier functions for the %SendBarcodeConfigurationOnReconnectWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean SendBarcodeConfigurationOnReconnectWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SendBarcodeConfigurationOnReconnectWidgetType, char > SendBarcodeConfigurationOnReconnectWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SendBarcodeConfigurationOnReconnectWidgetType&
        getSendBarcodeConfigurationOnReconnectWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SendBarcodeConfigurationOnReconnectWidgetType&
        getSendBarcodeConfigurationOnReconnectWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSendBarcodeConfigurationOnReconnectWidget (const SendBarcodeConfigurationOnReconnectWidgetType& x);

        //@}

        /**
         * @name PollingCardConfiguration
         *
         * @brief Accessor and modifier functions for the %PollingCardConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PollingCardConfiguration PollingCardConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PollingCardConfigurationType, char > PollingCardConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PollingCardConfigurationType&
        getPollingCardConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PollingCardConfigurationType&
        getPollingCardConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPollingCardConfiguration (const PollingCardConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPollingCardConfiguration (::std::auto_ptr< PollingCardConfigurationType > p);

        //@}

        /**
         * @name AlarmBoxMonitorConfiguration
         *
         * @brief Accessor and modifier functions for the %AlarmBoxMonitorConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::AlarmBoxMonitorConfiguration AlarmBoxMonitorConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AlarmBoxMonitorConfigurationType, char > AlarmBoxMonitorConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AlarmBoxMonitorConfigurationType&
        getAlarmBoxMonitorConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AlarmBoxMonitorConfigurationType&
        getAlarmBoxMonitorConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAlarmBoxMonitorConfiguration (const AlarmBoxMonitorConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAlarmBoxMonitorConfiguration (::std::auto_ptr< AlarmBoxMonitorConfigurationType > p);

        //@}

        /**
         * @name SmartCardReaderDiagnosisConfiguration
         *
         * @brief Accessor and modifier functions for the %SmartCardReaderDiagnosisConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::SmartCardReaderDiagnosisConfiguration SmartCardReaderDiagnosisConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SmartCardReaderDiagnosisConfigurationType, char > SmartCardReaderDiagnosisConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SmartCardReaderDiagnosisConfigurationType&
        getSmartCardReaderDiagnosisConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SmartCardReaderDiagnosisConfigurationType&
        getSmartCardReaderDiagnosisConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSmartCardReaderDiagnosisConfiguration (const SmartCardReaderDiagnosisConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSmartCardReaderDiagnosisConfiguration (::std::auto_ptr< SmartCardReaderDiagnosisConfigurationType > p);

        //@}

        /**
         * @name ChangeHourFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %ChangeHourFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ChangeHourFunctionalityConfiguration ChangeHourFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ChangeHourFunctionalityConfigurationType, char > ChangeHourFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ChangeHourFunctionalityConfigurationType&
        getChangeHourFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ChangeHourFunctionalityConfigurationType&
        getChangeHourFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setChangeHourFunctionalityConfiguration (const ChangeHourFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setChangeHourFunctionalityConfiguration (::std::auto_ptr< ChangeHourFunctionalityConfigurationType > p);

        //@}

        /**
         * @name FunctionalitiesConfiguration
         *
         * @brief Accessor and modifier functions for the %FunctionalitiesConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FunctionalitiesConfiguration FunctionalitiesConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FunctionalitiesConfigurationType, char > FunctionalitiesConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FunctionalitiesConfigurationType&
        getFunctionalitiesConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FunctionalitiesConfigurationType&
        getFunctionalitiesConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFunctionalitiesConfiguration (const FunctionalitiesConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFunctionalitiesConfiguration (::std::auto_ptr< FunctionalitiesConfigurationType > p);

        //@}

        /**
         * @name RunFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %RunFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RunFunctionalityConfiguration RunFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RunFunctionalityConfigurationType, char > RunFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RunFunctionalityConfigurationType&
        getRunFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RunFunctionalityConfigurationType&
        getRunFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRunFunctionalityConfiguration (const RunFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRunFunctionalityConfiguration (::std::auto_ptr< RunFunctionalityConfigurationType > p);

        //@}

        /**
         * @name InstallationWizardConfiguration
         *
         * @brief Accessor and modifier functions for the %InstallationWizardConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::InstallationWizardConfiguration InstallationWizardConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InstallationWizardConfigurationType, char > InstallationWizardConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InstallationWizardConfigurationType&
        getInstallationWizardConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InstallationWizardConfigurationType&
        getInstallationWizardConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInstallationWizardConfiguration (const InstallationWizardConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInstallationWizardConfiguration (::std::auto_ptr< InstallationWizardConfigurationType > p);

        //@}

        /**
         * @name PMWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %PMWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PMWidgetConfiguration PMWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PMWidgetConfigurationType, char > PMWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PMWidgetConfigurationType&
        getPMWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PMWidgetConfigurationType&
        getPMWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPMWidgetConfiguration (const PMWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPMWidgetConfiguration (::std::auto_ptr< PMWidgetConfigurationType > p);

        //@}

        /**
         * @name CardActivatorFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CardActivatorFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CardActivatorFunctionalityConfiguration CardActivatorFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivatorFunctionalityConfigurationType, char > CardActivatorFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivatorFunctionalityConfigurationType&
        getCardActivatorFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivatorFunctionalityConfigurationType&
        getCardActivatorFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivatorFunctionalityConfiguration (const CardActivatorFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivatorFunctionalityConfiguration (::std::auto_ptr< CardActivatorFunctionalityConfigurationType > p);

        //@}

        /**
         * @name CardRecoveryFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CardRecoveryFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CardRecoveryFunctionalityConfiguration CardRecoveryFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardRecoveryFunctionalityConfigurationType, char > CardRecoveryFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardRecoveryFunctionalityConfigurationType&
        getCardRecoveryFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardRecoveryFunctionalityConfigurationType&
        getCardRecoveryFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardRecoveryFunctionalityConfiguration (const CardRecoveryFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardRecoveryFunctionalityConfiguration (::std::auto_ptr< CardRecoveryFunctionalityConfigurationType > p);

        //@}

        /**
         * @name VoteDemoFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %VoteDemoFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteDemoFunctionalityConfiguration VoteDemoFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteDemoFunctionalityConfigurationType, char > VoteDemoFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteDemoFunctionalityConfigurationType&
        getVoteDemoFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteDemoFunctionalityConfigurationType&
        getVoteDemoFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteDemoFunctionalityConfiguration (const VoteDemoFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteDemoFunctionalityConfiguration (::std::auto_ptr< VoteDemoFunctionalityConfigurationType > p);

        //@}

        /**
         * @name CardAssistedActivationFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CardAssistedActivationFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CardAssistedActivationFunctionalityConfiguration CardAssistedActivationFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardAssistedActivationFunctionalityConfigurationType, char > CardAssistedActivationFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardAssistedActivationFunctionalityConfigurationType&
        getCardAssistedActivationFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardAssistedActivationFunctionalityConfigurationType&
        getCardAssistedActivationFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardAssistedActivationFunctionalityConfiguration (const CardAssistedActivationFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardAssistedActivationFunctionalityConfiguration (::std::auto_ptr< CardAssistedActivationFunctionalityConfigurationType > p);

        //@}

        /**
         * @name PrinterDiagnosisConfiguration
         *
         * @brief Accessor and modifier functions for the %PrinterDiagnosisConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PrinterDiagnosisConfiguration PrinterDiagnosisConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrinterDiagnosisConfigurationType, char > PrinterDiagnosisConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrinterDiagnosisConfigurationType&
        getPrinterDiagnosisConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrinterDiagnosisConfigurationType&
        getPrinterDiagnosisConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrinterDiagnosisConfiguration (const PrinterDiagnosisConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPrinterDiagnosisConfiguration (::std::auto_ptr< PrinterDiagnosisConfigurationType > p);

        //@}

        /**
         * @name GeneralDiagnosisConfiguration
         *
         * @brief Accessor and modifier functions for the %GeneralDiagnosisConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::GeneralDiagnosisConfiguration GeneralDiagnosisConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< GeneralDiagnosisConfigurationType, char > GeneralDiagnosisConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const GeneralDiagnosisConfigurationType&
        getGeneralDiagnosisConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        GeneralDiagnosisConfigurationType&
        getGeneralDiagnosisConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setGeneralDiagnosisConfiguration (const GeneralDiagnosisConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setGeneralDiagnosisConfiguration (::std::auto_ptr< GeneralDiagnosisConfigurationType > p);

        //@}

        /**
         * @name TouchScreenCalibrationConfiguration
         *
         * @brief Accessor and modifier functions for the %TouchScreenCalibrationConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TouchScreenCalibrationConfiguration TouchScreenCalibrationConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TouchScreenCalibrationConfigurationType, char > TouchScreenCalibrationConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TouchScreenCalibrationConfigurationType&
        getTouchScreenCalibrationConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TouchScreenCalibrationConfigurationType&
        getTouchScreenCalibrationConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTouchScreenCalibrationConfiguration (const TouchScreenCalibrationConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTouchScreenCalibrationConfiguration (::std::auto_ptr< TouchScreenCalibrationConfigurationType > p);

        //@}

        /**
         * @name EventSoundsConfiguration
         *
         * @brief Accessor and modifier functions for the %EventSoundsConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::EventSoundsConfiguration EventSoundsConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventSoundsConfigurationType, char > EventSoundsConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventSoundsConfigurationType&
        getEventSoundsConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventSoundsConfigurationType&
        getEventSoundsConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventSoundsConfiguration (const EventSoundsConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventSoundsConfiguration (::std::auto_ptr< EventSoundsConfigurationType > p);

        //@}

        /**
         * @name BarcodeDiagnosisConfiguration
         *
         * @brief Accessor and modifier functions for the %BarcodeDiagnosisConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::BarcodeDiagnosisConfiguration BarcodeDiagnosisConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeDiagnosisConfigurationType, char > BarcodeDiagnosisConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeDiagnosisConfigurationType&
        getBarcodeDiagnosisConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeDiagnosisConfigurationType&
        getBarcodeDiagnosisConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeDiagnosisConfiguration (const BarcodeDiagnosisConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeDiagnosisConfiguration (::std::auto_ptr< BarcodeDiagnosisConfigurationType > p);

        //@}

        /**
         * @name BrightnessDiagnosisConfiguration
         *
         * @brief Accessor and modifier functions for the %BrightnessDiagnosisConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::BrightnessDiagnosisConfiguration BrightnessDiagnosisConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BrightnessDiagnosisConfigurationType, char > BrightnessDiagnosisConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BrightnessDiagnosisConfigurationType&
        getBrightnessDiagnosisConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BrightnessDiagnosisConfigurationType&
        getBrightnessDiagnosisConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBrightnessDiagnosisConfiguration (const BrightnessDiagnosisConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBrightnessDiagnosisConfiguration (::std::auto_ptr< BrightnessDiagnosisConfigurationType > p);

        //@}

        /**
         * @name AllDiagnosisConfiguration
         *
         * @brief Accessor and modifier functions for the %AllDiagnosisConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::AllDiagnosisConfiguration AllDiagnosisConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AllDiagnosisConfigurationType, char > AllDiagnosisConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AllDiagnosisConfigurationType&
        getAllDiagnosisConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AllDiagnosisConfigurationType&
        getAllDiagnosisConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAllDiagnosisConfiguration (const AllDiagnosisConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAllDiagnosisConfiguration (::std::auto_ptr< AllDiagnosisConfigurationType > p);

        //@}

        /**
         * @name AutomaticWindowConfiguration
         *
         * @brief Accessor and modifier functions for the %AutomaticWindowConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::AutomaticWindowConfiguration AutomaticWindowConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AutomaticWindowConfigurationType, char > AutomaticWindowConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AutomaticWindowConfigurationType&
        getAutomaticWindowConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AutomaticWindowConfigurationType&
        getAutomaticWindowConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAutomaticWindowConfiguration (const AutomaticWindowConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAutomaticWindowConfiguration (::std::auto_ptr< AutomaticWindowConfigurationType > p);

        //@}

        /**
         * @name ContingencyCardWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %ContingencyCardWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ContingencyCardWidgetConfiguration ContingencyCardWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContingencyCardWidgetConfigurationType, char > ContingencyCardWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContingencyCardWidgetConfigurationType&
        getContingencyCardWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContingencyCardWidgetConfigurationType&
        getContingencyCardWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContingencyCardWidgetConfiguration (const ContingencyCardWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContingencyCardWidgetConfiguration (::std::auto_ptr< ContingencyCardWidgetConfigurationType > p);

        //@}

        /**
         * @name IDCardProcessConfiguration
         *
         * @brief Accessor and modifier functions for the %IDCardProcessConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDCardProcessConfiguration IDCardProcessConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IDCardProcessConfigurationType, char > IDCardProcessConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IDCardProcessConfigurationType&
        getIDCardProcessConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IDCardProcessConfigurationType&
        getIDCardProcessConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIDCardProcessConfiguration (const IDCardProcessConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIDCardProcessConfiguration (::std::auto_ptr< IDCardProcessConfigurationType > p);

        //@}

        /**
         * @name BEIDCardWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %BEIDCardWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::BEIDCardWidgetConfiguration BEIDCardWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BEIDCardWidgetConfigurationType, char > BEIDCardWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BEIDCardWidgetConfigurationType&
        getBEIDCardWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BEIDCardWidgetConfigurationType&
        getBEIDCardWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBEIDCardWidgetConfiguration (const BEIDCardWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBEIDCardWidgetConfiguration (::std::auto_ptr< BEIDCardWidgetConfigurationType > p);

        //@}

        /**
         * @name MemoryStateWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %MemoryStateWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MemoryStateWidgetConfiguration MemoryStateWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MemoryStateWidgetConfigurationType, char > MemoryStateWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MemoryStateWidgetConfigurationType&
        getMemoryStateWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MemoryStateWidgetConfigurationType&
        getMemoryStateWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMemoryStateWidgetConfiguration (const MemoryStateWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMemoryStateWidgetConfiguration (::std::auto_ptr< MemoryStateWidgetConfigurationType > p);

        //@}

        /**
         * @name HelpWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %HelpWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::HelpWidgetConfiguration HelpWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HelpWidgetConfigurationType, char > HelpWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HelpWidgetConfigurationType&
        getHelpWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HelpWidgetConfigurationType&
        getHelpWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHelpWidgetConfiguration (const HelpWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHelpWidgetConfiguration (::std::auto_ptr< HelpWidgetConfigurationType > p);

        //@}

        /**
         * @name WaitingForCardWindowConfiguration
         *
         * @brief Accessor and modifier functions for the %WaitingForCardWindowConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::WaitingForCardWindowConfiguration WaitingForCardWindowConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WaitingForCardWindowConfigurationType, char > WaitingForCardWindowConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WaitingForCardWindowConfigurationType&
        getWaitingForCardWindowConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WaitingForCardWindowConfigurationType&
        getWaitingForCardWindowConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWaitingForCardWindowConfiguration (const WaitingForCardWindowConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setWaitingForCardWindowConfiguration (::std::auto_ptr< WaitingForCardWindowConfigurationType > p);

        //@}

        /**
         * @name LanguageSelectionWindowConfiguration
         *
         * @brief Accessor and modifier functions for the %LanguageSelectionWindowConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LanguageSelectionWindowConfiguration LanguageSelectionWindowConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LanguageSelectionWindowConfigurationType, char > LanguageSelectionWindowConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LanguageSelectionWindowConfigurationType&
        getLanguageSelectionWindowConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LanguageSelectionWindowConfigurationType&
        getLanguageSelectionWindowConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLanguageSelectionWindowConfiguration (const LanguageSelectionWindowConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLanguageSelectionWindowConfiguration (::std::auto_ptr< LanguageSelectionWindowConfigurationType > p);

        //@}

        /**
         * @name StatisticFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %StatisticFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::StatisticFunctionalityConfiguration StatisticFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticFunctionalityConfigurationType, char > StatisticFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticFunctionalityConfigurationType&
        getStatisticFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticFunctionalityConfigurationType&
        getStatisticFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticFunctionalityConfiguration (const StatisticFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticFunctionalityConfiguration (::std::auto_ptr< StatisticFunctionalityConfigurationType > p);

        //@}

        /**
         * @name OpenElectionFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %OpenElectionFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::OpenElectionFunctionalityConfiguration OpenElectionFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OpenElectionFunctionalityConfigurationType, char > OpenElectionFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OpenElectionFunctionalityConfigurationType&
        getOpenElectionFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OpenElectionFunctionalityConfigurationType&
        getOpenElectionFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOpenElectionFunctionalityConfiguration (const OpenElectionFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setOpenElectionFunctionalityConfiguration (::std::auto_ptr< OpenElectionFunctionalityConfigurationType > p);

        //@}

        /**
         * @name AuthenticationWindowConfiguration
         *
         * @brief Accessor and modifier functions for the %AuthenticationWindowConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::AuthenticationWindowConfiguration AuthenticationWindowConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AuthenticationWindowConfigurationType, char > AuthenticationWindowConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AuthenticationWindowConfigurationType&
        getAuthenticationWindowConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AuthenticationWindowConfigurationType&
        getAuthenticationWindowConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAuthenticationWindowConfiguration (const AuthenticationWindowConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAuthenticationWindowConfiguration (::std::auto_ptr< AuthenticationWindowConfigurationType > p);

        //@}

        /**
         * @name DurationWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %DurationWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DurationWidgetConfiguration DurationWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DurationWidgetConfigurationType, char > DurationWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DurationWidgetConfigurationType&
        getDurationWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DurationWidgetConfigurationType&
        getDurationWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDurationWidgetConfiguration (const DurationWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDurationWidgetConfiguration (::std::auto_ptr< DurationWidgetConfigurationType > p);

        //@}

        /**
         * @name CloseElectionFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CloseElectionFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CloseElectionFunctionalityConfiguration CloseElectionFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseElectionFunctionalityConfigurationType, char > CloseElectionFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseElectionFunctionalityConfigurationType&
        getCloseElectionFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseElectionFunctionalityConfigurationType&
        getCloseElectionFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseElectionFunctionalityConfiguration (const CloseElectionFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseElectionFunctionalityConfiguration (::std::auto_ptr< CloseElectionFunctionalityConfigurationType > p);

        //@}

        /**
         * @name ActivationConsolidationFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %ActivationConsolidationFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ActivationConsolidationFunctionalityConfiguration ActivationConsolidationFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ActivationConsolidationFunctionalityConfigurationType, char > ActivationConsolidationFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ActivationConsolidationFunctionalityConfigurationType&
        getActivationConsolidationFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ActivationConsolidationFunctionalityConfigurationType&
        getActivationConsolidationFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setActivationConsolidationFunctionalityConfiguration (const ActivationConsolidationFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setActivationConsolidationFunctionalityConfiguration (::std::auto_ptr< ActivationConsolidationFunctionalityConfigurationType > p);

        //@}

        /**
         * @name CloseVotationFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CloseVotationFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CloseVotationFunctionalityConfiguration CloseVotationFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseVotationFunctionalityConfigurationType, char > CloseVotationFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseVotationFunctionalityConfigurationType&
        getCloseVotationFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseVotationFunctionalityConfigurationType&
        getCloseVotationFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseVotationFunctionalityConfiguration (const CloseVotationFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseVotationFunctionalityConfiguration (::std::auto_ptr< CloseVotationFunctionalityConfigurationType > p);

        //@}

        /**
         * @name InitializationWindowConfiguration
         *
         * @brief Accessor and modifier functions for the %InitializationWindowConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::InitializationWindowConfiguration InitializationWindowConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InitializationWindowConfigurationType, char > InitializationWindowConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InitializationWindowConfigurationType&
        getInitializationWindowConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InitializationWindowConfigurationType&
        getInitializationWindowConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInitializationWindowConfiguration (const InitializationWindowConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInitializationWindowConfiguration (::std::auto_ptr< InitializationWindowConfigurationType > p);

        //@}

        /**
         * @name IncidentReportFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %IncidentReportFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IncidentReportFunctionalityConfiguration IncidentReportFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncidentReportFunctionalityConfigurationType, char > IncidentReportFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncidentReportFunctionalityConfigurationType&
        getIncidentReportFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncidentReportFunctionalityConfigurationType&
        getIncidentReportFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncidentReportFunctionalityConfiguration (const IncidentReportFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIncidentReportFunctionalityConfiguration (::std::auto_ptr< IncidentReportFunctionalityConfigurationType > p);

        //@}

        /**
         * @name PollWorkerRegisterFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %PollWorkerRegisterFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PollWorkerRegisterFunctionalityConfiguration PollWorkerRegisterFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PollWorkerRegisterFunctionalityConfigurationType, char > PollWorkerRegisterFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PollWorkerRegisterFunctionalityConfigurationType&
        getPollWorkerRegisterFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PollWorkerRegisterFunctionalityConfigurationType&
        getPollWorkerRegisterFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPollWorkerRegisterFunctionalityConfiguration (const PollWorkerRegisterFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPollWorkerRegisterFunctionalityConfiguration (::std::auto_ptr< PollWorkerRegisterFunctionalityConfigurationType > p);

        //@}

        /**
         * @name CloseNoteRegisterFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CloseNoteRegisterFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CloseNoteRegisterFunctionalityConfiguration CloseNoteRegisterFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseNoteRegisterFunctionalityConfigurationType, char > CloseNoteRegisterFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseNoteRegisterFunctionalityConfigurationType&
        getCloseNoteRegisterFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseNoteRegisterFunctionalityConfigurationType&
        getCloseNoteRegisterFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseNoteRegisterFunctionalityConfiguration (const CloseNoteRegisterFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseNoteRegisterFunctionalityConfiguration (::std::auto_ptr< CloseNoteRegisterFunctionalityConfigurationType > p);

        //@}

        /**
         * @name VoteConsolidationFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %VoteConsolidationFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteConsolidationFunctionalityConfiguration VoteConsolidationFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteConsolidationFunctionalityConfigurationType, char > VoteConsolidationFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteConsolidationFunctionalityConfigurationType&
        getVoteConsolidationFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteConsolidationFunctionalityConfigurationType&
        getVoteConsolidationFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteConsolidationFunctionalityConfiguration (const VoteConsolidationFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteConsolidationFunctionalityConfiguration (::std::auto_ptr< VoteConsolidationFunctionalityConfigurationType > p);

        //@}

        /**
         * @name PrintPreviewFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %PrintPreviewFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PrintPreviewFunctionalityConfiguration PrintPreviewFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrintPreviewFunctionalityConfigurationType, char > PrintPreviewFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrintPreviewFunctionalityConfigurationType&
        getPrintPreviewFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrintPreviewFunctionalityConfigurationType&
        getPrintPreviewFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrintPreviewFunctionalityConfiguration (const PrintPreviewFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPrintPreviewFunctionalityConfiguration (::std::auto_ptr< PrintPreviewFunctionalityConfigurationType > p);

        //@}

        /**
         * @name LogReportFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %LogReportFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LogReportFunctionalityConfiguration LogReportFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LogReportFunctionalityConfigurationType, char > LogReportFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LogReportFunctionalityConfigurationType&
        getLogReportFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LogReportFunctionalityConfigurationType&
        getLogReportFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLogReportFunctionalityConfiguration (const LogReportFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLogReportFunctionalityConfiguration (::std::auto_ptr< LogReportFunctionalityConfigurationType > p);

        //@}

        /**
         * @name CloseNotetFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %CloseNotetFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CloseNotetFunctionalityConfiguration CloseNotetFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseNotetFunctionalityConfigurationType, char > CloseNotetFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseNotetFunctionalityConfigurationType&
        getCloseNotetFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseNotetFunctionalityConfigurationType&
        getCloseNotetFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseNotetFunctionalityConfiguration (const CloseNotetFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseNotetFunctionalityConfiguration (::std::auto_ptr< CloseNotetFunctionalityConfigurationType > p);

        //@}

        /**
         * @name VotingExperienceValidationScreensFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingExperienceValidationScreensFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VotingExperienceValidationScreensFunctionalityConfiguration VotingExperienceValidationScreensFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceValidationScreensFunctionalityConfigurationType, char > VotingExperienceValidationScreensFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceValidationScreensFunctionalityConfigurationType&
        getVotingExperienceValidationScreensFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceValidationScreensFunctionalityConfigurationType&
        getVotingExperienceValidationScreensFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceValidationScreensFunctionalityConfiguration (const VotingExperienceValidationScreensFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceValidationScreensFunctionalityConfiguration (::std::auto_ptr< VotingExperienceValidationScreensFunctionalityConfigurationType > p);

        //@}

        /**
         * @name VotingForDisabledFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingForDisabledFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VotingForDisabledFunctionalityConfiguration VotingForDisabledFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingForDisabledFunctionalityConfigurationType, char > VotingForDisabledFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingForDisabledFunctionalityConfigurationType&
        getVotingForDisabledFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingForDisabledFunctionalityConfigurationType&
        getVotingForDisabledFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingForDisabledFunctionalityConfiguration (const VotingForDisabledFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingForDisabledFunctionalityConfiguration (::std::auto_ptr< VotingForDisabledFunctionalityConfigurationType > p);

        //@}

        /**
         * @name PoliceNoteRegisterFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %PoliceNoteRegisterFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PoliceNoteRegisterFunctionalityConfiguration PoliceNoteRegisterFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PoliceNoteRegisterFunctionalityConfigurationType, char > PoliceNoteRegisterFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PoliceNoteRegisterFunctionalityConfigurationType&
        getPoliceNoteRegisterFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PoliceNoteRegisterFunctionalityConfigurationType&
        getPoliceNoteRegisterFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPoliceNoteRegisterFunctionalityConfiguration (const PoliceNoteRegisterFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPoliceNoteRegisterFunctionalityConfiguration (::std::auto_ptr< PoliceNoteRegisterFunctionalityConfigurationType > p);

        //@}

        /**
         * @name DataUtilsValidatorFunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %DataUtilsValidatorFunctionalityConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DataUtilsValidatorFunctionalityConfiguration DataUtilsValidatorFunctionalityConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DataUtilsValidatorFunctionalityConfigurationType, char > DataUtilsValidatorFunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DataUtilsValidatorFunctionalityConfigurationType&
        getDataUtilsValidatorFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DataUtilsValidatorFunctionalityConfigurationType&
        getDataUtilsValidatorFunctionalityConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDataUtilsValidatorFunctionalityConfiguration (const DataUtilsValidatorFunctionalityConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDataUtilsValidatorFunctionalityConfiguration (::std::auto_ptr< DataUtilsValidatorFunctionalityConfigurationType > p);

        //@}

        /**
         * @name ThemesConfiguration
         *
         * @brief Accessor and modifier functions for the %ThemesConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ThemesConfiguration ThemesConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ThemesConfigurationType, char > ThemesConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ThemesConfigurationType&
        getThemesConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ThemesConfigurationType&
        getThemesConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setThemesConfiguration (const ThemesConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setThemesConfiguration (::std::auto_ptr< ThemesConfigurationType > p);

        //@}

        /**
         * @name FunctionalityWizardConfiguration
         *
         * @brief Accessor and modifier functions for the %FunctionalityWizardConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FunctionalityWizardFlowConfiguration FunctionalityWizardConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FunctionalityWizardConfigurationType, char > FunctionalityWizardConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FunctionalityWizardConfigurationType&
        getFunctionalityWizardConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FunctionalityWizardConfigurationType&
        getFunctionalityWizardConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFunctionalityWizardConfiguration (const FunctionalityWizardConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFunctionalityWizardConfiguration (::std::auto_ptr< FunctionalityWizardConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        SaesGUIConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SaesGUIConfiguration (const StartConfigurationType&,
                              const BeidCardUseThreadType&,
                              const BeidCardShowRemoveMessageType&,
                              const BeidShowIdCardType&,
                              const PMInstallationWidgetShowPrintPasswordButtonType&,
                              const ShowBeidEntryType&,
                              const VotingMachineType&,
                              const VotingExperienceType&,
                              const FormsCommonControlsType&,
                              const ReportPrintingWidgetType&,
                              const ForceToLoadFrameType&,
                              const VMInstallationConfigurationType&,
                              const ExitMessageLabelConfigurationType&,
                              const BlockMemoryBehaviorMenuType&,
                              const SendBarcodeConfigurationOnReconnectWidgetType&,
                              const PollingCardConfigurationType&,
                              const AlarmBoxMonitorConfigurationType&,
                              const SmartCardReaderDiagnosisConfigurationType&,
                              const ChangeHourFunctionalityConfigurationType&,
                              const FunctionalitiesConfigurationType&,
                              const RunFunctionalityConfigurationType&,
                              const InstallationWizardConfigurationType&,
                              const PMWidgetConfigurationType&,
                              const CardActivatorFunctionalityConfigurationType&,
                              const CardRecoveryFunctionalityConfigurationType&,
                              const VoteDemoFunctionalityConfigurationType&,
                              const CardAssistedActivationFunctionalityConfigurationType&,
                              const PrinterDiagnosisConfigurationType&,
                              const GeneralDiagnosisConfigurationType&,
                              const TouchScreenCalibrationConfigurationType&,
                              const EventSoundsConfigurationType&,
                              const BarcodeDiagnosisConfigurationType&,
                              const BrightnessDiagnosisConfigurationType&,
                              const AllDiagnosisConfigurationType&,
                              const AutomaticWindowConfigurationType&,
                              const ContingencyCardWidgetConfigurationType&,
                              const IDCardProcessConfigurationType&,
                              const BEIDCardWidgetConfigurationType&,
                              const MemoryStateWidgetConfigurationType&,
                              const HelpWidgetConfigurationType&,
                              const WaitingForCardWindowConfigurationType&,
                              const LanguageSelectionWindowConfigurationType&,
                              const StatisticFunctionalityConfigurationType&,
                              const OpenElectionFunctionalityConfigurationType&,
                              const AuthenticationWindowConfigurationType&,
                              const DurationWidgetConfigurationType&,
                              const CloseElectionFunctionalityConfigurationType&,
                              const ActivationConsolidationFunctionalityConfigurationType&,
                              const CloseVotationFunctionalityConfigurationType&,
                              const InitializationWindowConfigurationType&,
                              const IncidentReportFunctionalityConfigurationType&,
                              const PollWorkerRegisterFunctionalityConfigurationType&,
                              const CloseNoteRegisterFunctionalityConfigurationType&,
                              const VoteConsolidationFunctionalityConfigurationType&,
                              const PrintPreviewFunctionalityConfigurationType&,
                              const LogReportFunctionalityConfigurationType&,
                              const CloseNotetFunctionalityConfigurationType&,
                              const VotingExperienceValidationScreensFunctionalityConfigurationType&,
                              const VotingForDisabledFunctionalityConfigurationType&,
                              const PoliceNoteRegisterFunctionalityConfigurationType&,
                              const DataUtilsValidatorFunctionalityConfigurationType&,
                              const ThemesConfigurationType&,
                              const FunctionalityWizardConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        SaesGUIConfiguration (::std::auto_ptr< StartConfigurationType >&,
                              const BeidCardUseThreadType&,
                              const BeidCardShowRemoveMessageType&,
                              const BeidShowIdCardType&,
                              const PMInstallationWidgetShowPrintPasswordButtonType&,
                              const ShowBeidEntryType&,
                              ::std::auto_ptr< VotingMachineType >&,
                              ::std::auto_ptr< VotingExperienceType >&,
                              ::std::auto_ptr< FormsCommonControlsType >&,
                              ::std::auto_ptr< ReportPrintingWidgetType >&,
                              const ForceToLoadFrameType&,
                              ::std::auto_ptr< VMInstallationConfigurationType >&,
                              ::std::auto_ptr< ExitMessageLabelConfigurationType >&,
                              const BlockMemoryBehaviorMenuType&,
                              const SendBarcodeConfigurationOnReconnectWidgetType&,
                              ::std::auto_ptr< PollingCardConfigurationType >&,
                              ::std::auto_ptr< AlarmBoxMonitorConfigurationType >&,
                              ::std::auto_ptr< SmartCardReaderDiagnosisConfigurationType >&,
                              ::std::auto_ptr< ChangeHourFunctionalityConfigurationType >&,
                              ::std::auto_ptr< FunctionalitiesConfigurationType >&,
                              ::std::auto_ptr< RunFunctionalityConfigurationType >&,
                              ::std::auto_ptr< InstallationWizardConfigurationType >&,
                              ::std::auto_ptr< PMWidgetConfigurationType >&,
                              ::std::auto_ptr< CardActivatorFunctionalityConfigurationType >&,
                              ::std::auto_ptr< CardRecoveryFunctionalityConfigurationType >&,
                              ::std::auto_ptr< VoteDemoFunctionalityConfigurationType >&,
                              ::std::auto_ptr< CardAssistedActivationFunctionalityConfigurationType >&,
                              ::std::auto_ptr< PrinterDiagnosisConfigurationType >&,
                              ::std::auto_ptr< GeneralDiagnosisConfigurationType >&,
                              ::std::auto_ptr< TouchScreenCalibrationConfigurationType >&,
                              ::std::auto_ptr< EventSoundsConfigurationType >&,
                              ::std::auto_ptr< BarcodeDiagnosisConfigurationType >&,
                              ::std::auto_ptr< BrightnessDiagnosisConfigurationType >&,
                              ::std::auto_ptr< AllDiagnosisConfigurationType >&,
                              ::std::auto_ptr< AutomaticWindowConfigurationType >&,
                              ::std::auto_ptr< ContingencyCardWidgetConfigurationType >&,
                              ::std::auto_ptr< IDCardProcessConfigurationType >&,
                              ::std::auto_ptr< BEIDCardWidgetConfigurationType >&,
                              ::std::auto_ptr< MemoryStateWidgetConfigurationType >&,
                              ::std::auto_ptr< HelpWidgetConfigurationType >&,
                              ::std::auto_ptr< WaitingForCardWindowConfigurationType >&,
                              ::std::auto_ptr< LanguageSelectionWindowConfigurationType >&,
                              ::std::auto_ptr< StatisticFunctionalityConfigurationType >&,
                              ::std::auto_ptr< OpenElectionFunctionalityConfigurationType >&,
                              ::std::auto_ptr< AuthenticationWindowConfigurationType >&,
                              ::std::auto_ptr< DurationWidgetConfigurationType >&,
                              ::std::auto_ptr< CloseElectionFunctionalityConfigurationType >&,
                              ::std::auto_ptr< ActivationConsolidationFunctionalityConfigurationType >&,
                              ::std::auto_ptr< CloseVotationFunctionalityConfigurationType >&,
                              ::std::auto_ptr< InitializationWindowConfigurationType >&,
                              ::std::auto_ptr< IncidentReportFunctionalityConfigurationType >&,
                              ::std::auto_ptr< PollWorkerRegisterFunctionalityConfigurationType >&,
                              ::std::auto_ptr< CloseNoteRegisterFunctionalityConfigurationType >&,
                              ::std::auto_ptr< VoteConsolidationFunctionalityConfigurationType >&,
                              ::std::auto_ptr< PrintPreviewFunctionalityConfigurationType >&,
                              ::std::auto_ptr< LogReportFunctionalityConfigurationType >&,
                              ::std::auto_ptr< CloseNotetFunctionalityConfigurationType >&,
                              ::std::auto_ptr< VotingExperienceValidationScreensFunctionalityConfigurationType >&,
                              ::std::auto_ptr< VotingForDisabledFunctionalityConfigurationType >&,
                              ::std::auto_ptr< PoliceNoteRegisterFunctionalityConfigurationType >&,
                              ::std::auto_ptr< DataUtilsValidatorFunctionalityConfigurationType >&,
                              ::std::auto_ptr< ThemesConfigurationType >&,
                              ::std::auto_ptr< FunctionalityWizardConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SaesGUIConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        SaesGUIConfiguration (const SaesGUIConfiguration& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SaesGUIConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~SaesGUIConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< StartConfigurationType > StartConfiguration_;
        ::xsd::cxx::tree::one< BeidCardUseThreadType > BeidCardUseThread_;
        ::xsd::cxx::tree::one< BeidCardShowRemoveMessageType > BeidCardShowRemoveMessage_;
        ::xsd::cxx::tree::one< BeidShowIdCardType > BeidShowIdCard_;
        ::xsd::cxx::tree::one< PMInstallationWidgetShowPrintPasswordButtonType > PMInstallationWidgetShowPrintPasswordButton_;
        ::xsd::cxx::tree::one< ShowBeidEntryType > ShowBeidEntry_;
        ::xsd::cxx::tree::one< VotingMachineType > VotingMachine_;
        ::xsd::cxx::tree::one< VotingExperienceType > VotingExperience_;
        ::xsd::cxx::tree::one< FormsCommonControlsType > FormsCommonControls_;
        ::xsd::cxx::tree::one< ReportPrintingWidgetType > ReportPrintingWidget_;
        ::xsd::cxx::tree::one< ForceToLoadFrameType > ForceToLoadFrame_;
        ::xsd::cxx::tree::one< VMInstallationConfigurationType > VMInstallationConfiguration_;
        ::xsd::cxx::tree::one< ExitMessageLabelConfigurationType > ExitMessageLabelConfiguration_;
        ::xsd::cxx::tree::one< BlockMemoryBehaviorMenuType > BlockMemoryBehaviorMenu_;
        ::xsd::cxx::tree::one< SendBarcodeConfigurationOnReconnectWidgetType > SendBarcodeConfigurationOnReconnectWidget_;
        ::xsd::cxx::tree::one< PollingCardConfigurationType > PollingCardConfiguration_;
        ::xsd::cxx::tree::one< AlarmBoxMonitorConfigurationType > AlarmBoxMonitorConfiguration_;
        ::xsd::cxx::tree::one< SmartCardReaderDiagnosisConfigurationType > SmartCardReaderDiagnosisConfiguration_;
        ::xsd::cxx::tree::one< ChangeHourFunctionalityConfigurationType > ChangeHourFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< FunctionalitiesConfigurationType > FunctionalitiesConfiguration_;
        ::xsd::cxx::tree::one< RunFunctionalityConfigurationType > RunFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< InstallationWizardConfigurationType > InstallationWizardConfiguration_;
        ::xsd::cxx::tree::one< PMWidgetConfigurationType > PMWidgetConfiguration_;
        ::xsd::cxx::tree::one< CardActivatorFunctionalityConfigurationType > CardActivatorFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< CardRecoveryFunctionalityConfigurationType > CardRecoveryFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< VoteDemoFunctionalityConfigurationType > VoteDemoFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< CardAssistedActivationFunctionalityConfigurationType > CardAssistedActivationFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< PrinterDiagnosisConfigurationType > PrinterDiagnosisConfiguration_;
        ::xsd::cxx::tree::one< GeneralDiagnosisConfigurationType > GeneralDiagnosisConfiguration_;
        ::xsd::cxx::tree::one< TouchScreenCalibrationConfigurationType > TouchScreenCalibrationConfiguration_;
        ::xsd::cxx::tree::one< EventSoundsConfigurationType > EventSoundsConfiguration_;
        ::xsd::cxx::tree::one< BarcodeDiagnosisConfigurationType > BarcodeDiagnosisConfiguration_;
        ::xsd::cxx::tree::one< BrightnessDiagnosisConfigurationType > BrightnessDiagnosisConfiguration_;
        ::xsd::cxx::tree::one< AllDiagnosisConfigurationType > AllDiagnosisConfiguration_;
        ::xsd::cxx::tree::one< AutomaticWindowConfigurationType > AutomaticWindowConfiguration_;
        ::xsd::cxx::tree::one< ContingencyCardWidgetConfigurationType > ContingencyCardWidgetConfiguration_;
        ::xsd::cxx::tree::one< IDCardProcessConfigurationType > IDCardProcessConfiguration_;
        ::xsd::cxx::tree::one< BEIDCardWidgetConfigurationType > BEIDCardWidgetConfiguration_;
        ::xsd::cxx::tree::one< MemoryStateWidgetConfigurationType > MemoryStateWidgetConfiguration_;
        ::xsd::cxx::tree::one< HelpWidgetConfigurationType > HelpWidgetConfiguration_;
        ::xsd::cxx::tree::one< WaitingForCardWindowConfigurationType > WaitingForCardWindowConfiguration_;
        ::xsd::cxx::tree::one< LanguageSelectionWindowConfigurationType > LanguageSelectionWindowConfiguration_;
        ::xsd::cxx::tree::one< StatisticFunctionalityConfigurationType > StatisticFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< OpenElectionFunctionalityConfigurationType > OpenElectionFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< AuthenticationWindowConfigurationType > AuthenticationWindowConfiguration_;
        ::xsd::cxx::tree::one< DurationWidgetConfigurationType > DurationWidgetConfiguration_;
        ::xsd::cxx::tree::one< CloseElectionFunctionalityConfigurationType > CloseElectionFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< ActivationConsolidationFunctionalityConfigurationType > ActivationConsolidationFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< CloseVotationFunctionalityConfigurationType > CloseVotationFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< InitializationWindowConfigurationType > InitializationWindowConfiguration_;
        ::xsd::cxx::tree::one< IncidentReportFunctionalityConfigurationType > IncidentReportFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< PollWorkerRegisterFunctionalityConfigurationType > PollWorkerRegisterFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< CloseNoteRegisterFunctionalityConfigurationType > CloseNoteRegisterFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< VoteConsolidationFunctionalityConfigurationType > VoteConsolidationFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< PrintPreviewFunctionalityConfigurationType > PrintPreviewFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< LogReportFunctionalityConfigurationType > LogReportFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< CloseNotetFunctionalityConfigurationType > CloseNotetFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< VotingExperienceValidationScreensFunctionalityConfigurationType > VotingExperienceValidationScreensFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< VotingForDisabledFunctionalityConfigurationType > VotingForDisabledFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< PoliceNoteRegisterFunctionalityConfigurationType > PoliceNoteRegisterFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< DataUtilsValidatorFunctionalityConfigurationType > DataUtilsValidatorFunctionalityConfiguration_;
        ::xsd::cxx::tree::one< ThemesConfigurationType > ThemesConfiguration_;
        ::xsd::cxx::tree::one< FunctionalityWizardConfigurationType > FunctionalityWizardConfiguration_;

        //@endcond
      };

      bool
      operator== (const SaesGUIConfiguration&, const SaesGUIConfiguration&);

      bool
      operator!= (const SaesGUIConfiguration&, const SaesGUIConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %OpenElectionSteps
       * schema type.
       */
      class OpenElectionSteps: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_REGISTERNOTE,
          CONFIGURATION_REQUESTIDCARD,
          CONFIGURATION_OPENELECTION
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        OpenElectionSteps ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        OpenElectionSteps (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        OpenElectionSteps (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        OpenElectionSteps (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        OpenElectionSteps (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        OpenElectionSteps (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        OpenElectionSteps (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        OpenElectionSteps (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        OpenElectionSteps (const OpenElectionSteps& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual OpenElectionSteps*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        OpenElectionSteps&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_OpenElectionSteps_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_OpenElectionSteps_convert () const;

        public:
        static const char* const _xsd_OpenElectionSteps_literals_[3];
        static const Value _xsd_OpenElectionSteps_indexes_[3];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ScanConsolidationConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ScanConsolidationConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ScanPopUpMessageConfiguration
         *
         * @brief Accessor and modifier functions for the %ScanPopUpMessageConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ScanPopUpMessageConfiguration ScanPopUpMessageConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ScanPopUpMessageConfigurationType, char > ScanPopUpMessageConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ScanPopUpMessageConfigurationType&
        getScanPopUpMessageConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ScanPopUpMessageConfigurationType&
        getScanPopUpMessageConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setScanPopUpMessageConfiguration (const ScanPopUpMessageConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setScanPopUpMessageConfiguration (::std::auto_ptr< ScanPopUpMessageConfigurationType > p);

        //@}

        /**
         * @name EnabledChangeColor
         *
         * @brief Accessor and modifier functions for the %EnabledChangeColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean EnabledChangeColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnabledChangeColorType, char > EnabledChangeColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnabledChangeColorType&
        getEnabledChangeColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnabledChangeColorType&
        getEnabledChangeColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnabledChangeColor (const EnabledChangeColorType& x);

        //@}

        /**
         * @name BoxColorValid
         *
         * @brief Accessor and modifier functions for the %BoxColorValid
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration BoxColorValidType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BoxColorValidType, char > BoxColorValidTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BoxColorValidType&
        getBoxColorValid () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BoxColorValidType&
        getBoxColorValid ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBoxColorValid (const BoxColorValidType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBoxColorValid (::std::auto_ptr< BoxColorValidType > p);

        //@}

        /**
         * @name BoxColorDuplicate
         *
         * @brief Accessor and modifier functions for the %BoxColorDuplicate
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration BoxColorDuplicateType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BoxColorDuplicateType, char > BoxColorDuplicateTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BoxColorDuplicateType&
        getBoxColorDuplicate () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BoxColorDuplicateType&
        getBoxColorDuplicate ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBoxColorDuplicate (const BoxColorDuplicateType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBoxColorDuplicate (::std::auto_ptr< BoxColorDuplicateType > p);

        //@}

        /**
         * @name BoxColorBad
         *
         * @brief Accessor and modifier functions for the %BoxColorBad
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration BoxColorBadType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BoxColorBadType, char > BoxColorBadTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BoxColorBadType&
        getBoxColorBad () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BoxColorBadType&
        getBoxColorBad ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBoxColorBad (const BoxColorBadType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBoxColorBad (::std::auto_ptr< BoxColorBadType > p);

        //@}

        /**
         * @name FontColorValid
         *
         * @brief Accessor and modifier functions for the %FontColorValid
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration FontColorValidType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontColorValidType, char > FontColorValidTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontColorValidType&
        getFontColorValid () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontColorValidType&
        getFontColorValid ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontColorValid (const FontColorValidType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFontColorValid (::std::auto_ptr< FontColorValidType > p);

        //@}

        /**
         * @name FontColorDuplicate
         *
         * @brief Accessor and modifier functions for the %FontColorDuplicate
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration FontColorDuplicateType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontColorDuplicateType, char > FontColorDuplicateTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontColorDuplicateType&
        getFontColorDuplicate () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontColorDuplicateType&
        getFontColorDuplicate ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontColorDuplicate (const FontColorDuplicateType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFontColorDuplicate (::std::auto_ptr< FontColorDuplicateType > p);

        //@}

        /**
         * @name FontColorBad
         *
         * @brief Accessor and modifier functions for the %FontColorBad
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration FontColorBadType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontColorBadType, char > FontColorBadTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontColorBadType&
        getFontColorBad () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontColorBadType&
        getFontColorBad ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontColorBad (const FontColorBadType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFontColorBad (::std::auto_ptr< FontColorBadType > p);

        //@}

        /**
         * @name TextConfiguration
         *
         * @brief Accessor and modifier functions for the %TextConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TextConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextConfigurationType, char > TextConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextConfigurationType&
        getTextConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextConfigurationType&
        getTextConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextConfiguration (const TextConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextConfiguration (::std::auto_ptr< TextConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ScanConsolidationConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ScanConsolidationConfiguration (const ScanPopUpMessageConfigurationType&,
                                        const EnabledChangeColorType&,
                                        const BoxColorValidType&,
                                        const BoxColorDuplicateType&,
                                        const BoxColorBadType&,
                                        const FontColorValidType&,
                                        const FontColorDuplicateType&,
                                        const FontColorBadType&,
                                        const TextConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ScanConsolidationConfiguration (::std::auto_ptr< ScanPopUpMessageConfigurationType >&,
                                        const EnabledChangeColorType&,
                                        ::std::auto_ptr< BoxColorValidType >&,
                                        ::std::auto_ptr< BoxColorDuplicateType >&,
                                        ::std::auto_ptr< BoxColorBadType >&,
                                        ::std::auto_ptr< FontColorValidType >&,
                                        ::std::auto_ptr< FontColorDuplicateType >&,
                                        ::std::auto_ptr< FontColorBadType >&,
                                        ::std::auto_ptr< TextConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ScanConsolidationConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ScanConsolidationConfiguration (const ScanConsolidationConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ScanConsolidationConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ScanConsolidationConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ScanPopUpMessageConfigurationType > ScanPopUpMessageConfiguration_;
        ::xsd::cxx::tree::one< EnabledChangeColorType > EnabledChangeColor_;
        ::xsd::cxx::tree::one< BoxColorValidType > BoxColorValid_;
        ::xsd::cxx::tree::one< BoxColorDuplicateType > BoxColorDuplicate_;
        ::xsd::cxx::tree::one< BoxColorBadType > BoxColorBad_;
        ::xsd::cxx::tree::one< FontColorValidType > FontColorValid_;
        ::xsd::cxx::tree::one< FontColorDuplicateType > FontColorDuplicate_;
        ::xsd::cxx::tree::one< FontColorBadType > FontColorBad_;
        ::xsd::cxx::tree::one< TextConfigurationType > TextConfiguration_;

        //@endcond
      };

      bool
      operator== (const ScanConsolidationConfiguration&, const ScanConsolidationConfiguration&);

      bool
      operator!= (const ScanConsolidationConfiguration&, const ScanConsolidationConfiguration&);


      /**
       * @brief Class corresponding to the %ScanPopUpMessageConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ScanPopUpMessageConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Visible
         *
         * @brief Accessor and modifier functions for the %Visible
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean VisibleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VisibleType, char > VisibleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VisibleType&
        getVisible () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VisibleType&
        getVisible ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVisible (const VisibleType& x);

        //@}

        /**
         * @name TimeOut
         *
         * @brief Accessor and modifier functions for the %TimeOut
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeOutType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeOutType, char > TimeOutTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeOutType&
        getTimeOut () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeOutType&
        getTimeOut ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeOut (const TimeOutType& x);

        //@}

        /**
         * @name Opacity
         *
         * @brief Accessor and modifier functions for the %Opacity
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger OpacityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OpacityType, char > OpacityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OpacityType&
        getOpacity () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OpacityType&
        getOpacity ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOpacity (const OpacityType& x);

        //@}

        /**
         * @name Width
         *
         * @brief Accessor and modifier functions for the %Width
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger WidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WidthType, char > WidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WidthType&
        getWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WidthType&
        getWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWidth (const WidthType& x);

        //@}

        /**
         * @name Height
         *
         * @brief Accessor and modifier functions for the %Height
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger HeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeightType, char > HeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeightType&
        getHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeightType&
        getHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeight (const HeightType& x);

        //@}

        /**
         * @name X
         *
         * @brief Accessor and modifier functions for the %X
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger XType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< XType, char > XTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const XType&
        getX () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        XType&
        getX ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setX (const XType& x);

        //@}

        /**
         * @name Y
         *
         * @brief Accessor and modifier functions for the %Y
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger YType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< YType, char > YTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const YType&
        getY () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        YType&
        getY ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setY (const YType& x);

        //@}

        /**
         * @name Position
         *
         * @brief Accessor and modifier functions for the %Position
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PositionConfiguration PositionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PositionType, char > PositionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PositionType&
        getPosition () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PositionType&
        getPosition ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPosition (const PositionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPosition (::std::auto_ptr< PositionType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ScanPopUpMessageConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ScanPopUpMessageConfiguration (const VisibleType&,
                                       const TimeOutType&,
                                       const OpacityType&,
                                       const WidthType&,
                                       const HeightType&,
                                       const XType&,
                                       const YType&,
                                       const PositionType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ScanPopUpMessageConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ScanPopUpMessageConfiguration (const ScanPopUpMessageConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ScanPopUpMessageConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ScanPopUpMessageConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< VisibleType > Visible_;
        ::xsd::cxx::tree::one< TimeOutType > TimeOut_;
        ::xsd::cxx::tree::one< OpacityType > Opacity_;
        ::xsd::cxx::tree::one< WidthType > Width_;
        ::xsd::cxx::tree::one< HeightType > Height_;
        ::xsd::cxx::tree::one< XType > X_;
        ::xsd::cxx::tree::one< YType > Y_;
        ::xsd::cxx::tree::one< PositionType > Position_;

        //@endcond
      };

      bool
      operator== (const ScanPopUpMessageConfiguration&, const ScanPopUpMessageConfiguration&);

      bool
      operator!= (const ScanPopUpMessageConfiguration&, const ScanPopUpMessageConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %PositionConfiguration
       * schema type.
       */
      class PositionConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_TOP_RIGHT,
          CONFIGURATION_TOP_LEFT,
          CONFIGURATION_TOP_CENTER,
          CONFIGURATION_CENTER_RIGHT,
          CONFIGURATION_CENTER_LEFT,
          CONFIGURATION_CENTER_CENTER,
          CONFIGURATION_BOTTOM_RIGHT,
          CONFIGURATION_BOTTOM_LEFT,
          CONFIGURATION_BOTTOM_CENTER,
          CONFIGURATION_FULL_SCREEN,
          CONFIGURATION_CUSTOM
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        PositionConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        PositionConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        PositionConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        PositionConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        PositionConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PositionConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PositionConfiguration (const ::xercesc::DOMAttr& a,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PositionConfiguration (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PositionConfiguration (const PositionConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PositionConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        PositionConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_PositionConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_PositionConfiguration_convert () const;

        public:
        static const char* const _xsd_PositionConfiguration_literals_[11];
        static const Value _xsd_PositionConfiguration_indexes_[11];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %TreeColumnConfiguration schema type.
       *
       * @nosubgrouping
       */
      class TreeColumnConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Resizable
         *
         * @brief Accessor and modifier functions for the %Resizable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ResizableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ResizableType, char > ResizableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ResizableType&
        getResizable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ResizableType&
        getResizable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setResizable (const ResizableType& x);

        //@}

        /**
         * @name MaxWidth
         *
         * @brief Accessor and modifier functions for the %MaxWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxWidthType, char > MaxWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxWidthType&
        getMaxWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxWidthType&
        getMaxWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxWidth (const MaxWidthType& x);

        //@}

        /**
         * @name MinWidth
         *
         * @brief Accessor and modifier functions for the %MinWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MinWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinWidthType, char > MinWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinWidthType&
        getMinWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinWidthType&
        getMinWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMinWidth (const MinWidthType& x);

        //@}

        /**
         * @name Alignment
         *
         * @brief Accessor and modifier functions for the %Alignment
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double AlignmentType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AlignmentType, char, ::xsd::cxx::tree::schema_type::double_ > AlignmentTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AlignmentType&
        getAlignment () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AlignmentType&
        getAlignment ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAlignment (const AlignmentType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        TreeColumnConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        TreeColumnConfiguration (const ResizableType&,
                                 const MaxWidthType&,
                                 const MinWidthType&,
                                 const AlignmentType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TreeColumnConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        TreeColumnConfiguration (const TreeColumnConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual TreeColumnConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~TreeColumnConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ResizableType > Resizable_;
        ::xsd::cxx::tree::one< MaxWidthType > MaxWidth_;
        ::xsd::cxx::tree::one< MinWidthType > MinWidth_;
        ::xsd::cxx::tree::one< AlignmentType > Alignment_;

        //@endcond
      };

      bool
      operator== (const TreeColumnConfiguration&, const TreeColumnConfiguration&);

      bool
      operator!= (const TreeColumnConfiguration&, const TreeColumnConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %IncidentReportColumn
       * schema type.
       */
      class IncidentReportColumn: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_DESCRIPTION,
          CONFIGURATION_NOTIFICATIONDATE,
          CONFIGURATION_NAMESOFTECHNICIANS,
          CONFIGURATION_ACTIVITYOFTECHNICIANS,
          CONFIGURATION_ADDITIONALOBSERVATIONS,
          CONFIGURATION_PERSONALARRIVALDATE,
          CONFIGURATION_INCIDENTSOLUTIONDATE,
          CONFIGURATION_COMPLETE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        IncidentReportColumn ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        IncidentReportColumn (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        IncidentReportColumn (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        IncidentReportColumn (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        IncidentReportColumn (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncidentReportColumn (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncidentReportColumn (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncidentReportColumn (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IncidentReportColumn (const IncidentReportColumn& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IncidentReportColumn*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        IncidentReportColumn&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_IncidentReportColumn_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_IncidentReportColumn_convert () const;

        public:
        static const char* const _xsd_IncidentReportColumn_literals_[8];
        static const Value _xsd_IncidentReportColumn_indexes_[8];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %IncidentReportTreeViewConfiguration schema type.
       *
       * @nosubgrouping
       */
      class IncidentReportTreeViewConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name IncidentReportColumn
         *
         * @brief Accessor and modifier functions for the %IncidentReportColumn
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IncidentReportColumn IncidentReportColumnType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncidentReportColumnType, char > IncidentReportColumnTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncidentReportColumnType&
        getIncidentReportColumn () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncidentReportColumnType&
        getIncidentReportColumn ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncidentReportColumn (const IncidentReportColumnType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIncidentReportColumn (::std::auto_ptr< IncidentReportColumnType > p);

        //@}

        /**
         * @name IncidentColumnConfiguration
         *
         * @brief Accessor and modifier functions for the %IncidentColumnConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TreeColumnConfiguration IncidentColumnConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncidentColumnConfigurationType, char > IncidentColumnConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncidentColumnConfigurationType&
        getIncidentColumnConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncidentColumnConfigurationType&
        getIncidentColumnConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncidentColumnConfiguration (const IncidentColumnConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIncidentColumnConfiguration (::std::auto_ptr< IncidentColumnConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        IncidentReportTreeViewConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        IncidentReportTreeViewConfiguration (const IncidentReportColumnType&,
                                             const IncidentColumnConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        IncidentReportTreeViewConfiguration (const IncidentReportColumnType&,
                                             ::std::auto_ptr< IncidentColumnConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncidentReportTreeViewConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IncidentReportTreeViewConfiguration (const IncidentReportTreeViewConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IncidentReportTreeViewConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~IncidentReportTreeViewConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< IncidentReportColumnType > IncidentReportColumn_;
        ::xsd::cxx::tree::one< IncidentColumnConfigurationType > IncidentColumnConfiguration_;

        //@endcond
      };

      bool
      operator== (const IncidentReportTreeViewConfiguration&, const IncidentReportTreeViewConfiguration&);

      bool
      operator!= (const IncidentReportTreeViewConfiguration&, const IncidentReportTreeViewConfiguration&);


      /**
       * @brief Class corresponding to the %ButtonConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ButtonConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ButtonWidth
         *
         * @brief Accessor and modifier functions for the %ButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonWidthType, char > ButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonWidthType&
        getButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonWidthType&
        getButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonWidth (const ButtonWidthType& x);

        //@}

        /**
         * @name ButtonHeight
         *
         * @brief Accessor and modifier functions for the %ButtonHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonHeightType, char > ButtonHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonHeightType&
        getButtonHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonHeightType&
        getButtonHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonHeight (const ButtonHeightType& x);

        //@}

        /**
         * @name FontSize
         *
         * @brief Accessor and modifier functions for the %FontSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FontSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontSizeType, char > FontSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontSizeType&
        getFontSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontSizeType&
        getFontSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontSize (const FontSizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ButtonConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ButtonConfiguration (const ButtonWidthType&,
                             const ButtonHeightType&,
                             const FontSizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ButtonConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ButtonConfiguration (const ButtonConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ButtonConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ButtonConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ButtonWidthType > ButtonWidth_;
        ::xsd::cxx::tree::one< ButtonHeightType > ButtonHeight_;
        ::xsd::cxx::tree::one< FontSizeType > FontSize_;

        //@endcond
      };

      bool
      operator== (const ButtonConfiguration&, const ButtonConfiguration&);

      bool
      operator!= (const ButtonConfiguration&, const ButtonConfiguration&);


      /**
       * @brief Class corresponding to the %ButtonBoxConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ButtonBoxConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ButtonWidth
         *
         * @brief Accessor and modifier functions for the %ButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonWidthType, char > ButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonWidthType&
        getButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonWidthType&
        getButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonWidth (const ButtonWidthType& x);

        //@}

        /**
         * @name ButtonHeight
         *
         * @brief Accessor and modifier functions for the %ButtonHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonHeightType, char > ButtonHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonHeightType&
        getButtonHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonHeightType&
        getButtonHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonHeight (const ButtonHeightType& x);

        //@}

        /**
         * @name Spacing
         *
         * @brief Accessor and modifier functions for the %Spacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SpacingType, char > SpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SpacingType&
        getSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SpacingType&
        getSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSpacing (const SpacingType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ButtonBoxConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ButtonBoxConfiguration (const ButtonWidthType&,
                                const ButtonHeightType&,
                                const SpacingType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ButtonBoxConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ButtonBoxConfiguration (const ButtonBoxConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ButtonBoxConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ButtonBoxConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ButtonWidthType > ButtonWidth_;
        ::xsd::cxx::tree::one< ButtonHeightType > ButtonHeight_;
        ::xsd::cxx::tree::one< SpacingType > Spacing_;

        //@endcond
      };

      bool
      operator== (const ButtonBoxConfiguration&, const ButtonBoxConfiguration&);

      bool
      operator!= (const ButtonBoxConfiguration&, const ButtonBoxConfiguration&);


      /**
       * @brief Class corresponding to the %MenuWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class MenuWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name FirstLevelWidth
         *
         * @brief Accessor and modifier functions for the %FirstLevelWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FirstLevelWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstLevelWidthType, char > FirstLevelWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstLevelWidthType&
        getFirstLevelWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstLevelWidthType&
        getFirstLevelWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstLevelWidth (const FirstLevelWidthType& x);

        //@}

        /**
         * @name FirstLevelHeight
         *
         * @brief Accessor and modifier functions for the %FirstLevelHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FirstLevelHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstLevelHeightType, char > FirstLevelHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstLevelHeightType&
        getFirstLevelHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstLevelHeightType&
        getFirstLevelHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstLevelHeight (const FirstLevelHeightType& x);

        //@}

        /**
         * @name FirstLevelSpacing
         *
         * @brief Accessor and modifier functions for the %FirstLevelSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FirstLevelSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstLevelSpacingType, char > FirstLevelSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstLevelSpacingType&
        getFirstLevelSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstLevelSpacingType&
        getFirstLevelSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstLevelSpacing (const FirstLevelSpacingType& x);

        //@}

        /**
         * @name FirstLevelBorderWidth
         *
         * @brief Accessor and modifier functions for the %FirstLevelBorderWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FirstLevelBorderWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstLevelBorderWidthType, char > FirstLevelBorderWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstLevelBorderWidthType&
        getFirstLevelBorderWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstLevelBorderWidthType&
        getFirstLevelBorderWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstLevelBorderWidth (const FirstLevelBorderWidthType& x);

        //@}

        /**
         * @name FirstLevelFrameWidth
         *
         * @brief Accessor and modifier functions for the %FirstLevelFrameWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FirstLevelFrameWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstLevelFrameWidthType, char > FirstLevelFrameWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstLevelFrameWidthType&
        getFirstLevelFrameWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstLevelFrameWidthType&
        getFirstLevelFrameWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstLevelFrameWidth (const FirstLevelFrameWidthType& x);

        //@}

        /**
         * @name FirstLevelFrameHeight
         *
         * @brief Accessor and modifier functions for the %FirstLevelFrameHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FirstLevelFrameHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstLevelFrameHeightType, char > FirstLevelFrameHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstLevelFrameHeightType&
        getFirstLevelFrameHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstLevelFrameHeightType&
        getFirstLevelFrameHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstLevelFrameHeight (const FirstLevelFrameHeightType& x);

        //@}

        /**
         * @name SecondLevelWidth
         *
         * @brief Accessor and modifier functions for the %SecondLevelWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SecondLevelWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SecondLevelWidthType, char > SecondLevelWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SecondLevelWidthType&
        getSecondLevelWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SecondLevelWidthType&
        getSecondLevelWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSecondLevelWidth (const SecondLevelWidthType& x);

        //@}

        /**
         * @name SecondLevelHeight
         *
         * @brief Accessor and modifier functions for the %SecondLevelHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SecondLevelHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SecondLevelHeightType, char > SecondLevelHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SecondLevelHeightType&
        getSecondLevelHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SecondLevelHeightType&
        getSecondLevelHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSecondLevelHeight (const SecondLevelHeightType& x);

        //@}

        /**
         * @name SecondLevelSpacing
         *
         * @brief Accessor and modifier functions for the %SecondLevelSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SecondLevelSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SecondLevelSpacingType, char > SecondLevelSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SecondLevelSpacingType&
        getSecondLevelSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SecondLevelSpacingType&
        getSecondLevelSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSecondLevelSpacing (const SecondLevelSpacingType& x);

        //@}

        /**
         * @name SecondLevelBorderWidth
         *
         * @brief Accessor and modifier functions for the %SecondLevelBorderWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SecondLevelBorderWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SecondLevelBorderWidthType, char > SecondLevelBorderWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SecondLevelBorderWidthType&
        getSecondLevelBorderWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SecondLevelBorderWidthType&
        getSecondLevelBorderWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSecondLevelBorderWidth (const SecondLevelBorderWidthType& x);

        //@}

        /**
         * @name SecondLevelFramePadding
         *
         * @brief Accessor and modifier functions for the %SecondLevelFramePadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SecondLevelFramePaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SecondLevelFramePaddingType, char > SecondLevelFramePaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SecondLevelFramePaddingType&
        getSecondLevelFramePadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SecondLevelFramePaddingType&
        getSecondLevelFramePadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSecondLevelFramePadding (const SecondLevelFramePaddingType& x);

        //@}

        /**
         * @name HasShortcut
         *
         * @brief Accessor and modifier functions for the %HasShortcut
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HasShortcutType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HasShortcutType, char > HasShortcutTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HasShortcutType&
        getHasShortcut () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HasShortcutType&
        getHasShortcut ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHasShortcut (const HasShortcutType& x);

        //@}

        /**
         * @name RootOption
         *
         * @brief Accessor and modifier functions for the %RootOption
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOption RootOptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RootOptionType, char > RootOptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RootOptionType&
        getRootOption () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RootOptionType&
        getRootOption ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRootOption (const RootOptionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRootOption (::std::auto_ptr< RootOptionType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        MenuWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MenuWidgetConfiguration (const FirstLevelWidthType&,
                                 const FirstLevelHeightType&,
                                 const FirstLevelSpacingType&,
                                 const FirstLevelBorderWidthType&,
                                 const FirstLevelFrameWidthType&,
                                 const FirstLevelFrameHeightType&,
                                 const SecondLevelWidthType&,
                                 const SecondLevelHeightType&,
                                 const SecondLevelSpacingType&,
                                 const SecondLevelBorderWidthType&,
                                 const SecondLevelFramePaddingType&,
                                 const HasShortcutType&,
                                 const RootOptionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        MenuWidgetConfiguration (const FirstLevelWidthType&,
                                 const FirstLevelHeightType&,
                                 const FirstLevelSpacingType&,
                                 const FirstLevelBorderWidthType&,
                                 const FirstLevelFrameWidthType&,
                                 const FirstLevelFrameHeightType&,
                                 const SecondLevelWidthType&,
                                 const SecondLevelHeightType&,
                                 const SecondLevelSpacingType&,
                                 const SecondLevelBorderWidthType&,
                                 const SecondLevelFramePaddingType&,
                                 const HasShortcutType&,
                                 ::std::auto_ptr< RootOptionType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MenuWidgetConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MenuWidgetConfiguration (const MenuWidgetConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MenuWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~MenuWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< FirstLevelWidthType > FirstLevelWidth_;
        ::xsd::cxx::tree::one< FirstLevelHeightType > FirstLevelHeight_;
        ::xsd::cxx::tree::one< FirstLevelSpacingType > FirstLevelSpacing_;
        ::xsd::cxx::tree::one< FirstLevelBorderWidthType > FirstLevelBorderWidth_;
        ::xsd::cxx::tree::one< FirstLevelFrameWidthType > FirstLevelFrameWidth_;
        ::xsd::cxx::tree::one< FirstLevelFrameHeightType > FirstLevelFrameHeight_;
        ::xsd::cxx::tree::one< SecondLevelWidthType > SecondLevelWidth_;
        ::xsd::cxx::tree::one< SecondLevelHeightType > SecondLevelHeight_;
        ::xsd::cxx::tree::one< SecondLevelSpacingType > SecondLevelSpacing_;
        ::xsd::cxx::tree::one< SecondLevelBorderWidthType > SecondLevelBorderWidth_;
        ::xsd::cxx::tree::one< SecondLevelFramePaddingType > SecondLevelFramePadding_;
        ::xsd::cxx::tree::one< HasShortcutType > HasShortcut_;
        ::xsd::cxx::tree::one< RootOptionType > RootOption_;

        //@endcond
      };

      bool
      operator== (const MenuWidgetConfiguration&, const MenuWidgetConfiguration&);

      bool
      operator!= (const MenuWidgetConfiguration&, const MenuWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %MenuOption schema type.
       *
       * @nosubgrouping
       */
      class MenuOption: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NameKey
         *
         * @brief Accessor and modifier functions for the %NameKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String NameKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameKeyType, char > NameKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NameKeyType&
        getNameKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NameKeyType&
        getNameKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNameKey (const NameKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNameKey (::std::auto_ptr< NameKeyType > p);

        //@}

        /**
         * @name UntraslatedKey
         *
         * @brief Accessor and modifier functions for the %UntraslatedKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String UntraslatedKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UntraslatedKeyType, char > UntraslatedKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UntraslatedKeyType&
        getUntraslatedKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UntraslatedKeyType&
        getUntraslatedKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUntraslatedKey (const UntraslatedKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUntraslatedKey (::std::auto_ptr< UntraslatedKeyType > p);

        //@}

        /**
         * @name ImageKey
         *
         * @brief Accessor and modifier functions for the %ImageKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ImageKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ImageKeyType, char > ImageKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ImageKeyType&
        getImageKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ImageKeyType&
        getImageKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setImageKey (const ImageKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setImageKey (::std::auto_ptr< ImageKeyType > p);

        //@}

        /**
         * @name Code
         *
         * @brief Accessor and modifier functions for the %Code
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer CodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CodeType&
        getCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CodeType&
        getCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCode (const CodeType& x);

        //@}

        /**
         * @name MappingKey
         *
         * @brief Accessor and modifier functions for the %MappingKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer MappingKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MappingKeyType, char > MappingKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MappingKeyType&
        getMappingKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MappingKeyType&
        getMappingKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMappingKey (const MappingKeyType& x);

        //@}

        /**
         * @name MappingKeyName
         *
         * @brief Accessor and modifier functions for the %MappingKeyName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String MappingKeyNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MappingKeyNameType, char > MappingKeyNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MappingKeyNameType&
        getMappingKeyName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MappingKeyNameType&
        getMappingKeyName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMappingKeyName (const MappingKeyNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMappingKeyName (::std::auto_ptr< MappingKeyNameType > p);

        //@}

        /**
         * @name OptionType
         *
         * @brief Accessor and modifier functions for the %OptionType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOptionType OptionTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptionTypeType, char > OptionTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptionTypeType&
        getOptionType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptionTypeType&
        getOptionType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOptionType (const OptionTypeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setOptionType (::std::auto_ptr< OptionTypeType > p);

        //@}

        /**
         * @name MenuOptions
         *
         * @brief Accessor and modifier functions for the %MenuOptions
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOptions MenuOptionsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MenuOptionsType, char > MenuOptionsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MenuOptionsType&
        getMenuOptions () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MenuOptionsType&
        getMenuOptions ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMenuOptions (const MenuOptionsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMenuOptions (::std::auto_ptr< MenuOptionsType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        MenuOption ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MenuOption (const NameKeyType&,
                    const UntraslatedKeyType&,
                    const ImageKeyType&,
                    const CodeType&,
                    const MappingKeyType&,
                    const MappingKeyNameType&,
                    const OptionTypeType&,
                    const MenuOptionsType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        MenuOption (const NameKeyType&,
                    const UntraslatedKeyType&,
                    const ImageKeyType&,
                    const CodeType&,
                    const MappingKeyType&,
                    const MappingKeyNameType&,
                    const OptionTypeType&,
                    ::std::auto_ptr< MenuOptionsType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MenuOption (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MenuOption (const MenuOption& x,
                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MenuOption*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~MenuOption ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NameKeyType > NameKey_;
        ::xsd::cxx::tree::one< UntraslatedKeyType > UntraslatedKey_;
        ::xsd::cxx::tree::one< ImageKeyType > ImageKey_;
        ::xsd::cxx::tree::one< CodeType > Code_;
        ::xsd::cxx::tree::one< MappingKeyType > MappingKey_;
        ::xsd::cxx::tree::one< MappingKeyNameType > MappingKeyName_;
        ::xsd::cxx::tree::one< OptionTypeType > OptionType_;
        ::xsd::cxx::tree::one< MenuOptionsType > MenuOptions_;

        //@endcond
      };

      bool
      operator== (const MenuOption&, const MenuOption&);

      bool
      operator!= (const MenuOption&, const MenuOption&);


      /**
       * @brief Enumeration class corresponding to the %MenuOptionType
       * schema type.
       */
      class MenuOptionType: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_XMLMENU,
          CONFIGURATION_XMLMOPENELECTIONFUNCTIONALITY,
          CONFIGURATION_XMLMCLOSEELECTIONFUNCTIONALITY,
          CONFIGURATION_XMLMDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMSCREADERDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMPRINTERDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMALARMBOXDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMCALIBRATIONDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMBRIGHTNESSDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMBARCODEDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMALLDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMFLASHDIAGNOSISFUNCTIONALITY,
          CONFIGURATION_XMLMCHANGEHOURFUNCTIONALITY,
          CONFIGURATION_XMLMCARDGENERATORFUNCTIONALITY,
          CONFIGURATION_XMLMASSISTEDCARDGENERATORFUNCTIONALITY,
          CONFIGURATION_XMLMRECOVERYCARDGENERATORFUNCTIONALITY,
          CONFIGURATION_XMLMVOTINGMACHINEINSTALLATIONFUNCTIONALITY,
          CONFIGURATION_XMLMCHANGELANGUAGEFUNCTIONALITY,
          CONFIGURATION_XMLMVOTEPROCESSDEMOFUNCTIONALITY,
          CONFIGURATION_XMLMPRINTPREVIEWFUNCTIONALITY,
          CONFIGURATION_XMLMINCIDENTREPORTFUNCTIONALITY,
          CONFIGURATION_XMLMSTATISTICSREPORTFUNCTIONALITY,
          CONFIGURATION_XMLMPOLLWORKERREGISTERFUNCTIONALITY,
          CONFIGURATION_XMLMVOTINGEXPERIENCEVALIDATIONFUNCTIONALITY,
          CONFIGURATION_XMLMVOTECONSOLIDATIONFUNCTIONALITY,
          CONFIGURATION_XMLMCLOSEVOTATIONFUNCTIONALITY,
          CONFIGURATION_XMLMREGISTERPRESIDENTNOTESFUNCTIONALITY,
          CONFIGURATION_XMLMMREPORTPRINTINGFUNCTIONALITY,
          CONFIGURATION_XMLMLOGREPORTFUNCTIONALITY,
          CONFIGURATION_XMLMSHUTDOWMMACHINEFUNCTIONALITY,
          CONFIGURATION_XMLMFILLASSISTEDACTIVATIONINFOFUNCTIONALITY,
          CONFIGURATION_XMLMACTIVATIONCONSOLIDATIONFUNCTIONALITY,
          CONFIGURATION_XMLMVOTINGFORDISABLEDFUNCTIONALITY,
          CONFIGURATION_XMLMPOLICENOTESFUNCTIONALITY,
          CONFIGURATION_XMLMDATAUTILSVALIDATORFUNCTIONALITY
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        MenuOptionType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        MenuOptionType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        MenuOptionType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        MenuOptionType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        MenuOptionType (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MenuOptionType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MenuOptionType (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MenuOptionType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MenuOptionType (const MenuOptionType& x,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MenuOptionType*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        MenuOptionType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_MenuOptionType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_MenuOptionType_convert () const;

        public:
        static const char* const _xsd_MenuOptionType_literals_[35];
        static const Value _xsd_MenuOptionType_indexes_[35];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %CustomAttributesPresentationType
       * schema type.
       */
      class CustomAttributesPresentationType: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_SELECTIONWINDOWS,
          CONFIGURATION_EVENTBOXES,
          CONFIGURATION_COMBOBOXES,
          CONFIGURATION_RADIOBUTTONS
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        CustomAttributesPresentationType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        CustomAttributesPresentationType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        CustomAttributesPresentationType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        CustomAttributesPresentationType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        CustomAttributesPresentationType (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CustomAttributesPresentationType (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CustomAttributesPresentationType (const ::xercesc::DOMAttr& a,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CustomAttributesPresentationType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CustomAttributesPresentationType (const CustomAttributesPresentationType& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CustomAttributesPresentationType*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        CustomAttributesPresentationType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_CustomAttributesPresentationType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_CustomAttributesPresentationType_convert () const;

        public:
        static const char* const _xsd_CustomAttributesPresentationType_literals_[4];
        static const Value _xsd_CustomAttributesPresentationType_indexes_[4];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %DiagnosticType schema type.
       *
       * @nosubgrouping
       */
      class DiagnosticType: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Device
         *
         * @brief Accessor and modifier functions for the %Device
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::Configuration::DiagnosticDevice DeviceType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< DeviceType, char > DeviceTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const DeviceType&
        getDevice () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        DeviceType&
        getDevice ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setDevice (const DeviceType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDevice (::std::auto_ptr< DeviceType > p);

        //@}

        /**
         * @name Mandatory
         *
         * @brief Accessor and modifier functions for the %Mandatory
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean MandatoryType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MandatoryType, char > MandatoryTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const MandatoryType&
        getMandatory () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        MandatoryType&
        getMandatory ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMandatory (const MandatoryType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        DiagnosticType ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        DiagnosticType (const DeviceType&,
                        const MandatoryType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DiagnosticType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DiagnosticType (const DiagnosticType& x,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DiagnosticType*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~DiagnosticType ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< DeviceType > Device_;
        ::xsd::cxx::tree::one< MandatoryType > Mandatory_;

        //@endcond
      };

      bool
      operator== (const DiagnosticType&, const DiagnosticType&);

      bool
      operator!= (const DiagnosticType&, const DiagnosticType&);


      /**
       * @brief Enumeration class corresponding to the %DiagnosticDevice
       * schema type.
       */
      class DiagnosticDevice: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_BARCODE,
          CONFIGURATION_PRINTER,
          CONFIGURATION_ALARMBOX,
          CONFIGURATION_SMARTCARD,
          CONFIGURATION_TOUCHSCREENCALIBRATION,
          CONFIGURATION_SCREENCONTRAST,
          CONFIGURATION_FLASH
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        DiagnosticDevice ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        DiagnosticDevice (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        DiagnosticDevice (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        DiagnosticDevice (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        DiagnosticDevice (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DiagnosticDevice (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DiagnosticDevice (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DiagnosticDevice (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DiagnosticDevice (const DiagnosticDevice& x,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DiagnosticDevice*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        DiagnosticDevice&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_DiagnosticDevice_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_DiagnosticDevice_convert () const;

        public:
        static const char* const _xsd_DiagnosticDevice_literals_[7];
        static const Value _xsd_DiagnosticDevice_indexes_[7];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %VotingExperienceConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VotingExperienceConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name SortOptionsAlphabetical
         *
         * @brief Accessor and modifier functions for the %SortOptionsAlphabetical
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean SortOptionsAlphabeticalType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SortOptionsAlphabeticalType, char > SortOptionsAlphabeticalTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SortOptionsAlphabeticalType&
        getSortOptionsAlphabetical () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SortOptionsAlphabeticalType&
        getSortOptionsAlphabetical ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSortOptionsAlphabetical (const SortOptionsAlphabeticalType& x);

        //@}

        /**
         * @name SortLanguagesAlphabetical
         *
         * @brief Accessor and modifier functions for the %SortLanguagesAlphabetical
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean SortLanguagesAlphabeticalType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SortLanguagesAlphabeticalType, char > SortLanguagesAlphabeticalTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SortLanguagesAlphabeticalType&
        getSortLanguagesAlphabetical () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SortLanguagesAlphabeticalType&
        getSortLanguagesAlphabetical ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSortLanguagesAlphabetical (const SortLanguagesAlphabeticalType& x);

        //@}

        /**
         * @name DetectCardExtraction
         *
         * @brief Accessor and modifier functions for the %DetectCardExtraction
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean DetectCardExtractionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DetectCardExtractionType, char > DetectCardExtractionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DetectCardExtractionType&
        getDetectCardExtraction () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DetectCardExtractionType&
        getDetectCardExtraction ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDetectCardExtraction (const DetectCardExtractionType& x);

        //@}

        /**
         * @name NumberOfExtractionsBeforeStop
         *
         * @brief Accessor and modifier functions for the %NumberOfExtractionsBeforeStop
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger NumberOfExtractionsBeforeStopType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberOfExtractionsBeforeStopType, char > NumberOfExtractionsBeforeStopTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberOfExtractionsBeforeStopType&
        getNumberOfExtractionsBeforeStop () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberOfExtractionsBeforeStopType&
        getNumberOfExtractionsBeforeStop ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberOfExtractionsBeforeStop (const NumberOfExtractionsBeforeStopType& x);

        //@}

        /**
         * @name VotingWindow
         *
         * @brief Accessor and modifier functions for the %VotingWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VotingWindowConfiguration VotingWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWindowType, char > VotingWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWindowType&
        getVotingWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWindowType&
        getVotingWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWindow (const VotingWindowType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWindow (::std::auto_ptr< VotingWindowType > p);

        //@}

        /**
         * @name PartySelection
         *
         * @brief Accessor and modifier functions for the %PartySelection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PartySelectionConfiguration PartySelectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartySelectionType, char > PartySelectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartySelectionType&
        getPartySelection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartySelectionType&
        getPartySelection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartySelection (const PartySelectionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartySelection (::std::auto_ptr< PartySelectionType > p);

        //@}

        /**
         * @name BallotOptionSelection
         *
         * @brief Accessor and modifier functions for the %BallotOptionSelection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::BallotOptionSelectionConfiguration BallotOptionSelectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionSelectionType, char > BallotOptionSelectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotOptionSelectionType&
        getBallotOptionSelection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotOptionSelectionType&
        getBallotOptionSelection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotOptionSelection (const BallotOptionSelectionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionSelection (::std::auto_ptr< BallotOptionSelectionType > p);

        //@}

        /**
         * @name ReferendumSelection
         *
         * @brief Accessor and modifier functions for the %ReferendumSelection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ReferendumConfiguration ReferendumSelectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReferendumSelectionType, char > ReferendumSelectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ReferendumSelectionType&
        getReferendumSelection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ReferendumSelectionType&
        getReferendumSelection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setReferendumSelection (const ReferendumSelectionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setReferendumSelection (::std::auto_ptr< ReferendumSelectionType > p);

        //@}

        /**
         * @name CustomAtributtesWindow
         *
         * @brief Accessor and modifier functions for the %CustomAtributtesWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CustomAtributtesWindowConfiguration CustomAtributtesWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CustomAtributtesWindowType, char > CustomAtributtesWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CustomAtributtesWindowType&
        getCustomAtributtesWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CustomAtributtesWindowType&
        getCustomAtributtesWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCustomAtributtesWindow (const CustomAtributtesWindowType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCustomAtributtesWindow (::std::auto_ptr< CustomAtributtesWindowType > p);

        //@}

        /**
         * @name ConfirmationWindow
         *
         * @brief Accessor and modifier functions for the %ConfirmationWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfirmationWindowConfiguration ConfirmationWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfirmationWindowType, char > ConfirmationWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfirmationWindowType&
        getConfirmationWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfirmationWindowType&
        getConfirmationWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfirmationWindow (const ConfirmationWindowType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfirmationWindow (::std::auto_ptr< ConfirmationWindowType > p);

        //@}

        /**
         * @name VotingExperienceLabel
         *
         * @brief Accessor and modifier functions for the %VotingExperienceLabel
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VotingExperienceLabelConfiguration VotingExperienceLabelType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceLabelType, char > VotingExperienceLabelTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceLabelType&
        getVotingExperienceLabel () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceLabelType&
        getVotingExperienceLabel ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceLabel (const VotingExperienceLabelType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceLabel (::std::auto_ptr< VotingExperienceLabelType > p);

        //@}

        /**
         * @name TimeOutCard
         *
         * @brief Accessor and modifier functions for the %TimeOutCard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer TimeOutCardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeOutCardType, char > TimeOutCardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeOutCardType&
        getTimeOutCard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeOutCardType&
        getTimeOutCard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeOutCard (const TimeOutCardType& x);

        //@}

        /**
         * @name TimeToShowFinalMessage
         *
         * @brief Accessor and modifier functions for the %TimeToShowFinalMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer TimeToShowFinalMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeToShowFinalMessageType, char > TimeToShowFinalMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeToShowFinalMessageType&
        getTimeToShowFinalMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeToShowFinalMessageType&
        getTimeToShowFinalMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeToShowFinalMessage (const TimeToShowFinalMessageType& x);

        //@}

        /**
         * @name RemoveCardFirst
         *
         * @brief Accessor and modifier functions for the %RemoveCardFirst
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean RemoveCardFirstType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RemoveCardFirstType, char > RemoveCardFirstTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RemoveCardFirstType&
        getRemoveCardFirst () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RemoveCardFirstType&
        getRemoveCardFirst ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRemoveCardFirst (const RemoveCardFirstType& x);

        //@}

        /**
         * @name MarkCardAsUsed
         *
         * @brief Accessor and modifier functions for the %MarkCardAsUsed
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean MarkCardAsUsedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MarkCardAsUsedType, char > MarkCardAsUsedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MarkCardAsUsedType&
        getMarkCardAsUsed () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MarkCardAsUsedType&
        getMarkCardAsUsed ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMarkCardAsUsed (const MarkCardAsUsedType& x);

        //@}

        /**
         * @name CheckSumFailTimerMessage
         *
         * @brief Accessor and modifier functions for the %CheckSumFailTimerMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger CheckSumFailTimerMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CheckSumFailTimerMessageType, char > CheckSumFailTimerMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CheckSumFailTimerMessageType&
        getCheckSumFailTimerMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CheckSumFailTimerMessageType&
        getCheckSumFailTimerMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCheckSumFailTimerMessage (const CheckSumFailTimerMessageType& x);

        //@}

        /**
         * @name CheckSumFailOption
         *
         * @brief Accessor and modifier functions for the %CheckSumFailOption
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CheckSumFailOption CheckSumFailOptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CheckSumFailOptionType, char > CheckSumFailOptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CheckSumFailOptionType&
        getCheckSumFailOption () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CheckSumFailOptionType&
        getCheckSumFailOption ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCheckSumFailOption (const CheckSumFailOptionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCheckSumFailOption (::std::auto_ptr< CheckSumFailOptionType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VotingExperienceConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VotingExperienceConfiguration (const SortOptionsAlphabeticalType&,
                                       const SortLanguagesAlphabeticalType&,
                                       const DetectCardExtractionType&,
                                       const NumberOfExtractionsBeforeStopType&,
                                       const VotingWindowType&,
                                       const PartySelectionType&,
                                       const BallotOptionSelectionType&,
                                       const ReferendumSelectionType&,
                                       const CustomAtributtesWindowType&,
                                       const ConfirmationWindowType&,
                                       const VotingExperienceLabelType&,
                                       const TimeOutCardType&,
                                       const TimeToShowFinalMessageType&,
                                       const RemoveCardFirstType&,
                                       const MarkCardAsUsedType&,
                                       const CheckSumFailTimerMessageType&,
                                       const CheckSumFailOptionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VotingExperienceConfiguration (const SortOptionsAlphabeticalType&,
                                       const SortLanguagesAlphabeticalType&,
                                       const DetectCardExtractionType&,
                                       const NumberOfExtractionsBeforeStopType&,
                                       ::std::auto_ptr< VotingWindowType >&,
                                       ::std::auto_ptr< PartySelectionType >&,
                                       ::std::auto_ptr< BallotOptionSelectionType >&,
                                       ::std::auto_ptr< ReferendumSelectionType >&,
                                       ::std::auto_ptr< CustomAtributtesWindowType >&,
                                       ::std::auto_ptr< ConfirmationWindowType >&,
                                       ::std::auto_ptr< VotingExperienceLabelType >&,
                                       const TimeOutCardType&,
                                       const TimeToShowFinalMessageType&,
                                       const RemoveCardFirstType&,
                                       const MarkCardAsUsedType&,
                                       const CheckSumFailTimerMessageType&,
                                       const CheckSumFailOptionType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VotingExperienceConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VotingExperienceConfiguration (const VotingExperienceConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VotingExperienceConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VotingExperienceConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SortOptionsAlphabeticalType > SortOptionsAlphabetical_;
        ::xsd::cxx::tree::one< SortLanguagesAlphabeticalType > SortLanguagesAlphabetical_;
        ::xsd::cxx::tree::one< DetectCardExtractionType > DetectCardExtraction_;
        ::xsd::cxx::tree::one< NumberOfExtractionsBeforeStopType > NumberOfExtractionsBeforeStop_;
        ::xsd::cxx::tree::one< VotingWindowType > VotingWindow_;
        ::xsd::cxx::tree::one< PartySelectionType > PartySelection_;
        ::xsd::cxx::tree::one< BallotOptionSelectionType > BallotOptionSelection_;
        ::xsd::cxx::tree::one< ReferendumSelectionType > ReferendumSelection_;
        ::xsd::cxx::tree::one< CustomAtributtesWindowType > CustomAtributtesWindow_;
        ::xsd::cxx::tree::one< ConfirmationWindowType > ConfirmationWindow_;
        ::xsd::cxx::tree::one< VotingExperienceLabelType > VotingExperienceLabel_;
        ::xsd::cxx::tree::one< TimeOutCardType > TimeOutCard_;
        ::xsd::cxx::tree::one< TimeToShowFinalMessageType > TimeToShowFinalMessage_;
        ::xsd::cxx::tree::one< RemoveCardFirstType > RemoveCardFirst_;
        ::xsd::cxx::tree::one< MarkCardAsUsedType > MarkCardAsUsed_;
        ::xsd::cxx::tree::one< CheckSumFailTimerMessageType > CheckSumFailTimerMessage_;
        ::xsd::cxx::tree::one< CheckSumFailOptionType > CheckSumFailOption_;

        //@endcond
      };

      bool
      operator== (const VotingExperienceConfiguration&, const VotingExperienceConfiguration&);

      bool
      operator!= (const VotingExperienceConfiguration&, const VotingExperienceConfiguration&);


      /**
       * @brief Class corresponding to the %PartySelectionConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PartySelectionConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name EnableClick
         *
         * @brief Accessor and modifier functions for the %EnableClick
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean EnableClickType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnableClickType, char > EnableClickTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnableClickType&
        getEnableClick () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnableClickType&
        getEnableClick ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnableClick (const EnableClickType& x);

        //@}

        /**
         * @name UseMaxPartyNumerFromAllContest
         *
         * @brief Accessor and modifier functions for the %UseMaxPartyNumerFromAllContest
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseMaxPartyNumerFromAllContestType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseMaxPartyNumerFromAllContestType, char > UseMaxPartyNumerFromAllContestTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseMaxPartyNumerFromAllContestType&
        getUseMaxPartyNumerFromAllContest () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseMaxPartyNumerFromAllContestType&
        getUseMaxPartyNumerFromAllContest ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseMaxPartyNumerFromAllContest (const UseMaxPartyNumerFromAllContestType& x);

        //@}

        /**
         * @name ShowNullParty
         *
         * @brief Accessor and modifier functions for the %ShowNullParty
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowNullPartyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowNullPartyType, char > ShowNullPartyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowNullPartyType&
        getShowNullParty () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowNullPartyType&
        getShowNullParty ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowNullParty (const ShowNullPartyType& x);

        //@}

        /**
         * @name ShowNullButton
         *
         * @brief Accessor and modifier functions for the %ShowNullButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowNullButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowNullButtonType, char > ShowNullButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowNullButtonType&
        getShowNullButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowNullButtonType&
        getShowNullButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowNullButton (const ShowNullButtonType& x);

        //@}

        /**
         * @name PartyButton
         *
         * @brief Accessor and modifier functions for the %PartyButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ViewButtonConfiguration PartyButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartyButtonType, char > PartyButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartyButtonType&
        getPartyButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartyButtonType&
        getPartyButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartyButton (const PartyButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartyButton (::std::auto_ptr< PartyButtonType > p);

        //@}

        /**
         * @name ExpandButton
         *
         * @brief Accessor and modifier functions for the %ExpandButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ExpandButtonConfiguration ExpandButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ExpandButtonType, char > ExpandButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ExpandButtonType&
        getExpandButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ExpandButtonType&
        getExpandButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setExpandButton (const ExpandButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setExpandButton (::std::auto_ptr< ExpandButtonType > p);

        //@}

        /**
         * @name SeparateButton
         *
         * @brief Accessor and modifier functions for the %SeparateButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PartySeparateButtonConfiguration SeparateButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SeparateButtonType, char > SeparateButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SeparateButtonType&
        getSeparateButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SeparateButtonType&
        getSeparateButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSeparateButton (const SeparateButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSeparateButton (::std::auto_ptr< SeparateButtonType > p);

        //@}

        /**
         * @name FrameBottomHeight
         *
         * @brief Accessor and modifier functions for the %FrameBottomHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FrameBottomHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FrameBottomHeightType, char > FrameBottomHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FrameBottomHeightType&
        getFrameBottomHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FrameBottomHeightType&
        getFrameBottomHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFrameBottomHeight (const FrameBottomHeightType& x);

        //@}

        /**
         * @name Columns
         *
         * @brief Accessor and modifier functions for the %Columns
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer ColumnsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ColumnsType, char > ColumnsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ColumnsType&
        getColumns () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ColumnsType&
        getColumns ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setColumns (const ColumnsType& x);

        //@}

        /**
         * @name SizeToColumns
         *
         * @brief Accessor and modifier functions for the %SizeToColumns
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SizeToColumnsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SizeToColumnsType, char > SizeToColumnsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SizeToColumnsType&
        getSizeToColumns () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SizeToColumnsType&
        getSizeToColumns ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSizeToColumns (const SizeToColumnsType& x);

        //@}

        /**
         * @name ImageRelation
         *
         * @brief Accessor and modifier functions for the %ImageRelation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double ImageRelationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ImageRelationType, char, ::xsd::cxx::tree::schema_type::double_ > ImageRelationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ImageRelationType&
        getImageRelation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ImageRelationType&
        getImageRelation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setImageRelation (const ImageRelationType& x);

        //@}

        /**
         * @name PartiesMargin
         *
         * @brief Accessor and modifier functions for the %PartiesMargin
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PartiesMarginType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartiesMarginType, char > PartiesMarginTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartiesMarginType&
        getPartiesMargin () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartiesMarginType&
        getPartiesMargin ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartiesMargin (const PartiesMarginType& x);

        //@}

        /**
         * @name PartyWidget
         *
         * @brief Accessor and modifier functions for the %PartyWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PartyWidgetConfiguration PartyWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartyWidgetType, char > PartyWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartyWidgetType&
        getPartyWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartyWidgetType&
        getPartyWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartyWidget (const PartyWidgetType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartyWidget (::std::auto_ptr< PartyWidgetType > p);

        //@}

        /**
         * @name PartySelectionAlignment
         *
         * @brief Accessor and modifier functions for the %PartySelectionAlignment
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double PartySelectionAlignmentType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartySelectionAlignmentType, char, ::xsd::cxx::tree::schema_type::double_ > PartySelectionAlignmentTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartySelectionAlignmentType&
        getPartySelectionAlignment () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartySelectionAlignmentType&
        getPartySelectionAlignment ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartySelectionAlignment (const PartySelectionAlignmentType& x);

        //@}

        /**
         * @name HeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %HeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration HeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderLabelConfigurationType, char > HeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderLabelConfigurationType&
        getHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderLabelConfigurationType&
        getHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > p);

        //@}

        /**
         * @name BottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %BottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomLabelConfigurationType, char > BottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomLabelConfigurationType&
        getBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomLabelConfigurationType&
        getBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomLabelConfiguration (const BottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PartySelectionConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PartySelectionConfiguration (const EnableClickType&,
                                     const UseMaxPartyNumerFromAllContestType&,
                                     const ShowNullPartyType&,
                                     const ShowNullButtonType&,
                                     const PartyButtonType&,
                                     const ExpandButtonType&,
                                     const SeparateButtonType&,
                                     const FrameBottomHeightType&,
                                     const ColumnsType&,
                                     const SizeToColumnsType&,
                                     const ImageRelationType&,
                                     const PartiesMarginType&,
                                     const PartyWidgetType&,
                                     const PartySelectionAlignmentType&,
                                     const HeaderLabelConfigurationType&,
                                     const BottomLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        PartySelectionConfiguration (const EnableClickType&,
                                     const UseMaxPartyNumerFromAllContestType&,
                                     const ShowNullPartyType&,
                                     const ShowNullButtonType&,
                                     const PartyButtonType&,
                                     ::std::auto_ptr< ExpandButtonType >&,
                                     ::std::auto_ptr< SeparateButtonType >&,
                                     const FrameBottomHeightType&,
                                     const ColumnsType&,
                                     const SizeToColumnsType&,
                                     const ImageRelationType&,
                                     const PartiesMarginType&,
                                     ::std::auto_ptr< PartyWidgetType >&,
                                     const PartySelectionAlignmentType&,
                                     ::std::auto_ptr< HeaderLabelConfigurationType >&,
                                     ::std::auto_ptr< BottomLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PartySelectionConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PartySelectionConfiguration (const PartySelectionConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PartySelectionConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PartySelectionConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EnableClickType > EnableClick_;
        ::xsd::cxx::tree::one< UseMaxPartyNumerFromAllContestType > UseMaxPartyNumerFromAllContest_;
        ::xsd::cxx::tree::one< ShowNullPartyType > ShowNullParty_;
        ::xsd::cxx::tree::one< ShowNullButtonType > ShowNullButton_;
        ::xsd::cxx::tree::one< PartyButtonType > PartyButton_;
        ::xsd::cxx::tree::one< ExpandButtonType > ExpandButton_;
        ::xsd::cxx::tree::one< SeparateButtonType > SeparateButton_;
        ::xsd::cxx::tree::one< FrameBottomHeightType > FrameBottomHeight_;
        ::xsd::cxx::tree::one< ColumnsType > Columns_;
        ::xsd::cxx::tree::one< SizeToColumnsType > SizeToColumns_;
        ::xsd::cxx::tree::one< ImageRelationType > ImageRelation_;
        ::xsd::cxx::tree::one< PartiesMarginType > PartiesMargin_;
        ::xsd::cxx::tree::one< PartyWidgetType > PartyWidget_;
        ::xsd::cxx::tree::one< PartySelectionAlignmentType > PartySelectionAlignment_;
        ::xsd::cxx::tree::one< HeaderLabelConfigurationType > HeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< BottomLabelConfigurationType > BottomLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const PartySelectionConfiguration&, const PartySelectionConfiguration&);

      bool
      operator!= (const PartySelectionConfiguration&, const PartySelectionConfiguration&);


      /**
       * @brief Class corresponding to the %PartyWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PartyWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NumberWidth
         *
         * @brief Accessor and modifier functions for the %NumberWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer NumberWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberWidthType, char > NumberWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberWidthType&
        getNumberWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberWidthType&
        getNumberWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberWidth (const NumberWidthType& x);

        //@}

        /**
         * @name UseAbbreviation
         *
         * @brief Accessor and modifier functions for the %UseAbbreviation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseAbbreviationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseAbbreviationType, char > UseAbbreviationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseAbbreviationType&
        getUseAbbreviation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseAbbreviationType&
        getUseAbbreviation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseAbbreviation (const UseAbbreviationType& x);

        //@}

        /**
         * @name Padding
         *
         * @brief Accessor and modifier functions for the %Padding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PaddingType, char > PaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PaddingType&
        getPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PaddingType&
        getPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPadding (const PaddingType& x);

        //@}

        /**
         * @name ShowFrame
         *
         * @brief Accessor and modifier functions for the %ShowFrame
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowFrameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowFrameType, char > ShowFrameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowFrameType&
        getShowFrame () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowFrameType&
        getShowFrame ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowFrame (const ShowFrameType& x);

        //@}

        /**
         * @name Display
         *
         * @brief Accessor and modifier functions for the %Display
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DisplayType DisplayType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DisplayType, char > DisplayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DisplayType&
        getDisplay () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DisplayType&
        getDisplay ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDisplay (const DisplayType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDisplay (::std::auto_ptr< DisplayType > p);

        //@}

        /**
         * @name UseFillByRows
         *
         * @brief Accessor and modifier functions for the %UseFillByRows
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseFillByRowsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseFillByRowsType, char > UseFillByRowsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseFillByRowsType&
        getUseFillByRows () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseFillByRowsType&
        getUseFillByRows ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseFillByRows (const UseFillByRowsType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PartyWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PartyWidgetConfiguration (const NumberWidthType&,
                                  const UseAbbreviationType&,
                                  const PaddingType&,
                                  const ShowFrameType&,
                                  const DisplayType&,
                                  const UseFillByRowsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PartyWidgetConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PartyWidgetConfiguration (const PartyWidgetConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PartyWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PartyWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NumberWidthType > NumberWidth_;
        ::xsd::cxx::tree::one< UseAbbreviationType > UseAbbreviation_;
        ::xsd::cxx::tree::one< PaddingType > Padding_;
        ::xsd::cxx::tree::one< ShowFrameType > ShowFrame_;
        ::xsd::cxx::tree::one< DisplayType > Display_;
        ::xsd::cxx::tree::one< UseFillByRowsType > UseFillByRows_;

        //@endcond
      };

      bool
      operator== (const PartyWidgetConfiguration&, const PartyWidgetConfiguration&);

      bool
      operator!= (const PartyWidgetConfiguration&, const PartyWidgetConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %DisplayType
       * schema type.
       */
      class DisplayType: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_IMAGE,
          CONFIGURATION_TEXT
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        DisplayType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        DisplayType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        DisplayType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        DisplayType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        DisplayType (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DisplayType (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DisplayType (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DisplayType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DisplayType (const DisplayType& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DisplayType*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        DisplayType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_DisplayType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_DisplayType_convert () const;

        public:
        static const char* const _xsd_DisplayType_literals_[2];
        static const Value _xsd_DisplayType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %BallotOptionSelectionConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BallotOptionSelectionConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name EnableClick
         *
         * @brief Accessor and modifier functions for the %EnableClick
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean EnableClickType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnableClickType, char > EnableClickTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnableClickType&
        getEnableClick () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnableClickType&
        getEnableClick ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnableClick (const EnableClickType& x);

        //@}

        /**
         * @name HideStandInLabelIfEmpty
         *
         * @brief Accessor and modifier functions for the %HideStandInLabelIfEmpty
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideStandInLabelIfEmptyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideStandInLabelIfEmptyType, char > HideStandInLabelIfEmptyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideStandInLabelIfEmptyType&
        getHideStandInLabelIfEmpty () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideStandInLabelIfEmptyType&
        getHideStandInLabelIfEmpty ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideStandInLabelIfEmpty (const HideStandInLabelIfEmptyType& x);

        //@}

        /**
         * @name UseMaxBallotNumberFromContest
         *
         * @brief Accessor and modifier functions for the %UseMaxBallotNumberFromContest
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseMaxBallotNumberFromContestType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseMaxBallotNumberFromContestType, char > UseMaxBallotNumberFromContestTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseMaxBallotNumberFromContestType&
        getUseMaxBallotNumberFromContest () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseMaxBallotNumberFromContestType&
        getUseMaxBallotNumberFromContest ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseMaxBallotNumberFromContest (const UseMaxBallotNumberFromContestType& x);

        //@}

        /**
         * @name BallotOptionTable
         *
         * @brief Accessor and modifier functions for the %BallotOptionTable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ViewTableConfiguration BallotOptionTableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionTableType, char > BallotOptionTableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotOptionTableType&
        getBallotOptionTable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotOptionTableType&
        getBallotOptionTable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotOptionTable (const BallotOptionTableType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionTable (::std::auto_ptr< BallotOptionTableType > p);

        //@}

        /**
         * @name BallotOptionButton
         *
         * @brief Accessor and modifier functions for the %BallotOptionButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ViewButtonConfiguration BallotOptionButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionButtonType, char > BallotOptionButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotOptionButtonType&
        getBallotOptionButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotOptionButtonType&
        getBallotOptionButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotOptionButton (const BallotOptionButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionButton (::std::auto_ptr< BallotOptionButtonType > p);

        //@}

        /**
         * @name ExpandButton
         *
         * @brief Accessor and modifier functions for the %ExpandButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ExpandButtonConfiguration ExpandButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ExpandButtonType, char > ExpandButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ExpandButtonType&
        getExpandButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ExpandButtonType&
        getExpandButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setExpandButton (const ExpandButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setExpandButton (::std::auto_ptr< ExpandButtonType > p);

        //@}

        /**
         * @name SeparateButton
         *
         * @brief Accessor and modifier functions for the %SeparateButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::BallotOptionSeparateButtonConfiguration SeparateButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SeparateButtonType, char > SeparateButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SeparateButtonType&
        getSeparateButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SeparateButtonType&
        getSeparateButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSeparateButton (const SeparateButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSeparateButton (::std::auto_ptr< SeparateButtonType > p);

        //@}

        /**
         * @name FrameBottomHeight
         *
         * @brief Accessor and modifier functions for the %FrameBottomHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FrameBottomHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FrameBottomHeightType, char > FrameBottomHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FrameBottomHeightType&
        getFrameBottomHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FrameBottomHeightType&
        getFrameBottomHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFrameBottomHeight (const FrameBottomHeightType& x);

        //@}

        /**
         * @name FrameHeaderHeight
         *
         * @brief Accessor and modifier functions for the %FrameHeaderHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FrameHeaderHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FrameHeaderHeightType, char > FrameHeaderHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FrameHeaderHeightType&
        getFrameHeaderHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FrameHeaderHeightType&
        getFrameHeaderHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFrameHeaderHeight (const FrameHeaderHeightType& x);

        //@}

        /**
         * @name MaxColumns
         *
         * @brief Accessor and modifier functions for the %MaxColumns
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxColumnsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxColumnsType, char > MaxColumnsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxColumnsType&
        getMaxColumns () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxColumnsType&
        getMaxColumns ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxColumns (const MaxColumnsType& x);

        //@}

        /**
         * @name MaxRows
         *
         * @brief Accessor and modifier functions for the %MaxRows
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxRowsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxRowsType, char > MaxRowsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxRowsType&
        getMaxRows () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxRowsType&
        getMaxRows ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxRows (const MaxRowsType& x);

        //@}

        /**
         * @name FixBorder
         *
         * @brief Accessor and modifier functions for the %FixBorder
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FixBorderType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FixBorderType, char > FixBorderTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FixBorderType&
        getFixBorder () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FixBorderType&
        getFixBorder ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFixBorder (const FixBorderType& x);

        //@}

        /**
         * @name ResizeBallotBox
         *
         * @brief Accessor and modifier functions for the %ResizeBallotBox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ResizeBallotBoxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ResizeBallotBoxType, char > ResizeBallotBoxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ResizeBallotBoxType&
        getResizeBallotBox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ResizeBallotBoxType&
        getResizeBallotBox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setResizeBallotBox (const ResizeBallotBoxType& x);

        //@}

        /**
         * @name BallotsMargin
         *
         * @brief Accessor and modifier functions for the %BallotsMargin
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer BallotsMarginType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotsMarginType, char > BallotsMarginTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotsMarginType&
        getBallotsMargin () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotsMarginType&
        getBallotsMargin ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotsMargin (const BallotsMarginType& x);

        //@}

        /**
         * @name OptionListLinked
         *
         * @brief Accessor and modifier functions for the %OptionListLinked
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean OptionListLinkedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptionListLinkedType, char > OptionListLinkedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptionListLinkedType&
        getOptionListLinked () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptionListLinkedType&
        getOptionListLinked ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOptionListLinked (const OptionListLinkedType& x);

        //@}

        /**
         * @name SelectListImpliesSelectStandIn
         *
         * @brief Accessor and modifier functions for the %SelectListImpliesSelectStandIn
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean SelectListImpliesSelectStandInType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectListImpliesSelectStandInType, char > SelectListImpliesSelectStandInTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectListImpliesSelectStandInType&
        getSelectListImpliesSelectStandIn () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectListImpliesSelectStandInType&
        getSelectListImpliesSelectStandIn ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectListImpliesSelectStandIn (const SelectListImpliesSelectStandInType& x);

        //@}

        /**
         * @name SelectStandInImpliesSelectList
         *
         * @brief Accessor and modifier functions for the %SelectStandInImpliesSelectList
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean SelectStandInImpliesSelectListType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectStandInImpliesSelectListType, char > SelectStandInImpliesSelectListTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectStandInImpliesSelectListType&
        getSelectStandInImpliesSelectList () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectStandInImpliesSelectListType&
        getSelectStandInImpliesSelectList ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectStandInImpliesSelectList (const SelectStandInImpliesSelectListType& x);

        //@}

        /**
         * @name AllowBackWithBallotSelected
         *
         * @brief Accessor and modifier functions for the %AllowBackWithBallotSelected
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AllowBackWithBallotSelectedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AllowBackWithBallotSelectedType, char > AllowBackWithBallotSelectedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AllowBackWithBallotSelectedType&
        getAllowBackWithBallotSelected () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AllowBackWithBallotSelectedType&
        getAllowBackWithBallotSelected ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAllowBackWithBallotSelected (const AllowBackWithBallotSelectedType& x);

        //@}

        /**
         * @name ShowConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowConfirmationType, char > ShowConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowConfirmationType&
        getShowConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowConfirmationType&
        getShowConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowConfirmation (const ShowConfirmationType& x);

        //@}

        /**
         * @name CandidatesButtonsSpacing
         *
         * @brief Accessor and modifier functions for the %CandidatesButtonsSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger CandidatesButtonsSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CandidatesButtonsSpacingType, char > CandidatesButtonsSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CandidatesButtonsSpacingType&
        getCandidatesButtonsSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CandidatesButtonsSpacingType&
        getCandidatesButtonsSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCandidatesButtonsSpacing (const CandidatesButtonsSpacingType& x);

        //@}

        /**
         * @name UseCustomBallotRelation
         *
         * @brief Accessor and modifier functions for the %UseCustomBallotRelation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseCustomBallotRelationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseCustomBallotRelationType, char > UseCustomBallotRelationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseCustomBallotRelationType&
        getUseCustomBallotRelation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseCustomBallotRelationType&
        getUseCustomBallotRelation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseCustomBallotRelation (const UseCustomBallotRelationType& x);

        //@}

        /**
         * @name BallotRelation
         *
         * @brief Accessor and modifier functions for the %BallotRelation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double BallotRelationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotRelationType, char, ::xsd::cxx::tree::schema_type::double_ > BallotRelationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotRelationType&
        getBallotRelation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotRelationType&
        getBallotRelation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotRelation (const BallotRelationType& x);

        //@}

        /**
         * @name ListSelectedColor
         *
         * @brief Accessor and modifier functions for the %ListSelectedColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration ListSelectedColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ListSelectedColorType, char > ListSelectedColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ListSelectedColorType&
        getListSelectedColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ListSelectedColorType&
        getListSelectedColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setListSelectedColor (const ListSelectedColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setListSelectedColor (::std::auto_ptr< ListSelectedColorType > p);

        //@}

        /**
         * @name ListUnSelectedColor
         *
         * @brief Accessor and modifier functions for the %ListUnSelectedColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration ListUnSelectedColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ListUnSelectedColorType, char > ListUnSelectedColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ListUnSelectedColorType&
        getListUnSelectedColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ListUnSelectedColorType&
        getListUnSelectedColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setListUnSelectedColor (const ListUnSelectedColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setListUnSelectedColor (::std::auto_ptr< ListUnSelectedColorType > p);

        //@}

        /**
         * @name StandInColor
         *
         * @brief Accessor and modifier functions for the %StandInColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration StandInColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StandInColorType, char > StandInColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StandInColorType&
        getStandInColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StandInColorType&
        getStandInColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStandInColor (const StandInColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStandInColor (::std::auto_ptr< StandInColorType > p);

        //@}

        /**
         * @name BallotOptionWidget
         *
         * @brief Accessor and modifier functions for the %BallotOptionWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::BallotOptionWidgetConfiguration BallotOptionWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionWidgetType, char > BallotOptionWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotOptionWidgetType&
        getBallotOptionWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotOptionWidgetType&
        getBallotOptionWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotOptionWidget (const BallotOptionWidgetType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionWidget (::std::auto_ptr< BallotOptionWidgetType > p);

        //@}

        /**
         * @name HeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %HeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration HeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderLabelConfigurationType, char > HeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderLabelConfigurationType&
        getHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderLabelConfigurationType&
        getHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > p);

        //@}

        /**
         * @name BottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %BottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomLabelConfigurationType, char > BottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomLabelConfigurationType&
        getBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomLabelConfigurationType&
        getBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomLabelConfiguration (const BottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > p);

        //@}

        /**
         * @name ShowImageInList
         *
         * @brief Accessor and modifier functions for the %ShowImageInList
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowImageInListType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowImageInListType, char > ShowImageInListTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowImageInListType&
        getShowImageInList () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowImageInListType&
        getShowImageInList ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowImageInList (const ShowImageInListType& x);

        //@}

        /**
         * @name ImageInListPadgging
         *
         * @brief Accessor and modifier functions for the %ImageInListPadgging
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ImageInListPadggingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ImageInListPadggingType, char > ImageInListPadggingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ImageInListPadggingType&
        getImageInListPadgging () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ImageInListPadggingType&
        getImageInListPadgging ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setImageInListPadgging (const ImageInListPadggingType& x);

        //@}

        /**
         * @name FillPrincipal
         *
         * @brief Accessor and modifier functions for the %FillPrincipal
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FillPrincipalConfiguration FillPrincipalType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FillPrincipalType, char > FillPrincipalTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FillPrincipalType&
        getFillPrincipal () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FillPrincipalType&
        getFillPrincipal ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFillPrincipal (const FillPrincipalType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFillPrincipal (::std::auto_ptr< FillPrincipalType > p);

        //@}

        /**
         * @name FillColumnDynamic
         *
         * @brief Accessor and modifier functions for the %FillColumnDynamic
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FillColumnDynamicConfiguration FillColumnDynamicType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FillColumnDynamicType, char > FillColumnDynamicTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FillColumnDynamicType&
        getFillColumnDynamic () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FillColumnDynamicType&
        getFillColumnDynamic ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFillColumnDynamic (const FillColumnDynamicType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFillColumnDynamic (::std::auto_ptr< FillColumnDynamicType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BallotOptionSelectionConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BallotOptionSelectionConfiguration (const EnableClickType&,
                                            const HideStandInLabelIfEmptyType&,
                                            const UseMaxBallotNumberFromContestType&,
                                            const BallotOptionTableType&,
                                            const BallotOptionButtonType&,
                                            const ExpandButtonType&,
                                            const SeparateButtonType&,
                                            const FrameBottomHeightType&,
                                            const FrameHeaderHeightType&,
                                            const MaxColumnsType&,
                                            const MaxRowsType&,
                                            const FixBorderType&,
                                            const ResizeBallotBoxType&,
                                            const BallotsMarginType&,
                                            const OptionListLinkedType&,
                                            const SelectListImpliesSelectStandInType&,
                                            const SelectStandInImpliesSelectListType&,
                                            const AllowBackWithBallotSelectedType&,
                                            const ShowConfirmationType&,
                                            const CandidatesButtonsSpacingType&,
                                            const UseCustomBallotRelationType&,
                                            const BallotRelationType&,
                                            const ListSelectedColorType&,
                                            const ListUnSelectedColorType&,
                                            const StandInColorType&,
                                            const BallotOptionWidgetType&,
                                            const HeaderLabelConfigurationType&,
                                            const BottomLabelConfigurationType&,
                                            const ShowImageInListType&,
                                            const ImageInListPadggingType&,
                                            const FillPrincipalType&,
                                            const FillColumnDynamicType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        BallotOptionSelectionConfiguration (const EnableClickType&,
                                            const HideStandInLabelIfEmptyType&,
                                            const UseMaxBallotNumberFromContestType&,
                                            const BallotOptionTableType&,
                                            const BallotOptionButtonType&,
                                            ::std::auto_ptr< ExpandButtonType >&,
                                            ::std::auto_ptr< SeparateButtonType >&,
                                            const FrameBottomHeightType&,
                                            const FrameHeaderHeightType&,
                                            const MaxColumnsType&,
                                            const MaxRowsType&,
                                            const FixBorderType&,
                                            const ResizeBallotBoxType&,
                                            const BallotsMarginType&,
                                            const OptionListLinkedType&,
                                            const SelectListImpliesSelectStandInType&,
                                            const SelectStandInImpliesSelectListType&,
                                            const AllowBackWithBallotSelectedType&,
                                            const ShowConfirmationType&,
                                            const CandidatesButtonsSpacingType&,
                                            const UseCustomBallotRelationType&,
                                            const BallotRelationType&,
                                            ::std::auto_ptr< ListSelectedColorType >&,
                                            ::std::auto_ptr< ListUnSelectedColorType >&,
                                            ::std::auto_ptr< StandInColorType >&,
                                            ::std::auto_ptr< BallotOptionWidgetType >&,
                                            ::std::auto_ptr< HeaderLabelConfigurationType >&,
                                            ::std::auto_ptr< BottomLabelConfigurationType >&,
                                            const ShowImageInListType&,
                                            const ImageInListPadggingType&,
                                            const FillPrincipalType&,
                                            ::std::auto_ptr< FillColumnDynamicType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BallotOptionSelectionConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BallotOptionSelectionConfiguration (const BallotOptionSelectionConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BallotOptionSelectionConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BallotOptionSelectionConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EnableClickType > EnableClick_;
        ::xsd::cxx::tree::one< HideStandInLabelIfEmptyType > HideStandInLabelIfEmpty_;
        ::xsd::cxx::tree::one< UseMaxBallotNumberFromContestType > UseMaxBallotNumberFromContest_;
        ::xsd::cxx::tree::one< BallotOptionTableType > BallotOptionTable_;
        ::xsd::cxx::tree::one< BallotOptionButtonType > BallotOptionButton_;
        ::xsd::cxx::tree::one< ExpandButtonType > ExpandButton_;
        ::xsd::cxx::tree::one< SeparateButtonType > SeparateButton_;
        ::xsd::cxx::tree::one< FrameBottomHeightType > FrameBottomHeight_;
        ::xsd::cxx::tree::one< FrameHeaderHeightType > FrameHeaderHeight_;
        ::xsd::cxx::tree::one< MaxColumnsType > MaxColumns_;
        ::xsd::cxx::tree::one< MaxRowsType > MaxRows_;
        ::xsd::cxx::tree::one< FixBorderType > FixBorder_;
        ::xsd::cxx::tree::one< ResizeBallotBoxType > ResizeBallotBox_;
        ::xsd::cxx::tree::one< BallotsMarginType > BallotsMargin_;
        ::xsd::cxx::tree::one< OptionListLinkedType > OptionListLinked_;
        ::xsd::cxx::tree::one< SelectListImpliesSelectStandInType > SelectListImpliesSelectStandIn_;
        ::xsd::cxx::tree::one< SelectStandInImpliesSelectListType > SelectStandInImpliesSelectList_;
        ::xsd::cxx::tree::one< AllowBackWithBallotSelectedType > AllowBackWithBallotSelected_;
        ::xsd::cxx::tree::one< ShowConfirmationType > ShowConfirmation_;
        ::xsd::cxx::tree::one< CandidatesButtonsSpacingType > CandidatesButtonsSpacing_;
        ::xsd::cxx::tree::one< UseCustomBallotRelationType > UseCustomBallotRelation_;
        ::xsd::cxx::tree::one< BallotRelationType > BallotRelation_;
        ::xsd::cxx::tree::one< ListSelectedColorType > ListSelectedColor_;
        ::xsd::cxx::tree::one< ListUnSelectedColorType > ListUnSelectedColor_;
        ::xsd::cxx::tree::one< StandInColorType > StandInColor_;
        ::xsd::cxx::tree::one< BallotOptionWidgetType > BallotOptionWidget_;
        ::xsd::cxx::tree::one< HeaderLabelConfigurationType > HeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< BottomLabelConfigurationType > BottomLabelConfiguration_;
        ::xsd::cxx::tree::one< ShowImageInListType > ShowImageInList_;
        ::xsd::cxx::tree::one< ImageInListPadggingType > ImageInListPadgging_;
        ::xsd::cxx::tree::one< FillPrincipalType > FillPrincipal_;
        ::xsd::cxx::tree::one< FillColumnDynamicType > FillColumnDynamic_;

        //@endcond
      };

      bool
      operator== (const BallotOptionSelectionConfiguration&, const BallotOptionSelectionConfiguration&);

      bool
      operator!= (const BallotOptionSelectionConfiguration&, const BallotOptionSelectionConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %FillPrincipalConfiguration
       * schema type.
       */
      class FillPrincipalConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_FILL_COLUMN_FIXED,
          CONFIGURATION_FILL_COLUMN_DYNAMIC
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        FillPrincipalConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        FillPrincipalConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        FillPrincipalConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        FillPrincipalConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        FillPrincipalConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FillPrincipalConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FillPrincipalConfiguration (const ::xercesc::DOMAttr& a,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FillPrincipalConfiguration (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FillPrincipalConfiguration (const FillPrincipalConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FillPrincipalConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        FillPrincipalConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_FillPrincipalConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_FillPrincipalConfiguration_convert () const;

        public:
        static const char* const _xsd_FillPrincipalConfiguration_literals_[2];
        static const Value _xsd_FillPrincipalConfiguration_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %FillColumnDynamicConfiguration schema type.
       *
       * @nosubgrouping
       */
      class FillColumnDynamicConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PivotConfig
         *
         * @brief Accessor and modifier functions for the %PivotConfig
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PivotConfig PivotConfigType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< PivotConfigType > PivotConfigSequence;

        /**
         * @brief Element iterator type.
         */
        typedef PivotConfigSequence::iterator PivotConfigIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef PivotConfigSequence::const_iterator PivotConfigConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PivotConfigType, char > PivotConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const PivotConfigSequence&
        getPivotConfig () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        PivotConfigSequence&
        getPivotConfig ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setPivotConfig (const PivotConfigSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FillColumnDynamicConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FillColumnDynamicConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FillColumnDynamicConfiguration (const FillColumnDynamicConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FillColumnDynamicConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FillColumnDynamicConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        PivotConfigSequence PivotConfig_;

        //@endcond
      };

      bool
      operator== (const FillColumnDynamicConfiguration&, const FillColumnDynamicConfiguration&);

      bool
      operator!= (const FillColumnDynamicConfiguration&, const FillColumnDynamicConfiguration&);


      /**
       * @brief Class corresponding to the %PivotConfig schema type.
       *
       * @nosubgrouping
       */
      class PivotConfig: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Value
         *
         * @brief Accessor and modifier functions for the %Value
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ValueType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const ValueType&
        getValue () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        ValueType&
        getValue ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setValue (const ValueType& x);

        //@}

        /**
         * @name ColumnCount
         *
         * @brief Accessor and modifier functions for the %ColumnCount
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ColumnCountType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< ColumnCountType, char > ColumnCountTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const ColumnCountType&
        getColumnCount () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        ColumnCountType&
        getColumnCount ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setColumnCount (const ColumnCountType& x);

        //@}

        /**
         * @name Wrap
         *
         * @brief Accessor and modifier functions for the %Wrap
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean WrapType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< WrapType, char > WrapTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const WrapType&
        getWrap () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        WrapType&
        getWrap ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setWrap (const WrapType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PivotConfig ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PivotConfig (const ValueType&,
                     const ColumnCountType&,
                     const WrapType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PivotConfig (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PivotConfig (const PivotConfig& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PivotConfig*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PivotConfig ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ValueType > Value_;
        ::xsd::cxx::tree::one< ColumnCountType > ColumnCount_;
        ::xsd::cxx::tree::one< WrapType > Wrap_;

        //@endcond
      };

      bool
      operator== (const PivotConfig&, const PivotConfig&);

      bool
      operator!= (const PivotConfig&, const PivotConfig&);


      /**
       * @brief Class corresponding to the %CustomAtributtesWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CustomAtributtesWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ForceQuestionHeader
         *
         * @brief Accessor and modifier functions for the %ForceQuestionHeader
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ForceQuestionHeaderType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ForceQuestionHeaderType, char > ForceQuestionHeaderTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ForceQuestionHeaderType&
        getForceQuestionHeader () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ForceQuestionHeaderType&
        getForceQuestionHeader ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setForceQuestionHeader (const ForceQuestionHeaderType& x);

        //@}

        /**
         * @name ForceQuestionFooter
         *
         * @brief Accessor and modifier functions for the %ForceQuestionFooter
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ForceQuestionFooterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ForceQuestionFooterType, char > ForceQuestionFooterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ForceQuestionFooterType&
        getForceQuestionFooter () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ForceQuestionFooterType&
        getForceQuestionFooter ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setForceQuestionFooter (const ForceQuestionFooterType& x);

        //@}

        /**
         * @name ForceQuestionHeaderConfirmation
         *
         * @brief Accessor and modifier functions for the %ForceQuestionHeaderConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ForceQuestionHeaderConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ForceQuestionHeaderConfirmationType, char > ForceQuestionHeaderConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ForceQuestionHeaderConfirmationType&
        getForceQuestionHeaderConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ForceQuestionHeaderConfirmationType&
        getForceQuestionHeaderConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setForceQuestionHeaderConfirmation (const ForceQuestionHeaderConfirmationType& x);

        //@}

        /**
         * @name ForceQuestionFooterConfirmation
         *
         * @brief Accessor and modifier functions for the %ForceQuestionFooterConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ForceQuestionFooterConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ForceQuestionFooterConfirmationType, char > ForceQuestionFooterConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ForceQuestionFooterConfirmationType&
        getForceQuestionFooterConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ForceQuestionFooterConfirmationType&
        getForceQuestionFooterConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setForceQuestionFooterConfirmation (const ForceQuestionFooterConfirmationType& x);

        //@}

        /**
         * @name ShowWelcomeMessageQuestionCloseButton
         *
         * @brief Accessor and modifier functions for the %ShowWelcomeMessageQuestionCloseButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowWelcomeMessageQuestionCloseButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowWelcomeMessageQuestionCloseButtonType, char > ShowWelcomeMessageQuestionCloseButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowWelcomeMessageQuestionCloseButtonType&
        getShowWelcomeMessageQuestionCloseButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowWelcomeMessageQuestionCloseButtonType&
        getShowWelcomeMessageQuestionCloseButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowWelcomeMessageQuestionCloseButton (const ShowWelcomeMessageQuestionCloseButtonType& x);

        //@}

        /**
         * @name WelcomeMessageQuestionTimer
         *
         * @brief Accessor and modifier functions for the %WelcomeMessageQuestionTimer
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer WelcomeMessageQuestionTimerType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WelcomeMessageQuestionTimerType, char > WelcomeMessageQuestionTimerTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WelcomeMessageQuestionTimerType&
        getWelcomeMessageQuestionTimer () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WelcomeMessageQuestionTimerType&
        getWelcomeMessageQuestionTimer ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWelcomeMessageQuestionTimer (const WelcomeMessageQuestionTimerType& x);

        //@}

        /**
         * @name ShowQuestionConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowQuestionConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowQuestionConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowQuestionConfirmationType, char > ShowQuestionConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowQuestionConfirmationType&
        getShowQuestionConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowQuestionConfirmationType&
        getShowQuestionConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowQuestionConfirmation (const ShowQuestionConfirmationType& x);

        //@}

        /**
         * @name ShowWelcomeQuestion
         *
         * @brief Accessor and modifier functions for the %ShowWelcomeQuestion
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowWelcomeQuestionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowWelcomeQuestionType, char > ShowWelcomeQuestionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowWelcomeQuestionType&
        getShowWelcomeQuestion () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowWelcomeQuestionType&
        getShowWelcomeQuestion ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowWelcomeQuestion (const ShowWelcomeQuestionType& x);

        //@}

        /**
         * @name QuestionWindowWith
         *
         * @brief Accessor and modifier functions for the %QuestionWindowWith
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer QuestionWindowWithType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionWindowWithType, char > QuestionWindowWithTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionWindowWithType&
        getQuestionWindowWith () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionWindowWithType&
        getQuestionWindowWith ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionWindowWith (const QuestionWindowWithType& x);

        //@}

        /**
         * @name QuestionWindowHeight
         *
         * @brief Accessor and modifier functions for the %QuestionWindowHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer QuestionWindowHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionWindowHeightType, char > QuestionWindowHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionWindowHeightType&
        getQuestionWindowHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionWindowHeightType&
        getQuestionWindowHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionWindowHeight (const QuestionWindowHeightType& x);

        //@}

        /**
         * @name HeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %HeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration HeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderLabelConfigurationType, char > HeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderLabelConfigurationType&
        getHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderLabelConfigurationType&
        getHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > p);

        //@}

        /**
         * @name BottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %BottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomLabelConfigurationType, char > BottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomLabelConfigurationType&
        getBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomLabelConfigurationType&
        getBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomLabelConfiguration (const BottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > p);

        //@}

        /**
         * @name CenterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %CenterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration CenterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CenterLabelConfigurationType, char > CenterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CenterLabelConfigurationType&
        getCenterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CenterLabelConfigurationType&
        getCenterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCenterLabelConfiguration (const CenterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCenterLabelConfiguration (::std::auto_ptr< CenterLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CustomAtributtesWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CustomAtributtesWindowConfiguration (const ForceQuestionHeaderType&,
                                             const ForceQuestionFooterType&,
                                             const ForceQuestionHeaderConfirmationType&,
                                             const ForceQuestionFooterConfirmationType&,
                                             const ShowWelcomeMessageQuestionCloseButtonType&,
                                             const WelcomeMessageQuestionTimerType&,
                                             const ShowQuestionConfirmationType&,
                                             const ShowWelcomeQuestionType&,
                                             const QuestionWindowWithType&,
                                             const QuestionWindowHeightType&,
                                             const HeaderLabelConfigurationType&,
                                             const BottomLabelConfigurationType&,
                                             const CenterLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CustomAtributtesWindowConfiguration (const ForceQuestionHeaderType&,
                                             const ForceQuestionFooterType&,
                                             const ForceQuestionHeaderConfirmationType&,
                                             const ForceQuestionFooterConfirmationType&,
                                             const ShowWelcomeMessageQuestionCloseButtonType&,
                                             const WelcomeMessageQuestionTimerType&,
                                             const ShowQuestionConfirmationType&,
                                             const ShowWelcomeQuestionType&,
                                             const QuestionWindowWithType&,
                                             const QuestionWindowHeightType&,
                                             ::std::auto_ptr< HeaderLabelConfigurationType >&,
                                             ::std::auto_ptr< BottomLabelConfigurationType >&,
                                             ::std::auto_ptr< CenterLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CustomAtributtesWindowConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CustomAtributtesWindowConfiguration (const CustomAtributtesWindowConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CustomAtributtesWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CustomAtributtesWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ForceQuestionHeaderType > ForceQuestionHeader_;
        ::xsd::cxx::tree::one< ForceQuestionFooterType > ForceQuestionFooter_;
        ::xsd::cxx::tree::one< ForceQuestionHeaderConfirmationType > ForceQuestionHeaderConfirmation_;
        ::xsd::cxx::tree::one< ForceQuestionFooterConfirmationType > ForceQuestionFooterConfirmation_;
        ::xsd::cxx::tree::one< ShowWelcomeMessageQuestionCloseButtonType > ShowWelcomeMessageQuestionCloseButton_;
        ::xsd::cxx::tree::one< WelcomeMessageQuestionTimerType > WelcomeMessageQuestionTimer_;
        ::xsd::cxx::tree::one< ShowQuestionConfirmationType > ShowQuestionConfirmation_;
        ::xsd::cxx::tree::one< ShowWelcomeQuestionType > ShowWelcomeQuestion_;
        ::xsd::cxx::tree::one< QuestionWindowWithType > QuestionWindowWith_;
        ::xsd::cxx::tree::one< QuestionWindowHeightType > QuestionWindowHeight_;
        ::xsd::cxx::tree::one< HeaderLabelConfigurationType > HeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< BottomLabelConfigurationType > BottomLabelConfiguration_;
        ::xsd::cxx::tree::one< CenterLabelConfigurationType > CenterLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const CustomAtributtesWindowConfiguration&, const CustomAtributtesWindowConfiguration&);

      bool
      operator!= (const CustomAtributtesWindowConfiguration&, const CustomAtributtesWindowConfiguration&);


      /**
       * @brief Class corresponding to the %ConfirmationWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ConfirmationWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name HeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %HeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration HeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderLabelConfigurationType, char > HeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderLabelConfigurationType&
        getHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderLabelConfigurationType&
        getHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > p);

        //@}

        /**
         * @name BottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %BottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomLabelConfigurationType, char > BottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomLabelConfigurationType&
        getBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomLabelConfigurationType&
        getBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomLabelConfiguration (const BottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > p);

        //@}

        /**
         * @name NullButtonsVertical
         *
         * @brief Accessor and modifier functions for the %NullButtonsVertical
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean NullButtonsVerticalType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NullButtonsVerticalType, char > NullButtonsVerticalTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NullButtonsVerticalType&
        getNullButtonsVertical () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NullButtonsVerticalType&
        getNullButtonsVertical ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNullButtonsVertical (const NullButtonsVerticalType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfirmationWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfirmationWindowConfiguration (const HeaderLabelConfigurationType&,
                                         const BottomLabelConfigurationType&,
                                         const NullButtonsVerticalType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfirmationWindowConfiguration (::std::auto_ptr< HeaderLabelConfigurationType >&,
                                         ::std::auto_ptr< BottomLabelConfigurationType >&,
                                         const NullButtonsVerticalType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfirmationWindowConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfirmationWindowConfiguration (const ConfirmationWindowConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfirmationWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfirmationWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< HeaderLabelConfigurationType > HeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< BottomLabelConfigurationType > BottomLabelConfiguration_;
        ::xsd::cxx::tree::one< NullButtonsVerticalType > NullButtonsVertical_;

        //@endcond
      };

      bool
      operator== (const ConfirmationWindowConfiguration&, const ConfirmationWindowConfiguration&);

      bool
      operator!= (const ConfirmationWindowConfiguration&, const ConfirmationWindowConfiguration&);


      /**
       * @brief Class corresponding to the %FormsCommonControlsConfigurations schema type.
       *
       * @nosubgrouping
       */
      class FormsCommonControlsConfigurations: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name FormTitles
         *
         * @brief Accessor and modifier functions for the %FormTitles
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FormsTitleLabelConfigurations FormTitlesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FormTitlesType, char > FormTitlesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FormTitlesType&
        getFormTitles () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FormTitlesType&
        getFormTitles ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFormTitles (const FormTitlesType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFormTitles (::std::auto_ptr< FormTitlesType > p);

        //@}

        /**
         * @name FormMesages
         *
         * @brief Accessor and modifier functions for the %FormMesages
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FormsMessagesLabelConfigurations FormMesagesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FormMesagesType, char > FormMesagesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FormMesagesType&
        getFormMesages () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FormMesagesType&
        getFormMesages ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFormMesages (const FormMesagesType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFormMesages (::std::auto_ptr< FormMesagesType > p);

        //@}

        /**
         * @name UnableFunctionalityMessage
         *
         * @brief Accessor and modifier functions for the %UnableFunctionalityMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration UnableFunctionalityMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UnableFunctionalityMessageType, char > UnableFunctionalityMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UnableFunctionalityMessageType&
        getUnableFunctionalityMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UnableFunctionalityMessageType&
        getUnableFunctionalityMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUnableFunctionalityMessage (const UnableFunctionalityMessageType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUnableFunctionalityMessage (::std::auto_ptr< UnableFunctionalityMessageType > p);

        //@}

        /**
         * @name UnableMessageCloseTime
         *
         * @brief Accessor and modifier functions for the %UnableMessageCloseTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer UnableMessageCloseTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UnableMessageCloseTimeType, char > UnableMessageCloseTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UnableMessageCloseTimeType&
        getUnableMessageCloseTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UnableMessageCloseTimeType&
        getUnableMessageCloseTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUnableMessageCloseTime (const UnableMessageCloseTimeType& x);

        //@}

        /**
         * @name ExitFunctionalityMessageCloseTime
         *
         * @brief Accessor and modifier functions for the %ExitFunctionalityMessageCloseTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ExitFunctionalityMessageCloseTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ExitFunctionalityMessageCloseTimeType, char > ExitFunctionalityMessageCloseTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ExitFunctionalityMessageCloseTimeType&
        getExitFunctionalityMessageCloseTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ExitFunctionalityMessageCloseTimeType&
        getExitFunctionalityMessageCloseTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setExitFunctionalityMessageCloseTime (const ExitFunctionalityMessageCloseTimeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        FormsCommonControlsConfigurations ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FormsCommonControlsConfigurations (const FormTitlesType&,
                                           const FormMesagesType&,
                                           const UnableFunctionalityMessageType&,
                                           const UnableMessageCloseTimeType&,
                                           const ExitFunctionalityMessageCloseTimeType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        FormsCommonControlsConfigurations (::std::auto_ptr< FormTitlesType >&,
                                           ::std::auto_ptr< FormMesagesType >&,
                                           ::std::auto_ptr< UnableFunctionalityMessageType >&,
                                           const UnableMessageCloseTimeType&,
                                           const ExitFunctionalityMessageCloseTimeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FormsCommonControlsConfigurations (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FormsCommonControlsConfigurations (const FormsCommonControlsConfigurations& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FormsCommonControlsConfigurations*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FormsCommonControlsConfigurations ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< FormTitlesType > FormTitles_;
        ::xsd::cxx::tree::one< FormMesagesType > FormMesages_;
        ::xsd::cxx::tree::one< UnableFunctionalityMessageType > UnableFunctionalityMessage_;
        ::xsd::cxx::tree::one< UnableMessageCloseTimeType > UnableMessageCloseTime_;
        ::xsd::cxx::tree::one< ExitFunctionalityMessageCloseTimeType > ExitFunctionalityMessageCloseTime_;

        //@endcond
      };

      bool
      operator== (const FormsCommonControlsConfigurations&, const FormsCommonControlsConfigurations&);

      bool
      operator!= (const FormsCommonControlsConfigurations&, const FormsCommonControlsConfigurations&);


      /**
       * @brief Class corresponding to the %FormsMessagesLabelConfigurations schema type.
       *
       * @nosubgrouping
       */
      class FormsMessagesLabelConfigurations: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name VMLogingMessageLabel
         *
         * @brief Accessor and modifier functions for the %VMLogingMessageLabel
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VMLogingMessageLabelType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VMLogingMessageLabelType, char > VMLogingMessageLabelTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VMLogingMessageLabelType&
        getVMLogingMessageLabel () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VMLogingMessageLabelType&
        getVMLogingMessageLabel ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVMLogingMessageLabel (const VMLogingMessageLabelType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVMLogingMessageLabel (::std::auto_ptr< VMLogingMessageLabelType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        FormsMessagesLabelConfigurations ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FormsMessagesLabelConfigurations (const VMLogingMessageLabelType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        FormsMessagesLabelConfigurations (::std::auto_ptr< VMLogingMessageLabelType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FormsMessagesLabelConfigurations (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FormsMessagesLabelConfigurations (const FormsMessagesLabelConfigurations& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FormsMessagesLabelConfigurations*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FormsMessagesLabelConfigurations ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< VMLogingMessageLabelType > VMLogingMessageLabel_;

        //@endcond
      };

      bool
      operator== (const FormsMessagesLabelConfigurations&, const FormsMessagesLabelConfigurations&);

      bool
      operator!= (const FormsMessagesLabelConfigurations&, const FormsMessagesLabelConfigurations&);


      /**
       * @brief Class corresponding to the %FormsTitleLabelConfigurations schema type.
       *
       * @nosubgrouping
       */
      class FormsTitleLabelConfigurations: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name EmptyWindowTitleLabel
         *
         * @brief Accessor and modifier functions for the %EmptyWindowTitleLabel
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration EmptyWindowTitleLabelType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EmptyWindowTitleLabelType, char > EmptyWindowTitleLabelTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EmptyWindowTitleLabelType&
        getEmptyWindowTitleLabel () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EmptyWindowTitleLabelType&
        getEmptyWindowTitleLabel ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEmptyWindowTitleLabel (const EmptyWindowTitleLabelType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEmptyWindowTitleLabel (::std::auto_ptr< EmptyWindowTitleLabelType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        FormsTitleLabelConfigurations ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FormsTitleLabelConfigurations (const EmptyWindowTitleLabelType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        FormsTitleLabelConfigurations (::std::auto_ptr< EmptyWindowTitleLabelType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FormsTitleLabelConfigurations (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FormsTitleLabelConfigurations (const FormsTitleLabelConfigurations& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FormsTitleLabelConfigurations*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FormsTitleLabelConfigurations ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EmptyWindowTitleLabelType > EmptyWindowTitleLabel_;

        //@endcond
      };

      bool
      operator== (const FormsTitleLabelConfigurations&, const FormsTitleLabelConfigurations&);

      bool
      operator!= (const FormsTitleLabelConfigurations&, const FormsTitleLabelConfigurations&);


      /**
       * @brief Class corresponding to the %VotingExperienceLabelConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VotingExperienceLabelConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name SelectionLanguageHeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SelectionLanguageHeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SelectionLanguageHeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectionLanguageHeaderLabelConfigurationType, char > SelectionLanguageHeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectionLanguageHeaderLabelConfigurationType&
        getSelectionLanguageHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectionLanguageHeaderLabelConfigurationType&
        getSelectionLanguageHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectionLanguageHeaderLabelConfiguration (const SelectionLanguageHeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectionLanguageHeaderLabelConfiguration (::std::auto_ptr< SelectionLanguageHeaderLabelConfigurationType > p);

        //@}

        /**
         * @name SelectionLanguageBottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SelectionLanguageBottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SelectionLanguageBottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectionLanguageBottomLabelConfigurationType, char > SelectionLanguageBottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectionLanguageBottomLabelConfigurationType&
        getSelectionLanguageBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectionLanguageBottomLabelConfigurationType&
        getSelectionLanguageBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectionLanguageBottomLabelConfiguration (const SelectionLanguageBottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectionLanguageBottomLabelConfiguration (::std::auto_ptr< SelectionLanguageBottomLabelConfigurationType > p);

        //@}

        /**
         * @name SelectionLanguageConfirmationHeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SelectionLanguageConfirmationHeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SelectionLanguageConfirmationHeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectionLanguageConfirmationHeaderLabelConfigurationType, char > SelectionLanguageConfirmationHeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectionLanguageConfirmationHeaderLabelConfigurationType&
        getSelectionLanguageConfirmationHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectionLanguageConfirmationHeaderLabelConfigurationType&
        getSelectionLanguageConfirmationHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectionLanguageConfirmationHeaderLabelConfiguration (const SelectionLanguageConfirmationHeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectionLanguageConfirmationHeaderLabelConfiguration (::std::auto_ptr< SelectionLanguageConfirmationHeaderLabelConfigurationType > p);

        //@}

        /**
         * @name SelectionLanguageConfirmationBottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SelectionLanguageConfirmationBottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SelectionLanguageConfirmationBottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectionLanguageConfirmationBottomLabelConfigurationType, char > SelectionLanguageConfirmationBottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectionLanguageConfirmationBottomLabelConfigurationType&
        getSelectionLanguageConfirmationBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectionLanguageConfirmationBottomLabelConfigurationType&
        getSelectionLanguageConfirmationBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectionLanguageConfirmationBottomLabelConfiguration (const SelectionLanguageConfirmationBottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectionLanguageConfirmationBottomLabelConfiguration (::std::auto_ptr< SelectionLanguageConfirmationBottomLabelConfigurationType > p);

        //@}

        /**
         * @name SelectionLanguageConfirmationCenterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SelectionLanguageConfirmationCenterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SelectionLanguageConfirmationCenterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectionLanguageConfirmationCenterLabelConfigurationType, char > SelectionLanguageConfirmationCenterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectionLanguageConfirmationCenterLabelConfigurationType&
        getSelectionLanguageConfirmationCenterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectionLanguageConfirmationCenterLabelConfigurationType&
        getSelectionLanguageConfirmationCenterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectionLanguageConfirmationCenterLabelConfiguration (const SelectionLanguageConfirmationCenterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectionLanguageConfirmationCenterLabelConfiguration (::std::auto_ptr< SelectionLanguageConfirmationCenterLabelConfigurationType > p);

        //@}

        /**
         * @name SuperWhiteHeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SuperWhiteHeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SuperWhiteHeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperWhiteHeaderLabelConfigurationType, char > SuperWhiteHeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperWhiteHeaderLabelConfigurationType&
        getSuperWhiteHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperWhiteHeaderLabelConfigurationType&
        getSuperWhiteHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperWhiteHeaderLabelConfiguration (const SuperWhiteHeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperWhiteHeaderLabelConfiguration (::std::auto_ptr< SuperWhiteHeaderLabelConfigurationType > p);

        //@}

        /**
         * @name SuperWhiteBottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SuperWhiteBottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SuperWhiteBottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperWhiteBottomLabelConfigurationType, char > SuperWhiteBottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperWhiteBottomLabelConfigurationType&
        getSuperWhiteBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperWhiteBottomLabelConfigurationType&
        getSuperWhiteBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperWhiteBottomLabelConfiguration (const SuperWhiteBottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperWhiteBottomLabelConfiguration (::std::auto_ptr< SuperWhiteBottomLabelConfigurationType > p);

        //@}

        /**
         * @name SuperWhiteCenterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SuperWhiteCenterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SuperWhiteCenterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperWhiteCenterLabelConfigurationType, char > SuperWhiteCenterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperWhiteCenterLabelConfigurationType&
        getSuperWhiteCenterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperWhiteCenterLabelConfigurationType&
        getSuperWhiteCenterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperWhiteCenterLabelConfiguration (const SuperWhiteCenterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperWhiteCenterLabelConfiguration (::std::auto_ptr< SuperWhiteCenterLabelConfigurationType > p);

        //@}

        /**
         * @name SuperWhiteConfirmationHeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SuperWhiteConfirmationHeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SuperWhiteConfirmationHeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperWhiteConfirmationHeaderLabelConfigurationType, char > SuperWhiteConfirmationHeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperWhiteConfirmationHeaderLabelConfigurationType&
        getSuperWhiteConfirmationHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperWhiteConfirmationHeaderLabelConfigurationType&
        getSuperWhiteConfirmationHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperWhiteConfirmationHeaderLabelConfiguration (const SuperWhiteConfirmationHeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperWhiteConfirmationHeaderLabelConfiguration (::std::auto_ptr< SuperWhiteConfirmationHeaderLabelConfigurationType > p);

        //@}

        /**
         * @name SuperWhiteConfirmationBottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SuperWhiteConfirmationBottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SuperWhiteConfirmationBottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperWhiteConfirmationBottomLabelConfigurationType, char > SuperWhiteConfirmationBottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperWhiteConfirmationBottomLabelConfigurationType&
        getSuperWhiteConfirmationBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperWhiteConfirmationBottomLabelConfigurationType&
        getSuperWhiteConfirmationBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperWhiteConfirmationBottomLabelConfiguration (const SuperWhiteConfirmationBottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperWhiteConfirmationBottomLabelConfiguration (::std::auto_ptr< SuperWhiteConfirmationBottomLabelConfigurationType > p);

        //@}

        /**
         * @name SuperWhiteConfirmationCenterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %SuperWhiteConfirmationCenterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration SuperWhiteConfirmationCenterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperWhiteConfirmationCenterLabelConfigurationType, char > SuperWhiteConfirmationCenterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperWhiteConfirmationCenterLabelConfigurationType&
        getSuperWhiteConfirmationCenterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperWhiteConfirmationCenterLabelConfigurationType&
        getSuperWhiteConfirmationCenterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperWhiteConfirmationCenterLabelConfiguration (const SuperWhiteConfirmationCenterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperWhiteConfirmationCenterLabelConfiguration (::std::auto_ptr< SuperWhiteConfirmationCenterLabelConfigurationType > p);

        //@}

        /**
         * @name ContestWhiteSelectionHeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ContestWhiteSelectionHeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ContestWhiteSelectionHeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContestWhiteSelectionHeaderLabelConfigurationType, char > ContestWhiteSelectionHeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContestWhiteSelectionHeaderLabelConfigurationType&
        getContestWhiteSelectionHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContestWhiteSelectionHeaderLabelConfigurationType&
        getContestWhiteSelectionHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContestWhiteSelectionHeaderLabelConfiguration (const ContestWhiteSelectionHeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContestWhiteSelectionHeaderLabelConfiguration (::std::auto_ptr< ContestWhiteSelectionHeaderLabelConfigurationType > p);

        //@}

        /**
         * @name ContestWhiteSelectionBottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ContestWhiteSelectionBottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ContestWhiteSelectionBottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContestWhiteSelectionBottomLabelConfigurationType, char > ContestWhiteSelectionBottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContestWhiteSelectionBottomLabelConfigurationType&
        getContestWhiteSelectionBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContestWhiteSelectionBottomLabelConfigurationType&
        getContestWhiteSelectionBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContestWhiteSelectionBottomLabelConfiguration (const ContestWhiteSelectionBottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContestWhiteSelectionBottomLabelConfiguration (::std::auto_ptr< ContestWhiteSelectionBottomLabelConfigurationType > p);

        //@}

        /**
         * @name ContestWhiteSelectionCenterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ContestWhiteSelectionCenterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ContestWhiteSelectionCenterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContestWhiteSelectionCenterLabelConfigurationType, char > ContestWhiteSelectionCenterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContestWhiteSelectionCenterLabelConfigurationType&
        getContestWhiteSelectionCenterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContestWhiteSelectionCenterLabelConfigurationType&
        getContestWhiteSelectionCenterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContestWhiteSelectionCenterLabelConfiguration (const ContestWhiteSelectionCenterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContestWhiteSelectionCenterLabelConfiguration (::std::auto_ptr< ContestWhiteSelectionCenterLabelConfigurationType > p);

        //@}

        /**
         * @name WelcomeContestCenterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %WelcomeContestCenterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration WelcomeContestCenterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WelcomeContestCenterLabelConfigurationType, char > WelcomeContestCenterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WelcomeContestCenterLabelConfigurationType&
        getWelcomeContestCenterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WelcomeContestCenterLabelConfigurationType&
        getWelcomeContestCenterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWelcomeContestCenterLabelConfiguration (const WelcomeContestCenterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setWelcomeContestCenterLabelConfiguration (::std::auto_ptr< WelcomeContestCenterLabelConfigurationType > p);

        //@}

        /**
         * @name VotingWidgetLabelChildLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingWidgetLabelChildLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingWidgetLabelChildLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWidgetLabelChildLabelConfigurationType, char > VotingWidgetLabelChildLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWidgetLabelChildLabelConfigurationType&
        getVotingWidgetLabelChildLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWidgetLabelChildLabelConfigurationType&
        getVotingWidgetLabelChildLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWidgetLabelChildLabelConfiguration (const VotingWidgetLabelChildLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWidgetLabelChildLabelConfiguration (::std::auto_ptr< VotingWidgetLabelChildLabelConfigurationType > p);

        //@}

        /**
         * @name VotingWidgetTopChildLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingWidgetTopChildLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingWidgetTopChildLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWidgetTopChildLabelConfigurationType, char > VotingWidgetTopChildLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWidgetTopChildLabelConfigurationType&
        getVotingWidgetTopChildLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWidgetTopChildLabelConfigurationType&
        getVotingWidgetTopChildLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWidgetTopChildLabelConfiguration (const VotingWidgetTopChildLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWidgetTopChildLabelConfiguration (::std::auto_ptr< VotingWidgetTopChildLabelConfigurationType > p);

        //@}

        /**
         * @name VotingWidgetBottomChildLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingWidgetBottomChildLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingWidgetBottomChildLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWidgetBottomChildLabelConfigurationType, char > VotingWidgetBottomChildLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWidgetBottomChildLabelConfigurationType&
        getVotingWidgetBottomChildLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWidgetBottomChildLabelConfigurationType&
        getVotingWidgetBottomChildLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWidgetBottomChildLabelConfiguration (const VotingWidgetBottomChildLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWidgetBottomChildLabelConfiguration (::std::auto_ptr< VotingWidgetBottomChildLabelConfigurationType > p);

        //@}

        /**
         * @name VotingWidgetNumberChildLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingWidgetNumberChildLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingWidgetNumberChildLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWidgetNumberChildLabelConfigurationType, char > VotingWidgetNumberChildLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWidgetNumberChildLabelConfigurationType&
        getVotingWidgetNumberChildLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWidgetNumberChildLabelConfigurationType&
        getVotingWidgetNumberChildLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWidgetNumberChildLabelConfiguration (const VotingWidgetNumberChildLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWidgetNumberChildLabelConfiguration (::std::auto_ptr< VotingWidgetNumberChildLabelConfigurationType > p);

        //@}

        /**
         * @name VotingWindowEndMessageLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingWindowEndMessageLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingWindowEndMessageLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWindowEndMessageLabelConfigurationType, char > VotingWindowEndMessageLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWindowEndMessageLabelConfigurationType&
        getVotingWindowEndMessageLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWindowEndMessageLabelConfigurationType&
        getVotingWindowEndMessageLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWindowEndMessageLabelConfiguration (const VotingWindowEndMessageLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWindowEndMessageLabelConfiguration (::std::auto_ptr< VotingWindowEndMessageLabelConfigurationType > p);

        //@}

        /**
         * @name VotingWidgetPartySelectionLabelChildLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingWidgetPartySelectionLabelChildLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingWidgetPartySelectionLabelChildLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWidgetPartySelectionLabelChildLabelConfigurationType, char > VotingWidgetPartySelectionLabelChildLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWidgetPartySelectionLabelChildLabelConfigurationType&
        getVotingWidgetPartySelectionLabelChildLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWidgetPartySelectionLabelChildLabelConfigurationType&
        getVotingWidgetPartySelectionLabelChildLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWidgetPartySelectionLabelChildLabelConfiguration (const VotingWidgetPartySelectionLabelChildLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWidgetPartySelectionLabelChildLabelConfiguration (::std::auto_ptr< VotingWidgetPartySelectionLabelChildLabelConfigurationType > p);

        //@}

        /**
         * @name PartyNullLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %PartyNullLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration PartyNullLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartyNullLabelConfigurationType, char > PartyNullLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartyNullLabelConfigurationType&
        getPartyNullLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartyNullLabelConfigurationType&
        getPartyNullLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartyNullLabelConfiguration (const PartyNullLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartyNullLabelConfiguration (::std::auto_ptr< PartyNullLabelConfigurationType > p);

        //@}

        /**
         * @name LoadingBallotsLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %LoadingBallotsLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration LoadingBallotsLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LoadingBallotsLabelConfigurationType, char > LoadingBallotsLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LoadingBallotsLabelConfigurationType&
        getLoadingBallotsLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LoadingBallotsLabelConfigurationType&
        getLoadingBallotsLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLoadingBallotsLabelConfiguration (const LoadingBallotsLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLoadingBallotsLabelConfiguration (::std::auto_ptr< LoadingBallotsLabelConfigurationType > p);

        //@}

        /**
         * @name CheckSumLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %CheckSumLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration CheckSumLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CheckSumLabelConfigurationType, char > CheckSumLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CheckSumLabelConfigurationType&
        getCheckSumLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CheckSumLabelConfigurationType&
        getCheckSumLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCheckSumLabelConfiguration (const CheckSumLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCheckSumLabelConfiguration (::std::auto_ptr< CheckSumLabelConfigurationType > p);

        //@}

        /**
         * @name InterrupVotingExperienceMessageLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %InterrupVotingExperienceMessageLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InterrupVotingExperienceMessageLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InterrupVotingExperienceMessageLabelConfigurationType, char > InterrupVotingExperienceMessageLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InterrupVotingExperienceMessageLabelConfigurationType&
        getInterrupVotingExperienceMessageLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InterrupVotingExperienceMessageLabelConfigurationType&
        getInterrupVotingExperienceMessageLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInterrupVotingExperienceMessageLabelConfiguration (const InterrupVotingExperienceMessageLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInterrupVotingExperienceMessageLabelConfiguration (::std::auto_ptr< InterrupVotingExperienceMessageLabelConfigurationType > p);

        //@}

        /**
         * @name InterrupVotingExperienceCancelLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %InterrupVotingExperienceCancelLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InterrupVotingExperienceCancelLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InterrupVotingExperienceCancelLabelConfigurationType, char > InterrupVotingExperienceCancelLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InterrupVotingExperienceCancelLabelConfigurationType&
        getInterrupVotingExperienceCancelLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InterrupVotingExperienceCancelLabelConfigurationType&
        getInterrupVotingExperienceCancelLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInterrupVotingExperienceCancelLabelConfiguration (const InterrupVotingExperienceCancelLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInterrupVotingExperienceCancelLabelConfiguration (::std::auto_ptr< InterrupVotingExperienceCancelLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VotingExperienceLabelConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VotingExperienceLabelConfiguration (const SelectionLanguageHeaderLabelConfigurationType&,
                                            const SelectionLanguageBottomLabelConfigurationType&,
                                            const SelectionLanguageConfirmationHeaderLabelConfigurationType&,
                                            const SelectionLanguageConfirmationBottomLabelConfigurationType&,
                                            const SelectionLanguageConfirmationCenterLabelConfigurationType&,
                                            const SuperWhiteHeaderLabelConfigurationType&,
                                            const SuperWhiteBottomLabelConfigurationType&,
                                            const SuperWhiteCenterLabelConfigurationType&,
                                            const SuperWhiteConfirmationHeaderLabelConfigurationType&,
                                            const SuperWhiteConfirmationBottomLabelConfigurationType&,
                                            const SuperWhiteConfirmationCenterLabelConfigurationType&,
                                            const ContestWhiteSelectionHeaderLabelConfigurationType&,
                                            const ContestWhiteSelectionBottomLabelConfigurationType&,
                                            const ContestWhiteSelectionCenterLabelConfigurationType&,
                                            const WelcomeContestCenterLabelConfigurationType&,
                                            const VotingWidgetLabelChildLabelConfigurationType&,
                                            const VotingWidgetTopChildLabelConfigurationType&,
                                            const VotingWidgetBottomChildLabelConfigurationType&,
                                            const VotingWidgetNumberChildLabelConfigurationType&,
                                            const VotingWindowEndMessageLabelConfigurationType&,
                                            const VotingWidgetPartySelectionLabelChildLabelConfigurationType&,
                                            const PartyNullLabelConfigurationType&,
                                            const LoadingBallotsLabelConfigurationType&,
                                            const CheckSumLabelConfigurationType&,
                                            const InterrupVotingExperienceMessageLabelConfigurationType&,
                                            const InterrupVotingExperienceCancelLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VotingExperienceLabelConfiguration (::std::auto_ptr< SelectionLanguageHeaderLabelConfigurationType >&,
                                            ::std::auto_ptr< SelectionLanguageBottomLabelConfigurationType >&,
                                            ::std::auto_ptr< SelectionLanguageConfirmationHeaderLabelConfigurationType >&,
                                            ::std::auto_ptr< SelectionLanguageConfirmationBottomLabelConfigurationType >&,
                                            ::std::auto_ptr< SelectionLanguageConfirmationCenterLabelConfigurationType >&,
                                            ::std::auto_ptr< SuperWhiteHeaderLabelConfigurationType >&,
                                            ::std::auto_ptr< SuperWhiteBottomLabelConfigurationType >&,
                                            ::std::auto_ptr< SuperWhiteCenterLabelConfigurationType >&,
                                            ::std::auto_ptr< SuperWhiteConfirmationHeaderLabelConfigurationType >&,
                                            ::std::auto_ptr< SuperWhiteConfirmationBottomLabelConfigurationType >&,
                                            ::std::auto_ptr< SuperWhiteConfirmationCenterLabelConfigurationType >&,
                                            ::std::auto_ptr< ContestWhiteSelectionHeaderLabelConfigurationType >&,
                                            ::std::auto_ptr< ContestWhiteSelectionBottomLabelConfigurationType >&,
                                            ::std::auto_ptr< ContestWhiteSelectionCenterLabelConfigurationType >&,
                                            ::std::auto_ptr< WelcomeContestCenterLabelConfigurationType >&,
                                            ::std::auto_ptr< VotingWidgetLabelChildLabelConfigurationType >&,
                                            ::std::auto_ptr< VotingWidgetTopChildLabelConfigurationType >&,
                                            ::std::auto_ptr< VotingWidgetBottomChildLabelConfigurationType >&,
                                            ::std::auto_ptr< VotingWidgetNumberChildLabelConfigurationType >&,
                                            ::std::auto_ptr< VotingWindowEndMessageLabelConfigurationType >&,
                                            ::std::auto_ptr< VotingWidgetPartySelectionLabelChildLabelConfigurationType >&,
                                            ::std::auto_ptr< PartyNullLabelConfigurationType >&,
                                            ::std::auto_ptr< LoadingBallotsLabelConfigurationType >&,
                                            ::std::auto_ptr< CheckSumLabelConfigurationType >&,
                                            ::std::auto_ptr< InterrupVotingExperienceMessageLabelConfigurationType >&,
                                            ::std::auto_ptr< InterrupVotingExperienceCancelLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VotingExperienceLabelConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VotingExperienceLabelConfiguration (const VotingExperienceLabelConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VotingExperienceLabelConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VotingExperienceLabelConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SelectionLanguageHeaderLabelConfigurationType > SelectionLanguageHeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< SelectionLanguageBottomLabelConfigurationType > SelectionLanguageBottomLabelConfiguration_;
        ::xsd::cxx::tree::one< SelectionLanguageConfirmationHeaderLabelConfigurationType > SelectionLanguageConfirmationHeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< SelectionLanguageConfirmationBottomLabelConfigurationType > SelectionLanguageConfirmationBottomLabelConfiguration_;
        ::xsd::cxx::tree::one< SelectionLanguageConfirmationCenterLabelConfigurationType > SelectionLanguageConfirmationCenterLabelConfiguration_;
        ::xsd::cxx::tree::one< SuperWhiteHeaderLabelConfigurationType > SuperWhiteHeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< SuperWhiteBottomLabelConfigurationType > SuperWhiteBottomLabelConfiguration_;
        ::xsd::cxx::tree::one< SuperWhiteCenterLabelConfigurationType > SuperWhiteCenterLabelConfiguration_;
        ::xsd::cxx::tree::one< SuperWhiteConfirmationHeaderLabelConfigurationType > SuperWhiteConfirmationHeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< SuperWhiteConfirmationBottomLabelConfigurationType > SuperWhiteConfirmationBottomLabelConfiguration_;
        ::xsd::cxx::tree::one< SuperWhiteConfirmationCenterLabelConfigurationType > SuperWhiteConfirmationCenterLabelConfiguration_;
        ::xsd::cxx::tree::one< ContestWhiteSelectionHeaderLabelConfigurationType > ContestWhiteSelectionHeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< ContestWhiteSelectionBottomLabelConfigurationType > ContestWhiteSelectionBottomLabelConfiguration_;
        ::xsd::cxx::tree::one< ContestWhiteSelectionCenterLabelConfigurationType > ContestWhiteSelectionCenterLabelConfiguration_;
        ::xsd::cxx::tree::one< WelcomeContestCenterLabelConfigurationType > WelcomeContestCenterLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingWidgetLabelChildLabelConfigurationType > VotingWidgetLabelChildLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingWidgetTopChildLabelConfigurationType > VotingWidgetTopChildLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingWidgetBottomChildLabelConfigurationType > VotingWidgetBottomChildLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingWidgetNumberChildLabelConfigurationType > VotingWidgetNumberChildLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingWindowEndMessageLabelConfigurationType > VotingWindowEndMessageLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingWidgetPartySelectionLabelChildLabelConfigurationType > VotingWidgetPartySelectionLabelChildLabelConfiguration_;
        ::xsd::cxx::tree::one< PartyNullLabelConfigurationType > PartyNullLabelConfiguration_;
        ::xsd::cxx::tree::one< LoadingBallotsLabelConfigurationType > LoadingBallotsLabelConfiguration_;
        ::xsd::cxx::tree::one< CheckSumLabelConfigurationType > CheckSumLabelConfiguration_;
        ::xsd::cxx::tree::one< InterrupVotingExperienceMessageLabelConfigurationType > InterrupVotingExperienceMessageLabelConfiguration_;
        ::xsd::cxx::tree::one< InterrupVotingExperienceCancelLabelConfigurationType > InterrupVotingExperienceCancelLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const VotingExperienceLabelConfiguration&, const VotingExperienceLabelConfiguration&);

      bool
      operator!= (const VotingExperienceLabelConfiguration&, const VotingExperienceLabelConfiguration&);


      /**
       * @brief Class corresponding to the %BallotOptionWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BallotOptionWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NumberWidth
         *
         * @brief Accessor and modifier functions for the %NumberWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer NumberWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberWidthType, char > NumberWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberWidthType&
        getNumberWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberWidthType&
        getNumberWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberWidth (const NumberWidthType& x);

        //@}

        /**
         * @name Padding
         *
         * @brief Accessor and modifier functions for the %Padding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PaddingType, char > PaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PaddingType&
        getPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PaddingType&
        getPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPadding (const PaddingType& x);

        //@}

        /**
         * @name Display
         *
         * @brief Accessor and modifier functions for the %Display
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DisplayType DisplayType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DisplayType, char > DisplayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DisplayType&
        getDisplay () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DisplayType&
        getDisplay ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDisplay (const DisplayType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDisplay (::std::auto_ptr< DisplayType > p);

        //@}

        /**
         * @name ShowFrame
         *
         * @brief Accessor and modifier functions for the %ShowFrame
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowFrameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowFrameType, char > ShowFrameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowFrameType&
        getShowFrame () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowFrameType&
        getShowFrame ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowFrame (const ShowFrameType& x);

        //@}

        /**
         * @name SelectedColor
         *
         * @brief Accessor and modifier functions for the %SelectedColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration SelectedColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectedColorType, char > SelectedColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectedColorType&
        getSelectedColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectedColorType&
        getSelectedColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectedColor (const SelectedColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectedColor (::std::auto_ptr< SelectedColorType > p);

        //@}

        /**
         * @name UnSelectedColor
         *
         * @brief Accessor and modifier functions for the %UnSelectedColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration UnSelectedColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UnSelectedColorType, char > UnSelectedColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UnSelectedColorType&
        getUnSelectedColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UnSelectedColorType&
        getUnSelectedColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUnSelectedColor (const UnSelectedColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUnSelectedColor (::std::auto_ptr< UnSelectedColorType > p);

        //@}

        /**
         * @name BallotFont
         *
         * @brief Accessor and modifier functions for the %BallotFont
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FontConfiguration BallotFontType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotFontType, char > BallotFontTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotFontType&
        getBallotFont () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotFontType&
        getBallotFont ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotFont (const BallotFontType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotFont (::std::auto_ptr< BallotFontType > p);

        //@}

        /**
         * @name SeparatorCharacter
         *
         * @brief Accessor and modifier functions for the %SeparatorCharacter
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String SeparatorCharacterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SeparatorCharacterType, char > SeparatorCharacterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SeparatorCharacterType&
        getSeparatorCharacter () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SeparatorCharacterType&
        getSeparatorCharacter ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSeparatorCharacter (const SeparatorCharacterType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSeparatorCharacter (::std::auto_ptr< SeparatorCharacterType > p);

        //@}

        /**
         * @name NameIsBeforeSeparator
         *
         * @brief Accessor and modifier functions for the %NameIsBeforeSeparator
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean NameIsBeforeSeparatorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameIsBeforeSeparatorType, char > NameIsBeforeSeparatorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NameIsBeforeSeparatorType&
        getNameIsBeforeSeparator () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NameIsBeforeSeparatorType&
        getNameIsBeforeSeparator ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNameIsBeforeSeparator (const NameIsBeforeSeparatorType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BallotOptionWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BallotOptionWidgetConfiguration (const NumberWidthType&,
                                         const PaddingType&,
                                         const DisplayType&,
                                         const ShowFrameType&,
                                         const SelectedColorType&,
                                         const UnSelectedColorType&,
                                         const BallotFontType&,
                                         const SeparatorCharacterType&,
                                         const NameIsBeforeSeparatorType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        BallotOptionWidgetConfiguration (const NumberWidthType&,
                                         const PaddingType&,
                                         const DisplayType&,
                                         const ShowFrameType&,
                                         ::std::auto_ptr< SelectedColorType >&,
                                         ::std::auto_ptr< UnSelectedColorType >&,
                                         ::std::auto_ptr< BallotFontType >&,
                                         const SeparatorCharacterType&,
                                         const NameIsBeforeSeparatorType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BallotOptionWidgetConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BallotOptionWidgetConfiguration (const BallotOptionWidgetConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BallotOptionWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BallotOptionWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NumberWidthType > NumberWidth_;
        ::xsd::cxx::tree::one< PaddingType > Padding_;
        ::xsd::cxx::tree::one< DisplayType > Display_;
        ::xsd::cxx::tree::one< ShowFrameType > ShowFrame_;
        ::xsd::cxx::tree::one< SelectedColorType > SelectedColor_;
        ::xsd::cxx::tree::one< UnSelectedColorType > UnSelectedColor_;
        ::xsd::cxx::tree::one< BallotFontType > BallotFont_;
        ::xsd::cxx::tree::one< SeparatorCharacterType > SeparatorCharacter_;
        ::xsd::cxx::tree::one< NameIsBeforeSeparatorType > NameIsBeforeSeparator_;

        //@endcond
      };

      bool
      operator== (const BallotOptionWidgetConfiguration&, const BallotOptionWidgetConfiguration&);

      bool
      operator!= (const BallotOptionWidgetConfiguration&, const BallotOptionWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %VotingWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VotingWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ShowBallotOptionFooter
         *
         * @brief Accessor and modifier functions for the %ShowBallotOptionFooter
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBallotOptionFooterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBallotOptionFooterType, char > ShowBallotOptionFooterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBallotOptionFooterType&
        getShowBallotOptionFooter () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBallotOptionFooterType&
        getShowBallotOptionFooter ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBallotOptionFooter (const ShowBallotOptionFooterType& x);

        //@}

        /**
         * @name BottomFrameMargin
         *
         * @brief Accessor and modifier functions for the %BottomFrameMargin
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer BottomFrameMarginType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomFrameMarginType, char > BottomFrameMarginTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomFrameMarginType&
        getBottomFrameMargin () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomFrameMarginType&
        getBottomFrameMargin ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomFrameMargin (const BottomFrameMarginType& x);

        //@}

        /**
         * @name BottomFrameHeight
         *
         * @brief Accessor and modifier functions for the %BottomFrameHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer BottomFrameHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomFrameHeightType, char > BottomFrameHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomFrameHeightType&
        getBottomFrameHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomFrameHeightType&
        getBottomFrameHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomFrameHeight (const BottomFrameHeightType& x);

        //@}

        /**
         * @name BottomFont
         *
         * @brief Accessor and modifier functions for the %BottomFont
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FontConfiguration BottomFontType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomFontType, char > BottomFontTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomFontType&
        getBottomFont () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomFontType&
        getBottomFont ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomFont (const BottomFontType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBottomFont (::std::auto_ptr< BottomFontType > p);

        //@}

        /**
         * @name ShowLanguageConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowLanguageConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowLanguageConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowLanguageConfirmationType, char > ShowLanguageConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowLanguageConfirmationType&
        getShowLanguageConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowLanguageConfirmationType&
        getShowLanguageConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowLanguageConfirmation (const ShowLanguageConfirmationType& x);

        //@}

        /**
         * @name WelcomeMessageContestTimer
         *
         * @brief Accessor and modifier functions for the %WelcomeMessageContestTimer
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer WelcomeMessageContestTimerType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WelcomeMessageContestTimerType, char > WelcomeMessageContestTimerTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WelcomeMessageContestTimerType&
        getWelcomeMessageContestTimer () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WelcomeMessageContestTimerType&
        getWelcomeMessageContestTimer ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWelcomeMessageContestTimer (const WelcomeMessageContestTimerType& x);

        //@}

        /**
         * @name ShowBlankVoteQuestion
         *
         * @brief Accessor and modifier functions for the %ShowBlankVoteQuestion
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBlankVoteQuestionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBlankVoteQuestionType, char > ShowBlankVoteQuestionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBlankVoteQuestionType&
        getShowBlankVoteQuestion () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBlankVoteQuestionType&
        getShowBlankVoteQuestion ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBlankVoteQuestion (const ShowBlankVoteQuestionType& x);

        //@}

        /**
         * @name ShowBlankVoteConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowBlankVoteConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBlankVoteConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBlankVoteConfirmationType, char > ShowBlankVoteConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBlankVoteConfirmationType&
        getShowBlankVoteConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBlankVoteConfirmationType&
        getShowBlankVoteConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBlankVoteConfirmation (const ShowBlankVoteConfirmationType& x);

        //@}

        /**
         * @name ShowNullQuestionInBack
         *
         * @brief Accessor and modifier functions for the %ShowNullQuestionInBack
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowNullQuestionInBackType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowNullQuestionInBackType, char > ShowNullQuestionInBackTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowNullQuestionInBackType&
        getShowNullQuestionInBack () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowNullQuestionInBackType&
        getShowNullQuestionInBack ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowNullQuestionInBack (const ShowNullQuestionInBackType& x);

        //@}

        /**
         * @name ShowLanguageSelectionInBack
         *
         * @brief Accessor and modifier functions for the %ShowLanguageSelectionInBack
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowLanguageSelectionInBackType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowLanguageSelectionInBackType, char > ShowLanguageSelectionInBackTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowLanguageSelectionInBackType&
        getShowLanguageSelectionInBack () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowLanguageSelectionInBackType&
        getShowLanguageSelectionInBack ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowLanguageSelectionInBack (const ShowLanguageSelectionInBackType& x);

        //@}

        /**
         * @name ShowBallotOptionsInContestBack
         *
         * @brief Accessor and modifier functions for the %ShowBallotOptionsInContestBack
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBallotOptionsInContestBackType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBallotOptionsInContestBackType, char > ShowBallotOptionsInContestBackTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBallotOptionsInContestBackType&
        getShowBallotOptionsInContestBack () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBallotOptionsInContestBackType&
        getShowBallotOptionsInContestBack ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBallotOptionsInContestBack (const ShowBallotOptionsInContestBackType& x);

        //@}

        /**
         * @name ShowWelcomeContest
         *
         * @brief Accessor and modifier functions for the %ShowWelcomeContest
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowWelcomeContestType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowWelcomeContestType, char > ShowWelcomeContestTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowWelcomeContestType&
        getShowWelcomeContest () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowWelcomeContestType&
        getShowWelcomeContest ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowWelcomeContest (const ShowWelcomeContestType& x);

        //@}

        /**
         * @name EraseBallotOptionsInPartyChanged
         *
         * @brief Accessor and modifier functions for the %EraseBallotOptionsInPartyChanged
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean EraseBallotOptionsInPartyChangedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EraseBallotOptionsInPartyChangedType, char > EraseBallotOptionsInPartyChangedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EraseBallotOptionsInPartyChangedType&
        getEraseBallotOptionsInPartyChanged () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EraseBallotOptionsInPartyChangedType&
        getEraseBallotOptionsInPartyChanged ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEraseBallotOptionsInPartyChanged (const EraseBallotOptionsInPartyChangedType& x);

        //@}

        /**
         * @name QuestionHeaderSameInConfirmation
         *
         * @brief Accessor and modifier functions for the %QuestionHeaderSameInConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean QuestionHeaderSameInConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionHeaderSameInConfirmationType, char > QuestionHeaderSameInConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionHeaderSameInConfirmationType&
        getQuestionHeaderSameInConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionHeaderSameInConfirmationType&
        getQuestionHeaderSameInConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionHeaderSameInConfirmation (const QuestionHeaderSameInConfirmationType& x);

        //@}

        /**
         * @name ConnectTimer
         *
         * @brief Accessor and modifier functions for the %ConnectTimer
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer ConnectTimerType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConnectTimerType, char > ConnectTimerTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConnectTimerType&
        getConnectTimer () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConnectTimerType&
        getConnectTimer ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConnectTimer (const ConnectTimerType& x);

        //@}

        /**
         * @name ConnectTimerLoading
         *
         * @brief Accessor and modifier functions for the %ConnectTimerLoading
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ConnectTimerLoadingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConnectTimerLoadingType, char > ConnectTimerLoadingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConnectTimerLoadingType&
        getConnectTimerLoading () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConnectTimerLoadingType&
        getConnectTimerLoading ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConnectTimerLoading (const ConnectTimerLoadingType& x);

        //@}

        /**
         * @name ConnectTimerLanguage
         *
         * @brief Accessor and modifier functions for the %ConnectTimerLanguage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer ConnectTimerLanguageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConnectTimerLanguageType, char > ConnectTimerLanguageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConnectTimerLanguageType&
        getConnectTimerLanguage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConnectTimerLanguageType&
        getConnectTimerLanguage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConnectTimerLanguage (const ConnectTimerLanguageType& x);

        //@}

        /**
         * @name LoadingBallotMessage
         *
         * @brief Accessor and modifier functions for the %LoadingBallotMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LoadingBallotMessage LoadingBallotMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LoadingBallotMessageType, char > LoadingBallotMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LoadingBallotMessageType&
        getLoadingBallotMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LoadingBallotMessageType&
        getLoadingBallotMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLoadingBallotMessage (const LoadingBallotMessageType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLoadingBallotMessage (::std::auto_ptr< LoadingBallotMessageType > p);

        //@}

        /**
         * @name NumberOfBallotsToDisplayLoadingBallotMessage
         *
         * @brief Accessor and modifier functions for the %NumberOfBallotsToDisplayLoadingBallotMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger NumberOfBallotsToDisplayLoadingBallotMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberOfBallotsToDisplayLoadingBallotMessageType, char > NumberOfBallotsToDisplayLoadingBallotMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberOfBallotsToDisplayLoadingBallotMessageType&
        getNumberOfBallotsToDisplayLoadingBallotMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberOfBallotsToDisplayLoadingBallotMessageType&
        getNumberOfBallotsToDisplayLoadingBallotMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberOfBallotsToDisplayLoadingBallotMessage (const NumberOfBallotsToDisplayLoadingBallotMessageType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VotingWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VotingWindowConfiguration (const ShowBallotOptionFooterType&,
                                   const BottomFrameMarginType&,
                                   const BottomFrameHeightType&,
                                   const BottomFontType&,
                                   const ShowLanguageConfirmationType&,
                                   const WelcomeMessageContestTimerType&,
                                   const ShowBlankVoteQuestionType&,
                                   const ShowBlankVoteConfirmationType&,
                                   const ShowNullQuestionInBackType&,
                                   const ShowLanguageSelectionInBackType&,
                                   const ShowBallotOptionsInContestBackType&,
                                   const ShowWelcomeContestType&,
                                   const EraseBallotOptionsInPartyChangedType&,
                                   const QuestionHeaderSameInConfirmationType&,
                                   const ConnectTimerType&,
                                   const ConnectTimerLoadingType&,
                                   const ConnectTimerLanguageType&,
                                   const LoadingBallotMessageType&,
                                   const NumberOfBallotsToDisplayLoadingBallotMessageType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VotingWindowConfiguration (const ShowBallotOptionFooterType&,
                                   const BottomFrameMarginType&,
                                   const BottomFrameHeightType&,
                                   ::std::auto_ptr< BottomFontType >&,
                                   const ShowLanguageConfirmationType&,
                                   const WelcomeMessageContestTimerType&,
                                   const ShowBlankVoteQuestionType&,
                                   const ShowBlankVoteConfirmationType&,
                                   const ShowNullQuestionInBackType&,
                                   const ShowLanguageSelectionInBackType&,
                                   const ShowBallotOptionsInContestBackType&,
                                   const ShowWelcomeContestType&,
                                   const EraseBallotOptionsInPartyChangedType&,
                                   const QuestionHeaderSameInConfirmationType&,
                                   const ConnectTimerType&,
                                   const ConnectTimerLoadingType&,
                                   const ConnectTimerLanguageType&,
                                   const LoadingBallotMessageType&,
                                   const NumberOfBallotsToDisplayLoadingBallotMessageType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VotingWindowConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VotingWindowConfiguration (const VotingWindowConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VotingWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VotingWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ShowBallotOptionFooterType > ShowBallotOptionFooter_;
        ::xsd::cxx::tree::one< BottomFrameMarginType > BottomFrameMargin_;
        ::xsd::cxx::tree::one< BottomFrameHeightType > BottomFrameHeight_;
        ::xsd::cxx::tree::one< BottomFontType > BottomFont_;
        ::xsd::cxx::tree::one< ShowLanguageConfirmationType > ShowLanguageConfirmation_;
        ::xsd::cxx::tree::one< WelcomeMessageContestTimerType > WelcomeMessageContestTimer_;
        ::xsd::cxx::tree::one< ShowBlankVoteQuestionType > ShowBlankVoteQuestion_;
        ::xsd::cxx::tree::one< ShowBlankVoteConfirmationType > ShowBlankVoteConfirmation_;
        ::xsd::cxx::tree::one< ShowNullQuestionInBackType > ShowNullQuestionInBack_;
        ::xsd::cxx::tree::one< ShowLanguageSelectionInBackType > ShowLanguageSelectionInBack_;
        ::xsd::cxx::tree::one< ShowBallotOptionsInContestBackType > ShowBallotOptionsInContestBack_;
        ::xsd::cxx::tree::one< ShowWelcomeContestType > ShowWelcomeContest_;
        ::xsd::cxx::tree::one< EraseBallotOptionsInPartyChangedType > EraseBallotOptionsInPartyChanged_;
        ::xsd::cxx::tree::one< QuestionHeaderSameInConfirmationType > QuestionHeaderSameInConfirmation_;
        ::xsd::cxx::tree::one< ConnectTimerType > ConnectTimer_;
        ::xsd::cxx::tree::one< ConnectTimerLoadingType > ConnectTimerLoading_;
        ::xsd::cxx::tree::one< ConnectTimerLanguageType > ConnectTimerLanguage_;
        ::xsd::cxx::tree::one< LoadingBallotMessageType > LoadingBallotMessage_;
        ::xsd::cxx::tree::one< NumberOfBallotsToDisplayLoadingBallotMessageType > NumberOfBallotsToDisplayLoadingBallotMessage_;

        //@endcond
      };

      bool
      operator== (const VotingWindowConfiguration&, const VotingWindowConfiguration&);

      bool
      operator!= (const VotingWindowConfiguration&, const VotingWindowConfiguration&);


      /**
       * @brief Class corresponding to the %ReportPrintingWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ReportPrintingWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name CompositeDescriptionLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %CompositeDescriptionLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration CompositeDescriptionLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CompositeDescriptionLabelConfigurationType, char > CompositeDescriptionLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CompositeDescriptionLabelConfigurationType&
        getCompositeDescriptionLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CompositeDescriptionLabelConfigurationType&
        getCompositeDescriptionLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCompositeDescriptionLabelConfiguration (const CompositeDescriptionLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCompositeDescriptionLabelConfiguration (::std::auto_ptr< CompositeDescriptionLabelConfigurationType > p);

        //@}

        /**
         * @name ReportListTitleLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ReportListTitleLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ReportListTitleLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReportListTitleLabelConfigurationType, char > ReportListTitleLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ReportListTitleLabelConfigurationType&
        getReportListTitleLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ReportListTitleLabelConfigurationType&
        getReportListTitleLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setReportListTitleLabelConfiguration (const ReportListTitleLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setReportListTitleLabelConfiguration (::std::auto_ptr< ReportListTitleLabelConfigurationType > p);

        //@}

        /**
         * @name ProgressMessageLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ProgressMessageLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ProgressMessageLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ProgressMessageLabelConfigurationType, char > ProgressMessageLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ProgressMessageLabelConfigurationType&
        getProgressMessageLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ProgressMessageLabelConfigurationType&
        getProgressMessageLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setProgressMessageLabelConfiguration (const ProgressMessageLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setProgressMessageLabelConfiguration (::std::auto_ptr< ProgressMessageLabelConfigurationType > p);

        //@}

        /**
         * @name ReportListItemLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ReportListItemLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ReportListItemLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReportListItemLabelConfigurationType, char > ReportListItemLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ReportListItemLabelConfigurationType&
        getReportListItemLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ReportListItemLabelConfigurationType&
        getReportListItemLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setReportListItemLabelConfiguration (const ReportListItemLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setReportListItemLabelConfiguration (::std::auto_ptr< ReportListItemLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ReportPrintingWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ReportPrintingWidgetConfiguration (const CompositeDescriptionLabelConfigurationType&,
                                           const ReportListTitleLabelConfigurationType&,
                                           const ProgressMessageLabelConfigurationType&,
                                           const ReportListItemLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ReportPrintingWidgetConfiguration (::std::auto_ptr< CompositeDescriptionLabelConfigurationType >&,
                                           ::std::auto_ptr< ReportListTitleLabelConfigurationType >&,
                                           ::std::auto_ptr< ProgressMessageLabelConfigurationType >&,
                                           ::std::auto_ptr< ReportListItemLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ReportPrintingWidgetConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ReportPrintingWidgetConfiguration (const ReportPrintingWidgetConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ReportPrintingWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ReportPrintingWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< CompositeDescriptionLabelConfigurationType > CompositeDescriptionLabelConfiguration_;
        ::xsd::cxx::tree::one< ReportListTitleLabelConfigurationType > ReportListTitleLabelConfiguration_;
        ::xsd::cxx::tree::one< ProgressMessageLabelConfigurationType > ProgressMessageLabelConfiguration_;
        ::xsd::cxx::tree::one< ReportListItemLabelConfigurationType > ReportListItemLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const ReportPrintingWidgetConfiguration&, const ReportPrintingWidgetConfiguration&);

      bool
      operator!= (const ReportPrintingWidgetConfiguration&, const ReportPrintingWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %FontConfiguration schema type.
       *
       * @nosubgrouping
       */
      class FontConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Size
         *
         * @brief Accessor and modifier functions for the %Size
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SizeType, char > SizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SizeType&
        getSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SizeType&
        getSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSize (const SizeType& x);

        //@}

        /**
         * @name FontName
         *
         * @brief Accessor and modifier functions for the %FontName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String FontNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontNameType, char > FontNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontNameType&
        getFontName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontNameType&
        getFontName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontName (const FontNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFontName (::std::auto_ptr< FontNameType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        FontConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FontConfiguration (const SizeType&,
                           const FontNameType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FontConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FontConfiguration (const FontConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FontConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FontConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SizeType > Size_;
        ::xsd::cxx::tree::one< FontNameType > FontName_;

        //@endcond
      };

      bool
      operator== (const FontConfiguration&, const FontConfiguration&);

      bool
      operator!= (const FontConfiguration&, const FontConfiguration&);


      /**
       * @brief Class corresponding to the %ColorConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ColorConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Red
         *
         * @brief Accessor and modifier functions for the %Red
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double RedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RedType, char, ::xsd::cxx::tree::schema_type::double_ > RedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RedType&
        getRed () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RedType&
        getRed ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRed (const RedType& x);

        //@}

        /**
         * @name Blue
         *
         * @brief Accessor and modifier functions for the %Blue
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double BlueType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlueType, char, ::xsd::cxx::tree::schema_type::double_ > BlueTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BlueType&
        getBlue () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BlueType&
        getBlue ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlue (const BlueType& x);

        //@}

        /**
         * @name Green
         *
         * @brief Accessor and modifier functions for the %Green
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Double GreenType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< GreenType, char, ::xsd::cxx::tree::schema_type::double_ > GreenTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const GreenType&
        getGreen () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        GreenType&
        getGreen ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setGreen (const GreenType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ColorConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ColorConfiguration (const RedType&,
                            const BlueType&,
                            const GreenType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ColorConfiguration (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ColorConfiguration (const ColorConfiguration& x,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ColorConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ColorConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< RedType > Red_;
        ::xsd::cxx::tree::one< BlueType > Blue_;
        ::xsd::cxx::tree::one< GreenType > Green_;

        //@endcond
      };

      bool
      operator== (const ColorConfiguration&, const ColorConfiguration&);

      bool
      operator!= (const ColorConfiguration&, const ColorConfiguration&);


      /**
       * @brief Class corresponding to the %XMLLabelConfiguration schema type.
       *
       * @nosubgrouping
       */
      class XMLLabelConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Label_Alignment
         *
         * @brief Accessor and modifier functions for the %Label_Alignment
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::Label_Alignment Label_AlignmentType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_AlignmentType, char > Label_AlignmentTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_AlignmentType&
        getLabel_Alignment () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_AlignmentType&
        getLabel_Alignment ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_Alignment (const Label_AlignmentType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabel_Alignment (::std::auto_ptr< Label_AlignmentType > p);

        //@}

        /**
         * @name Label_VerticalPadding
         *
         * @brief Accessor and modifier functions for the %Label_VerticalPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer Label_VerticalPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_VerticalPaddingType, char > Label_VerticalPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_VerticalPaddingType&
        getLabel_VerticalPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_VerticalPaddingType&
        getLabel_VerticalPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_VerticalPadding (const Label_VerticalPaddingType& x);

        //@}

        /**
         * @name Label_HorizontalPadding
         *
         * @brief Accessor and modifier functions for the %Label_HorizontalPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer Label_HorizontalPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_HorizontalPaddingType, char > Label_HorizontalPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_HorizontalPaddingType&
        getLabel_HorizontalPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_HorizontalPaddingType&
        getLabel_HorizontalPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_HorizontalPadding (const Label_HorizontalPaddingType& x);

        //@}

        /**
         * @name Label_Family
         *
         * @brief Accessor and modifier functions for the %Label_Family
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String Label_FamilyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_FamilyType, char > Label_FamilyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_FamilyType&
        getLabel_Family () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_FamilyType&
        getLabel_Family ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_Family (const Label_FamilyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabel_Family (::std::auto_ptr< Label_FamilyType > p);

        //@}

        /**
         * @name Label_Style
         *
         * @brief Accessor and modifier functions for the %Label_Style
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::Label_Style Label_StyleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_StyleType, char > Label_StyleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_StyleType&
        getLabel_Style () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_StyleType&
        getLabel_Style ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_Style (const Label_StyleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabel_Style (::std::auto_ptr< Label_StyleType > p);

        //@}

        /**
         * @name Label_Weight
         *
         * @brief Accessor and modifier functions for the %Label_Weight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::Label_Weight Label_WeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_WeightType, char > Label_WeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_WeightType&
        getLabel_Weight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_WeightType&
        getLabel_Weight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_Weight (const Label_WeightType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabel_Weight (::std::auto_ptr< Label_WeightType > p);

        //@}

        /**
         * @name Label_Size
         *
         * @brief Accessor and modifier functions for the %Label_Size
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer Label_SizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Label_SizeType, char > Label_SizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Label_SizeType&
        getLabel_Size () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Label_SizeType&
        getLabel_Size ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabel_Size (const Label_SizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        XMLLabelConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        XMLLabelConfiguration (const Label_AlignmentType&,
                               const Label_VerticalPaddingType&,
                               const Label_HorizontalPaddingType&,
                               const Label_FamilyType&,
                               const Label_StyleType&,
                               const Label_WeightType&,
                               const Label_SizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        XMLLabelConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        XMLLabelConfiguration (const XMLLabelConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual XMLLabelConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~XMLLabelConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< Label_AlignmentType > Label_Alignment_;
        ::xsd::cxx::tree::one< Label_VerticalPaddingType > Label_VerticalPadding_;
        ::xsd::cxx::tree::one< Label_HorizontalPaddingType > Label_HorizontalPadding_;
        ::xsd::cxx::tree::one< Label_FamilyType > Label_Family_;
        ::xsd::cxx::tree::one< Label_StyleType > Label_Style_;
        ::xsd::cxx::tree::one< Label_WeightType > Label_Weight_;
        ::xsd::cxx::tree::one< Label_SizeType > Label_Size_;

        //@endcond
      };

      bool
      operator== (const XMLLabelConfiguration&, const XMLLabelConfiguration&);

      bool
      operator!= (const XMLLabelConfiguration&, const XMLLabelConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %IncomePassphraseEnum
       * schema type.
       */
      class IncomePassphraseEnum: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_TOKEN,
          CONFIGURATION_SCREEN
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        IncomePassphraseEnum ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        IncomePassphraseEnum (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        IncomePassphraseEnum (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        IncomePassphraseEnum (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        IncomePassphraseEnum (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncomePassphraseEnum (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncomePassphraseEnum (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncomePassphraseEnum (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IncomePassphraseEnum (const IncomePassphraseEnum& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IncomePassphraseEnum*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        IncomePassphraseEnum&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_IncomePassphraseEnum_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_IncomePassphraseEnum_convert () const;

        public:
        static const char* const _xsd_IncomePassphraseEnum_literals_[2];
        static const Value _xsd_IncomePassphraseEnum_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %ViewButtonConfiguration
       * schema type.
       */
      class ViewButtonConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_EXPAND_BUTTONS,
          CONFIGURATION_SEPARATE_BUTTONS
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        ViewButtonConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        ViewButtonConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        ViewButtonConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        ViewButtonConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        ViewButtonConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ViewButtonConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ViewButtonConfiguration (const ::xercesc::DOMAttr& a,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ViewButtonConfiguration (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ViewButtonConfiguration (const ViewButtonConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ViewButtonConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        ViewButtonConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_ViewButtonConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_ViewButtonConfiguration_convert () const;

        public:
        static const char* const _xsd_ViewButtonConfiguration_literals_[2];
        static const Value _xsd_ViewButtonConfiguration_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %ViewTableConfiguration
       * schema type.
       */
      class ViewTableConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_COLUMN_FIXED,
          CONFIGURATION_COLUMN_CENTER
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        ViewTableConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        ViewTableConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        ViewTableConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        ViewTableConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        ViewTableConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ViewTableConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ViewTableConfiguration (const ::xercesc::DOMAttr& a,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ViewTableConfiguration (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ViewTableConfiguration (const ViewTableConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ViewTableConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        ViewTableConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_ViewTableConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_ViewTableConfiguration_convert () const;

        public:
        static const char* const _xsd_ViewTableConfiguration_literals_[2];
        static const Value _xsd_ViewTableConfiguration_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ExpandButtonConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ExpandButtonConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Spacing
         *
         * @brief Accessor and modifier functions for the %Spacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SpacingType, char > SpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SpacingType&
        getSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SpacingType&
        getSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSpacing (const SpacingType& x);

        //@}

        /**
         * @name FontSize
         *
         * @brief Accessor and modifier functions for the %FontSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FontSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontSizeType, char > FontSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontSizeType&
        getFontSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontSizeType&
        getFontSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontSize (const FontSizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ExpandButtonConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ExpandButtonConfiguration (const SpacingType&,
                                   const FontSizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ExpandButtonConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ExpandButtonConfiguration (const ExpandButtonConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ExpandButtonConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ExpandButtonConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SpacingType > Spacing_;
        ::xsd::cxx::tree::one< FontSizeType > FontSize_;

        //@endcond
      };

      bool
      operator== (const ExpandButtonConfiguration&, const ExpandButtonConfiguration&);

      bool
      operator!= (const ExpandButtonConfiguration&, const ExpandButtonConfiguration&);


      /**
       * @brief Class corresponding to the %BallotOptionSeparateButtonConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BallotOptionSeparateButtonConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ClearButtonWidth
         *
         * @brief Accessor and modifier functions for the %ClearButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ClearButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ClearButtonWidthType, char > ClearButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ClearButtonWidthType&
        getClearButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ClearButtonWidthType&
        getClearButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setClearButtonWidth (const ClearButtonWidthType& x);

        //@}

        /**
         * @name AcceptButtonWidth
         *
         * @brief Accessor and modifier functions for the %AcceptButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger AcceptButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AcceptButtonWidthType, char > AcceptButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AcceptButtonWidthType&
        getAcceptButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AcceptButtonWidthType&
        getAcceptButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAcceptButtonWidth (const AcceptButtonWidthType& x);

        //@}

        /**
         * @name BackButtonWidth
         *
         * @brief Accessor and modifier functions for the %BackButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BackButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BackButtonWidthType, char > BackButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BackButtonWidthType&
        getBackButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BackButtonWidthType&
        getBackButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBackButtonWidth (const BackButtonWidthType& x);

        //@}

        /**
         * @name FontSize
         *
         * @brief Accessor and modifier functions for the %FontSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FontSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontSizeType, char > FontSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontSizeType&
        getFontSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontSizeType&
        getFontSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontSize (const FontSizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BallotOptionSeparateButtonConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BallotOptionSeparateButtonConfiguration (const ClearButtonWidthType&,
                                                 const AcceptButtonWidthType&,
                                                 const BackButtonWidthType&,
                                                 const FontSizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BallotOptionSeparateButtonConfiguration (const ::xercesc::DOMElement& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BallotOptionSeparateButtonConfiguration (const BallotOptionSeparateButtonConfiguration& x,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BallotOptionSeparateButtonConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BallotOptionSeparateButtonConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ClearButtonWidthType > ClearButtonWidth_;
        ::xsd::cxx::tree::one< AcceptButtonWidthType > AcceptButtonWidth_;
        ::xsd::cxx::tree::one< BackButtonWidthType > BackButtonWidth_;
        ::xsd::cxx::tree::one< FontSizeType > FontSize_;

        //@endcond
      };

      bool
      operator== (const BallotOptionSeparateButtonConfiguration&, const BallotOptionSeparateButtonConfiguration&);

      bool
      operator!= (const BallotOptionSeparateButtonConfiguration&, const BallotOptionSeparateButtonConfiguration&);


      /**
       * @brief Class corresponding to the %PartySeparateButtonConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PartySeparateButtonConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NullButtonWidth
         *
         * @brief Accessor and modifier functions for the %NullButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger NullButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NullButtonWidthType, char > NullButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NullButtonWidthType&
        getNullButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NullButtonWidthType&
        getNullButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNullButtonWidth (const NullButtonWidthType& x);

        //@}

        /**
         * @name BackButtonWidth
         *
         * @brief Accessor and modifier functions for the %BackButtonWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BackButtonWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BackButtonWidthType, char > BackButtonWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BackButtonWidthType&
        getBackButtonWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BackButtonWidthType&
        getBackButtonWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBackButtonWidth (const BackButtonWidthType& x);

        //@}

        /**
         * @name FontSize
         *
         * @brief Accessor and modifier functions for the %FontSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FontSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontSizeType, char > FontSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontSizeType&
        getFontSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontSizeType&
        getFontSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontSize (const FontSizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PartySeparateButtonConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PartySeparateButtonConfiguration (const NullButtonWidthType&,
                                          const BackButtonWidthType&,
                                          const FontSizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PartySeparateButtonConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PartySeparateButtonConfiguration (const PartySeparateButtonConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PartySeparateButtonConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PartySeparateButtonConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NullButtonWidthType > NullButtonWidth_;
        ::xsd::cxx::tree::one< BackButtonWidthType > BackButtonWidth_;
        ::xsd::cxx::tree::one< FontSizeType > FontSize_;

        //@endcond
      };

      bool
      operator== (const PartySeparateButtonConfiguration&, const PartySeparateButtonConfiguration&);

      bool
      operator!= (const PartySeparateButtonConfiguration&, const PartySeparateButtonConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %CloseElectionSteps
       * schema type.
       */
      class CloseElectionSteps: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_CLOSECONFIRMATION,
          CONFIGURATION_REQUESTIDCARD,
          CONFIGURATION_GENERATEALLRESULT,
          CONFIGURATION_SIGNTRANSMISSIONPACKAGE,
          CONFIGURATION_SIGNELECTIONRESOURCE,
          CONFIGURATION_CLOSEELECTION,
          CONFIGURATION_PRINTPV,
          CONFIGURATION_GENERATEPVREPORT,
          CONFIGURATION_REGISTERCLOSENOTE,
          CONFIGURATION_STATISTICS,
          CONFIGURATION_VOTEDURATION
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        CloseElectionSteps ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        CloseElectionSteps (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        CloseElectionSteps (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        CloseElectionSteps (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        CloseElectionSteps (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseElectionSteps (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseElectionSteps (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseElectionSteps (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CloseElectionSteps (const CloseElectionSteps& x,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CloseElectionSteps*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        CloseElectionSteps&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_CloseElectionSteps_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_CloseElectionSteps_convert () const;

        public:
        static const char* const _xsd_CloseElectionSteps_literals_[11];
        static const Value _xsd_CloseElectionSteps_indexes_[11];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %ChallengePasswordSourceEnum
       * schema type.
       */
      class ChallengePasswordSourceEnum: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_PRESIDENTPASSPHRASE,
          CONFIGURATION_ROLE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        ChallengePasswordSourceEnum ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        ChallengePasswordSourceEnum (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        ChallengePasswordSourceEnum (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        ChallengePasswordSourceEnum (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        ChallengePasswordSourceEnum (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ChallengePasswordSourceEnum (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ChallengePasswordSourceEnum (const ::xercesc::DOMAttr& a,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ChallengePasswordSourceEnum (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ChallengePasswordSourceEnum (const ChallengePasswordSourceEnum& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ChallengePasswordSourceEnum*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        ChallengePasswordSourceEnum&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_ChallengePasswordSourceEnum_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_ChallengePasswordSourceEnum_convert () const;

        public:
        static const char* const _xsd_ChallengePasswordSourceEnum_literals_[2];
        static const Value _xsd_ChallengePasswordSourceEnum_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ActivatedCardStatisticsConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ActivatedCardStatisticsConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name HideOfficial
         *
         * @brief Accessor and modifier functions for the %HideOfficial
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideOfficialType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideOfficialType, char > HideOfficialTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideOfficialType&
        getHideOfficial () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideOfficialType&
        getHideOfficial ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideOfficial (const HideOfficialType& x);

        //@}

        /**
         * @name HideDemo
         *
         * @brief Accessor and modifier functions for the %HideDemo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideDemoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideDemoType, char > HideDemoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideDemoType&
        getHideDemo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideDemoType&
        getHideDemo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideDemo (const HideDemoType& x);

        //@}

        /**
         * @name HideRecovery
         *
         * @brief Accessor and modifier functions for the %HideRecovery
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideRecoveryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideRecoveryType, char > HideRecoveryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideRecoveryType&
        getHideRecovery () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideRecoveryType&
        getHideRecovery ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideRecovery (const HideRecoveryType& x);

        //@}

        /**
         * @name HideAudio
         *
         * @brief Accessor and modifier functions for the %HideAudio
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideAudioType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideAudioType, char > HideAudioTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideAudioType&
        getHideAudio () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideAudioType&
        getHideAudio ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideAudio (const HideAudioType& x);

        //@}

        /**
         * @name HideNonAudio
         *
         * @brief Accessor and modifier functions for the %HideNonAudio
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideNonAudioType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideNonAudioType, char > HideNonAudioTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideNonAudioType&
        getHideNonAudio () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideNonAudioType&
        getHideNonAudio ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideNonAudio (const HideNonAudioType& x);

        //@}

        /**
         * @name HideCA
         *
         * @brief Accessor and modifier functions for the %HideCA
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean HideCAType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HideCAType, char > HideCATraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HideCAType&
        getHideCA () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HideCAType&
        getHideCA ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHideCA (const HideCAType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ActivatedCardStatisticsConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ActivatedCardStatisticsConfiguration (const HideOfficialType&,
                                              const HideDemoType&,
                                              const HideRecoveryType&,
                                              const HideAudioType&,
                                              const HideNonAudioType&,
                                              const HideCAType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ActivatedCardStatisticsConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ActivatedCardStatisticsConfiguration (const ActivatedCardStatisticsConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ActivatedCardStatisticsConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ActivatedCardStatisticsConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< HideOfficialType > HideOfficial_;
        ::xsd::cxx::tree::one< HideDemoType > HideDemo_;
        ::xsd::cxx::tree::one< HideRecoveryType > HideRecovery_;
        ::xsd::cxx::tree::one< HideAudioType > HideAudio_;
        ::xsd::cxx::tree::one< HideNonAudioType > HideNonAudio_;
        ::xsd::cxx::tree::one< HideCAType > HideCA_;

        //@endcond
      };

      bool
      operator== (const ActivatedCardStatisticsConfiguration&, const ActivatedCardStatisticsConfiguration&);

      bool
      operator!= (const ActivatedCardStatisticsConfiguration&, const ActivatedCardStatisticsConfiguration&);


      /**
       * @brief Class corresponding to the %VMInstallationWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VMInstallationWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Type
         *
         * @brief Accessor and modifier functions for the %Type
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VMInstallationWidgetTypeConfiguration TypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TypeType&
        getType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TypeType&
        getType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setType (const TypeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setType (::std::auto_ptr< TypeType > p);

        //@}

        /**
         * @name ButtonsWidth
         *
         * @brief Accessor and modifier functions for the %ButtonsWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonsWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsWidthType, char > ButtonsWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsWidthType&
        getButtonsWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsWidthType&
        getButtonsWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsWidth (const ButtonsWidthType& x);

        //@}

        /**
         * @name ButtonsHeight
         *
         * @brief Accessor and modifier functions for the %ButtonsHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonsHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsHeightType, char > ButtonsHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsHeightType&
        getButtonsHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsHeightType&
        getButtonsHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsHeight (const ButtonsHeightType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VMInstallationWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VMInstallationWidgetConfiguration (const TypeType&,
                                           const ButtonsWidthType&,
                                           const ButtonsHeightType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VMInstallationWidgetConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VMInstallationWidgetConfiguration (const VMInstallationWidgetConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VMInstallationWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VMInstallationWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TypeType > Type_;
        ::xsd::cxx::tree::one< ButtonsWidthType > ButtonsWidth_;
        ::xsd::cxx::tree::one< ButtonsHeightType > ButtonsHeight_;

        //@endcond
      };

      bool
      operator== (const VMInstallationWidgetConfiguration&, const VMInstallationWidgetConfiguration&);

      bool
      operator!= (const VMInstallationWidgetConfiguration&, const VMInstallationWidgetConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %VMInstallationWidgetTypeConfiguration
       * schema type.
       */
      class VMInstallationWidgetTypeConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_ONLYKEYWORDXML,
          CONFIGURATION_ONLYTOKENXML,
          CONFIGURATION_KEYWORDANDTOKENXML
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        VMInstallationWidgetTypeConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        VMInstallationWidgetTypeConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        VMInstallationWidgetTypeConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        VMInstallationWidgetTypeConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        VMInstallationWidgetTypeConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VMInstallationWidgetTypeConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VMInstallationWidgetTypeConfiguration (const ::xercesc::DOMAttr& a,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VMInstallationWidgetTypeConfiguration (const ::std::string& s,
                                               const ::xercesc::DOMElement* e,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VMInstallationWidgetTypeConfiguration (const VMInstallationWidgetTypeConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VMInstallationWidgetTypeConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        VMInstallationWidgetTypeConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_VMInstallationWidgetTypeConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_VMInstallationWidgetTypeConfiguration_convert () const;

        public:
        static const char* const _xsd_VMInstallationWidgetTypeConfiguration_literals_[3];
        static const Value _xsd_VMInstallationWidgetTypeConfiguration_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %ShowBeidEntryTypeConfiguration
       * schema type.
       */
      class ShowBeidEntryTypeConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_SHOWWITHSECURITY,
          CONFIGURATION_NOSHOW,
          CONFIGURATION_SHOW
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        ShowBeidEntryTypeConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        ShowBeidEntryTypeConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        ShowBeidEntryTypeConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        ShowBeidEntryTypeConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        ShowBeidEntryTypeConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ShowBeidEntryTypeConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ShowBeidEntryTypeConfiguration (const ::xercesc::DOMAttr& a,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ShowBeidEntryTypeConfiguration (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ShowBeidEntryTypeConfiguration (const ShowBeidEntryTypeConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ShowBeidEntryTypeConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        ShowBeidEntryTypeConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_ShowBeidEntryTypeConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_ShowBeidEntryTypeConfiguration_convert () const;

        public:
        static const char* const _xsd_ShowBeidEntryTypeConfiguration_literals_[3];
        static const Value _xsd_ShowBeidEntryTypeConfiguration_indexes_[3];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ElectionBlockStatusList schema type.
       *
       * @nosubgrouping
       */
      class ElectionBlockStatusList: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ElectionStatus
         *
         * @brief Accessor and modifier functions for the %ElectionStatus
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ProcessStatus ElectionStatusType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ElectionStatusType > ElectionStatusSequence;

        /**
         * @brief Element iterator type.
         */
        typedef ElectionStatusSequence::iterator ElectionStatusIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ElectionStatusSequence::const_iterator ElectionStatusConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ElectionStatusType, char > ElectionStatusTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ElectionStatusSequence&
        getElectionStatus () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ElectionStatusSequence&
        getElectionStatus ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setElectionStatus (const ElectionStatusSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ElectionBlockStatusList ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ElectionBlockStatusList (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ElectionBlockStatusList (const ElectionBlockStatusList& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ElectionBlockStatusList*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ElectionBlockStatusList ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ElectionStatusSequence ElectionStatus_;

        //@endcond
      };

      bool
      operator== (const ElectionBlockStatusList&, const ElectionBlockStatusList&);

      bool
      operator!= (const ElectionBlockStatusList&, const ElectionBlockStatusList&);


      /**
       * @brief Class corresponding to the %HelpConfiguration schema type.
       *
       * @nosubgrouping
       */
      class HelpConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ImageHelp
         *
         * @brief Accessor and modifier functions for the %ImageHelp
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ImageHelpType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ImageHelpType, char > ImageHelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ImageHelpType&
        getImageHelp () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ImageHelpType&
        getImageHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setImageHelp (const ImageHelpType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setImageHelp (::std::auto_ptr< ImageHelpType > p);

        //@}

        /**
         * @name PdfHelp
         *
         * @brief Accessor and modifier functions for the %PdfHelp
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String PdfHelpType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PdfHelpType, char > PdfHelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PdfHelpType&
        getPdfHelp () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PdfHelpType&
        getPdfHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPdfHelp (const PdfHelpType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPdfHelp (::std::auto_ptr< PdfHelpType > p);

        //@}

        /**
         * @name TitleKey
         *
         * @brief Accessor and modifier functions for the %TitleKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String TitleKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleKeyType, char > TitleKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleKeyType&
        getTitleKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleKeyType&
        getTitleKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleKey (const TitleKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleKey (::std::auto_ptr< TitleKeyType > p);

        //@}

        /**
         * @name UseHelp
         *
         * @brief Accessor and modifier functions for the %UseHelp
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseHelpType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseHelpType, char > UseHelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseHelpType&
        getUseHelp () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseHelpType&
        getUseHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseHelp (const UseHelpType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        HelpConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        HelpConfiguration (const ImageHelpType&,
                           const PdfHelpType&,
                           const TitleKeyType&,
                           const UseHelpType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        HelpConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        HelpConfiguration (const HelpConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual HelpConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~HelpConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ImageHelpType > ImageHelp_;
        ::xsd::cxx::tree::one< PdfHelpType > PdfHelp_;
        ::xsd::cxx::tree::one< TitleKeyType > TitleKey_;
        ::xsd::cxx::tree::one< UseHelpType > UseHelp_;

        //@endcond
      };

      bool
      operator== (const HelpConfiguration&, const HelpConfiguration&);

      bool
      operator!= (const HelpConfiguration&, const HelpConfiguration&);


      /**
       * @brief Class corresponding to the %WizardStateTimeLineConfiguration schema type.
       *
       * @nosubgrouping
       */
      class WizardStateTimeLineConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NameKey
         *
         * @brief Accessor and modifier functions for the %NameKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String NameKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameKeyType, char > NameKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NameKeyType&
        getNameKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NameKeyType&
        getNameKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNameKey (const NameKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNameKey (::std::auto_ptr< NameKeyType > p);

        //@}

        /**
         * @name DescriptionKey
         *
         * @brief Accessor and modifier functions for the %DescriptionKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String DescriptionKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DescriptionKeyType, char > DescriptionKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DescriptionKeyType&
        getDescriptionKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DescriptionKeyType&
        getDescriptionKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDescriptionKey (const DescriptionKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDescriptionKey (::std::auto_ptr< DescriptionKeyType > p);

        //@}

        /**
         * @name RelativeImagePath
         *
         * @brief Accessor and modifier functions for the %RelativeImagePath
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String RelativeImagePathType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RelativeImagePathType, char > RelativeImagePathTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RelativeImagePathType&
        getRelativeImagePath () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RelativeImagePathType&
        getRelativeImagePath ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRelativeImagePath (const RelativeImagePathType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRelativeImagePath (::std::auto_ptr< RelativeImagePathType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        WizardStateTimeLineConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        WizardStateTimeLineConfiguration (const NameKeyType&,
                                          const DescriptionKeyType&,
                                          const RelativeImagePathType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        WizardStateTimeLineConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        WizardStateTimeLineConfiguration (const WizardStateTimeLineConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual WizardStateTimeLineConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~WizardStateTimeLineConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NameKeyType > NameKey_;
        ::xsd::cxx::tree::one< DescriptionKeyType > DescriptionKey_;
        ::xsd::cxx::tree::one< RelativeImagePathType > RelativeImagePath_;

        //@endcond
      };

      bool
      operator== (const WizardStateTimeLineConfiguration&, const WizardStateTimeLineConfiguration&);

      bool
      operator!= (const WizardStateTimeLineConfiguration&, const WizardStateTimeLineConfiguration&);


      /**
       * @brief Class corresponding to the %WizardStateToolboxConfiguration schema type.
       *
       * @nosubgrouping
       */
      class WizardStateToolboxConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ToolboxElementWidth
         *
         * @brief Accessor and modifier functions for the %ToolboxElementWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ToolboxElementWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ToolboxElementWidthType, char > ToolboxElementWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ToolboxElementWidthType&
        getToolboxElementWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ToolboxElementWidthType&
        getToolboxElementWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setToolboxElementWidth (const ToolboxElementWidthType& x);

        //@}

        /**
         * @name ToolboxElementHeight
         *
         * @brief Accessor and modifier functions for the %ToolboxElementHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ToolboxElementHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ToolboxElementHeightType, char > ToolboxElementHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ToolboxElementHeightType&
        getToolboxElementHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ToolboxElementHeightType&
        getToolboxElementHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setToolboxElementHeight (const ToolboxElementHeightType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        WizardStateToolboxConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        WizardStateToolboxConfiguration (const ToolboxElementWidthType&,
                                         const ToolboxElementHeightType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        WizardStateToolboxConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        WizardStateToolboxConfiguration (const WizardStateToolboxConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual WizardStateToolboxConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~WizardStateToolboxConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ToolboxElementWidthType > ToolboxElementWidth_;
        ::xsd::cxx::tree::one< ToolboxElementHeightType > ToolboxElementHeight_;

        //@endcond
      };

      bool
      operator== (const WizardStateToolboxConfiguration&, const WizardStateToolboxConfiguration&);

      bool
      operator!= (const WizardStateToolboxConfiguration&, const WizardStateToolboxConfiguration&);


      /**
       * @brief Class corresponding to the %WizardStateHelpConfiguration schema type.
       *
       * @nosubgrouping
       */
      class WizardStateHelpConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TitleKey
         *
         * @brief Accessor and modifier functions for the %TitleKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String TitleKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleKeyType, char > TitleKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleKeyType&
        getTitleKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleKeyType&
        getTitleKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleKey (const TitleKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleKey (::std::auto_ptr< TitleKeyType > p);

        //@}

        /**
         * @name ContentKey
         *
         * @brief Accessor and modifier functions for the %ContentKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ContentKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContentKeyType, char > ContentKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContentKeyType&
        getContentKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContentKeyType&
        getContentKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContentKey (const ContentKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContentKey (::std::auto_ptr< ContentKeyType > p);

        //@}

        /**
         * @name RelativeImagePath
         *
         * @brief Accessor and modifier functions for the %RelativeImagePath
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String RelativeImagePathType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RelativeImagePathType, char > RelativeImagePathTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RelativeImagePathType&
        getRelativeImagePath () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RelativeImagePathType&
        getRelativeImagePath ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRelativeImagePath (const RelativeImagePathType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRelativeImagePath (::std::auto_ptr< RelativeImagePathType > p);

        //@}

        /**
         * @name Help
         *
         * @brief Accessor and modifier functions for the %Help
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::HelpConfiguration HelpType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HelpType, char > HelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HelpType&
        getHelp () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HelpType&
        getHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHelp (const HelpType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHelp (::std::auto_ptr< HelpType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        WizardStateHelpConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        WizardStateHelpConfiguration (const TitleKeyType&,
                                      const ContentKeyType&,
                                      const RelativeImagePathType&,
                                      const HelpType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        WizardStateHelpConfiguration (const TitleKeyType&,
                                      const ContentKeyType&,
                                      const RelativeImagePathType&,
                                      ::std::auto_ptr< HelpType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        WizardStateHelpConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        WizardStateHelpConfiguration (const WizardStateHelpConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual WizardStateHelpConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~WizardStateHelpConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TitleKeyType > TitleKey_;
        ::xsd::cxx::tree::one< ContentKeyType > ContentKey_;
        ::xsd::cxx::tree::one< RelativeImagePathType > RelativeImagePath_;
        ::xsd::cxx::tree::one< HelpType > Help_;

        //@endcond
      };

      bool
      operator== (const WizardStateHelpConfiguration&, const WizardStateHelpConfiguration&);

      bool
      operator!= (const WizardStateHelpConfiguration&, const WizardStateHelpConfiguration&);


      /**
       * @brief Class corresponding to the %FunctionalityWizardStateConfiguration schema type.
       *
       * @nosubgrouping
       */
      class FunctionalityWizardStateConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PrincipalMenuOptions
         *
         * @brief Accessor and modifier functions for the %PrincipalMenuOptions
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOption PrincipalMenuOptionsType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< PrincipalMenuOptionsType > PrincipalMenuOptionsSequence;

        /**
         * @brief Element iterator type.
         */
        typedef PrincipalMenuOptionsSequence::iterator PrincipalMenuOptionsIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef PrincipalMenuOptionsSequence::const_iterator PrincipalMenuOptionsConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrincipalMenuOptionsType, char > PrincipalMenuOptionsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const PrincipalMenuOptionsSequence&
        getPrincipalMenuOptions () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        PrincipalMenuOptionsSequence&
        getPrincipalMenuOptions ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setPrincipalMenuOptions (const PrincipalMenuOptionsSequence& s);

        //@}

        /**
         * @name ToolbarMenuOptions
         *
         * @brief Accessor and modifier functions for the %ToolbarMenuOptions
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOption ToolbarMenuOptionsType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ToolbarMenuOptionsType > ToolbarMenuOptionsSequence;

        /**
         * @brief Element iterator type.
         */
        typedef ToolbarMenuOptionsSequence::iterator ToolbarMenuOptionsIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ToolbarMenuOptionsSequence::const_iterator ToolbarMenuOptionsConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ToolbarMenuOptionsType, char > ToolbarMenuOptionsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ToolbarMenuOptionsSequence&
        getToolbarMenuOptions () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ToolbarMenuOptionsSequence&
        getToolbarMenuOptions ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setToolbarMenuOptions (const ToolbarMenuOptionsSequence& s);

        //@}

        /**
         * @name StateNameKey
         *
         * @brief Accessor and modifier functions for the %StateNameKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String StateNameKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StateNameKeyType, char > StateNameKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StateNameKeyType&
        getStateNameKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StateNameKeyType&
        getStateNameKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStateNameKey (const StateNameKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStateNameKey (::std::auto_ptr< StateNameKeyType > p);

        //@}

        /**
         * @name StateDescriptionKey
         *
         * @brief Accessor and modifier functions for the %StateDescriptionKey
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String StateDescriptionKeyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StateDescriptionKeyType, char > StateDescriptionKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StateDescriptionKeyType&
        getStateDescriptionKey () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StateDescriptionKeyType&
        getStateDescriptionKey ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStateDescriptionKey (const StateDescriptionKeyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStateDescriptionKey (::std::auto_ptr< StateDescriptionKeyType > p);

        //@}

        /**
         * @name ProcessStatus
         *
         * @brief Accessor and modifier functions for the %ProcessStatus
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ProcessStatus ProcessStatusType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ProcessStatusType, char > ProcessStatusTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ProcessStatusType&
        getProcessStatus () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ProcessStatusType&
        getProcessStatus ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setProcessStatus (const ProcessStatusType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setProcessStatus (::std::auto_ptr< ProcessStatusType > p);

        //@}

        /**
         * @name StateHelp
         *
         * @brief Accessor and modifier functions for the %StateHelp
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::WizardStateHelpConfiguration StateHelpType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StateHelpType, char > StateHelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StateHelpType&
        getStateHelp () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StateHelpType&
        getStateHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStateHelp (const StateHelpType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStateHelp (::std::auto_ptr< StateHelpType > p);

        //@}

        /**
         * @name TimeLineConfiguration
         *
         * @brief Accessor and modifier functions for the %TimeLineConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::WizardStateTimeLineConfiguration TimeLineConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeLineConfigurationType, char > TimeLineConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeLineConfigurationType&
        getTimeLineConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeLineConfigurationType&
        getTimeLineConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeLineConfiguration (const TimeLineConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTimeLineConfiguration (::std::auto_ptr< TimeLineConfigurationType > p);

        //@}

        /**
         * @name ToolboxConfiguration
         *
         * @brief Accessor and modifier functions for the %ToolboxConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::WizardStateToolboxConfiguration ToolboxConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ToolboxConfigurationType, char > ToolboxConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ToolboxConfigurationType&
        getToolboxConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ToolboxConfigurationType&
        getToolboxConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setToolboxConfiguration (const ToolboxConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setToolboxConfiguration (::std::auto_ptr< ToolboxConfigurationType > p);

        //@}

        /**
         * @name ButtonsLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonsLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ButtonsLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsLabelConfigurationType, char > ButtonsLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsLabelConfigurationType&
        getButtonsLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsLabelConfigurationType&
        getButtonsLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsLabelConfiguration (const ButtonsLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonsLabelConfiguration (::std::auto_ptr< ButtonsLabelConfigurationType > p);

        //@}

        /**
         * @name TitleHelpLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %TitleHelpLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitleHelpLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleHelpLabelConfigurationType, char > TitleHelpLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleHelpLabelConfigurationType&
        getTitleHelpLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleHelpLabelConfigurationType&
        getTitleHelpLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleHelpLabelConfiguration (const TitleHelpLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleHelpLabelConfiguration (::std::auto_ptr< TitleHelpLabelConfigurationType > p);

        //@}

        /**
         * @name HelpLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %HelpLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration HelpLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HelpLabelConfigurationType, char > HelpLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HelpLabelConfigurationType&
        getHelpLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HelpLabelConfigurationType&
        getHelpLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHelpLabelConfiguration (const HelpLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHelpLabelConfiguration (::std::auto_ptr< HelpLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        FunctionalityWizardStateConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FunctionalityWizardStateConfiguration (const StateNameKeyType&,
                                               const StateDescriptionKeyType&,
                                               const ProcessStatusType&,
                                               const StateHelpType&,
                                               const TimeLineConfigurationType&,
                                               const ToolboxConfigurationType&,
                                               const ButtonsLabelConfigurationType&,
                                               const TitleHelpLabelConfigurationType&,
                                               const HelpLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        FunctionalityWizardStateConfiguration (const StateNameKeyType&,
                                               const StateDescriptionKeyType&,
                                               const ProcessStatusType&,
                                               ::std::auto_ptr< StateHelpType >&,
                                               ::std::auto_ptr< TimeLineConfigurationType >&,
                                               ::std::auto_ptr< ToolboxConfigurationType >&,
                                               ::std::auto_ptr< ButtonsLabelConfigurationType >&,
                                               ::std::auto_ptr< TitleHelpLabelConfigurationType >&,
                                               ::std::auto_ptr< HelpLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FunctionalityWizardStateConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FunctionalityWizardStateConfiguration (const FunctionalityWizardStateConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FunctionalityWizardStateConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FunctionalityWizardStateConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        PrincipalMenuOptionsSequence PrincipalMenuOptions_;
        ToolbarMenuOptionsSequence ToolbarMenuOptions_;
        ::xsd::cxx::tree::one< StateNameKeyType > StateNameKey_;
        ::xsd::cxx::tree::one< StateDescriptionKeyType > StateDescriptionKey_;
        ::xsd::cxx::tree::one< ProcessStatusType > ProcessStatus_;
        ::xsd::cxx::tree::one< StateHelpType > StateHelp_;
        ::xsd::cxx::tree::one< TimeLineConfigurationType > TimeLineConfiguration_;
        ::xsd::cxx::tree::one< ToolboxConfigurationType > ToolboxConfiguration_;
        ::xsd::cxx::tree::one< ButtonsLabelConfigurationType > ButtonsLabelConfiguration_;
        ::xsd::cxx::tree::one< TitleHelpLabelConfigurationType > TitleHelpLabelConfiguration_;
        ::xsd::cxx::tree::one< HelpLabelConfigurationType > HelpLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const FunctionalityWizardStateConfiguration&, const FunctionalityWizardStateConfiguration&);

      bool
      operator!= (const FunctionalityWizardStateConfiguration&, const FunctionalityWizardStateConfiguration&);


      /**
       * @brief Class corresponding to the %FunctionalityWizardFlowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class FunctionalityWizardFlowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name WizardStatesConfiguration
         *
         * @brief Accessor and modifier functions for the %WizardStatesConfiguration
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FunctionalityWizardStateConfiguration WizardStatesConfigurationType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< WizardStatesConfigurationType > WizardStatesConfigurationSequence;

        /**
         * @brief Element iterator type.
         */
        typedef WizardStatesConfigurationSequence::iterator WizardStatesConfigurationIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef WizardStatesConfigurationSequence::const_iterator WizardStatesConfigurationConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WizardStatesConfigurationType, char > WizardStatesConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const WizardStatesConfigurationSequence&
        getWizardStatesConfiguration () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        WizardStatesConfigurationSequence&
        getWizardStatesConfiguration ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setWizardStatesConfiguration (const WizardStatesConfigurationSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FunctionalityWizardFlowConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FunctionalityWizardFlowConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FunctionalityWizardFlowConfiguration (const FunctionalityWizardFlowConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FunctionalityWizardFlowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FunctionalityWizardFlowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        WizardStatesConfigurationSequence WizardStatesConfiguration_;

        //@endcond
      };

      bool
      operator== (const FunctionalityWizardFlowConfiguration&, const FunctionalityWizardFlowConfiguration&);

      bool
      operator!= (const FunctionalityWizardFlowConfiguration&, const FunctionalityWizardFlowConfiguration&);


      /**
       * @brief Class corresponding to the %NecessaryDevicesConfiguration schema type.
       *
       * @nosubgrouping
       */
      class NecessaryDevicesConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name DeviceConfiguration
         *
         * @brief Accessor and modifier functions for the %DeviceConfiguration
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DeviceConfiguration DeviceConfigurationType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< DeviceConfigurationType > DeviceConfigurationSequence;

        /**
         * @brief Element iterator type.
         */
        typedef DeviceConfigurationSequence::iterator DeviceConfigurationIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef DeviceConfigurationSequence::const_iterator DeviceConfigurationConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DeviceConfigurationType, char > DeviceConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const DeviceConfigurationSequence&
        getDeviceConfiguration () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        DeviceConfigurationSequence&
        getDeviceConfiguration ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setDeviceConfiguration (const DeviceConfigurationSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        NecessaryDevicesConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        NecessaryDevicesConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        NecessaryDevicesConfiguration (const NecessaryDevicesConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual NecessaryDevicesConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~NecessaryDevicesConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        DeviceConfigurationSequence DeviceConfiguration_;

        //@endcond
      };

      bool
      operator== (const NecessaryDevicesConfiguration&, const NecessaryDevicesConfiguration&);

      bool
      operator!= (const NecessaryDevicesConfiguration&, const NecessaryDevicesConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %DeviceConfiguration
       * schema type.
       */
      class DeviceConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_BARCODE,
          CONFIGURATION_SMARTCARD,
          CONFIGURATION_PRINTER
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        DeviceConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        DeviceConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        DeviceConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        DeviceConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        DeviceConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DeviceConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DeviceConfiguration (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DeviceConfiguration (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DeviceConfiguration (const DeviceConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DeviceConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        DeviceConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_DeviceConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_DeviceConfiguration_convert () const;

        public:
        static const char* const _xsd_DeviceConfiguration_literals_[3];
        static const Value _xsd_DeviceConfiguration_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %MemoryBlock
       * schema type.
       */
      class MemoryBlock: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_BLOCK,
          CONFIGURATION_SUSPEND,
          CONFIGURATION_ALLOW
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        MemoryBlock ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        MemoryBlock (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        MemoryBlock (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        MemoryBlock (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        MemoryBlock (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MemoryBlock (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MemoryBlock (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MemoryBlock (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MemoryBlock (const MemoryBlock& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MemoryBlock*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        MemoryBlock&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_MemoryBlock_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_MemoryBlock_convert () const;

        public:
        static const char* const _xsd_MemoryBlock_literals_[3];
        static const Value _xsd_MemoryBlock_indexes_[3];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %ReferendumConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ReferendumConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name EnableClick
         *
         * @brief Accessor and modifier functions for the %EnableClick
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean EnableClickType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnableClickType, char > EnableClickTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnableClickType&
        getEnableClick () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnableClickType&
        getEnableClick ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnableClick (const EnableClickType& x);

        //@}

        /**
         * @name HeaderLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %HeaderLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration HeaderLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderLabelConfigurationType, char > HeaderLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderLabelConfigurationType&
        getHeaderLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderLabelConfigurationType&
        getHeaderLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderLabelConfiguration (const HeaderLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setHeaderLabelConfiguration (::std::auto_ptr< HeaderLabelConfigurationType > p);

        //@}

        /**
         * @name BottomLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %BottomLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BottomLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomLabelConfigurationType, char > BottomLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomLabelConfigurationType&
        getBottomLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomLabelConfigurationType&
        getBottomLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomLabelConfiguration (const BottomLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBottomLabelConfiguration (::std::auto_ptr< BottomLabelConfigurationType > p);

        //@}

        /**
         * @name QuestionLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %QuestionLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration QuestionLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionLabelConfigurationType, char > QuestionLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionLabelConfigurationType&
        getQuestionLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionLabelConfigurationType&
        getQuestionLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionLabelConfiguration (const QuestionLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQuestionLabelConfiguration (::std::auto_ptr< QuestionLabelConfigurationType > p);

        //@}

        /**
         * @name BallotsLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %BallotsLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BallotsLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotsLabelConfigurationType, char > BallotsLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotsLabelConfigurationType&
        getBallotsLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotsLabelConfigurationType&
        getBallotsLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotsLabelConfiguration (const BallotsLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotsLabelConfiguration (::std::auto_ptr< BallotsLabelConfigurationType > p);

        //@}

        /**
         * @name FrameBottomHeight
         *
         * @brief Accessor and modifier functions for the %FrameBottomHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FrameBottomHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FrameBottomHeightType, char > FrameBottomHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FrameBottomHeightType&
        getFrameBottomHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FrameBottomHeightType&
        getFrameBottomHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFrameBottomHeight (const FrameBottomHeightType& x);

        //@}

        /**
         * @name QuestionWidth
         *
         * @brief Accessor and modifier functions for the %QuestionWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger QuestionWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionWidthType, char > QuestionWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionWidthType&
        getQuestionWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionWidthType&
        getQuestionWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionWidth (const QuestionWidthType& x);

        //@}

        /**
         * @name QuestionHeight
         *
         * @brief Accessor and modifier functions for the %QuestionHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger QuestionHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionHeightType, char > QuestionHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionHeightType&
        getQuestionHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionHeightType&
        getQuestionHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionHeight (const QuestionHeightType& x);

        //@}

        /**
         * @name ButtonsVertical
         *
         * @brief Accessor and modifier functions for the %ButtonsVertical
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ButtonsVerticalType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsVerticalType, char > ButtonsVerticalTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsVerticalType&
        getButtonsVertical () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsVerticalType&
        getButtonsVertical ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsVertical (const ButtonsVerticalType& x);

        //@}

        /**
         * @name BallotBoxTopPadding
         *
         * @brief Accessor and modifier functions for the %BallotBoxTopPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BallotBoxTopPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotBoxTopPaddingType, char > BallotBoxTopPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotBoxTopPaddingType&
        getBallotBoxTopPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotBoxTopPaddingType&
        getBallotBoxTopPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotBoxTopPadding (const BallotBoxTopPaddingType& x);

        //@}

        /**
         * @name BallotBoxLeftPadding
         *
         * @brief Accessor and modifier functions for the %BallotBoxLeftPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BallotBoxLeftPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotBoxLeftPaddingType, char > BallotBoxLeftPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotBoxLeftPaddingType&
        getBallotBoxLeftPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotBoxLeftPaddingType&
        getBallotBoxLeftPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotBoxLeftPadding (const BallotBoxLeftPaddingType& x);

        //@}

        /**
         * @name BallotBoxSpacing
         *
         * @brief Accessor and modifier functions for the %BallotBoxSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BallotBoxSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotBoxSpacingType, char > BallotBoxSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotBoxSpacingType&
        getBallotBoxSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotBoxSpacingType&
        getBallotBoxSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotBoxSpacing (const BallotBoxSpacingType& x);

        //@}

        /**
         * @name BallotWidth
         *
         * @brief Accessor and modifier functions for the %BallotWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BallotWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotWidthType, char > BallotWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotWidthType&
        getBallotWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotWidthType&
        getBallotWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotWidth (const BallotWidthType& x);

        //@}

        /**
         * @name BallotHeight
         *
         * @brief Accessor and modifier functions for the %BallotHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BallotHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotHeightType, char > BallotHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotHeightType&
        getBallotHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotHeightType&
        getBallotHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotHeight (const BallotHeightType& x);

        //@}

        /**
         * @name ShowBackButton
         *
         * @brief Accessor and modifier functions for the %ShowBackButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBackButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBackButtonType, char > ShowBackButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBackButtonType&
        getShowBackButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBackButtonType&
        getShowBackButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBackButton (const ShowBackButtonType& x);

        //@}

        /**
         * @name ShowNullOption
         *
         * @brief Accessor and modifier functions for the %ShowNullOption
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowNullOptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowNullOptionType, char > ShowNullOptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowNullOptionType&
        getShowNullOption () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowNullOptionType&
        getShowNullOption ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowNullOption (const ShowNullOptionType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ReferendumConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ReferendumConfiguration (const EnableClickType&,
                                 const HeaderLabelConfigurationType&,
                                 const BottomLabelConfigurationType&,
                                 const QuestionLabelConfigurationType&,
                                 const BallotsLabelConfigurationType&,
                                 const FrameBottomHeightType&,
                                 const QuestionWidthType&,
                                 const QuestionHeightType&,
                                 const ButtonsVerticalType&,
                                 const BallotBoxTopPaddingType&,
                                 const BallotBoxLeftPaddingType&,
                                 const BallotBoxSpacingType&,
                                 const BallotWidthType&,
                                 const BallotHeightType&,
                                 const ShowBackButtonType&,
                                 const ShowNullOptionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ReferendumConfiguration (const EnableClickType&,
                                 ::std::auto_ptr< HeaderLabelConfigurationType >&,
                                 ::std::auto_ptr< BottomLabelConfigurationType >&,
                                 ::std::auto_ptr< QuestionLabelConfigurationType >&,
                                 ::std::auto_ptr< BallotsLabelConfigurationType >&,
                                 const FrameBottomHeightType&,
                                 const QuestionWidthType&,
                                 const QuestionHeightType&,
                                 const ButtonsVerticalType&,
                                 const BallotBoxTopPaddingType&,
                                 const BallotBoxLeftPaddingType&,
                                 const BallotBoxSpacingType&,
                                 const BallotWidthType&,
                                 const BallotHeightType&,
                                 const ShowBackButtonType&,
                                 const ShowNullOptionType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ReferendumConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ReferendumConfiguration (const ReferendumConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ReferendumConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ReferendumConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EnableClickType > EnableClick_;
        ::xsd::cxx::tree::one< HeaderLabelConfigurationType > HeaderLabelConfiguration_;
        ::xsd::cxx::tree::one< BottomLabelConfigurationType > BottomLabelConfiguration_;
        ::xsd::cxx::tree::one< QuestionLabelConfigurationType > QuestionLabelConfiguration_;
        ::xsd::cxx::tree::one< BallotsLabelConfigurationType > BallotsLabelConfiguration_;
        ::xsd::cxx::tree::one< FrameBottomHeightType > FrameBottomHeight_;
        ::xsd::cxx::tree::one< QuestionWidthType > QuestionWidth_;
        ::xsd::cxx::tree::one< QuestionHeightType > QuestionHeight_;
        ::xsd::cxx::tree::one< ButtonsVerticalType > ButtonsVertical_;
        ::xsd::cxx::tree::one< BallotBoxTopPaddingType > BallotBoxTopPadding_;
        ::xsd::cxx::tree::one< BallotBoxLeftPaddingType > BallotBoxLeftPadding_;
        ::xsd::cxx::tree::one< BallotBoxSpacingType > BallotBoxSpacing_;
        ::xsd::cxx::tree::one< BallotWidthType > BallotWidth_;
        ::xsd::cxx::tree::one< BallotHeightType > BallotHeight_;
        ::xsd::cxx::tree::one< ShowBackButtonType > ShowBackButton_;
        ::xsd::cxx::tree::one< ShowNullOptionType > ShowNullOption_;

        //@endcond
      };

      bool
      operator== (const ReferendumConfiguration&, const ReferendumConfiguration&);

      bool
      operator!= (const ReferendumConfiguration&, const ReferendumConfiguration&);


      /**
       * @brief Class corresponding to the %PollingCardConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PollingCardConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PMInstallationWindow
         *
         * @brief Accessor and modifier functions for the %PMInstallationWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PMInstallationWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PMInstallationWindowType, char > PMInstallationWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PMInstallationWindowType&
        getPMInstallationWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PMInstallationWindowType&
        getPMInstallationWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPMInstallationWindow (const PMInstallationWindowType& x);

        //@}

        /**
         * @name VMInstallationWindow
         *
         * @brief Accessor and modifier functions for the %VMInstallationWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger VMInstallationWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VMInstallationWindowType, char > VMInstallationWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VMInstallationWindowType&
        getVMInstallationWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VMInstallationWindowType&
        getVMInstallationWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVMInstallationWindow (const VMInstallationWindowType& x);

        //@}

        /**
         * @name VotingExperienceWindow
         *
         * @brief Accessor and modifier functions for the %VotingExperienceWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger VotingExperienceWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceWindowType, char > VotingExperienceWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceWindowType&
        getVotingExperienceWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceWindowType&
        getVotingExperienceWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceWindow (const VotingExperienceWindowType& x);

        //@}

        /**
         * @name EndVotingExperienceWindow
         *
         * @brief Accessor and modifier functions for the %EndVotingExperienceWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger EndVotingExperienceWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EndVotingExperienceWindowType, char > EndVotingExperienceWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EndVotingExperienceWindowType&
        getEndVotingExperienceWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EndVotingExperienceWindowType&
        getEndVotingExperienceWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEndVotingExperienceWindow (const EndVotingExperienceWindowType& x);

        //@}

        /**
         * @name AssistedCardGeneratorFunctionality
         *
         * @brief Accessor and modifier functions for the %AssistedCardGeneratorFunctionality
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger AssistedCardGeneratorFunctionalityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AssistedCardGeneratorFunctionalityType, char > AssistedCardGeneratorFunctionalityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AssistedCardGeneratorFunctionalityType&
        getAssistedCardGeneratorFunctionality () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AssistedCardGeneratorFunctionalityType&
        getAssistedCardGeneratorFunctionality ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAssistedCardGeneratorFunctionality (const AssistedCardGeneratorFunctionalityType& x);

        //@}

        /**
         * @name CardGeneratorFunctionality
         *
         * @brief Accessor and modifier functions for the %CardGeneratorFunctionality
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger CardGeneratorFunctionalityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardGeneratorFunctionalityType, char > CardGeneratorFunctionalityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardGeneratorFunctionalityType&
        getCardGeneratorFunctionality () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardGeneratorFunctionalityType&
        getCardGeneratorFunctionality ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardGeneratorFunctionality (const CardGeneratorFunctionalityType& x);

        //@}

        /**
         * @name RecoveryCardGeneratorFunctionality
         *
         * @brief Accessor and modifier functions for the %RecoveryCardGeneratorFunctionality
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger RecoveryCardGeneratorFunctionalityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RecoveryCardGeneratorFunctionalityType, char > RecoveryCardGeneratorFunctionalityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RecoveryCardGeneratorFunctionalityType&
        getRecoveryCardGeneratorFunctionality () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RecoveryCardGeneratorFunctionalityType&
        getRecoveryCardGeneratorFunctionality ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRecoveryCardGeneratorFunctionality (const RecoveryCardGeneratorFunctionalityType& x);

        //@}

        /**
         * @name VoteProcessDemoFunctionality
         *
         * @brief Accessor and modifier functions for the %VoteProcessDemoFunctionality
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger VoteProcessDemoFunctionalityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteProcessDemoFunctionalityType, char > VoteProcessDemoFunctionalityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteProcessDemoFunctionalityType&
        getVoteProcessDemoFunctionality () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteProcessDemoFunctionalityType&
        getVoteProcessDemoFunctionality ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteProcessDemoFunctionality (const VoteProcessDemoFunctionalityType& x);

        //@}

        /**
         * @name BEIDCardWidget
         *
         * @brief Accessor and modifier functions for the %BEIDCardWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger BEIDCardWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BEIDCardWidgetType, char > BEIDCardWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BEIDCardWidgetType&
        getBEIDCardWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BEIDCardWidgetType&
        getBEIDCardWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBEIDCardWidget (const BEIDCardWidgetType& x);

        //@}

        /**
         * @name ActivationStatsWidget
         *
         * @brief Accessor and modifier functions for the %ActivationStatsWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ActivationStatsWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ActivationStatsWidgetType, char > ActivationStatsWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ActivationStatsWidgetType&
        getActivationStatsWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ActivationStatsWidgetType&
        getActivationStatsWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setActivationStatsWidget (const ActivationStatsWidgetType& x);

        //@}

        /**
         * @name WaitingCardWidget
         *
         * @brief Accessor and modifier functions for the %WaitingCardWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger WaitingCardWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WaitingCardWidgetType, char > WaitingCardWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WaitingCardWidgetType&
        getWaitingCardWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WaitingCardWidgetType&
        getWaitingCardWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWaitingCardWidget (const WaitingCardWidgetType& x);

        //@}

        /**
         * @name SmartCardReaderDiagnosisWidget
         *
         * @brief Accessor and modifier functions for the %SmartCardReaderDiagnosisWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SmartCardReaderDiagnosisWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SmartCardReaderDiagnosisWidgetType, char > SmartCardReaderDiagnosisWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SmartCardReaderDiagnosisWidgetType&
        getSmartCardReaderDiagnosisWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SmartCardReaderDiagnosisWidgetType&
        getSmartCardReaderDiagnosisWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSmartCardReaderDiagnosisWidget (const SmartCardReaderDiagnosisWidgetType& x);

        //@}

        /**
         * @name VotingMachineInstallationWidgetInsert
         *
         * @brief Accessor and modifier functions for the %VotingMachineInstallationWidgetInsert
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger VotingMachineInstallationWidgetInsertType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingMachineInstallationWidgetInsertType, char > VotingMachineInstallationWidgetInsertTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingMachineInstallationWidgetInsertType&
        getVotingMachineInstallationWidgetInsert () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingMachineInstallationWidgetInsertType&
        getVotingMachineInstallationWidgetInsert ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingMachineInstallationWidgetInsert (const VotingMachineInstallationWidgetInsertType& x);

        //@}

        /**
         * @name VotingMachineInstallationWidgetExtract
         *
         * @brief Accessor and modifier functions for the %VotingMachineInstallationWidgetExtract
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger VotingMachineInstallationWidgetExtractType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingMachineInstallationWidgetExtractType, char > VotingMachineInstallationWidgetExtractTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingMachineInstallationWidgetExtractType&
        getVotingMachineInstallationWidgetExtract () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingMachineInstallationWidgetExtractType&
        getVotingMachineInstallationWidgetExtract ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingMachineInstallationWidgetExtract (const VotingMachineInstallationWidgetExtractType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PollingCardConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PollingCardConfiguration (const PMInstallationWindowType&,
                                  const VMInstallationWindowType&,
                                  const VotingExperienceWindowType&,
                                  const EndVotingExperienceWindowType&,
                                  const AssistedCardGeneratorFunctionalityType&,
                                  const CardGeneratorFunctionalityType&,
                                  const RecoveryCardGeneratorFunctionalityType&,
                                  const VoteProcessDemoFunctionalityType&,
                                  const BEIDCardWidgetType&,
                                  const ActivationStatsWidgetType&,
                                  const WaitingCardWidgetType&,
                                  const SmartCardReaderDiagnosisWidgetType&,
                                  const VotingMachineInstallationWidgetInsertType&,
                                  const VotingMachineInstallationWidgetExtractType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PollingCardConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PollingCardConfiguration (const PollingCardConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PollingCardConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PollingCardConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PMInstallationWindowType > PMInstallationWindow_;
        ::xsd::cxx::tree::one< VMInstallationWindowType > VMInstallationWindow_;
        ::xsd::cxx::tree::one< VotingExperienceWindowType > VotingExperienceWindow_;
        ::xsd::cxx::tree::one< EndVotingExperienceWindowType > EndVotingExperienceWindow_;
        ::xsd::cxx::tree::one< AssistedCardGeneratorFunctionalityType > AssistedCardGeneratorFunctionality_;
        ::xsd::cxx::tree::one< CardGeneratorFunctionalityType > CardGeneratorFunctionality_;
        ::xsd::cxx::tree::one< RecoveryCardGeneratorFunctionalityType > RecoveryCardGeneratorFunctionality_;
        ::xsd::cxx::tree::one< VoteProcessDemoFunctionalityType > VoteProcessDemoFunctionality_;
        ::xsd::cxx::tree::one< BEIDCardWidgetType > BEIDCardWidget_;
        ::xsd::cxx::tree::one< ActivationStatsWidgetType > ActivationStatsWidget_;
        ::xsd::cxx::tree::one< WaitingCardWidgetType > WaitingCardWidget_;
        ::xsd::cxx::tree::one< SmartCardReaderDiagnosisWidgetType > SmartCardReaderDiagnosisWidget_;
        ::xsd::cxx::tree::one< VotingMachineInstallationWidgetInsertType > VotingMachineInstallationWidgetInsert_;
        ::xsd::cxx::tree::one< VotingMachineInstallationWidgetExtractType > VotingMachineInstallationWidgetExtract_;

        //@endcond
      };

      bool
      operator== (const PollingCardConfiguration&, const PollingCardConfiguration&);

      bool
      operator!= (const PollingCardConfiguration&, const PollingCardConfiguration&);


      /**
       * @brief Class corresponding to the %AlarmBoxMonitorConfiguration schema type.
       *
       * @nosubgrouping
       */
      class AlarmBoxMonitorConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Enable
         *
         * @brief Accessor and modifier functions for the %Enable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean EnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnableType, char > EnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnableType&
        getEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnableType&
        getEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnable (const EnableType& x);

        //@}

        /**
         * @name MonitoringTime
         *
         * @brief Accessor and modifier functions for the %MonitoringTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MonitoringTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MonitoringTimeType, char > MonitoringTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MonitoringTimeType&
        getMonitoringTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MonitoringTimeType&
        getMonitoringTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMonitoringTime (const MonitoringTimeType& x);

        //@}

        /**
         * @name SearchTime
         *
         * @brief Accessor and modifier functions for the %SearchTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SearchTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SearchTimeType, char > SearchTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SearchTimeType&
        getSearchTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SearchTimeType&
        getSearchTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSearchTime (const SearchTimeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        AlarmBoxMonitorConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AlarmBoxMonitorConfiguration (const EnableType&,
                                      const MonitoringTimeType&,
                                      const SearchTimeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AlarmBoxMonitorConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AlarmBoxMonitorConfiguration (const AlarmBoxMonitorConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AlarmBoxMonitorConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~AlarmBoxMonitorConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EnableType > Enable_;
        ::xsd::cxx::tree::one< MonitoringTimeType > MonitoringTime_;
        ::xsd::cxx::tree::one< SearchTimeType > SearchTime_;

        //@endcond
      };

      bool
      operator== (const AlarmBoxMonitorConfiguration&, const AlarmBoxMonitorConfiguration&);

      bool
      operator!= (const AlarmBoxMonitorConfiguration&, const AlarmBoxMonitorConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %PreviewLanguageConfig
       * schema type.
       */
      class PreviewLanguageConfig: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_LANGUAGE_INSTALL,
          CONFIGURATION_LANGUAGE_VOTE,
          CONFIGURATION_LANGUAGE_ELECTOR
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        PreviewLanguageConfig ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        PreviewLanguageConfig (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        PreviewLanguageConfig (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        PreviewLanguageConfig (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        PreviewLanguageConfig (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PreviewLanguageConfig (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PreviewLanguageConfig (const ::xercesc::DOMAttr& a,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PreviewLanguageConfig (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PreviewLanguageConfig (const PreviewLanguageConfig& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PreviewLanguageConfig*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        PreviewLanguageConfig&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_PreviewLanguageConfig_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_PreviewLanguageConfig_convert () const;

        public:
        static const char* const _xsd_PreviewLanguageConfig_literals_[3];
        static const Value _xsd_PreviewLanguageConfig_indexes_[3];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %EntryDividedWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class EntryDividedWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NumberOfDivision
         *
         * @brief Accessor and modifier functions for the %NumberOfDivision
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger NumberOfDivisionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberOfDivisionType, char > NumberOfDivisionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberOfDivisionType&
        getNumberOfDivision () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberOfDivisionType&
        getNumberOfDivision ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberOfDivision (const NumberOfDivisionType& x);

        //@}

        /**
         * @name MaxCharacters
         *
         * @brief Accessor and modifier functions for the %MaxCharacters
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxCharactersType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxCharactersType, char > MaxCharactersTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxCharactersType&
        getMaxCharacters () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxCharactersType&
        getMaxCharacters ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxCharacters (const MaxCharactersType& x);

        //@}

        /**
         * @name EntryWidth
         *
         * @brief Accessor and modifier functions for the %EntryWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger EntryWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EntryWidthType, char > EntryWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EntryWidthType&
        getEntryWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EntryWidthType&
        getEntryWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEntryWidth (const EntryWidthType& x);

        //@}

        /**
         * @name Visibility
         *
         * @brief Accessor and modifier functions for the %Visibility
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean VisibilityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VisibilityType, char > VisibilityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VisibilityType&
        getVisibility () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VisibilityType&
        getVisibility ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVisibility (const VisibilityType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        EntryDividedWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        EntryDividedWidgetConfiguration (const NumberOfDivisionType&,
                                         const MaxCharactersType&,
                                         const EntryWidthType&,
                                         const VisibilityType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        EntryDividedWidgetConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        EntryDividedWidgetConfiguration (const EntryDividedWidgetConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual EntryDividedWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~EntryDividedWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NumberOfDivisionType > NumberOfDivision_;
        ::xsd::cxx::tree::one< MaxCharactersType > MaxCharacters_;
        ::xsd::cxx::tree::one< EntryWidthType > EntryWidth_;
        ::xsd::cxx::tree::one< VisibilityType > Visibility_;

        //@endcond
      };

      bool
      operator== (const EntryDividedWidgetConfiguration&, const EntryDividedWidgetConfiguration&);

      bool
      operator!= (const EntryDividedWidgetConfiguration&, const EntryDividedWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %CountConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CountConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name CountType
         *
         * @brief Accessor and modifier functions for the %CountType
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountTypeConfig CountTypeType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< CountTypeType > CountTypeSequence;

        /**
         * @brief Element iterator type.
         */
        typedef CountTypeSequence::iterator CountTypeIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef CountTypeSequence::const_iterator CountTypeConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CountTypeType, char > CountTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const CountTypeSequence&
        getCountType () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        CountTypeSequence&
        getCountType ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setCountType (const CountTypeSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CountConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CountConfiguration (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CountConfiguration (const CountConfiguration& x,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CountConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CountConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        CountTypeSequence CountType_;

        //@endcond
      };

      bool
      operator== (const CountConfiguration&, const CountConfiguration&);

      bool
      operator!= (const CountConfiguration&, const CountConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %CountTypeConfig
       * schema type.
       */
      class CountTypeConfig: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_TOTAL,
          CONFIGURATION_OFFICIAL,
          CONFIGURATION_DEMO,
          CONFIGURATION_RECOVERY,
          CONFIGURATION_SIMULATE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        CountTypeConfig ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        CountTypeConfig (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        CountTypeConfig (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        CountTypeConfig (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        CountTypeConfig (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CountTypeConfig (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CountTypeConfig (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CountTypeConfig (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CountTypeConfig (const CountTypeConfig& x,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CountTypeConfig*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        CountTypeConfig&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_CountTypeConfig_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_CountTypeConfig_convert () const;

        public:
        static const char* const _xsd_CountTypeConfig_literals_[5];
        static const Value _xsd_CountTypeConfig_indexes_[5];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %StartConfiguration schema type.
       *
       * @nosubgrouping
       */
      class StartConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name LoadSelectionLanguage
         *
         * @brief Accessor and modifier functions for the %LoadSelectionLanguage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean LoadSelectionLanguageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LoadSelectionLanguageType, char > LoadSelectionLanguageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LoadSelectionLanguageType&
        getLoadSelectionLanguage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LoadSelectionLanguageType&
        getLoadSelectionLanguage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLoadSelectionLanguage (const LoadSelectionLanguageType& x);

        //@}

        /**
         * @name PersistLanguage
         *
         * @brief Accessor and modifier functions for the %PersistLanguage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean PersistLanguageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PersistLanguageType, char > PersistLanguageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PersistLanguageType&
        getPersistLanguage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PersistLanguageType&
        getPersistLanguage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPersistLanguage (const PersistLanguageType& x);

        //@}

        /**
         * @name InfoMachine
         *
         * @brief Accessor and modifier functions for the %InfoMachine
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::InfoMachineConfiguration InfoMachineType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoMachineType, char > InfoMachineTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoMachineType&
        getInfoMachine () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoMachineType&
        getInfoMachine ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoMachine (const InfoMachineType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoMachine (::std::auto_ptr< InfoMachineType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        StartConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        StartConfiguration (const LoadSelectionLanguageType&,
                            const PersistLanguageType&,
                            const InfoMachineType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StartConfiguration (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StartConfiguration (const StartConfiguration& x,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StartConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~StartConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< LoadSelectionLanguageType > LoadSelectionLanguage_;
        ::xsd::cxx::tree::one< PersistLanguageType > PersistLanguage_;
        ::xsd::cxx::tree::one< InfoMachineType > InfoMachine_;

        //@endcond
      };

      bool
      operator== (const StartConfiguration&, const StartConfiguration&);

      bool
      operator!= (const StartConfiguration&, const StartConfiguration&);


      /**
       * @brief Class corresponding to the %BEIDCardWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BEIDCardWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TitleErrorFontConf
         *
         * @brief Accessor and modifier functions for the %TitleErrorFontConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitleErrorFontConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleErrorFontConfType, char > TitleErrorFontConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleErrorFontConfType&
        getTitleErrorFontConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleErrorFontConfType&
        getTitleErrorFontConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleErrorFontConf (const TitleErrorFontConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleErrorFontConf (::std::auto_ptr< TitleErrorFontConfType > p);

        //@}

        /**
         * @name TextErrorFontConf
         *
         * @brief Accessor and modifier functions for the %TextErrorFontConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TextErrorFontConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextErrorFontConfType, char > TextErrorFontConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextErrorFontConfType&
        getTextErrorFontConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextErrorFontConfType&
        getTextErrorFontConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextErrorFontConf (const TextErrorFontConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextErrorFontConf (::std::auto_ptr< TextErrorFontConfType > p);

        //@}

        /**
         * @name TimeoutError
         *
         * @brief Accessor and modifier functions for the %TimeoutError
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeoutErrorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeoutErrorType, char > TimeoutErrorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeoutErrorType&
        getTimeoutError () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeoutErrorType&
        getTimeoutError ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeoutError (const TimeoutErrorType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BEIDCardWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BEIDCardWidgetConfiguration (const TitleErrorFontConfType&,
                                     const TextErrorFontConfType&,
                                     const TimeoutErrorType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        BEIDCardWidgetConfiguration (::std::auto_ptr< TitleErrorFontConfType >&,
                                     ::std::auto_ptr< TextErrorFontConfType >&,
                                     const TimeoutErrorType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BEIDCardWidgetConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BEIDCardWidgetConfiguration (const BEIDCardWidgetConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BEIDCardWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BEIDCardWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TitleErrorFontConfType > TitleErrorFontConf_;
        ::xsd::cxx::tree::one< TextErrorFontConfType > TextErrorFontConf_;
        ::xsd::cxx::tree::one< TimeoutErrorType > TimeoutError_;

        //@endcond
      };

      bool
      operator== (const BEIDCardWidgetConfiguration&, const BEIDCardWidgetConfiguration&);

      bool
      operator!= (const BEIDCardWidgetConfiguration&, const BEIDCardWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %IDCardProcessConfiguration schema type.
       *
       * @nosubgrouping
       */
      class IDCardProcessConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PMInstall
         *
         * @brief Accessor and modifier functions for the %PMInstall
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig PMInstallType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PMInstallType, char > PMInstallTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PMInstallType&
        getPMInstall () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PMInstallType&
        getPMInstall ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPMInstall (const PMInstallType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPMInstall (::std::auto_ptr< PMInstallType > p);

        //@}

        /**
         * @name VMInstall
         *
         * @brief Accessor and modifier functions for the %VMInstall
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig VMInstallType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VMInstallType, char > VMInstallTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VMInstallType&
        getVMInstall () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VMInstallType&
        getVMInstall ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVMInstall (const VMInstallType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVMInstall (::std::auto_ptr< VMInstallType > p);

        //@}

        /**
         * @name OpenElection
         *
         * @brief Accessor and modifier functions for the %OpenElection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig OpenElectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OpenElectionType, char > OpenElectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OpenElectionType&
        getOpenElection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OpenElectionType&
        getOpenElection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOpenElection (const OpenElectionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setOpenElection (::std::auto_ptr< OpenElectionType > p);

        //@}

        /**
         * @name CloseVotation
         *
         * @brief Accessor and modifier functions for the %CloseVotation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig CloseVotationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseVotationType, char > CloseVotationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseVotationType&
        getCloseVotation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseVotationType&
        getCloseVotation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseVotation (const CloseVotationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseVotation (::std::auto_ptr< CloseVotationType > p);

        //@}

        /**
         * @name CloseElection
         *
         * @brief Accessor and modifier functions for the %CloseElection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig CloseElectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseElectionType, char > CloseElectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseElectionType&
        getCloseElection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseElectionType&
        getCloseElection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseElection (const CloseElectionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseElection (::std::auto_ptr< CloseElectionType > p);

        //@}

        /**
         * @name CloseNoteRegister
         *
         * @brief Accessor and modifier functions for the %CloseNoteRegister
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig CloseNoteRegisterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CloseNoteRegisterType, char > CloseNoteRegisterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CloseNoteRegisterType&
        getCloseNoteRegister () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CloseNoteRegisterType&
        getCloseNoteRegister ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCloseNoteRegister (const CloseNoteRegisterType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCloseNoteRegister (::std::auto_ptr< CloseNoteRegisterType > p);

        //@}

        /**
         * @name IncidentReport
         *
         * @brief Accessor and modifier functions for the %IncidentReport
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig IncidentReportType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncidentReportType, char > IncidentReportTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncidentReportType&
        getIncidentReport () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncidentReportType&
        getIncidentReport ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncidentReport (const IncidentReportType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIncidentReport (::std::auto_ptr< IncidentReportType > p);

        //@}

        /**
         * @name AssistedActivation
         *
         * @brief Accessor and modifier functions for the %AssistedActivation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig AssistedActivationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AssistedActivationType, char > AssistedActivationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AssistedActivationType&
        getAssistedActivation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AssistedActivationType&
        getAssistedActivation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAssistedActivation (const AssistedActivationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAssistedActivation (::std::auto_ptr< AssistedActivationType > p);

        //@}

        /**
         * @name DisabledVoter
         *
         * @brief Accessor and modifier functions for the %DisabledVoter
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig DisabledVoterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DisabledVoterType, char > DisabledVoterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DisabledVoterType&
        getDisabledVoter () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DisabledVoterType&
        getDisabledVoter ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDisabledVoter (const DisabledVoterType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDisabledVoter (::std::auto_ptr< DisabledVoterType > p);

        //@}

        /**
         * @name DisabledVoterHelper
         *
         * @brief Accessor and modifier functions for the %DisabledVoterHelper
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig DisabledVoterHelperType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DisabledVoterHelperType, char > DisabledVoterHelperTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DisabledVoterHelperType&
        getDisabledVoterHelper () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DisabledVoterHelperType&
        getDisabledVoterHelper ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDisabledVoterHelper (const DisabledVoterHelperType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDisabledVoterHelper (::std::auto_ptr< DisabledVoterHelperType > p);

        //@}

        /**
         * @name PoliceNote
         *
         * @brief Accessor and modifier functions for the %PoliceNote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig PoliceNoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PoliceNoteType, char > PoliceNoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PoliceNoteType&
        getPoliceNote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PoliceNoteType&
        getPoliceNote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPoliceNote (const PoliceNoteType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPoliceNote (::std::auto_ptr< PoliceNoteType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        IDCardProcessConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        IDCardProcessConfiguration (const PMInstallType&,
                                    const VMInstallType&,
                                    const OpenElectionType&,
                                    const CloseVotationType&,
                                    const CloseElectionType&,
                                    const CloseNoteRegisterType&,
                                    const IncidentReportType&,
                                    const AssistedActivationType&,
                                    const DisabledVoterType&,
                                    const DisabledVoterHelperType&,
                                    const PoliceNoteType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        IDCardProcessConfiguration (::std::auto_ptr< PMInstallType >&,
                                    ::std::auto_ptr< VMInstallType >&,
                                    ::std::auto_ptr< OpenElectionType >&,
                                    ::std::auto_ptr< CloseVotationType >&,
                                    ::std::auto_ptr< CloseElectionType >&,
                                    ::std::auto_ptr< CloseNoteRegisterType >&,
                                    ::std::auto_ptr< IncidentReportType >&,
                                    ::std::auto_ptr< AssistedActivationType >&,
                                    ::std::auto_ptr< DisabledVoterType >&,
                                    ::std::auto_ptr< DisabledVoterHelperType >&,
                                    ::std::auto_ptr< PoliceNoteType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IDCardProcessConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IDCardProcessConfiguration (const IDCardProcessConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IDCardProcessConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~IDCardProcessConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PMInstallType > PMInstall_;
        ::xsd::cxx::tree::one< VMInstallType > VMInstall_;
        ::xsd::cxx::tree::one< OpenElectionType > OpenElection_;
        ::xsd::cxx::tree::one< CloseVotationType > CloseVotation_;
        ::xsd::cxx::tree::one< CloseElectionType > CloseElection_;
        ::xsd::cxx::tree::one< CloseNoteRegisterType > CloseNoteRegister_;
        ::xsd::cxx::tree::one< IncidentReportType > IncidentReport_;
        ::xsd::cxx::tree::one< AssistedActivationType > AssistedActivation_;
        ::xsd::cxx::tree::one< DisabledVoterType > DisabledVoter_;
        ::xsd::cxx::tree::one< DisabledVoterHelperType > DisabledVoterHelper_;
        ::xsd::cxx::tree::one< PoliceNoteType > PoliceNote_;

        //@endcond
      };

      bool
      operator== (const IDCardProcessConfiguration&, const IDCardProcessConfiguration&);

      bool
      operator!= (const IDCardProcessConfiguration&, const IDCardProcessConfiguration&);


      /**
       * @brief Class corresponding to the %PollWorkerRegisterConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PollWorkerRegisterConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name WorkerMemberType
         *
         * @brief Accessor and modifier functions for the %WorkerMemberType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::WorkerMemberType WorkerMemberTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WorkerMemberTypeType, char > WorkerMemberTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WorkerMemberTypeType&
        getWorkerMemberType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WorkerMemberTypeType&
        getWorkerMemberType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWorkerMemberType (const WorkerMemberTypeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setWorkerMemberType (::std::auto_ptr< WorkerMemberTypeType > p);

        //@}

        /**
         * @name RegisterMax
         *
         * @brief Accessor and modifier functions for the %RegisterMax
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger RegisterMaxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterMaxType, char > RegisterMaxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterMaxType&
        getRegisterMax () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterMaxType&
        getRegisterMax ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterMax (const RegisterMaxType& x);

        //@}

        /**
         * @name RegisterRequired
         *
         * @brief Accessor and modifier functions for the %RegisterRequired
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger RegisterRequiredType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterRequiredType, char > RegisterRequiredTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterRequiredType&
        getRegisterRequired () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterRequiredType&
        getRegisterRequired ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterRequired (const RegisterRequiredType& x);

        //@}

        /**
         * @name IDConfig
         *
         * @brief Accessor and modifier functions for the %IDConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDConfig IDConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IDConfigType, char > IDConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IDConfigType&
        getIDConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IDConfigType&
        getIDConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIDConfig (const IDConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIDConfig (::std::auto_ptr< IDConfigType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PollWorkerRegisterConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PollWorkerRegisterConfiguration (const WorkerMemberTypeType&,
                                         const RegisterMaxType&,
                                         const RegisterRequiredType&,
                                         const IDConfigType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        PollWorkerRegisterConfiguration (const WorkerMemberTypeType&,
                                         const RegisterMaxType&,
                                         const RegisterRequiredType&,
                                         ::std::auto_ptr< IDConfigType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PollWorkerRegisterConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PollWorkerRegisterConfiguration (const PollWorkerRegisterConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PollWorkerRegisterConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PollWorkerRegisterConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< WorkerMemberTypeType > WorkerMemberType_;
        ::xsd::cxx::tree::one< RegisterMaxType > RegisterMax_;
        ::xsd::cxx::tree::one< RegisterRequiredType > RegisterRequired_;
        ::xsd::cxx::tree::one< IDConfigType > IDConfig_;

        //@endcond
      };

      bool
      operator== (const PollWorkerRegisterConfiguration&, const PollWorkerRegisterConfiguration&);

      bool
      operator!= (const PollWorkerRegisterConfiguration&, const PollWorkerRegisterConfiguration&);


      /**
       * @brief Class corresponding to the %IDConfig schema type.
       *
       * @nosubgrouping
       */
      class IDConfig: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Name
         *
         * @brief Accessor and modifier functions for the %Name
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties NameType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NameType > NameOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NameOptional&
        getName () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        NameOptional&
        getName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setName (const NameType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setName (const NameOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setName (::std::auto_ptr< NameType > p);

        //@}

        /**
         * @name LastName
         *
         * @brief Accessor and modifier functions for the %LastName
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties LastNameType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< LastNameType > LastNameOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LastNameType, char > LastNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const LastNameOptional&
        getLastName () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        LastNameOptional&
        getLastName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLastName (const LastNameType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setLastName (const LastNameOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setLastName (::std::auto_ptr< LastNameType > p);

        //@}

        /**
         * @name IDNumber
         *
         * @brief Accessor and modifier functions for the %IDNumber
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties IDNumberType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< IDNumberType > IDNumberOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IDNumberType, char > IDNumberTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const IDNumberOptional&
        getIDNumber () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        IDNumberOptional&
        getIDNumber ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIDNumber (const IDNumberType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setIDNumber (const IDNumberOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setIDNumber (::std::auto_ptr< IDNumberType > p);

        //@}

        /**
         * @name Gender
         *
         * @brief Accessor and modifier functions for the %Gender
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties GenderType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< GenderType > GenderOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< GenderType, char > GenderTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const GenderOptional&
        getGender () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        GenderOptional&
        getGender ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setGender (const GenderType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setGender (const GenderOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setGender (::std::auto_ptr< GenderType > p);

        //@}

        /**
         * @name Nationality
         *
         * @brief Accessor and modifier functions for the %Nationality
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties NationalityType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NationalityType > NationalityOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NationalityType, char > NationalityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NationalityOptional&
        getNationality () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        NationalityOptional&
        getNationality ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNationality (const NationalityType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setNationality (const NationalityOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setNationality (::std::auto_ptr< NationalityType > p);

        //@}

        /**
         * @name NationalityNumber
         *
         * @brief Accessor and modifier functions for the %NationalityNumber
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties NationalityNumberType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NationalityNumberType > NationalityNumberOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NationalityNumberType, char > NationalityNumberTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NationalityNumberOptional&
        getNationalityNumber () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        NationalityNumberOptional&
        getNationalityNumber ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNationalityNumber (const NationalityNumberType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setNationalityNumber (const NationalityNumberOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setNationalityNumber (::std::auto_ptr< NationalityNumberType > p);

        //@}

        /**
         * @name Account
         *
         * @brief Accessor and modifier functions for the %Account
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties AccountType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< AccountType > AccountOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AccountType, char > AccountTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const AccountOptional&
        getAccount () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        AccountOptional&
        getAccount ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAccount (const AccountType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setAccount (const AccountOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setAccount (::std::auto_ptr< AccountType > p);

        //@}

        /**
         * @name Party
         *
         * @brief Accessor and modifier functions for the %Party
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties PartyType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< PartyType > PartyOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartyType, char > PartyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const PartyOptional&
        getParty () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        PartyOptional&
        getParty ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setParty (const PartyType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setParty (const PartyOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setParty (::std::auto_ptr< PartyType > p);

        //@}

        /**
         * @name Phone
         *
         * @brief Accessor and modifier functions for the %Phone
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties PhoneType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< PhoneType > PhoneOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PhoneType, char > PhoneTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const PhoneOptional&
        getPhone () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        PhoneOptional&
        getPhone ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPhone (const PhoneType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setPhone (const PhoneOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setPhone (::std::auto_ptr< PhoneType > p);

        //@}

        /**
         * @name AllDay
         *
         * @brief Accessor and modifier functions for the %AllDay
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties AllDayType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< AllDayType > AllDayOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AllDayType, char > AllDayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const AllDayOptional&
        getAllDay () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        AllDayOptional&
        getAllDay ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAllDay (const AllDayType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setAllDay (const AllDayOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setAllDay (::std::auto_ptr< AllDayType > p);

        //@}

        /**
         * @name InfoDeputy
         *
         * @brief Accessor and modifier functions for the %InfoDeputy
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties InfoDeputyType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< InfoDeputyType > InfoDeputyOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoDeputyType, char > InfoDeputyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const InfoDeputyOptional&
        getInfoDeputy () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        InfoDeputyOptional&
        getInfoDeputy ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoDeputy (const InfoDeputyType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setInfoDeputy (const InfoDeputyOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setInfoDeputy (::std::auto_ptr< InfoDeputyType > p);

        //@}

        /**
         * @name BureauAssigned
         *
         * @brief Accessor and modifier functions for the %BureauAssigned
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties BureauAssignedType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< BureauAssignedType > BureauAssignedOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BureauAssignedType, char > BureauAssignedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const BureauAssignedOptional&
        getBureauAssigned () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        BureauAssignedOptional&
        getBureauAssigned ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBureauAssigned (const BureauAssignedType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setBureauAssigned (const BureauAssignedOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setBureauAssigned (::std::auto_ptr< BureauAssignedType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        IDConfig ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IDConfig (const ::xercesc::DOMElement& e,
                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IDConfig (const IDConfig& x,
                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IDConfig*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~IDConfig ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        NameOptional Name_;
        LastNameOptional LastName_;
        IDNumberOptional IDNumber_;
        GenderOptional Gender_;
        NationalityOptional Nationality_;
        NationalityNumberOptional NationalityNumber_;
        AccountOptional Account_;
        PartyOptional Party_;
        PhoneOptional Phone_;
        AllDayOptional AllDay_;
        InfoDeputyOptional InfoDeputy_;
        BureauAssignedOptional BureauAssigned_;

        //@endcond
      };

      bool
      operator== (const IDConfig&, const IDConfig&);

      bool
      operator!= (const IDConfig&, const IDConfig&);


      /**
       * @brief Class corresponding to the %IDProperties schema type.
       *
       * @nosubgrouping
       */
      class IDProperties: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Mandatory
         *
         * @brief Accessor and modifier functions for the %Mandatory
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean MandatoryType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MandatoryType, char > MandatoryTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const MandatoryType&
        getMandatory () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        MandatoryType&
        getMandatory ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMandatory (const MandatoryType& x);

        //@}

        /**
         * @name Type
         *
         * @brief Accessor and modifier functions for the %Type
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::Configuration::ElementType TypeType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const TypeOptional&
        getType () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        TypeOptional&
        getType ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setType (const TypeType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setType (const TypeOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setType (::std::auto_ptr< TypeType > p);

        //@}

        /**
         * @name Max
         *
         * @brief Accessor and modifier functions for the %Max
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< MaxType > MaxOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxType, char > MaxTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const MaxOptional&
        getMax () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        MaxOptional&
        getMax ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMax (const MaxType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setMax (const MaxOptional& x);

        //@}

        /**
         * @name Mask
         *
         * @brief Accessor and modifier functions for the %Mask
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String MaskType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< MaskType > MaskOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaskType, char > MaskTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const MaskOptional&
        getMask () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        MaskOptional&
        getMask ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMask (const MaskType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setMask (const MaskOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setMask (::std::auto_ptr< MaskType > p);

        //@}

        /**
         * @name Regex
         *
         * @brief Accessor and modifier functions for the %Regex
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String RegexType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< RegexType > RegexOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegexType, char > RegexTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const RegexOptional&
        getRegex () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        RegexOptional&
        getRegex ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setRegex (const RegexType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setRegex (const RegexOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setRegex (::std::auto_ptr< RegexType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        IDProperties ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        IDProperties (const MandatoryType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IDProperties (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IDProperties (const IDProperties& x,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IDProperties*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~IDProperties ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< MandatoryType > Mandatory_;
        TypeOptional Type_;
        MaxOptional Max_;
        MaskOptional Mask_;
        RegexOptional Regex_;

        //@endcond
      };

      bool
      operator== (const IDProperties&, const IDProperties&);

      bool
      operator!= (const IDProperties&, const IDProperties&);


      /**
       * @brief Class corresponding to the %RegisterWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class RegisterWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name VerticalFilling
         *
         * @brief Accessor and modifier functions for the %VerticalFilling
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean VerticalFillingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VerticalFillingType, char > VerticalFillingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VerticalFillingType&
        getVerticalFilling () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VerticalFillingType&
        getVerticalFilling ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVerticalFilling (const VerticalFillingType& x);

        //@}

        /**
         * @name MaxColumn
         *
         * @brief Accessor and modifier functions for the %MaxColumn
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxColumnType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxColumnType, char > MaxColumnTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxColumnType&
        getMaxColumn () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxColumnType&
        getMaxColumn ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxColumn (const MaxColumnType& x);

        //@}

        /**
         * @name MaxRow
         *
         * @brief Accessor and modifier functions for the %MaxRow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxRowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxRowType, char > MaxRowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxRowType&
        getMaxRow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxRowType&
        getMaxRow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxRow (const MaxRowType& x);

        //@}

        /**
         * @name WidthBox
         *
         * @brief Accessor and modifier functions for the %WidthBox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger WidthBoxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WidthBoxType, char > WidthBoxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WidthBoxType&
        getWidthBox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WidthBoxType&
        getWidthBox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWidthBox (const WidthBoxType& x);

        //@}

        /**
         * @name HeigthBox
         *
         * @brief Accessor and modifier functions for the %HeigthBox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger HeigthBoxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeigthBoxType, char > HeigthBoxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeigthBoxType&
        getHeigthBox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeigthBoxType&
        getHeigthBox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeigthBox (const HeigthBoxType& x);

        //@}

        /**
         * @name SpacingBox
         *
         * @brief Accessor and modifier functions for the %SpacingBox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger SpacingBoxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SpacingBoxType, char > SpacingBoxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SpacingBoxType&
        getSpacingBox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SpacingBoxType&
        getSpacingBox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSpacingBox (const SpacingBoxType& x);

        //@}

        /**
         * @name ShowHeader
         *
         * @brief Accessor and modifier functions for the %ShowHeader
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowHeaderType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowHeaderType, char > ShowHeaderTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowHeaderType&
        getShowHeader () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowHeaderType&
        getShowHeader ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowHeader (const ShowHeaderType& x);

        //@}

        /**
         * @name ShowCenter
         *
         * @brief Accessor and modifier functions for the %ShowCenter
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowCenterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowCenterType, char > ShowCenterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowCenterType&
        getShowCenter () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowCenterType&
        getShowCenter ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowCenter (const ShowCenterType& x);

        //@}

        /**
         * @name ShowBottom
         *
         * @brief Accessor and modifier functions for the %ShowBottom
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBottomType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBottomType, char > ShowBottomTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBottomType&
        getShowBottom () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBottomType&
        getShowBottom ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBottom (const ShowBottomType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        RegisterWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        RegisterWidgetConfiguration (const VerticalFillingType&,
                                     const MaxColumnType&,
                                     const MaxRowType&,
                                     const WidthBoxType&,
                                     const HeigthBoxType&,
                                     const SpacingBoxType&,
                                     const ShowHeaderType&,
                                     const ShowCenterType&,
                                     const ShowBottomType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RegisterWidgetConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        RegisterWidgetConfiguration (const RegisterWidgetConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual RegisterWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~RegisterWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< VerticalFillingType > VerticalFilling_;
        ::xsd::cxx::tree::one< MaxColumnType > MaxColumn_;
        ::xsd::cxx::tree::one< MaxRowType > MaxRow_;
        ::xsd::cxx::tree::one< WidthBoxType > WidthBox_;
        ::xsd::cxx::tree::one< HeigthBoxType > HeigthBox_;
        ::xsd::cxx::tree::one< SpacingBoxType > SpacingBox_;
        ::xsd::cxx::tree::one< ShowHeaderType > ShowHeader_;
        ::xsd::cxx::tree::one< ShowCenterType > ShowCenter_;
        ::xsd::cxx::tree::one< ShowBottomType > ShowBottom_;

        //@endcond
      };

      bool
      operator== (const RegisterWidgetConfiguration&, const RegisterWidgetConfiguration&);

      bool
      operator!= (const RegisterWidgetConfiguration&, const RegisterWidgetConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %ElementType
       * schema type.
       */
      class ElementType: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_NUMERIC,
          CONFIGURATION_ALPHA,
          CONFIGURATION_ALPHA_NUMERIC,
          CONFIGURATION_CUSTOM
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        ElementType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        ElementType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        ElementType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        ElementType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        ElementType (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ElementType (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ElementType (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ElementType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ElementType (const ElementType& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ElementType*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        ElementType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_ElementType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_ElementType_convert () const;

        public:
        static const char* const _xsd_ElementType_literals_[4];
        static const Value _xsd_ElementType_indexes_[4];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %InfoMachineConfiguration
       * schema type.
       */
      class InfoMachineConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_PM,
          CONFIGURATION_VM
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        InfoMachineConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        InfoMachineConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        InfoMachineConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        InfoMachineConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        InfoMachineConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        InfoMachineConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        InfoMachineConfiguration (const ::xercesc::DOMAttr& a,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        InfoMachineConfiguration (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        InfoMachineConfiguration (const InfoMachineConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual InfoMachineConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        InfoMachineConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_InfoMachineConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_InfoMachineConfiguration_convert () const;

        public:
        static const char* const _xsd_InfoMachineConfiguration_literals_[2];
        static const Value _xsd_InfoMachineConfiguration_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %SmartCardReaderDiagnosisConfiguration schema type.
       *
       * @nosubgrouping
       */
      class SmartCardReaderDiagnosisConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TimeoutToFail
         *
         * @brief Accessor and modifier functions for the %TimeoutToFail
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeoutToFailType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeoutToFailType, char > TimeoutToFailTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeoutToFailType&
        getTimeoutToFail () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeoutToFailType&
        getTimeoutToFail ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeoutToFail (const TimeoutToFailType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        SmartCardReaderDiagnosisConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SmartCardReaderDiagnosisConfiguration (const TimeoutToFailType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SmartCardReaderDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        SmartCardReaderDiagnosisConfiguration (const SmartCardReaderDiagnosisConfiguration& x,
                                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SmartCardReaderDiagnosisConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~SmartCardReaderDiagnosisConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TimeoutToFailType > TimeoutToFail_;

        //@endcond
      };

      bool
      operator== (const SmartCardReaderDiagnosisConfiguration&, const SmartCardReaderDiagnosisConfiguration&);

      bool
      operator!= (const SmartCardReaderDiagnosisConfiguration&, const SmartCardReaderDiagnosisConfiguration&);


      /**
       * @brief Class corresponding to the %ChangeHourFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ChangeHourFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TimeLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %TimeLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TimeLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeLabelConfigurationType, char > TimeLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeLabelConfigurationType&
        getTimeLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeLabelConfigurationType&
        getTimeLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeLabelConfiguration (const TimeLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTimeLabelConfiguration (::std::auto_ptr< TimeLabelConfigurationType > p);

        //@}

        /**
         * @name TitlesLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %TitlesLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitlesLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitlesLabelConfigurationType, char > TitlesLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitlesLabelConfigurationType&
        getTitlesLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitlesLabelConfigurationType&
        getTitlesLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitlesLabelConfiguration (const TitlesLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitlesLabelConfiguration (::std::auto_ptr< TitlesLabelConfigurationType > p);

        //@}

        /**
         * @name PrincipalTitleLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %PrincipalTitleLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration PrincipalTitleLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrincipalTitleLabelConfigurationType, char > PrincipalTitleLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrincipalTitleLabelConfigurationType&
        getPrincipalTitleLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrincipalTitleLabelConfigurationType&
        getPrincipalTitleLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrincipalTitleLabelConfiguration (const PrincipalTitleLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPrincipalTitleLabelConfiguration (::std::auto_ptr< PrincipalTitleLabelConfigurationType > p);

        //@}

        /**
         * @name ButtonArrowWidth
         *
         * @brief Accessor and modifier functions for the %ButtonArrowWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonArrowWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonArrowWidthType, char > ButtonArrowWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonArrowWidthType&
        getButtonArrowWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonArrowWidthType&
        getButtonArrowWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonArrowWidth (const ButtonArrowWidthType& x);

        //@}

        /**
         * @name ButtonArrowHeight
         *
         * @brief Accessor and modifier functions for the %ButtonArrowHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonArrowHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonArrowHeightType, char > ButtonArrowHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonArrowHeightType&
        getButtonArrowHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonArrowHeightType&
        getButtonArrowHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonArrowHeight (const ButtonArrowHeightType& x);

        //@}

        /**
         * @name ButtonValidateWidth
         *
         * @brief Accessor and modifier functions for the %ButtonValidateWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonValidateWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonValidateWidthType, char > ButtonValidateWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonValidateWidthType&
        getButtonValidateWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonValidateWidthType&
        getButtonValidateWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonValidateWidth (const ButtonValidateWidthType& x);

        //@}

        /**
         * @name ButtonValidateHeight
         *
         * @brief Accessor and modifier functions for the %ButtonValidateHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonValidateHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonValidateHeightType, char > ButtonValidateHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonValidateHeightType&
        getButtonValidateHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonValidateHeightType&
        getButtonValidateHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonValidateHeight (const ButtonValidateHeightType& x);

        //@}

        /**
         * @name EntryWidth
         *
         * @brief Accessor and modifier functions for the %EntryWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger EntryWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EntryWidthType, char > EntryWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EntryWidthType&
        getEntryWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EntryWidthType&
        getEntryWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEntryWidth (const EntryWidthType& x);

        //@}

        /**
         * @name EntryHeight
         *
         * @brief Accessor and modifier functions for the %EntryHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger EntryHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EntryHeightType, char > EntryHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EntryHeightType&
        getEntryHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EntryHeightType&
        getEntryHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEntryHeight (const EntryHeightType& x);

        //@}

        /**
         * @name FontEntrySize
         *
         * @brief Accessor and modifier functions for the %FontEntrySize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger FontEntrySizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontEntrySizeType, char > FontEntrySizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontEntrySizeType&
        getFontEntrySize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontEntrySizeType&
        getFontEntrySize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontEntrySize (const FontEntrySizeType& x);

        //@}

        /**
         * @name TableVerticalSpacing
         *
         * @brief Accessor and modifier functions for the %TableVerticalSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TableVerticalSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TableVerticalSpacingType, char > TableVerticalSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TableVerticalSpacingType&
        getTableVerticalSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TableVerticalSpacingType&
        getTableVerticalSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTableVerticalSpacing (const TableVerticalSpacingType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ChangeHourFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ChangeHourFunctionalityConfiguration (const TimeLabelConfigurationType&,
                                              const TitlesLabelConfigurationType&,
                                              const PrincipalTitleLabelConfigurationType&,
                                              const ButtonArrowWidthType&,
                                              const ButtonArrowHeightType&,
                                              const ButtonValidateWidthType&,
                                              const ButtonValidateHeightType&,
                                              const EntryWidthType&,
                                              const EntryHeightType&,
                                              const FontEntrySizeType&,
                                              const TableVerticalSpacingType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ChangeHourFunctionalityConfiguration (::std::auto_ptr< TimeLabelConfigurationType >&,
                                              ::std::auto_ptr< TitlesLabelConfigurationType >&,
                                              ::std::auto_ptr< PrincipalTitleLabelConfigurationType >&,
                                              const ButtonArrowWidthType&,
                                              const ButtonArrowHeightType&,
                                              const ButtonValidateWidthType&,
                                              const ButtonValidateHeightType&,
                                              const EntryWidthType&,
                                              const EntryHeightType&,
                                              const FontEntrySizeType&,
                                              const TableVerticalSpacingType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ChangeHourFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ChangeHourFunctionalityConfiguration (const ChangeHourFunctionalityConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ChangeHourFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ChangeHourFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TimeLabelConfigurationType > TimeLabelConfiguration_;
        ::xsd::cxx::tree::one< TitlesLabelConfigurationType > TitlesLabelConfiguration_;
        ::xsd::cxx::tree::one< PrincipalTitleLabelConfigurationType > PrincipalTitleLabelConfiguration_;
        ::xsd::cxx::tree::one< ButtonArrowWidthType > ButtonArrowWidth_;
        ::xsd::cxx::tree::one< ButtonArrowHeightType > ButtonArrowHeight_;
        ::xsd::cxx::tree::one< ButtonValidateWidthType > ButtonValidateWidth_;
        ::xsd::cxx::tree::one< ButtonValidateHeightType > ButtonValidateHeight_;
        ::xsd::cxx::tree::one< EntryWidthType > EntryWidth_;
        ::xsd::cxx::tree::one< EntryHeightType > EntryHeight_;
        ::xsd::cxx::tree::one< FontEntrySizeType > FontEntrySize_;
        ::xsd::cxx::tree::one< TableVerticalSpacingType > TableVerticalSpacing_;

        //@endcond
      };

      bool
      operator== (const ChangeHourFunctionalityConfiguration&, const ChangeHourFunctionalityConfiguration&);

      bool
      operator!= (const ChangeHourFunctionalityConfiguration&, const ChangeHourFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %FunctionalitiesConfiguration schema type.
       *
       * @nosubgrouping
       */
      class FunctionalitiesConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name FunctionalityConfiguration
         *
         * @brief Accessor and modifier functions for the %FunctionalityConfiguration
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::FunctionalityConfiguration FunctionalityConfigurationType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< FunctionalityConfigurationType > FunctionalityConfigurationSequence;

        /**
         * @brief Element iterator type.
         */
        typedef FunctionalityConfigurationSequence::iterator FunctionalityConfigurationIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef FunctionalityConfigurationSequence::const_iterator FunctionalityConfigurationConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FunctionalityConfigurationType, char > FunctionalityConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const FunctionalityConfigurationSequence&
        getFunctionalityConfiguration () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        FunctionalityConfigurationSequence&
        getFunctionalityConfiguration ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setFunctionalityConfiguration (const FunctionalityConfigurationSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FunctionalitiesConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FunctionalitiesConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FunctionalitiesConfiguration (const FunctionalitiesConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FunctionalitiesConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FunctionalitiesConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        FunctionalityConfigurationSequence FunctionalityConfiguration_;

        //@endcond
      };

      bool
      operator== (const FunctionalitiesConfiguration&, const FunctionalitiesConfiguration&);

      bool
      operator!= (const FunctionalitiesConfiguration&, const FunctionalitiesConfiguration&);


      /**
       * @brief Class corresponding to the %RunFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class RunFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name FunctionalityDescriptor
         *
         * @brief Accessor and modifier functions for the %FunctionalityDescriptor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOptionType FunctionalityDescriptorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FunctionalityDescriptorType, char > FunctionalityDescriptorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FunctionalityDescriptorType&
        getFunctionalityDescriptor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FunctionalityDescriptorType&
        getFunctionalityDescriptor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFunctionalityDescriptor (const FunctionalityDescriptorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFunctionalityDescriptor (::std::auto_ptr< FunctionalityDescriptorType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        RunFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        RunFunctionalityConfiguration (const FunctionalityDescriptorType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RunFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        RunFunctionalityConfiguration (const RunFunctionalityConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual RunFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~RunFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< FunctionalityDescriptorType > FunctionalityDescriptor_;

        //@endcond
      };

      bool
      operator== (const RunFunctionalityConfiguration&, const RunFunctionalityConfiguration&);

      bool
      operator!= (const RunFunctionalityConfiguration&, const RunFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %InstallationWizardConfiguration schema type.
       *
       * @nosubgrouping
       */
      class InstallationWizardConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name AskForId
         *
         * @brief Accessor and modifier functions for the %AskForId
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AskForIdType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AskForIdType, char > AskForIdTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AskForIdType&
        getAskForId () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AskForIdType&
        getAskForId ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAskForId (const AskForIdType& x);

        //@}

        /**
         * @name IncomePassphrase
         *
         * @brief Accessor and modifier functions for the %IncomePassphrase
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IncomePassphraseEnum IncomePassphraseType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncomePassphraseType, char > IncomePassphraseTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncomePassphraseType&
        getIncomePassphrase () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncomePassphraseType&
        getIncomePassphrase ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncomePassphrase (const IncomePassphraseType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setIncomePassphrase (::std::auto_ptr< IncomePassphraseType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        InstallationWizardConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        InstallationWizardConfiguration (const AskForIdType&,
                                         const IncomePassphraseType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        InstallationWizardConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        InstallationWizardConfiguration (const InstallationWizardConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual InstallationWizardConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~InstallationWizardConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< AskForIdType > AskForId_;
        ::xsd::cxx::tree::one< IncomePassphraseType > IncomePassphrase_;

        //@endcond
      };

      bool
      operator== (const InstallationWizardConfiguration&, const InstallationWizardConfiguration&);

      bool
      operator!= (const InstallationWizardConfiguration&, const InstallationWizardConfiguration&);


      /**
       * @brief Class corresponding to the %PMWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PMWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ShowImages
         *
         * @brief Accessor and modifier functions for the %ShowImages
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowImagesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowImagesType, char > ShowImagesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowImagesType&
        getShowImages () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowImagesType&
        getShowImages ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowImages (const ShowImagesType& x);

        //@}

        /**
         * @name LoginCaseSensitiveConfiguration
         *
         * @brief Accessor and modifier functions for the %LoginCaseSensitiveConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean LoginCaseSensitiveConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LoginCaseSensitiveConfigurationType, char > LoginCaseSensitiveConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LoginCaseSensitiveConfigurationType&
        getLoginCaseSensitiveConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LoginCaseSensitiveConfigurationType&
        getLoginCaseSensitiveConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLoginCaseSensitiveConfiguration (const LoginCaseSensitiveConfigurationType& x);

        //@}

        /**
         * @name PasswordWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %PasswordWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::EntryDividedWidgetConfiguration PasswordWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PasswordWidgetConfigurationType, char > PasswordWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PasswordWidgetConfigurationType&
        getPasswordWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PasswordWidgetConfigurationType&
        getPasswordWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPasswordWidgetConfiguration (const PasswordWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPasswordWidgetConfiguration (::std::auto_ptr< PasswordWidgetConfigurationType > p);

        //@}

        /**
         * @name ContingencyWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %ContingencyWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::EntryDividedWidgetConfiguration ContingencyWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContingencyWidgetConfigurationType, char > ContingencyWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContingencyWidgetConfigurationType&
        getContingencyWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContingencyWidgetConfigurationType&
        getContingencyWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContingencyWidgetConfiguration (const ContingencyWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContingencyWidgetConfiguration (::std::auto_ptr< ContingencyWidgetConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PMWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PMWidgetConfiguration (const ShowImagesType&,
                               const LoginCaseSensitiveConfigurationType&,
                               const PasswordWidgetConfigurationType&,
                               const ContingencyWidgetConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        PMWidgetConfiguration (const ShowImagesType&,
                               const LoginCaseSensitiveConfigurationType&,
                               ::std::auto_ptr< PasswordWidgetConfigurationType >&,
                               ::std::auto_ptr< ContingencyWidgetConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PMWidgetConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PMWidgetConfiguration (const PMWidgetConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PMWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PMWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ShowImagesType > ShowImages_;
        ::xsd::cxx::tree::one< LoginCaseSensitiveConfigurationType > LoginCaseSensitiveConfiguration_;
        ::xsd::cxx::tree::one< PasswordWidgetConfigurationType > PasswordWidgetConfiguration_;
        ::xsd::cxx::tree::one< ContingencyWidgetConfigurationType > ContingencyWidgetConfiguration_;

        //@endcond
      };

      bool
      operator== (const PMWidgetConfiguration&, const PMWidgetConfiguration&);

      bool
      operator!= (const PMWidgetConfiguration&, const PMWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %CardActivatorFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CardActivatorFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name CustomAttributesPresentation
         *
         * @brief Accessor and modifier functions for the %CustomAttributesPresentation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CustomAttributesPresentationType CustomAttributesPresentationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CustomAttributesPresentationType, char > CustomAttributesPresentationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CustomAttributesPresentationType&
        getCustomAttributesPresentation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CustomAttributesPresentationType&
        getCustomAttributesPresentation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCustomAttributesPresentation (const CustomAttributesPresentationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCustomAttributesPresentation (::std::auto_ptr< CustomAttributesPresentationType > p);

        //@}

        /**
         * @name SelectedColor
         *
         * @brief Accessor and modifier functions for the %SelectedColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration SelectedColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectedColorType, char > SelectedColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectedColorType&
        getSelectedColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectedColorType&
        getSelectedColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectedColor (const SelectedColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectedColor (::std::auto_ptr< SelectedColorType > p);

        //@}

        /**
         * @name UnSelectedColor
         *
         * @brief Accessor and modifier functions for the %UnSelectedColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration UnSelectedColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UnSelectedColorType, char > UnSelectedColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UnSelectedColorType&
        getUnSelectedColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UnSelectedColorType&
        getUnSelectedColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUnSelectedColor (const UnSelectedColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUnSelectedColor (::std::auto_ptr< UnSelectedColorType > p);

        //@}

        /**
         * @name MinimumDemoCounterToAllowActivation
         *
         * @brief Accessor and modifier functions for the %MinimumDemoCounterToAllowActivation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MinimumDemoCounterToAllowActivationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinimumDemoCounterToAllowActivationType, char > MinimumDemoCounterToAllowActivationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinimumDemoCounterToAllowActivationType&
        getMinimumDemoCounterToAllowActivation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinimumDemoCounterToAllowActivationType&
        getMinimumDemoCounterToAllowActivation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMinimumDemoCounterToAllowActivation (const MinimumDemoCounterToAllowActivationType& x);

        //@}

        /**
         * @name AssistedActivationBySelection
         *
         * @brief Accessor and modifier functions for the %AssistedActivationBySelection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AssistedActivationBySelectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AssistedActivationBySelectionType, char > AssistedActivationBySelectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AssistedActivationBySelectionType&
        getAssistedActivationBySelection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AssistedActivationBySelectionType&
        getAssistedActivationBySelection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAssistedActivationBySelection (const AssistedActivationBySelectionType& x);

        //@}

        /**
         * @name ShowConfirmationButtons
         *
         * @brief Accessor and modifier functions for the %ShowConfirmationButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowConfirmationButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowConfirmationButtonsType, char > ShowConfirmationButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowConfirmationButtonsType&
        getShowConfirmationButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowConfirmationButtonsType&
        getShowConfirmationButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowConfirmationButtons (const ShowConfirmationButtonsType& x);

        //@}

        /**
         * @name CardStatisticsConfiguration
         *
         * @brief Accessor and modifier functions for the %CardStatisticsConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ActivatedCardStatisticsConfiguration CardStatisticsConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardStatisticsConfigurationType, char > CardStatisticsConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardStatisticsConfigurationType&
        getCardStatisticsConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardStatisticsConfigurationType&
        getCardStatisticsConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardStatisticsConfiguration (const CardStatisticsConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardStatisticsConfiguration (::std::auto_ptr< CardStatisticsConfigurationType > p);

        //@}

        /**
         * @name StatisticsTitleLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %StatisticsTitleLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration StatisticsTitleLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsTitleLabelConfigurationType, char > StatisticsTitleLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsTitleLabelConfigurationType&
        getStatisticsTitleLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsTitleLabelConfigurationType&
        getStatisticsTitleLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsTitleLabelConfiguration (const StatisticsTitleLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsTitleLabelConfiguration (::std::auto_ptr< StatisticsTitleLabelConfigurationType > p);

        //@}

        /**
         * @name StatisticsTitleColor
         *
         * @brief Accessor and modifier functions for the %StatisticsTitleColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration StatisticsTitleColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsTitleColorType, char > StatisticsTitleColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsTitleColorType&
        getStatisticsTitleColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsTitleColorType&
        getStatisticsTitleColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsTitleColor (const StatisticsTitleColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsTitleColor (::std::auto_ptr< StatisticsTitleColorType > p);

        //@}

        /**
         * @name ActivatedAfterInsertingCard
         *
         * @brief Accessor and modifier functions for the %ActivatedAfterInsertingCard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ActivatedAfterInsertingCardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ActivatedAfterInsertingCardType, char > ActivatedAfterInsertingCardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ActivatedAfterInsertingCardType&
        getActivatedAfterInsertingCard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ActivatedAfterInsertingCardType&
        getActivatedAfterInsertingCard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setActivatedAfterInsertingCard (const ActivatedAfterInsertingCardType& x);

        //@}

        /**
         * @name ShowAudioCheck
         *
         * @brief Accessor and modifier functions for the %ShowAudioCheck
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowAudioCheckType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowAudioCheckType, char > ShowAudioCheckTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowAudioCheckType&
        getShowAudioCheck () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowAudioCheckType&
        getShowAudioCheck ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowAudioCheck (const ShowAudioCheckType& x);

        //@}

        /**
         * @name CardActivationTotalCountConfiguration
         *
         * @brief Accessor and modifier functions for the %CardActivationTotalCountConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountConfiguration CardActivationTotalCountConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivationTotalCountConfigurationType, char > CardActivationTotalCountConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivationTotalCountConfigurationType&
        getCardActivationTotalCountConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivationTotalCountConfigurationType&
        getCardActivationTotalCountConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivationTotalCountConfiguration (const CardActivationTotalCountConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivationTotalCountConfiguration (::std::auto_ptr< CardActivationTotalCountConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CardActivatorFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CardActivatorFunctionalityConfiguration (const CustomAttributesPresentationType&,
                                                 const SelectedColorType&,
                                                 const UnSelectedColorType&,
                                                 const MinimumDemoCounterToAllowActivationType&,
                                                 const AssistedActivationBySelectionType&,
                                                 const ShowConfirmationButtonsType&,
                                                 const CardStatisticsConfigurationType&,
                                                 const StatisticsTitleLabelConfigurationType&,
                                                 const StatisticsTitleColorType&,
                                                 const ActivatedAfterInsertingCardType&,
                                                 const ShowAudioCheckType&,
                                                 const CardActivationTotalCountConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CardActivatorFunctionalityConfiguration (const CustomAttributesPresentationType&,
                                                 ::std::auto_ptr< SelectedColorType >&,
                                                 ::std::auto_ptr< UnSelectedColorType >&,
                                                 const MinimumDemoCounterToAllowActivationType&,
                                                 const AssistedActivationBySelectionType&,
                                                 const ShowConfirmationButtonsType&,
                                                 ::std::auto_ptr< CardStatisticsConfigurationType >&,
                                                 ::std::auto_ptr< StatisticsTitleLabelConfigurationType >&,
                                                 ::std::auto_ptr< StatisticsTitleColorType >&,
                                                 const ActivatedAfterInsertingCardType&,
                                                 const ShowAudioCheckType&,
                                                 ::std::auto_ptr< CardActivationTotalCountConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CardActivatorFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CardActivatorFunctionalityConfiguration (const CardActivatorFunctionalityConfiguration& x,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CardActivatorFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CardActivatorFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< CustomAttributesPresentationType > CustomAttributesPresentation_;
        ::xsd::cxx::tree::one< SelectedColorType > SelectedColor_;
        ::xsd::cxx::tree::one< UnSelectedColorType > UnSelectedColor_;
        ::xsd::cxx::tree::one< MinimumDemoCounterToAllowActivationType > MinimumDemoCounterToAllowActivation_;
        ::xsd::cxx::tree::one< AssistedActivationBySelectionType > AssistedActivationBySelection_;
        ::xsd::cxx::tree::one< ShowConfirmationButtonsType > ShowConfirmationButtons_;
        ::xsd::cxx::tree::one< CardStatisticsConfigurationType > CardStatisticsConfiguration_;
        ::xsd::cxx::tree::one< StatisticsTitleLabelConfigurationType > StatisticsTitleLabelConfiguration_;
        ::xsd::cxx::tree::one< StatisticsTitleColorType > StatisticsTitleColor_;
        ::xsd::cxx::tree::one< ActivatedAfterInsertingCardType > ActivatedAfterInsertingCard_;
        ::xsd::cxx::tree::one< ShowAudioCheckType > ShowAudioCheck_;
        ::xsd::cxx::tree::one< CardActivationTotalCountConfigurationType > CardActivationTotalCountConfiguration_;

        //@endcond
      };

      bool
      operator== (const CardActivatorFunctionalityConfiguration&, const CardActivatorFunctionalityConfiguration&);

      bool
      operator!= (const CardActivatorFunctionalityConfiguration&, const CardActivatorFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %CardRecoveryFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CardRecoveryFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name MinimumDemoCounterToAllowActivation
         *
         * @brief Accessor and modifier functions for the %MinimumDemoCounterToAllowActivation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MinimumDemoCounterToAllowActivationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinimumDemoCounterToAllowActivationType, char > MinimumDemoCounterToAllowActivationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinimumDemoCounterToAllowActivationType&
        getMinimumDemoCounterToAllowActivation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinimumDemoCounterToAllowActivationType&
        getMinimumDemoCounterToAllowActivation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMinimumDemoCounterToAllowActivation (const MinimumDemoCounterToAllowActivationType& x);

        //@}

        /**
         * @name ShowConfirmationButtons
         *
         * @brief Accessor and modifier functions for the %ShowConfirmationButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowConfirmationButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowConfirmationButtonsType, char > ShowConfirmationButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowConfirmationButtonsType&
        getShowConfirmationButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowConfirmationButtonsType&
        getShowConfirmationButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowConfirmationButtons (const ShowConfirmationButtonsType& x);

        //@}

        /**
         * @name CleanOnCorrectActivation
         *
         * @brief Accessor and modifier functions for the %CleanOnCorrectActivation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean CleanOnCorrectActivationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CleanOnCorrectActivationType, char > CleanOnCorrectActivationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CleanOnCorrectActivationType&
        getCleanOnCorrectActivation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CleanOnCorrectActivationType&
        getCleanOnCorrectActivation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCleanOnCorrectActivation (const CleanOnCorrectActivationType& x);

        //@}

        /**
         * @name CleanOnIncorrectActivation
         *
         * @brief Accessor and modifier functions for the %CleanOnIncorrectActivation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean CleanOnIncorrectActivationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CleanOnIncorrectActivationType, char > CleanOnIncorrectActivationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CleanOnIncorrectActivationType&
        getCleanOnIncorrectActivation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CleanOnIncorrectActivationType&
        getCleanOnIncorrectActivation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCleanOnIncorrectActivation (const CleanOnIncorrectActivationType& x);

        //@}

        /**
         * @name CardStatisticsConfiguration
         *
         * @brief Accessor and modifier functions for the %CardStatisticsConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ActivatedCardStatisticsConfiguration CardStatisticsConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardStatisticsConfigurationType, char > CardStatisticsConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardStatisticsConfigurationType&
        getCardStatisticsConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardStatisticsConfigurationType&
        getCardStatisticsConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardStatisticsConfiguration (const CardStatisticsConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardStatisticsConfiguration (::std::auto_ptr< CardStatisticsConfigurationType > p);

        //@}

        /**
         * @name StatisticsTitleLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %StatisticsTitleLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration StatisticsTitleLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsTitleLabelConfigurationType, char > StatisticsTitleLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsTitleLabelConfigurationType&
        getStatisticsTitleLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsTitleLabelConfigurationType&
        getStatisticsTitleLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsTitleLabelConfiguration (const StatisticsTitleLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsTitleLabelConfiguration (::std::auto_ptr< StatisticsTitleLabelConfigurationType > p);

        //@}

        /**
         * @name StatisticsTitleColor
         *
         * @brief Accessor and modifier functions for the %StatisticsTitleColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration StatisticsTitleColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsTitleColorType, char > StatisticsTitleColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsTitleColorType&
        getStatisticsTitleColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsTitleColorType&
        getStatisticsTitleColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsTitleColor (const StatisticsTitleColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsTitleColor (::std::auto_ptr< StatisticsTitleColorType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CardRecoveryFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CardRecoveryFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType&,
                                                const ShowConfirmationButtonsType&,
                                                const CleanOnCorrectActivationType&,
                                                const CleanOnIncorrectActivationType&,
                                                const CardStatisticsConfigurationType&,
                                                const StatisticsTitleLabelConfigurationType&,
                                                const StatisticsTitleColorType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CardRecoveryFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType&,
                                                const ShowConfirmationButtonsType&,
                                                const CleanOnCorrectActivationType&,
                                                const CleanOnIncorrectActivationType&,
                                                ::std::auto_ptr< CardStatisticsConfigurationType >&,
                                                ::std::auto_ptr< StatisticsTitleLabelConfigurationType >&,
                                                ::std::auto_ptr< StatisticsTitleColorType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CardRecoveryFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CardRecoveryFunctionalityConfiguration (const CardRecoveryFunctionalityConfiguration& x,
                                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CardRecoveryFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CardRecoveryFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< MinimumDemoCounterToAllowActivationType > MinimumDemoCounterToAllowActivation_;
        ::xsd::cxx::tree::one< ShowConfirmationButtonsType > ShowConfirmationButtons_;
        ::xsd::cxx::tree::one< CleanOnCorrectActivationType > CleanOnCorrectActivation_;
        ::xsd::cxx::tree::one< CleanOnIncorrectActivationType > CleanOnIncorrectActivation_;
        ::xsd::cxx::tree::one< CardStatisticsConfigurationType > CardStatisticsConfiguration_;
        ::xsd::cxx::tree::one< StatisticsTitleLabelConfigurationType > StatisticsTitleLabelConfiguration_;
        ::xsd::cxx::tree::one< StatisticsTitleColorType > StatisticsTitleColor_;

        //@endcond
      };

      bool
      operator== (const CardRecoveryFunctionalityConfiguration&, const CardRecoveryFunctionalityConfiguration&);

      bool
      operator!= (const CardRecoveryFunctionalityConfiguration&, const CardRecoveryFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %VoteDemoFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VoteDemoFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PersistVote
         *
         * @brief Accessor and modifier functions for the %PersistVote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean PersistVoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PersistVoteType, char > PersistVoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PersistVoteType&
        getPersistVote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PersistVoteType&
        getPersistVote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPersistVote (const PersistVoteType& x);

        //@}

        /**
         * @name ShowBarcodeInPreview
         *
         * @brief Accessor and modifier functions for the %ShowBarcodeInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBarcodeInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBarcodeInPreviewType, char > ShowBarcodeInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBarcodeInPreviewType&
        getShowBarcodeInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBarcodeInPreviewType&
        getShowBarcodeInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x);

        //@}

        /**
         * @name BarcodeInParams
         *
         * @brief Accessor and modifier functions for the %BarcodeInParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeInParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeInParamsType, char > BarcodeInParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeInParamsType&
        getBarcodeInParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeInParamsType&
        getBarcodeInParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeInParams (const BarcodeInParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > p);

        //@}

        /**
         * @name BarcodeOutParams
         *
         * @brief Accessor and modifier functions for the %BarcodeOutParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeOutParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeOutParamsType, char > BarcodeOutParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeOutParamsType&
        getBarcodeOutParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeOutParamsType&
        getBarcodeOutParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeOutParams (const BarcodeOutParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > p);

        //@}

        /**
         * @name LabelSelectedConfiguration
         *
         * @brief Accessor and modifier functions for the %LabelSelectedConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration LabelSelectedConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LabelSelectedConfigurationType, char > LabelSelectedConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LabelSelectedConfigurationType&
        getLabelSelectedConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LabelSelectedConfigurationType&
        getLabelSelectedConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabelSelectedConfiguration (const LabelSelectedConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabelSelectedConfiguration (::std::auto_ptr< LabelSelectedConfigurationType > p);

        //@}

        /**
         * @name LabelUnselectedConfiguration
         *
         * @brief Accessor and modifier functions for the %LabelUnselectedConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration LabelUnselectedConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LabelUnselectedConfigurationType, char > LabelUnselectedConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LabelUnselectedConfigurationType&
        getLabelUnselectedConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LabelUnselectedConfigurationType&
        getLabelUnselectedConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabelUnselectedConfiguration (const LabelUnselectedConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabelUnselectedConfiguration (::std::auto_ptr< LabelUnselectedConfigurationType > p);

        //@}

        /**
         * @name TitleFontConfiguration
         *
         * @brief Accessor and modifier functions for the %TitleFontConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitleFontConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleFontConfigurationType, char > TitleFontConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleFontConfigurationType&
        getTitleFontConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleFontConfigurationType&
        getTitleFontConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleFontConfiguration (const TitleFontConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleFontConfiguration (::std::auto_ptr< TitleFontConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VoteDemoFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VoteDemoFunctionalityConfiguration (const PersistVoteType&,
                                            const ShowBarcodeInPreviewType&,
                                            const BarcodeInParamsType&,
                                            const BarcodeOutParamsType&,
                                            const LabelSelectedConfigurationType&,
                                            const LabelUnselectedConfigurationType&,
                                            const TitleFontConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VoteDemoFunctionalityConfiguration (const PersistVoteType&,
                                            const ShowBarcodeInPreviewType&,
                                            const BarcodeInParamsType&,
                                            const BarcodeOutParamsType&,
                                            ::std::auto_ptr< LabelSelectedConfigurationType >&,
                                            ::std::auto_ptr< LabelUnselectedConfigurationType >&,
                                            ::std::auto_ptr< TitleFontConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteDemoFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteDemoFunctionalityConfiguration (const VoteDemoFunctionalityConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteDemoFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VoteDemoFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PersistVoteType > PersistVote_;
        ::xsd::cxx::tree::one< ShowBarcodeInPreviewType > ShowBarcodeInPreview_;
        ::xsd::cxx::tree::one< BarcodeInParamsType > BarcodeInParams_;
        ::xsd::cxx::tree::one< BarcodeOutParamsType > BarcodeOutParams_;
        ::xsd::cxx::tree::one< LabelSelectedConfigurationType > LabelSelectedConfiguration_;
        ::xsd::cxx::tree::one< LabelUnselectedConfigurationType > LabelUnselectedConfiguration_;
        ::xsd::cxx::tree::one< TitleFontConfigurationType > TitleFontConfiguration_;

        //@endcond
      };

      bool
      operator== (const VoteDemoFunctionalityConfiguration&, const VoteDemoFunctionalityConfiguration&);

      bool
      operator!= (const VoteDemoFunctionalityConfiguration&, const VoteDemoFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %CardAssistedActivationFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CardAssistedActivationFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name MinimumDemoCounterToAllowActivation
         *
         * @brief Accessor and modifier functions for the %MinimumDemoCounterToAllowActivation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MinimumDemoCounterToAllowActivationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinimumDemoCounterToAllowActivationType, char > MinimumDemoCounterToAllowActivationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinimumDemoCounterToAllowActivationType&
        getMinimumDemoCounterToAllowActivation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinimumDemoCounterToAllowActivationType&
        getMinimumDemoCounterToAllowActivation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMinimumDemoCounterToAllowActivation (const MinimumDemoCounterToAllowActivationType& x);

        //@}

        /**
         * @name PreviewTitlesColor
         *
         * @brief Accessor and modifier functions for the %PreviewTitlesColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration PreviewTitlesColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PreviewTitlesColorType, char > PreviewTitlesColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PreviewTitlesColorType&
        getPreviewTitlesColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PreviewTitlesColorType&
        getPreviewTitlesColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPreviewTitlesColor (const PreviewTitlesColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPreviewTitlesColor (::std::auto_ptr< PreviewTitlesColorType > p);

        //@}

        /**
         * @name PreviewContentsColor
         *
         * @brief Accessor and modifier functions for the %PreviewContentsColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration PreviewContentsColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PreviewContentsColorType, char > PreviewContentsColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PreviewContentsColorType&
        getPreviewContentsColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PreviewContentsColorType&
        getPreviewContentsColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPreviewContentsColor (const PreviewContentsColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPreviewContentsColor (::std::auto_ptr< PreviewContentsColorType > p);

        //@}

        /**
         * @name InstrunctionLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %InstrunctionLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InstrunctionLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InstrunctionLabelConfigurationType, char > InstrunctionLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InstrunctionLabelConfigurationType&
        getInstrunctionLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InstrunctionLabelConfigurationType&
        getInstrunctionLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInstrunctionLabelConfiguration (const InstrunctionLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInstrunctionLabelConfiguration (::std::auto_ptr< InstrunctionLabelConfigurationType > p);

        //@}

        /**
         * @name NameLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %NameLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration NameLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameLabelConfigurationType, char > NameLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NameLabelConfigurationType&
        getNameLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NameLabelConfigurationType&
        getNameLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNameLabelConfiguration (const NameLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNameLabelConfiguration (::std::auto_ptr< NameLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CardAssistedActivationFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CardAssistedActivationFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType&,
                                                          const PreviewTitlesColorType&,
                                                          const PreviewContentsColorType&,
                                                          const InstrunctionLabelConfigurationType&,
                                                          const NameLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CardAssistedActivationFunctionalityConfiguration (const MinimumDemoCounterToAllowActivationType&,
                                                          ::std::auto_ptr< PreviewTitlesColorType >&,
                                                          ::std::auto_ptr< PreviewContentsColorType >&,
                                                          ::std::auto_ptr< InstrunctionLabelConfigurationType >&,
                                                          ::std::auto_ptr< NameLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CardAssistedActivationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CardAssistedActivationFunctionalityConfiguration (const CardAssistedActivationFunctionalityConfiguration& x,
                                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CardAssistedActivationFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CardAssistedActivationFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< MinimumDemoCounterToAllowActivationType > MinimumDemoCounterToAllowActivation_;
        ::xsd::cxx::tree::one< PreviewTitlesColorType > PreviewTitlesColor_;
        ::xsd::cxx::tree::one< PreviewContentsColorType > PreviewContentsColor_;
        ::xsd::cxx::tree::one< InstrunctionLabelConfigurationType > InstrunctionLabelConfiguration_;
        ::xsd::cxx::tree::one< NameLabelConfigurationType > NameLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const CardAssistedActivationFunctionalityConfiguration&, const CardAssistedActivationFunctionalityConfiguration&);

      bool
      operator!= (const CardAssistedActivationFunctionalityConfiguration&, const CardAssistedActivationFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %PrinterDiagnosisConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PrinterDiagnosisConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PrintGraphicalForPresident
         *
         * @brief Accessor and modifier functions for the %PrintGraphicalForPresident
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean PrintGraphicalForPresidentType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrintGraphicalForPresidentType, char > PrintGraphicalForPresidentTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrintGraphicalForPresidentType&
        getPrintGraphicalForPresident () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrintGraphicalForPresidentType&
        getPrintGraphicalForPresident ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrintGraphicalForPresident (const PrintGraphicalForPresidentType& x);

        //@}

        /**
         * @name DoNotCheckBeforePrintDiagnostic
         *
         * @brief Accessor and modifier functions for the %DoNotCheckBeforePrintDiagnostic
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean DoNotCheckBeforePrintDiagnosticType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DoNotCheckBeforePrintDiagnosticType, char > DoNotCheckBeforePrintDiagnosticTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DoNotCheckBeforePrintDiagnosticType&
        getDoNotCheckBeforePrintDiagnostic () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DoNotCheckBeforePrintDiagnosticType&
        getDoNotCheckBeforePrintDiagnostic ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDoNotCheckBeforePrintDiagnostic (const DoNotCheckBeforePrintDiagnosticType& x);

        //@}

        /**
         * @name ButtonsWidth
         *
         * @brief Accessor and modifier functions for the %ButtonsWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonsWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsWidthType, char > ButtonsWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsWidthType&
        getButtonsWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsWidthType&
        getButtonsWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsWidth (const ButtonsWidthType& x);

        //@}

        /**
         * @name ButtonsHeight
         *
         * @brief Accessor and modifier functions for the %ButtonsHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonsHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsHeightType, char > ButtonsHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsHeightType&
        getButtonsHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsHeightType&
        getButtonsHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsHeight (const ButtonsHeightType& x);

        //@}

        /**
         * @name ButtonsFontSize
         *
         * @brief Accessor and modifier functions for the %ButtonsFontSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ButtonsFontSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsFontSizeType, char > ButtonsFontSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsFontSizeType&
        getButtonsFontSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsFontSizeType&
        getButtonsFontSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsFontSize (const ButtonsFontSizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PrinterDiagnosisConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PrinterDiagnosisConfiguration (const PrintGraphicalForPresidentType&,
                                       const DoNotCheckBeforePrintDiagnosticType&,
                                       const ButtonsWidthType&,
                                       const ButtonsHeightType&,
                                       const ButtonsFontSizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PrinterDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PrinterDiagnosisConfiguration (const PrinterDiagnosisConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PrinterDiagnosisConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PrinterDiagnosisConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PrintGraphicalForPresidentType > PrintGraphicalForPresident_;
        ::xsd::cxx::tree::one< DoNotCheckBeforePrintDiagnosticType > DoNotCheckBeforePrintDiagnostic_;
        ::xsd::cxx::tree::one< ButtonsWidthType > ButtonsWidth_;
        ::xsd::cxx::tree::one< ButtonsHeightType > ButtonsHeight_;
        ::xsd::cxx::tree::one< ButtonsFontSizeType > ButtonsFontSize_;

        //@endcond
      };

      bool
      operator== (const PrinterDiagnosisConfiguration&, const PrinterDiagnosisConfiguration&);

      bool
      operator!= (const PrinterDiagnosisConfiguration&, const PrinterDiagnosisConfiguration&);


      /**
       * @brief Class corresponding to the %GeneralDiagnosisConfiguration schema type.
       *
       * @nosubgrouping
       */
      class GeneralDiagnosisConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name DiagnosisLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %DiagnosisLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration DiagnosisLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosisLabelConfigurationType, char > DiagnosisLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DiagnosisLabelConfigurationType&
        getDiagnosisLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DiagnosisLabelConfigurationType&
        getDiagnosisLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDiagnosisLabelConfiguration (const DiagnosisLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDiagnosisLabelConfiguration (::std::auto_ptr< DiagnosisLabelConfigurationType > p);

        //@}

        /**
         * @name DiagnosisFooterLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %DiagnosisFooterLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration DiagnosisFooterLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosisFooterLabelConfigurationType, char > DiagnosisFooterLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DiagnosisFooterLabelConfigurationType&
        getDiagnosisFooterLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DiagnosisFooterLabelConfigurationType&
        getDiagnosisFooterLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDiagnosisFooterLabelConfiguration (const DiagnosisFooterLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDiagnosisFooterLabelConfiguration (::std::auto_ptr< DiagnosisFooterLabelConfigurationType > p);

        //@}

        /**
         * @name ResultErrorLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %ResultErrorLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration ResultErrorLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ResultErrorLabelConfigurationType, char > ResultErrorLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ResultErrorLabelConfigurationType&
        getResultErrorLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ResultErrorLabelConfigurationType&
        getResultErrorLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setResultErrorLabelConfiguration (const ResultErrorLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setResultErrorLabelConfiguration (::std::auto_ptr< ResultErrorLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        GeneralDiagnosisConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        GeneralDiagnosisConfiguration (const DiagnosisLabelConfigurationType&,
                                       const DiagnosisFooterLabelConfigurationType&,
                                       const ResultErrorLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        GeneralDiagnosisConfiguration (::std::auto_ptr< DiagnosisLabelConfigurationType >&,
                                       ::std::auto_ptr< DiagnosisFooterLabelConfigurationType >&,
                                       ::std::auto_ptr< ResultErrorLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        GeneralDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        GeneralDiagnosisConfiguration (const GeneralDiagnosisConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual GeneralDiagnosisConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~GeneralDiagnosisConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< DiagnosisLabelConfigurationType > DiagnosisLabelConfiguration_;
        ::xsd::cxx::tree::one< DiagnosisFooterLabelConfigurationType > DiagnosisFooterLabelConfiguration_;
        ::xsd::cxx::tree::one< ResultErrorLabelConfigurationType > ResultErrorLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const GeneralDiagnosisConfiguration&, const GeneralDiagnosisConfiguration&);

      bool
      operator!= (const GeneralDiagnosisConfiguration&, const GeneralDiagnosisConfiguration&);


      /**
       * @brief Class corresponding to the %TouchScreenCalibrationConfiguration schema type.
       *
       * @nosubgrouping
       */
      class TouchScreenCalibrationConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NumberOfCalibrationPoints
         *
         * @brief Accessor and modifier functions for the %NumberOfCalibrationPoints
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer NumberOfCalibrationPointsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberOfCalibrationPointsType, char > NumberOfCalibrationPointsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberOfCalibrationPointsType&
        getNumberOfCalibrationPoints () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberOfCalibrationPointsType&
        getNumberOfCalibrationPoints ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberOfCalibrationPoints (const NumberOfCalibrationPointsType& x);

        //@}

        /**
         * @name HeightOfButtons
         *
         * @brief Accessor and modifier functions for the %HeightOfButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer HeightOfButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeightOfButtonsType, char > HeightOfButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeightOfButtonsType&
        getHeightOfButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeightOfButtonsType&
        getHeightOfButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeightOfButtons (const HeightOfButtonsType& x);

        //@}

        /**
         * @name WidthOfButtons
         *
         * @brief Accessor and modifier functions for the %WidthOfButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer WidthOfButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WidthOfButtonsType, char > WidthOfButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WidthOfButtonsType&
        getWidthOfButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WidthOfButtonsType&
        getWidthOfButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWidthOfButtons (const WidthOfButtonsType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        TouchScreenCalibrationConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        TouchScreenCalibrationConfiguration (const NumberOfCalibrationPointsType&,
                                             const HeightOfButtonsType&,
                                             const WidthOfButtonsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TouchScreenCalibrationConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        TouchScreenCalibrationConfiguration (const TouchScreenCalibrationConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual TouchScreenCalibrationConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~TouchScreenCalibrationConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NumberOfCalibrationPointsType > NumberOfCalibrationPoints_;
        ::xsd::cxx::tree::one< HeightOfButtonsType > HeightOfButtons_;
        ::xsd::cxx::tree::one< WidthOfButtonsType > WidthOfButtons_;

        //@endcond
      };

      bool
      operator== (const TouchScreenCalibrationConfiguration&, const TouchScreenCalibrationConfiguration&);

      bool
      operator!= (const TouchScreenCalibrationConfiguration&, const TouchScreenCalibrationConfiguration&);


      /**
       * @brief Class corresponding to the %EventSoundsConfiguration schema type.
       *
       * @nosubgrouping
       */
      class EventSoundsConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PMInstalationSound
         *
         * @brief Accessor and modifier functions for the %PMInstalationSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String PMInstalationSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PMInstalationSoundType, char > PMInstalationSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PMInstalationSoundType&
        getPMInstalationSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PMInstalationSoundType&
        getPMInstalationSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPMInstalationSound (const PMInstalationSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPMInstalationSound (::std::auto_ptr< PMInstalationSoundType > p);

        //@}

        /**
         * @name VMInstalationSound
         *
         * @brief Accessor and modifier functions for the %VMInstalationSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VMInstalationSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VMInstalationSoundType, char > VMInstalationSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VMInstalationSoundType&
        getVMInstalationSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VMInstalationSoundType&
        getVMInstalationSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVMInstalationSound (const VMInstalationSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVMInstalationSound (::std::auto_ptr< VMInstalationSoundType > p);

        //@}

        /**
         * @name AuthenticationValidPasswordSound
         *
         * @brief Accessor and modifier functions for the %AuthenticationValidPasswordSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String AuthenticationValidPasswordSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AuthenticationValidPasswordSoundType, char > AuthenticationValidPasswordSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AuthenticationValidPasswordSoundType&
        getAuthenticationValidPasswordSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AuthenticationValidPasswordSoundType&
        getAuthenticationValidPasswordSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAuthenticationValidPasswordSound (const AuthenticationValidPasswordSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAuthenticationValidPasswordSound (::std::auto_ptr< AuthenticationValidPasswordSoundType > p);

        //@}

        /**
         * @name AuthenticationInvalidPasswordSound
         *
         * @brief Accessor and modifier functions for the %AuthenticationInvalidPasswordSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String AuthenticationInvalidPasswordSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AuthenticationInvalidPasswordSoundType, char > AuthenticationInvalidPasswordSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AuthenticationInvalidPasswordSoundType&
        getAuthenticationInvalidPasswordSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AuthenticationInvalidPasswordSoundType&
        getAuthenticationInvalidPasswordSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAuthenticationInvalidPasswordSound (const AuthenticationInvalidPasswordSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAuthenticationInvalidPasswordSound (::std::auto_ptr< AuthenticationInvalidPasswordSoundType > p);

        //@}

        /**
         * @name VotingExperienceSound
         *
         * @brief Accessor and modifier functions for the %VotingExperienceSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceSoundType, char > VotingExperienceSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceSoundType&
        getVotingExperienceSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceSoundType&
        getVotingExperienceSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceSound (const VotingExperienceSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceSound (::std::auto_ptr< VotingExperienceSoundType > p);

        //@}

        /**
         * @name BallotOptionSelectSound
         *
         * @brief Accessor and modifier functions for the %BallotOptionSelectSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BallotOptionSelectSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionSelectSoundType, char > BallotOptionSelectSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotOptionSelectSoundType&
        getBallotOptionSelectSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotOptionSelectSoundType&
        getBallotOptionSelectSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotOptionSelectSound (const BallotOptionSelectSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionSelectSound (::std::auto_ptr< BallotOptionSelectSoundType > p);

        //@}

        /**
         * @name PartySelectSound
         *
         * @brief Accessor and modifier functions for the %PartySelectSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String PartySelectSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartySelectSoundType, char > PartySelectSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartySelectSoundType&
        getPartySelectSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartySelectSoundType&
        getPartySelectSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartySelectSound (const PartySelectSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartySelectSound (::std::auto_ptr< PartySelectSoundType > p);

        //@}

        /**
         * @name DiagnosisSound
         *
         * @brief Accessor and modifier functions for the %DiagnosisSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String DiagnosisSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosisSoundType, char > DiagnosisSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DiagnosisSoundType&
        getDiagnosisSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DiagnosisSoundType&
        getDiagnosisSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDiagnosisSound (const DiagnosisSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDiagnosisSound (::std::auto_ptr< DiagnosisSoundType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        EventSoundsConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        EventSoundsConfiguration (const PMInstalationSoundType&,
                                  const VMInstalationSoundType&,
                                  const AuthenticationValidPasswordSoundType&,
                                  const AuthenticationInvalidPasswordSoundType&,
                                  const VotingExperienceSoundType&,
                                  const BallotOptionSelectSoundType&,
                                  const PartySelectSoundType&,
                                  const DiagnosisSoundType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        EventSoundsConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        EventSoundsConfiguration (const EventSoundsConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual EventSoundsConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~EventSoundsConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PMInstalationSoundType > PMInstalationSound_;
        ::xsd::cxx::tree::one< VMInstalationSoundType > VMInstalationSound_;
        ::xsd::cxx::tree::one< AuthenticationValidPasswordSoundType > AuthenticationValidPasswordSound_;
        ::xsd::cxx::tree::one< AuthenticationInvalidPasswordSoundType > AuthenticationInvalidPasswordSound_;
        ::xsd::cxx::tree::one< VotingExperienceSoundType > VotingExperienceSound_;
        ::xsd::cxx::tree::one< BallotOptionSelectSoundType > BallotOptionSelectSound_;
        ::xsd::cxx::tree::one< PartySelectSoundType > PartySelectSound_;
        ::xsd::cxx::tree::one< DiagnosisSoundType > DiagnosisSound_;

        //@endcond
      };

      bool
      operator== (const EventSoundsConfiguration&, const EventSoundsConfiguration&);

      bool
      operator!= (const EventSoundsConfiguration&, const EventSoundsConfiguration&);


      /**
       * @brief Class corresponding to the %BarcodeDiagnosisConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BarcodeDiagnosisConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TimeOut
         *
         * @brief Accessor and modifier functions for the %TimeOut
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer TimeOutType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeOutType, char > TimeOutTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeOutType&
        getTimeOut () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeOutType&
        getTimeOut ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeOut (const TimeOutType& x);

        //@}

        /**
         * @name StringToEncode
         *
         * @brief Accessor and modifier functions for the %StringToEncode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String StringToEncodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StringToEncodeType, char > StringToEncodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StringToEncodeType&
        getStringToEncode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StringToEncodeType&
        getStringToEncode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStringToEncode (const StringToEncodeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStringToEncode (::std::auto_ptr< StringToEncodeType > p);

        //@}

        /**
         * @name PrintAutomaticBarcode
         *
         * @brief Accessor and modifier functions for the %PrintAutomaticBarcode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean PrintAutomaticBarcodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrintAutomaticBarcodeType, char > PrintAutomaticBarcodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrintAutomaticBarcodeType&
        getPrintAutomaticBarcode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrintAutomaticBarcodeType&
        getPrintAutomaticBarcode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrintAutomaticBarcode (const PrintAutomaticBarcodeType& x);

        //@}

        /**
         * @name BarcodeCommandsName
         *
         * @brief Accessor and modifier functions for the %BarcodeCommandsName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeCommandsNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeCommandsNameType, char > BarcodeCommandsNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeCommandsNameType&
        getBarcodeCommandsName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeCommandsNameType&
        getBarcodeCommandsName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeCommandsName (const BarcodeCommandsNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeCommandsName (::std::auto_ptr< BarcodeCommandsNameType > p);

        //@}

        /**
         * @name SkipPrinterError
         *
         * @brief Accessor and modifier functions for the %SkipPrinterError
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean SkipPrinterErrorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SkipPrinterErrorType, char > SkipPrinterErrorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SkipPrinterErrorType&
        getSkipPrinterError () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SkipPrinterErrorType&
        getSkipPrinterError ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSkipPrinterError (const SkipPrinterErrorType& x);

        //@}

        /**
         * @name BarcodeInParams
         *
         * @brief Accessor and modifier functions for the %BarcodeInParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeInParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeInParamsType, char > BarcodeInParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeInParamsType&
        getBarcodeInParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeInParamsType&
        getBarcodeInParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeInParams (const BarcodeInParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > p);

        //@}

        /**
         * @name BarcodeOutParams
         *
         * @brief Accessor and modifier functions for the %BarcodeOutParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeOutParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeOutParamsType, char > BarcodeOutParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeOutParamsType&
        getBarcodeOutParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeOutParamsType&
        getBarcodeOutParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeOutParams (const BarcodeOutParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BarcodeDiagnosisConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BarcodeDiagnosisConfiguration (const TimeOutType&,
                                       const StringToEncodeType&,
                                       const PrintAutomaticBarcodeType&,
                                       const BarcodeCommandsNameType&,
                                       const SkipPrinterErrorType&,
                                       const BarcodeInParamsType&,
                                       const BarcodeOutParamsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BarcodeDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BarcodeDiagnosisConfiguration (const BarcodeDiagnosisConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BarcodeDiagnosisConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BarcodeDiagnosisConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TimeOutType > TimeOut_;
        ::xsd::cxx::tree::one< StringToEncodeType > StringToEncode_;
        ::xsd::cxx::tree::one< PrintAutomaticBarcodeType > PrintAutomaticBarcode_;
        ::xsd::cxx::tree::one< BarcodeCommandsNameType > BarcodeCommandsName_;
        ::xsd::cxx::tree::one< SkipPrinterErrorType > SkipPrinterError_;
        ::xsd::cxx::tree::one< BarcodeInParamsType > BarcodeInParams_;
        ::xsd::cxx::tree::one< BarcodeOutParamsType > BarcodeOutParams_;

        //@endcond
      };

      bool
      operator== (const BarcodeDiagnosisConfiguration&, const BarcodeDiagnosisConfiguration&);

      bool
      operator!= (const BarcodeDiagnosisConfiguration&, const BarcodeDiagnosisConfiguration&);


      /**
       * @brief Class corresponding to the %BrightnessDiagnosisConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BrightnessDiagnosisConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TimeDelayButtons
         *
         * @brief Accessor and modifier functions for the %TimeDelayButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer TimeDelayButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeDelayButtonsType, char > TimeDelayButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeDelayButtonsType&
        getTimeDelayButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeDelayButtonsType&
        getTimeDelayButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeDelayButtons (const TimeDelayButtonsType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BrightnessDiagnosisConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BrightnessDiagnosisConfiguration (const TimeDelayButtonsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BrightnessDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BrightnessDiagnosisConfiguration (const BrightnessDiagnosisConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BrightnessDiagnosisConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BrightnessDiagnosisConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TimeDelayButtonsType > TimeDelayButtons_;

        //@endcond
      };

      bool
      operator== (const BrightnessDiagnosisConfiguration&, const BrightnessDiagnosisConfiguration&);

      bool
      operator!= (const BrightnessDiagnosisConfiguration&, const BrightnessDiagnosisConfiguration&);


      /**
       * @brief Class corresponding to the %AllDiagnosisConfiguration schema type.
       *
       * @nosubgrouping
       */
      class AllDiagnosisConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name DiagnosticToApply
         *
         * @brief Accessor and modifier functions for the %DiagnosticToApply
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DiagnosticType DiagnosticToApplyType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< DiagnosticToApplyType > DiagnosticToApplySequence;

        /**
         * @brief Element iterator type.
         */
        typedef DiagnosticToApplySequence::iterator DiagnosticToApplyIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef DiagnosticToApplySequence::const_iterator DiagnosticToApplyConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosticToApplyType, char > DiagnosticToApplyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const DiagnosticToApplySequence&
        getDiagnosticToApply () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        DiagnosticToApplySequence&
        getDiagnosticToApply ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setDiagnosticToApply (const DiagnosticToApplySequence& s);

        //@}

        /**
         * @name AlarmDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %AlarmDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer AlarmDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AlarmDiagnosisWaitTimeType, char > AlarmDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AlarmDiagnosisWaitTimeType&
        getAlarmDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AlarmDiagnosisWaitTimeType&
        getAlarmDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAlarmDiagnosisWaitTime (const AlarmDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name BarcodeDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %BarcodeDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer BarcodeDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeDiagnosisWaitTimeType, char > BarcodeDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeDiagnosisWaitTimeType&
        getBarcodeDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeDiagnosisWaitTimeType&
        getBarcodeDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeDiagnosisWaitTime (const BarcodeDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name ContrastDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %ContrastDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer ContrastDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContrastDiagnosisWaitTimeType, char > ContrastDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContrastDiagnosisWaitTimeType&
        getContrastDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContrastDiagnosisWaitTimeType&
        getContrastDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContrastDiagnosisWaitTime (const ContrastDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name CalibrationDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %CalibrationDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer CalibrationDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CalibrationDiagnosisWaitTimeType, char > CalibrationDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CalibrationDiagnosisWaitTimeType&
        getCalibrationDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CalibrationDiagnosisWaitTimeType&
        getCalibrationDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCalibrationDiagnosisWaitTime (const CalibrationDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name FlashDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %FlashDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FlashDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FlashDiagnosisWaitTimeType, char > FlashDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FlashDiagnosisWaitTimeType&
        getFlashDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FlashDiagnosisWaitTimeType&
        getFlashDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFlashDiagnosisWaitTime (const FlashDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name PrinterDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %PrinterDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PrinterDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrinterDiagnosisWaitTimeType, char > PrinterDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrinterDiagnosisWaitTimeType&
        getPrinterDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrinterDiagnosisWaitTimeType&
        getPrinterDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrinterDiagnosisWaitTime (const PrinterDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name SmartcardDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %SmartcardDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SmartcardDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SmartcardDiagnosisWaitTimeType, char > SmartcardDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SmartcardDiagnosisWaitTimeType&
        getSmartcardDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SmartcardDiagnosisWaitTimeType&
        getSmartcardDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSmartcardDiagnosisWaitTime (const SmartcardDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name PrinterDiagnosisWaitTimeOnOk
         *
         * @brief Accessor and modifier functions for the %PrinterDiagnosisWaitTimeOnOk
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PrinterDiagnosisWaitTimeOnOkType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrinterDiagnosisWaitTimeOnOkType, char > PrinterDiagnosisWaitTimeOnOkTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrinterDiagnosisWaitTimeOnOkType&
        getPrinterDiagnosisWaitTimeOnOk () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrinterDiagnosisWaitTimeOnOkType&
        getPrinterDiagnosisWaitTimeOnOk ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrinterDiagnosisWaitTimeOnOk (const PrinterDiagnosisWaitTimeOnOkType& x);

        //@}

        /**
         * @name PrinterDiagnosisWaitTimeOnCancel
         *
         * @brief Accessor and modifier functions for the %PrinterDiagnosisWaitTimeOnCancel
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PrinterDiagnosisWaitTimeOnCancelType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrinterDiagnosisWaitTimeOnCancelType, char > PrinterDiagnosisWaitTimeOnCancelTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrinterDiagnosisWaitTimeOnCancelType&
        getPrinterDiagnosisWaitTimeOnCancel () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrinterDiagnosisWaitTimeOnCancelType&
        getPrinterDiagnosisWaitTimeOnCancel ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrinterDiagnosisWaitTimeOnCancel (const PrinterDiagnosisWaitTimeOnCancelType& x);

        //@}

        /**
         * @name CalibrationDiagnosisWaitTimeOnOk
         *
         * @brief Accessor and modifier functions for the %CalibrationDiagnosisWaitTimeOnOk
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer CalibrationDiagnosisWaitTimeOnOkType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CalibrationDiagnosisWaitTimeOnOkType, char > CalibrationDiagnosisWaitTimeOnOkTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CalibrationDiagnosisWaitTimeOnOkType&
        getCalibrationDiagnosisWaitTimeOnOk () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CalibrationDiagnosisWaitTimeOnOkType&
        getCalibrationDiagnosisWaitTimeOnOk ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCalibrationDiagnosisWaitTimeOnOk (const CalibrationDiagnosisWaitTimeOnOkType& x);

        //@}

        /**
         * @name ContrastDiagnosisWaitTimeOnOk
         *
         * @brief Accessor and modifier functions for the %ContrastDiagnosisWaitTimeOnOk
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer ContrastDiagnosisWaitTimeOnOkType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContrastDiagnosisWaitTimeOnOkType, char > ContrastDiagnosisWaitTimeOnOkTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContrastDiagnosisWaitTimeOnOkType&
        getContrastDiagnosisWaitTimeOnOk () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContrastDiagnosisWaitTimeOnOkType&
        getContrastDiagnosisWaitTimeOnOk ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContrastDiagnosisWaitTimeOnOk (const ContrastDiagnosisWaitTimeOnOkType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        AllDiagnosisConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AllDiagnosisConfiguration (const AlarmDiagnosisWaitTimeType&,
                                   const BarcodeDiagnosisWaitTimeType&,
                                   const ContrastDiagnosisWaitTimeType&,
                                   const CalibrationDiagnosisWaitTimeType&,
                                   const FlashDiagnosisWaitTimeType&,
                                   const PrinterDiagnosisWaitTimeType&,
                                   const SmartcardDiagnosisWaitTimeType&,
                                   const PrinterDiagnosisWaitTimeOnOkType&,
                                   const PrinterDiagnosisWaitTimeOnCancelType&,
                                   const CalibrationDiagnosisWaitTimeOnOkType&,
                                   const ContrastDiagnosisWaitTimeOnOkType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AllDiagnosisConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AllDiagnosisConfiguration (const AllDiagnosisConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AllDiagnosisConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~AllDiagnosisConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        DiagnosticToApplySequence DiagnosticToApply_;
        ::xsd::cxx::tree::one< AlarmDiagnosisWaitTimeType > AlarmDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< BarcodeDiagnosisWaitTimeType > BarcodeDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< ContrastDiagnosisWaitTimeType > ContrastDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< CalibrationDiagnosisWaitTimeType > CalibrationDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< FlashDiagnosisWaitTimeType > FlashDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< PrinterDiagnosisWaitTimeType > PrinterDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< SmartcardDiagnosisWaitTimeType > SmartcardDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< PrinterDiagnosisWaitTimeOnOkType > PrinterDiagnosisWaitTimeOnOk_;
        ::xsd::cxx::tree::one< PrinterDiagnosisWaitTimeOnCancelType > PrinterDiagnosisWaitTimeOnCancel_;
        ::xsd::cxx::tree::one< CalibrationDiagnosisWaitTimeOnOkType > CalibrationDiagnosisWaitTimeOnOk_;
        ::xsd::cxx::tree::one< ContrastDiagnosisWaitTimeOnOkType > ContrastDiagnosisWaitTimeOnOk_;

        //@endcond
      };

      bool
      operator== (const AllDiagnosisConfiguration&, const AllDiagnosisConfiguration&);

      bool
      operator!= (const AllDiagnosisConfiguration&, const AllDiagnosisConfiguration&);


      /**
       * @brief Class corresponding to the %AutomaticWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class AutomaticWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name DiagnosticToApply
         *
         * @brief Accessor and modifier functions for the %DiagnosticToApply
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DiagnosticType DiagnosticToApplyType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< DiagnosticToApplyType > DiagnosticToApplySequence;

        /**
         * @brief Element iterator type.
         */
        typedef DiagnosticToApplySequence::iterator DiagnosticToApplyIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef DiagnosticToApplySequence::const_iterator DiagnosticToApplyConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosticToApplyType, char > DiagnosticToApplyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const DiagnosticToApplySequence&
        getDiagnosticToApply () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        DiagnosticToApplySequence&
        getDiagnosticToApply ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setDiagnosticToApply (const DiagnosticToApplySequence& s);

        //@}

        /**
         * @name BlockDiagnostic
         *
         * @brief Accessor and modifier functions for the %BlockDiagnostic
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean BlockDiagnosticType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockDiagnosticType, char > BlockDiagnosticTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BlockDiagnosticType&
        getBlockDiagnostic () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BlockDiagnosticType&
        getBlockDiagnostic ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlockDiagnostic (const BlockDiagnosticType& x);

        //@}

        /**
         * @name BlockDiagnosticTitle
         *
         * @brief Accessor and modifier functions for the %BlockDiagnosticTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration BlockDiagnosticTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockDiagnosticTitleType, char > BlockDiagnosticTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BlockDiagnosticTitleType&
        getBlockDiagnosticTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BlockDiagnosticTitleType&
        getBlockDiagnosticTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlockDiagnosticTitle (const BlockDiagnosticTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBlockDiagnosticTitle (::std::auto_ptr< BlockDiagnosticTitleType > p);

        //@}

        /**
         * @name BlockDiagnosticButton
         *
         * @brief Accessor and modifier functions for the %BlockDiagnosticButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration BlockDiagnosticButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockDiagnosticButtonType, char > BlockDiagnosticButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BlockDiagnosticButtonType&
        getBlockDiagnosticButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BlockDiagnosticButtonType&
        getBlockDiagnosticButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlockDiagnosticButton (const BlockDiagnosticButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBlockDiagnosticButton (::std::auto_ptr< BlockDiagnosticButtonType > p);

        //@}

        /**
         * @name UseOkButtonOnSomeNonMandatoryDiagnosticFailed
         *
         * @brief Accessor and modifier functions for the %UseOkButtonOnSomeNonMandatoryDiagnosticFailed
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseOkButtonOnSomeNonMandatoryDiagnosticFailedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseOkButtonOnSomeNonMandatoryDiagnosticFailedType, char > UseOkButtonOnSomeNonMandatoryDiagnosticFailedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType&
        getUseOkButtonOnSomeNonMandatoryDiagnosticFailed () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseOkButtonOnSomeNonMandatoryDiagnosticFailedType&
        getUseOkButtonOnSomeNonMandatoryDiagnosticFailed ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseOkButtonOnSomeNonMandatoryDiagnosticFailed (const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType& x);

        //@}

        /**
         * @name UseShutDownButtonOnSomeMandatoryDiagnosticFailed
         *
         * @brief Accessor and modifier functions for the %UseShutDownButtonOnSomeMandatoryDiagnosticFailed
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseShutDownButtonOnSomeMandatoryDiagnosticFailedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseShutDownButtonOnSomeMandatoryDiagnosticFailedType, char > UseShutDownButtonOnSomeMandatoryDiagnosticFailedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType&
        getUseShutDownButtonOnSomeMandatoryDiagnosticFailed () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseShutDownButtonOnSomeMandatoryDiagnosticFailedType&
        getUseShutDownButtonOnSomeMandatoryDiagnosticFailed ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseShutDownButtonOnSomeMandatoryDiagnosticFailed (const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType& x);

        //@}

        /**
         * @name AlarmDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %AlarmDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer AlarmDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AlarmDiagnosisWaitTimeType, char > AlarmDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AlarmDiagnosisWaitTimeType&
        getAlarmDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AlarmDiagnosisWaitTimeType&
        getAlarmDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAlarmDiagnosisWaitTime (const AlarmDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name BarcodeDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %BarcodeDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer BarcodeDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeDiagnosisWaitTimeType, char > BarcodeDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeDiagnosisWaitTimeType&
        getBarcodeDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeDiagnosisWaitTimeType&
        getBarcodeDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeDiagnosisWaitTime (const BarcodeDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name FlashDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %FlashDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer FlashDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FlashDiagnosisWaitTimeType, char > FlashDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FlashDiagnosisWaitTimeType&
        getFlashDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FlashDiagnosisWaitTimeType&
        getFlashDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFlashDiagnosisWaitTime (const FlashDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name PrinterDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %PrinterDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer PrinterDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrinterDiagnosisWaitTimeType, char > PrinterDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrinterDiagnosisWaitTimeType&
        getPrinterDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrinterDiagnosisWaitTimeType&
        getPrinterDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrinterDiagnosisWaitTime (const PrinterDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name SmartcardDiagnosisWaitTime
         *
         * @brief Accessor and modifier functions for the %SmartcardDiagnosisWaitTime
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer SmartcardDiagnosisWaitTimeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SmartcardDiagnosisWaitTimeType, char > SmartcardDiagnosisWaitTimeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SmartcardDiagnosisWaitTimeType&
        getSmartcardDiagnosisWaitTime () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SmartcardDiagnosisWaitTimeType&
        getSmartcardDiagnosisWaitTime ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSmartcardDiagnosisWaitTime (const SmartcardDiagnosisWaitTimeType& x);

        //@}

        /**
         * @name DiagnosticReviewWidth
         *
         * @brief Accessor and modifier functions for the %DiagnosticReviewWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger DiagnosticReviewWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosticReviewWidthType, char > DiagnosticReviewWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DiagnosticReviewWidthType&
        getDiagnosticReviewWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DiagnosticReviewWidthType&
        getDiagnosticReviewWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDiagnosticReviewWidth (const DiagnosticReviewWidthType& x);

        //@}

        /**
         * @name DiagnosticReviewHeight
         *
         * @brief Accessor and modifier functions for the %DiagnosticReviewHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger DiagnosticReviewHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosticReviewHeightType, char > DiagnosticReviewHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DiagnosticReviewHeightType&
        getDiagnosticReviewHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DiagnosticReviewHeightType&
        getDiagnosticReviewHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDiagnosticReviewHeight (const DiagnosticReviewHeightType& x);

        //@}

        /**
         * @name DiagnosticReviewLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %DiagnosticReviewLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration DiagnosticReviewLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DiagnosticReviewLabelConfigurationType, char > DiagnosticReviewLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DiagnosticReviewLabelConfigurationType&
        getDiagnosticReviewLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DiagnosticReviewLabelConfigurationType&
        getDiagnosticReviewLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDiagnosticReviewLabelConfiguration (const DiagnosticReviewLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDiagnosticReviewLabelConfiguration (::std::auto_ptr< DiagnosticReviewLabelConfigurationType > p);

        //@}

        /**
         * @name ShowFooterInAutoDiagnosis
         *
         * @brief Accessor and modifier functions for the %ShowFooterInAutoDiagnosis
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowFooterInAutoDiagnosisType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowFooterInAutoDiagnosisType, char > ShowFooterInAutoDiagnosisTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowFooterInAutoDiagnosisType&
        getShowFooterInAutoDiagnosis () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowFooterInAutoDiagnosisType&
        getShowFooterInAutoDiagnosis ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowFooterInAutoDiagnosis (const ShowFooterInAutoDiagnosisType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        AutomaticWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AutomaticWindowConfiguration (const BlockDiagnosticType&,
                                      const BlockDiagnosticTitleType&,
                                      const BlockDiagnosticButtonType&,
                                      const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType&,
                                      const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType&,
                                      const AlarmDiagnosisWaitTimeType&,
                                      const BarcodeDiagnosisWaitTimeType&,
                                      const FlashDiagnosisWaitTimeType&,
                                      const PrinterDiagnosisWaitTimeType&,
                                      const SmartcardDiagnosisWaitTimeType&,
                                      const DiagnosticReviewWidthType&,
                                      const DiagnosticReviewHeightType&,
                                      const DiagnosticReviewLabelConfigurationType&,
                                      const ShowFooterInAutoDiagnosisType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        AutomaticWindowConfiguration (const BlockDiagnosticType&,
                                      ::std::auto_ptr< BlockDiagnosticTitleType >&,
                                      ::std::auto_ptr< BlockDiagnosticButtonType >&,
                                      const UseOkButtonOnSomeNonMandatoryDiagnosticFailedType&,
                                      const UseShutDownButtonOnSomeMandatoryDiagnosticFailedType&,
                                      const AlarmDiagnosisWaitTimeType&,
                                      const BarcodeDiagnosisWaitTimeType&,
                                      const FlashDiagnosisWaitTimeType&,
                                      const PrinterDiagnosisWaitTimeType&,
                                      const SmartcardDiagnosisWaitTimeType&,
                                      const DiagnosticReviewWidthType&,
                                      const DiagnosticReviewHeightType&,
                                      ::std::auto_ptr< DiagnosticReviewLabelConfigurationType >&,
                                      const ShowFooterInAutoDiagnosisType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AutomaticWindowConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AutomaticWindowConfiguration (const AutomaticWindowConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AutomaticWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~AutomaticWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        DiagnosticToApplySequence DiagnosticToApply_;
        ::xsd::cxx::tree::one< BlockDiagnosticType > BlockDiagnostic_;
        ::xsd::cxx::tree::one< BlockDiagnosticTitleType > BlockDiagnosticTitle_;
        ::xsd::cxx::tree::one< BlockDiagnosticButtonType > BlockDiagnosticButton_;
        ::xsd::cxx::tree::one< UseOkButtonOnSomeNonMandatoryDiagnosticFailedType > UseOkButtonOnSomeNonMandatoryDiagnosticFailed_;
        ::xsd::cxx::tree::one< UseShutDownButtonOnSomeMandatoryDiagnosticFailedType > UseShutDownButtonOnSomeMandatoryDiagnosticFailed_;
        ::xsd::cxx::tree::one< AlarmDiagnosisWaitTimeType > AlarmDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< BarcodeDiagnosisWaitTimeType > BarcodeDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< FlashDiagnosisWaitTimeType > FlashDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< PrinterDiagnosisWaitTimeType > PrinterDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< SmartcardDiagnosisWaitTimeType > SmartcardDiagnosisWaitTime_;
        ::xsd::cxx::tree::one< DiagnosticReviewWidthType > DiagnosticReviewWidth_;
        ::xsd::cxx::tree::one< DiagnosticReviewHeightType > DiagnosticReviewHeight_;
        ::xsd::cxx::tree::one< DiagnosticReviewLabelConfigurationType > DiagnosticReviewLabelConfiguration_;
        ::xsd::cxx::tree::one< ShowFooterInAutoDiagnosisType > ShowFooterInAutoDiagnosis_;

        //@endcond
      };

      bool
      operator== (const AutomaticWindowConfiguration&, const AutomaticWindowConfiguration&);

      bool
      operator!= (const AutomaticWindowConfiguration&, const AutomaticWindowConfiguration&);


      /**
       * @brief Class corresponding to the %ContingencyCardWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ContingencyCardWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name RetryButtonConf
         *
         * @brief Accessor and modifier functions for the %RetryButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration RetryButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RetryButtonConfType, char > RetryButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RetryButtonConfType&
        getRetryButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RetryButtonConfType&
        getRetryButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRetryButtonConf (const RetryButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRetryButtonConf (::std::auto_ptr< RetryButtonConfType > p);

        //@}

        /**
         * @name ShutdownButtonConf
         *
         * @brief Accessor and modifier functions for the %ShutdownButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration ShutdownButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShutdownButtonConfType, char > ShutdownButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShutdownButtonConfType&
        getShutdownButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShutdownButtonConfType&
        getShutdownButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShutdownButtonConf (const ShutdownButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setShutdownButtonConf (::std::auto_ptr< ShutdownButtonConfType > p);

        //@}

        /**
         * @name TitleFontConf
         *
         * @brief Accessor and modifier functions for the %TitleFontConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitleFontConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleFontConfType, char > TitleFontConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleFontConfType&
        getTitleFontConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleFontConfType&
        getTitleFontConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleFontConf (const TitleFontConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleFontConf (::std::auto_ptr< TitleFontConfType > p);

        //@}

        /**
         * @name TextFontConf
         *
         * @brief Accessor and modifier functions for the %TextFontConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TextFontConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextFontConfType, char > TextFontConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextFontConfType&
        getTextFontConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextFontConfType&
        getTextFontConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextFontConf (const TextFontConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextFontConf (::std::auto_ptr< TextFontConfType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ContingencyCardWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ContingencyCardWidgetConfiguration (const RetryButtonConfType&,
                                            const ShutdownButtonConfType&,
                                            const TitleFontConfType&,
                                            const TextFontConfType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ContingencyCardWidgetConfiguration (::std::auto_ptr< RetryButtonConfType >&,
                                            ::std::auto_ptr< ShutdownButtonConfType >&,
                                            ::std::auto_ptr< TitleFontConfType >&,
                                            ::std::auto_ptr< TextFontConfType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ContingencyCardWidgetConfiguration (const ::xercesc::DOMElement& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ContingencyCardWidgetConfiguration (const ContingencyCardWidgetConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ContingencyCardWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ContingencyCardWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< RetryButtonConfType > RetryButtonConf_;
        ::xsd::cxx::tree::one< ShutdownButtonConfType > ShutdownButtonConf_;
        ::xsd::cxx::tree::one< TitleFontConfType > TitleFontConf_;
        ::xsd::cxx::tree::one< TextFontConfType > TextFontConf_;

        //@endcond
      };

      bool
      operator== (const ContingencyCardWidgetConfiguration&, const ContingencyCardWidgetConfiguration&);

      bool
      operator!= (const ContingencyCardWidgetConfiguration&, const ContingencyCardWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %MemoryStateWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class MemoryStateWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ButtonDelay
         *
         * @brief Accessor and modifier functions for the %ButtonDelay
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer ButtonDelayType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonDelayType, char > ButtonDelayTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonDelayType&
        getButtonDelay () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonDelayType&
        getButtonDelay ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonDelay (const ButtonDelayType& x);

        //@}

        /**
         * @name ButtonConf
         *
         * @brief Accessor and modifier functions for the %ButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration ButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonConfType, char > ButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonConfType&
        getButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonConfType&
        getButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonConf (const ButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonConf (::std::auto_ptr< ButtonConfType > p);

        //@}

        /**
         * @name TextFontConf
         *
         * @brief Accessor and modifier functions for the %TextFontConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TextFontConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextFontConfType, char > TextFontConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextFontConfType&
        getTextFontConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextFontConfType&
        getTextFontConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextFontConf (const TextFontConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextFontConf (::std::auto_ptr< TextFontConfType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        MemoryStateWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MemoryStateWidgetConfiguration (const ButtonDelayType&,
                                        const ButtonConfType&,
                                        const TextFontConfType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        MemoryStateWidgetConfiguration (const ButtonDelayType&,
                                        ::std::auto_ptr< ButtonConfType >&,
                                        ::std::auto_ptr< TextFontConfType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MemoryStateWidgetConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MemoryStateWidgetConfiguration (const MemoryStateWidgetConfiguration& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MemoryStateWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~MemoryStateWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ButtonDelayType > ButtonDelay_;
        ::xsd::cxx::tree::one< ButtonConfType > ButtonConf_;
        ::xsd::cxx::tree::one< TextFontConfType > TextFontConf_;

        //@endcond
      };

      bool
      operator== (const MemoryStateWidgetConfiguration&, const MemoryStateWidgetConfiguration&);

      bool
      operator!= (const MemoryStateWidgetConfiguration&, const MemoryStateWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %HelpWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class HelpWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PrintButtonConf
         *
         * @brief Accessor and modifier functions for the %PrintButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration PrintButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrintButtonConfType, char > PrintButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrintButtonConfType&
        getPrintButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrintButtonConfType&
        getPrintButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrintButtonConf (const PrintButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPrintButtonConf (::std::auto_ptr< PrintButtonConfType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        HelpWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        HelpWidgetConfiguration (const PrintButtonConfType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        HelpWidgetConfiguration (::std::auto_ptr< PrintButtonConfType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        HelpWidgetConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        HelpWidgetConfiguration (const HelpWidgetConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual HelpWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~HelpWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PrintButtonConfType > PrintButtonConf_;

        //@endcond
      };

      bool
      operator== (const HelpWidgetConfiguration&, const HelpWidgetConfiguration&);

      bool
      operator!= (const HelpWidgetConfiguration&, const HelpWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %WaitingForCardWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class WaitingForCardWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ShowSimulateButton
         *
         * @brief Accessor and modifier functions for the %ShowSimulateButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowSimulateButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowSimulateButtonType, char > ShowSimulateButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowSimulateButtonType&
        getShowSimulateButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowSimulateButtonType&
        getShowSimulateButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowSimulateButton (const ShowSimulateButtonType& x);

        //@}

        /**
         * @name ShowBackButton
         *
         * @brief Accessor and modifier functions for the %ShowBackButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBackButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBackButtonType, char > ShowBackButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBackButtonType&
        getShowBackButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBackButtonType&
        getShowBackButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBackButton (const ShowBackButtonType& x);

        //@}

        /**
         * @name ViewPrevious
         *
         * @brief Accessor and modifier functions for the %ViewPrevious
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ViewPreviousType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ViewPreviousType, char > ViewPreviousTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ViewPreviousType&
        getViewPrevious () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ViewPreviousType&
        getViewPrevious ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setViewPrevious (const ViewPreviousType& x);

        //@}

        /**
         * @name AllowVotePreview
         *
         * @brief Accessor and modifier functions for the %AllowVotePreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AllowVotePreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AllowVotePreviewType, char > AllowVotePreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AllowVotePreviewType&
        getAllowVotePreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AllowVotePreviewType&
        getAllowVotePreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAllowVotePreview (const AllowVotePreviewType& x);

        //@}

        /**
         * @name UsePrintPreview
         *
         * @brief Accessor and modifier functions for the %UsePrintPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UsePrintPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UsePrintPreviewType, char > UsePrintPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UsePrintPreviewType&
        getUsePrintPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UsePrintPreviewType&
        getUsePrintPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUsePrintPreview (const UsePrintPreviewType& x);

        //@}

        /**
         * @name UseVerticalTableInPreview
         *
         * @brief Accessor and modifier functions for the %UseVerticalTableInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseVerticalTableInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseVerticalTableInPreviewType, char > UseVerticalTableInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseVerticalTableInPreviewType&
        getUseVerticalTableInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseVerticalTableInPreviewType&
        getUseVerticalTableInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseVerticalTableInPreview (const UseVerticalTableInPreviewType& x);

        //@}

        /**
         * @name PreviewVoteLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %PreviewVoteLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration PreviewVoteLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PreviewVoteLabelConfigurationType, char > PreviewVoteLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PreviewVoteLabelConfigurationType&
        getPreviewVoteLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PreviewVoteLabelConfigurationType&
        getPreviewVoteLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPreviewVoteLabelConfiguration (const PreviewVoteLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPreviewVoteLabelConfiguration (::std::auto_ptr< PreviewVoteLabelConfigurationType > p);

        //@}

        /**
         * @name PreviewVoteButtonConfiguration
         *
         * @brief Accessor and modifier functions for the %PreviewVoteButtonConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration PreviewVoteButtonConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PreviewVoteButtonConfigurationType, char > PreviewVoteButtonConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PreviewVoteButtonConfigurationType&
        getPreviewVoteButtonConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PreviewVoteButtonConfigurationType&
        getPreviewVoteButtonConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPreviewVoteButtonConfiguration (const PreviewVoteButtonConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPreviewVoteButtonConfiguration (::std::auto_ptr< PreviewVoteButtonConfigurationType > p);

        //@}

        /**
         * @name TimeoutPreviewVote
         *
         * @brief Accessor and modifier functions for the %TimeoutPreviewVote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer TimeoutPreviewVoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeoutPreviewVoteType, char > TimeoutPreviewVoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeoutPreviewVoteType&
        getTimeoutPreviewVote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeoutPreviewVoteType&
        getTimeoutPreviewVote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeoutPreviewVote (const TimeoutPreviewVoteType& x);

        //@}

        /**
         * @name TimeoutPreviewVoteClose
         *
         * @brief Accessor and modifier functions for the %TimeoutPreviewVoteClose
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Integer TimeoutPreviewVoteCloseType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeoutPreviewVoteCloseType, char > TimeoutPreviewVoteCloseTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeoutPreviewVoteCloseType&
        getTimeoutPreviewVoteClose () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeoutPreviewVoteCloseType&
        getTimeoutPreviewVoteClose ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeoutPreviewVoteClose (const TimeoutPreviewVoteCloseType& x);

        //@}

        /**
         * @name ShowBarcodeInPreview
         *
         * @brief Accessor and modifier functions for the %ShowBarcodeInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBarcodeInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBarcodeInPreviewType, char > ShowBarcodeInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBarcodeInPreviewType&
        getShowBarcodeInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBarcodeInPreviewType&
        getShowBarcodeInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x);

        //@}

        /**
         * @name BarcodeCommandsName
         *
         * @brief Accessor and modifier functions for the %BarcodeCommandsName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeCommandsNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeCommandsNameType, char > BarcodeCommandsNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeCommandsNameType&
        getBarcodeCommandsName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeCommandsNameType&
        getBarcodeCommandsName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeCommandsName (const BarcodeCommandsNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeCommandsName (::std::auto_ptr< BarcodeCommandsNameType > p);

        //@}

        /**
         * @name PreviewLanguageConfig
         *
         * @brief Accessor and modifier functions for the %PreviewLanguageConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PreviewLanguageConfig PreviewLanguageConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PreviewLanguageConfigType, char > PreviewLanguageConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PreviewLanguageConfigType&
        getPreviewLanguageConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PreviewLanguageConfigType&
        getPreviewLanguageConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPreviewLanguageConfig (const PreviewLanguageConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPreviewLanguageConfig (::std::auto_ptr< PreviewLanguageConfigType > p);

        //@}

        /**
         * @name BlockOnCardInsertionError
         *
         * @brief Accessor and modifier functions for the %BlockOnCardInsertionError
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean BlockOnCardInsertionErrorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockOnCardInsertionErrorType, char > BlockOnCardInsertionErrorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BlockOnCardInsertionErrorType&
        getBlockOnCardInsertionError () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BlockOnCardInsertionErrorType&
        getBlockOnCardInsertionError ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlockOnCardInsertionError (const BlockOnCardInsertionErrorType& x);

        //@}

        /**
         * @name IsNeopBlockingCondition
         *
         * @brief Accessor and modifier functions for the %IsNeopBlockingCondition
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean IsNeopBlockingConditionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IsNeopBlockingConditionType, char > IsNeopBlockingConditionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IsNeopBlockingConditionType&
        getIsNeopBlockingCondition () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IsNeopBlockingConditionType&
        getIsNeopBlockingCondition ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIsNeopBlockingCondition (const IsNeopBlockingConditionType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        WaitingForCardWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        WaitingForCardWindowConfiguration (const ShowSimulateButtonType&,
                                           const ShowBackButtonType&,
                                           const ViewPreviousType&,
                                           const AllowVotePreviewType&,
                                           const UsePrintPreviewType&,
                                           const UseVerticalTableInPreviewType&,
                                           const PreviewVoteLabelConfigurationType&,
                                           const PreviewVoteButtonConfigurationType&,
                                           const TimeoutPreviewVoteType&,
                                           const TimeoutPreviewVoteCloseType&,
                                           const ShowBarcodeInPreviewType&,
                                           const BarcodeCommandsNameType&,
                                           const PreviewLanguageConfigType&,
                                           const BlockOnCardInsertionErrorType&,
                                           const IsNeopBlockingConditionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        WaitingForCardWindowConfiguration (const ShowSimulateButtonType&,
                                           const ShowBackButtonType&,
                                           const ViewPreviousType&,
                                           const AllowVotePreviewType&,
                                           const UsePrintPreviewType&,
                                           const UseVerticalTableInPreviewType&,
                                           ::std::auto_ptr< PreviewVoteLabelConfigurationType >&,
                                           ::std::auto_ptr< PreviewVoteButtonConfigurationType >&,
                                           const TimeoutPreviewVoteType&,
                                           const TimeoutPreviewVoteCloseType&,
                                           const ShowBarcodeInPreviewType&,
                                           const BarcodeCommandsNameType&,
                                           const PreviewLanguageConfigType&,
                                           const BlockOnCardInsertionErrorType&,
                                           const IsNeopBlockingConditionType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        WaitingForCardWindowConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        WaitingForCardWindowConfiguration (const WaitingForCardWindowConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual WaitingForCardWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~WaitingForCardWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ShowSimulateButtonType > ShowSimulateButton_;
        ::xsd::cxx::tree::one< ShowBackButtonType > ShowBackButton_;
        ::xsd::cxx::tree::one< ViewPreviousType > ViewPrevious_;
        ::xsd::cxx::tree::one< AllowVotePreviewType > AllowVotePreview_;
        ::xsd::cxx::tree::one< UsePrintPreviewType > UsePrintPreview_;
        ::xsd::cxx::tree::one< UseVerticalTableInPreviewType > UseVerticalTableInPreview_;
        ::xsd::cxx::tree::one< PreviewVoteLabelConfigurationType > PreviewVoteLabelConfiguration_;
        ::xsd::cxx::tree::one< PreviewVoteButtonConfigurationType > PreviewVoteButtonConfiguration_;
        ::xsd::cxx::tree::one< TimeoutPreviewVoteType > TimeoutPreviewVote_;
        ::xsd::cxx::tree::one< TimeoutPreviewVoteCloseType > TimeoutPreviewVoteClose_;
        ::xsd::cxx::tree::one< ShowBarcodeInPreviewType > ShowBarcodeInPreview_;
        ::xsd::cxx::tree::one< BarcodeCommandsNameType > BarcodeCommandsName_;
        ::xsd::cxx::tree::one< PreviewLanguageConfigType > PreviewLanguageConfig_;
        ::xsd::cxx::tree::one< BlockOnCardInsertionErrorType > BlockOnCardInsertionError_;
        ::xsd::cxx::tree::one< IsNeopBlockingConditionType > IsNeopBlockingCondition_;

        //@endcond
      };

      bool
      operator== (const WaitingForCardWindowConfiguration&, const WaitingForCardWindowConfiguration&);

      bool
      operator!= (const WaitingForCardWindowConfiguration&, const WaitingForCardWindowConfiguration&);


      /**
       * @brief Class corresponding to the %LanguageSelectionWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class LanguageSelectionWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name LanguageButton
         *
         * @brief Accessor and modifier functions for the %LanguageButton
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LanguageButton LanguageButtonType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< LanguageButtonType > LanguageButtonSequence;

        /**
         * @brief Element iterator type.
         */
        typedef LanguageButtonSequence::iterator LanguageButtonIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef LanguageButtonSequence::const_iterator LanguageButtonConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LanguageButtonType, char > LanguageButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const LanguageButtonSequence&
        getLanguageButton () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        LanguageButtonSequence&
        getLanguageButton ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setLanguageButton (const LanguageButtonSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        LanguageSelectionWindowConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LanguageSelectionWindowConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LanguageSelectionWindowConfiguration (const LanguageSelectionWindowConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LanguageSelectionWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~LanguageSelectionWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        LanguageButtonSequence LanguageButton_;

        //@endcond
      };

      bool
      operator== (const LanguageSelectionWindowConfiguration&, const LanguageSelectionWindowConfiguration&);

      bool
      operator!= (const LanguageSelectionWindowConfiguration&, const LanguageSelectionWindowConfiguration&);


      /**
       * @brief Class corresponding to the %StatisticFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class StatisticFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name RowsSpacing
         *
         * @brief Accessor and modifier functions for the %RowsSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger RowsSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RowsSpacingType, char > RowsSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RowsSpacingType&
        getRowsSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RowsSpacingType&
        getRowsSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRowsSpacing (const RowsSpacingType& x);

        //@}

        /**
         * @name ColumnsSpacing
         *
         * @brief Accessor and modifier functions for the %ColumnsSpacing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ColumnsSpacingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ColumnsSpacingType, char > ColumnsSpacingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ColumnsSpacingType&
        getColumnsSpacing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ColumnsSpacingType&
        getColumnsSpacing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setColumnsSpacing (const ColumnsSpacingType& x);

        //@}

        /**
         * @name ButtonConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonBoxConfiguration ButtonConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonConfigurationType, char > ButtonConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonConfigurationType&
        getButtonConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonConfigurationType&
        getButtonConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonConfiguration (const ButtonConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > p);

        //@}

        /**
         * @name TitleLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %TitleLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitleLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleLabelConfigurationType, char > TitleLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleLabelConfigurationType&
        getTitleLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleLabelConfigurationType&
        getTitleLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleLabelConfiguration (const TitleLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleLabelConfiguration (::std::auto_ptr< TitleLabelConfigurationType > p);

        //@}

        /**
         * @name StatisticsLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %StatisticsLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration StatisticsLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsLabelConfigurationType, char > StatisticsLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsLabelConfigurationType&
        getStatisticsLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsLabelConfigurationType&
        getStatisticsLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsLabelConfiguration (const StatisticsLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsLabelConfiguration (::std::auto_ptr< StatisticsLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        StatisticFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        StatisticFunctionalityConfiguration (const RowsSpacingType&,
                                             const ColumnsSpacingType&,
                                             const ButtonConfigurationType&,
                                             const TitleLabelConfigurationType&,
                                             const StatisticsLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        StatisticFunctionalityConfiguration (const RowsSpacingType&,
                                             const ColumnsSpacingType&,
                                             ::std::auto_ptr< ButtonConfigurationType >&,
                                             ::std::auto_ptr< TitleLabelConfigurationType >&,
                                             ::std::auto_ptr< StatisticsLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StatisticFunctionalityConfiguration (const StatisticFunctionalityConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StatisticFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~StatisticFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< RowsSpacingType > RowsSpacing_;
        ::xsd::cxx::tree::one< ColumnsSpacingType > ColumnsSpacing_;
        ::xsd::cxx::tree::one< ButtonConfigurationType > ButtonConfiguration_;
        ::xsd::cxx::tree::one< TitleLabelConfigurationType > TitleLabelConfiguration_;
        ::xsd::cxx::tree::one< StatisticsLabelConfigurationType > StatisticsLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const StatisticFunctionalityConfiguration&, const StatisticFunctionalityConfiguration&);

      bool
      operator!= (const StatisticFunctionalityConfiguration&, const StatisticFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %OpenElectionFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class OpenElectionFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ShowTitle
         *
         * @brief Accessor and modifier functions for the %ShowTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowTitleType, char > ShowTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowTitleType&
        getShowTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowTitleType&
        getShowTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowTitle (const ShowTitleType& x);

        //@}

        /**
         * @name ButtonConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonBoxConfiguration ButtonConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonConfigurationType, char > ButtonConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonConfigurationType&
        getButtonConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonConfigurationType&
        getButtonConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonConfiguration (const ButtonConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > p);

        //@}

        /**
         * @name DialogLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %DialogLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration DialogLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DialogLabelConfigurationType, char > DialogLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DialogLabelConfigurationType&
        getDialogLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DialogLabelConfigurationType&
        getDialogLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDialogLabelConfiguration (const DialogLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDialogLabelConfiguration (::std::auto_ptr< DialogLabelConfigurationType > p);

        //@}

        /**
         * @name OpenElectionSteps
         *
         * @brief Accessor and modifier functions for the %OpenElectionSteps
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::OpenElectionSteps OpenElectionStepsType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< OpenElectionStepsType > OpenElectionStepsSequence;

        /**
         * @brief Element iterator type.
         */
        typedef OpenElectionStepsSequence::iterator OpenElectionStepsIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef OpenElectionStepsSequence::const_iterator OpenElectionStepsConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OpenElectionStepsType, char > OpenElectionStepsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const OpenElectionStepsSequence&
        getOpenElectionSteps () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        OpenElectionStepsSequence&
        getOpenElectionSteps ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setOpenElectionSteps (const OpenElectionStepsSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        OpenElectionFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        OpenElectionFunctionalityConfiguration (const ShowTitleType&,
                                                const ButtonConfigurationType&,
                                                const DialogLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        OpenElectionFunctionalityConfiguration (const ShowTitleType&,
                                                ::std::auto_ptr< ButtonConfigurationType >&,
                                                ::std::auto_ptr< DialogLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        OpenElectionFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        OpenElectionFunctionalityConfiguration (const OpenElectionFunctionalityConfiguration& x,
                                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual OpenElectionFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~OpenElectionFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ShowTitleType > ShowTitle_;
        ::xsd::cxx::tree::one< ButtonConfigurationType > ButtonConfiguration_;
        ::xsd::cxx::tree::one< DialogLabelConfigurationType > DialogLabelConfiguration_;
        OpenElectionStepsSequence OpenElectionSteps_;

        //@endcond
      };

      bool
      operator== (const OpenElectionFunctionalityConfiguration&, const OpenElectionFunctionalityConfiguration&);

      bool
      operator!= (const OpenElectionFunctionalityConfiguration&, const OpenElectionFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %AuthenticationWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class AuthenticationWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PasswordLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %PasswordLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration PasswordLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PasswordLabelConfigurationType, char > PasswordLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PasswordLabelConfigurationType&
        getPasswordLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PasswordLabelConfigurationType&
        getPasswordLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPasswordLabelConfiguration (const PasswordLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPasswordLabelConfiguration (::std::auto_ptr< PasswordLabelConfigurationType > p);

        //@}

        /**
         * @name AlarmLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %AlarmLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration AlarmLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AlarmLabelConfigurationType, char > AlarmLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AlarmLabelConfigurationType&
        getAlarmLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AlarmLabelConfigurationType&
        getAlarmLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAlarmLabelConfiguration (const AlarmLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAlarmLabelConfiguration (::std::auto_ptr< AlarmLabelConfigurationType > p);

        //@}

        /**
         * @name InfoLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %InfoLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InfoLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoLabelConfigurationType, char > InfoLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoLabelConfigurationType&
        getInfoLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoLabelConfigurationType&
        getInfoLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoLabelConfiguration (const InfoLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoLabelConfiguration (::std::auto_ptr< InfoLabelConfigurationType > p);

        //@}

        /**
         * @name VotingInfoLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %VotingInfoLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration VotingInfoLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingInfoLabelConfigurationType, char > VotingInfoLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingInfoLabelConfigurationType&
        getVotingInfoLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingInfoLabelConfigurationType&
        getVotingInfoLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingInfoLabelConfiguration (const VotingInfoLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingInfoLabelConfiguration (::std::auto_ptr< VotingInfoLabelConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        AuthenticationWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AuthenticationWindowConfiguration (const PasswordLabelConfigurationType&,
                                           const AlarmLabelConfigurationType&,
                                           const InfoLabelConfigurationType&,
                                           const VotingInfoLabelConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        AuthenticationWindowConfiguration (::std::auto_ptr< PasswordLabelConfigurationType >&,
                                           ::std::auto_ptr< AlarmLabelConfigurationType >&,
                                           ::std::auto_ptr< InfoLabelConfigurationType >&,
                                           ::std::auto_ptr< VotingInfoLabelConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AuthenticationWindowConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AuthenticationWindowConfiguration (const AuthenticationWindowConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AuthenticationWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~AuthenticationWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PasswordLabelConfigurationType > PasswordLabelConfiguration_;
        ::xsd::cxx::tree::one< AlarmLabelConfigurationType > AlarmLabelConfiguration_;
        ::xsd::cxx::tree::one< InfoLabelConfigurationType > InfoLabelConfiguration_;
        ::xsd::cxx::tree::one< VotingInfoLabelConfigurationType > VotingInfoLabelConfiguration_;

        //@endcond
      };

      bool
      operator== (const AuthenticationWindowConfiguration&, const AuthenticationWindowConfiguration&);

      bool
      operator!= (const AuthenticationWindowConfiguration&, const AuthenticationWindowConfiguration&);


      /**
       * @brief Class corresponding to the %DurationWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class DurationWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name LeaveFieldsBlank
         *
         * @brief Accessor and modifier functions for the %LeaveFieldsBlank
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean LeaveFieldsBlankType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LeaveFieldsBlankType, char > LeaveFieldsBlankTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LeaveFieldsBlankType&
        getLeaveFieldsBlank () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LeaveFieldsBlankType&
        getLeaveFieldsBlank ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLeaveFieldsBlank (const LeaveFieldsBlankType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        DurationWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        DurationWidgetConfiguration (const LeaveFieldsBlankType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DurationWidgetConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DurationWidgetConfiguration (const DurationWidgetConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DurationWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~DurationWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< LeaveFieldsBlankType > LeaveFieldsBlank_;

        //@endcond
      };

      bool
      operator== (const DurationWidgetConfiguration&, const DurationWidgetConfiguration&);

      bool
      operator!= (const DurationWidgetConfiguration&, const DurationWidgetConfiguration&);


      /**
       * @brief Class corresponding to the %CloseElectionFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CloseElectionFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ButtonConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonBoxConfiguration ButtonConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonConfigurationType, char > ButtonConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonConfigurationType&
        getButtonConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonConfigurationType&
        getButtonConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonConfiguration (const ButtonConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > p);

        //@}

        /**
         * @name ClosingElectionSteps
         *
         * @brief Accessor and modifier functions for the %ClosingElectionSteps
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CloseElectionSteps ClosingElectionStepsType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ClosingElectionStepsType > ClosingElectionStepsSequence;

        /**
         * @brief Element iterator type.
         */
        typedef ClosingElectionStepsSequence::iterator ClosingElectionStepsIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ClosingElectionStepsSequence::const_iterator ClosingElectionStepsConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ClosingElectionStepsType, char > ClosingElectionStepsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ClosingElectionStepsSequence&
        getClosingElectionSteps () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ClosingElectionStepsSequence&
        getClosingElectionSteps ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setClosingElectionSteps (const ClosingElectionStepsSequence& s);

        //@}

        /**
         * @name ShowSignQuestion
         *
         * @brief Accessor and modifier functions for the %ShowSignQuestion
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowSignQuestionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowSignQuestionType, char > ShowSignQuestionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowSignQuestionType&
        getShowSignQuestion () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowSignQuestionType&
        getShowSignQuestion ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowSignQuestion (const ShowSignQuestionType& x);

        //@}

        /**
         * @name ShowSignConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowSignConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowSignConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowSignConfirmationType, char > ShowSignConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowSignConfirmationType&
        getShowSignConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowSignConfirmationType&
        getShowSignConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowSignConfirmation (const ShowSignConfirmationType& x);

        //@}

        /**
         * @name ContinueCloseOnSignFail
         *
         * @brief Accessor and modifier functions for the %ContinueCloseOnSignFail
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ContinueCloseOnSignFailType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContinueCloseOnSignFailType, char > ContinueCloseOnSignFailTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContinueCloseOnSignFailType&
        getContinueCloseOnSignFail () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContinueCloseOnSignFailType&
        getContinueCloseOnSignFail ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContinueCloseOnSignFail (const ContinueCloseOnSignFailType& x);

        //@}

        /**
         * @name ShowConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowConfirmationType, char > ShowConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowConfirmationType&
        getShowConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowConfirmationType&
        getShowConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowConfirmation (const ShowConfirmationType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CloseElectionFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CloseElectionFunctionalityConfiguration (const ButtonConfigurationType&,
                                                 const ShowSignQuestionType&,
                                                 const ShowSignConfirmationType&,
                                                 const ContinueCloseOnSignFailType&,
                                                 const ShowConfirmationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CloseElectionFunctionalityConfiguration (::std::auto_ptr< ButtonConfigurationType >&,
                                                 const ShowSignQuestionType&,
                                                 const ShowSignConfirmationType&,
                                                 const ContinueCloseOnSignFailType&,
                                                 const ShowConfirmationType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseElectionFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CloseElectionFunctionalityConfiguration (const CloseElectionFunctionalityConfiguration& x,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CloseElectionFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CloseElectionFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ButtonConfigurationType > ButtonConfiguration_;
        ClosingElectionStepsSequence ClosingElectionSteps_;
        ::xsd::cxx::tree::one< ShowSignQuestionType > ShowSignQuestion_;
        ::xsd::cxx::tree::one< ShowSignConfirmationType > ShowSignConfirmation_;
        ::xsd::cxx::tree::one< ContinueCloseOnSignFailType > ContinueCloseOnSignFail_;
        ::xsd::cxx::tree::one< ShowConfirmationType > ShowConfirmation_;

        //@endcond
      };

      bool
      operator== (const CloseElectionFunctionalityConfiguration&, const CloseElectionFunctionalityConfiguration&);

      bool
      operator!= (const CloseElectionFunctionalityConfiguration&, const CloseElectionFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %ActivationConsolidationFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ActivationConsolidationFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ShowTotalVotes
         *
         * @brief Accessor and modifier functions for the %ShowTotalVotes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowTotalVotesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowTotalVotesType, char > ShowTotalVotesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowTotalVotesType&
        getShowTotalVotes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowTotalVotesType&
        getShowTotalVotes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowTotalVotes (const ShowTotalVotesType& x);

        //@}

        /**
         * @name ShowOfficialVotes
         *
         * @brief Accessor and modifier functions for the %ShowOfficialVotes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowOfficialVotesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowOfficialVotesType, char > ShowOfficialVotesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowOfficialVotesType&
        getShowOfficialVotes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowOfficialVotesType&
        getShowOfficialVotes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowOfficialVotes (const ShowOfficialVotesType& x);

        //@}

        /**
         * @name ShowDuplicatesVotes
         *
         * @brief Accessor and modifier functions for the %ShowDuplicatesVotes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowDuplicatesVotesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowDuplicatesVotesType, char > ShowDuplicatesVotesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowDuplicatesVotesType&
        getShowDuplicatesVotes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowDuplicatesVotesType&
        getShowDuplicatesVotes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowDuplicatesVotes (const ShowDuplicatesVotesType& x);

        //@}

        /**
         * @name ShowScanMessage
         *
         * @brief Accessor and modifier functions for the %ShowScanMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowScanMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowScanMessageType, char > ShowScanMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowScanMessageType&
        getShowScanMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowScanMessageType&
        getShowScanMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowScanMessage (const ShowScanMessageType& x);

        //@}

        /**
         * @name ShowBarcodeMessage
         *
         * @brief Accessor and modifier functions for the %ShowBarcodeMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBarcodeMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBarcodeMessageType, char > ShowBarcodeMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBarcodeMessageType&
        getShowBarcodeMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBarcodeMessageType&
        getShowBarcodeMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBarcodeMessage (const ShowBarcodeMessageType& x);

        //@}

        /**
         * @name ShowActivateCards
         *
         * @brief Accessor and modifier functions for the %ShowActivateCards
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowActivateCardsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowActivateCardsType, char > ShowActivateCardsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowActivateCardsType&
        getShowActivateCards () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowActivateCardsType&
        getShowActivateCards ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowActivateCards (const ShowActivateCardsType& x);

        //@}

        /**
         * @name SelectedBoxColor
         *
         * @brief Accessor and modifier functions for the %SelectedBoxColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration SelectedBoxColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectedBoxColorType, char > SelectedBoxColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectedBoxColorType&
        getSelectedBoxColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectedBoxColorType&
        getSelectedBoxColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectedBoxColor (const SelectedBoxColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectedBoxColor (::std::auto_ptr< SelectedBoxColorType > p);

        //@}

        /**
         * @name UnselectedBoxColor
         *
         * @brief Accessor and modifier functions for the %UnselectedBoxColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration UnselectedBoxColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UnselectedBoxColorType, char > UnselectedBoxColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UnselectedBoxColorType&
        getUnselectedBoxColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UnselectedBoxColorType&
        getUnselectedBoxColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUnselectedBoxColor (const UnselectedBoxColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUnselectedBoxColor (::std::auto_ptr< UnselectedBoxColorType > p);

        //@}

        /**
         * @name SelectedFontColor
         *
         * @brief Accessor and modifier functions for the %SelectedFontColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration SelectedFontColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SelectedFontColorType, char > SelectedFontColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SelectedFontColorType&
        getSelectedFontColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SelectedFontColorType&
        getSelectedFontColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSelectedFontColor (const SelectedFontColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSelectedFontColor (::std::auto_ptr< SelectedFontColorType > p);

        //@}

        /**
         * @name UnselectedFontColor
         *
         * @brief Accessor and modifier functions for the %UnselectedFontColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration UnselectedFontColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UnselectedFontColorType, char > UnselectedFontColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UnselectedFontColorType&
        getUnselectedFontColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UnselectedFontColorType&
        getUnselectedFontColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUnselectedFontColor (const UnselectedFontColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setUnselectedFontColor (::std::auto_ptr< UnselectedFontColorType > p);

        //@}

        /**
         * @name LabelSelectedConfiguration
         *
         * @brief Accessor and modifier functions for the %LabelSelectedConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration LabelSelectedConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LabelSelectedConfigurationType, char > LabelSelectedConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LabelSelectedConfigurationType&
        getLabelSelectedConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LabelSelectedConfigurationType&
        getLabelSelectedConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabelSelectedConfiguration (const LabelSelectedConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabelSelectedConfiguration (::std::auto_ptr< LabelSelectedConfigurationType > p);

        //@}

        /**
         * @name LabelUnselectedConfiguration
         *
         * @brief Accessor and modifier functions for the %LabelUnselectedConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration LabelUnselectedConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LabelUnselectedConfigurationType, char > LabelUnselectedConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LabelUnselectedConfigurationType&
        getLabelUnselectedConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LabelUnselectedConfigurationType&
        getLabelUnselectedConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLabelUnselectedConfiguration (const LabelUnselectedConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLabelUnselectedConfiguration (::std::auto_ptr< LabelUnselectedConfigurationType > p);

        //@}

        /**
         * @name TitleHeight
         *
         * @brief Accessor and modifier functions for the %TitleHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TitleHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleHeightType, char > TitleHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleHeightType&
        getTitleHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleHeightType&
        getTitleHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleHeight (const TitleHeightType& x);

        //@}

        /**
         * @name TitleFontConfiguration
         *
         * @brief Accessor and modifier functions for the %TitleFontConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration TitleFontConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleFontConfigurationType, char > TitleFontConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleFontConfigurationType&
        getTitleFontConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleFontConfigurationType&
        getTitleFontConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleFontConfiguration (const TitleFontConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTitleFontConfiguration (::std::auto_ptr< TitleFontConfigurationType > p);

        //@}

        /**
         * @name StatsConsolidationHeight
         *
         * @brief Accessor and modifier functions for the %StatsConsolidationHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger StatsConsolidationHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatsConsolidationHeightType, char > StatsConsolidationHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatsConsolidationHeightType&
        getStatsConsolidationHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatsConsolidationHeightType&
        getStatsConsolidationHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatsConsolidationHeight (const StatsConsolidationHeightType& x);

        //@}

        /**
         * @name StatsConsolidationFontConfiguration
         *
         * @brief Accessor and modifier functions for the %StatsConsolidationFontConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration StatsConsolidationFontConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatsConsolidationFontConfigurationType, char > StatsConsolidationFontConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatsConsolidationFontConfigurationType&
        getStatsConsolidationFontConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatsConsolidationFontConfigurationType&
        getStatsConsolidationFontConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatsConsolidationFontConfiguration (const StatsConsolidationFontConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatsConsolidationFontConfiguration (::std::auto_ptr< StatsConsolidationFontConfigurationType > p);

        //@}

        /**
         * @name StatsActivationHeight
         *
         * @brief Accessor and modifier functions for the %StatsActivationHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger StatsActivationHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatsActivationHeightType, char > StatsActivationHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatsActivationHeightType&
        getStatsActivationHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatsActivationHeightType&
        getStatsActivationHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatsActivationHeight (const StatsActivationHeightType& x);

        //@}

        /**
         * @name StatsActivationFontConfiguration
         *
         * @brief Accessor and modifier functions for the %StatsActivationFontConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration StatsActivationFontConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatsActivationFontConfigurationType, char > StatsActivationFontConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatsActivationFontConfigurationType&
        getStatsActivationFontConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatsActivationFontConfigurationType&
        getStatsActivationFontConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatsActivationFontConfiguration (const StatsActivationFontConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatsActivationFontConfiguration (::std::auto_ptr< StatsActivationFontConfigurationType > p);

        //@}

        /**
         * @name InstructionFontConfiguration
         *
         * @brief Accessor and modifier functions for the %InstructionFontConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InstructionFontConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InstructionFontConfigurationType, char > InstructionFontConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InstructionFontConfigurationType&
        getInstructionFontConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InstructionFontConfigurationType&
        getInstructionFontConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInstructionFontConfiguration (const InstructionFontConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInstructionFontConfiguration (::std::auto_ptr< InstructionFontConfigurationType > p);

        //@}

        /**
         * @name DevicesLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %DevicesLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration DevicesLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DevicesLabelConfigurationType, char > DevicesLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DevicesLabelConfigurationType&
        getDevicesLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DevicesLabelConfigurationType&
        getDevicesLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDevicesLabelConfiguration (const DevicesLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDevicesLabelConfiguration (::std::auto_ptr< DevicesLabelConfigurationType > p);

        //@}

        /**
         * @name ActivateCardsWithoutBarcode
         *
         * @brief Accessor and modifier functions for the %ActivateCardsWithoutBarcode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ActivateCardsWithoutBarcodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ActivateCardsWithoutBarcodeType, char > ActivateCardsWithoutBarcodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ActivateCardsWithoutBarcodeType&
        getActivateCardsWithoutBarcode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ActivateCardsWithoutBarcodeType&
        getActivateCardsWithoutBarcode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setActivateCardsWithoutBarcode (const ActivateCardsWithoutBarcodeType& x);

        //@}

        /**
         * @name ConsolidateVoteWithOneMemory
         *
         * @brief Accessor and modifier functions for the %ConsolidateVoteWithOneMemory
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ConsolidateVoteWithOneMemoryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidateVoteWithOneMemoryType, char > ConsolidateVoteWithOneMemoryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidateVoteWithOneMemoryType&
        getConsolidateVoteWithOneMemory () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidateVoteWithOneMemoryType&
        getConsolidateVoteWithOneMemory ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidateVoteWithOneMemory (const ConsolidateVoteWithOneMemoryType& x);

        //@}

        /**
         * @name BarcodeInParams
         *
         * @brief Accessor and modifier functions for the %BarcodeInParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeInParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeInParamsType, char > BarcodeInParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeInParamsType&
        getBarcodeInParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeInParamsType&
        getBarcodeInParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeInParams (const BarcodeInParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > p);

        //@}

        /**
         * @name BarcodeOutParams
         *
         * @brief Accessor and modifier functions for the %BarcodeOutParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeOutParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeOutParamsType, char > BarcodeOutParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeOutParamsType&
        getBarcodeOutParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeOutParamsType&
        getBarcodeOutParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeOutParams (const BarcodeOutParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > p);

        //@}

        /**
         * @name ScanConsolidationConfiguration
         *
         * @brief Accessor and modifier functions for the %ScanConsolidationConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ScanConsolidationConfiguration ScanConsolidationConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ScanConsolidationConfigurationType, char > ScanConsolidationConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ScanConsolidationConfigurationType&
        getScanConsolidationConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ScanConsolidationConfigurationType&
        getScanConsolidationConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setScanConsolidationConfiguration (const ScanConsolidationConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setScanConsolidationConfiguration (::std::auto_ptr< ScanConsolidationConfigurationType > p);

        //@}

        /**
         * @name CardActivationTotalCountConfiguration
         *
         * @brief Accessor and modifier functions for the %CardActivationTotalCountConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountConfiguration CardActivationTotalCountConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivationTotalCountConfigurationType, char > CardActivationTotalCountConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivationTotalCountConfigurationType&
        getCardActivationTotalCountConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivationTotalCountConfigurationType&
        getCardActivationTotalCountConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivationTotalCountConfiguration (const CardActivationTotalCountConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivationTotalCountConfiguration (::std::auto_ptr< CardActivationTotalCountConfigurationType > p);

        //@}

        /**
         * @name ConsolidationTotalCountConfiguration
         *
         * @brief Accessor and modifier functions for the %ConsolidationTotalCountConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountConfiguration ConsolidationTotalCountConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidationTotalCountConfigurationType, char > ConsolidationTotalCountConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidationTotalCountConfigurationType&
        getConsolidationTotalCountConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidationTotalCountConfigurationType&
        getConsolidationTotalCountConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidationTotalCountConfiguration (const ConsolidationTotalCountConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConsolidationTotalCountConfiguration (::std::auto_ptr< ConsolidationTotalCountConfigurationType > p);

        //@}

        /**
         * @name ConsolidationOfficialCountConfiguration
         *
         * @brief Accessor and modifier functions for the %ConsolidationOfficialCountConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountConfiguration ConsolidationOfficialCountConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidationOfficialCountConfigurationType, char > ConsolidationOfficialCountConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidationOfficialCountConfigurationType&
        getConsolidationOfficialCountConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidationOfficialCountConfigurationType&
        getConsolidationOfficialCountConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidationOfficialCountConfiguration (const ConsolidationOfficialCountConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConsolidationOfficialCountConfiguration (::std::auto_ptr< ConsolidationOfficialCountConfigurationType > p);

        //@}

        /**
         * @name TimerSleepWriteCard
         *
         * @brief Accessor and modifier functions for the %TimerSleepWriteCard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimerSleepWriteCardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimerSleepWriteCardType, char > TimerSleepWriteCardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimerSleepWriteCardType&
        getTimerSleepWriteCard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimerSleepWriteCardType&
        getTimerSleepWriteCard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimerSleepWriteCard (const TimerSleepWriteCardType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ActivationConsolidationFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ActivationConsolidationFunctionalityConfiguration (const ShowTotalVotesType&,
                                                           const ShowOfficialVotesType&,
                                                           const ShowDuplicatesVotesType&,
                                                           const ShowScanMessageType&,
                                                           const ShowBarcodeMessageType&,
                                                           const ShowActivateCardsType&,
                                                           const SelectedBoxColorType&,
                                                           const UnselectedBoxColorType&,
                                                           const SelectedFontColorType&,
                                                           const UnselectedFontColorType&,
                                                           const LabelSelectedConfigurationType&,
                                                           const LabelUnselectedConfigurationType&,
                                                           const TitleHeightType&,
                                                           const TitleFontConfigurationType&,
                                                           const StatsConsolidationHeightType&,
                                                           const StatsConsolidationFontConfigurationType&,
                                                           const StatsActivationHeightType&,
                                                           const StatsActivationFontConfigurationType&,
                                                           const InstructionFontConfigurationType&,
                                                           const DevicesLabelConfigurationType&,
                                                           const ActivateCardsWithoutBarcodeType&,
                                                           const ConsolidateVoteWithOneMemoryType&,
                                                           const BarcodeInParamsType&,
                                                           const BarcodeOutParamsType&,
                                                           const ScanConsolidationConfigurationType&,
                                                           const CardActivationTotalCountConfigurationType&,
                                                           const ConsolidationTotalCountConfigurationType&,
                                                           const ConsolidationOfficialCountConfigurationType&,
                                                           const TimerSleepWriteCardType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ActivationConsolidationFunctionalityConfiguration (const ShowTotalVotesType&,
                                                           const ShowOfficialVotesType&,
                                                           const ShowDuplicatesVotesType&,
                                                           const ShowScanMessageType&,
                                                           const ShowBarcodeMessageType&,
                                                           const ShowActivateCardsType&,
                                                           ::std::auto_ptr< SelectedBoxColorType >&,
                                                           ::std::auto_ptr< UnselectedBoxColorType >&,
                                                           ::std::auto_ptr< SelectedFontColorType >&,
                                                           ::std::auto_ptr< UnselectedFontColorType >&,
                                                           ::std::auto_ptr< LabelSelectedConfigurationType >&,
                                                           ::std::auto_ptr< LabelUnselectedConfigurationType >&,
                                                           const TitleHeightType&,
                                                           ::std::auto_ptr< TitleFontConfigurationType >&,
                                                           const StatsConsolidationHeightType&,
                                                           ::std::auto_ptr< StatsConsolidationFontConfigurationType >&,
                                                           const StatsActivationHeightType&,
                                                           ::std::auto_ptr< StatsActivationFontConfigurationType >&,
                                                           ::std::auto_ptr< InstructionFontConfigurationType >&,
                                                           ::std::auto_ptr< DevicesLabelConfigurationType >&,
                                                           const ActivateCardsWithoutBarcodeType&,
                                                           const ConsolidateVoteWithOneMemoryType&,
                                                           const BarcodeInParamsType&,
                                                           const BarcodeOutParamsType&,
                                                           ::std::auto_ptr< ScanConsolidationConfigurationType >&,
                                                           ::std::auto_ptr< CardActivationTotalCountConfigurationType >&,
                                                           ::std::auto_ptr< ConsolidationTotalCountConfigurationType >&,
                                                           ::std::auto_ptr< ConsolidationOfficialCountConfigurationType >&,
                                                           const TimerSleepWriteCardType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ActivationConsolidationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ActivationConsolidationFunctionalityConfiguration (const ActivationConsolidationFunctionalityConfiguration& x,
                                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ActivationConsolidationFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ActivationConsolidationFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ShowTotalVotesType > ShowTotalVotes_;
        ::xsd::cxx::tree::one< ShowOfficialVotesType > ShowOfficialVotes_;
        ::xsd::cxx::tree::one< ShowDuplicatesVotesType > ShowDuplicatesVotes_;
        ::xsd::cxx::tree::one< ShowScanMessageType > ShowScanMessage_;
        ::xsd::cxx::tree::one< ShowBarcodeMessageType > ShowBarcodeMessage_;
        ::xsd::cxx::tree::one< ShowActivateCardsType > ShowActivateCards_;
        ::xsd::cxx::tree::one< SelectedBoxColorType > SelectedBoxColor_;
        ::xsd::cxx::tree::one< UnselectedBoxColorType > UnselectedBoxColor_;
        ::xsd::cxx::tree::one< SelectedFontColorType > SelectedFontColor_;
        ::xsd::cxx::tree::one< UnselectedFontColorType > UnselectedFontColor_;
        ::xsd::cxx::tree::one< LabelSelectedConfigurationType > LabelSelectedConfiguration_;
        ::xsd::cxx::tree::one< LabelUnselectedConfigurationType > LabelUnselectedConfiguration_;
        ::xsd::cxx::tree::one< TitleHeightType > TitleHeight_;
        ::xsd::cxx::tree::one< TitleFontConfigurationType > TitleFontConfiguration_;
        ::xsd::cxx::tree::one< StatsConsolidationHeightType > StatsConsolidationHeight_;
        ::xsd::cxx::tree::one< StatsConsolidationFontConfigurationType > StatsConsolidationFontConfiguration_;
        ::xsd::cxx::tree::one< StatsActivationHeightType > StatsActivationHeight_;
        ::xsd::cxx::tree::one< StatsActivationFontConfigurationType > StatsActivationFontConfiguration_;
        ::xsd::cxx::tree::one< InstructionFontConfigurationType > InstructionFontConfiguration_;
        ::xsd::cxx::tree::one< DevicesLabelConfigurationType > DevicesLabelConfiguration_;
        ::xsd::cxx::tree::one< ActivateCardsWithoutBarcodeType > ActivateCardsWithoutBarcode_;
        ::xsd::cxx::tree::one< ConsolidateVoteWithOneMemoryType > ConsolidateVoteWithOneMemory_;
        ::xsd::cxx::tree::one< BarcodeInParamsType > BarcodeInParams_;
        ::xsd::cxx::tree::one< BarcodeOutParamsType > BarcodeOutParams_;
        ::xsd::cxx::tree::one< ScanConsolidationConfigurationType > ScanConsolidationConfiguration_;
        ::xsd::cxx::tree::one< CardActivationTotalCountConfigurationType > CardActivationTotalCountConfiguration_;
        ::xsd::cxx::tree::one< ConsolidationTotalCountConfigurationType > ConsolidationTotalCountConfiguration_;
        ::xsd::cxx::tree::one< ConsolidationOfficialCountConfigurationType > ConsolidationOfficialCountConfiguration_;
        ::xsd::cxx::tree::one< TimerSleepWriteCardType > TimerSleepWriteCard_;

        //@endcond
      };

      bool
      operator== (const ActivationConsolidationFunctionalityConfiguration&, const ActivationConsolidationFunctionalityConfiguration&);

      bool
      operator!= (const ActivationConsolidationFunctionalityConfiguration&, const ActivationConsolidationFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %CloseVotationFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CloseVotationFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name RequestForID
         *
         * @brief Accessor and modifier functions for the %RequestForID
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean RequestForIDType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RequestForIDType, char > RequestForIDTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RequestForIDType&
        getRequestForID () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RequestForIDType&
        getRequestForID ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRequestForID (const RequestForIDType& x);

        //@}

        /**
         * @name MinimumOfficialsActivationForConfirmation
         *
         * @brief Accessor and modifier functions for the %MinimumOfficialsActivationForConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MinimumOfficialsActivationForConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinimumOfficialsActivationForConfirmationType, char > MinimumOfficialsActivationForConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinimumOfficialsActivationForConfirmationType&
        getMinimumOfficialsActivationForConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinimumOfficialsActivationForConfirmationType&
        getMinimumOfficialsActivationForConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMinimumOfficialsActivationForConfirmation (const MinimumOfficialsActivationForConfirmationType& x);

        //@}

        /**
         * @name ShowConfirmationMessageWhenClosing
         *
         * @brief Accessor and modifier functions for the %ShowConfirmationMessageWhenClosing
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowConfirmationMessageWhenClosingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowConfirmationMessageWhenClosingType, char > ShowConfirmationMessageWhenClosingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowConfirmationMessageWhenClosingType&
        getShowConfirmationMessageWhenClosing () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowConfirmationMessageWhenClosingType&
        getShowConfirmationMessageWhenClosing ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowConfirmationMessageWhenClosing (const ShowConfirmationMessageWhenClosingType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CloseVotationFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CloseVotationFunctionalityConfiguration (const RequestForIDType&,
                                                 const MinimumOfficialsActivationForConfirmationType&,
                                                 const ShowConfirmationMessageWhenClosingType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseVotationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CloseVotationFunctionalityConfiguration (const CloseVotationFunctionalityConfiguration& x,
                                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CloseVotationFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CloseVotationFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< RequestForIDType > RequestForID_;
        ::xsd::cxx::tree::one< MinimumOfficialsActivationForConfirmationType > MinimumOfficialsActivationForConfirmation_;
        ::xsd::cxx::tree::one< ShowConfirmationMessageWhenClosingType > ShowConfirmationMessageWhenClosing_;

        //@endcond
      };

      bool
      operator== (const CloseVotationFunctionalityConfiguration&, const CloseVotationFunctionalityConfiguration&);

      bool
      operator!= (const CloseVotationFunctionalityConfiguration&, const CloseVotationFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %InitializationWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class InitializationWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ContingencyCardEnabled
         *
         * @brief Accessor and modifier functions for the %ContingencyCardEnabled
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ContingencyCardEnabledType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContingencyCardEnabledType, char > ContingencyCardEnabledTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ContingencyCardEnabledType&
        getContingencyCardEnabled () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ContingencyCardEnabledType&
        getContingencyCardEnabled ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setContingencyCardEnabled (const ContingencyCardEnabledType& x);

        //@}

        /**
         * @name RemoveContingencyCardTitle
         *
         * @brief Accessor and modifier functions for the %RemoveContingencyCardTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration RemoveContingencyCardTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RemoveContingencyCardTitleType, char > RemoveContingencyCardTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RemoveContingencyCardTitleType&
        getRemoveContingencyCardTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RemoveContingencyCardTitleType&
        getRemoveContingencyCardTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRemoveContingencyCardTitle (const RemoveContingencyCardTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRemoveContingencyCardTitle (::std::auto_ptr< RemoveContingencyCardTitleType > p);

        //@}

        /**
         * @name RemoveContingencyCardText
         *
         * @brief Accessor and modifier functions for the %RemoveContingencyCardText
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration RemoveContingencyCardTextType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RemoveContingencyCardTextType, char > RemoveContingencyCardTextTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RemoveContingencyCardTextType&
        getRemoveContingencyCardText () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RemoveContingencyCardTextType&
        getRemoveContingencyCardText ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRemoveContingencyCardText (const RemoveContingencyCardTextType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRemoveContingencyCardText (::std::auto_ptr< RemoveContingencyCardTextType > p);

        //@}

        /**
         * @name RequestForIDOnPresidentMachineInitialization
         *
         * @brief Accessor and modifier functions for the %RequestForIDOnPresidentMachineInitialization
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean RequestForIDOnPresidentMachineInitializationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RequestForIDOnPresidentMachineInitializationType, char > RequestForIDOnPresidentMachineInitializationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RequestForIDOnPresidentMachineInitializationType&
        getRequestForIDOnPresidentMachineInitialization () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RequestForIDOnPresidentMachineInitializationType&
        getRequestForIDOnPresidentMachineInitialization ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRequestForIDOnPresidentMachineInitialization (const RequestForIDOnPresidentMachineInitializationType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        InitializationWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        InitializationWindowConfiguration (const ContingencyCardEnabledType&,
                                           const RemoveContingencyCardTitleType&,
                                           const RemoveContingencyCardTextType&,
                                           const RequestForIDOnPresidentMachineInitializationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        InitializationWindowConfiguration (const ContingencyCardEnabledType&,
                                           ::std::auto_ptr< RemoveContingencyCardTitleType >&,
                                           ::std::auto_ptr< RemoveContingencyCardTextType >&,
                                           const RequestForIDOnPresidentMachineInitializationType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        InitializationWindowConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        InitializationWindowConfiguration (const InitializationWindowConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual InitializationWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~InitializationWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ContingencyCardEnabledType > ContingencyCardEnabled_;
        ::xsd::cxx::tree::one< RemoveContingencyCardTitleType > RemoveContingencyCardTitle_;
        ::xsd::cxx::tree::one< RemoveContingencyCardTextType > RemoveContingencyCardText_;
        ::xsd::cxx::tree::one< RequestForIDOnPresidentMachineInitializationType > RequestForIDOnPresidentMachineInitialization_;

        //@endcond
      };

      bool
      operator== (const InitializationWindowConfiguration&, const InitializationWindowConfiguration&);

      bool
      operator!= (const InitializationWindowConfiguration&, const InitializationWindowConfiguration&);


      /**
       * @brief Class corresponding to the %IncidentReportFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class IncidentReportFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ButtonConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonBoxConfiguration ButtonConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonConfigurationType, char > ButtonConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonConfigurationType&
        getButtonConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonConfigurationType&
        getButtonConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonConfiguration (const ButtonConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > p);

        //@}

        /**
         * @name IncidentReportConfiguration
         *
         * @brief Accessor and modifier functions for the %IncidentReportConfiguration
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IncidentReportTreeViewConfiguration IncidentReportConfigurationType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< IncidentReportConfigurationType > IncidentReportConfigurationSequence;

        /**
         * @brief Element iterator type.
         */
        typedef IncidentReportConfigurationSequence::iterator IncidentReportConfigurationIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef IncidentReportConfigurationSequence::const_iterator IncidentReportConfigurationConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncidentReportConfigurationType, char > IncidentReportConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const IncidentReportConfigurationSequence&
        getIncidentReportConfiguration () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        IncidentReportConfigurationSequence&
        getIncidentReportConfiguration ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setIncidentReportConfiguration (const IncidentReportConfigurationSequence& s);

        //@}

        /**
         * @name CompleteReportParameters
         *
         * @brief Accessor and modifier functions for the %CompleteReportParameters
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IncidentReportColumn CompleteReportParametersType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< CompleteReportParametersType > CompleteReportParametersSequence;

        /**
         * @brief Element iterator type.
         */
        typedef CompleteReportParametersSequence::iterator CompleteReportParametersIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef CompleteReportParametersSequence::const_iterator CompleteReportParametersConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CompleteReportParametersType, char > CompleteReportParametersTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const CompleteReportParametersSequence&
        getCompleteReportParameters () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        CompleteReportParametersSequence&
        getCompleteReportParameters ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setCompleteReportParameters (const CompleteReportParametersSequence& s);

        //@}

        /**
         * @name ShowID
         *
         * @brief Accessor and modifier functions for the %ShowID
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowIDType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowIDType, char > ShowIDTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowIDType&
        getShowID () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowIDType&
        getShowID ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowID (const ShowIDType& x);

        //@}

        /**
         * @name ShowDeleteConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowDeleteConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowDeleteConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowDeleteConfirmationType, char > ShowDeleteConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowDeleteConfirmationType&
        getShowDeleteConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowDeleteConfirmationType&
        getShowDeleteConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowDeleteConfirmation (const ShowDeleteConfirmationType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        IncidentReportFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        IncidentReportFunctionalityConfiguration (const ButtonConfigurationType&,
                                                  const ShowIDType&,
                                                  const ShowDeleteConfirmationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        IncidentReportFunctionalityConfiguration (::std::auto_ptr< ButtonConfigurationType >&,
                                                  const ShowIDType&,
                                                  const ShowDeleteConfirmationType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        IncidentReportFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        IncidentReportFunctionalityConfiguration (const IncidentReportFunctionalityConfiguration& x,
                                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual IncidentReportFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~IncidentReportFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ButtonConfigurationType > ButtonConfiguration_;
        IncidentReportConfigurationSequence IncidentReportConfiguration_;
        CompleteReportParametersSequence CompleteReportParameters_;
        ::xsd::cxx::tree::one< ShowIDType > ShowID_;
        ::xsd::cxx::tree::one< ShowDeleteConfirmationType > ShowDeleteConfirmation_;

        //@endcond
      };

      bool
      operator== (const IncidentReportFunctionalityConfiguration&, const IncidentReportFunctionalityConfiguration&);

      bool
      operator!= (const IncidentReportFunctionalityConfiguration&, const IncidentReportFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %PollWorkerRegisterFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PollWorkerRegisterFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ButtonConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonBoxConfiguration ButtonConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonConfigurationType, char > ButtonConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonConfigurationType&
        getButtonConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonConfigurationType&
        getButtonConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonConfiguration (const ButtonConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonConfiguration (::std::auto_ptr< ButtonConfigurationType > p);

        //@}

        /**
         * @name ShowDeleteConfirmation
         *
         * @brief Accessor and modifier functions for the %ShowDeleteConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowDeleteConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowDeleteConfirmationType, char > ShowDeleteConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowDeleteConfirmationType&
        getShowDeleteConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowDeleteConfirmationType&
        getShowDeleteConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowDeleteConfirmation (const ShowDeleteConfirmationType& x);

        //@}

        /**
         * @name RegisterWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %RegisterWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterWidgetConfiguration RegisterWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterWidgetConfigurationType, char > RegisterWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > p);

        //@}

        /**
         * @name PollWorkerRegisterConfiguration
         *
         * @brief Accessor and modifier functions for the %PollWorkerRegisterConfiguration
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PollWorkerRegisterConfiguration PollWorkerRegisterConfigurationType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< PollWorkerRegisterConfigurationType > PollWorkerRegisterConfigurationSequence;

        /**
         * @brief Element iterator type.
         */
        typedef PollWorkerRegisterConfigurationSequence::iterator PollWorkerRegisterConfigurationIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef PollWorkerRegisterConfigurationSequence::const_iterator PollWorkerRegisterConfigurationConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PollWorkerRegisterConfigurationType, char > PollWorkerRegisterConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const PollWorkerRegisterConfigurationSequence&
        getPollWorkerRegisterConfiguration () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        PollWorkerRegisterConfigurationSequence&
        getPollWorkerRegisterConfiguration ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setPollWorkerRegisterConfiguration (const PollWorkerRegisterConfigurationSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PollWorkerRegisterFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PollWorkerRegisterFunctionalityConfiguration (const ButtonConfigurationType&,
                                                      const ShowDeleteConfirmationType&,
                                                      const RegisterWidgetConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        PollWorkerRegisterFunctionalityConfiguration (::std::auto_ptr< ButtonConfigurationType >&,
                                                      const ShowDeleteConfirmationType&,
                                                      ::std::auto_ptr< RegisterWidgetConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PollWorkerRegisterFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PollWorkerRegisterFunctionalityConfiguration (const PollWorkerRegisterFunctionalityConfiguration& x,
                                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PollWorkerRegisterFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PollWorkerRegisterFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ButtonConfigurationType > ButtonConfiguration_;
        ::xsd::cxx::tree::one< ShowDeleteConfirmationType > ShowDeleteConfirmation_;
        ::xsd::cxx::tree::one< RegisterWidgetConfigurationType > RegisterWidgetConfiguration_;
        PollWorkerRegisterConfigurationSequence PollWorkerRegisterConfiguration_;

        //@endcond
      };

      bool
      operator== (const PollWorkerRegisterFunctionalityConfiguration&, const PollWorkerRegisterFunctionalityConfiguration&);

      bool
      operator!= (const PollWorkerRegisterFunctionalityConfiguration&, const PollWorkerRegisterFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %CloseNoteRegisterFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CloseNoteRegisterFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name AddButtonConf
         *
         * @brief Accessor and modifier functions for the %AddButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration AddButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddButtonConfType, char > AddButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddButtonConfType&
        getAddButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddButtonConfType&
        getAddButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddButtonConf (const AddButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAddButtonConf (::std::auto_ptr< AddButtonConfType > p);

        //@}

        /**
         * @name NextButtonConf
         *
         * @brief Accessor and modifier functions for the %NextButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration NextButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NextButtonConfType, char > NextButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NextButtonConfType&
        getNextButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NextButtonConfType&
        getNextButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNextButtonConf (const NextButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNextButtonConf (::std::auto_ptr< NextButtonConfType > p);

        //@}

        /**
         * @name AddCancelButtonConf
         *
         * @brief Accessor and modifier functions for the %AddCancelButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration AddCancelButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddCancelButtonConfType, char > AddCancelButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddCancelButtonConfType&
        getAddCancelButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddCancelButtonConfType&
        getAddCancelButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddCancelButtonConf (const AddCancelButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAddCancelButtonConf (::std::auto_ptr< AddCancelButtonConfType > p);

        //@}

        /**
         * @name RegisterWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %RegisterWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterWidgetConfiguration RegisterWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterWidgetConfigurationType, char > RegisterWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CloseNoteRegisterFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CloseNoteRegisterFunctionalityConfiguration (const AddButtonConfType&,
                                                     const NextButtonConfType&,
                                                     const AddCancelButtonConfType&,
                                                     const RegisterWidgetConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CloseNoteRegisterFunctionalityConfiguration (::std::auto_ptr< AddButtonConfType >&,
                                                     ::std::auto_ptr< NextButtonConfType >&,
                                                     ::std::auto_ptr< AddCancelButtonConfType >&,
                                                     ::std::auto_ptr< RegisterWidgetConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseNoteRegisterFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CloseNoteRegisterFunctionalityConfiguration (const CloseNoteRegisterFunctionalityConfiguration& x,
                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CloseNoteRegisterFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CloseNoteRegisterFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< AddButtonConfType > AddButtonConf_;
        ::xsd::cxx::tree::one< NextButtonConfType > NextButtonConf_;
        ::xsd::cxx::tree::one< AddCancelButtonConfType > AddCancelButtonConf_;
        ::xsd::cxx::tree::one< RegisterWidgetConfigurationType > RegisterWidgetConfiguration_;

        //@endcond
      };

      bool
      operator== (const CloseNoteRegisterFunctionalityConfiguration&, const CloseNoteRegisterFunctionalityConfiguration&);

      bool
      operator!= (const CloseNoteRegisterFunctionalityConfiguration&, const CloseNoteRegisterFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %VoteConsolidationFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VoteConsolidationFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name UsePrintPreview
         *
         * @brief Accessor and modifier functions for the %UsePrintPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UsePrintPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UsePrintPreviewType, char > UsePrintPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UsePrintPreviewType&
        getUsePrintPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UsePrintPreviewType&
        getUsePrintPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUsePrintPreview (const UsePrintPreviewType& x);

        //@}

        /**
         * @name UseVerticalTableInPreview
         *
         * @brief Accessor and modifier functions for the %UseVerticalTableInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseVerticalTableInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseVerticalTableInPreviewType, char > UseVerticalTableInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseVerticalTableInPreviewType&
        getUseVerticalTableInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseVerticalTableInPreviewType&
        getUseVerticalTableInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseVerticalTableInPreview (const UseVerticalTableInPreviewType& x);

        //@}

        /**
         * @name CounterWidth
         *
         * @brief Accessor and modifier functions for the %CounterWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger CounterWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CounterWidthType, char > CounterWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CounterWidthType&
        getCounterWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CounterWidthType&
        getCounterWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCounterWidth (const CounterWidthType& x);

        //@}

        /**
         * @name CounterPadding
         *
         * @brief Accessor and modifier functions for the %CounterPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger CounterPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CounterPaddingType, char > CounterPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CounterPaddingType&
        getCounterPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CounterPaddingType&
        getCounterPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCounterPadding (const CounterPaddingType& x);

        //@}

        /**
         * @name ShowVotingMachineCustomAttribute
         *
         * @brief Accessor and modifier functions for the %ShowVotingMachineCustomAttribute
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowVotingMachineCustomAttributeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowVotingMachineCustomAttributeType, char > ShowVotingMachineCustomAttributeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowVotingMachineCustomAttributeType&
        getShowVotingMachineCustomAttribute () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowVotingMachineCustomAttributeType&
        getShowVotingMachineCustomAttribute ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowVotingMachineCustomAttribute (const ShowVotingMachineCustomAttributeType& x);

        //@}

        /**
         * @name StatisticsTitleLabelConfiguration
         *
         * @brief Accessor and modifier functions for the %StatisticsTitleLabelConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration StatisticsTitleLabelConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsTitleLabelConfigurationType, char > StatisticsTitleLabelConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsTitleLabelConfigurationType&
        getStatisticsTitleLabelConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsTitleLabelConfigurationType&
        getStatisticsTitleLabelConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsTitleLabelConfiguration (const StatisticsTitleLabelConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsTitleLabelConfiguration (::std::auto_ptr< StatisticsTitleLabelConfigurationType > p);

        //@}

        /**
         * @name StatisticsTitleColor
         *
         * @brief Accessor and modifier functions for the %StatisticsTitleColor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ColorConfiguration StatisticsTitleColorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticsTitleColorType, char > StatisticsTitleColorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticsTitleColorType&
        getStatisticsTitleColor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticsTitleColorType&
        getStatisticsTitleColor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticsTitleColor (const StatisticsTitleColorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticsTitleColor (::std::auto_ptr< StatisticsTitleColorType > p);

        //@}

        /**
         * @name ShowBarcodeInPreview
         *
         * @brief Accessor and modifier functions for the %ShowBarcodeInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBarcodeInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBarcodeInPreviewType, char > ShowBarcodeInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBarcodeInPreviewType&
        getShowBarcodeInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBarcodeInPreviewType&
        getShowBarcodeInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x);

        //@}

        /**
         * @name ConsolidateDemoVotes
         *
         * @brief Accessor and modifier functions for the %ConsolidateDemoVotes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ConsolidateDemoVotesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidateDemoVotesType, char > ConsolidateDemoVotesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidateDemoVotesType&
        getConsolidateDemoVotes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidateDemoVotesType&
        getConsolidateDemoVotes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidateDemoVotes (const ConsolidateDemoVotesType& x);

        //@}

        /**
         * @name ConsolidateSimulatedVotes
         *
         * @brief Accessor and modifier functions for the %ConsolidateSimulatedVotes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ConsolidateSimulatedVotesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidateSimulatedVotesType, char > ConsolidateSimulatedVotesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidateSimulatedVotesType&
        getConsolidateSimulatedVotes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidateSimulatedVotesType&
        getConsolidateSimulatedVotes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidateSimulatedVotes (const ConsolidateSimulatedVotesType& x);

        //@}

        /**
         * @name AuditModeResources
         *
         * @brief Accessor and modifier functions for the %AuditModeResources
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AuditModeResourcesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AuditModeResourcesType, char > AuditModeResourcesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AuditModeResourcesType&
        getAuditModeResources () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AuditModeResourcesType&
        getAuditModeResources ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAuditModeResources (const AuditModeResourcesType& x);

        //@}

        /**
         * @name BarcodeInParams
         *
         * @brief Accessor and modifier functions for the %BarcodeInParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeInParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeInParamsType, char > BarcodeInParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeInParamsType&
        getBarcodeInParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeInParamsType&
        getBarcodeInParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeInParams (const BarcodeInParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > p);

        //@}

        /**
         * @name BarcodeOutParams
         *
         * @brief Accessor and modifier functions for the %BarcodeOutParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeOutParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeOutParamsType, char > BarcodeOutParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeOutParamsType&
        getBarcodeOutParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeOutParamsType&
        getBarcodeOutParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeOutParams (const BarcodeOutParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > p);

        //@}

        /**
         * @name ConsolidationTotalCountConfiguration
         *
         * @brief Accessor and modifier functions for the %ConsolidationTotalCountConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountConfiguration ConsolidationTotalCountConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidationTotalCountConfigurationType, char > ConsolidationTotalCountConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidationTotalCountConfigurationType&
        getConsolidationTotalCountConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidationTotalCountConfigurationType&
        getConsolidationTotalCountConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidationTotalCountConfiguration (const ConsolidationTotalCountConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConsolidationTotalCountConfiguration (::std::auto_ptr< ConsolidationTotalCountConfigurationType > p);

        //@}

        /**
         * @name ConsolidationOfficialCountConfiguration
         *
         * @brief Accessor and modifier functions for the %ConsolidationOfficialCountConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CountConfiguration ConsolidationOfficialCountConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConsolidationOfficialCountConfigurationType, char > ConsolidationOfficialCountConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConsolidationOfficialCountConfigurationType&
        getConsolidationOfficialCountConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConsolidationOfficialCountConfigurationType&
        getConsolidationOfficialCountConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConsolidationOfficialCountConfiguration (const ConsolidationOfficialCountConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConsolidationOfficialCountConfiguration (::std::auto_ptr< ConsolidationOfficialCountConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VoteConsolidationFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VoteConsolidationFunctionalityConfiguration (const UsePrintPreviewType&,
                                                     const UseVerticalTableInPreviewType&,
                                                     const CounterWidthType&,
                                                     const CounterPaddingType&,
                                                     const ShowVotingMachineCustomAttributeType&,
                                                     const StatisticsTitleLabelConfigurationType&,
                                                     const StatisticsTitleColorType&,
                                                     const ShowBarcodeInPreviewType&,
                                                     const ConsolidateDemoVotesType&,
                                                     const ConsolidateSimulatedVotesType&,
                                                     const AuditModeResourcesType&,
                                                     const BarcodeInParamsType&,
                                                     const BarcodeOutParamsType&,
                                                     const ConsolidationTotalCountConfigurationType&,
                                                     const ConsolidationOfficialCountConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VoteConsolidationFunctionalityConfiguration (const UsePrintPreviewType&,
                                                     const UseVerticalTableInPreviewType&,
                                                     const CounterWidthType&,
                                                     const CounterPaddingType&,
                                                     const ShowVotingMachineCustomAttributeType&,
                                                     ::std::auto_ptr< StatisticsTitleLabelConfigurationType >&,
                                                     ::std::auto_ptr< StatisticsTitleColorType >&,
                                                     const ShowBarcodeInPreviewType&,
                                                     const ConsolidateDemoVotesType&,
                                                     const ConsolidateSimulatedVotesType&,
                                                     const AuditModeResourcesType&,
                                                     const BarcodeInParamsType&,
                                                     const BarcodeOutParamsType&,
                                                     ::std::auto_ptr< ConsolidationTotalCountConfigurationType >&,
                                                     ::std::auto_ptr< ConsolidationOfficialCountConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteConsolidationFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteConsolidationFunctionalityConfiguration (const VoteConsolidationFunctionalityConfiguration& x,
                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteConsolidationFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VoteConsolidationFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< UsePrintPreviewType > UsePrintPreview_;
        ::xsd::cxx::tree::one< UseVerticalTableInPreviewType > UseVerticalTableInPreview_;
        ::xsd::cxx::tree::one< CounterWidthType > CounterWidth_;
        ::xsd::cxx::tree::one< CounterPaddingType > CounterPadding_;
        ::xsd::cxx::tree::one< ShowVotingMachineCustomAttributeType > ShowVotingMachineCustomAttribute_;
        ::xsd::cxx::tree::one< StatisticsTitleLabelConfigurationType > StatisticsTitleLabelConfiguration_;
        ::xsd::cxx::tree::one< StatisticsTitleColorType > StatisticsTitleColor_;
        ::xsd::cxx::tree::one< ShowBarcodeInPreviewType > ShowBarcodeInPreview_;
        ::xsd::cxx::tree::one< ConsolidateDemoVotesType > ConsolidateDemoVotes_;
        ::xsd::cxx::tree::one< ConsolidateSimulatedVotesType > ConsolidateSimulatedVotes_;
        ::xsd::cxx::tree::one< AuditModeResourcesType > AuditModeResources_;
        ::xsd::cxx::tree::one< BarcodeInParamsType > BarcodeInParams_;
        ::xsd::cxx::tree::one< BarcodeOutParamsType > BarcodeOutParams_;
        ::xsd::cxx::tree::one< ConsolidationTotalCountConfigurationType > ConsolidationTotalCountConfiguration_;
        ::xsd::cxx::tree::one< ConsolidationOfficialCountConfigurationType > ConsolidationOfficialCountConfiguration_;

        //@endcond
      };

      bool
      operator== (const VoteConsolidationFunctionalityConfiguration&, const VoteConsolidationFunctionalityConfiguration&);

      bool
      operator!= (const VoteConsolidationFunctionalityConfiguration&, const VoteConsolidationFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %PrintPreviewFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PrintPreviewFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name UsePrintPreview
         *
         * @brief Accessor and modifier functions for the %UsePrintPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UsePrintPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UsePrintPreviewType, char > UsePrintPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UsePrintPreviewType&
        getUsePrintPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UsePrintPreviewType&
        getUsePrintPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUsePrintPreview (const UsePrintPreviewType& x);

        //@}

        /**
         * @name UseVerticalTableInPreview
         *
         * @brief Accessor and modifier functions for the %UseVerticalTableInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean UseVerticalTableInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseVerticalTableInPreviewType, char > UseVerticalTableInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseVerticalTableInPreviewType&
        getUseVerticalTableInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseVerticalTableInPreviewType&
        getUseVerticalTableInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseVerticalTableInPreview (const UseVerticalTableInPreviewType& x);

        //@}

        /**
         * @name ShowBarcodeInPreview
         *
         * @brief Accessor and modifier functions for the %ShowBarcodeInPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowBarcodeInPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBarcodeInPreviewType, char > ShowBarcodeInPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBarcodeInPreviewType&
        getShowBarcodeInPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBarcodeInPreviewType&
        getShowBarcodeInPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBarcodeInPreview (const ShowBarcodeInPreviewType& x);

        //@}

        /**
         * @name BarcodeInParams
         *
         * @brief Accessor and modifier functions for the %BarcodeInParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeInParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeInParamsType, char > BarcodeInParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeInParamsType&
        getBarcodeInParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeInParamsType&
        getBarcodeInParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeInParams (const BarcodeInParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeInParams (::std::auto_ptr< BarcodeInParamsType > p);

        //@}

        /**
         * @name BarcodeOutParams
         *
         * @brief Accessor and modifier functions for the %BarcodeOutParams
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String BarcodeOutParamsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeOutParamsType, char > BarcodeOutParamsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeOutParamsType&
        getBarcodeOutParams () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeOutParamsType&
        getBarcodeOutParams ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeOutParams (const BarcodeOutParamsType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeOutParams (::std::auto_ptr< BarcodeOutParamsType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PrintPreviewFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PrintPreviewFunctionalityConfiguration (const UsePrintPreviewType&,
                                                const UseVerticalTableInPreviewType&,
                                                const ShowBarcodeInPreviewType&,
                                                const BarcodeInParamsType&,
                                                const BarcodeOutParamsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PrintPreviewFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PrintPreviewFunctionalityConfiguration (const PrintPreviewFunctionalityConfiguration& x,
                                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PrintPreviewFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PrintPreviewFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< UsePrintPreviewType > UsePrintPreview_;
        ::xsd::cxx::tree::one< UseVerticalTableInPreviewType > UseVerticalTableInPreview_;
        ::xsd::cxx::tree::one< ShowBarcodeInPreviewType > ShowBarcodeInPreview_;
        ::xsd::cxx::tree::one< BarcodeInParamsType > BarcodeInParams_;
        ::xsd::cxx::tree::one< BarcodeOutParamsType > BarcodeOutParams_;

        //@endcond
      };

      bool
      operator== (const PrintPreviewFunctionalityConfiguration&, const PrintPreviewFunctionalityConfiguration&);

      bool
      operator!= (const PrintPreviewFunctionalityConfiguration&, const PrintPreviewFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %LogReportFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class LogReportFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PrinterMessageTimeout
         *
         * @brief Accessor and modifier functions for the %PrinterMessageTimeout
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PrinterMessageTimeoutType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrinterMessageTimeoutType, char > PrinterMessageTimeoutTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrinterMessageTimeoutType&
        getPrinterMessageTimeout () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrinterMessageTimeoutType&
        getPrinterMessageTimeout ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrinterMessageTimeout (const PrinterMessageTimeoutType& x);

        //@}

        /**
         * @name PageSize
         *
         * @brief Accessor and modifier functions for the %PageSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PageSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PageSizeType, char > PageSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PageSizeType&
        getPageSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PageSizeType&
        getPageSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPageSize (const PageSizeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        LogReportFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        LogReportFunctionalityConfiguration (const PrinterMessageTimeoutType&,
                                             const PageSizeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LogReportFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LogReportFunctionalityConfiguration (const LogReportFunctionalityConfiguration& x,
                                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LogReportFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~LogReportFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PrinterMessageTimeoutType > PrinterMessageTimeout_;
        ::xsd::cxx::tree::one< PageSizeType > PageSize_;

        //@endcond
      };

      bool
      operator== (const LogReportFunctionalityConfiguration&, const LogReportFunctionalityConfiguration&);

      bool
      operator!= (const LogReportFunctionalityConfiguration&, const LogReportFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %CloseNotetFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CloseNotetFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name MinimunNotesToRegister
         *
         * @brief Accessor and modifier functions for the %MinimunNotesToRegister
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MinimunNotesToRegisterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MinimunNotesToRegisterType, char > MinimunNotesToRegisterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MinimunNotesToRegisterType&
        getMinimunNotesToRegister () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MinimunNotesToRegisterType&
        getMinimunNotesToRegister ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMinimunNotesToRegister (const MinimunNotesToRegisterType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CloseNotetFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CloseNotetFunctionalityConfiguration (const MinimunNotesToRegisterType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CloseNotetFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CloseNotetFunctionalityConfiguration (const CloseNotetFunctionalityConfiguration& x,
                                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CloseNotetFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CloseNotetFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< MinimunNotesToRegisterType > MinimunNotesToRegister_;

        //@endcond
      };

      bool
      operator== (const CloseNotetFunctionalityConfiguration&, const CloseNotetFunctionalityConfiguration&);

      bool
      operator!= (const CloseNotetFunctionalityConfiguration&, const CloseNotetFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %VotingExperienceValidationScreensFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VotingExperienceValidationScreensFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ScreenOnlyFirstBallot
         *
         * @brief Accessor and modifier functions for the %ScreenOnlyFirstBallot
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ScreenOnlyFirstBallotType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ScreenOnlyFirstBallotType, char > ScreenOnlyFirstBallotTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ScreenOnlyFirstBallotType&
        getScreenOnlyFirstBallot () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ScreenOnlyFirstBallotType&
        getScreenOnlyFirstBallot ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setScreenOnlyFirstBallot (const ScreenOnlyFirstBallotType& x);

        //@}

        /**
         * @name Autorun
         *
         * @brief Accessor and modifier functions for the %Autorun
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AutorunType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AutorunType, char > AutorunTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AutorunType&
        getAutorun () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AutorunType&
        getAutorun ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAutorun (const AutorunType& x);

        //@}

        /**
         * @name TimeForStart
         *
         * @brief Accessor and modifier functions for the %TimeForStart
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeForStartType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeForStartType, char > TimeForStartTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeForStartType&
        getTimeForStart () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeForStartType&
        getTimeForStart ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeForStart (const TimeForStartType& x);

        //@}

        /**
         * @name Autoclose
         *
         * @brief Accessor and modifier functions for the %Autoclose
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean AutocloseType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AutocloseType, char > AutocloseTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AutocloseType&
        getAutoclose () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AutocloseType&
        getAutoclose ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAutoclose (const AutocloseType& x);

        //@}

        /**
         * @name TimeForClose
         *
         * @brief Accessor and modifier functions for the %TimeForClose
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeForCloseType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeForCloseType, char > TimeForCloseTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeForCloseType&
        getTimeForClose () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeForCloseType&
        getTimeForClose ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeForClose (const TimeForCloseType& x);

        //@}

        /**
         * @name TimeToShow
         *
         * @brief Accessor and modifier functions for the %TimeToShow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeToShowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeToShowType, char > TimeToShowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeToShowType&
        getTimeToShow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeToShowType&
        getTimeToShow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeToShow (const TimeToShowType& x);

        //@}

        /**
         * @name TimeToHide
         *
         * @brief Accessor and modifier functions for the %TimeToHide
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeToHideType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeToHideType, char > TimeToHideTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeToHideType&
        getTimeToHide () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeToHideType&
        getTimeToHide ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeToHide (const TimeToHideType& x);

        //@}

        /**
         * @name TimeAfterCapture
         *
         * @brief Accessor and modifier functions for the %TimeAfterCapture
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeAfterCaptureType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeAfterCaptureType, char > TimeAfterCaptureTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeAfterCaptureType&
        getTimeAfterCapture () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeAfterCaptureType&
        getTimeAfterCapture ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeAfterCapture (const TimeAfterCaptureType& x);

        //@}

        /**
         * @name CaptureWholeScreen
         *
         * @brief Accessor and modifier functions for the %CaptureWholeScreen
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean CaptureWholeScreenType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CaptureWholeScreenType, char > CaptureWholeScreenTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CaptureWholeScreenType&
        getCaptureWholeScreen () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CaptureWholeScreenType&
        getCaptureWholeScreen ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCaptureWholeScreen (const CaptureWholeScreenType& x);

        //@}

        /**
         * @name PartySelImageFormatName
         *
         * @brief Accessor and modifier functions for the %PartySelImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String PartySelImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartySelImageFormatNameType, char > PartySelImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartySelImageFormatNameType&
        getPartySelImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartySelImageFormatNameType&
        getPartySelImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartySelImageFormatName (const PartySelImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartySelImageFormatName (::std::auto_ptr< PartySelImageFormatNameType > p);

        //@}

        /**
         * @name OptionSelImageFormatName
         *
         * @brief Accessor and modifier functions for the %OptionSelImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String OptionSelImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptionSelImageFormatNameType, char > OptionSelImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OptionSelImageFormatNameType&
        getOptionSelImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OptionSelImageFormatNameType&
        getOptionSelImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOptionSelImageFormatName (const OptionSelImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setOptionSelImageFormatName (::std::auto_ptr< OptionSelImageFormatNameType > p);

        //@}

        /**
         * @name CustomAttrSelImageFormatName
         *
         * @brief Accessor and modifier functions for the %CustomAttrSelImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CustomAttrSelImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CustomAttrSelImageFormatNameType, char > CustomAttrSelImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CustomAttrSelImageFormatNameType&
        getCustomAttrSelImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CustomAttrSelImageFormatNameType&
        getCustomAttrSelImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCustomAttrSelImageFormatName (const CustomAttrSelImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCustomAttrSelImageFormatName (::std::auto_ptr< CustomAttrSelImageFormatNameType > p);

        //@}

        /**
         * @name CustomAttrConfImageFormatName
         *
         * @brief Accessor and modifier functions for the %CustomAttrConfImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CustomAttrConfImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CustomAttrConfImageFormatNameType, char > CustomAttrConfImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CustomAttrConfImageFormatNameType&
        getCustomAttrConfImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CustomAttrConfImageFormatNameType&
        getCustomAttrConfImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCustomAttrConfImageFormatName (const CustomAttrConfImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCustomAttrConfImageFormatName (::std::auto_ptr< CustomAttrConfImageFormatNameType > p);

        //@}

        /**
         * @name LanguageSelImageFormatName
         *
         * @brief Accessor and modifier functions for the %LanguageSelImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String LanguageSelImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LanguageSelImageFormatNameType, char > LanguageSelImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LanguageSelImageFormatNameType&
        getLanguageSelImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LanguageSelImageFormatNameType&
        getLanguageSelImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLanguageSelImageFormatName (const LanguageSelImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLanguageSelImageFormatName (::std::auto_ptr< LanguageSelImageFormatNameType > p);

        //@}

        /**
         * @name LanguageSelImageFormatNameConfirmation
         *
         * @brief Accessor and modifier functions for the %LanguageSelImageFormatNameConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String LanguageSelImageFormatNameConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LanguageSelImageFormatNameConfirmationType, char > LanguageSelImageFormatNameConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LanguageSelImageFormatNameConfirmationType&
        getLanguageSelImageFormatNameConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LanguageSelImageFormatNameConfirmationType&
        getLanguageSelImageFormatNameConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLanguageSelImageFormatNameConfirmation (const LanguageSelImageFormatNameConfirmationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLanguageSelImageFormatNameConfirmation (::std::auto_ptr< LanguageSelImageFormatNameConfirmationType > p);

        //@}

        /**
         * @name SuperNullImageFormatName
         *
         * @brief Accessor and modifier functions for the %SuperNullImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String SuperNullImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperNullImageFormatNameType, char > SuperNullImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperNullImageFormatNameType&
        getSuperNullImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperNullImageFormatNameType&
        getSuperNullImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperNullImageFormatName (const SuperNullImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperNullImageFormatName (::std::auto_ptr< SuperNullImageFormatNameType > p);

        //@}

        /**
         * @name SuperNullImageFormatNameConfirmation
         *
         * @brief Accessor and modifier functions for the %SuperNullImageFormatNameConfirmation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String SuperNullImageFormatNameConfirmationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SuperNullImageFormatNameConfirmationType, char > SuperNullImageFormatNameConfirmationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SuperNullImageFormatNameConfirmationType&
        getSuperNullImageFormatNameConfirmation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SuperNullImageFormatNameConfirmationType&
        getSuperNullImageFormatNameConfirmation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSuperNullImageFormatNameConfirmation (const SuperNullImageFormatNameConfirmationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSuperNullImageFormatNameConfirmation (::std::auto_ptr< SuperNullImageFormatNameConfirmationType > p);

        //@}

        /**
         * @name PrintImageFormatName
         *
         * @brief Accessor and modifier functions for the %PrintImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String PrintImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrintImageFormatNameType, char > PrintImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrintImageFormatNameType&
        getPrintImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrintImageFormatNameType&
        getPrintImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrintImageFormatName (const PrintImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPrintImageFormatName (::std::auto_ptr< PrintImageFormatNameType > p);

        //@}

        /**
         * @name CardRemotionIndImageFormatName
         *
         * @brief Accessor and modifier functions for the %CardRemotionIndImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardRemotionIndImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardRemotionIndImageFormatNameType, char > CardRemotionIndImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardRemotionIndImageFormatNameType&
        getCardRemotionIndImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardRemotionIndImageFormatNameType&
        getCardRemotionIndImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardRemotionIndImageFormatName (const CardRemotionIndImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardRemotionIndImageFormatName (::std::auto_ptr< CardRemotionIndImageFormatNameType > p);

        //@}

        /**
         * @name CardRemovedImageFormatName
         *
         * @brief Accessor and modifier functions for the %CardRemovedImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardRemovedImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardRemovedImageFormatNameType, char > CardRemovedImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardRemovedImageFormatNameType&
        getCardRemovedImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardRemovedImageFormatNameType&
        getCardRemovedImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardRemovedImageFormatName (const CardRemovedImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardRemovedImageFormatName (::std::auto_ptr< CardRemovedImageFormatNameType > p);

        //@}

        /**
         * @name FoldVoteImageFormatName
         *
         * @brief Accessor and modifier functions for the %FoldVoteImageFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String FoldVoteImageFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FoldVoteImageFormatNameType, char > FoldVoteImageFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FoldVoteImageFormatNameType&
        getFoldVoteImageFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FoldVoteImageFormatNameType&
        getFoldVoteImageFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFoldVoteImageFormatName (const FoldVoteImageFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFoldVoteImageFormatName (::std::auto_ptr< FoldVoteImageFormatNameType > p);

        //@}

        /**
         * @name NullImageConfirmationFormatName
         *
         * @brief Accessor and modifier functions for the %NullImageConfirmationFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String NullImageConfirmationFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NullImageConfirmationFormatNameType, char > NullImageConfirmationFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NullImageConfirmationFormatNameType&
        getNullImageConfirmationFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NullImageConfirmationFormatNameType&
        getNullImageConfirmationFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNullImageConfirmationFormatName (const NullImageConfirmationFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNullImageConfirmationFormatName (::std::auto_ptr< NullImageConfirmationFormatNameType > p);

        //@}

        /**
         * @name WelcomeScreenFormatName
         *
         * @brief Accessor and modifier functions for the %WelcomeScreenFormatName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String WelcomeScreenFormatNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WelcomeScreenFormatNameType, char > WelcomeScreenFormatNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WelcomeScreenFormatNameType&
        getWelcomeScreenFormatName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WelcomeScreenFormatNameType&
        getWelcomeScreenFormatName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWelcomeScreenFormatName (const WelcomeScreenFormatNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setWelcomeScreenFormatName (::std::auto_ptr< WelcomeScreenFormatNameType > p);

        //@}

        /**
         * @name ShowDialog
         *
         * @brief Accessor and modifier functions for the %ShowDialog
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowDialogType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowDialogType, char > ShowDialogTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowDialogType&
        getShowDialog () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowDialogType&
        getShowDialog ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowDialog (const ShowDialogType& x);

        //@}

        /**
         * @name ScreensButtonConf
         *
         * @brief Accessor and modifier functions for the %ScreensButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration ScreensButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ScreensButtonConfType, char > ScreensButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ScreensButtonConfType&
        getScreensButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ScreensButtonConfType&
        getScreensButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setScreensButtonConf (const ScreensButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setScreensButtonConf (::std::auto_ptr< ScreensButtonConfType > p);

        //@}

        /**
         * @name CheckImageFile
         *
         * @brief Accessor and modifier functions for the %CheckImageFile
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean CheckImageFileType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CheckImageFileType, char > CheckImageFileTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CheckImageFileType&
        getCheckImageFile () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CheckImageFileType&
        getCheckImageFile ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCheckImageFile (const CheckImageFileType& x);

        //@}

        /**
         * @name ShowFinalMessage
         *
         * @brief Accessor and modifier functions for the %ShowFinalMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowFinalMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowFinalMessageType, char > ShowFinalMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowFinalMessageType&
        getShowFinalMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowFinalMessageType&
        getShowFinalMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowFinalMessage (const ShowFinalMessageType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VotingExperienceValidationScreensFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VotingExperienceValidationScreensFunctionalityConfiguration (const ScreenOnlyFirstBallotType&,
                                                                     const AutorunType&,
                                                                     const TimeForStartType&,
                                                                     const AutocloseType&,
                                                                     const TimeForCloseType&,
                                                                     const TimeToShowType&,
                                                                     const TimeToHideType&,
                                                                     const TimeAfterCaptureType&,
                                                                     const CaptureWholeScreenType&,
                                                                     const PartySelImageFormatNameType&,
                                                                     const OptionSelImageFormatNameType&,
                                                                     const CustomAttrSelImageFormatNameType&,
                                                                     const CustomAttrConfImageFormatNameType&,
                                                                     const LanguageSelImageFormatNameType&,
                                                                     const LanguageSelImageFormatNameConfirmationType&,
                                                                     const SuperNullImageFormatNameType&,
                                                                     const SuperNullImageFormatNameConfirmationType&,
                                                                     const PrintImageFormatNameType&,
                                                                     const CardRemotionIndImageFormatNameType&,
                                                                     const CardRemovedImageFormatNameType&,
                                                                     const FoldVoteImageFormatNameType&,
                                                                     const NullImageConfirmationFormatNameType&,
                                                                     const WelcomeScreenFormatNameType&,
                                                                     const ShowDialogType&,
                                                                     const ScreensButtonConfType&,
                                                                     const CheckImageFileType&,
                                                                     const ShowFinalMessageType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VotingExperienceValidationScreensFunctionalityConfiguration (const ScreenOnlyFirstBallotType&,
                                                                     const AutorunType&,
                                                                     const TimeForStartType&,
                                                                     const AutocloseType&,
                                                                     const TimeForCloseType&,
                                                                     const TimeToShowType&,
                                                                     const TimeToHideType&,
                                                                     const TimeAfterCaptureType&,
                                                                     const CaptureWholeScreenType&,
                                                                     const PartySelImageFormatNameType&,
                                                                     const OptionSelImageFormatNameType&,
                                                                     const CustomAttrSelImageFormatNameType&,
                                                                     const CustomAttrConfImageFormatNameType&,
                                                                     const LanguageSelImageFormatNameType&,
                                                                     const LanguageSelImageFormatNameConfirmationType&,
                                                                     const SuperNullImageFormatNameType&,
                                                                     const SuperNullImageFormatNameConfirmationType&,
                                                                     const PrintImageFormatNameType&,
                                                                     const CardRemotionIndImageFormatNameType&,
                                                                     const CardRemovedImageFormatNameType&,
                                                                     const FoldVoteImageFormatNameType&,
                                                                     const NullImageConfirmationFormatNameType&,
                                                                     const WelcomeScreenFormatNameType&,
                                                                     const ShowDialogType&,
                                                                     ::std::auto_ptr< ScreensButtonConfType >&,
                                                                     const CheckImageFileType&,
                                                                     const ShowFinalMessageType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VotingExperienceValidationScreensFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VotingExperienceValidationScreensFunctionalityConfiguration (const VotingExperienceValidationScreensFunctionalityConfiguration& x,
                                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VotingExperienceValidationScreensFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VotingExperienceValidationScreensFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ScreenOnlyFirstBallotType > ScreenOnlyFirstBallot_;
        ::xsd::cxx::tree::one< AutorunType > Autorun_;
        ::xsd::cxx::tree::one< TimeForStartType > TimeForStart_;
        ::xsd::cxx::tree::one< AutocloseType > Autoclose_;
        ::xsd::cxx::tree::one< TimeForCloseType > TimeForClose_;
        ::xsd::cxx::tree::one< TimeToShowType > TimeToShow_;
        ::xsd::cxx::tree::one< TimeToHideType > TimeToHide_;
        ::xsd::cxx::tree::one< TimeAfterCaptureType > TimeAfterCapture_;
        ::xsd::cxx::tree::one< CaptureWholeScreenType > CaptureWholeScreen_;
        ::xsd::cxx::tree::one< PartySelImageFormatNameType > PartySelImageFormatName_;
        ::xsd::cxx::tree::one< OptionSelImageFormatNameType > OptionSelImageFormatName_;
        ::xsd::cxx::tree::one< CustomAttrSelImageFormatNameType > CustomAttrSelImageFormatName_;
        ::xsd::cxx::tree::one< CustomAttrConfImageFormatNameType > CustomAttrConfImageFormatName_;
        ::xsd::cxx::tree::one< LanguageSelImageFormatNameType > LanguageSelImageFormatName_;
        ::xsd::cxx::tree::one< LanguageSelImageFormatNameConfirmationType > LanguageSelImageFormatNameConfirmation_;
        ::xsd::cxx::tree::one< SuperNullImageFormatNameType > SuperNullImageFormatName_;
        ::xsd::cxx::tree::one< SuperNullImageFormatNameConfirmationType > SuperNullImageFormatNameConfirmation_;
        ::xsd::cxx::tree::one< PrintImageFormatNameType > PrintImageFormatName_;
        ::xsd::cxx::tree::one< CardRemotionIndImageFormatNameType > CardRemotionIndImageFormatName_;
        ::xsd::cxx::tree::one< CardRemovedImageFormatNameType > CardRemovedImageFormatName_;
        ::xsd::cxx::tree::one< FoldVoteImageFormatNameType > FoldVoteImageFormatName_;
        ::xsd::cxx::tree::one< NullImageConfirmationFormatNameType > NullImageConfirmationFormatName_;
        ::xsd::cxx::tree::one< WelcomeScreenFormatNameType > WelcomeScreenFormatName_;
        ::xsd::cxx::tree::one< ShowDialogType > ShowDialog_;
        ::xsd::cxx::tree::one< ScreensButtonConfType > ScreensButtonConf_;
        ::xsd::cxx::tree::one< CheckImageFileType > CheckImageFile_;
        ::xsd::cxx::tree::one< ShowFinalMessageType > ShowFinalMessage_;

        //@endcond
      };

      bool
      operator== (const VotingExperienceValidationScreensFunctionalityConfiguration&, const VotingExperienceValidationScreensFunctionalityConfiguration&);

      bool
      operator!= (const VotingExperienceValidationScreensFunctionalityConfiguration&, const VotingExperienceValidationScreensFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %VotingForDisabledFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VotingForDisabledFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name AddButtonConf
         *
         * @brief Accessor and modifier functions for the %AddButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration AddButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddButtonConfType, char > AddButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddButtonConfType&
        getAddButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddButtonConfType&
        getAddButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddButtonConf (const AddButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAddButtonConf (::std::auto_ptr< AddButtonConfType > p);

        //@}

        /**
         * @name QuestionTitleConfiguration
         *
         * @brief Accessor and modifier functions for the %QuestionTitleConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration QuestionTitleConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionTitleConfigurationType, char > QuestionTitleConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionTitleConfigurationType&
        getQuestionTitleConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionTitleConfigurationType&
        getQuestionTitleConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionTitleConfiguration (const QuestionTitleConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQuestionTitleConfiguration (::std::auto_ptr< QuestionTitleConfigurationType > p);

        //@}

        /**
         * @name QuestionButtonConf
         *
         * @brief Accessor and modifier functions for the %QuestionButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration QuestionButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QuestionButtonConfType, char > QuestionButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QuestionButtonConfType&
        getQuestionButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QuestionButtonConfType&
        getQuestionButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQuestionButtonConf (const QuestionButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQuestionButtonConf (::std::auto_ptr< QuestionButtonConfType > p);

        //@}

        /**
         * @name InfoTitleConfiguration
         *
         * @brief Accessor and modifier functions for the %InfoTitleConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InfoTitleConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoTitleConfigurationType, char > InfoTitleConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoTitleConfigurationType&
        getInfoTitleConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoTitleConfigurationType&
        getInfoTitleConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoTitleConfiguration (const InfoTitleConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoTitleConfiguration (::std::auto_ptr< InfoTitleConfigurationType > p);

        //@}

        /**
         * @name InfoIDConfiguration
         *
         * @brief Accessor and modifier functions for the %InfoIDConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InfoIDConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoIDConfigurationType, char > InfoIDConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoIDConfigurationType&
        getInfoIDConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoIDConfigurationType&
        getInfoIDConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoIDConfiguration (const InfoIDConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoIDConfiguration (::std::auto_ptr< InfoIDConfigurationType > p);

        //@}

        /**
         * @name InfoTextConfiguration
         *
         * @brief Accessor and modifier functions for the %InfoTextConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InfoTextConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoTextConfigurationType, char > InfoTextConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoTextConfigurationType&
        getInfoTextConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoTextConfigurationType&
        getInfoTextConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoTextConfiguration (const InfoTextConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoTextConfiguration (::std::auto_ptr< InfoTextConfigurationType > p);

        //@}

        /**
         * @name InfoErrorConfiguration
         *
         * @brief Accessor and modifier functions for the %InfoErrorConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::XMLLabelConfiguration InfoErrorConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoErrorConfigurationType, char > InfoErrorConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoErrorConfigurationType&
        getInfoErrorConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoErrorConfigurationType&
        getInfoErrorConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoErrorConfiguration (const InfoErrorConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoErrorConfiguration (::std::auto_ptr< InfoErrorConfigurationType > p);

        //@}

        /**
         * @name TimeOutInfoError
         *
         * @brief Accessor and modifier functions for the %TimeOutInfoError
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeOutInfoErrorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeOutInfoErrorType, char > TimeOutInfoErrorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeOutInfoErrorType&
        getTimeOutInfoError () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeOutInfoErrorType&
        getTimeOutInfoError ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeOutInfoError (const TimeOutInfoErrorType& x);

        //@}

        /**
         * @name AddCancelButtonConf
         *
         * @brief Accessor and modifier functions for the %AddCancelButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration AddCancelButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddCancelButtonConfType, char > AddCancelButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddCancelButtonConfType&
        getAddCancelButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddCancelButtonConfType&
        getAddCancelButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddCancelButtonConf (const AddCancelButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAddCancelButtonConf (::std::auto_ptr< AddCancelButtonConfType > p);

        //@}

        /**
         * @name RegisterWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %RegisterWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterWidgetConfiguration RegisterWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterWidgetConfigurationType, char > RegisterWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > p);

        //@}

        /**
         * @name CommentConfig
         *
         * @brief Accessor and modifier functions for the %CommentConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::IDProperties CommentConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CommentConfigType, char > CommentConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CommentConfigType&
        getCommentConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CommentConfigType&
        getCommentConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCommentConfig (const CommentConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCommentConfig (::std::auto_ptr< CommentConfigType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VotingForDisabledFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VotingForDisabledFunctionalityConfiguration (const AddButtonConfType&,
                                                     const QuestionTitleConfigurationType&,
                                                     const QuestionButtonConfType&,
                                                     const InfoTitleConfigurationType&,
                                                     const InfoIDConfigurationType&,
                                                     const InfoTextConfigurationType&,
                                                     const InfoErrorConfigurationType&,
                                                     const TimeOutInfoErrorType&,
                                                     const AddCancelButtonConfType&,
                                                     const RegisterWidgetConfigurationType&,
                                                     const CommentConfigType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        VotingForDisabledFunctionalityConfiguration (::std::auto_ptr< AddButtonConfType >&,
                                                     ::std::auto_ptr< QuestionTitleConfigurationType >&,
                                                     ::std::auto_ptr< QuestionButtonConfType >&,
                                                     ::std::auto_ptr< InfoTitleConfigurationType >&,
                                                     ::std::auto_ptr< InfoIDConfigurationType >&,
                                                     ::std::auto_ptr< InfoTextConfigurationType >&,
                                                     ::std::auto_ptr< InfoErrorConfigurationType >&,
                                                     const TimeOutInfoErrorType&,
                                                     ::std::auto_ptr< AddCancelButtonConfType >&,
                                                     ::std::auto_ptr< RegisterWidgetConfigurationType >&,
                                                     ::std::auto_ptr< CommentConfigType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VotingForDisabledFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VotingForDisabledFunctionalityConfiguration (const VotingForDisabledFunctionalityConfiguration& x,
                                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VotingForDisabledFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VotingForDisabledFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< AddButtonConfType > AddButtonConf_;
        ::xsd::cxx::tree::one< QuestionTitleConfigurationType > QuestionTitleConfiguration_;
        ::xsd::cxx::tree::one< QuestionButtonConfType > QuestionButtonConf_;
        ::xsd::cxx::tree::one< InfoTitleConfigurationType > InfoTitleConfiguration_;
        ::xsd::cxx::tree::one< InfoIDConfigurationType > InfoIDConfiguration_;
        ::xsd::cxx::tree::one< InfoTextConfigurationType > InfoTextConfiguration_;
        ::xsd::cxx::tree::one< InfoErrorConfigurationType > InfoErrorConfiguration_;
        ::xsd::cxx::tree::one< TimeOutInfoErrorType > TimeOutInfoError_;
        ::xsd::cxx::tree::one< AddCancelButtonConfType > AddCancelButtonConf_;
        ::xsd::cxx::tree::one< RegisterWidgetConfigurationType > RegisterWidgetConfiguration_;
        ::xsd::cxx::tree::one< CommentConfigType > CommentConfig_;

        //@endcond
      };

      bool
      operator== (const VotingForDisabledFunctionalityConfiguration&, const VotingForDisabledFunctionalityConfiguration&);

      bool
      operator!= (const VotingForDisabledFunctionalityConfiguration&, const VotingForDisabledFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %PoliceNoteRegisterFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class PoliceNoteRegisterFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name AddButtonConf
         *
         * @brief Accessor and modifier functions for the %AddButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration AddButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddButtonConfType, char > AddButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddButtonConfType&
        getAddButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddButtonConfType&
        getAddButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddButtonConf (const AddButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAddButtonConf (::std::auto_ptr< AddButtonConfType > p);

        //@}

        /**
         * @name AddCancelButtonConf
         *
         * @brief Accessor and modifier functions for the %AddCancelButtonConf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ButtonConfiguration AddCancelButtonConfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddCancelButtonConfType, char > AddCancelButtonConfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddCancelButtonConfType&
        getAddCancelButtonConf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddCancelButtonConfType&
        getAddCancelButtonConf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddCancelButtonConf (const AddCancelButtonConfType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAddCancelButtonConf (::std::auto_ptr< AddCancelButtonConfType > p);

        //@}

        /**
         * @name RegisterWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %RegisterWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterWidgetConfiguration RegisterWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterWidgetConfigurationType, char > RegisterWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterWidgetConfigurationType&
        getRegisterWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterWidgetConfiguration (const RegisterWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterWidgetConfiguration (::std::auto_ptr< RegisterWidgetConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PoliceNoteRegisterFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PoliceNoteRegisterFunctionalityConfiguration (const AddButtonConfType&,
                                                      const AddCancelButtonConfType&,
                                                      const RegisterWidgetConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        PoliceNoteRegisterFunctionalityConfiguration (::std::auto_ptr< AddButtonConfType >&,
                                                      ::std::auto_ptr< AddCancelButtonConfType >&,
                                                      ::std::auto_ptr< RegisterWidgetConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PoliceNoteRegisterFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PoliceNoteRegisterFunctionalityConfiguration (const PoliceNoteRegisterFunctionalityConfiguration& x,
                                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PoliceNoteRegisterFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PoliceNoteRegisterFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< AddButtonConfType > AddButtonConf_;
        ::xsd::cxx::tree::one< AddCancelButtonConfType > AddCancelButtonConf_;
        ::xsd::cxx::tree::one< RegisterWidgetConfigurationType > RegisterWidgetConfiguration_;

        //@endcond
      };

      bool
      operator== (const PoliceNoteRegisterFunctionalityConfiguration&, const PoliceNoteRegisterFunctionalityConfiguration&);

      bool
      operator!= (const PoliceNoteRegisterFunctionalityConfiguration&, const PoliceNoteRegisterFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %DataUtilsValidatorFunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class DataUtilsValidatorFunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name KeyFile
         *
         * @brief Accessor and modifier functions for the %KeyFile
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String KeyFileType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< KeyFileType, char > KeyFileTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const KeyFileType&
        getKeyFile () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        KeyFileType&
        getKeyFile ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setKeyFile (const KeyFileType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setKeyFile (::std::auto_ptr< KeyFileType > p);

        //@}

        /**
         * @name Separator
         *
         * @brief Accessor and modifier functions for the %Separator
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String SeparatorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SeparatorType, char > SeparatorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SeparatorType&
        getSeparator () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SeparatorType&
        getSeparator ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSeparator (const SeparatorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSeparator (::std::auto_ptr< SeparatorType > p);

        //@}

        /**
         * @name PositionCode
         *
         * @brief Accessor and modifier functions for the %PositionCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PositionCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PositionCodeType, char > PositionCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PositionCodeType&
        getPositionCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PositionCodeType&
        getPositionCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPositionCode (const PositionCodeType& x);

        //@}

        /**
         * @name PositionPassword
         *
         * @brief Accessor and modifier functions for the %PositionPassword
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PositionPasswordType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PositionPasswordType, char > PositionPasswordTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PositionPasswordType&
        getPositionPassword () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PositionPasswordType&
        getPositionPassword ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPositionPassword (const PositionPasswordType& x);

        //@}

        /**
         * @name Columns
         *
         * @brief Accessor and modifier functions for the %Columns
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ColumnsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ColumnsType, char > ColumnsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ColumnsType&
        getColumns () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ColumnsType&
        getColumns ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setColumns (const ColumnsType& x);

        //@}

        /**
         * @name Width
         *
         * @brief Accessor and modifier functions for the %Width
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger WidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WidthType, char > WidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WidthType&
        getWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WidthType&
        getWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWidth (const WidthType& x);

        //@}

        /**
         * @name Height
         *
         * @brief Accessor and modifier functions for the %Height
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger HeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeightType, char > HeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeightType&
        getHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeightType&
        getHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeight (const HeightType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        DataUtilsValidatorFunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        DataUtilsValidatorFunctionalityConfiguration (const KeyFileType&,
                                                      const SeparatorType&,
                                                      const PositionCodeType&,
                                                      const PositionPasswordType&,
                                                      const ColumnsType&,
                                                      const WidthType&,
                                                      const HeightType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DataUtilsValidatorFunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DataUtilsValidatorFunctionalityConfiguration (const DataUtilsValidatorFunctionalityConfiguration& x,
                                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DataUtilsValidatorFunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~DataUtilsValidatorFunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< KeyFileType > KeyFile_;
        ::xsd::cxx::tree::one< SeparatorType > Separator_;
        ::xsd::cxx::tree::one< PositionCodeType > PositionCode_;
        ::xsd::cxx::tree::one< PositionPasswordType > PositionPassword_;
        ::xsd::cxx::tree::one< ColumnsType > Columns_;
        ::xsd::cxx::tree::one< WidthType > Width_;
        ::xsd::cxx::tree::one< HeightType > Height_;

        //@endcond
      };

      bool
      operator== (const DataUtilsValidatorFunctionalityConfiguration&, const DataUtilsValidatorFunctionalityConfiguration&);

      bool
      operator!= (const DataUtilsValidatorFunctionalityConfiguration&, const DataUtilsValidatorFunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %ThemesConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ThemesConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name OfficialThemeConfiguration
         *
         * @brief Accessor and modifier functions for the %OfficialThemeConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::OfficialThemeConfiguration OfficialThemeConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OfficialThemeConfigurationType, char > OfficialThemeConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const OfficialThemeConfigurationType&
        getOfficialThemeConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        OfficialThemeConfigurationType&
        getOfficialThemeConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setOfficialThemeConfiguration (const OfficialThemeConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setOfficialThemeConfiguration (::std::auto_ptr< OfficialThemeConfigurationType > p);

        //@}

        /**
         * @name DemoThemeConfiguration
         *
         * @brief Accessor and modifier functions for the %DemoThemeConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DemoThemeConfiguration DemoThemeConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DemoThemeConfigurationType, char > DemoThemeConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DemoThemeConfigurationType&
        getDemoThemeConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DemoThemeConfigurationType&
        getDemoThemeConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDemoThemeConfiguration (const DemoThemeConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDemoThemeConfiguration (::std::auto_ptr< DemoThemeConfigurationType > p);

        //@}

        /**
         * @name RecoveryThemeConfiguration
         *
         * @brief Accessor and modifier functions for the %RecoveryThemeConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RecoveryThemeConfiguration RecoveryThemeConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RecoveryThemeConfigurationType, char > RecoveryThemeConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RecoveryThemeConfigurationType&
        getRecoveryThemeConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RecoveryThemeConfigurationType&
        getRecoveryThemeConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRecoveryThemeConfiguration (const RecoveryThemeConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRecoveryThemeConfiguration (::std::auto_ptr< RecoveryThemeConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ThemesConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ThemesConfiguration (const OfficialThemeConfigurationType&,
                             const DemoThemeConfigurationType&,
                             const RecoveryThemeConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ThemesConfiguration (::std::auto_ptr< OfficialThemeConfigurationType >&,
                             ::std::auto_ptr< DemoThemeConfigurationType >&,
                             ::std::auto_ptr< RecoveryThemeConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ThemesConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ThemesConfiguration (const ThemesConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ThemesConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ThemesConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< OfficialThemeConfigurationType > OfficialThemeConfiguration_;
        ::xsd::cxx::tree::one< DemoThemeConfigurationType > DemoThemeConfiguration_;
        ::xsd::cxx::tree::one< RecoveryThemeConfigurationType > RecoveryThemeConfiguration_;

        //@endcond
      };

      bool
      operator== (const ThemesConfiguration&, const ThemesConfiguration&);

      bool
      operator!= (const ThemesConfiguration&, const ThemesConfiguration&);


      /**
       * @brief Class corresponding to the %MenuOptions schema type.
       *
       * @nosubgrouping
       */
      class MenuOptions: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Option
         *
         * @brief Accessor and modifier functions for the %Option
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOption OptionType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< OptionType > OptionSequence;

        /**
         * @brief Element iterator type.
         */
        typedef OptionSequence::iterator OptionIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef OptionSequence::const_iterator OptionConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< OptionType, char > OptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const OptionSequence&
        getOption () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        OptionSequence&
        getOption ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setOption (const OptionSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MenuOptions ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MenuOptions (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MenuOptions (const MenuOptions& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MenuOptions*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~MenuOptions ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        OptionSequence Option_;

        //@endcond
      };

      bool
      operator== (const MenuOptions&, const MenuOptions&);

      bool
      operator!= (const MenuOptions&, const MenuOptions&);


      /**
       * @brief Enumeration class corresponding to the %CheckSumFailOption
       * schema type.
       */
      class CheckSumFailOption: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_CLEANSELECTIONS,
          CONFIGURATION_MAINTAINSELECTIONS,
          CONFIGURATION_CLOSEVOTINGEXPERIENCE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        CheckSumFailOption ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        CheckSumFailOption (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        CheckSumFailOption (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        CheckSumFailOption (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        CheckSumFailOption (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CheckSumFailOption (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CheckSumFailOption (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CheckSumFailOption (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CheckSumFailOption (const CheckSumFailOption& x,
                            ::Smartmatic::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CheckSumFailOption*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        CheckSumFailOption&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_CheckSumFailOption_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_CheckSumFailOption_convert () const;

        public:
        static const char* const _xsd_CheckSumFailOption_literals_[3];
        static const Value _xsd_CheckSumFailOption_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %LoadingBallotMessage
       * schema type.
       */
      class LoadingBallotMessage: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_NEVER,
          CONFIGURATION_ALWAYS,
          CONFIGURATION_SELECTIVE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        LoadingBallotMessage ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        LoadingBallotMessage (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        LoadingBallotMessage (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        LoadingBallotMessage (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        LoadingBallotMessage (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LoadingBallotMessage (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LoadingBallotMessage (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LoadingBallotMessage (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LoadingBallotMessage (const LoadingBallotMessage& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LoadingBallotMessage*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        LoadingBallotMessage&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_LoadingBallotMessage_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_LoadingBallotMessage_convert () const;

        public:
        static const char* const _xsd_LoadingBallotMessage_literals_[3];
        static const Value _xsd_LoadingBallotMessage_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %Label_Alignment
       * schema type.
       */
      class Label_Alignment: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_LEFT,
          CONFIGURATION_CENTER,
          CONFIGURATION_RIGHT
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        Label_Alignment ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        Label_Alignment (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        Label_Alignment (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        Label_Alignment (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        Label_Alignment (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Alignment (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Alignment (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Alignment (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Label_Alignment (const Label_Alignment& x,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Label_Alignment*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        Label_Alignment&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_Label_Alignment_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_Label_Alignment_convert () const;

        public:
        static const char* const _xsd_Label_Alignment_literals_[3];
        static const Value _xsd_Label_Alignment_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %Label_Style
       * schema type.
       */
      class Label_Style: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_NORMAL,
          CONFIGURATION_OBLIQUE,
          CONFIGURATION_ITALIC
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        Label_Style ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        Label_Style (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        Label_Style (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        Label_Style (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        Label_Style (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Style (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Style (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Style (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Label_Style (const Label_Style& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Label_Style*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        Label_Style&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_Label_Style_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_Label_Style_convert () const;

        public:
        static const char* const _xsd_Label_Style_literals_[3];
        static const Value _xsd_Label_Style_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %Label_Weight
       * schema type.
       */
      class Label_Weight: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_LIGHT,
          CONFIGURATION_NORMAL,
          CONFIGURATION_BOLD
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        Label_Weight ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        Label_Weight (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        Label_Weight (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        Label_Weight (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        Label_Weight (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Weight (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Weight (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Label_Weight (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        Label_Weight (const Label_Weight& x,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Label_Weight*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        Label_Weight&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_Label_Weight_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_Label_Weight_convert () const;

        public:
        static const char* const _xsd_Label_Weight_literals_[3];
        static const Value _xsd_Label_Weight_indexes_[3];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %PMWidgetConfiguration1 schema type.
       *
       * @nosubgrouping
       */
      class PMWidgetConfiguration1: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name NumberOfDivision
         *
         * @brief Accessor and modifier functions for the %NumberOfDivision
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger NumberOfDivisionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumberOfDivisionType, char > NumberOfDivisionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumberOfDivisionType&
        getNumberOfDivision () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumberOfDivisionType&
        getNumberOfDivision ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumberOfDivision (const NumberOfDivisionType& x);

        //@}

        /**
         * @name MaxCharacters
         *
         * @brief Accessor and modifier functions for the %MaxCharacters
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxCharactersType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxCharactersType, char > MaxCharactersTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxCharactersType&
        getMaxCharacters () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxCharactersType&
        getMaxCharacters ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxCharacters (const MaxCharactersType& x);

        //@}

        /**
         * @name EntryWidth
         *
         * @brief Accessor and modifier functions for the %EntryWidth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger EntryWidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EntryWidthType, char > EntryWidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EntryWidthType&
        getEntryWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EntryWidthType&
        getEntryWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEntryWidth (const EntryWidthType& x);

        //@}

        /**
         * @name ShowImages
         *
         * @brief Accessor and modifier functions for the %ShowImages
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowImagesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowImagesType, char > ShowImagesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowImagesType&
        getShowImages () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowImagesType&
        getShowImages ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowImages (const ShowImagesType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        PMWidgetConfiguration1 ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        PMWidgetConfiguration1 (const NumberOfDivisionType&,
                                const MaxCharactersType&,
                                const EntryWidthType&,
                                const ShowImagesType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PMWidgetConfiguration1 (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PMWidgetConfiguration1 (const PMWidgetConfiguration1& x,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PMWidgetConfiguration1*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~PMWidgetConfiguration1 ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< NumberOfDivisionType > NumberOfDivision_;
        ::xsd::cxx::tree::one< MaxCharactersType > MaxCharacters_;
        ::xsd::cxx::tree::one< EntryWidthType > EntryWidth_;
        ::xsd::cxx::tree::one< ShowImagesType > ShowImages_;

        //@endcond
      };

      bool
      operator== (const PMWidgetConfiguration1&, const PMWidgetConfiguration1&);

      bool
      operator!= (const PMWidgetConfiguration1&, const PMWidgetConfiguration1&);


      /**
       * @brief Class corresponding to the %FunctionalityConfiguration schema type.
       *
       * @nosubgrouping
       */
      class FunctionalityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name FunctionalityDescriptor
         *
         * @brief Accessor and modifier functions for the %FunctionalityDescriptor
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MenuOptionType FunctionalityDescriptorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FunctionalityDescriptorType, char > FunctionalityDescriptorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FunctionalityDescriptorType&
        getFunctionalityDescriptor () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FunctionalityDescriptorType&
        getFunctionalityDescriptor ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFunctionalityDescriptor (const FunctionalityDescriptorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFunctionalityDescriptor (::std::auto_ptr< FunctionalityDescriptorType > p);

        //@}

        /**
         * @name FunctionalityExitToAuthentication
         *
         * @brief Accessor and modifier functions for the %FunctionalityExitToAuthentication
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean FunctionalityExitToAuthenticationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FunctionalityExitToAuthenticationType, char > FunctionalityExitToAuthenticationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FunctionalityExitToAuthenticationType&
        getFunctionalityExitToAuthentication () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FunctionalityExitToAuthenticationType&
        getFunctionalityExitToAuthentication ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFunctionalityExitToAuthentication (const FunctionalityExitToAuthenticationType& x);

        //@}

        /**
         * @name ChallengeIsEnable
         *
         * @brief Accessor and modifier functions for the %ChallengeIsEnable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ChallengeIsEnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ChallengeIsEnableType, char > ChallengeIsEnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ChallengeIsEnableType&
        getChallengeIsEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ChallengeIsEnableType&
        getChallengeIsEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setChallengeIsEnable (const ChallengeIsEnableType& x);

        //@}

        /**
         * @name ChallengePasswordSource
         *
         * @brief Accessor and modifier functions for the %ChallengePasswordSource
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ChallengePasswordSourceEnum ChallengePasswordSourceType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ChallengePasswordSourceType, char > ChallengePasswordSourceTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ChallengePasswordSourceType&
        getChallengePasswordSource () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ChallengePasswordSourceType&
        getChallengePasswordSource ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setChallengePasswordSource (const ChallengePasswordSourceType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setChallengePasswordSource (::std::auto_ptr< ChallengePasswordSourceType > p);

        //@}

        /**
         * @name ElectionBlockStatus
         *
         * @brief Accessor and modifier functions for the %ElectionBlockStatus
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ElectionBlockStatusList ElectionBlockStatusType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< ElectionBlockStatusType > ElectionBlockStatusOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ElectionBlockStatusType, char > ElectionBlockStatusTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const ElectionBlockStatusOptional&
        getElectionBlockStatus () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        ElectionBlockStatusOptional&
        getElectionBlockStatus ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setElectionBlockStatus (const ElectionBlockStatusType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setElectionBlockStatus (const ElectionBlockStatusOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setElectionBlockStatus (::std::auto_ptr< ElectionBlockStatusType > p);

        //@}

        /**
         * @name Help
         *
         * @brief Accessor and modifier functions for the %Help
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::HelpConfiguration HelpType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< HelpType > HelpOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HelpType, char > HelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const HelpOptional&
        getHelp () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        HelpOptional&
        getHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHelp (const HelpType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setHelp (const HelpOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setHelp (::std::auto_ptr< HelpType > p);

        //@}

        /**
         * @name NecessaryDevicesConfiguration
         *
         * @brief Accessor and modifier functions for the %NecessaryDevicesConfiguration
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::NecessaryDevicesConfiguration NecessaryDevicesConfigurationType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< NecessaryDevicesConfigurationType > NecessaryDevicesConfigurationOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NecessaryDevicesConfigurationType, char > NecessaryDevicesConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const NecessaryDevicesConfigurationOptional&
        getNecessaryDevicesConfiguration () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        NecessaryDevicesConfigurationOptional&
        getNecessaryDevicesConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNecessaryDevicesConfiguration (const NecessaryDevicesConfigurationType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setNecessaryDevicesConfiguration (const NecessaryDevicesConfigurationOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setNecessaryDevicesConfiguration (::std::auto_ptr< NecessaryDevicesConfigurationType > p);

        //@}

        /**
         * @name ShowExitMessage
         *
         * @brief Accessor and modifier functions for the %ShowExitMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowExitMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowExitMessageType, char > ShowExitMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowExitMessageType&
        getShowExitMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowExitMessageType&
        getShowExitMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowExitMessage (const ShowExitMessageType& x);

        //@}

        /**
         * @name BlockMemoryBehavior
         *
         * @brief Accessor and modifier functions for the %BlockMemoryBehavior
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MemoryBlock BlockMemoryBehaviorType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< BlockMemoryBehaviorType > BlockMemoryBehaviorOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockMemoryBehaviorType, char > BlockMemoryBehaviorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const BlockMemoryBehaviorOptional&
        getBlockMemoryBehavior () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        BlockMemoryBehaviorOptional&
        getBlockMemoryBehavior ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBlockMemoryBehavior (const BlockMemoryBehaviorType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setBlockMemoryBehavior (const BlockMemoryBehaviorOptional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setBlockMemoryBehavior (::std::auto_ptr< BlockMemoryBehaviorType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        FunctionalityConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        FunctionalityConfiguration (const FunctionalityDescriptorType&,
                                    const FunctionalityExitToAuthenticationType&,
                                    const ChallengeIsEnableType&,
                                    const ChallengePasswordSourceType&,
                                    const ShowExitMessageType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        FunctionalityConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        FunctionalityConfiguration (const FunctionalityConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual FunctionalityConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~FunctionalityConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< FunctionalityDescriptorType > FunctionalityDescriptor_;
        ::xsd::cxx::tree::one< FunctionalityExitToAuthenticationType > FunctionalityExitToAuthentication_;
        ::xsd::cxx::tree::one< ChallengeIsEnableType > ChallengeIsEnable_;
        ::xsd::cxx::tree::one< ChallengePasswordSourceType > ChallengePasswordSource_;
        ElectionBlockStatusOptional ElectionBlockStatus_;
        HelpOptional Help_;
        NecessaryDevicesConfigurationOptional NecessaryDevicesConfiguration_;
        ::xsd::cxx::tree::one< ShowExitMessageType > ShowExitMessage_;
        BlockMemoryBehaviorOptional BlockMemoryBehavior_;

        //@endcond
      };

      bool
      operator== (const FunctionalityConfiguration&, const FunctionalityConfiguration&);

      bool
      operator!= (const FunctionalityConfiguration&, const FunctionalityConfiguration&);


      /**
       * @brief Class corresponding to the %LanguageButton schema type.
       *
       * @nosubgrouping
       */
      class LanguageButton: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name LanguageCode
         *
         * @brief Accessor and modifier functions for the %LanguageCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String LanguageCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LanguageCodeType, char > LanguageCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LanguageCodeType&
        getLanguageCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LanguageCodeType&
        getLanguageCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLanguageCode (const LanguageCodeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLanguageCode (::std::auto_ptr< LanguageCodeType > p);

        //@}

        /**
         * @name LanguageImageFile
         *
         * @brief Accessor and modifier functions for the %LanguageImageFile
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String LanguageImageFileType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LanguageImageFileType, char > LanguageImageFileTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LanguageImageFileType&
        getLanguageImageFile () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LanguageImageFileType&
        getLanguageImageFile ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLanguageImageFile (const LanguageImageFileType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLanguageImageFile (::std::auto_ptr< LanguageImageFileType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        LanguageButton ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        LanguageButton (const LanguageCodeType&,
                        const LanguageImageFileType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LanguageButton (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LanguageButton (const LanguageButton& x,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LanguageButton*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~LanguageButton ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< LanguageCodeType > LanguageCode_;
        ::xsd::cxx::tree::one< LanguageImageFileType > LanguageImageFile_;

        //@endcond
      };

      bool
      operator== (const LanguageButton&, const LanguageButton&);

      bool
      operator!= (const LanguageButton&, const LanguageButton&);


      /**
       * @brief Class corresponding to the %OfficialThemeConfiguration schema type.
       *
       * @nosubgrouping
       */
      class OfficialThemeConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name VotingWindowButton
         *
         * @brief Accessor and modifier functions for the %VotingWindowButton
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingWindowButtonType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWindowButtonType, char > VotingWindowButtonTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWindowButtonType&
        getVotingWindowButton () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWindowButtonType&
        getVotingWindowButton ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWindowButton (const VotingWindowButtonType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWindowButton (::std::auto_ptr< VotingWindowButtonType > p);

        //@}

        /**
         * @name VotingExperiencePartyEventbox
         *
         * @brief Accessor and modifier functions for the %VotingExperiencePartyEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperiencePartyEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperiencePartyEventboxType, char > VotingExperiencePartyEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperiencePartyEventboxType&
        getVotingExperiencePartyEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperiencePartyEventboxType&
        getVotingExperiencePartyEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperiencePartyEventbox (const VotingExperiencePartyEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperiencePartyEventbox (::std::auto_ptr< VotingExperiencePartyEventboxType > p);

        //@}

        /**
         * @name VotingExperienceWindow
         *
         * @brief Accessor and modifier functions for the %VotingExperienceWindow
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceWindowType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceWindowType, char > VotingExperienceWindowTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceWindowType&
        getVotingExperienceWindow () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceWindowType&
        getVotingExperienceWindow ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceWindow (const VotingExperienceWindowType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceWindow (::std::auto_ptr< VotingExperienceWindowType > p);

        //@}

        /**
         * @name VotingExperienceBallotOptionEventbox
         *
         * @brief Accessor and modifier functions for the %VotingExperienceBallotOptionEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceBallotOptionEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceBallotOptionEventboxType, char > VotingExperienceBallotOptionEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceBallotOptionEventboxType&
        getVotingExperienceBallotOptionEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceBallotOptionEventboxType&
        getVotingExperienceBallotOptionEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceBallotOptionEventbox (const VotingExperienceBallotOptionEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceBallotOptionEventbox (::std::auto_ptr< VotingExperienceBallotOptionEventboxType > p);

        //@}

        /**
         * @name CardActivatorFunctionalityMessage
         *
         * @brief Accessor and modifier functions for the %CardActivatorFunctionalityMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardActivatorFunctionalityMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivatorFunctionalityMessageType, char > CardActivatorFunctionalityMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivatorFunctionalityMessageType&
        getCardActivatorFunctionalityMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivatorFunctionalityMessageType&
        getCardActivatorFunctionalityMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivatorFunctionalityMessage (const CardActivatorFunctionalityMessageType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivatorFunctionalityMessage (::std::auto_ptr< CardActivatorFunctionalityMessageType > p);

        //@}

        /**
         * @name CardActivatorMessageEventbox
         *
         * @brief Accessor and modifier functions for the %CardActivatorMessageEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardActivatorMessageEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivatorMessageEventboxType, char > CardActivatorMessageEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivatorMessageEventboxType&
        getCardActivatorMessageEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivatorMessageEventboxType&
        getCardActivatorMessageEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivatorMessageEventbox (const CardActivatorMessageEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivatorMessageEventbox (::std::auto_ptr< CardActivatorMessageEventboxType > p);

        //@}

        /**
         * @name CardActivatorFunctionalityEventbox
         *
         * @brief Accessor and modifier functions for the %CardActivatorFunctionalityEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardActivatorFunctionalityEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivatorFunctionalityEventboxType, char > CardActivatorFunctionalityEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivatorFunctionalityEventboxType&
        getCardActivatorFunctionalityEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivatorFunctionalityEventboxType&
        getCardActivatorFunctionalityEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivatorFunctionalityEventbox (const CardActivatorFunctionalityEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivatorFunctionalityEventbox (::std::auto_ptr< CardActivatorFunctionalityEventboxType > p);

        //@}

        /**
         * @name CardActivatorValuesEventbox
         *
         * @brief Accessor and modifier functions for the %CardActivatorValuesEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardActivatorValuesEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivatorValuesEventboxType, char > CardActivatorValuesEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivatorValuesEventboxType&
        getCardActivatorValuesEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivatorValuesEventboxType&
        getCardActivatorValuesEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivatorValuesEventbox (const CardActivatorValuesEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivatorValuesEventbox (::std::auto_ptr< CardActivatorValuesEventboxType > p);

        //@}

        /**
         * @name CardActivatorFunctionalityCenterFrame
         *
         * @brief Accessor and modifier functions for the %CardActivatorFunctionalityCenterFrame
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CardActivatorFunctionalityCenterFrameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CardActivatorFunctionalityCenterFrameType, char > CardActivatorFunctionalityCenterFrameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CardActivatorFunctionalityCenterFrameType&
        getCardActivatorFunctionalityCenterFrame () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CardActivatorFunctionalityCenterFrameType&
        getCardActivatorFunctionalityCenterFrame ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCardActivatorFunctionalityCenterFrame (const CardActivatorFunctionalityCenterFrameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCardActivatorFunctionalityCenterFrame (::std::auto_ptr< CardActivatorFunctionalityCenterFrameType > p);

        //@}

        /**
         * @name EventboxStepBarcode
         *
         * @brief Accessor and modifier functions for the %EventboxStepBarcode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String EventboxStepBarcodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventboxStepBarcodeType, char > EventboxStepBarcodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventboxStepBarcodeType&
        getEventboxStepBarcode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventboxStepBarcodeType&
        getEventboxStepBarcode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventboxStepBarcode (const EventboxStepBarcodeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventboxStepBarcode (::std::auto_ptr< EventboxStepBarcodeType > p);

        //@}

        /**
         * @name EventboxStepBarcodeTitle
         *
         * @brief Accessor and modifier functions for the %EventboxStepBarcodeTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String EventboxStepBarcodeTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventboxStepBarcodeTitleType, char > EventboxStepBarcodeTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventboxStepBarcodeTitleType&
        getEventboxStepBarcodeTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventboxStepBarcodeTitleType&
        getEventboxStepBarcodeTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventboxStepBarcodeTitle (const EventboxStepBarcodeTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventboxStepBarcodeTitle (::std::auto_ptr< EventboxStepBarcodeTitleType > p);

        //@}

        /**
         * @name EventboxStepCardTitle
         *
         * @brief Accessor and modifier functions for the %EventboxStepCardTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String EventboxStepCardTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventboxStepCardTitleType, char > EventboxStepCardTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventboxStepCardTitleType&
        getEventboxStepCardTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventboxStepCardTitleType&
        getEventboxStepCardTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventboxStepCardTitle (const EventboxStepCardTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventboxStepCardTitle (::std::auto_ptr< EventboxStepCardTitleType > p);

        //@}

        /**
         * @name VoteDemoFunctionalityMessage
         *
         * @brief Accessor and modifier functions for the %VoteDemoFunctionalityMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VoteDemoFunctionalityMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteDemoFunctionalityMessageType, char > VoteDemoFunctionalityMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteDemoFunctionalityMessageType&
        getVoteDemoFunctionalityMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteDemoFunctionalityMessageType&
        getVoteDemoFunctionalityMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteDemoFunctionalityMessage (const VoteDemoFunctionalityMessageType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteDemoFunctionalityMessage (::std::auto_ptr< VoteDemoFunctionalityMessageType > p);

        //@}

        /**
         * @name StandInLabelLabel
         *
         * @brief Accessor and modifier functions for the %StandInLabelLabel
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String StandInLabelLabelType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StandInLabelLabelType, char > StandInLabelLabelTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StandInLabelLabelType&
        getStandInLabelLabel () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StandInLabelLabelType&
        getStandInLabelLabel ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStandInLabelLabel (const StandInLabelLabelType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStandInLabelLabel (::std::auto_ptr< StandInLabelLabelType > p);

        //@}

        /**
         * @name StandInLabelEvent
         *
         * @brief Accessor and modifier functions for the %StandInLabelEvent
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String StandInLabelEventType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StandInLabelEventType, char > StandInLabelEventTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StandInLabelEventType&
        getStandInLabelEvent () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StandInLabelEventType&
        getStandInLabelEvent ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStandInLabelEvent (const StandInLabelEventType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStandInLabelEvent (::std::auto_ptr< StandInLabelEventType > p);

        //@}

        /**
         * @name VotingExperienceSelectBallotOptionWidget
         *
         * @brief Accessor and modifier functions for the %VotingExperienceSelectBallotOptionWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceSelectBallotOptionWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceSelectBallotOptionWidgetType, char > VotingExperienceSelectBallotOptionWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceSelectBallotOptionWidgetType&
        getVotingExperienceSelectBallotOptionWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceSelectBallotOptionWidgetType&
        getVotingExperienceSelectBallotOptionWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceSelectBallotOptionWidget (const VotingExperienceSelectBallotOptionWidgetType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceSelectBallotOptionWidget (::std::auto_ptr< VotingExperienceSelectBallotOptionWidgetType > p);

        //@}

        /**
         * @name ChangeLanguageMessageWigdetEventbox
         *
         * @brief Accessor and modifier functions for the %ChangeLanguageMessageWigdetEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ChangeLanguageMessageWigdetEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ChangeLanguageMessageWigdetEventboxType, char > ChangeLanguageMessageWigdetEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ChangeLanguageMessageWigdetEventboxType&
        getChangeLanguageMessageWigdetEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ChangeLanguageMessageWigdetEventboxType&
        getChangeLanguageMessageWigdetEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setChangeLanguageMessageWigdetEventbox (const ChangeLanguageMessageWigdetEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setChangeLanguageMessageWigdetEventbox (::std::auto_ptr< ChangeLanguageMessageWigdetEventboxType > p);

        //@}

        /**
         * @name CustomAttributeComboSelectionsWidgetTitle
         *
         * @brief Accessor and modifier functions for the %CustomAttributeComboSelectionsWidgetTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CustomAttributeComboSelectionsWidgetTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CustomAttributeComboSelectionsWidgetTitleType, char > CustomAttributeComboSelectionsWidgetTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CustomAttributeComboSelectionsWidgetTitleType&
        getCustomAttributeComboSelectionsWidgetTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CustomAttributeComboSelectionsWidgetTitleType&
        getCustomAttributeComboSelectionsWidgetTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCustomAttributeComboSelectionsWidgetTitle (const CustomAttributeComboSelectionsWidgetTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCustomAttributeComboSelectionsWidgetTitle (::std::auto_ptr< CustomAttributeComboSelectionsWidgetTitleType > p);

        //@}

        /**
         * @name CustomAttributeCounterWidgetTitle
         *
         * @brief Accessor and modifier functions for the %CustomAttributeCounterWidgetTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String CustomAttributeCounterWidgetTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CustomAttributeCounterWidgetTitleType, char > CustomAttributeCounterWidgetTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CustomAttributeCounterWidgetTitleType&
        getCustomAttributeCounterWidgetTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CustomAttributeCounterWidgetTitleType&
        getCustomAttributeCounterWidgetTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCustomAttributeCounterWidgetTitle (const CustomAttributeCounterWidgetTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCustomAttributeCounterWidgetTitle (::std::auto_ptr< CustomAttributeCounterWidgetTitleType > p);

        //@}

        /**
         * @name EventboxChooseWidgetFrame
         *
         * @brief Accessor and modifier functions for the %EventboxChooseWidgetFrame
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String EventboxChooseWidgetFrameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventboxChooseWidgetFrameType, char > EventboxChooseWidgetFrameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventboxChooseWidgetFrameType&
        getEventboxChooseWidgetFrame () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventboxChooseWidgetFrameType&
        getEventboxChooseWidgetFrame ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventboxChooseWidgetFrame (const EventboxChooseWidgetFrameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventboxChooseWidgetFrame (::std::auto_ptr< EventboxChooseWidgetFrameType > p);

        //@}

        /**
         * @name VotingExperiencePartyWidget
         *
         * @brief Accessor and modifier functions for the %VotingExperiencePartyWidget
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperiencePartyWidgetType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperiencePartyWidgetType, char > VotingExperiencePartyWidgetTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperiencePartyWidgetType&
        getVotingExperiencePartyWidget () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperiencePartyWidgetType&
        getVotingExperiencePartyWidget ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperiencePartyWidget (const VotingExperiencePartyWidgetType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperiencePartyWidget (::std::auto_ptr< VotingExperiencePartyWidgetType > p);

        //@}

        /**
         * @name PartyWidgetEventbox
         *
         * @brief Accessor and modifier functions for the %PartyWidgetEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String PartyWidgetEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PartyWidgetEventboxType, char > PartyWidgetEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PartyWidgetEventboxType&
        getPartyWidgetEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PartyWidgetEventboxType&
        getPartyWidgetEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPartyWidgetEventbox (const PartyWidgetEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPartyWidgetEventbox (::std::auto_ptr< PartyWidgetEventboxType > p);

        //@}

        /**
         * @name EventboxImageStepInstallationWizard
         *
         * @brief Accessor and modifier functions for the %EventboxImageStepInstallationWizard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String EventboxImageStepInstallationWizardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventboxImageStepInstallationWizardType, char > EventboxImageStepInstallationWizardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventboxImageStepInstallationWizardType&
        getEventboxImageStepInstallationWizard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventboxImageStepInstallationWizardType&
        getEventboxImageStepInstallationWizard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventboxImageStepInstallationWizard (const EventboxImageStepInstallationWizardType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventboxImageStepInstallationWizard (::std::auto_ptr< EventboxImageStepInstallationWizardType > p);

        //@}

        /**
         * @name EventboxStepInstallationWizard
         *
         * @brief Accessor and modifier functions for the %EventboxStepInstallationWizard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String EventboxStepInstallationWizardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventboxStepInstallationWizardType, char > EventboxStepInstallationWizardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventboxStepInstallationWizardType&
        getEventboxStepInstallationWizard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventboxStepInstallationWizardType&
        getEventboxStepInstallationWizard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventboxStepInstallationWizard (const EventboxStepInstallationWizardType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventboxStepInstallationWizard (::std::auto_ptr< EventboxStepInstallationWizardType > p);

        //@}

        /**
         * @name ParentKeypadEventbox
         *
         * @brief Accessor and modifier functions for the %ParentKeypadEventbox
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ParentKeypadEventboxType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ParentKeypadEventboxType, char > ParentKeypadEventboxTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ParentKeypadEventboxType&
        getParentKeypadEventbox () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ParentKeypadEventboxType&
        getParentKeypadEventbox ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setParentKeypadEventbox (const ParentKeypadEventboxType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setParentKeypadEventbox (::std::auto_ptr< ParentKeypadEventboxType > p);

        //@}

        /**
         * @name InfoFrame
         *
         * @brief Accessor and modifier functions for the %InfoFrame
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String InfoFrameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< InfoFrameType, char > InfoFrameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const InfoFrameType&
        getInfoFrame () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        InfoFrameType&
        getInfoFrame ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setInfoFrame (const InfoFrameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setInfoFrame (::std::auto_ptr< InfoFrameType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        OfficialThemeConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        OfficialThemeConfiguration (const VotingWindowButtonType&,
                                    const VotingExperiencePartyEventboxType&,
                                    const VotingExperienceWindowType&,
                                    const VotingExperienceBallotOptionEventboxType&,
                                    const CardActivatorFunctionalityMessageType&,
                                    const CardActivatorMessageEventboxType&,
                                    const CardActivatorFunctionalityEventboxType&,
                                    const CardActivatorValuesEventboxType&,
                                    const CardActivatorFunctionalityCenterFrameType&,
                                    const EventboxStepBarcodeType&,
                                    const EventboxStepBarcodeTitleType&,
                                    const EventboxStepCardTitleType&,
                                    const VoteDemoFunctionalityMessageType&,
                                    const StandInLabelLabelType&,
                                    const StandInLabelEventType&,
                                    const VotingExperienceSelectBallotOptionWidgetType&,
                                    const ChangeLanguageMessageWigdetEventboxType&,
                                    const CustomAttributeComboSelectionsWidgetTitleType&,
                                    const CustomAttributeCounterWidgetTitleType&,
                                    const EventboxChooseWidgetFrameType&,
                                    const VotingExperiencePartyWidgetType&,
                                    const PartyWidgetEventboxType&,
                                    const EventboxImageStepInstallationWizardType&,
                                    const EventboxStepInstallationWizardType&,
                                    const ParentKeypadEventboxType&,
                                    const InfoFrameType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        OfficialThemeConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        OfficialThemeConfiguration (const OfficialThemeConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual OfficialThemeConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~OfficialThemeConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< VotingWindowButtonType > VotingWindowButton_;
        ::xsd::cxx::tree::one< VotingExperiencePartyEventboxType > VotingExperiencePartyEventbox_;
        ::xsd::cxx::tree::one< VotingExperienceWindowType > VotingExperienceWindow_;
        ::xsd::cxx::tree::one< VotingExperienceBallotOptionEventboxType > VotingExperienceBallotOptionEventbox_;
        ::xsd::cxx::tree::one< CardActivatorFunctionalityMessageType > CardActivatorFunctionalityMessage_;
        ::xsd::cxx::tree::one< CardActivatorMessageEventboxType > CardActivatorMessageEventbox_;
        ::xsd::cxx::tree::one< CardActivatorFunctionalityEventboxType > CardActivatorFunctionalityEventbox_;
        ::xsd::cxx::tree::one< CardActivatorValuesEventboxType > CardActivatorValuesEventbox_;
        ::xsd::cxx::tree::one< CardActivatorFunctionalityCenterFrameType > CardActivatorFunctionalityCenterFrame_;
        ::xsd::cxx::tree::one< EventboxStepBarcodeType > EventboxStepBarcode_;
        ::xsd::cxx::tree::one< EventboxStepBarcodeTitleType > EventboxStepBarcodeTitle_;
        ::xsd::cxx::tree::one< EventboxStepCardTitleType > EventboxStepCardTitle_;
        ::xsd::cxx::tree::one< VoteDemoFunctionalityMessageType > VoteDemoFunctionalityMessage_;
        ::xsd::cxx::tree::one< StandInLabelLabelType > StandInLabelLabel_;
        ::xsd::cxx::tree::one< StandInLabelEventType > StandInLabelEvent_;
        ::xsd::cxx::tree::one< VotingExperienceSelectBallotOptionWidgetType > VotingExperienceSelectBallotOptionWidget_;
        ::xsd::cxx::tree::one< ChangeLanguageMessageWigdetEventboxType > ChangeLanguageMessageWigdetEventbox_;
        ::xsd::cxx::tree::one< CustomAttributeComboSelectionsWidgetTitleType > CustomAttributeComboSelectionsWidgetTitle_;
        ::xsd::cxx::tree::one< CustomAttributeCounterWidgetTitleType > CustomAttributeCounterWidgetTitle_;
        ::xsd::cxx::tree::one< EventboxChooseWidgetFrameType > EventboxChooseWidgetFrame_;
        ::xsd::cxx::tree::one< VotingExperiencePartyWidgetType > VotingExperiencePartyWidget_;
        ::xsd::cxx::tree::one< PartyWidgetEventboxType > PartyWidgetEventbox_;
        ::xsd::cxx::tree::one< EventboxImageStepInstallationWizardType > EventboxImageStepInstallationWizard_;
        ::xsd::cxx::tree::one< EventboxStepInstallationWizardType > EventboxStepInstallationWizard_;
        ::xsd::cxx::tree::one< ParentKeypadEventboxType > ParentKeypadEventbox_;
        ::xsd::cxx::tree::one< InfoFrameType > InfoFrame_;

        //@endcond
      };

      bool
      operator== (const OfficialThemeConfiguration&, const OfficialThemeConfiguration&);

      bool
      operator!= (const OfficialThemeConfiguration&, const OfficialThemeConfiguration&);


      /**
       * @brief Class corresponding to the %DemoThemeConfiguration schema type.
       *
       * @nosubgrouping
       */
      class DemoThemeConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name VotingWindowButtonDemo
         *
         * @brief Accessor and modifier functions for the %VotingWindowButtonDemo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingWindowButtonDemoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWindowButtonDemoType, char > VotingWindowButtonDemoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWindowButtonDemoType&
        getVotingWindowButtonDemo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWindowButtonDemoType&
        getVotingWindowButtonDemo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWindowButtonDemo (const VotingWindowButtonDemoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWindowButtonDemo (::std::auto_ptr< VotingWindowButtonDemoType > p);

        //@}

        /**
         * @name VotingExperiencePartyEventboxDemo
         *
         * @brief Accessor and modifier functions for the %VotingExperiencePartyEventboxDemo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperiencePartyEventboxDemoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperiencePartyEventboxDemoType, char > VotingExperiencePartyEventboxDemoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperiencePartyEventboxDemoType&
        getVotingExperiencePartyEventboxDemo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperiencePartyEventboxDemoType&
        getVotingExperiencePartyEventboxDemo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperiencePartyEventboxDemo (const VotingExperiencePartyEventboxDemoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperiencePartyEventboxDemo (::std::auto_ptr< VotingExperiencePartyEventboxDemoType > p);

        //@}

        /**
         * @name VotingExperienceWindowDemo
         *
         * @brief Accessor and modifier functions for the %VotingExperienceWindowDemo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceWindowDemoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceWindowDemoType, char > VotingExperienceWindowDemoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceWindowDemoType&
        getVotingExperienceWindowDemo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceWindowDemoType&
        getVotingExperienceWindowDemo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceWindowDemo (const VotingExperienceWindowDemoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceWindowDemo (::std::auto_ptr< VotingExperienceWindowDemoType > p);

        //@}

        /**
         * @name VotingExperienceBallotOptionEventboxDemo
         *
         * @brief Accessor and modifier functions for the %VotingExperienceBallotOptionEventboxDemo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceBallotOptionEventboxDemoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceBallotOptionEventboxDemoType, char > VotingExperienceBallotOptionEventboxDemoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceBallotOptionEventboxDemoType&
        getVotingExperienceBallotOptionEventboxDemo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceBallotOptionEventboxDemoType&
        getVotingExperienceBallotOptionEventboxDemo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceBallotOptionEventboxDemo (const VotingExperienceBallotOptionEventboxDemoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceBallotOptionEventboxDemo (::std::auto_ptr< VotingExperienceBallotOptionEventboxDemoType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        DemoThemeConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        DemoThemeConfiguration (const VotingWindowButtonDemoType&,
                                const VotingExperiencePartyEventboxDemoType&,
                                const VotingExperienceWindowDemoType&,
                                const VotingExperienceBallotOptionEventboxDemoType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DemoThemeConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DemoThemeConfiguration (const DemoThemeConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DemoThemeConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~DemoThemeConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< VotingWindowButtonDemoType > VotingWindowButtonDemo_;
        ::xsd::cxx::tree::one< VotingExperiencePartyEventboxDemoType > VotingExperiencePartyEventboxDemo_;
        ::xsd::cxx::tree::one< VotingExperienceWindowDemoType > VotingExperienceWindowDemo_;
        ::xsd::cxx::tree::one< VotingExperienceBallotOptionEventboxDemoType > VotingExperienceBallotOptionEventboxDemo_;

        //@endcond
      };

      bool
      operator== (const DemoThemeConfiguration&, const DemoThemeConfiguration&);

      bool
      operator!= (const DemoThemeConfiguration&, const DemoThemeConfiguration&);


      /**
       * @brief Class corresponding to the %RecoveryThemeConfiguration schema type.
       *
       * @nosubgrouping
       */
      class RecoveryThemeConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name VotingWindowButtonRecovery
         *
         * @brief Accessor and modifier functions for the %VotingWindowButtonRecovery
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingWindowButtonRecoveryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingWindowButtonRecoveryType, char > VotingWindowButtonRecoveryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingWindowButtonRecoveryType&
        getVotingWindowButtonRecovery () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingWindowButtonRecoveryType&
        getVotingWindowButtonRecovery ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingWindowButtonRecovery (const VotingWindowButtonRecoveryType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingWindowButtonRecovery (::std::auto_ptr< VotingWindowButtonRecoveryType > p);

        //@}

        /**
         * @name VotingExperiencePartyEventboxRecovery
         *
         * @brief Accessor and modifier functions for the %VotingExperiencePartyEventboxRecovery
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperiencePartyEventboxRecoveryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperiencePartyEventboxRecoveryType, char > VotingExperiencePartyEventboxRecoveryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperiencePartyEventboxRecoveryType&
        getVotingExperiencePartyEventboxRecovery () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperiencePartyEventboxRecoveryType&
        getVotingExperiencePartyEventboxRecovery ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperiencePartyEventboxRecovery (const VotingExperiencePartyEventboxRecoveryType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperiencePartyEventboxRecovery (::std::auto_ptr< VotingExperiencePartyEventboxRecoveryType > p);

        //@}

        /**
         * @name VotingExperienceWindowRecovery
         *
         * @brief Accessor and modifier functions for the %VotingExperienceWindowRecovery
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceWindowRecoveryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceWindowRecoveryType, char > VotingExperienceWindowRecoveryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceWindowRecoveryType&
        getVotingExperienceWindowRecovery () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceWindowRecoveryType&
        getVotingExperienceWindowRecovery ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceWindowRecovery (const VotingExperienceWindowRecoveryType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceWindowRecovery (::std::auto_ptr< VotingExperienceWindowRecoveryType > p);

        //@}

        /**
         * @name VotingExperienceBallotOptionEventboxRecovery
         *
         * @brief Accessor and modifier functions for the %VotingExperienceBallotOptionEventboxRecovery
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceBallotOptionEventboxRecoveryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VotingExperienceBallotOptionEventboxRecoveryType, char > VotingExperienceBallotOptionEventboxRecoveryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VotingExperienceBallotOptionEventboxRecoveryType&
        getVotingExperienceBallotOptionEventboxRecovery () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VotingExperienceBallotOptionEventboxRecoveryType&
        getVotingExperienceBallotOptionEventboxRecovery ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVotingExperienceBallotOptionEventboxRecovery (const VotingExperienceBallotOptionEventboxRecoveryType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVotingExperienceBallotOptionEventboxRecovery (::std::auto_ptr< VotingExperienceBallotOptionEventboxRecoveryType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        RecoveryThemeConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        RecoveryThemeConfiguration (const VotingWindowButtonRecoveryType&,
                                    const VotingExperiencePartyEventboxRecoveryType&,
                                    const VotingExperienceWindowRecoveryType&,
                                    const VotingExperienceBallotOptionEventboxRecoveryType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RecoveryThemeConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        RecoveryThemeConfiguration (const RecoveryThemeConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual RecoveryThemeConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~RecoveryThemeConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< VotingWindowButtonRecoveryType > VotingWindowButtonRecovery_;
        ::xsd::cxx::tree::one< VotingExperiencePartyEventboxRecoveryType > VotingExperiencePartyEventboxRecovery_;
        ::xsd::cxx::tree::one< VotingExperienceWindowRecoveryType > VotingExperienceWindowRecovery_;
        ::xsd::cxx::tree::one< VotingExperienceBallotOptionEventboxRecoveryType > VotingExperienceBallotOptionEventboxRecovery_;

        //@endcond
      };

      bool
      operator== (const RecoveryThemeConfiguration&, const RecoveryThemeConfiguration&);

      bool
      operator!= (const RecoveryThemeConfiguration&, const RecoveryThemeConfiguration&);
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      /**
       * @name Parsing functions for the %PMWidgetConfiguration document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::std::string& uri,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::std::string& uri,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  const ::std::string& id,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  const ::std::string& id,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::xercesc::InputSource& is,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::xercesc::InputSource& is,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1 >
      parsePMWidgetConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      //@}

      /**
       * @name Parsing functions for the %SaesGUIConfiguration document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::std::string& uri,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::std::string& uri,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::std::string& uri,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 const ::std::string& id,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 const ::std::string& id,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::std::istream& is,
                                 const ::std::string& id,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::xercesc::InputSource& is,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::xercesc::InputSource& is,
                                 ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::xercesc::InputSource& is,
                                 ::xercesc::DOMErrorHandler& eh,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (const ::xercesc::DOMDocument& d,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesGUIConfiguration >
      parseSaesGUIConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      //@}
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      void
      operator<< (::xercesc::DOMElement&, const SaesGUIConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const OpenElectionSteps&);

      void
      operator<< (::xercesc::DOMAttr&, const OpenElectionSteps&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const OpenElectionSteps&);

      void
      operator<< (::xercesc::DOMElement&, const ScanConsolidationConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ScanPopUpMessageConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PositionConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const PositionConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const PositionConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const TreeColumnConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const IncidentReportColumn&);

      void
      operator<< (::xercesc::DOMAttr&, const IncidentReportColumn&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const IncidentReportColumn&);

      void
      operator<< (::xercesc::DOMElement&, const IncidentReportTreeViewConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ButtonConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ButtonBoxConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const MenuWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const MenuOption&);

      void
      operator<< (::xercesc::DOMElement&, const MenuOptionType&);

      void
      operator<< (::xercesc::DOMAttr&, const MenuOptionType&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const MenuOptionType&);

      void
      operator<< (::xercesc::DOMElement&, const CustomAttributesPresentationType&);

      void
      operator<< (::xercesc::DOMAttr&, const CustomAttributesPresentationType&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const CustomAttributesPresentationType&);

      void
      operator<< (::xercesc::DOMElement&, const DiagnosticType&);

      void
      operator<< (::xercesc::DOMElement&, const DiagnosticDevice&);

      void
      operator<< (::xercesc::DOMAttr&, const DiagnosticDevice&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const DiagnosticDevice&);

      void
      operator<< (::xercesc::DOMElement&, const VotingExperienceConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PartySelectionConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PartyWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const DisplayType&);

      void
      operator<< (::xercesc::DOMAttr&, const DisplayType&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const DisplayType&);

      void
      operator<< (::xercesc::DOMElement&, const BallotOptionSelectionConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FillPrincipalConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const FillPrincipalConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const FillPrincipalConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FillColumnDynamicConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PivotConfig&);

      void
      operator<< (::xercesc::DOMElement&, const CustomAtributtesWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ConfirmationWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FormsCommonControlsConfigurations&);

      void
      operator<< (::xercesc::DOMElement&, const FormsMessagesLabelConfigurations&);

      void
      operator<< (::xercesc::DOMElement&, const FormsTitleLabelConfigurations&);

      void
      operator<< (::xercesc::DOMElement&, const VotingExperienceLabelConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const BallotOptionWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VotingWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ReportPrintingWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FontConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ColorConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const XMLLabelConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const IncomePassphraseEnum&);

      void
      operator<< (::xercesc::DOMAttr&, const IncomePassphraseEnum&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const IncomePassphraseEnum&);

      void
      operator<< (::xercesc::DOMElement&, const ViewButtonConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const ViewButtonConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const ViewButtonConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ViewTableConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const ViewTableConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const ViewTableConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ExpandButtonConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const BallotOptionSeparateButtonConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PartySeparateButtonConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CloseElectionSteps&);

      void
      operator<< (::xercesc::DOMAttr&, const CloseElectionSteps&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const CloseElectionSteps&);

      void
      operator<< (::xercesc::DOMElement&, const ChallengePasswordSourceEnum&);

      void
      operator<< (::xercesc::DOMAttr&, const ChallengePasswordSourceEnum&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const ChallengePasswordSourceEnum&);

      void
      operator<< (::xercesc::DOMElement&, const ActivatedCardStatisticsConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VMInstallationWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VMInstallationWidgetTypeConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const VMInstallationWidgetTypeConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const VMInstallationWidgetTypeConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ShowBeidEntryTypeConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const ShowBeidEntryTypeConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const ShowBeidEntryTypeConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ElectionBlockStatusList&);

      void
      operator<< (::xercesc::DOMElement&, const HelpConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const WizardStateTimeLineConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const WizardStateToolboxConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const WizardStateHelpConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FunctionalityWizardStateConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FunctionalityWizardFlowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const NecessaryDevicesConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const DeviceConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const DeviceConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const DeviceConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const MemoryBlock&);

      void
      operator<< (::xercesc::DOMAttr&, const MemoryBlock&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const MemoryBlock&);

      void
      operator<< (::xercesc::DOMElement&, const ReferendumConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PollingCardConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const AlarmBoxMonitorConfiguration&);

      /**
       * @name Serialization functions for the %PMWidgetConfiguration document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializePMWidgetConfiguration (::std::ostream& os,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializePMWidgetConfiguration (::std::ostream& os,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializePMWidgetConfiguration (::std::ostream& os,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializePMWidgetConfiguration (::xercesc::XMLFormatTarget& ft,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializePMWidgetConfiguration (::xercesc::XMLFormatTarget& ft,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializePMWidgetConfiguration (::xercesc::XMLFormatTarget& ft,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializePMWidgetConfiguration (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializePMWidgetConfiguration (const ::Smartmatic::SAES::Configuration::PMWidgetConfiguration1& x, 
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const PreviewLanguageConfig&);

      void
      operator<< (::xercesc::DOMAttr&, const PreviewLanguageConfig&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const PreviewLanguageConfig&);

      void
      operator<< (::xercesc::DOMElement&, const EntryDividedWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CountConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CountTypeConfig&);

      void
      operator<< (::xercesc::DOMAttr&, const CountTypeConfig&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const CountTypeConfig&);

      void
      operator<< (::xercesc::DOMElement&, const StartConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const BEIDCardWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const IDCardProcessConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PollWorkerRegisterConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const IDConfig&);

      void
      operator<< (::xercesc::DOMElement&, const IDProperties&);

      void
      operator<< (::xercesc::DOMElement&, const RegisterWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ElementType&);

      void
      operator<< (::xercesc::DOMAttr&, const ElementType&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const ElementType&);

      void
      operator<< (::xercesc::DOMElement&, const InfoMachineConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const InfoMachineConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const InfoMachineConfiguration&);

      /**
       * @name Serialization functions for the %SaesGUIConfiguration document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeSaesGUIConfiguration (::std::ostream& os,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesGUIConfiguration (::std::ostream& os,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesGUIConfiguration (::std::ostream& os,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeSaesGUIConfiguration (::xercesc::XMLFormatTarget& ft,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesGUIConfiguration (::xercesc::XMLFormatTarget& ft,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesGUIConfiguration (::xercesc::XMLFormatTarget& ft,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     ::xercesc::DOMErrorHandler& eh,
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     const ::std::string& e = "UTF-8",
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeSaesGUIConfiguration (::xercesc::DOMDocument& d,
                                     const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeSaesGUIConfiguration (const ::Smartmatic::SAES::Configuration::SaesGUIConfiguration& x, 
                                     const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const SmartCardReaderDiagnosisConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ChangeHourFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const FunctionalitiesConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const RunFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const InstallationWizardConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PMWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CardActivatorFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CardRecoveryFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VoteDemoFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CardAssistedActivationFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PrinterDiagnosisConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const GeneralDiagnosisConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const TouchScreenCalibrationConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const EventSoundsConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const BarcodeDiagnosisConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const BrightnessDiagnosisConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const AllDiagnosisConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const AutomaticWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ContingencyCardWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const MemoryStateWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const HelpWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const WaitingForCardWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const LanguageSelectionWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const StatisticFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const OpenElectionFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const AuthenticationWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const DurationWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CloseElectionFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ActivationConsolidationFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CloseVotationFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const InitializationWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const IncidentReportFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PollWorkerRegisterFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CloseNoteRegisterFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VoteConsolidationFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PrintPreviewFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const LogReportFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CloseNotetFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VotingExperienceValidationScreensFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VotingForDisabledFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const PoliceNoteRegisterFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const DataUtilsValidatorFunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ThemesConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const MenuOptions&);

      void
      operator<< (::xercesc::DOMElement&, const CheckSumFailOption&);

      void
      operator<< (::xercesc::DOMAttr&, const CheckSumFailOption&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const CheckSumFailOption&);

      void
      operator<< (::xercesc::DOMElement&, const LoadingBallotMessage&);

      void
      operator<< (::xercesc::DOMAttr&, const LoadingBallotMessage&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const LoadingBallotMessage&);

      void
      operator<< (::xercesc::DOMElement&, const Label_Alignment&);

      void
      operator<< (::xercesc::DOMAttr&, const Label_Alignment&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const Label_Alignment&);

      void
      operator<< (::xercesc::DOMElement&, const Label_Style&);

      void
      operator<< (::xercesc::DOMAttr&, const Label_Style&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const Label_Style&);

      void
      operator<< (::xercesc::DOMElement&, const Label_Weight&);

      void
      operator<< (::xercesc::DOMAttr&, const Label_Weight&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const Label_Weight&);

      void
      operator<< (::xercesc::DOMElement&, const PMWidgetConfiguration1&);

      void
      operator<< (::xercesc::DOMElement&, const FunctionalityConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const LanguageButton&);

      void
      operator<< (::xercesc::DOMElement&, const OfficialThemeConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const DemoThemeConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const RecoveryThemeConfiguration&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SAES_GUICONFIGURATION_SCHEMA_HXX
