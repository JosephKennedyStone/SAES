// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "strings-resources-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Resources
    {
      // Strings_resources
      // 

      const Strings_resources::String_resourceSequence& Strings_resources::
      getString_resource () const
      {
        return this->string_resource_;
      }

      Strings_resources::String_resourceSequence& Strings_resources::
      getString_resource ()
      {
        return this->string_resource_;
      }

      void Strings_resources::
      setString_resource (const String_resourceSequence& s)
      {
        this->string_resource_ = s;
      }


      // String_resource
      // 

      const String_resource::ValueType& String_resource::
      getValue () const
      {
        return this->value_.get ();
      }

      String_resource::ValueType& String_resource::
      getValue ()
      {
        return this->value_.get ();
      }

      void String_resource::
      setValue (const ValueType& x)
      {
        this->value_.set (x);
      }

      void String_resource::
      setValue (::std::auto_ptr< ValueType > x)
      {
        this->value_.set (x);
      }

      const String_resource::KeyType& String_resource::
      getKey () const
      {
        return this->key_.get ();
      }

      String_resource::KeyType& String_resource::
      getKey ()
      {
        return this->key_.get ();
      }

      void String_resource::
      setKey (const KeyType& x)
      {
        this->key_.set (x);
      }

      void String_resource::
      setKey (::std::auto_ptr< KeyType > x)
      {
        this->key_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Resources
    {
      // Strings_resources
      //

      Strings_resources::
      Strings_resources ()
      : ::Smartmatic::ResourcesTypes::Type (),
        string_resource_ (::Smartmatic::ResourcesTypes::Flags (), this)
      {
      }

      Strings_resources::
      Strings_resources (const Strings_resources& x,
                         ::Smartmatic::ResourcesTypes::Flags f,
                         ::Smartmatic::ResourcesTypes::Container* c)
      : ::Smartmatic::ResourcesTypes::Type (x, f, c),
        string_resource_ (x.string_resource_, f, this)
      {
      }

      Strings_resources::
      Strings_resources (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ResourcesTypes::Flags f,
                         ::Smartmatic::ResourcesTypes::Container* c)
      : ::Smartmatic::ResourcesTypes::Type (e, f | ::Smartmatic::ResourcesTypes::Flags::base, c),
        string_resource_ (f, this)
      {
        if ((f & ::Smartmatic::ResourcesTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void Strings_resources::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ResourcesTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // string-resource
          //
          if (n.name () == "string-resource" && n.namespace_ () == "http://www.smartmatic.com/Saes/Resources")
          {
            ::std::auto_ptr< String_resourceType > r (
              String_resourceTraits::create (i, f, this));

            this->string_resource_.push_back (r);
            continue;
          }

          break;
        }
      }

      Strings_resources* Strings_resources::
      _clone (::Smartmatic::ResourcesTypes::Flags f,
              ::Smartmatic::ResourcesTypes::Container* c) const
      {
        return new class Strings_resources (*this, f, c);
      }

      Strings_resources::
      ~Strings_resources ()
      {
      }

      bool
      operator== (const Strings_resources& x, const Strings_resources& y)
      {
        if (!(x.getString_resource () == y.getString_resource ()))
          return false;

        return true;
      }

      bool
      operator!= (const Strings_resources& x, const Strings_resources& y)
      {
        return !(x == y);
      }

      // String_resource
      //

      String_resource::
      String_resource ()
      : ::Smartmatic::ResourcesTypes::Type (),
        value_ (::Smartmatic::ResourcesTypes::Flags (), this),
        key_ (::Smartmatic::ResourcesTypes::Flags (), this)
      {
      }

      String_resource::
      String_resource (const ValueType& value,
                       const KeyType& key)
      : ::Smartmatic::ResourcesTypes::Type (),
        value_ (value, ::Smartmatic::ResourcesTypes::Flags (), this),
        key_ (key, ::Smartmatic::ResourcesTypes::Flags (), this)
      {
      }

      String_resource::
      String_resource (const String_resource& x,
                       ::Smartmatic::ResourcesTypes::Flags f,
                       ::Smartmatic::ResourcesTypes::Container* c)
      : ::Smartmatic::ResourcesTypes::Type (x, f, c),
        value_ (x.value_, f, this),
        key_ (x.key_, f, this)
      {
      }

      String_resource::
      String_resource (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ResourcesTypes::Flags f,
                       ::Smartmatic::ResourcesTypes::Container* c)
      : ::Smartmatic::ResourcesTypes::Type (e, f | ::Smartmatic::ResourcesTypes::Flags::base, c),
        value_ (f, this),
        key_ (f, this)
      {
        if ((f & ::Smartmatic::ResourcesTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void String_resource::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ResourcesTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // value
          //
          if (n.name () == "value" && n.namespace_ () == "http://www.smartmatic.com/Saes/Resources")
          {
            ::std::auto_ptr< ValueType > r (
              ValueTraits::create (i, f, this));

            if (!value_.present ())
            {
              this->value_.set (r);
              continue;
            }
          }

          break;
        }

        if (!value_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "value",
            "http://www.smartmatic.com/Saes/Resources");
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "key" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< KeyType > r (
              KeyTraits::create (i, f, this));

            this->key_.set (r);
            continue;
          }
        }

        if (!key_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "key",
            "");
        }
      }

      String_resource* String_resource::
      _clone (::Smartmatic::ResourcesTypes::Flags f,
              ::Smartmatic::ResourcesTypes::Container* c) const
      {
        return new class String_resource (*this, f, c);
      }

      String_resource::
      ~String_resource ()
      {
      }

      bool
      operator== (const String_resource& x, const String_resource& y)
      {
        if (!(x.getValue () == y.getValue ()))
          return false;

        if (!(x.getKey () == y.getKey ()))
          return false;

        return true;
      }

      bool
      operator!= (const String_resource& x, const String_resource& y)
      {
        return !(x == y);
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Resources
    {
      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (const ::std::string& u,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
          ::Smartmatic::SAES::Resources::parseStrings_resources (
            d, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (const ::std::string& u,
                              ::Smartmatic::ResourcesTypes::ErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) == 0);

        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
          ::Smartmatic::SAES::Resources::parseStrings_resources (
            d, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
          ::Smartmatic::SAES::Resources::parseStrings_resources (
            d, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::std::istream& is,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Resources::parseStrings_resources (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::std::istream& is,
                              ::Smartmatic::ResourcesTypes::ErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Resources::parseStrings_resources (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Resources::parseStrings_resources (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Resources::parseStrings_resources (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::ResourcesTypes::ErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Resources::parseStrings_resources (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Resources::parseStrings_resources (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::xercesc::InputSource& i,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
          ::Smartmatic::SAES::Resources::parseStrings_resources (
            d, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::xercesc::InputSource& i,
                              ::Smartmatic::ResourcesTypes::ErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
          ::Smartmatic::SAES::Resources::parseStrings_resources (
            d, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
          ::Smartmatic::SAES::Resources::parseStrings_resources (
            d, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (const ::xercesc::DOMDocument& d,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties& p)
      {
        if (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom)
        {
          ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
            ::Smartmatic::SAES::Resources::parseStrings_resources (
              c, f | ::Smartmatic::ResourcesTypes::Flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "strings-resources" &&
            n.namespace_ () == "http://www.smartmatic.com/Saes/Resources")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Resources::Strings_resources, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "strings-resources",
          "http://www.smartmatic.com/Saes/Resources");
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources >
      parseStrings_resources (::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::Smartmatic::ResourcesTypes::Flags f,
                              const ::Smartmatic::ResourcesTypes::Properties&)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::Smartmatic::ResourcesTypes::Flags::keep_dom) &&
           !(f & ::Smartmatic::ResourcesTypes::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::Smartmatic::ResourcesTypes::Flags::keep_dom)
          doc.setUserData (::Smartmatic::ResourcesTypes::dom::treeNodeKey,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "strings-resources" &&
            n.namespace_ () == "http://www.smartmatic.com/Saes/Resources")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Resources::Strings_resources > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Resources::Strings_resources, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "strings-resources",
          "http://www.smartmatic.com/Saes/Resources");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Resources
    {
      void
      serializeStrings_resources (::std::ostream& o,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Resources::serializeStrings_resources (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeStrings_resources (::std::ostream& o,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  ::Smartmatic::ResourcesTypes::ErrorHandler& h,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ResourcesTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Resources::serializeStrings_resources (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeStrings_resources (::std::ostream& o,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Resources::serializeStrings_resources (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeStrings_resources (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Resources::serializeStrings_resources (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeStrings_resources (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  ::Smartmatic::ResourcesTypes::ErrorHandler& h,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Resources::serializeStrings_resources (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeStrings_resources (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Resources::serializeStrings_resources (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeStrings_resources (::xercesc::DOMDocument& d,
                                  const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  ::Smartmatic::ResourcesTypes::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "strings-resources" &&
            n.namespace_ () == "http://www.smartmatic.com/Saes/Resources")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "strings-resources",
            "http://www.smartmatic.com/Saes/Resources");
        }
      }

      ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeStrings_resources (const ::Smartmatic::SAES::Resources::Strings_resources& s,
                                  const ::Smartmatic::ResourcesTypes::NamespaceInfomap& m,
                                  ::Smartmatic::ResourcesTypes::Flags f)
      {
        ::Smartmatic::ResourcesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "strings-resources",
            "http://www.smartmatic.com/Saes/Resources",
            m, f));

        ::Smartmatic::SAES::Resources::serializeStrings_resources (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const Strings_resources& i)
      {
        e << static_cast< const ::Smartmatic::ResourcesTypes::Type& > (i);

        // string-resource
        //
        for (Strings_resources::String_resourceConstIterator
             b (i.getString_resource ().begin ()), n (i.getString_resource ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "string-resource",
              "http://www.smartmatic.com/Saes/Resources",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const String_resource& i)
      {
        e << static_cast< const ::Smartmatic::ResourcesTypes::Type& > (i);

        // value
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "value",
              "http://www.smartmatic.com/Saes/Resources",
              e));

          s << i.getValue ();
        }

        // key
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "key",
              e));

          a << i.getKey ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

