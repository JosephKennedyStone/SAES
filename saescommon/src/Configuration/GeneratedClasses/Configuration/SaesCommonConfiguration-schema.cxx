// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SaesCommonConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        // SaesCommonConfiguration
        // 

        const SaesCommonConfiguration::ConfigurationElectionFilesPathType& SaesCommonConfiguration::
        getConfigurationElectionFilesPath () const
        {
          return this->ConfigurationElectionFilesPath_.get ();
        }

        SaesCommonConfiguration::ConfigurationElectionFilesPathType& SaesCommonConfiguration::
        getConfigurationElectionFilesPath ()
        {
          return this->ConfigurationElectionFilesPath_.get ();
        }

        void SaesCommonConfiguration::
        setConfigurationElectionFilesPath (const ConfigurationElectionFilesPathType& x)
        {
          this->ConfigurationElectionFilesPath_.set (x);
        }

        void SaesCommonConfiguration::
        setConfigurationElectionFilesPath (::std::auto_ptr< ConfigurationElectionFilesPathType > x)
        {
          this->ConfigurationElectionFilesPath_.set (x);
        }

        const SaesCommonConfiguration::ConfigurationPrinterType& SaesCommonConfiguration::
        getConfigurationPrinter () const
        {
          return this->ConfigurationPrinter_.get ();
        }

        SaesCommonConfiguration::ConfigurationPrinterType& SaesCommonConfiguration::
        getConfigurationPrinter ()
        {
          return this->ConfigurationPrinter_.get ();
        }

        void SaesCommonConfiguration::
        setConfigurationPrinter (const ConfigurationPrinterType& x)
        {
          this->ConfigurationPrinter_.set (x);
        }

        void SaesCommonConfiguration::
        setConfigurationPrinter (::std::auto_ptr< ConfigurationPrinterType > x)
        {
          this->ConfigurationPrinter_.set (x);
        }

        const SaesCommonConfiguration::OSConfigurationFilesType& SaesCommonConfiguration::
        getOSConfigurationFiles () const
        {
          return this->OSConfigurationFiles_.get ();
        }

        SaesCommonConfiguration::OSConfigurationFilesType& SaesCommonConfiguration::
        getOSConfigurationFiles ()
        {
          return this->OSConfigurationFiles_.get ();
        }

        void SaesCommonConfiguration::
        setOSConfigurationFiles (const OSConfigurationFilesType& x)
        {
          this->OSConfigurationFiles_.set (x);
        }

        void SaesCommonConfiguration::
        setOSConfigurationFiles (::std::auto_ptr< OSConfigurationFilesType > x)
        {
          this->OSConfigurationFiles_.set (x);
        }

        const SaesCommonConfiguration::MachineSecuritySchemaType& SaesCommonConfiguration::
        getMachineSecuritySchema () const
        {
          return this->MachineSecuritySchema_.get ();
        }

        SaesCommonConfiguration::MachineSecuritySchemaType& SaesCommonConfiguration::
        getMachineSecuritySchema ()
        {
          return this->MachineSecuritySchema_.get ();
        }

        void SaesCommonConfiguration::
        setMachineSecuritySchema (const MachineSecuritySchemaType& x)
        {
          this->MachineSecuritySchema_.set (x);
        }

        void SaesCommonConfiguration::
        setMachineSecuritySchema (::std::auto_ptr< MachineSecuritySchemaType > x)
        {
          this->MachineSecuritySchema_.set (x);
        }

        const SaesCommonConfiguration::LogConfigurationReaderType& SaesCommonConfiguration::
        getLogConfigurationReader () const
        {
          return this->LogConfigurationReader_.get ();
        }

        SaesCommonConfiguration::LogConfigurationReaderType& SaesCommonConfiguration::
        getLogConfigurationReader ()
        {
          return this->LogConfigurationReader_.get ();
        }

        void SaesCommonConfiguration::
        setLogConfigurationReader (const LogConfigurationReaderType& x)
        {
          this->LogConfigurationReader_.set (x);
        }

        void SaesCommonConfiguration::
        setLogConfigurationReader (::std::auto_ptr< LogConfigurationReaderType > x)
        {
          this->LogConfigurationReader_.set (x);
        }

        const SaesCommonConfiguration::BEIDConfigurationType& SaesCommonConfiguration::
        getBEIDConfiguration () const
        {
          return this->BEIDConfiguration_.get ();
        }

        SaesCommonConfiguration::BEIDConfigurationType& SaesCommonConfiguration::
        getBEIDConfiguration ()
        {
          return this->BEIDConfiguration_.get ();
        }

        void SaesCommonConfiguration::
        setBEIDConfiguration (const BEIDConfigurationType& x)
        {
          this->BEIDConfiguration_.set (x);
        }

        void SaesCommonConfiguration::
        setBEIDConfiguration (::std::auto_ptr< BEIDConfigurationType > x)
        {
          this->BEIDConfiguration_.set (x);
        }

        const SaesCommonConfiguration::SmartCardConfigurationType& SaesCommonConfiguration::
        getSmartCardConfiguration () const
        {
          return this->SmartCardConfiguration_.get ();
        }

        SaesCommonConfiguration::SmartCardConfigurationType& SaesCommonConfiguration::
        getSmartCardConfiguration ()
        {
          return this->SmartCardConfiguration_.get ();
        }

        void SaesCommonConfiguration::
        setSmartCardConfiguration (const SmartCardConfigurationType& x)
        {
          this->SmartCardConfiguration_.set (x);
        }

        void SaesCommonConfiguration::
        setSmartCardConfiguration (::std::auto_ptr< SmartCardConfigurationType > x)
        {
          this->SmartCardConfiguration_.set (x);
        }

        const SaesCommonConfiguration::PCSCDConfigurationType& SaesCommonConfiguration::
        getPCSCDConfiguration () const
        {
          return this->PCSCDConfiguration_.get ();
        }

        SaesCommonConfiguration::PCSCDConfigurationType& SaesCommonConfiguration::
        getPCSCDConfiguration ()
        {
          return this->PCSCDConfiguration_.get ();
        }

        void SaesCommonConfiguration::
        setPCSCDConfiguration (const PCSCDConfigurationType& x)
        {
          this->PCSCDConfiguration_.set (x);
        }

        void SaesCommonConfiguration::
        setPCSCDConfiguration (::std::auto_ptr< PCSCDConfigurationType > x)
        {
          this->PCSCDConfiguration_.set (x);
        }


        // OSConfigurationFiles
        // 

        const OSConfigurationFiles::IdHardwareFileFullPathType& OSConfigurationFiles::
        getIdHardwareFileFullPath () const
        {
          return this->IdHardwareFileFullPath_.get ();
        }

        OSConfigurationFiles::IdHardwareFileFullPathType& OSConfigurationFiles::
        getIdHardwareFileFullPath ()
        {
          return this->IdHardwareFileFullPath_.get ();
        }

        void OSConfigurationFiles::
        setIdHardwareFileFullPath (const IdHardwareFileFullPathType& x)
        {
          this->IdHardwareFileFullPath_.set (x);
        }

        void OSConfigurationFiles::
        setIdHardwareFileFullPath (::std::auto_ptr< IdHardwareFileFullPathType > x)
        {
          this->IdHardwareFileFullPath_.set (x);
        }

        const OSConfigurationFiles::MasterDeviceFileFullPathType& OSConfigurationFiles::
        getMasterDeviceFileFullPath () const
        {
          return this->MasterDeviceFileFullPath_.get ();
        }

        OSConfigurationFiles::MasterDeviceFileFullPathType& OSConfigurationFiles::
        getMasterDeviceFileFullPath ()
        {
          return this->MasterDeviceFileFullPath_.get ();
        }

        void OSConfigurationFiles::
        setMasterDeviceFileFullPath (const MasterDeviceFileFullPathType& x)
        {
          this->MasterDeviceFileFullPath_.set (x);
        }

        void OSConfigurationFiles::
        setMasterDeviceFileFullPath (::std::auto_ptr< MasterDeviceFileFullPathType > x)
        {
          this->MasterDeviceFileFullPath_.set (x);
        }

        const OSConfigurationFiles::EventDeviceFileFullPathType& OSConfigurationFiles::
        getEventDeviceFileFullPath () const
        {
          return this->EventDeviceFileFullPath_.get ();
        }

        OSConfigurationFiles::EventDeviceFileFullPathType& OSConfigurationFiles::
        getEventDeviceFileFullPath ()
        {
          return this->EventDeviceFileFullPath_.get ();
        }

        void OSConfigurationFiles::
        setEventDeviceFileFullPath (const EventDeviceFileFullPathType& x)
        {
          this->EventDeviceFileFullPath_.set (x);
        }

        void OSConfigurationFiles::
        setEventDeviceFileFullPath (::std::auto_ptr< EventDeviceFileFullPathType > x)
        {
          this->EventDeviceFileFullPath_.set (x);
        }

        const OSConfigurationFiles::LineDeviceSeparatorType& OSConfigurationFiles::
        getLineDeviceSeparator () const
        {
          return this->LineDeviceSeparator_.get ();
        }

        OSConfigurationFiles::LineDeviceSeparatorType& OSConfigurationFiles::
        getLineDeviceSeparator ()
        {
          return this->LineDeviceSeparator_.get ();
        }

        void OSConfigurationFiles::
        setLineDeviceSeparator (const LineDeviceSeparatorType& x)
        {
          this->LineDeviceSeparator_.set (x);
        }

        void OSConfigurationFiles::
        setLineDeviceSeparator (::std::auto_ptr< LineDeviceSeparatorType > x)
        {
          this->LineDeviceSeparator_.set (x);
        }

        const OSConfigurationFiles::RemoveEventDeviceFileType& OSConfigurationFiles::
        getRemoveEventDeviceFile () const
        {
          return this->RemoveEventDeviceFile_.get ();
        }

        OSConfigurationFiles::RemoveEventDeviceFileType& OSConfigurationFiles::
        getRemoveEventDeviceFile ()
        {
          return this->RemoveEventDeviceFile_.get ();
        }

        void OSConfigurationFiles::
        setRemoveEventDeviceFile (const RemoveEventDeviceFileType& x)
        {
          this->RemoveEventDeviceFile_.set (x);
        }

        const OSConfigurationFiles::SerialLocationFileFullPathType& OSConfigurationFiles::
        getSerialLocationFileFullPath () const
        {
          return this->SerialLocationFileFullPath_.get ();
        }

        OSConfigurationFiles::SerialLocationFileFullPathType& OSConfigurationFiles::
        getSerialLocationFileFullPath ()
        {
          return this->SerialLocationFileFullPath_.get ();
        }

        void OSConfigurationFiles::
        setSerialLocationFileFullPath (const SerialLocationFileFullPathType& x)
        {
          this->SerialLocationFileFullPath_.set (x);
        }

        void OSConfigurationFiles::
        setSerialLocationFileFullPath (::std::auto_ptr< SerialLocationFileFullPathType > x)
        {
          this->SerialLocationFileFullPath_.set (x);
        }

        const OSConfigurationFiles::LineSerialLocationSeparatorType& OSConfigurationFiles::
        getLineSerialLocationSeparator () const
        {
          return this->LineSerialLocationSeparator_.get ();
        }

        OSConfigurationFiles::LineSerialLocationSeparatorType& OSConfigurationFiles::
        getLineSerialLocationSeparator ()
        {
          return this->LineSerialLocationSeparator_.get ();
        }

        void OSConfigurationFiles::
        setLineSerialLocationSeparator (const LineSerialLocationSeparatorType& x)
        {
          this->LineSerialLocationSeparator_.set (x);
        }

        void OSConfigurationFiles::
        setLineSerialLocationSeparator (::std::auto_ptr< LineSerialLocationSeparatorType > x)
        {
          this->LineSerialLocationSeparator_.set (x);
        }

        const OSConfigurationFiles::ScriptRunSmartCardType& OSConfigurationFiles::
        getScriptRunSmartCard () const
        {
          return this->ScriptRunSmartCard_.get ();
        }

        OSConfigurationFiles::ScriptRunSmartCardType& OSConfigurationFiles::
        getScriptRunSmartCard ()
        {
          return this->ScriptRunSmartCard_.get ();
        }

        void OSConfigurationFiles::
        setScriptRunSmartCard (const ScriptRunSmartCardType& x)
        {
          this->ScriptRunSmartCard_.set (x);
        }

        void OSConfigurationFiles::
        setScriptRunSmartCard (::std::auto_ptr< ScriptRunSmartCardType > x)
        {
          this->ScriptRunSmartCard_.set (x);
        }

        const OSConfigurationFiles::ScriptRunPrintBlankType& OSConfigurationFiles::
        getScriptRunPrintBlank () const
        {
          return this->ScriptRunPrintBlank_.get ();
        }

        OSConfigurationFiles::ScriptRunPrintBlankType& OSConfigurationFiles::
        getScriptRunPrintBlank ()
        {
          return this->ScriptRunPrintBlank_.get ();
        }

        void OSConfigurationFiles::
        setScriptRunPrintBlank (const ScriptRunPrintBlankType& x)
        {
          this->ScriptRunPrintBlank_.set (x);
        }

        void OSConfigurationFiles::
        setScriptRunPrintBlank (::std::auto_ptr< ScriptRunPrintBlankType > x)
        {
          this->ScriptRunPrintBlank_.set (x);
        }

        const OSConfigurationFiles::ScriptRunDSortVoteType& OSConfigurationFiles::
        getScriptRunDSortVote () const
        {
          return this->ScriptRunDSortVote_.get ();
        }

        OSConfigurationFiles::ScriptRunDSortVoteType& OSConfigurationFiles::
        getScriptRunDSortVote ()
        {
          return this->ScriptRunDSortVote_.get ();
        }

        void OSConfigurationFiles::
        setScriptRunDSortVote (const ScriptRunDSortVoteType& x)
        {
          this->ScriptRunDSortVote_.set (x);
        }

        void OSConfigurationFiles::
        setScriptRunDSortVote (::std::auto_ptr< ScriptRunDSortVoteType > x)
        {
          this->ScriptRunDSortVote_.set (x);
        }

        const OSConfigurationFiles::SyncFileSignalUSER1Type& OSConfigurationFiles::
        getSyncFileSignalUSER1 () const
        {
          return this->SyncFileSignalUSER1_.get ();
        }

        OSConfigurationFiles::SyncFileSignalUSER1Type& OSConfigurationFiles::
        getSyncFileSignalUSER1 ()
        {
          return this->SyncFileSignalUSER1_.get ();
        }

        void OSConfigurationFiles::
        setSyncFileSignalUSER1 (const SyncFileSignalUSER1Type& x)
        {
          this->SyncFileSignalUSER1_.set (x);
        }

        void OSConfigurationFiles::
        setSyncFileSignalUSER1 (::std::auto_ptr< SyncFileSignalUSER1Type > x)
        {
          this->SyncFileSignalUSER1_.set (x);
        }

        const OSConfigurationFiles::SyncFileSignalUSER2Type& OSConfigurationFiles::
        getSyncFileSignalUSER2 () const
        {
          return this->SyncFileSignalUSER2_.get ();
        }

        OSConfigurationFiles::SyncFileSignalUSER2Type& OSConfigurationFiles::
        getSyncFileSignalUSER2 ()
        {
          return this->SyncFileSignalUSER2_.get ();
        }

        void OSConfigurationFiles::
        setSyncFileSignalUSER2 (const SyncFileSignalUSER2Type& x)
        {
          this->SyncFileSignalUSER2_.set (x);
        }

        void OSConfigurationFiles::
        setSyncFileSignalUSER2 (::std::auto_ptr< SyncFileSignalUSER2Type > x)
        {
          this->SyncFileSignalUSER2_.set (x);
        }


        // LogConfigurationReader
        // 

        const LogConfigurationReader::LogErrorReaderType& LogConfigurationReader::
        getLogErrorReader () const
        {
          return this->LogErrorReader_.get ();
        }

        LogConfigurationReader::LogErrorReaderType& LogConfigurationReader::
        getLogErrorReader ()
        {
          return this->LogErrorReader_.get ();
        }

        void LogConfigurationReader::
        setLogErrorReader (const LogErrorReaderType& x)
        {
          this->LogErrorReader_.set (x);
        }

        void LogConfigurationReader::
        setLogErrorReader (::std::auto_ptr< LogErrorReaderType > x)
        {
          this->LogErrorReader_.set (x);
        }

        const LogConfigurationReader::LogAuditReaderType& LogConfigurationReader::
        getLogAuditReader () const
        {
          return this->LogAuditReader_.get ();
        }

        LogConfigurationReader::LogAuditReaderType& LogConfigurationReader::
        getLogAuditReader ()
        {
          return this->LogAuditReader_.get ();
        }

        void LogConfigurationReader::
        setLogAuditReader (const LogAuditReaderType& x)
        {
          this->LogAuditReader_.set (x);
        }

        void LogConfigurationReader::
        setLogAuditReader (::std::auto_ptr< LogAuditReaderType > x)
        {
          this->LogAuditReader_.set (x);
        }


        // BEIDConfiguration
        // 

        const BEIDConfiguration::UseCallbackEventType& BEIDConfiguration::
        getUseCallbackEvent () const
        {
          return this->UseCallbackEvent_.get ();
        }

        BEIDConfiguration::UseCallbackEventType& BEIDConfiguration::
        getUseCallbackEvent ()
        {
          return this->UseCallbackEvent_.get ();
        }

        void BEIDConfiguration::
        setUseCallbackEvent (const UseCallbackEventType& x)
        {
          this->UseCallbackEvent_.set (x);
        }


        // SmartCardConfiguration
        // 

        const SmartCardConfiguration::AppletAIDType& SmartCardConfiguration::
        getAppletAID () const
        {
          return this->AppletAID_.get ();
        }

        SmartCardConfiguration::AppletAIDType& SmartCardConfiguration::
        getAppletAID ()
        {
          return this->AppletAID_.get ();
        }

        void SmartCardConfiguration::
        setAppletAID (const AppletAIDType& x)
        {
          this->AppletAID_.set (x);
        }

        void SmartCardConfiguration::
        setAppletAID (::std::auto_ptr< AppletAIDType > x)
        {
          this->AppletAID_.set (x);
        }

        const SmartCardConfiguration::GlobalPINType& SmartCardConfiguration::
        getGlobalPIN () const
        {
          return this->GlobalPIN_.get ();
        }

        SmartCardConfiguration::GlobalPINType& SmartCardConfiguration::
        getGlobalPIN ()
        {
          return this->GlobalPIN_.get ();
        }

        void SmartCardConfiguration::
        setGlobalPIN (const GlobalPINType& x)
        {
          this->GlobalPIN_.set (x);
        }

        void SmartCardConfiguration::
        setGlobalPIN (::std::auto_ptr< GlobalPINType > x)
        {
          this->GlobalPIN_.set (x);
        }

        const SmartCardConfiguration::DataPINType& SmartCardConfiguration::
        getDataPIN () const
        {
          return this->DataPIN_.get ();
        }

        SmartCardConfiguration::DataPINType& SmartCardConfiguration::
        getDataPIN ()
        {
          return this->DataPIN_.get ();
        }

        void SmartCardConfiguration::
        setDataPIN (const DataPINType& x)
        {
          this->DataPIN_.set (x);
        }

        void SmartCardConfiguration::
        setDataPIN (::std::auto_ptr< DataPINType > x)
        {
          this->DataPIN_.set (x);
        }

        const SmartCardConfiguration::PlatformModeType& SmartCardConfiguration::
        getPlatformMode () const
        {
          return this->PlatformMode_.get ();
        }

        SmartCardConfiguration::PlatformModeType& SmartCardConfiguration::
        getPlatformMode ()
        {
          return this->PlatformMode_.get ();
        }

        void SmartCardConfiguration::
        setPlatformMode (const PlatformModeType& x)
        {
          this->PlatformMode_.set (x);
        }

        void SmartCardConfiguration::
        setPlatformMode (::std::auto_ptr< PlatformModeType > x)
        {
          this->PlatformMode_.set (x);
        }

        const SmartCardConfiguration::SecureChannelEnabledType& SmartCardConfiguration::
        getSecureChannelEnabled () const
        {
          return this->SecureChannelEnabled_.get ();
        }

        SmartCardConfiguration::SecureChannelEnabledType& SmartCardConfiguration::
        getSecureChannelEnabled ()
        {
          return this->SecureChannelEnabled_.get ();
        }

        void SmartCardConfiguration::
        setSecureChannelEnabled (const SecureChannelEnabledType& x)
        {
          this->SecureChannelEnabled_.set (x);
        }

        const SmartCardConfiguration::SecurityKeySetVersionType& SmartCardConfiguration::
        getSecurityKeySetVersion () const
        {
          return this->SecurityKeySetVersion_.get ();
        }

        SmartCardConfiguration::SecurityKeySetVersionType& SmartCardConfiguration::
        getSecurityKeySetVersion ()
        {
          return this->SecurityKeySetVersion_.get ();
        }

        void SmartCardConfiguration::
        setSecurityKeySetVersion (const SecurityKeySetVersionType& x)
        {
          this->SecurityKeySetVersion_.set (x);
        }

        const SmartCardConfiguration::SecurityKeyIndexType& SmartCardConfiguration::
        getSecurityKeyIndex () const
        {
          return this->SecurityKeyIndex_.get ();
        }

        SmartCardConfiguration::SecurityKeyIndexType& SmartCardConfiguration::
        getSecurityKeyIndex ()
        {
          return this->SecurityKeyIndex_.get ();
        }

        void SmartCardConfiguration::
        setSecurityKeyIndex (const SecurityKeyIndexType& x)
        {
          this->SecurityKeyIndex_.set (x);
        }

        const SmartCardConfiguration::SecurityChannelProtocolType& SmartCardConfiguration::
        getSecurityChannelProtocol () const
        {
          return this->SecurityChannelProtocol_.get ();
        }

        SmartCardConfiguration::SecurityChannelProtocolType& SmartCardConfiguration::
        getSecurityChannelProtocol ()
        {
          return this->SecurityChannelProtocol_.get ();
        }

        void SmartCardConfiguration::
        setSecurityChannelProtocol (const SecurityChannelProtocolType& x)
        {
          this->SecurityChannelProtocol_.set (x);
        }

        void SmartCardConfiguration::
        setSecurityChannelProtocol (::std::auto_ptr< SecurityChannelProtocolType > x)
        {
          this->SecurityChannelProtocol_.set (x);
        }

        const SmartCardConfiguration::SecurityChannelProtocolImplType& SmartCardConfiguration::
        getSecurityChannelProtocolImpl () const
        {
          return this->SecurityChannelProtocolImpl_.get ();
        }

        SmartCardConfiguration::SecurityChannelProtocolImplType& SmartCardConfiguration::
        getSecurityChannelProtocolImpl ()
        {
          return this->SecurityChannelProtocolImpl_.get ();
        }

        void SmartCardConfiguration::
        setSecurityChannelProtocolImpl (const SecurityChannelProtocolImplType& x)
        {
          this->SecurityChannelProtocolImpl_.set (x);
        }

        void SmartCardConfiguration::
        setSecurityChannelProtocolImpl (::std::auto_ptr< SecurityChannelProtocolImplType > x)
        {
          this->SecurityChannelProtocolImpl_.set (x);
        }

        const SmartCardConfiguration::SecurityLevelType& SmartCardConfiguration::
        getSecurityLevel () const
        {
          return this->SecurityLevel_.get ();
        }

        SmartCardConfiguration::SecurityLevelType& SmartCardConfiguration::
        getSecurityLevel ()
        {
          return this->SecurityLevel_.get ();
        }

        void SmartCardConfiguration::
        setSecurityLevel (const SecurityLevelType& x)
        {
          this->SecurityLevel_.set (x);
        }

        void SmartCardConfiguration::
        setSecurityLevel (::std::auto_ptr< SecurityLevelType > x)
        {
          this->SecurityLevel_.set (x);
        }

        const SmartCardConfiguration::SecurityKeyDerivationType& SmartCardConfiguration::
        getSecurityKeyDerivation () const
        {
          return this->SecurityKeyDerivation_.get ();
        }

        SmartCardConfiguration::SecurityKeyDerivationType& SmartCardConfiguration::
        getSecurityKeyDerivation ()
        {
          return this->SecurityKeyDerivation_.get ();
        }

        void SmartCardConfiguration::
        setSecurityKeyDerivation (const SecurityKeyDerivationType& x)
        {
          this->SecurityKeyDerivation_.set (x);
        }

        void SmartCardConfiguration::
        setSecurityKeyDerivation (::std::auto_ptr< SecurityKeyDerivationType > x)
        {
          this->SecurityKeyDerivation_.set (x);
        }

        const SmartCardConfiguration::NivelTestSequence& SmartCardConfiguration::
        getNivelTest () const
        {
          return this->NivelTest_;
        }

        SmartCardConfiguration::NivelTestSequence& SmartCardConfiguration::
        getNivelTest ()
        {
          return this->NivelTest_;
        }

        void SmartCardConfiguration::
        setNivelTest (const NivelTestSequence& s)
        {
          this->NivelTest_ = s;
        }

        const SmartCardConfiguration::SuspendResumeEachVoteType& SmartCardConfiguration::
        getSuspendResumeEachVote () const
        {
          return this->SuspendResumeEachVote_.get ();
        }

        SmartCardConfiguration::SuspendResumeEachVoteType& SmartCardConfiguration::
        getSuspendResumeEachVote ()
        {
          return this->SuspendResumeEachVote_.get ();
        }

        void SmartCardConfiguration::
        setSuspendResumeEachVote (const SuspendResumeEachVoteType& x)
        {
          this->SuspendResumeEachVote_.set (x);
        }

        const SmartCardConfiguration::SuspendResumeOnErrorConditionType& SmartCardConfiguration::
        getSuspendResumeOnErrorCondition () const
        {
          return this->SuspendResumeOnErrorCondition_.get ();
        }

        SmartCardConfiguration::SuspendResumeOnErrorConditionType& SmartCardConfiguration::
        getSuspendResumeOnErrorCondition ()
        {
          return this->SuspendResumeOnErrorCondition_.get ();
        }

        void SmartCardConfiguration::
        setSuspendResumeOnErrorCondition (const SuspendResumeOnErrorConditionType& x)
        {
          this->SuspendResumeOnErrorCondition_.set (x);
        }

        const SmartCardConfiguration::DelayAfterSuspendType& SmartCardConfiguration::
        getDelayAfterSuspend () const
        {
          return this->DelayAfterSuspend_.get ();
        }

        SmartCardConfiguration::DelayAfterSuspendType& SmartCardConfiguration::
        getDelayAfterSuspend ()
        {
          return this->DelayAfterSuspend_.get ();
        }

        void SmartCardConfiguration::
        setDelayAfterSuspend (const DelayAfterSuspendType& x)
        {
          this->DelayAfterSuspend_.set (x);
        }

        const SmartCardConfiguration::DelayAfterOnType& SmartCardConfiguration::
        getDelayAfterOn () const
        {
          return this->DelayAfterOn_.get ();
        }

        SmartCardConfiguration::DelayAfterOnType& SmartCardConfiguration::
        getDelayAfterOn ()
        {
          return this->DelayAfterOn_.get ();
        }

        void SmartCardConfiguration::
        setDelayAfterOn (const DelayAfterOnType& x)
        {
          this->DelayAfterOn_.set (x);
        }

        const SmartCardConfiguration::ShowMessagePowerCycleType& SmartCardConfiguration::
        getShowMessagePowerCycle () const
        {
          return this->ShowMessagePowerCycle_.get ();
        }

        SmartCardConfiguration::ShowMessagePowerCycleType& SmartCardConfiguration::
        getShowMessagePowerCycle ()
        {
          return this->ShowMessagePowerCycle_.get ();
        }

        void SmartCardConfiguration::
        setShowMessagePowerCycle (const ShowMessagePowerCycleType& x)
        {
          this->ShowMessagePowerCycle_.set (x);
        }

        const SmartCardConfiguration::TimeOutMessagePowerCycleType& SmartCardConfiguration::
        getTimeOutMessagePowerCycle () const
        {
          return this->TimeOutMessagePowerCycle_.get ();
        }

        SmartCardConfiguration::TimeOutMessagePowerCycleType& SmartCardConfiguration::
        getTimeOutMessagePowerCycle ()
        {
          return this->TimeOutMessagePowerCycle_.get ();
        }

        void SmartCardConfiguration::
        setTimeOutMessagePowerCycle (const TimeOutMessagePowerCycleType& x)
        {
          this->TimeOutMessagePowerCycle_.set (x);
        }

        const SmartCardConfiguration::PowerCycleTriesType& SmartCardConfiguration::
        getPowerCycleTries () const
        {
          return this->PowerCycleTries_.get ();
        }

        SmartCardConfiguration::PowerCycleTriesType& SmartCardConfiguration::
        getPowerCycleTries ()
        {
          return this->PowerCycleTries_.get ();
        }

        void SmartCardConfiguration::
        setPowerCycleTries (const PowerCycleTriesType& x)
        {
          this->PowerCycleTries_.set (x);
        }

        const SmartCardConfiguration::ForceRestartPCSCDType& SmartCardConfiguration::
        getForceRestartPCSCD () const
        {
          return this->ForceRestartPCSCD_.get ();
        }

        SmartCardConfiguration::ForceRestartPCSCDType& SmartCardConfiguration::
        getForceRestartPCSCD ()
        {
          return this->ForceRestartPCSCD_.get ();
        }

        void SmartCardConfiguration::
        setForceRestartPCSCD (const ForceRestartPCSCDType& x)
        {
          this->ForceRestartPCSCD_.set (x);
        }

        const SmartCardConfiguration::WaitStopPCSCDType& SmartCardConfiguration::
        getWaitStopPCSCD () const
        {
          return this->WaitStopPCSCD_.get ();
        }

        SmartCardConfiguration::WaitStopPCSCDType& SmartCardConfiguration::
        getWaitStopPCSCD ()
        {
          return this->WaitStopPCSCD_.get ();
        }

        void SmartCardConfiguration::
        setWaitStopPCSCD (const WaitStopPCSCDType& x)
        {
          this->WaitStopPCSCD_.set (x);
        }

        const SmartCardConfiguration::WaitStartPCSCDType& SmartCardConfiguration::
        getWaitStartPCSCD () const
        {
          return this->WaitStartPCSCD_.get ();
        }

        SmartCardConfiguration::WaitStartPCSCDType& SmartCardConfiguration::
        getWaitStartPCSCD ()
        {
          return this->WaitStartPCSCD_.get ();
        }

        void SmartCardConfiguration::
        setWaitStartPCSCD (const WaitStartPCSCDType& x)
        {
          this->WaitStartPCSCD_.set (x);
        }

        const SmartCardConfiguration::ShowMessageRestartPCSCDType& SmartCardConfiguration::
        getShowMessageRestartPCSCD () const
        {
          return this->ShowMessageRestartPCSCD_.get ();
        }

        SmartCardConfiguration::ShowMessageRestartPCSCDType& SmartCardConfiguration::
        getShowMessageRestartPCSCD ()
        {
          return this->ShowMessageRestartPCSCD_.get ();
        }

        void SmartCardConfiguration::
        setShowMessageRestartPCSCD (const ShowMessageRestartPCSCDType& x)
        {
          this->ShowMessageRestartPCSCD_.set (x);
        }

        const SmartCardConfiguration::ReadRetryType& SmartCardConfiguration::
        getReadRetry () const
        {
          return this->ReadRetry_.get ();
        }

        SmartCardConfiguration::ReadRetryType& SmartCardConfiguration::
        getReadRetry ()
        {
          return this->ReadRetry_.get ();
        }

        void SmartCardConfiguration::
        setReadRetry (const ReadRetryType& x)
        {
          this->ReadRetry_.set (x);
        }

        const SmartCardConfiguration::FatalErrorCodesSequence& SmartCardConfiguration::
        getFatalErrorCodes () const
        {
          return this->FatalErrorCodes_;
        }

        SmartCardConfiguration::FatalErrorCodesSequence& SmartCardConfiguration::
        getFatalErrorCodes ()
        {
          return this->FatalErrorCodes_;
        }

        void SmartCardConfiguration::
        setFatalErrorCodes (const FatalErrorCodesSequence& s)
        {
          this->FatalErrorCodes_ = s;
        }

        const SmartCardConfiguration::UseConnectedSmartcardReaderType& SmartCardConfiguration::
        getUseConnectedSmartcardReader () const
        {
          return this->UseConnectedSmartcardReader_.get ();
        }

        SmartCardConfiguration::UseConnectedSmartcardReaderType& SmartCardConfiguration::
        getUseConnectedSmartcardReader ()
        {
          return this->UseConnectedSmartcardReader_.get ();
        }

        void SmartCardConfiguration::
        setUseConnectedSmartcardReader (const UseConnectedSmartcardReaderType& x)
        {
          this->UseConnectedSmartcardReader_.set (x);
        }

        const SmartCardConfiguration::ConnectedReaderRenewContextType& SmartCardConfiguration::
        getConnectedReaderRenewContext () const
        {
          return this->ConnectedReaderRenewContext_.get ();
        }

        SmartCardConfiguration::ConnectedReaderRenewContextType& SmartCardConfiguration::
        getConnectedReaderRenewContext ()
        {
          return this->ConnectedReaderRenewContext_.get ();
        }

        void SmartCardConfiguration::
        setConnectedReaderRenewContext (const ConnectedReaderRenewContextType& x)
        {
          this->ConnectedReaderRenewContext_.set (x);
        }

        const SmartCardConfiguration::ConnectedSmartcardPCSCCheckCardType& SmartCardConfiguration::
        getConnectedSmartcardPCSCCheckCard () const
        {
          return this->ConnectedSmartcardPCSCCheckCard_.get ();
        }

        SmartCardConfiguration::ConnectedSmartcardPCSCCheckCardType& SmartCardConfiguration::
        getConnectedSmartcardPCSCCheckCard ()
        {
          return this->ConnectedSmartcardPCSCCheckCard_.get ();
        }

        void SmartCardConfiguration::
        setConnectedSmartcardPCSCCheckCard (const ConnectedSmartcardPCSCCheckCardType& x)
        {
          this->ConnectedSmartcardPCSCCheckCard_.set (x);
        }

        const SmartCardConfiguration::ConnectedSmartcardConnectToCheckPresenceType& SmartCardConfiguration::
        getConnectedSmartcardConnectToCheckPresence () const
        {
          return this->ConnectedSmartcardConnectToCheckPresence_.get ();
        }

        SmartCardConfiguration::ConnectedSmartcardConnectToCheckPresenceType& SmartCardConfiguration::
        getConnectedSmartcardConnectToCheckPresence ()
        {
          return this->ConnectedSmartcardConnectToCheckPresence_.get ();
        }

        void SmartCardConfiguration::
        setConnectedSmartcardConnectToCheckPresence (const ConnectedSmartcardConnectToCheckPresenceType& x)
        {
          this->ConnectedSmartcardConnectToCheckPresence_.set (x);
        }


        // PCSCDConfiguration
        // 

        const PCSCDConfiguration::StartServiceType& PCSCDConfiguration::
        getStartService () const
        {
          return this->StartService_.get ();
        }

        PCSCDConfiguration::StartServiceType& PCSCDConfiguration::
        getStartService ()
        {
          return this->StartService_.get ();
        }

        void PCSCDConfiguration::
        setStartService (const StartServiceType& x)
        {
          this->StartService_.set (x);
        }

        const PCSCDConfiguration::StopServiceType& PCSCDConfiguration::
        getStopService () const
        {
          return this->StopService_.get ();
        }

        PCSCDConfiguration::StopServiceType& PCSCDConfiguration::
        getStopService ()
        {
          return this->StopService_.get ();
        }

        void PCSCDConfiguration::
        setStopService (const StopServiceType& x)
        {
          this->StopService_.set (x);
        }


        // CommandPrintingModeType
        // 

        CommandPrintingModeType::
        CommandPrintingModeType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        CommandPrintingModeType::
        CommandPrintingModeType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_CommandPrintingModeType_literals_[v])
        {
        }

        CommandPrintingModeType::
        CommandPrintingModeType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CommandPrintingModeType::
        CommandPrintingModeType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CommandPrintingModeType::
        CommandPrintingModeType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CommandPrintingModeType::
        CommandPrintingModeType (const CommandPrintingModeType& v,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        CommandPrintingModeType& CommandPrintingModeType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_CommandPrintingModeType_literals_[v]);

          return *this;
        }


        // PrinterBackendType
        // 

        PrinterBackendType::
        PrinterBackendType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        PrinterBackendType::
        PrinterBackendType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_PrinterBackendType_literals_[v])
        {
        }

        PrinterBackendType::
        PrinterBackendType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PrinterBackendType::
        PrinterBackendType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PrinterBackendType::
        PrinterBackendType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PrinterBackendType::
        PrinterBackendType (const PrinterBackendType& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        PrinterBackendType& PrinterBackendType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_PrinterBackendType_literals_[v]);

          return *this;
        }


        // CutType
        // 

        CutType::
        CutType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        CutType::
        CutType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_CutType_literals_[v])
        {
        }

        CutType::
        CutType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CutType::
        CutType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CutType::
        CutType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CutType::
        CutType (const CutType& v,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        CutType& CutType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_CutType_literals_[v]);

          return *this;
        }


        // ConfigurationBasePath
        // 

        const ConfigurationBasePath::RulesBasePathType& ConfigurationBasePath::
        getRulesBasePath () const
        {
          return this->RulesBasePath_.get ();
        }

        ConfigurationBasePath::RulesBasePathType& ConfigurationBasePath::
        getRulesBasePath ()
        {
          return this->RulesBasePath_.get ();
        }

        void ConfigurationBasePath::
        setRulesBasePath (const RulesBasePathType& x)
        {
          this->RulesBasePath_.set (x);
        }

        void ConfigurationBasePath::
        setRulesBasePath (::std::auto_ptr< RulesBasePathType > x)
        {
          this->RulesBasePath_.set (x);
        }

        const ConfigurationBasePath::LiveFileSystemBasePathType& ConfigurationBasePath::
        getLiveFileSystemBasePath () const
        {
          return this->LiveFileSystemBasePath_.get ();
        }

        ConfigurationBasePath::LiveFileSystemBasePathType& ConfigurationBasePath::
        getLiveFileSystemBasePath ()
        {
          return this->LiveFileSystemBasePath_.get ();
        }

        void ConfigurationBasePath::
        setLiveFileSystemBasePath (const LiveFileSystemBasePathType& x)
        {
          this->LiveFileSystemBasePath_.set (x);
        }

        void ConfigurationBasePath::
        setLiveFileSystemBasePath (::std::auto_ptr< LiveFileSystemBasePathType > x)
        {
          this->LiveFileSystemBasePath_.set (x);
        }

        const ConfigurationBasePath::LanguageImageDirectoryType& ConfigurationBasePath::
        getLanguageImageDirectory () const
        {
          return this->languageImageDirectory_.get ();
        }

        ConfigurationBasePath::LanguageImageDirectoryType& ConfigurationBasePath::
        getLanguageImageDirectory ()
        {
          return this->languageImageDirectory_.get ();
        }

        void ConfigurationBasePath::
        setLanguageImageDirectory (const LanguageImageDirectoryType& x)
        {
          this->languageImageDirectory_.set (x);
        }

        void ConfigurationBasePath::
        setLanguageImageDirectory (::std::auto_ptr< LanguageImageDirectoryType > x)
        {
          this->languageImageDirectory_.set (x);
        }

        const ConfigurationBasePath::BackupFileNameType& ConfigurationBasePath::
        getBackupFileName () const
        {
          return this->backupFileName_.get ();
        }

        ConfigurationBasePath::BackupFileNameType& ConfigurationBasePath::
        getBackupFileName ()
        {
          return this->backupFileName_.get ();
        }

        void ConfigurationBasePath::
        setBackupFileName (const BackupFileNameType& x)
        {
          this->backupFileName_.set (x);
        }

        void ConfigurationBasePath::
        setBackupFileName (::std::auto_ptr< BackupFileNameType > x)
        {
          this->backupFileName_.set (x);
        }

        const ConfigurationBasePath::ProjectNameType& ConfigurationBasePath::
        getProjectName () const
        {
          return this->ProjectName_.get ();
        }

        ConfigurationBasePath::ProjectNameType& ConfigurationBasePath::
        getProjectName ()
        {
          return this->ProjectName_.get ();
        }

        void ConfigurationBasePath::
        setProjectName (const ProjectNameType& x)
        {
          this->ProjectName_.set (x);
        }

        void ConfigurationBasePath::
        setProjectName (::std::auto_ptr< ProjectNameType > x)
        {
          this->ProjectName_.set (x);
        }

        const ConfigurationBasePath::WorkingDirectoryType& ConfigurationBasePath::
        getWorkingDirectory () const
        {
          return this->WorkingDirectory_.get ();
        }

        ConfigurationBasePath::WorkingDirectoryType& ConfigurationBasePath::
        getWorkingDirectory ()
        {
          return this->WorkingDirectory_.get ();
        }

        void ConfigurationBasePath::
        setWorkingDirectory (const WorkingDirectoryType& x)
        {
          this->WorkingDirectory_.set (x);
        }

        void ConfigurationBasePath::
        setWorkingDirectory (::std::auto_ptr< WorkingDirectoryType > x)
        {
          this->WorkingDirectory_.set (x);
        }

        const ConfigurationBasePath::VotingExperienceValidationScreensDirectoryType& ConfigurationBasePath::
        getVotingExperienceValidationScreensDirectory () const
        {
          return this->VotingExperienceValidationScreensDirectory_.get ();
        }

        ConfigurationBasePath::VotingExperienceValidationScreensDirectoryType& ConfigurationBasePath::
        getVotingExperienceValidationScreensDirectory ()
        {
          return this->VotingExperienceValidationScreensDirectory_.get ();
        }

        void ConfigurationBasePath::
        setVotingExperienceValidationScreensDirectory (const VotingExperienceValidationScreensDirectoryType& x)
        {
          this->VotingExperienceValidationScreensDirectory_.set (x);
        }

        void ConfigurationBasePath::
        setVotingExperienceValidationScreensDirectory (::std::auto_ptr< VotingExperienceValidationScreensDirectoryType > x)
        {
          this->VotingExperienceValidationScreensDirectory_.set (x);
        }


        // RulesBasePathType
        // 

        RulesBasePathType::
        RulesBasePathType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        RulesBasePathType::
        RulesBasePathType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_RulesBasePathType_literals_[v])
        {
        }

        RulesBasePathType::
        RulesBasePathType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        RulesBasePathType::
        RulesBasePathType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        RulesBasePathType::
        RulesBasePathType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        RulesBasePathType::
        RulesBasePathType (const RulesBasePathType& v,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        RulesBasePathType& RulesBasePathType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_RulesBasePathType_literals_[v]);

          return *this;
        }


        // BasePath
        // 

        const BasePath::PathType& BasePath::
        getPath () const
        {
          return this->path_.get ();
        }

        BasePath::PathType& BasePath::
        getPath ()
        {
          return this->path_.get ();
        }

        void BasePath::
        setPath (const PathType& x)
        {
          this->path_.set (x);
        }

        void BasePath::
        setPath (::std::auto_ptr< PathType > x)
        {
          this->path_.set (x);
        }

        const BasePath::TypeType& BasePath::
        getType () const
        {
          return this->type_.get ();
        }

        BasePath::TypeType& BasePath::
        getType ()
        {
          return this->type_.get ();
        }

        void BasePath::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void BasePath::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }


        // BasePathType
        // 

        BasePathType::
        BasePathType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        BasePathType::
        BasePathType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_BasePathType_literals_[v])
        {
        }

        BasePathType::
        BasePathType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BasePathType::
        BasePathType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BasePathType::
        BasePathType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        BasePathType::
        BasePathType (const BasePathType& v,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        BasePathType& BasePathType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_BasePathType_literals_[v]);

          return *this;
        }


        // DigestAlgType
        // 

        DigestAlgType::
        DigestAlgType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        DigestAlgType::
        DigestAlgType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_DigestAlgType_literals_[v])
        {
        }

        DigestAlgType::
        DigestAlgType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        DigestAlgType::
        DigestAlgType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        DigestAlgType::
        DigestAlgType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        DigestAlgType::
        DigestAlgType (const DigestAlgType& v,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        DigestAlgType& DigestAlgType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_DigestAlgType_literals_[v]);

          return *this;
        }


        // KeyDerivAlgType
        // 

        KeyDerivAlgType::
        KeyDerivAlgType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        KeyDerivAlgType::
        KeyDerivAlgType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_KeyDerivAlgType_literals_[v])
        {
        }

        KeyDerivAlgType::
        KeyDerivAlgType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        KeyDerivAlgType::
        KeyDerivAlgType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        KeyDerivAlgType::
        KeyDerivAlgType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        KeyDerivAlgType::
        KeyDerivAlgType (const KeyDerivAlgType& v,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        KeyDerivAlgType& KeyDerivAlgType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_KeyDerivAlgType_literals_[v]);

          return *this;
        }


        // SaltSourceType
        // 

        const SaltSourceType::CalcSaltType& SaltSourceType::
        getCalcSalt () const
        {
          return this->CalcSalt_.get ();
        }

        SaltSourceType::CalcSaltType& SaltSourceType::
        getCalcSalt ()
        {
          return this->CalcSalt_.get ();
        }

        void SaltSourceType::
        setCalcSalt (const CalcSaltType& x)
        {
          this->CalcSalt_.set (x);
        }

        const SaltSourceType::SepCharType& SaltSourceType::
        getSepChar () const
        {
          return this->SepChar_.get ();
        }

        SaltSourceType::SepCharType& SaltSourceType::
        getSepChar ()
        {
          return this->SepChar_.get ();
        }

        void SaltSourceType::
        setSepChar (const SepCharType& x)
        {
          this->SepChar_.set (x);
        }

        void SaltSourceType::
        setSepChar (::std::auto_ptr< SepCharType > x)
        {
          this->SepChar_.set (x);
        }

        const SaltSourceType::DefaultSaltType& SaltSourceType::
        getDefaultSalt () const
        {
          return this->DefaultSalt_.get ();
        }

        SaltSourceType::DefaultSaltType& SaltSourceType::
        getDefaultSalt ()
        {
          return this->DefaultSalt_.get ();
        }

        void SaltSourceType::
        setDefaultSalt (const DefaultSaltType& x)
        {
          this->DefaultSalt_.set (x);
        }

        void SaltSourceType::
        setDefaultSalt (::std::auto_ptr< DefaultSaltType > x)
        {
          this->DefaultSalt_.set (x);
        }


        // SecurityConfiguration
        // 

        const SecurityConfiguration::SecurityCryptoModeOptional& SecurityConfiguration::
        getSecurityCryptoMode () const
        {
          return this->SecurityCryptoMode_;
        }

        SecurityConfiguration::SecurityCryptoModeOptional& SecurityConfiguration::
        getSecurityCryptoMode ()
        {
          return this->SecurityCryptoMode_;
        }

        void SecurityConfiguration::
        setSecurityCryptoMode (const SecurityCryptoModeType& x)
        {
          this->SecurityCryptoMode_.set (x);
        }

        void SecurityConfiguration::
        setSecurityCryptoMode (const SecurityCryptoModeOptional& x)
        {
          this->SecurityCryptoMode_ = x;
        }

        void SecurityConfiguration::
        setSecurityCryptoMode (::std::auto_ptr< SecurityCryptoModeType > x)
        {
          this->SecurityCryptoMode_.set (x);
        }

        const SecurityConfiguration::SecretKeyEncryptedType& SecurityConfiguration::
        getSecretKeyEncrypted () const
        {
          return this->SecretKeyEncrypted_.get ();
        }

        SecurityConfiguration::SecretKeyEncryptedType& SecurityConfiguration::
        getSecretKeyEncrypted ()
        {
          return this->SecretKeyEncrypted_.get ();
        }

        void SecurityConfiguration::
        setSecretKeyEncrypted (const SecretKeyEncryptedType& x)
        {
          this->SecretKeyEncrypted_.set (x);
        }

        const SecurityConfiguration::ForceReduceElectionType& SecurityConfiguration::
        getForceReduceElection () const
        {
          return this->ForceReduceElection_.get ();
        }

        SecurityConfiguration::ForceReduceElectionType& SecurityConfiguration::
        getForceReduceElection ()
        {
          return this->ForceReduceElection_.get ();
        }

        void SecurityConfiguration::
        setForceReduceElection (const ForceReduceElectionType& x)
        {
          this->ForceReduceElection_.set (x);
        }

        const SecurityConfiguration::VerifySAESFolderType& SecurityConfiguration::
        getVerifySAESFolder () const
        {
          return this->VerifySAESFolder_.get ();
        }

        SecurityConfiguration::VerifySAESFolderType& SecurityConfiguration::
        getVerifySAESFolder ()
        {
          return this->VerifySAESFolder_.get ();
        }

        void SecurityConfiguration::
        setVerifySAESFolder (const VerifySAESFolderType& x)
        {
          this->VerifySAESFolder_.set (x);
        }

        const SecurityConfiguration::IsCompressElectionType& SecurityConfiguration::
        getIsCompressElection () const
        {
          return this->IsCompressElection_.get ();
        }

        SecurityConfiguration::IsCompressElectionType& SecurityConfiguration::
        getIsCompressElection ()
        {
          return this->IsCompressElection_.get ();
        }

        void SecurityConfiguration::
        setIsCompressElection (const IsCompressElectionType& x)
        {
          this->IsCompressElection_.set (x);
        }

        const SecurityConfiguration::IsCompressVotingDevicesType& SecurityConfiguration::
        getIsCompressVotingDevices () const
        {
          return this->IsCompressVotingDevices_.get ();
        }

        SecurityConfiguration::IsCompressVotingDevicesType& SecurityConfiguration::
        getIsCompressVotingDevices ()
        {
          return this->IsCompressVotingDevices_.get ();
        }

        void SecurityConfiguration::
        setIsCompressVotingDevices (const IsCompressVotingDevicesType& x)
        {
          this->IsCompressVotingDevices_.set (x);
        }

        const SecurityConfiguration::ImplementCACertificateFileNameType& SecurityConfiguration::
        getImplementCACertificateFileName () const
        {
          return this->ImplementCACertificateFileName_.get ();
        }

        SecurityConfiguration::ImplementCACertificateFileNameType& SecurityConfiguration::
        getImplementCACertificateFileName ()
        {
          return this->ImplementCACertificateFileName_.get ();
        }

        void SecurityConfiguration::
        setImplementCACertificateFileName (const ImplementCACertificateFileNameType& x)
        {
          this->ImplementCACertificateFileName_.set (x);
        }

        const SecurityConfiguration::ImplementItermediateCACertificatesType& SecurityConfiguration::
        getImplementItermediateCACertificates () const
        {
          return this->ImplementItermediateCACertificates_.get ();
        }

        SecurityConfiguration::ImplementItermediateCACertificatesType& SecurityConfiguration::
        getImplementItermediateCACertificates ()
        {
          return this->ImplementItermediateCACertificates_.get ();
        }

        void SecurityConfiguration::
        setImplementItermediateCACertificates (const ImplementItermediateCACertificatesType& x)
        {
          this->ImplementItermediateCACertificates_.set (x);
        }

        const SecurityConfiguration::ImplementTrustedCertificatesType& SecurityConfiguration::
        getImplementTrustedCertificates () const
        {
          return this->ImplementTrustedCertificates_.get ();
        }

        SecurityConfiguration::ImplementTrustedCertificatesType& SecurityConfiguration::
        getImplementTrustedCertificates ()
        {
          return this->ImplementTrustedCertificates_.get ();
        }

        void SecurityConfiguration::
        setImplementTrustedCertificates (const ImplementTrustedCertificatesType& x)
        {
          this->ImplementTrustedCertificates_.set (x);
        }

        const SecurityConfiguration::CertifiedTimeType& SecurityConfiguration::
        getCertifiedTime () const
        {
          return this->CertifiedTime_.get ();
        }

        SecurityConfiguration::CertifiedTimeType& SecurityConfiguration::
        getCertifiedTime ()
        {
          return this->CertifiedTime_.get ();
        }

        void SecurityConfiguration::
        setCertifiedTime (const CertifiedTimeType& x)
        {
          this->CertifiedTime_.set (x);
        }

        void SecurityConfiguration::
        setCertifiedTime (::std::auto_ptr< CertifiedTimeType > x)
        {
          this->CertifiedTime_.set (x);
        }

        const SecurityConfiguration::ValidateCertifiedTimeType& SecurityConfiguration::
        getValidateCertifiedTime () const
        {
          return this->ValidateCertifiedTime_.get ();
        }

        SecurityConfiguration::ValidateCertifiedTimeType& SecurityConfiguration::
        getValidateCertifiedTime ()
        {
          return this->ValidateCertifiedTime_.get ();
        }

        void SecurityConfiguration::
        setValidateCertifiedTime (const ValidateCertifiedTimeType& x)
        {
          this->ValidateCertifiedTime_.set (x);
        }

        void SecurityConfiguration::
        setValidateCertifiedTime (::std::auto_ptr< ValidateCertifiedTimeType > x)
        {
          this->ValidateCertifiedTime_.set (x);
        }

        const SecurityConfiguration::VerifyExternElementsType& SecurityConfiguration::
        getVerifyExternElements () const
        {
          return this->VerifyExternElements_.get ();
        }

        SecurityConfiguration::VerifyExternElementsType& SecurityConfiguration::
        getVerifyExternElements ()
        {
          return this->VerifyExternElements_.get ();
        }

        void SecurityConfiguration::
        setVerifyExternElements (const VerifyExternElementsType& x)
        {
          this->VerifyExternElements_.set (x);
        }

        const SecurityConfiguration::UseAsimetricKeyForTransmissionPackagesType& SecurityConfiguration::
        getUseAsimetricKeyForTransmissionPackages () const
        {
          return this->UseAsimetricKeyForTransmissionPackages_.get ();
        }

        SecurityConfiguration::UseAsimetricKeyForTransmissionPackagesType& SecurityConfiguration::
        getUseAsimetricKeyForTransmissionPackages ()
        {
          return this->UseAsimetricKeyForTransmissionPackages_.get ();
        }

        void SecurityConfiguration::
        setUseAsimetricKeyForTransmissionPackages (const UseAsimetricKeyForTransmissionPackagesType& x)
        {
          this->UseAsimetricKeyForTransmissionPackages_.set (x);
        }

        const SecurityConfiguration::InstallationFilesType& SecurityConfiguration::
        getInstallationFiles () const
        {
          return this->InstallationFiles_.get ();
        }

        SecurityConfiguration::InstallationFilesType& SecurityConfiguration::
        getInstallationFiles ()
        {
          return this->InstallationFiles_.get ();
        }

        void SecurityConfiguration::
        setInstallationFiles (const InstallationFilesType& x)
        {
          this->InstallationFiles_.set (x);
        }

        void SecurityConfiguration::
        setInstallationFiles (::std::auto_ptr< InstallationFilesType > x)
        {
          this->InstallationFiles_.set (x);
        }

        const SecurityConfiguration::ExternalFilesType& SecurityConfiguration::
        getExternalFiles () const
        {
          return this->ExternalFiles_.get ();
        }

        SecurityConfiguration::ExternalFilesType& SecurityConfiguration::
        getExternalFiles ()
        {
          return this->ExternalFiles_.get ();
        }

        void SecurityConfiguration::
        setExternalFiles (const ExternalFilesType& x)
        {
          this->ExternalFiles_.set (x);
        }

        void SecurityConfiguration::
        setExternalFiles (::std::auto_ptr< ExternalFilesType > x)
        {
          this->ExternalFiles_.set (x);
        }

        const SecurityConfiguration::InternalFilesType& SecurityConfiguration::
        getInternalFiles () const
        {
          return this->InternalFiles_.get ();
        }

        SecurityConfiguration::InternalFilesType& SecurityConfiguration::
        getInternalFiles ()
        {
          return this->InternalFiles_.get ();
        }

        void SecurityConfiguration::
        setInternalFiles (const InternalFilesType& x)
        {
          this->InternalFiles_.set (x);
        }

        void SecurityConfiguration::
        setInternalFiles (::std::auto_ptr< InternalFilesType > x)
        {
          this->InternalFiles_.set (x);
        }

        const SecurityConfiguration::ResourcesFilesType& SecurityConfiguration::
        getResourcesFiles () const
        {
          return this->ResourcesFiles_.get ();
        }

        SecurityConfiguration::ResourcesFilesType& SecurityConfiguration::
        getResourcesFiles ()
        {
          return this->ResourcesFiles_.get ();
        }

        void SecurityConfiguration::
        setResourcesFiles (const ResourcesFilesType& x)
        {
          this->ResourcesFiles_.set (x);
        }

        void SecurityConfiguration::
        setResourcesFiles (::std::auto_ptr< ResourcesFilesType > x)
        {
          this->ResourcesFiles_.set (x);
        }

        const SecurityConfiguration::ExchangeFilesType& SecurityConfiguration::
        getExchangeFiles () const
        {
          return this->ExchangeFiles_.get ();
        }

        SecurityConfiguration::ExchangeFilesType& SecurityConfiguration::
        getExchangeFiles ()
        {
          return this->ExchangeFiles_.get ();
        }

        void SecurityConfiguration::
        setExchangeFiles (const ExchangeFilesType& x)
        {
          this->ExchangeFiles_.set (x);
        }

        void SecurityConfiguration::
        setExchangeFiles (::std::auto_ptr< ExchangeFilesType > x)
        {
          this->ExchangeFiles_.set (x);
        }

        const SecurityConfiguration::UtilFilesType& SecurityConfiguration::
        getUtilFiles () const
        {
          return this->UtilFiles_.get ();
        }

        SecurityConfiguration::UtilFilesType& SecurityConfiguration::
        getUtilFiles ()
        {
          return this->UtilFiles_.get ();
        }

        void SecurityConfiguration::
        setUtilFiles (const UtilFilesType& x)
        {
          this->UtilFiles_.set (x);
        }

        void SecurityConfiguration::
        setUtilFiles (::std::auto_ptr< UtilFilesType > x)
        {
          this->UtilFiles_.set (x);
        }

        const SecurityConfiguration::PrintedVoteDataType& SecurityConfiguration::
        getPrintedVoteData () const
        {
          return this->PrintedVoteData_.get ();
        }

        SecurityConfiguration::PrintedVoteDataType& SecurityConfiguration::
        getPrintedVoteData ()
        {
          return this->PrintedVoteData_.get ();
        }

        void SecurityConfiguration::
        setPrintedVoteData (const PrintedVoteDataType& x)
        {
          this->PrintedVoteData_.set (x);
        }

        void SecurityConfiguration::
        setPrintedVoteData (::std::auto_ptr< PrintedVoteDataType > x)
        {
          this->PrintedVoteData_.set (x);
        }

        const SecurityConfiguration::FileSystemVoteType& SecurityConfiguration::
        getFileSystemVote () const
        {
          return this->FileSystemVote_.get ();
        }

        SecurityConfiguration::FileSystemVoteType& SecurityConfiguration::
        getFileSystemVote ()
        {
          return this->FileSystemVote_.get ();
        }

        void SecurityConfiguration::
        setFileSystemVote (const FileSystemVoteType& x)
        {
          this->FileSystemVote_.set (x);
        }

        void SecurityConfiguration::
        setFileSystemVote (::std::auto_ptr< FileSystemVoteType > x)
        {
          this->FileSystemVote_.set (x);
        }

        const SecurityConfiguration::SaltSourceType& SecurityConfiguration::
        getSaltSource () const
        {
          return this->SaltSource_.get ();
        }

        SecurityConfiguration::SaltSourceType& SecurityConfiguration::
        getSaltSource ()
        {
          return this->SaltSource_.get ();
        }

        void SecurityConfiguration::
        setSaltSource (const SaltSourceType& x)
        {
          this->SaltSource_.set (x);
        }

        void SecurityConfiguration::
        setSaltSource (::std::auto_ptr< SaltSourceType > x)
        {
          this->SaltSource_.set (x);
        }

        const SecurityConfiguration::DigestAlgType& SecurityConfiguration::
        getDigestAlg () const
        {
          return this->DigestAlg_.get ();
        }

        SecurityConfiguration::DigestAlgType& SecurityConfiguration::
        getDigestAlg ()
        {
          return this->DigestAlg_.get ();
        }

        void SecurityConfiguration::
        setDigestAlg (const DigestAlgType& x)
        {
          this->DigestAlg_.set (x);
        }

        void SecurityConfiguration::
        setDigestAlg (::std::auto_ptr< DigestAlgType > x)
        {
          this->DigestAlg_.set (x);
        }

        const SecurityConfiguration::KeyDerivAlgType& SecurityConfiguration::
        getKeyDerivAlg () const
        {
          return this->KeyDerivAlg_.get ();
        }

        SecurityConfiguration::KeyDerivAlgType& SecurityConfiguration::
        getKeyDerivAlg ()
        {
          return this->KeyDerivAlg_.get ();
        }

        void SecurityConfiguration::
        setKeyDerivAlg (const KeyDerivAlgType& x)
        {
          this->KeyDerivAlg_.set (x);
        }

        void SecurityConfiguration::
        setKeyDerivAlg (::std::auto_ptr< KeyDerivAlgType > x)
        {
          this->KeyDerivAlg_.set (x);
        }

        const SecurityConfiguration::IterationsType& SecurityConfiguration::
        getIterations () const
        {
          return this->Iterations_.get ();
        }

        SecurityConfiguration::IterationsType& SecurityConfiguration::
        getIterations ()
        {
          return this->Iterations_.get ();
        }

        void SecurityConfiguration::
        setIterations (const IterationsType& x)
        {
          this->Iterations_.set (x);
        }

        const SecurityConfiguration::SignedPVFormType& SecurityConfiguration::
        getSignedPVForm () const
        {
          return this->SignedPVForm_.get ();
        }

        SecurityConfiguration::SignedPVFormType& SecurityConfiguration::
        getSignedPVForm ()
        {
          return this->SignedPVForm_.get ();
        }

        void SecurityConfiguration::
        setSignedPVForm (const SignedPVFormType& x)
        {
          this->SignedPVForm_.set (x);
        }


        // SecurityFileConfiguration
        // 

        const SecurityFileConfiguration::EncryptedDataType& SecurityFileConfiguration::
        getEncryptedData () const
        {
          return this->EncryptedData_.get ();
        }

        SecurityFileConfiguration::EncryptedDataType& SecurityFileConfiguration::
        getEncryptedData ()
        {
          return this->EncryptedData_.get ();
        }

        void SecurityFileConfiguration::
        setEncryptedData (const EncryptedDataType& x)
        {
          this->EncryptedData_.set (x);
        }

        const SecurityFileConfiguration::SignedDataType& SecurityFileConfiguration::
        getSignedData () const
        {
          return this->SignedData_.get ();
        }

        SecurityFileConfiguration::SignedDataType& SecurityFileConfiguration::
        getSignedData ()
        {
          return this->SignedData_.get ();
        }

        void SecurityFileConfiguration::
        setSignedData (const SignedDataType& x)
        {
          this->SignedData_.set (x);
        }

        void SecurityFileConfiguration::
        setSignedData (::std::auto_ptr< SignedDataType > x)
        {
          this->SignedData_.set (x);
        }

        const SecurityFileConfiguration::ValidateSignedType& SecurityFileConfiguration::
        getValidateSigned () const
        {
          return this->ValidateSigned_.get ();
        }

        SecurityFileConfiguration::ValidateSignedType& SecurityFileConfiguration::
        getValidateSigned ()
        {
          return this->ValidateSigned_.get ();
        }

        void SecurityFileConfiguration::
        setValidateSigned (const ValidateSignedType& x)
        {
          this->ValidateSigned_.set (x);
        }

        const SecurityFileConfiguration::CertifiedFilePathType& SecurityFileConfiguration::
        getCertifiedFilePath () const
        {
          return this->CertifiedFilePath_.get ();
        }

        SecurityFileConfiguration::CertifiedFilePathType& SecurityFileConfiguration::
        getCertifiedFilePath ()
        {
          return this->CertifiedFilePath_.get ();
        }

        void SecurityFileConfiguration::
        setCertifiedFilePath (const CertifiedFilePathType& x)
        {
          this->CertifiedFilePath_.set (x);
        }

        void SecurityFileConfiguration::
        setCertifiedFilePath (::std::auto_ptr< CertifiedFilePathType > x)
        {
          this->CertifiedFilePath_.set (x);
        }

        const SecurityFileConfiguration::CertifiedTypeType& SecurityFileConfiguration::
        getCertifiedType () const
        {
          return this->CertifiedType_.get ();
        }

        SecurityFileConfiguration::CertifiedTypeType& SecurityFileConfiguration::
        getCertifiedType ()
        {
          return this->CertifiedType_.get ();
        }

        void SecurityFileConfiguration::
        setCertifiedType (const CertifiedTypeType& x)
        {
          this->CertifiedType_.set (x);
        }

        void SecurityFileConfiguration::
        setCertifiedType (::std::auto_ptr< CertifiedTypeType > x)
        {
          this->CertifiedType_.set (x);
        }

        const SecurityFileConfiguration::ValidateCertifiedType& SecurityFileConfiguration::
        getValidateCertified () const
        {
          return this->ValidateCertified_.get ();
        }

        SecurityFileConfiguration::ValidateCertifiedType& SecurityFileConfiguration::
        getValidateCertified ()
        {
          return this->ValidateCertified_.get ();
        }

        void SecurityFileConfiguration::
        setValidateCertified (const ValidateCertifiedType& x)
        {
          this->ValidateCertified_.set (x);
        }

        const SecurityFileConfiguration::ValidateCertifiedConfigSequence& SecurityFileConfiguration::
        getValidateCertifiedConfig () const
        {
          return this->ValidateCertifiedConfig_;
        }

        SecurityFileConfiguration::ValidateCertifiedConfigSequence& SecurityFileConfiguration::
        getValidateCertifiedConfig ()
        {
          return this->ValidateCertifiedConfig_;
        }

        void SecurityFileConfiguration::
        setValidateCertifiedConfig (const ValidateCertifiedConfigSequence& s)
        {
          this->ValidateCertifiedConfig_ = s;
        }


        // FileSystemVoteConfiguration
        // 

        const FileSystemVoteConfiguration::MaxfilesType& FileSystemVoteConfiguration::
        getMaxfiles () const
        {
          return this->maxfiles_.get ();
        }

        FileSystemVoteConfiguration::MaxfilesType& FileSystemVoteConfiguration::
        getMaxfiles ()
        {
          return this->maxfiles_.get ();
        }

        void FileSystemVoteConfiguration::
        setMaxfiles (const MaxfilesType& x)
        {
          this->maxfiles_.set (x);
        }

        const FileSystemVoteConfiguration::ImplementTimeType& FileSystemVoteConfiguration::
        getImplementTime () const
        {
          return this->ImplementTime_.get ();
        }

        FileSystemVoteConfiguration::ImplementTimeType& FileSystemVoteConfiguration::
        getImplementTime ()
        {
          return this->ImplementTime_.get ();
        }

        void FileSystemVoteConfiguration::
        setImplementTime (const ImplementTimeType& x)
        {
          this->ImplementTime_.set (x);
        }

        void FileSystemVoteConfiguration::
        setImplementTime (::std::auto_ptr< ImplementTimeType > x)
        {
          this->ImplementTime_.set (x);
        }

        const FileSystemVoteConfiguration::FileSystemVoteTimeType& FileSystemVoteConfiguration::
        getFileSystemVoteTime () const
        {
          return this->FileSystemVoteTime_.get ();
        }

        FileSystemVoteConfiguration::FileSystemVoteTimeType& FileSystemVoteConfiguration::
        getFileSystemVoteTime ()
        {
          return this->FileSystemVoteTime_.get ();
        }

        void FileSystemVoteConfiguration::
        setFileSystemVoteTime (const FileSystemVoteTimeType& x)
        {
          this->FileSystemVoteTime_.set (x);
        }

        void FileSystemVoteConfiguration::
        setFileSystemVoteTime (::std::auto_ptr< FileSystemVoteTimeType > x)
        {
          this->FileSystemVoteTime_.set (x);
        }

        const FileSystemVoteConfiguration::ImplementRandomType& FileSystemVoteConfiguration::
        getImplementRandom () const
        {
          return this->ImplementRandom_.get ();
        }

        FileSystemVoteConfiguration::ImplementRandomType& FileSystemVoteConfiguration::
        getImplementRandom ()
        {
          return this->ImplementRandom_.get ();
        }

        void FileSystemVoteConfiguration::
        setImplementRandom (const ImplementRandomType& x)
        {
          this->ImplementRandom_.set (x);
        }

        const FileSystemVoteConfiguration::BackupMarkFileType& FileSystemVoteConfiguration::
        getBackupMarkFile () const
        {
          return this->BackupMarkFile_.get ();
        }

        FileSystemVoteConfiguration::BackupMarkFileType& FileSystemVoteConfiguration::
        getBackupMarkFile ()
        {
          return this->BackupMarkFile_.get ();
        }

        void FileSystemVoteConfiguration::
        setBackupMarkFile (const BackupMarkFileType& x)
        {
          this->BackupMarkFile_.set (x);
        }

        void FileSystemVoteConfiguration::
        setBackupMarkFile (::std::auto_ptr< BackupMarkFileType > x)
        {
          this->BackupMarkFile_.set (x);
        }


        // SignedType
        // 

        SignedType::
        SignedType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SignedType::
        SignedType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SignedType_literals_[v])
        {
        }

        SignedType::
        SignedType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SignedType::
        SignedType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SignedType::
        SignedType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SignedType::
        SignedType (const SignedType& v,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SignedType& SignedType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SignedType_literals_[v]);

          return *this;
        }


        // ValidateCertifiedConfiguration
        // 

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_ValidateCertifiedConfiguration_literals_[v])
        {
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const ValidateCertifiedConfiguration& v,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        ValidateCertifiedConfiguration& ValidateCertifiedConfiguration::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_ValidateCertifiedConfiguration_literals_[v]);

          return *this;
        }


        // TimeConfiguration
        // 

        TimeConfiguration::
        TimeConfiguration ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        TimeConfiguration::
        TimeConfiguration (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_TimeConfiguration_literals_[v])
        {
        }

        TimeConfiguration::
        TimeConfiguration (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        TimeConfiguration::
        TimeConfiguration (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        TimeConfiguration::
        TimeConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        TimeConfiguration::
        TimeConfiguration (const TimeConfiguration& v,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        TimeConfiguration& TimeConfiguration::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_TimeConfiguration_literals_[v]);

          return *this;
        }


        // CertifiedType
        // 

        CertifiedType::
        CertifiedType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        CertifiedType::
        CertifiedType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_CertifiedType_literals_[v])
        {
        }

        CertifiedType::
        CertifiedType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CertifiedType::
        CertifiedType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CertifiedType::
        CertifiedType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CertifiedType::
        CertifiedType (const CertifiedType& v,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        CertifiedType& CertifiedType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_CertifiedType_literals_[v]);

          return *this;
        }


        // CryptoType
        // 

        CryptoType::
        CryptoType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        CryptoType::
        CryptoType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_CryptoType_literals_[v])
        {
        }

        CryptoType::
        CryptoType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CryptoType::
        CryptoType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CryptoType::
        CryptoType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CryptoType::
        CryptoType (const CryptoType& v,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        CryptoType& CryptoType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_CryptoType_literals_[v]);

          return *this;
        }


        // SecurityCryptoMode
        // 

        SecurityCryptoMode::
        SecurityCryptoMode ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SecurityCryptoMode::
        SecurityCryptoMode (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityCryptoMode_literals_[v])
        {
        }

        SecurityCryptoMode::
        SecurityCryptoMode (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityCryptoMode::
        SecurityCryptoMode (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityCryptoMode::
        SecurityCryptoMode (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityCryptoMode::
        SecurityCryptoMode (const SecurityCryptoMode& v,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SecurityCryptoMode& SecurityCryptoMode::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityCryptoMode_literals_[v]);

          return *this;
        }


        // PlatformMode
        // 

        PlatformMode::
        PlatformMode ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        PlatformMode::
        PlatformMode (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_PlatformMode_literals_[v])
        {
        }

        PlatformMode::
        PlatformMode (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PlatformMode::
        PlatformMode (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PlatformMode::
        PlatformMode (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        PlatformMode::
        PlatformMode (const PlatformMode& v,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        PlatformMode& PlatformMode::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_PlatformMode_literals_[v]);

          return *this;
        }


        // GlobalPIN
        // 

        GlobalPIN::
        GlobalPIN ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        GlobalPIN::
        GlobalPIN (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_GlobalPIN_literals_[v])
        {
        }

        GlobalPIN::
        GlobalPIN (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        GlobalPIN::
        GlobalPIN (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        GlobalPIN::
        GlobalPIN (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        GlobalPIN::
        GlobalPIN (const GlobalPIN& v,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        GlobalPIN& GlobalPIN::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_GlobalPIN_literals_[v]);

          return *this;
        }


        // DataPIN
        // 

        DataPIN::
        DataPIN ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        DataPIN::
        DataPIN (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_DataPIN_literals_[v])
        {
        }

        DataPIN::
        DataPIN (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        DataPIN::
        DataPIN (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        DataPIN::
        DataPIN (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        DataPIN::
        DataPIN (const DataPIN& v,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        DataPIN& DataPIN::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_DataPIN_literals_[v]);

          return *this;
        }


        // SecurityChannelProtocol
        // 

        SecurityChannelProtocol::
        SecurityChannelProtocol ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityChannelProtocol_literals_[v])
        {
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (const SecurityChannelProtocol& v,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SecurityChannelProtocol& SecurityChannelProtocol::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityChannelProtocol_literals_[v]);

          return *this;
        }


        // SecurityChannelProtocolImpl
        // 

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityChannelProtocolImpl_literals_[v])
        {
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const SecurityChannelProtocolImpl& v,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SecurityChannelProtocolImpl& SecurityChannelProtocolImpl::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityChannelProtocolImpl_literals_[v]);

          return *this;
        }


        // SecurityLevel
        // 

        SecurityLevel::
        SecurityLevel ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SecurityLevel::
        SecurityLevel (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityLevel_literals_[v])
        {
        }

        SecurityLevel::
        SecurityLevel (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityLevel::
        SecurityLevel (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityLevel::
        SecurityLevel (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityLevel::
        SecurityLevel (const SecurityLevel& v,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SecurityLevel& SecurityLevel::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityLevel_literals_[v]);

          return *this;
        }


        // SecurityKeyDerivation
        // 

        SecurityKeyDerivation::
        SecurityKeyDerivation ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityKeyDerivation_literals_[v])
        {
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (const SecurityKeyDerivation& v,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        SecurityKeyDerivation& SecurityKeyDerivation::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_SecurityKeyDerivation_literals_[v]);

          return *this;
        }


        // NivelTestConfig
        // 

        NivelTestConfig::
        NivelTestConfig ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        NivelTestConfig::
        NivelTestConfig (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_NivelTestConfig_literals_[v])
        {
        }

        NivelTestConfig::
        NivelTestConfig (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        NivelTestConfig::
        NivelTestConfig (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        NivelTestConfig::
        NivelTestConfig (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        NivelTestConfig::
        NivelTestConfig (const NivelTestConfig& v,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        NivelTestConfig& NivelTestConfig::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_NivelTestConfig_literals_[v]);

          return *this;
        }


        // SmartCardErrorCode
        // 


        // ConfigurationElectionFilesPath
        // 

        const ConfigurationElectionFilesPath::CodiFilesFolderType& ConfigurationElectionFilesPath::
        getCodiFilesFolder () const
        {
          return this->CodiFilesFolder_.get ();
        }

        ConfigurationElectionFilesPath::CodiFilesFolderType& ConfigurationElectionFilesPath::
        getCodiFilesFolder ()
        {
          return this->CodiFilesFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setCodiFilesFolder (const CodiFilesFolderType& x)
        {
          this->CodiFilesFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setCodiFilesFolder (::std::auto_ptr< CodiFilesFolderType > x)
        {
          this->CodiFilesFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::SAESFolderType& ConfigurationElectionFilesPath::
        getSAESFolder () const
        {
          return this->SAESFolder_.get ();
        }

        ConfigurationElectionFilesPath::SAESFolderType& ConfigurationElectionFilesPath::
        getSAESFolder ()
        {
          return this->SAESFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setSAESFolder (const SAESFolderType& x)
        {
          this->SAESFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setSAESFolder (::std::auto_ptr< SAESFolderType > x)
        {
          this->SAESFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::ResourcesFolderType& ConfigurationElectionFilesPath::
        getResourcesFolder () const
        {
          return this->ResourcesFolder_.get ();
        }

        ConfigurationElectionFilesPath::ResourcesFolderType& ConfigurationElectionFilesPath::
        getResourcesFolder ()
        {
          return this->ResourcesFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setResourcesFolder (const ResourcesFolderType& x)
        {
          this->ResourcesFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setResourcesFolder (::std::auto_ptr< ResourcesFolderType > x)
        {
          this->ResourcesFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::ImagesFolderType& ConfigurationElectionFilesPath::
        getImagesFolder () const
        {
          return this->ImagesFolder_.get ();
        }

        ConfigurationElectionFilesPath::ImagesFolderType& ConfigurationElectionFilesPath::
        getImagesFolder ()
        {
          return this->ImagesFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setImagesFolder (const ImagesFolderType& x)
        {
          this->ImagesFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setImagesFolder (::std::auto_ptr< ImagesFolderType > x)
        {
          this->ImagesFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::VotesFolderType& ConfigurationElectionFilesPath::
        getVotesFolder () const
        {
          return this->VotesFolder_.get ();
        }

        ConfigurationElectionFilesPath::VotesFolderType& ConfigurationElectionFilesPath::
        getVotesFolder ()
        {
          return this->VotesFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setVotesFolder (const VotesFolderType& x)
        {
          this->VotesFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setVotesFolder (::std::auto_ptr< VotesFolderType > x)
        {
          this->VotesFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::DocsFolderType& ConfigurationElectionFilesPath::
        getDocsFolder () const
        {
          return this->DocsFolder_.get ();
        }

        ConfigurationElectionFilesPath::DocsFolderType& ConfigurationElectionFilesPath::
        getDocsFolder ()
        {
          return this->DocsFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setDocsFolder (const DocsFolderType& x)
        {
          this->DocsFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setDocsFolder (::std::auto_ptr< DocsFolderType > x)
        {
          this->DocsFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::CodiFolderType& ConfigurationElectionFilesPath::
        getCodiFolder () const
        {
          return this->CodiFolder_.get ();
        }

        ConfigurationElectionFilesPath::CodiFolderType& ConfigurationElectionFilesPath::
        getCodiFolder ()
        {
          return this->CodiFolder_.get ();
        }

        void ConfigurationElectionFilesPath::
        setCodiFolder (const CodiFolderType& x)
        {
          this->CodiFolder_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setCodiFolder (::std::auto_ptr< CodiFolderType > x)
        {
          this->CodiFolder_.set (x);
        }

        const ConfigurationElectionFilesPath::LogsFolderNameType& ConfigurationElectionFilesPath::
        getLogsFolderName () const
        {
          return this->LogsFolderName_.get ();
        }

        ConfigurationElectionFilesPath::LogsFolderNameType& ConfigurationElectionFilesPath::
        getLogsFolderName ()
        {
          return this->LogsFolderName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setLogsFolderName (const LogsFolderNameType& x)
        {
          this->LogsFolderName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setLogsFolderName (::std::auto_ptr< LogsFolderNameType > x)
        {
          this->LogsFolderName_.set (x);
        }

        const ConfigurationElectionFilesPath::TransmissionPackageFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageFileName () const
        {
          return this->TransmissionPackageFileName_.get ();
        }

        ConfigurationElectionFilesPath::TransmissionPackageFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageFileName ()
        {
          return this->TransmissionPackageFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageFileName (const TransmissionPackageFileNameType& x)
        {
          this->TransmissionPackageFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageFileName (::std::auto_ptr< TransmissionPackageFileNameType > x)
        {
          this->TransmissionPackageFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::TransmissionPackageHashFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageHashFileName () const
        {
          return this->TransmissionPackageHashFileName_.get ();
        }

        ConfigurationElectionFilesPath::TransmissionPackageHashFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageHashFileName ()
        {
          return this->TransmissionPackageHashFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageHashFileName (const TransmissionPackageHashFileNameType& x)
        {
          this->TransmissionPackageHashFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageHashFileName (::std::auto_ptr< TransmissionPackageHashFileNameType > x)
        {
          this->TransmissionPackageHashFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::TransmissionPackageKeyFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageKeyFileName () const
        {
          return this->TransmissionPackageKeyFileName_.get ();
        }

        ConfigurationElectionFilesPath::TransmissionPackageKeyFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageKeyFileName ()
        {
          return this->TransmissionPackageKeyFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageKeyFileName (const TransmissionPackageKeyFileNameType& x)
        {
          this->TransmissionPackageKeyFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageKeyFileName (::std::auto_ptr< TransmissionPackageKeyFileNameType > x)
        {
          this->TransmissionPackageKeyFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::TransmissionPackageCrtFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageCrtFileName () const
        {
          return this->TransmissionPackageCrtFileName_.get ();
        }

        ConfigurationElectionFilesPath::TransmissionPackageCrtFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageCrtFileName ()
        {
          return this->TransmissionPackageCrtFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageCrtFileName (const TransmissionPackageCrtFileNameType& x)
        {
          this->TransmissionPackageCrtFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageCrtFileName (::std::auto_ptr< TransmissionPackageCrtFileNameType > x)
        {
          this->TransmissionPackageCrtFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::PVFormFileNameType& ConfigurationElectionFilesPath::
        getPVFormFileName () const
        {
          return this->PVFormFileName_.get ();
        }

        ConfigurationElectionFilesPath::PVFormFileNameType& ConfigurationElectionFilesPath::
        getPVFormFileName ()
        {
          return this->PVFormFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setPVFormFileName (const PVFormFileNameType& x)
        {
          this->PVFormFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setPVFormFileName (::std::auto_ptr< PVFormFileNameType > x)
        {
          this->PVFormFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ElectionFileNameType& ConfigurationElectionFilesPath::
        getElectionFileName () const
        {
          return this->ElectionFileName_.get ();
        }

        ConfigurationElectionFilesPath::ElectionFileNameType& ConfigurationElectionFilesPath::
        getElectionFileName ()
        {
          return this->ElectionFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setElectionFileName (const ElectionFileNameType& x)
        {
          this->ElectionFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setElectionFileName (::std::auto_ptr< ElectionFileNameType > x)
        {
          this->ElectionFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ElectionStatusFileNameType& ConfigurationElectionFilesPath::
        getElectionStatusFileName () const
        {
          return this->ElectionStatusFileName_.get ();
        }

        ConfigurationElectionFilesPath::ElectionStatusFileNameType& ConfigurationElectionFilesPath::
        getElectionStatusFileName ()
        {
          return this->ElectionStatusFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setElectionStatusFileName (const ElectionStatusFileNameType& x)
        {
          this->ElectionStatusFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setElectionStatusFileName (::std::auto_ptr< ElectionStatusFileNameType > x)
        {
          this->ElectionStatusFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::CardListStatusFileNameType& ConfigurationElectionFilesPath::
        getCardListStatusFileName () const
        {
          return this->CardListStatusFileName_.get ();
        }

        ConfigurationElectionFilesPath::CardListStatusFileNameType& ConfigurationElectionFilesPath::
        getCardListStatusFileName ()
        {
          return this->CardListStatusFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setCardListStatusFileName (const CardListStatusFileNameType& x)
        {
          this->CardListStatusFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setCardListStatusFileName (::std::auto_ptr< CardListStatusFileNameType > x)
        {
          this->CardListStatusFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ElectionResourcesFileNameType& ConfigurationElectionFilesPath::
        getElectionResourcesFileName () const
        {
          return this->ElectionResourcesFileName_.get ();
        }

        ConfigurationElectionFilesPath::ElectionResourcesFileNameType& ConfigurationElectionFilesPath::
        getElectionResourcesFileName ()
        {
          return this->ElectionResourcesFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setElectionResourcesFileName (const ElectionResourcesFileNameType& x)
        {
          this->ElectionResourcesFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setElectionResourcesFileName (::std::auto_ptr< ElectionResourcesFileNameType > x)
        {
          this->ElectionResourcesFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::VotingMachineStatusFileNameType& ConfigurationElectionFilesPath::
        getVotingMachineStatusFileName () const
        {
          return this->VotingMachineStatusFileName_.get ();
        }

        ConfigurationElectionFilesPath::VotingMachineStatusFileNameType& ConfigurationElectionFilesPath::
        getVotingMachineStatusFileName ()
        {
          return this->VotingMachineStatusFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setVotingMachineStatusFileName (const VotingMachineStatusFileNameType& x)
        {
          this->VotingMachineStatusFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setVotingMachineStatusFileName (::std::auto_ptr< VotingMachineStatusFileNameType > x)
        {
          this->VotingMachineStatusFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::VotingDeviceFileNameType& ConfigurationElectionFilesPath::
        getVotingDeviceFileName () const
        {
          return this->VotingDeviceFileName_.get ();
        }

        ConfigurationElectionFilesPath::VotingDeviceFileNameType& ConfigurationElectionFilesPath::
        getVotingDeviceFileName ()
        {
          return this->VotingDeviceFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setVotingDeviceFileName (const VotingDeviceFileNameType& x)
        {
          this->VotingDeviceFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setVotingDeviceFileName (::std::auto_ptr< VotingDeviceFileNameType > x)
        {
          this->VotingDeviceFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::PollworkersFileNameType& ConfigurationElectionFilesPath::
        getPollworkersFileName () const
        {
          return this->PollworkersFileName_.get ();
        }

        ConfigurationElectionFilesPath::PollworkersFileNameType& ConfigurationElectionFilesPath::
        getPollworkersFileName ()
        {
          return this->PollworkersFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setPollworkersFileName (const PollworkersFileNameType& x)
        {
          this->PollworkersFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setPollworkersFileName (::std::auto_ptr< PollworkersFileNameType > x)
        {
          this->PollworkersFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::StatisticsFileNameType& ConfigurationElectionFilesPath::
        getStatisticsFileName () const
        {
          return this->StatisticsFileName_.get ();
        }

        ConfigurationElectionFilesPath::StatisticsFileNameType& ConfigurationElectionFilesPath::
        getStatisticsFileName ()
        {
          return this->StatisticsFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setStatisticsFileName (const StatisticsFileNameType& x)
        {
          this->StatisticsFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setStatisticsFileName (::std::auto_ptr< StatisticsFileNameType > x)
        {
          this->StatisticsFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ActivatedCardStatisticsFileNameType& ConfigurationElectionFilesPath::
        getActivatedCardStatisticsFileName () const
        {
          return this->ActivatedCardStatisticsFileName_.get ();
        }

        ConfigurationElectionFilesPath::ActivatedCardStatisticsFileNameType& ConfigurationElectionFilesPath::
        getActivatedCardStatisticsFileName ()
        {
          return this->ActivatedCardStatisticsFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setActivatedCardStatisticsFileName (const ActivatedCardStatisticsFileNameType& x)
        {
          this->ActivatedCardStatisticsFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setActivatedCardStatisticsFileName (::std::auto_ptr< ActivatedCardStatisticsFileNameType > x)
        {
          this->ActivatedCardStatisticsFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::IncidentReportFileNameType& ConfigurationElectionFilesPath::
        getIncidentReportFileName () const
        {
          return this->IncidentReportFileName_.get ();
        }

        ConfigurationElectionFilesPath::IncidentReportFileNameType& ConfigurationElectionFilesPath::
        getIncidentReportFileName ()
        {
          return this->IncidentReportFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setIncidentReportFileName (const IncidentReportFileNameType& x)
        {
          this->IncidentReportFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setIncidentReportFileName (::std::auto_ptr< IncidentReportFileNameType > x)
        {
          this->IncidentReportFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ClosingNotesFileNameType& ConfigurationElectionFilesPath::
        getClosingNotesFileName () const
        {
          return this->ClosingNotesFileName_.get ();
        }

        ConfigurationElectionFilesPath::ClosingNotesFileNameType& ConfigurationElectionFilesPath::
        getClosingNotesFileName ()
        {
          return this->ClosingNotesFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setClosingNotesFileName (const ClosingNotesFileNameType& x)
        {
          this->ClosingNotesFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setClosingNotesFileName (::std::auto_ptr< ClosingNotesFileNameType > x)
        {
          this->ClosingNotesFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::XMLImageFileNameType& ConfigurationElectionFilesPath::
        getXMLImageFileName () const
        {
          return this->XMLImageFileName_.get ();
        }

        ConfigurationElectionFilesPath::XMLImageFileNameType& ConfigurationElectionFilesPath::
        getXMLImageFileName ()
        {
          return this->XMLImageFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setXMLImageFileName (const XMLImageFileNameType& x)
        {
          this->XMLImageFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setXMLImageFileName (::std::auto_ptr< XMLImageFileNameType > x)
        {
          this->XMLImageFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::AssistedActivationFileNameType& ConfigurationElectionFilesPath::
        getAssistedActivationFileName () const
        {
          return this->AssistedActivationFileName_.get ();
        }

        ConfigurationElectionFilesPath::AssistedActivationFileNameType& ConfigurationElectionFilesPath::
        getAssistedActivationFileName ()
        {
          return this->AssistedActivationFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setAssistedActivationFileName (const AssistedActivationFileNameType& x)
        {
          this->AssistedActivationFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setAssistedActivationFileName (::std::auto_ptr< AssistedActivationFileNameType > x)
        {
          this->AssistedActivationFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::VotingDisabledFileNameType& ConfigurationElectionFilesPath::
        getVotingDisabledFileName () const
        {
          return this->VotingDisabledFileName_.get ();
        }

        ConfigurationElectionFilesPath::VotingDisabledFileNameType& ConfigurationElectionFilesPath::
        getVotingDisabledFileName ()
        {
          return this->VotingDisabledFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setVotingDisabledFileName (const VotingDisabledFileNameType& x)
        {
          this->VotingDisabledFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setVotingDisabledFileName (::std::auto_ptr< VotingDisabledFileNameType > x)
        {
          this->VotingDisabledFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::PoliceNotesFileNameType& ConfigurationElectionFilesPath::
        getPoliceNotesFileName () const
        {
          return this->PoliceNotesFileName_.get ();
        }

        ConfigurationElectionFilesPath::PoliceNotesFileNameType& ConfigurationElectionFilesPath::
        getPoliceNotesFileName ()
        {
          return this->PoliceNotesFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setPoliceNotesFileName (const PoliceNotesFileNameType& x)
        {
          this->PoliceNotesFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setPoliceNotesFileName (::std::auto_ptr< PoliceNotesFileNameType > x)
        {
          this->PoliceNotesFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::LanguageFileNameType& ConfigurationElectionFilesPath::
        getLanguageFileName () const
        {
          return this->LanguageFileName_.get ();
        }

        ConfigurationElectionFilesPath::LanguageFileNameType& ConfigurationElectionFilesPath::
        getLanguageFileName ()
        {
          return this->LanguageFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setLanguageFileName (const LanguageFileNameType& x)
        {
          this->LanguageFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setLanguageFileName (::std::auto_ptr< LanguageFileNameType > x)
        {
          this->LanguageFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::VotingCentersFileNameType& ConfigurationElectionFilesPath::
        getVotingCentersFileName () const
        {
          return this->VotingCentersFileName_.get ();
        }

        ConfigurationElectionFilesPath::VotingCentersFileNameType& ConfigurationElectionFilesPath::
        getVotingCentersFileName ()
        {
          return this->VotingCentersFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setVotingCentersFileName (const VotingCentersFileNameType& x)
        {
          this->VotingCentersFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setVotingCentersFileName (::std::auto_ptr< VotingCentersFileNameType > x)
        {
          this->VotingCentersFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ConfigBasePathType& ConfigurationElectionFilesPath::
        getConfigBasePath () const
        {
          return this->ConfigBasePath_.get ();
        }

        ConfigurationElectionFilesPath::ConfigBasePathType& ConfigurationElectionFilesPath::
        getConfigBasePath ()
        {
          return this->ConfigBasePath_.get ();
        }

        void ConfigurationElectionFilesPath::
        setConfigBasePath (const ConfigBasePathType& x)
        {
          this->ConfigBasePath_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setConfigBasePath (::std::auto_ptr< ConfigBasePathType > x)
        {
          this->ConfigBasePath_.set (x);
        }

        const ConfigurationElectionFilesPath::SecretKeyFileType& ConfigurationElectionFilesPath::
        getSecretKeyFile () const
        {
          return this->SecretKeyFile_.get ();
        }

        ConfigurationElectionFilesPath::SecretKeyFileType& ConfigurationElectionFilesPath::
        getSecretKeyFile ()
        {
          return this->SecretKeyFile_.get ();
        }

        void ConfigurationElectionFilesPath::
        setSecretKeyFile (const SecretKeyFileType& x)
        {
          this->SecretKeyFile_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setSecretKeyFile (::std::auto_ptr< SecretKeyFileType > x)
        {
          this->SecretKeyFile_.set (x);
        }

        const ConfigurationElectionFilesPath::UPKeyFileType& ConfigurationElectionFilesPath::
        getUPKeyFile () const
        {
          return this->UPKeyFile_.get ();
        }

        ConfigurationElectionFilesPath::UPKeyFileType& ConfigurationElectionFilesPath::
        getUPKeyFile ()
        {
          return this->UPKeyFile_.get ();
        }

        void ConfigurationElectionFilesPath::
        setUPKeyFile (const UPKeyFileType& x)
        {
          this->UPKeyFile_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setUPKeyFile (::std::auto_ptr< UPKeyFileType > x)
        {
          this->UPKeyFile_.set (x);
        }

        const ConfigurationElectionFilesPath::MachineKeysFileType& ConfigurationElectionFilesPath::
        getMachineKeysFile () const
        {
          return this->MachineKeysFile_.get ();
        }

        ConfigurationElectionFilesPath::MachineKeysFileType& ConfigurationElectionFilesPath::
        getMachineKeysFile ()
        {
          return this->MachineKeysFile_.get ();
        }

        void ConfigurationElectionFilesPath::
        setMachineKeysFile (const MachineKeysFileType& x)
        {
          this->MachineKeysFile_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setMachineKeysFile (::std::auto_ptr< MachineKeysFileType > x)
        {
          this->MachineKeysFile_.set (x);
        }

        const ConfigurationElectionFilesPath::IDCardMembersFileNameType& ConfigurationElectionFilesPath::
        getIDCardMembersFileName () const
        {
          return this->IDCardMembersFileName_.get ();
        }

        ConfigurationElectionFilesPath::IDCardMembersFileNameType& ConfigurationElectionFilesPath::
        getIDCardMembersFileName ()
        {
          return this->IDCardMembersFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setIDCardMembersFileName (const IDCardMembersFileNameType& x)
        {
          this->IDCardMembersFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setIDCardMembersFileName (::std::auto_ptr< IDCardMembersFileNameType > x)
        {
          this->IDCardMembersFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::TransmissionPackageSignatureFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageSignatureFileName () const
        {
          return this->TransmissionPackageSignatureFileName_.get ();
        }

        ConfigurationElectionFilesPath::TransmissionPackageSignatureFileNameType& ConfigurationElectionFilesPath::
        getTransmissionPackageSignatureFileName ()
        {
          return this->TransmissionPackageSignatureFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageSignatureFileName (const TransmissionPackageSignatureFileNameType& x)
        {
          this->TransmissionPackageSignatureFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTransmissionPackageSignatureFileName (::std::auto_ptr< TransmissionPackageSignatureFileNameType > x)
        {
          this->TransmissionPackageSignatureFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::PVFormSignatureFileNameType& ConfigurationElectionFilesPath::
        getPVFormSignatureFileName () const
        {
          return this->PVFormSignatureFileName_.get ();
        }

        ConfigurationElectionFilesPath::PVFormSignatureFileNameType& ConfigurationElectionFilesPath::
        getPVFormSignatureFileName ()
        {
          return this->PVFormSignatureFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setPVFormSignatureFileName (const PVFormSignatureFileNameType& x)
        {
          this->PVFormSignatureFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setPVFormSignatureFileName (::std::auto_ptr< PVFormSignatureFileNameType > x)
        {
          this->PVFormSignatureFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::CACertificateFileNameType& ConfigurationElectionFilesPath::
        getCACertificateFileName () const
        {
          return this->CACertificateFileName_.get ();
        }

        ConfigurationElectionFilesPath::CACertificateFileNameType& ConfigurationElectionFilesPath::
        getCACertificateFileName ()
        {
          return this->CACertificateFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setCACertificateFileName (const CACertificateFileNameType& x)
        {
          this->CACertificateFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setCACertificateFileName (::std::auto_ptr< CACertificateFileNameType > x)
        {
          this->CACertificateFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ItermediateCACertificatesFileNameType& ConfigurationElectionFilesPath::
        getItermediateCACertificatesFileName () const
        {
          return this->ItermediateCACertificatesFileName_.get ();
        }

        ConfigurationElectionFilesPath::ItermediateCACertificatesFileNameType& ConfigurationElectionFilesPath::
        getItermediateCACertificatesFileName ()
        {
          return this->ItermediateCACertificatesFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setItermediateCACertificatesFileName (const ItermediateCACertificatesFileNameType& x)
        {
          this->ItermediateCACertificatesFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setItermediateCACertificatesFileName (::std::auto_ptr< ItermediateCACertificatesFileNameType > x)
        {
          this->ItermediateCACertificatesFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ItermediateCACertificatesFromPKCS12FileNameType& ConfigurationElectionFilesPath::
        getItermediateCACertificatesFromPKCS12FileName () const
        {
          return this->ItermediateCACertificatesFromPKCS12FileName_.get ();
        }

        ConfigurationElectionFilesPath::ItermediateCACertificatesFromPKCS12FileNameType& ConfigurationElectionFilesPath::
        getItermediateCACertificatesFromPKCS12FileName ()
        {
          return this->ItermediateCACertificatesFromPKCS12FileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setItermediateCACertificatesFromPKCS12FileName (const ItermediateCACertificatesFromPKCS12FileNameType& x)
        {
          this->ItermediateCACertificatesFromPKCS12FileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setItermediateCACertificatesFromPKCS12FileName (::std::auto_ptr< ItermediateCACertificatesFromPKCS12FileNameType > x)
        {
          this->ItermediateCACertificatesFromPKCS12FileName_.set (x);
        }

        const ConfigurationElectionFilesPath::TrustedCertificatesFileNameType& ConfigurationElectionFilesPath::
        getTrustedCertificatesFileName () const
        {
          return this->TrustedCertificatesFileName_.get ();
        }

        ConfigurationElectionFilesPath::TrustedCertificatesFileNameType& ConfigurationElectionFilesPath::
        getTrustedCertificatesFileName ()
        {
          return this->TrustedCertificatesFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTrustedCertificatesFileName (const TrustedCertificatesFileNameType& x)
        {
          this->TrustedCertificatesFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTrustedCertificatesFileName (::std::auto_ptr< TrustedCertificatesFileNameType > x)
        {
          this->TrustedCertificatesFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::TrustedCertificatesFromPKCS12FileNameType& ConfigurationElectionFilesPath::
        getTrustedCertificatesFromPKCS12FileName () const
        {
          return this->TrustedCertificatesFromPKCS12FileName_.get ();
        }

        ConfigurationElectionFilesPath::TrustedCertificatesFromPKCS12FileNameType& ConfigurationElectionFilesPath::
        getTrustedCertificatesFromPKCS12FileName ()
        {
          return this->TrustedCertificatesFromPKCS12FileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setTrustedCertificatesFromPKCS12FileName (const TrustedCertificatesFromPKCS12FileNameType& x)
        {
          this->TrustedCertificatesFromPKCS12FileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setTrustedCertificatesFromPKCS12FileName (::std::auto_ptr< TrustedCertificatesFromPKCS12FileNameType > x)
        {
          this->TrustedCertificatesFromPKCS12FileName_.set (x);
        }

        const ConfigurationElectionFilesPath::PVTemplateFolderNameType& ConfigurationElectionFilesPath::
        getPVTemplateFolderName () const
        {
          return this->PVTemplateFolderName_.get ();
        }

        ConfigurationElectionFilesPath::PVTemplateFolderNameType& ConfigurationElectionFilesPath::
        getPVTemplateFolderName ()
        {
          return this->PVTemplateFolderName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setPVTemplateFolderName (const PVTemplateFolderNameType& x)
        {
          this->PVTemplateFolderName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setPVTemplateFolderName (::std::auto_ptr< PVTemplateFolderNameType > x)
        {
          this->PVTemplateFolderName_.set (x);
        }

        const ConfigurationElectionFilesPath::PVTemplateFileNameType& ConfigurationElectionFilesPath::
        getPVTemplateFileName () const
        {
          return this->PVTemplateFileName_.get ();
        }

        ConfigurationElectionFilesPath::PVTemplateFileNameType& ConfigurationElectionFilesPath::
        getPVTemplateFileName ()
        {
          return this->PVTemplateFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setPVTemplateFileName (const PVTemplateFileNameType& x)
        {
          this->PVTemplateFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setPVTemplateFileName (::std::auto_ptr< PVTemplateFileNameType > x)
        {
          this->PVTemplateFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::GeneratedPVReportFileNameType& ConfigurationElectionFilesPath::
        getGeneratedPVReportFileName () const
        {
          return this->GeneratedPVReportFileName_.get ();
        }

        ConfigurationElectionFilesPath::GeneratedPVReportFileNameType& ConfigurationElectionFilesPath::
        getGeneratedPVReportFileName ()
        {
          return this->GeneratedPVReportFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setGeneratedPVReportFileName (const GeneratedPVReportFileNameType& x)
        {
          this->GeneratedPVReportFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setGeneratedPVReportFileName (::std::auto_ptr< GeneratedPVReportFileNameType > x)
        {
          this->GeneratedPVReportFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::ElectionResultSignatureFileNameType& ConfigurationElectionFilesPath::
        getElectionResultSignatureFileName () const
        {
          return this->ElectionResultSignatureFileName_.get ();
        }

        ConfigurationElectionFilesPath::ElectionResultSignatureFileNameType& ConfigurationElectionFilesPath::
        getElectionResultSignatureFileName ()
        {
          return this->ElectionResultSignatureFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setElectionResultSignatureFileName (const ElectionResultSignatureFileNameType& x)
        {
          this->ElectionResultSignatureFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setElectionResultSignatureFileName (::std::auto_ptr< ElectionResultSignatureFileNameType > x)
        {
          this->ElectionResultSignatureFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::VoteStatisticsFileNameType& ConfigurationElectionFilesPath::
        getVoteStatisticsFileName () const
        {
          return this->VoteStatisticsFileName_.get ();
        }

        ConfigurationElectionFilesPath::VoteStatisticsFileNameType& ConfigurationElectionFilesPath::
        getVoteStatisticsFileName ()
        {
          return this->VoteStatisticsFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setVoteStatisticsFileName (const VoteStatisticsFileNameType& x)
        {
          this->VoteStatisticsFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setVoteStatisticsFileName (::std::auto_ptr< VoteStatisticsFileNameType > x)
        {
          this->VoteStatisticsFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::SignatureResourceFileNameType& ConfigurationElectionFilesPath::
        getSignatureResourceFileName () const
        {
          return this->SignatureResourceFileName_.get ();
        }

        ConfigurationElectionFilesPath::SignatureResourceFileNameType& ConfigurationElectionFilesPath::
        getSignatureResourceFileName ()
        {
          return this->SignatureResourceFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setSignatureResourceFileName (const SignatureResourceFileNameType& x)
        {
          this->SignatureResourceFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setSignatureResourceFileName (::std::auto_ptr< SignatureResourceFileNameType > x)
        {
          this->SignatureResourceFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::LogErrorFileNameType& ConfigurationElectionFilesPath::
        getLogErrorFileName () const
        {
          return this->LogErrorFileName_.get ();
        }

        ConfigurationElectionFilesPath::LogErrorFileNameType& ConfigurationElectionFilesPath::
        getLogErrorFileName ()
        {
          return this->LogErrorFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setLogErrorFileName (const LogErrorFileNameType& x)
        {
          this->LogErrorFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setLogErrorFileName (::std::auto_ptr< LogErrorFileNameType > x)
        {
          this->LogErrorFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::LogAuditFileNameType& ConfigurationElectionFilesPath::
        getLogAuditFileName () const
        {
          return this->LogAuditFileName_.get ();
        }

        ConfigurationElectionFilesPath::LogAuditFileNameType& ConfigurationElectionFilesPath::
        getLogAuditFileName ()
        {
          return this->LogAuditFileName_.get ();
        }

        void ConfigurationElectionFilesPath::
        setLogAuditFileName (const LogAuditFileNameType& x)
        {
          this->LogAuditFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setLogAuditFileName (::std::auto_ptr< LogAuditFileNameType > x)
        {
          this->LogAuditFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::X7SSignedKeyCertifiedFileNameOptional& ConfigurationElectionFilesPath::
        getX7SSignedKeyCertifiedFileName () const
        {
          return this->X7SSignedKeyCertifiedFileName_;
        }

        ConfigurationElectionFilesPath::X7SSignedKeyCertifiedFileNameOptional& ConfigurationElectionFilesPath::
        getX7SSignedKeyCertifiedFileName ()
        {
          return this->X7SSignedKeyCertifiedFileName_;
        }

        void ConfigurationElectionFilesPath::
        setX7SSignedKeyCertifiedFileName (const X7SSignedKeyCertifiedFileNameType& x)
        {
          this->X7SSignedKeyCertifiedFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setX7SSignedKeyCertifiedFileName (const X7SSignedKeyCertifiedFileNameOptional& x)
        {
          this->X7SSignedKeyCertifiedFileName_ = x;
        }

        void ConfigurationElectionFilesPath::
        setX7SSignedKeyCertifiedFileName (::std::auto_ptr< X7SSignedKeyCertifiedFileNameType > x)
        {
          this->X7SSignedKeyCertifiedFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::X7SSignedCertifiedFileNameOptional& ConfigurationElectionFilesPath::
        getX7SSignedCertifiedFileName () const
        {
          return this->X7SSignedCertifiedFileName_;
        }

        ConfigurationElectionFilesPath::X7SSignedCertifiedFileNameOptional& ConfigurationElectionFilesPath::
        getX7SSignedCertifiedFileName ()
        {
          return this->X7SSignedCertifiedFileName_;
        }

        void ConfigurationElectionFilesPath::
        setX7SSignedCertifiedFileName (const X7SSignedCertifiedFileNameType& x)
        {
          this->X7SSignedCertifiedFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setX7SSignedCertifiedFileName (const X7SSignedCertifiedFileNameOptional& x)
        {
          this->X7SSignedCertifiedFileName_ = x;
        }

        void ConfigurationElectionFilesPath::
        setX7SSignedCertifiedFileName (::std::auto_ptr< X7SSignedCertifiedFileNameType > x)
        {
          this->X7SSignedCertifiedFileName_.set (x);
        }

        const ConfigurationElectionFilesPath::X7SCryptoCertifiedFileNameOptional& ConfigurationElectionFilesPath::
        getX7SCryptoCertifiedFileName () const
        {
          return this->X7SCryptoCertifiedFileName_;
        }

        ConfigurationElectionFilesPath::X7SCryptoCertifiedFileNameOptional& ConfigurationElectionFilesPath::
        getX7SCryptoCertifiedFileName ()
        {
          return this->X7SCryptoCertifiedFileName_;
        }

        void ConfigurationElectionFilesPath::
        setX7SCryptoCertifiedFileName (const X7SCryptoCertifiedFileNameType& x)
        {
          this->X7SCryptoCertifiedFileName_.set (x);
        }

        void ConfigurationElectionFilesPath::
        setX7SCryptoCertifiedFileName (const X7SCryptoCertifiedFileNameOptional& x)
        {
          this->X7SCryptoCertifiedFileName_ = x;
        }

        void ConfigurationElectionFilesPath::
        setX7SCryptoCertifiedFileName (::std::auto_ptr< X7SCryptoCertifiedFileNameType > x)
        {
          this->X7SCryptoCertifiedFileName_.set (x);
        }


        // ConfigurationPrinter
        // 

        const ConfigurationPrinter::SkipPrintType& ConfigurationPrinter::
        getSkipPrint () const
        {
          return this->SkipPrint_.get ();
        }

        ConfigurationPrinter::SkipPrintType& ConfigurationPrinter::
        getSkipPrint ()
        {
          return this->SkipPrint_.get ();
        }

        void ConfigurationPrinter::
        setSkipPrint (const SkipPrintType& x)
        {
          this->SkipPrint_.set (x);
        }

        const ConfigurationPrinter::TimeToPrintTicketType& ConfigurationPrinter::
        getTimeToPrintTicket () const
        {
          return this->TimeToPrintTicket_.get ();
        }

        ConfigurationPrinter::TimeToPrintTicketType& ConfigurationPrinter::
        getTimeToPrintTicket ()
        {
          return this->TimeToPrintTicket_.get ();
        }

        void ConfigurationPrinter::
        setTimeToPrintTicket (const TimeToPrintTicketType& x)
        {
          this->TimeToPrintTicket_.set (x);
        }

        const ConfigurationPrinter::UsePresentPaperOnlineType& ConfigurationPrinter::
        getUsePresentPaperOnline () const
        {
          return this->UsePresentPaperOnline_.get ();
        }

        ConfigurationPrinter::UsePresentPaperOnlineType& ConfigurationPrinter::
        getUsePresentPaperOnline ()
        {
          return this->UsePresentPaperOnline_.get ();
        }

        void ConfigurationPrinter::
        setUsePresentPaperOnline (const UsePresentPaperOnlineType& x)
        {
          this->UsePresentPaperOnline_.set (x);
        }

        const ConfigurationPrinter::DefaultPrinterFontFamilyType& ConfigurationPrinter::
        getDefaultPrinterFontFamily () const
        {
          return this->DefaultPrinterFontFamily_.get ();
        }

        ConfigurationPrinter::DefaultPrinterFontFamilyType& ConfigurationPrinter::
        getDefaultPrinterFontFamily ()
        {
          return this->DefaultPrinterFontFamily_.get ();
        }

        void ConfigurationPrinter::
        setDefaultPrinterFontFamily (const DefaultPrinterFontFamilyType& x)
        {
          this->DefaultPrinterFontFamily_.set (x);
        }

        void ConfigurationPrinter::
        setDefaultPrinterFontFamily (::std::auto_ptr< DefaultPrinterFontFamilyType > x)
        {
          this->DefaultPrinterFontFamily_.set (x);
        }

        const ConfigurationPrinter::EndPaddingDirectPrintType& ConfigurationPrinter::
        getEndPaddingDirectPrint () const
        {
          return this->EndPaddingDirectPrint_.get ();
        }

        ConfigurationPrinter::EndPaddingDirectPrintType& ConfigurationPrinter::
        getEndPaddingDirectPrint ()
        {
          return this->EndPaddingDirectPrint_.get ();
        }

        void ConfigurationPrinter::
        setEndPaddingDirectPrint (const EndPaddingDirectPrintType& x)
        {
          this->EndPaddingDirectPrint_.set (x);
        }

        const ConfigurationPrinter::CharsetDirectPrintType& ConfigurationPrinter::
        getCharsetDirectPrint () const
        {
          return this->CharsetDirectPrint_.get ();
        }

        ConfigurationPrinter::CharsetDirectPrintType& ConfigurationPrinter::
        getCharsetDirectPrint ()
        {
          return this->CharsetDirectPrint_.get ();
        }

        void ConfigurationPrinter::
        setCharsetDirectPrint (const CharsetDirectPrintType& x)
        {
          this->CharsetDirectPrint_.set (x);
        }

        const ConfigurationPrinter::CharPaddingDirectPrintType& ConfigurationPrinter::
        getCharPaddingDirectPrint () const
        {
          return this->CharPaddingDirectPrint_.get ();
        }

        ConfigurationPrinter::CharPaddingDirectPrintType& ConfigurationPrinter::
        getCharPaddingDirectPrint ()
        {
          return this->CharPaddingDirectPrint_.get ();
        }

        void ConfigurationPrinter::
        setCharPaddingDirectPrint (const CharPaddingDirectPrintType& x)
        {
          this->CharPaddingDirectPrint_.set (x);
        }

        void ConfigurationPrinter::
        setCharPaddingDirectPrint (::std::auto_ptr< CharPaddingDirectPrintType > x)
        {
          this->CharPaddingDirectPrint_.set (x);
        }

        const ConfigurationPrinter::CharIndentationDirectPrintType& ConfigurationPrinter::
        getCharIndentationDirectPrint () const
        {
          return this->CharIndentationDirectPrint_.get ();
        }

        ConfigurationPrinter::CharIndentationDirectPrintType& ConfigurationPrinter::
        getCharIndentationDirectPrint ()
        {
          return this->CharIndentationDirectPrint_.get ();
        }

        void ConfigurationPrinter::
        setCharIndentationDirectPrint (const CharIndentationDirectPrintType& x)
        {
          this->CharIndentationDirectPrint_.set (x);
        }

        void ConfigurationPrinter::
        setCharIndentationDirectPrint (::std::auto_ptr< CharIndentationDirectPrintType > x)
        {
          this->CharIndentationDirectPrint_.set (x);
        }

        const ConfigurationPrinter::CutTypeType& ConfigurationPrinter::
        getCutType () const
        {
          return this->CutType_.get ();
        }

        ConfigurationPrinter::CutTypeType& ConfigurationPrinter::
        getCutType ()
        {
          return this->CutType_.get ();
        }

        void ConfigurationPrinter::
        setCutType (const CutTypeType& x)
        {
          this->CutType_.set (x);
        }

        void ConfigurationPrinter::
        setCutType (::std::auto_ptr< CutTypeType > x)
        {
          this->CutType_.set (x);
        }

        const ConfigurationPrinter::PrinterBackendTypeType& ConfigurationPrinter::
        getPrinterBackendType () const
        {
          return this->PrinterBackendType_.get ();
        }

        ConfigurationPrinter::PrinterBackendTypeType& ConfigurationPrinter::
        getPrinterBackendType ()
        {
          return this->PrinterBackendType_.get ();
        }

        void ConfigurationPrinter::
        setPrinterBackendType (const PrinterBackendTypeType& x)
        {
          this->PrinterBackendType_.set (x);
        }

        void ConfigurationPrinter::
        setPrinterBackendType (::std::auto_ptr< PrinterBackendTypeType > x)
        {
          this->PrinterBackendType_.set (x);
        }

        const ConfigurationPrinter::DirectPrintDeleteFilesType& ConfigurationPrinter::
        getDirectPrintDeleteFiles () const
        {
          return this->DirectPrintDeleteFiles_.get ();
        }

        ConfigurationPrinter::DirectPrintDeleteFilesType& ConfigurationPrinter::
        getDirectPrintDeleteFiles ()
        {
          return this->DirectPrintDeleteFiles_.get ();
        }

        void ConfigurationPrinter::
        setDirectPrintDeleteFiles (const DirectPrintDeleteFilesType& x)
        {
          this->DirectPrintDeleteFiles_.set (x);
        }

        const ConfigurationPrinter::GeneratePVReportInAllLanguagesType& ConfigurationPrinter::
        getGeneratePVReportInAllLanguages () const
        {
          return this->GeneratePVReportInAllLanguages_.get ();
        }

        ConfigurationPrinter::GeneratePVReportInAllLanguagesType& ConfigurationPrinter::
        getGeneratePVReportInAllLanguages ()
        {
          return this->GeneratePVReportInAllLanguages_.get ();
        }

        void ConfigurationPrinter::
        setGeneratePVReportInAllLanguages (const GeneratePVReportInAllLanguagesType& x)
        {
          this->GeneratePVReportInAllLanguages_.set (x);
        }

        const ConfigurationPrinter::CommandPrintingModeType& ConfigurationPrinter::
        getCommandPrintingMode () const
        {
          return this->CommandPrintingMode_.get ();
        }

        ConfigurationPrinter::CommandPrintingModeType& ConfigurationPrinter::
        getCommandPrintingMode ()
        {
          return this->CommandPrintingMode_.get ();
        }

        void ConfigurationPrinter::
        setCommandPrintingMode (const CommandPrintingModeType& x)
        {
          this->CommandPrintingMode_.set (x);
        }

        void ConfigurationPrinter::
        setCommandPrintingMode (::std::auto_ptr< CommandPrintingModeType > x)
        {
          this->CommandPrintingMode_.set (x);
        }

        const ConfigurationPrinter::StatusMonitorTimeOutType& ConfigurationPrinter::
        getStatusMonitorTimeOut () const
        {
          return this->StatusMonitorTimeOut_.get ();
        }

        ConfigurationPrinter::StatusMonitorTimeOutType& ConfigurationPrinter::
        getStatusMonitorTimeOut ()
        {
          return this->StatusMonitorTimeOut_.get ();
        }

        void ConfigurationPrinter::
        setStatusMonitorTimeOut (const StatusMonitorTimeOutType& x)
        {
          this->StatusMonitorTimeOut_.set (x);
        }

        const ConfigurationPrinter::StatusMonitorCancelType& ConfigurationPrinter::
        getStatusMonitorCancel () const
        {
          return this->StatusMonitorCancel_.get ();
        }

        ConfigurationPrinter::StatusMonitorCancelType& ConfigurationPrinter::
        getStatusMonitorCancel ()
        {
          return this->StatusMonitorCancel_.get ();
        }

        void ConfigurationPrinter::
        setStatusMonitorCancel (const StatusMonitorCancelType& x)
        {
          this->StatusMonitorCancel_.set (x);
        }

        const ConfigurationPrinter::DirectQrUseOptimizationType& ConfigurationPrinter::
        getDirectQrUseOptimization () const
        {
          return this->DirectQrUseOptimization_.get ();
        }

        ConfigurationPrinter::DirectQrUseOptimizationType& ConfigurationPrinter::
        getDirectQrUseOptimization ()
        {
          return this->DirectQrUseOptimization_.get ();
        }

        void ConfigurationPrinter::
        setDirectQrUseOptimization (const DirectQrUseOptimizationType& x)
        {
          this->DirectQrUseOptimization_.set (x);
        }

        const ConfigurationPrinter::DirectQrCommandHeaderType& ConfigurationPrinter::
        getDirectQrCommandHeader () const
        {
          return this->DirectQrCommandHeader_.get ();
        }

        ConfigurationPrinter::DirectQrCommandHeaderType& ConfigurationPrinter::
        getDirectQrCommandHeader ()
        {
          return this->DirectQrCommandHeader_.get ();
        }

        void ConfigurationPrinter::
        setDirectQrCommandHeader (const DirectQrCommandHeaderType& x)
        {
          this->DirectQrCommandHeader_.set (x);
        }

        void ConfigurationPrinter::
        setDirectQrCommandHeader (::std::auto_ptr< DirectQrCommandHeaderType > x)
        {
          this->DirectQrCommandHeader_.set (x);
        }

        const ConfigurationPrinter::DirectQrCommandFooterType& ConfigurationPrinter::
        getDirectQrCommandFooter () const
        {
          return this->DirectQrCommandFooter_.get ();
        }

        ConfigurationPrinter::DirectQrCommandFooterType& ConfigurationPrinter::
        getDirectQrCommandFooter ()
        {
          return this->DirectQrCommandFooter_.get ();
        }

        void ConfigurationPrinter::
        setDirectQrCommandFooter (const DirectQrCommandFooterType& x)
        {
          this->DirectQrCommandFooter_.set (x);
        }

        void ConfigurationPrinter::
        setDirectQrCommandFooter (::std::auto_ptr< DirectQrCommandFooterType > x)
        {
          this->DirectQrCommandFooter_.set (x);
        }

        const ConfigurationPrinter::ScreenPreviewWidthType& ConfigurationPrinter::
        getScreenPreviewWidth () const
        {
          return this->ScreenPreviewWidth_.get ();
        }

        ConfigurationPrinter::ScreenPreviewWidthType& ConfigurationPrinter::
        getScreenPreviewWidth ()
        {
          return this->ScreenPreviewWidth_.get ();
        }

        void ConfigurationPrinter::
        setScreenPreviewWidth (const ScreenPreviewWidthType& x)
        {
          this->ScreenPreviewWidth_.set (x);
        }

        const ConfigurationPrinter::ScreenPreviewResolutionFactorType& ConfigurationPrinter::
        getScreenPreviewResolutionFactor () const
        {
          return this->ScreenPreviewResolutionFactor_.get ();
        }

        ConfigurationPrinter::ScreenPreviewResolutionFactorType& ConfigurationPrinter::
        getScreenPreviewResolutionFactor ()
        {
          return this->ScreenPreviewResolutionFactor_.get ();
        }

        void ConfigurationPrinter::
        setScreenPreviewResolutionFactor (const ScreenPreviewResolutionFactorType& x)
        {
          this->ScreenPreviewResolutionFactor_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        // SaesCommonConfiguration
        //

        SaesCommonConfiguration::
        SaesCommonConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          ConfigurationElectionFilesPath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigurationPrinter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          OSConfigurationFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          MachineSecuritySchema_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LogConfigurationReader_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          BEIDConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SmartCardConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PCSCDConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesCommonConfiguration::
        SaesCommonConfiguration (const ConfigurationElectionFilesPathType& ConfigurationElectionFilesPath,
                                 const ConfigurationPrinterType& ConfigurationPrinter,
                                 const OSConfigurationFilesType& OSConfigurationFiles,
                                 const MachineSecuritySchemaType& MachineSecuritySchema,
                                 const LogConfigurationReaderType& LogConfigurationReader,
                                 const BEIDConfigurationType& BEIDConfiguration,
                                 const SmartCardConfigurationType& SmartCardConfiguration,
                                 const PCSCDConfigurationType& PCSCDConfiguration)
        : ::Smartmatic::ConfigurationTypes::Type (),
          ConfigurationElectionFilesPath_ (ConfigurationElectionFilesPath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigurationPrinter_ (ConfigurationPrinter, ::Smartmatic::ConfigurationTypes::Flags (), this),
          OSConfigurationFiles_ (OSConfigurationFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          MachineSecuritySchema_ (MachineSecuritySchema, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogConfigurationReader_ (LogConfigurationReader, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BEIDConfiguration_ (BEIDConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SmartCardConfiguration_ (SmartCardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PCSCDConfiguration_ (PCSCDConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesCommonConfiguration::
        SaesCommonConfiguration (::std::auto_ptr< ConfigurationElectionFilesPathType >& ConfigurationElectionFilesPath,
                                 ::std::auto_ptr< ConfigurationPrinterType >& ConfigurationPrinter,
                                 ::std::auto_ptr< OSConfigurationFilesType >& OSConfigurationFiles,
                                 ::std::auto_ptr< MachineSecuritySchemaType >& MachineSecuritySchema,
                                 ::std::auto_ptr< LogConfigurationReaderType >& LogConfigurationReader,
                                 ::std::auto_ptr< BEIDConfigurationType >& BEIDConfiguration,
                                 ::std::auto_ptr< SmartCardConfigurationType >& SmartCardConfiguration,
                                 ::std::auto_ptr< PCSCDConfigurationType >& PCSCDConfiguration)
        : ::Smartmatic::ConfigurationTypes::Type (),
          ConfigurationElectionFilesPath_ (ConfigurationElectionFilesPath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigurationPrinter_ (ConfigurationPrinter, ::Smartmatic::ConfigurationTypes::Flags (), this),
          OSConfigurationFiles_ (OSConfigurationFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          MachineSecuritySchema_ (MachineSecuritySchema, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogConfigurationReader_ (LogConfigurationReader, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BEIDConfiguration_ (BEIDConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SmartCardConfiguration_ (SmartCardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PCSCDConfiguration_ (PCSCDConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesCommonConfiguration::
        SaesCommonConfiguration (const SaesCommonConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          ConfigurationElectionFilesPath_ (x.ConfigurationElectionFilesPath_, f, this),
          ConfigurationPrinter_ (x.ConfigurationPrinter_, f, this),
          OSConfigurationFiles_ (x.OSConfigurationFiles_, f, this),
          MachineSecuritySchema_ (x.MachineSecuritySchema_, f, this),
          LogConfigurationReader_ (x.LogConfigurationReader_, f, this),
          BEIDConfiguration_ (x.BEIDConfiguration_, f, this),
          SmartCardConfiguration_ (x.SmartCardConfiguration_, f, this),
          PCSCDConfiguration_ (x.PCSCDConfiguration_, f, this)
        {
        }

        SaesCommonConfiguration::
        SaesCommonConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          ConfigurationElectionFilesPath_ (f, this),
          ConfigurationPrinter_ (f, this),
          OSConfigurationFiles_ (f, this),
          MachineSecuritySchema_ (f, this),
          LogConfigurationReader_ (f, this),
          BEIDConfiguration_ (f, this),
          SmartCardConfiguration_ (f, this),
          PCSCDConfiguration_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SaesCommonConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // ConfigurationElectionFilesPath
            //
            if (n.name () == "ConfigurationElectionFilesPath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ConfigurationElectionFilesPathType > r (
                ConfigurationElectionFilesPathTraits::create (i, f, this));

              if (!ConfigurationElectionFilesPath_.present ())
              {
                this->ConfigurationElectionFilesPath_.set (r);
                continue;
              }
            }

            // ConfigurationPrinter
            //
            if (n.name () == "ConfigurationPrinter" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ConfigurationPrinterType > r (
                ConfigurationPrinterTraits::create (i, f, this));

              if (!ConfigurationPrinter_.present ())
              {
                this->ConfigurationPrinter_.set (r);
                continue;
              }
            }

            // OSConfigurationFiles
            //
            if (n.name () == "OSConfigurationFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< OSConfigurationFilesType > r (
                OSConfigurationFilesTraits::create (i, f, this));

              if (!OSConfigurationFiles_.present ())
              {
                this->OSConfigurationFiles_.set (r);
                continue;
              }
            }

            // MachineSecuritySchema
            //
            if (n.name () == "MachineSecuritySchema" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< MachineSecuritySchemaType > r (
                MachineSecuritySchemaTraits::create (i, f, this));

              if (!MachineSecuritySchema_.present ())
              {
                this->MachineSecuritySchema_.set (r);
                continue;
              }
            }

            // LogConfigurationReader
            //
            if (n.name () == "LogConfigurationReader" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LogConfigurationReaderType > r (
                LogConfigurationReaderTraits::create (i, f, this));

              if (!LogConfigurationReader_.present ())
              {
                this->LogConfigurationReader_.set (r);
                continue;
              }
            }

            // BEIDConfiguration
            //
            if (n.name () == "BEIDConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< BEIDConfigurationType > r (
                BEIDConfigurationTraits::create (i, f, this));

              if (!BEIDConfiguration_.present ())
              {
                this->BEIDConfiguration_.set (r);
                continue;
              }
            }

            // SmartCardConfiguration
            //
            if (n.name () == "SmartCardConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SmartCardConfigurationType > r (
                SmartCardConfigurationTraits::create (i, f, this));

              if (!SmartCardConfiguration_.present ())
              {
                this->SmartCardConfiguration_.set (r);
                continue;
              }
            }

            // PCSCDConfiguration
            //
            if (n.name () == "PCSCDConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PCSCDConfigurationType > r (
                PCSCDConfigurationTraits::create (i, f, this));

              if (!PCSCDConfiguration_.present ())
              {
                this->PCSCDConfiguration_.set (r);
                continue;
              }
            }

            break;
          }

          if (!ConfigurationElectionFilesPath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConfigurationElectionFilesPath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ConfigurationPrinter_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConfigurationPrinter",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!OSConfigurationFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OSConfigurationFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!MachineSecuritySchema_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MachineSecuritySchema",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LogConfigurationReader_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogConfigurationReader",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!BEIDConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BEIDConfiguration",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SmartCardConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SmartCardConfiguration",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PCSCDConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PCSCDConfiguration",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        SaesCommonConfiguration* SaesCommonConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SaesCommonConfiguration (*this, f, c);
        }

        SaesCommonConfiguration::
        ~SaesCommonConfiguration ()
        {
        }

        bool
        operator== (const SaesCommonConfiguration& x, const SaesCommonConfiguration& y)
        {
          if (!(x.getConfigurationElectionFilesPath () == y.getConfigurationElectionFilesPath ()))
            return false;

          if (!(x.getConfigurationPrinter () == y.getConfigurationPrinter ()))
            return false;

          if (!(x.getOSConfigurationFiles () == y.getOSConfigurationFiles ()))
            return false;

          if (!(x.getMachineSecuritySchema () == y.getMachineSecuritySchema ()))
            return false;

          if (!(x.getLogConfigurationReader () == y.getLogConfigurationReader ()))
            return false;

          if (!(x.getBEIDConfiguration () == y.getBEIDConfiguration ()))
            return false;

          if (!(x.getSmartCardConfiguration () == y.getSmartCardConfiguration ()))
            return false;

          if (!(x.getPCSCDConfiguration () == y.getPCSCDConfiguration ()))
            return false;

          return true;
        }

        bool
        operator!= (const SaesCommonConfiguration& x, const SaesCommonConfiguration& y)
        {
          return !(x == y);
        }

        // OSConfigurationFiles
        //

        OSConfigurationFiles::
        OSConfigurationFiles ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          IdHardwareFileFullPath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          MasterDeviceFileFullPath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          EventDeviceFileFullPath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LineDeviceSeparator_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          RemoveEventDeviceFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SerialLocationFileFullPath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LineSerialLocationSeparator_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ScriptRunSmartCard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ScriptRunPrintBlank_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ScriptRunDSortVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SyncFileSignalUSER1_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SyncFileSignalUSER2_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        OSConfigurationFiles::
        OSConfigurationFiles (const IdHardwareFileFullPathType& IdHardwareFileFullPath,
                              const MasterDeviceFileFullPathType& MasterDeviceFileFullPath,
                              const EventDeviceFileFullPathType& EventDeviceFileFullPath,
                              const LineDeviceSeparatorType& LineDeviceSeparator,
                              const RemoveEventDeviceFileType& RemoveEventDeviceFile,
                              const SerialLocationFileFullPathType& SerialLocationFileFullPath,
                              const LineSerialLocationSeparatorType& LineSerialLocationSeparator,
                              const ScriptRunSmartCardType& ScriptRunSmartCard,
                              const ScriptRunPrintBlankType& ScriptRunPrintBlank,
                              const ScriptRunDSortVoteType& ScriptRunDSortVote,
                              const SyncFileSignalUSER1Type& SyncFileSignalUSER1,
                              const SyncFileSignalUSER2Type& SyncFileSignalUSER2)
        : ::Smartmatic::ConfigurationTypes::Type (),
          IdHardwareFileFullPath_ (IdHardwareFileFullPath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          MasterDeviceFileFullPath_ (MasterDeviceFileFullPath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          EventDeviceFileFullPath_ (EventDeviceFileFullPath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LineDeviceSeparator_ (LineDeviceSeparator, ::Smartmatic::ConfigurationTypes::Flags (), this),
          RemoveEventDeviceFile_ (RemoveEventDeviceFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SerialLocationFileFullPath_ (SerialLocationFileFullPath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LineSerialLocationSeparator_ (LineSerialLocationSeparator, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ScriptRunSmartCard_ (ScriptRunSmartCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ScriptRunPrintBlank_ (ScriptRunPrintBlank, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ScriptRunDSortVote_ (ScriptRunDSortVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SyncFileSignalUSER1_ (SyncFileSignalUSER1, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SyncFileSignalUSER2_ (SyncFileSignalUSER2, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        OSConfigurationFiles::
        OSConfigurationFiles (const OSConfigurationFiles& x,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          IdHardwareFileFullPath_ (x.IdHardwareFileFullPath_, f, this),
          MasterDeviceFileFullPath_ (x.MasterDeviceFileFullPath_, f, this),
          EventDeviceFileFullPath_ (x.EventDeviceFileFullPath_, f, this),
          LineDeviceSeparator_ (x.LineDeviceSeparator_, f, this),
          RemoveEventDeviceFile_ (x.RemoveEventDeviceFile_, f, this),
          SerialLocationFileFullPath_ (x.SerialLocationFileFullPath_, f, this),
          LineSerialLocationSeparator_ (x.LineSerialLocationSeparator_, f, this),
          ScriptRunSmartCard_ (x.ScriptRunSmartCard_, f, this),
          ScriptRunPrintBlank_ (x.ScriptRunPrintBlank_, f, this),
          ScriptRunDSortVote_ (x.ScriptRunDSortVote_, f, this),
          SyncFileSignalUSER1_ (x.SyncFileSignalUSER1_, f, this),
          SyncFileSignalUSER2_ (x.SyncFileSignalUSER2_, f, this)
        {
        }

        OSConfigurationFiles::
        OSConfigurationFiles (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          IdHardwareFileFullPath_ (f, this),
          MasterDeviceFileFullPath_ (f, this),
          EventDeviceFileFullPath_ (f, this),
          LineDeviceSeparator_ (f, this),
          RemoveEventDeviceFile_ (f, this),
          SerialLocationFileFullPath_ (f, this),
          LineSerialLocationSeparator_ (f, this),
          ScriptRunSmartCard_ (f, this),
          ScriptRunPrintBlank_ (f, this),
          ScriptRunDSortVote_ (f, this),
          SyncFileSignalUSER1_ (f, this),
          SyncFileSignalUSER2_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void OSConfigurationFiles::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // IdHardwareFileFullPath
            //
            if (n.name () == "IdHardwareFileFullPath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< IdHardwareFileFullPathType > r (
                IdHardwareFileFullPathTraits::create (i, f, this));

              if (!IdHardwareFileFullPath_.present ())
              {
                this->IdHardwareFileFullPath_.set (r);
                continue;
              }
            }

            // MasterDeviceFileFullPath
            //
            if (n.name () == "MasterDeviceFileFullPath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< MasterDeviceFileFullPathType > r (
                MasterDeviceFileFullPathTraits::create (i, f, this));

              if (!MasterDeviceFileFullPath_.present ())
              {
                this->MasterDeviceFileFullPath_.set (r);
                continue;
              }
            }

            // EventDeviceFileFullPath
            //
            if (n.name () == "EventDeviceFileFullPath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< EventDeviceFileFullPathType > r (
                EventDeviceFileFullPathTraits::create (i, f, this));

              if (!EventDeviceFileFullPath_.present ())
              {
                this->EventDeviceFileFullPath_.set (r);
                continue;
              }
            }

            // LineDeviceSeparator
            //
            if (n.name () == "LineDeviceSeparator" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LineDeviceSeparatorType > r (
                LineDeviceSeparatorTraits::create (i, f, this));

              if (!LineDeviceSeparator_.present ())
              {
                this->LineDeviceSeparator_.set (r);
                continue;
              }
            }

            // RemoveEventDeviceFile
            //
            if (n.name () == "RemoveEventDeviceFile" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!RemoveEventDeviceFile_.present ())
              {
                this->RemoveEventDeviceFile_.set (RemoveEventDeviceFileTraits::create (i, f, this));
                continue;
              }
            }

            // SerialLocationFileFullPath
            //
            if (n.name () == "SerialLocationFileFullPath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SerialLocationFileFullPathType > r (
                SerialLocationFileFullPathTraits::create (i, f, this));

              if (!SerialLocationFileFullPath_.present ())
              {
                this->SerialLocationFileFullPath_.set (r);
                continue;
              }
            }

            // LineSerialLocationSeparator
            //
            if (n.name () == "LineSerialLocationSeparator" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LineSerialLocationSeparatorType > r (
                LineSerialLocationSeparatorTraits::create (i, f, this));

              if (!LineSerialLocationSeparator_.present ())
              {
                this->LineSerialLocationSeparator_.set (r);
                continue;
              }
            }

            // ScriptRunSmartCard
            //
            if (n.name () == "ScriptRunSmartCard" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ScriptRunSmartCardType > r (
                ScriptRunSmartCardTraits::create (i, f, this));

              if (!ScriptRunSmartCard_.present ())
              {
                this->ScriptRunSmartCard_.set (r);
                continue;
              }
            }

            // ScriptRunPrintBlank
            //
            if (n.name () == "ScriptRunPrintBlank" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ScriptRunPrintBlankType > r (
                ScriptRunPrintBlankTraits::create (i, f, this));

              if (!ScriptRunPrintBlank_.present ())
              {
                this->ScriptRunPrintBlank_.set (r);
                continue;
              }
            }

            // ScriptRunDSortVote
            //
            if (n.name () == "ScriptRunDSortVote" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ScriptRunDSortVoteType > r (
                ScriptRunDSortVoteTraits::create (i, f, this));

              if (!ScriptRunDSortVote_.present ())
              {
                this->ScriptRunDSortVote_.set (r);
                continue;
              }
            }

            // SyncFileSignalUSER1
            //
            if (n.name () == "SyncFileSignalUSER1" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SyncFileSignalUSER1Type > r (
                SyncFileSignalUSER1Traits::create (i, f, this));

              if (!SyncFileSignalUSER1_.present ())
              {
                this->SyncFileSignalUSER1_.set (r);
                continue;
              }
            }

            // SyncFileSignalUSER2
            //
            if (n.name () == "SyncFileSignalUSER2" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SyncFileSignalUSER2Type > r (
                SyncFileSignalUSER2Traits::create (i, f, this));

              if (!SyncFileSignalUSER2_.present ())
              {
                this->SyncFileSignalUSER2_.set (r);
                continue;
              }
            }

            break;
          }

          if (!IdHardwareFileFullPath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IdHardwareFileFullPath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!MasterDeviceFileFullPath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MasterDeviceFileFullPath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!EventDeviceFileFullPath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EventDeviceFileFullPath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LineDeviceSeparator_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LineDeviceSeparator",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!RemoveEventDeviceFile_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RemoveEventDeviceFile",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SerialLocationFileFullPath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SerialLocationFileFullPath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LineSerialLocationSeparator_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LineSerialLocationSeparator",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ScriptRunSmartCard_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ScriptRunSmartCard",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ScriptRunPrintBlank_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ScriptRunPrintBlank",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ScriptRunDSortVote_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ScriptRunDSortVote",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SyncFileSignalUSER1_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SyncFileSignalUSER1",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SyncFileSignalUSER2_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SyncFileSignalUSER2",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        OSConfigurationFiles* OSConfigurationFiles::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class OSConfigurationFiles (*this, f, c);
        }

        OSConfigurationFiles::
        ~OSConfigurationFiles ()
        {
        }

        bool
        operator== (const OSConfigurationFiles& x, const OSConfigurationFiles& y)
        {
          if (!(x.getIdHardwareFileFullPath () == y.getIdHardwareFileFullPath ()))
            return false;

          if (!(x.getMasterDeviceFileFullPath () == y.getMasterDeviceFileFullPath ()))
            return false;

          if (!(x.getEventDeviceFileFullPath () == y.getEventDeviceFileFullPath ()))
            return false;

          if (!(x.getLineDeviceSeparator () == y.getLineDeviceSeparator ()))
            return false;

          if (!(x.getRemoveEventDeviceFile () == y.getRemoveEventDeviceFile ()))
            return false;

          if (!(x.getSerialLocationFileFullPath () == y.getSerialLocationFileFullPath ()))
            return false;

          if (!(x.getLineSerialLocationSeparator () == y.getLineSerialLocationSeparator ()))
            return false;

          if (!(x.getScriptRunSmartCard () == y.getScriptRunSmartCard ()))
            return false;

          if (!(x.getScriptRunPrintBlank () == y.getScriptRunPrintBlank ()))
            return false;

          if (!(x.getScriptRunDSortVote () == y.getScriptRunDSortVote ()))
            return false;

          if (!(x.getSyncFileSignalUSER1 () == y.getSyncFileSignalUSER1 ()))
            return false;

          if (!(x.getSyncFileSignalUSER2 () == y.getSyncFileSignalUSER2 ()))
            return false;

          return true;
        }

        bool
        operator!= (const OSConfigurationFiles& x, const OSConfigurationFiles& y)
        {
          return !(x == y);
        }

        // LogConfigurationReader
        //

        LogConfigurationReader::
        LogConfigurationReader ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          LogErrorReader_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LogAuditReader_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        LogConfigurationReader::
        LogConfigurationReader (const LogErrorReaderType& LogErrorReader,
                                const LogAuditReaderType& LogAuditReader)
        : ::Smartmatic::ConfigurationTypes::Type (),
          LogErrorReader_ (LogErrorReader, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogAuditReader_ (LogAuditReader, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        LogConfigurationReader::
        LogConfigurationReader (const LogConfigurationReader& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          LogErrorReader_ (x.LogErrorReader_, f, this),
          LogAuditReader_ (x.LogAuditReader_, f, this)
        {
        }

        LogConfigurationReader::
        LogConfigurationReader (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          LogErrorReader_ (f, this),
          LogAuditReader_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void LogConfigurationReader::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // LogErrorReader
            //
            if (n.name () == "LogErrorReader" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LogErrorReaderType > r (
                LogErrorReaderTraits::create (i, f, this));

              if (!LogErrorReader_.present ())
              {
                this->LogErrorReader_.set (r);
                continue;
              }
            }

            // LogAuditReader
            //
            if (n.name () == "LogAuditReader" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LogAuditReaderType > r (
                LogAuditReaderTraits::create (i, f, this));

              if (!LogAuditReader_.present ())
              {
                this->LogAuditReader_.set (r);
                continue;
              }
            }

            break;
          }

          if (!LogErrorReader_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogErrorReader",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LogAuditReader_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogAuditReader",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        LogConfigurationReader* LogConfigurationReader::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class LogConfigurationReader (*this, f, c);
        }

        LogConfigurationReader::
        ~LogConfigurationReader ()
        {
        }

        bool
        operator== (const LogConfigurationReader& x, const LogConfigurationReader& y)
        {
          if (!(x.getLogErrorReader () == y.getLogErrorReader ()))
            return false;

          if (!(x.getLogAuditReader () == y.getLogAuditReader ()))
            return false;

          return true;
        }

        bool
        operator!= (const LogConfigurationReader& x, const LogConfigurationReader& y)
        {
          return !(x == y);
        }

        // BEIDConfiguration
        //

        BEIDConfiguration::
        BEIDConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          UseCallbackEvent_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BEIDConfiguration::
        BEIDConfiguration (const UseCallbackEventType& UseCallbackEvent)
        : ::Smartmatic::ConfigurationTypes::Type (),
          UseCallbackEvent_ (UseCallbackEvent, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BEIDConfiguration::
        BEIDConfiguration (const BEIDConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          UseCallbackEvent_ (x.UseCallbackEvent_, f, this)
        {
        }

        BEIDConfiguration::
        BEIDConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          UseCallbackEvent_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void BEIDConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // UseCallbackEvent
            //
            if (n.name () == "UseCallbackEvent" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!UseCallbackEvent_.present ())
              {
                this->UseCallbackEvent_.set (UseCallbackEventTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!UseCallbackEvent_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UseCallbackEvent",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        BEIDConfiguration* BEIDConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BEIDConfiguration (*this, f, c);
        }

        BEIDConfiguration::
        ~BEIDConfiguration ()
        {
        }

        bool
        operator== (const BEIDConfiguration& x, const BEIDConfiguration& y)
        {
          if (!(x.getUseCallbackEvent () == y.getUseCallbackEvent ()))
            return false;

          return true;
        }

        bool
        operator!= (const BEIDConfiguration& x, const BEIDConfiguration& y)
        {
          return !(x == y);
        }

        // SmartCardConfiguration
        //

        SmartCardConfiguration::
        SmartCardConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          AppletAID_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          GlobalPIN_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DataPIN_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PlatformMode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecureChannelEnabled_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityKeySetVersion_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityKeyIndex_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityChannelProtocol_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityChannelProtocolImpl_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityLevel_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityKeyDerivation_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          NivelTest_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SuspendResumeEachVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SuspendResumeOnErrorCondition_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DelayAfterSuspend_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DelayAfterOn_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ShowMessagePowerCycle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TimeOutMessagePowerCycle_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PowerCycleTries_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ForceRestartPCSCD_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          WaitStopPCSCD_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          WaitStartPCSCD_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ShowMessageRestartPCSCD_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ReadRetry_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          FatalErrorCodes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          UseConnectedSmartcardReader_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConnectedReaderRenewContext_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConnectedSmartcardPCSCCheckCard_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConnectedSmartcardConnectToCheckPresence_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SmartCardConfiguration::
        SmartCardConfiguration (const AppletAIDType& AppletAID,
                                const GlobalPINType& GlobalPIN,
                                const DataPINType& DataPIN,
                                const PlatformModeType& PlatformMode,
                                const SecureChannelEnabledType& SecureChannelEnabled,
                                const SecurityKeySetVersionType& SecurityKeySetVersion,
                                const SecurityKeyIndexType& SecurityKeyIndex,
                                const SecurityChannelProtocolType& SecurityChannelProtocol,
                                const SecurityChannelProtocolImplType& SecurityChannelProtocolImpl,
                                const SecurityLevelType& SecurityLevel,
                                const SecurityKeyDerivationType& SecurityKeyDerivation,
                                const SuspendResumeEachVoteType& SuspendResumeEachVote,
                                const SuspendResumeOnErrorConditionType& SuspendResumeOnErrorCondition,
                                const DelayAfterSuspendType& DelayAfterSuspend,
                                const DelayAfterOnType& DelayAfterOn,
                                const ShowMessagePowerCycleType& ShowMessagePowerCycle,
                                const TimeOutMessagePowerCycleType& TimeOutMessagePowerCycle,
                                const PowerCycleTriesType& PowerCycleTries,
                                const ForceRestartPCSCDType& ForceRestartPCSCD,
                                const WaitStopPCSCDType& WaitStopPCSCD,
                                const WaitStartPCSCDType& WaitStartPCSCD,
                                const ShowMessageRestartPCSCDType& ShowMessageRestartPCSCD,
                                const ReadRetryType& ReadRetry,
                                const UseConnectedSmartcardReaderType& UseConnectedSmartcardReader,
                                const ConnectedReaderRenewContextType& ConnectedReaderRenewContext,
                                const ConnectedSmartcardPCSCCheckCardType& ConnectedSmartcardPCSCCheckCard,
                                const ConnectedSmartcardConnectToCheckPresenceType& ConnectedSmartcardConnectToCheckPresence)
        : ::Smartmatic::ConfigurationTypes::Type (),
          AppletAID_ (AppletAID, ::Smartmatic::ConfigurationTypes::Flags (), this),
          GlobalPIN_ (GlobalPIN, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DataPIN_ (DataPIN, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PlatformMode_ (PlatformMode, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecureChannelEnabled_ (SecureChannelEnabled, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityKeySetVersion_ (SecurityKeySetVersion, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityKeyIndex_ (SecurityKeyIndex, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityChannelProtocol_ (SecurityChannelProtocol, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityChannelProtocolImpl_ (SecurityChannelProtocolImpl, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityLevel_ (SecurityLevel, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecurityKeyDerivation_ (SecurityKeyDerivation, ::Smartmatic::ConfigurationTypes::Flags (), this),
          NivelTest_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SuspendResumeEachVote_ (SuspendResumeEachVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SuspendResumeOnErrorCondition_ (SuspendResumeOnErrorCondition, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DelayAfterSuspend_ (DelayAfterSuspend, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DelayAfterOn_ (DelayAfterOn, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ShowMessagePowerCycle_ (ShowMessagePowerCycle, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TimeOutMessagePowerCycle_ (TimeOutMessagePowerCycle, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PowerCycleTries_ (PowerCycleTries, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ForceRestartPCSCD_ (ForceRestartPCSCD, ::Smartmatic::ConfigurationTypes::Flags (), this),
          WaitStopPCSCD_ (WaitStopPCSCD, ::Smartmatic::ConfigurationTypes::Flags (), this),
          WaitStartPCSCD_ (WaitStartPCSCD, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ShowMessageRestartPCSCD_ (ShowMessageRestartPCSCD, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ReadRetry_ (ReadRetry, ::Smartmatic::ConfigurationTypes::Flags (), this),
          FatalErrorCodes_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          UseConnectedSmartcardReader_ (UseConnectedSmartcardReader, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConnectedReaderRenewContext_ (ConnectedReaderRenewContext, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConnectedSmartcardPCSCCheckCard_ (ConnectedSmartcardPCSCCheckCard, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConnectedSmartcardConnectToCheckPresence_ (ConnectedSmartcardConnectToCheckPresence, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SmartCardConfiguration::
        SmartCardConfiguration (const SmartCardConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          AppletAID_ (x.AppletAID_, f, this),
          GlobalPIN_ (x.GlobalPIN_, f, this),
          DataPIN_ (x.DataPIN_, f, this),
          PlatformMode_ (x.PlatformMode_, f, this),
          SecureChannelEnabled_ (x.SecureChannelEnabled_, f, this),
          SecurityKeySetVersion_ (x.SecurityKeySetVersion_, f, this),
          SecurityKeyIndex_ (x.SecurityKeyIndex_, f, this),
          SecurityChannelProtocol_ (x.SecurityChannelProtocol_, f, this),
          SecurityChannelProtocolImpl_ (x.SecurityChannelProtocolImpl_, f, this),
          SecurityLevel_ (x.SecurityLevel_, f, this),
          SecurityKeyDerivation_ (x.SecurityKeyDerivation_, f, this),
          NivelTest_ (x.NivelTest_, f, this),
          SuspendResumeEachVote_ (x.SuspendResumeEachVote_, f, this),
          SuspendResumeOnErrorCondition_ (x.SuspendResumeOnErrorCondition_, f, this),
          DelayAfterSuspend_ (x.DelayAfterSuspend_, f, this),
          DelayAfterOn_ (x.DelayAfterOn_, f, this),
          ShowMessagePowerCycle_ (x.ShowMessagePowerCycle_, f, this),
          TimeOutMessagePowerCycle_ (x.TimeOutMessagePowerCycle_, f, this),
          PowerCycleTries_ (x.PowerCycleTries_, f, this),
          ForceRestartPCSCD_ (x.ForceRestartPCSCD_, f, this),
          WaitStopPCSCD_ (x.WaitStopPCSCD_, f, this),
          WaitStartPCSCD_ (x.WaitStartPCSCD_, f, this),
          ShowMessageRestartPCSCD_ (x.ShowMessageRestartPCSCD_, f, this),
          ReadRetry_ (x.ReadRetry_, f, this),
          FatalErrorCodes_ (x.FatalErrorCodes_, f, this),
          UseConnectedSmartcardReader_ (x.UseConnectedSmartcardReader_, f, this),
          ConnectedReaderRenewContext_ (x.ConnectedReaderRenewContext_, f, this),
          ConnectedSmartcardPCSCCheckCard_ (x.ConnectedSmartcardPCSCCheckCard_, f, this),
          ConnectedSmartcardConnectToCheckPresence_ (x.ConnectedSmartcardConnectToCheckPresence_, f, this)
        {
        }

        SmartCardConfiguration::
        SmartCardConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          AppletAID_ (f, this),
          GlobalPIN_ (f, this),
          DataPIN_ (f, this),
          PlatformMode_ (f, this),
          SecureChannelEnabled_ (f, this),
          SecurityKeySetVersion_ (f, this),
          SecurityKeyIndex_ (f, this),
          SecurityChannelProtocol_ (f, this),
          SecurityChannelProtocolImpl_ (f, this),
          SecurityLevel_ (f, this),
          SecurityKeyDerivation_ (f, this),
          NivelTest_ (f, this),
          SuspendResumeEachVote_ (f, this),
          SuspendResumeOnErrorCondition_ (f, this),
          DelayAfterSuspend_ (f, this),
          DelayAfterOn_ (f, this),
          ShowMessagePowerCycle_ (f, this),
          TimeOutMessagePowerCycle_ (f, this),
          PowerCycleTries_ (f, this),
          ForceRestartPCSCD_ (f, this),
          WaitStopPCSCD_ (f, this),
          WaitStartPCSCD_ (f, this),
          ShowMessageRestartPCSCD_ (f, this),
          ReadRetry_ (f, this),
          FatalErrorCodes_ (f, this),
          UseConnectedSmartcardReader_ (f, this),
          ConnectedReaderRenewContext_ (f, this),
          ConnectedSmartcardPCSCCheckCard_ (f, this),
          ConnectedSmartcardConnectToCheckPresence_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void SmartCardConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // AppletAID
            //
            if (n.name () == "AppletAID" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< AppletAIDType > r (
                AppletAIDTraits::create (i, f, this));

              if (!AppletAID_.present ())
              {
                this->AppletAID_.set (r);
                continue;
              }
            }

            // GlobalPIN
            //
            if (n.name () == "GlobalPIN" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< GlobalPINType > r (
                GlobalPINTraits::create (i, f, this));

              if (!GlobalPIN_.present ())
              {
                this->GlobalPIN_.set (r);
                continue;
              }
            }

            // DataPIN
            //
            if (n.name () == "DataPIN" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DataPINType > r (
                DataPINTraits::create (i, f, this));

              if (!DataPIN_.present ())
              {
                this->DataPIN_.set (r);
                continue;
              }
            }

            // PlatformMode
            //
            if (n.name () == "PlatformMode" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PlatformModeType > r (
                PlatformModeTraits::create (i, f, this));

              if (!PlatformMode_.present ())
              {
                this->PlatformMode_.set (r);
                continue;
              }
            }

            // SecureChannelEnabled
            //
            if (n.name () == "SecureChannelEnabled" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SecureChannelEnabled_.present ())
              {
                this->SecureChannelEnabled_.set (SecureChannelEnabledTraits::create (i, f, this));
                continue;
              }
            }

            // SecurityKeySetVersion
            //
            if (n.name () == "SecurityKeySetVersion" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SecurityKeySetVersion_.present ())
              {
                this->SecurityKeySetVersion_.set (SecurityKeySetVersionTraits::create (i, f, this));
                continue;
              }
            }

            // SecurityKeyIndex
            //
            if (n.name () == "SecurityKeyIndex" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SecurityKeyIndex_.present ())
              {
                this->SecurityKeyIndex_.set (SecurityKeyIndexTraits::create (i, f, this));
                continue;
              }
            }

            // SecurityChannelProtocol
            //
            if (n.name () == "SecurityChannelProtocol" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SecurityChannelProtocolType > r (
                SecurityChannelProtocolTraits::create (i, f, this));

              if (!SecurityChannelProtocol_.present ())
              {
                this->SecurityChannelProtocol_.set (r);
                continue;
              }
            }

            // SecurityChannelProtocolImpl
            //
            if (n.name () == "SecurityChannelProtocolImpl" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SecurityChannelProtocolImplType > r (
                SecurityChannelProtocolImplTraits::create (i, f, this));

              if (!SecurityChannelProtocolImpl_.present ())
              {
                this->SecurityChannelProtocolImpl_.set (r);
                continue;
              }
            }

            // SecurityLevel
            //
            if (n.name () == "SecurityLevel" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SecurityLevelType > r (
                SecurityLevelTraits::create (i, f, this));

              if (!SecurityLevel_.present ())
              {
                this->SecurityLevel_.set (r);
                continue;
              }
            }

            // SecurityKeyDerivation
            //
            if (n.name () == "SecurityKeyDerivation" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SecurityKeyDerivationType > r (
                SecurityKeyDerivationTraits::create (i, f, this));

              if (!SecurityKeyDerivation_.present ())
              {
                this->SecurityKeyDerivation_.set (r);
                continue;
              }
            }

            // NivelTest
            //
            if (n.name () == "NivelTest" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< NivelTestType > r (
                NivelTestTraits::create (i, f, this));

              this->NivelTest_.push_back (r);
              continue;
            }

            // SuspendResumeEachVote
            //
            if (n.name () == "SuspendResumeEachVote" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SuspendResumeEachVote_.present ())
              {
                this->SuspendResumeEachVote_.set (SuspendResumeEachVoteTraits::create (i, f, this));
                continue;
              }
            }

            // SuspendResumeOnErrorCondition
            //
            if (n.name () == "SuspendResumeOnErrorCondition" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SuspendResumeOnErrorCondition_.present ())
              {
                this->SuspendResumeOnErrorCondition_.set (SuspendResumeOnErrorConditionTraits::create (i, f, this));
                continue;
              }
            }

            // DelayAfterSuspend
            //
            if (n.name () == "DelayAfterSuspend" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!DelayAfterSuspend_.present ())
              {
                this->DelayAfterSuspend_.set (DelayAfterSuspendTraits::create (i, f, this));
                continue;
              }
            }

            // DelayAfterOn
            //
            if (n.name () == "DelayAfterOn" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!DelayAfterOn_.present ())
              {
                this->DelayAfterOn_.set (DelayAfterOnTraits::create (i, f, this));
                continue;
              }
            }

            // ShowMessagePowerCycle
            //
            if (n.name () == "ShowMessagePowerCycle" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ShowMessagePowerCycle_.present ())
              {
                this->ShowMessagePowerCycle_.set (ShowMessagePowerCycleTraits::create (i, f, this));
                continue;
              }
            }

            // TimeOutMessagePowerCycle
            //
            if (n.name () == "TimeOutMessagePowerCycle" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!TimeOutMessagePowerCycle_.present ())
              {
                this->TimeOutMessagePowerCycle_.set (TimeOutMessagePowerCycleTraits::create (i, f, this));
                continue;
              }
            }

            // PowerCycleTries
            //
            if (n.name () == "PowerCycleTries" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!PowerCycleTries_.present ())
              {
                this->PowerCycleTries_.set (PowerCycleTriesTraits::create (i, f, this));
                continue;
              }
            }

            // ForceRestartPCSCD
            //
            if (n.name () == "ForceRestartPCSCD" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ForceRestartPCSCD_.present ())
              {
                this->ForceRestartPCSCD_.set (ForceRestartPCSCDTraits::create (i, f, this));
                continue;
              }
            }

            // WaitStopPCSCD
            //
            if (n.name () == "WaitStopPCSCD" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!WaitStopPCSCD_.present ())
              {
                this->WaitStopPCSCD_.set (WaitStopPCSCDTraits::create (i, f, this));
                continue;
              }
            }

            // WaitStartPCSCD
            //
            if (n.name () == "WaitStartPCSCD" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!WaitStartPCSCD_.present ())
              {
                this->WaitStartPCSCD_.set (WaitStartPCSCDTraits::create (i, f, this));
                continue;
              }
            }

            // ShowMessageRestartPCSCD
            //
            if (n.name () == "ShowMessageRestartPCSCD" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ShowMessageRestartPCSCD_.present ())
              {
                this->ShowMessageRestartPCSCD_.set (ShowMessageRestartPCSCDTraits::create (i, f, this));
                continue;
              }
            }

            // ReadRetry
            //
            if (n.name () == "ReadRetry" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ReadRetry_.present ())
              {
                this->ReadRetry_.set (ReadRetryTraits::create (i, f, this));
                continue;
              }
            }

            // FatalErrorCodes
            //
            if (n.name () == "FatalErrorCodes" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< FatalErrorCodesType > r (
                FatalErrorCodesTraits::create (i, f, this));

              this->FatalErrorCodes_.push_back (r);
              continue;
            }

            break;
          }

          if (!AppletAID_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AppletAID",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!GlobalPIN_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "GlobalPIN",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DataPIN_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DataPIN",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PlatformMode_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PlatformMode",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecureChannelEnabled_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecureChannelEnabled",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecurityKeySetVersion_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecurityKeySetVersion",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecurityKeyIndex_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecurityKeyIndex",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecurityChannelProtocol_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecurityChannelProtocol",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecurityChannelProtocolImpl_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecurityChannelProtocolImpl",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecurityLevel_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecurityLevel",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecurityKeyDerivation_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecurityKeyDerivation",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SuspendResumeEachVote_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SuspendResumeEachVote",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SuspendResumeOnErrorCondition_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SuspendResumeOnErrorCondition",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DelayAfterSuspend_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DelayAfterSuspend",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DelayAfterOn_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DelayAfterOn",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ShowMessagePowerCycle_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ShowMessagePowerCycle",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TimeOutMessagePowerCycle_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TimeOutMessagePowerCycle",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PowerCycleTries_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PowerCycleTries",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ForceRestartPCSCD_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ForceRestartPCSCD",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!WaitStopPCSCD_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "WaitStopPCSCD",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!WaitStartPCSCD_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "WaitStartPCSCD",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ShowMessageRestartPCSCD_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ShowMessageRestartPCSCD",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ReadRetry_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ReadRetry",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "UseConnectedSmartcardReader" && n.namespace_ ().empty ())
            {
              this->UseConnectedSmartcardReader_.set (UseConnectedSmartcardReaderTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "ConnectedReaderRenewContext" && n.namespace_ ().empty ())
            {
              this->ConnectedReaderRenewContext_.set (ConnectedReaderRenewContextTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "ConnectedSmartcardPCSCCheckCard" && n.namespace_ ().empty ())
            {
              this->ConnectedSmartcardPCSCCheckCard_.set (ConnectedSmartcardPCSCCheckCardTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "ConnectedSmartcardConnectToCheckPresence" && n.namespace_ ().empty ())
            {
              this->ConnectedSmartcardConnectToCheckPresence_.set (ConnectedSmartcardConnectToCheckPresenceTraits::create (i, f, this));
              continue;
            }
          }

          if (!UseConnectedSmartcardReader_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "UseConnectedSmartcardReader",
              "");
          }

          if (!ConnectedReaderRenewContext_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ConnectedReaderRenewContext",
              "");
          }

          if (!ConnectedSmartcardPCSCCheckCard_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ConnectedSmartcardPCSCCheckCard",
              "");
          }

          if (!ConnectedSmartcardConnectToCheckPresence_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ConnectedSmartcardConnectToCheckPresence",
              "");
          }
        }

        SmartCardConfiguration* SmartCardConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SmartCardConfiguration (*this, f, c);
        }

        SmartCardConfiguration::
        ~SmartCardConfiguration ()
        {
        }

        bool
        operator== (const SmartCardConfiguration& x, const SmartCardConfiguration& y)
        {
          if (!(x.getAppletAID () == y.getAppletAID ()))
            return false;

          if (!(x.getGlobalPIN () == y.getGlobalPIN ()))
            return false;

          if (!(x.getDataPIN () == y.getDataPIN ()))
            return false;

          if (!(x.getPlatformMode () == y.getPlatformMode ()))
            return false;

          if (!(x.getSecureChannelEnabled () == y.getSecureChannelEnabled ()))
            return false;

          if (!(x.getSecurityKeySetVersion () == y.getSecurityKeySetVersion ()))
            return false;

          if (!(x.getSecurityKeyIndex () == y.getSecurityKeyIndex ()))
            return false;

          if (!(x.getSecurityChannelProtocol () == y.getSecurityChannelProtocol ()))
            return false;

          if (!(x.getSecurityChannelProtocolImpl () == y.getSecurityChannelProtocolImpl ()))
            return false;

          if (!(x.getSecurityLevel () == y.getSecurityLevel ()))
            return false;

          if (!(x.getSecurityKeyDerivation () == y.getSecurityKeyDerivation ()))
            return false;

          if (!(x.getNivelTest () == y.getNivelTest ()))
            return false;

          if (!(x.getSuspendResumeEachVote () == y.getSuspendResumeEachVote ()))
            return false;

          if (!(x.getSuspendResumeOnErrorCondition () == y.getSuspendResumeOnErrorCondition ()))
            return false;

          if (!(x.getDelayAfterSuspend () == y.getDelayAfterSuspend ()))
            return false;

          if (!(x.getDelayAfterOn () == y.getDelayAfterOn ()))
            return false;

          if (!(x.getShowMessagePowerCycle () == y.getShowMessagePowerCycle ()))
            return false;

          if (!(x.getTimeOutMessagePowerCycle () == y.getTimeOutMessagePowerCycle ()))
            return false;

          if (!(x.getPowerCycleTries () == y.getPowerCycleTries ()))
            return false;

          if (!(x.getForceRestartPCSCD () == y.getForceRestartPCSCD ()))
            return false;

          if (!(x.getWaitStopPCSCD () == y.getWaitStopPCSCD ()))
            return false;

          if (!(x.getWaitStartPCSCD () == y.getWaitStartPCSCD ()))
            return false;

          if (!(x.getShowMessageRestartPCSCD () == y.getShowMessageRestartPCSCD ()))
            return false;

          if (!(x.getReadRetry () == y.getReadRetry ()))
            return false;

          if (!(x.getFatalErrorCodes () == y.getFatalErrorCodes ()))
            return false;

          if (!(x.getUseConnectedSmartcardReader () == y.getUseConnectedSmartcardReader ()))
            return false;

          if (!(x.getConnectedReaderRenewContext () == y.getConnectedReaderRenewContext ()))
            return false;

          if (!(x.getConnectedSmartcardPCSCCheckCard () == y.getConnectedSmartcardPCSCCheckCard ()))
            return false;

          if (!(x.getConnectedSmartcardConnectToCheckPresence () == y.getConnectedSmartcardConnectToCheckPresence ()))
            return false;

          return true;
        }

        bool
        operator!= (const SmartCardConfiguration& x, const SmartCardConfiguration& y)
        {
          return !(x == y);
        }

        // PCSCDConfiguration
        //

        PCSCDConfiguration::
        PCSCDConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          StartService_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StopService_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        PCSCDConfiguration::
        PCSCDConfiguration (const StartServiceType& StartService,
                            const StopServiceType& StopService)
        : ::Smartmatic::ConfigurationTypes::Type (),
          StartService_ (StartService, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StopService_ (StopService, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        PCSCDConfiguration::
        PCSCDConfiguration (const PCSCDConfiguration& x,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          StartService_ (x.StartService_, f, this),
          StopService_ (x.StopService_, f, this)
        {
        }

        PCSCDConfiguration::
        PCSCDConfiguration (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          StartService_ (f, this),
          StopService_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void PCSCDConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // StartService
            //
            if (n.name () == "StartService" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!StartService_.present ())
              {
                this->StartService_.set (StartServiceTraits::create (i, f, this));
                continue;
              }
            }

            // StopService
            //
            if (n.name () == "StopService" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!StopService_.present ())
              {
                this->StopService_.set (StopServiceTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!StartService_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StartService",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!StopService_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StopService",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        PCSCDConfiguration* PCSCDConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class PCSCDConfiguration (*this, f, c);
        }

        PCSCDConfiguration::
        ~PCSCDConfiguration ()
        {
        }

        bool
        operator== (const PCSCDConfiguration& x, const PCSCDConfiguration& y)
        {
          if (!(x.getStartService () == y.getStartService ()))
            return false;

          if (!(x.getStopService () == y.getStopService ()))
            return false;

          return true;
        }

        bool
        operator!= (const PCSCDConfiguration& x, const PCSCDConfiguration& y)
        {
          return !(x == y);
        }

        // CommandPrintingModeType
        //

        CommandPrintingModeType::
        CommandPrintingModeType (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_CommandPrintingModeType_convert ();
        }

        CommandPrintingModeType::
        CommandPrintingModeType (const ::xercesc::DOMAttr& a,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_CommandPrintingModeType_convert ();
        }

        CommandPrintingModeType::
        CommandPrintingModeType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_CommandPrintingModeType_convert ();
        }

        CommandPrintingModeType* CommandPrintingModeType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class CommandPrintingModeType (*this, f, c);
        }

        CommandPrintingModeType::Value CommandPrintingModeType::
        _xsd_CommandPrintingModeType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CommandPrintingModeType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CommandPrintingModeType_indexes_,
                            _xsd_CommandPrintingModeType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_CommandPrintingModeType_indexes_ + 2 || _xsd_CommandPrintingModeType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CommandPrintingModeType::
        _xsd_CommandPrintingModeType_literals_[2] =
        {
          "EMBEDDED_TEXT_CMD",
          "BINARY_CMD"
        };

        const CommandPrintingModeType::Value CommandPrintingModeType::
        _xsd_CommandPrintingModeType_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::CommandPrintingModeType::CONFIGURATION_BINARY_CMD,
          ::Smartmatic::SAES::Common::Configuration::CommandPrintingModeType::CONFIGURATION_EMBEDDED_TEXT_CMD
        };

        // PrinterBackendType
        //

        PrinterBackendType::
        PrinterBackendType (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_PrinterBackendType_convert ();
        }

        PrinterBackendType::
        PrinterBackendType (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_PrinterBackendType_convert ();
        }

        PrinterBackendType::
        PrinterBackendType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_PrinterBackendType_convert ();
        }

        PrinterBackendType* PrinterBackendType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class PrinterBackendType (*this, f, c);
        }

        PrinterBackendType::Value PrinterBackendType::
        _xsd_PrinterBackendType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PrinterBackendType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_PrinterBackendType_indexes_,
                            _xsd_PrinterBackendType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_PrinterBackendType_indexes_ + 2 || _xsd_PrinterBackendType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const PrinterBackendType::
        _xsd_PrinterBackendType_literals_[2] =
        {
          "DIRECTPRINTING",
          "GTKPRINTING"
        };

        const PrinterBackendType::Value PrinterBackendType::
        _xsd_PrinterBackendType_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::PrinterBackendType::CONFIGURATION_DIRECTPRINTING,
          ::Smartmatic::SAES::Common::Configuration::PrinterBackendType::CONFIGURATION_GTKPRINTING
        };

        // CutType
        //

        CutType::
        CutType (const ::xercesc::DOMElement& e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_CutType_convert ();
        }

        CutType::
        CutType (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_CutType_convert ();
        }

        CutType::
        CutType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_CutType_convert ();
        }

        CutType* CutType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class CutType (*this, f, c);
        }

        CutType::Value CutType::
        _xsd_CutType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CutType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CutType_indexes_,
                            _xsd_CutType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_CutType_indexes_ + 3 || _xsd_CutType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CutType::
        _xsd_CutType_literals_[3] =
        {
          "NOCUT",
          "CUT",
          "PARTIALCUT"
        };

        const CutType::Value CutType::
        _xsd_CutType_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::CutType::CONFIGURATION_CUT,
          ::Smartmatic::SAES::Common::Configuration::CutType::CONFIGURATION_NOCUT,
          ::Smartmatic::SAES::Common::Configuration::CutType::CONFIGURATION_PARTIALCUT
        };

        // ConfigurationBasePath
        //

        ConfigurationBasePath::
        ConfigurationBasePath ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          RulesBasePath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LiveFileSystemBasePath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          languageImageDirectory_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          backupFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ProjectName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          WorkingDirectory_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingExperienceValidationScreensDirectory_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationBasePath::
        ConfigurationBasePath (const RulesBasePathType& RulesBasePath,
                               const LiveFileSystemBasePathType& LiveFileSystemBasePath,
                               const LanguageImageDirectoryType& languageImageDirectory,
                               const BackupFileNameType& backupFileName,
                               const ProjectNameType& ProjectName,
                               const WorkingDirectoryType& WorkingDirectory,
                               const VotingExperienceValidationScreensDirectoryType& VotingExperienceValidationScreensDirectory)
        : ::Smartmatic::ConfigurationTypes::Type (),
          RulesBasePath_ (RulesBasePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LiveFileSystemBasePath_ (LiveFileSystemBasePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          languageImageDirectory_ (languageImageDirectory, ::Smartmatic::ConfigurationTypes::Flags (), this),
          backupFileName_ (backupFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ProjectName_ (ProjectName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          WorkingDirectory_ (WorkingDirectory, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingExperienceValidationScreensDirectory_ (VotingExperienceValidationScreensDirectory, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationBasePath::
        ConfigurationBasePath (const ConfigurationBasePath& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          RulesBasePath_ (x.RulesBasePath_, f, this),
          LiveFileSystemBasePath_ (x.LiveFileSystemBasePath_, f, this),
          languageImageDirectory_ (x.languageImageDirectory_, f, this),
          backupFileName_ (x.backupFileName_, f, this),
          ProjectName_ (x.ProjectName_, f, this),
          WorkingDirectory_ (x.WorkingDirectory_, f, this),
          VotingExperienceValidationScreensDirectory_ (x.VotingExperienceValidationScreensDirectory_, f, this)
        {
        }

        ConfigurationBasePath::
        ConfigurationBasePath (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          RulesBasePath_ (f, this),
          LiveFileSystemBasePath_ (f, this),
          languageImageDirectory_ (f, this),
          backupFileName_ (f, this),
          ProjectName_ (f, this),
          WorkingDirectory_ (f, this),
          VotingExperienceValidationScreensDirectory_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void ConfigurationBasePath::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // RulesBasePath
            //
            if (n.name () == "RulesBasePath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< RulesBasePathType > r (
                RulesBasePathTraits::create (i, f, this));

              if (!RulesBasePath_.present ())
              {
                this->RulesBasePath_.set (r);
                continue;
              }
            }

            // LiveFileSystemBasePath
            //
            if (n.name () == "LiveFileSystemBasePath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LiveFileSystemBasePathType > r (
                LiveFileSystemBasePathTraits::create (i, f, this));

              if (!LiveFileSystemBasePath_.present ())
              {
                this->LiveFileSystemBasePath_.set (r);
                continue;
              }
            }

            break;
          }

          if (!RulesBasePath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "RulesBasePath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LiveFileSystemBasePath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LiveFileSystemBasePath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "languageImageDirectory" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< LanguageImageDirectoryType > r (
                LanguageImageDirectoryTraits::create (i, f, this));

              this->languageImageDirectory_.set (r);
              continue;
            }

            if (n.name () == "backupFileName" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< BackupFileNameType > r (
                BackupFileNameTraits::create (i, f, this));

              this->backupFileName_.set (r);
              continue;
            }

            if (n.name () == "ProjectName" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ProjectNameType > r (
                ProjectNameTraits::create (i, f, this));

              this->ProjectName_.set (r);
              continue;
            }

            if (n.name () == "WorkingDirectory" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< WorkingDirectoryType > r (
                WorkingDirectoryTraits::create (i, f, this));

              this->WorkingDirectory_.set (r);
              continue;
            }

            if (n.name () == "VotingExperienceValidationScreensDirectory" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< VotingExperienceValidationScreensDirectoryType > r (
                VotingExperienceValidationScreensDirectoryTraits::create (i, f, this));

              this->VotingExperienceValidationScreensDirectory_.set (r);
              continue;
            }
          }

          if (!languageImageDirectory_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "languageImageDirectory",
              "");
          }

          if (!backupFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "backupFileName",
              "");
          }

          if (!ProjectName_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "ProjectName",
              "");
          }

          if (!WorkingDirectory_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "WorkingDirectory",
              "");
          }

          if (!VotingExperienceValidationScreensDirectory_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VotingExperienceValidationScreensDirectory",
              "");
          }
        }

        ConfigurationBasePath* ConfigurationBasePath::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class ConfigurationBasePath (*this, f, c);
        }

        ConfigurationBasePath::
        ~ConfigurationBasePath ()
        {
        }

        bool
        operator== (const ConfigurationBasePath& x, const ConfigurationBasePath& y)
        {
          if (!(x.getRulesBasePath () == y.getRulesBasePath ()))
            return false;

          if (!(x.getLiveFileSystemBasePath () == y.getLiveFileSystemBasePath ()))
            return false;

          if (!(x.getLanguageImageDirectory () == y.getLanguageImageDirectory ()))
            return false;

          if (!(x.getBackupFileName () == y.getBackupFileName ()))
            return false;

          if (!(x.getProjectName () == y.getProjectName ()))
            return false;

          if (!(x.getWorkingDirectory () == y.getWorkingDirectory ()))
            return false;

          if (!(x.getVotingExperienceValidationScreensDirectory () == y.getVotingExperienceValidationScreensDirectory ()))
            return false;

          return true;
        }

        bool
        operator!= (const ConfigurationBasePath& x, const ConfigurationBasePath& y)
        {
          return !(x == y);
        }

        // RulesBasePathType
        //

        RulesBasePathType::
        RulesBasePathType (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_RulesBasePathType_convert ();
        }

        RulesBasePathType::
        RulesBasePathType (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_RulesBasePathType_convert ();
        }

        RulesBasePathType::
        RulesBasePathType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_RulesBasePathType_convert ();
        }

        RulesBasePathType* RulesBasePathType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class RulesBasePathType (*this, f, c);
        }

        RulesBasePathType::Value RulesBasePathType::
        _xsd_RulesBasePathType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RulesBasePathType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_RulesBasePathType_indexes_,
                            _xsd_RulesBasePathType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_RulesBasePathType_indexes_ + 2 || _xsd_RulesBasePathType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const RulesBasePathType::
        _xsd_RulesBasePathType_literals_[2] =
        {
          "pm-rule",
          "vm-rule"
        };

        const RulesBasePathType::Value RulesBasePathType::
        _xsd_RulesBasePathType_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::RulesBasePathType::CONFIGURATION_PM_RULE,
          ::Smartmatic::SAES::Common::Configuration::RulesBasePathType::CONFIGURATION_VM_RULE
        };

        // BasePath
        //

        BasePath::
        BasePath ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          path_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          type_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BasePath::
        BasePath (const PathType& path,
                  const TypeType& type)
        : ::Smartmatic::ConfigurationTypes::Type (),
          path_ (path, ::Smartmatic::ConfigurationTypes::Flags (), this),
          type_ (type, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BasePath::
        BasePath (const BasePath& x,
                  ::Smartmatic::ConfigurationTypes::Flags f,
                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          path_ (x.path_, f, this),
          type_ (x.type_, f, this)
        {
        }

        BasePath::
        BasePath (const ::xercesc::DOMElement& e,
                  ::Smartmatic::ConfigurationTypes::Flags f,
                  ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          path_ (f, this),
          type_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void BasePath::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "path" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< PathType > r (
                PathTraits::create (i, f, this));

              this->path_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }
          }

          if (!path_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "path",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }
        }

        BasePath* BasePath::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BasePath (*this, f, c);
        }

        BasePath::
        ~BasePath ()
        {
        }

        bool
        operator== (const BasePath& x, const BasePath& y)
        {
          if (!(x.getPath () == y.getPath ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          return true;
        }

        bool
        operator!= (const BasePath& x, const BasePath& y)
        {
          return !(x == y);
        }

        // BasePathType
        //

        BasePathType::
        BasePathType (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_BasePathType_convert ();
        }

        BasePathType::
        BasePathType (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_BasePathType_convert ();
        }

        BasePathType::
        BasePathType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_BasePathType_convert ();
        }

        BasePathType* BasePathType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BasePathType (*this, f, c);
        }

        BasePathType::Value BasePathType::
        _xsd_BasePathType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_BasePathType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_BasePathType_indexes_,
                            _xsd_BasePathType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_BasePathType_indexes_ + 3 || _xsd_BasePathType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const BasePathType::
        _xsd_BasePathType_literals_[3] =
        {
          "DOM",
          "FLASH",
          "BACKUP"
        };

        const BasePathType::Value BasePathType::
        _xsd_BasePathType_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::BasePathType::CONFIGURATION_BACKUP,
          ::Smartmatic::SAES::Common::Configuration::BasePathType::CONFIGURATION_DOM,
          ::Smartmatic::SAES::Common::Configuration::BasePathType::CONFIGURATION_FLASH
        };

        // DigestAlgType
        //

        DigestAlgType::
        DigestAlgType (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_DigestAlgType_convert ();
        }

        DigestAlgType::
        DigestAlgType (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_DigestAlgType_convert ();
        }

        DigestAlgType::
        DigestAlgType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_DigestAlgType_convert ();
        }

        DigestAlgType* DigestAlgType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class DigestAlgType (*this, f, c);
        }

        DigestAlgType::Value DigestAlgType::
        _xsd_DigestAlgType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DigestAlgType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_DigestAlgType_indexes_,
                            _xsd_DigestAlgType_indexes_ + 6,
                            *this,
                            c));

          if (i == _xsd_DigestAlgType_indexes_ + 6 || _xsd_DigestAlgType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const DigestAlgType::
        _xsd_DigestAlgType_literals_[6] =
        {
          "md5",
          "sha1",
          "sha224",
          "sha256",
          "sha384",
          "sha512"
        };

        const DigestAlgType::Value DigestAlgType::
        _xsd_DigestAlgType_indexes_[6] =
        {
          ::Smartmatic::SAES::Common::Configuration::DigestAlgType::CONFIGURATION_MD5,
          ::Smartmatic::SAES::Common::Configuration::DigestAlgType::CONFIGURATION_SHA1,
          ::Smartmatic::SAES::Common::Configuration::DigestAlgType::CONFIGURATION_SHA224,
          ::Smartmatic::SAES::Common::Configuration::DigestAlgType::CONFIGURATION_SHA256,
          ::Smartmatic::SAES::Common::Configuration::DigestAlgType::CONFIGURATION_SHA384,
          ::Smartmatic::SAES::Common::Configuration::DigestAlgType::CONFIGURATION_SHA512
        };

        // KeyDerivAlgType
        //

        KeyDerivAlgType::
        KeyDerivAlgType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_KeyDerivAlgType_convert ();
        }

        KeyDerivAlgType::
        KeyDerivAlgType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_KeyDerivAlgType_convert ();
        }

        KeyDerivAlgType::
        KeyDerivAlgType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_KeyDerivAlgType_convert ();
        }

        KeyDerivAlgType* KeyDerivAlgType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class KeyDerivAlgType (*this, f, c);
        }

        KeyDerivAlgType::Value KeyDerivAlgType::
        _xsd_KeyDerivAlgType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_KeyDerivAlgType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_KeyDerivAlgType_indexes_,
                            _xsd_KeyDerivAlgType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_KeyDerivAlgType_indexes_ + 5 || _xsd_KeyDerivAlgType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const KeyDerivAlgType::
        _xsd_KeyDerivAlgType_literals_[5] =
        {
          "hmac",
          "des",
          "3key3des",
          "2key3des",
          "rc4"
        };

        const KeyDerivAlgType::Value KeyDerivAlgType::
        _xsd_KeyDerivAlgType_indexes_[5] =
        {
          ::Smartmatic::SAES::Common::Configuration::KeyDerivAlgType::CONFIGURATION_2KEY3DES,
          ::Smartmatic::SAES::Common::Configuration::KeyDerivAlgType::CONFIGURATION_3KEY3DES,
          ::Smartmatic::SAES::Common::Configuration::KeyDerivAlgType::CONFIGURATION_DES,
          ::Smartmatic::SAES::Common::Configuration::KeyDerivAlgType::CONFIGURATION_HMAC,
          ::Smartmatic::SAES::Common::Configuration::KeyDerivAlgType::CONFIGURATION_RC4
        };

        // SaltSourceType
        //

        SaltSourceType::
        SaltSourceType ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          CalcSalt_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SepChar_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DefaultSalt_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaltSourceType::
        SaltSourceType (const CalcSaltType& CalcSalt,
                        const SepCharType& SepChar,
                        const DefaultSaltType& DefaultSalt)
        : ::Smartmatic::ConfigurationTypes::Type (),
          CalcSalt_ (CalcSalt, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SepChar_ (SepChar, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DefaultSalt_ (DefaultSalt, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaltSourceType::
        SaltSourceType (const SaltSourceType& x,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          CalcSalt_ (x.CalcSalt_, f, this),
          SepChar_ (x.SepChar_, f, this),
          DefaultSalt_ (x.DefaultSalt_, f, this)
        {
        }

        SaltSourceType::
        SaltSourceType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          CalcSalt_ (f, this),
          SepChar_ (f, this),
          DefaultSalt_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SaltSourceType::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CalcSalt
            //
            if (n.name () == "CalcSalt" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!CalcSalt_.present ())
              {
                this->CalcSalt_.set (CalcSaltTraits::create (i, f, this));
                continue;
              }
            }

            // SepChar
            //
            if (n.name () == "SepChar" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SepCharType > r (
                SepCharTraits::create (i, f, this));

              if (!SepChar_.present ())
              {
                this->SepChar_.set (r);
                continue;
              }
            }

            // DefaultSalt
            //
            if (n.name () == "DefaultSalt" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DefaultSaltType > r (
                DefaultSaltTraits::create (i, f, this));

              if (!DefaultSalt_.present ())
              {
                this->DefaultSalt_.set (r);
                continue;
              }
            }

            break;
          }

          if (!CalcSalt_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CalcSalt",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SepChar_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SepChar",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DefaultSalt_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DefaultSalt",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        SaltSourceType* SaltSourceType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SaltSourceType (*this, f, c);
        }

        SaltSourceType::
        ~SaltSourceType ()
        {
        }

        bool
        operator== (const SaltSourceType& x, const SaltSourceType& y)
        {
          if (!(x.getCalcSalt () == y.getCalcSalt ()))
            return false;

          if (!(x.getSepChar () == y.getSepChar ()))
            return false;

          if (!(x.getDefaultSalt () == y.getDefaultSalt ()))
            return false;

          return true;
        }

        bool
        operator!= (const SaltSourceType& x, const SaltSourceType& y)
        {
          return !(x == y);
        }

        // SecurityConfiguration
        //

        SecurityConfiguration::
        SecurityConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          SecurityCryptoMode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecretKeyEncrypted_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ForceReduceElection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VerifySAESFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          IsCompressElection_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          IsCompressVotingDevices_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementCACertificateFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementItermediateCACertificates_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementTrustedCertificates_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertifiedTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VerifyExternElements_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          UseAsimetricKeyForTransmissionPackages_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          InstallationFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ExternalFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          InternalFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ResourcesFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ExchangeFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          UtilFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PrintedVoteData_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          FileSystemVote_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SaltSource_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DigestAlg_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          KeyDerivAlg_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          Iterations_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SignedPVForm_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SecurityConfiguration::
        SecurityConfiguration (const SecretKeyEncryptedType& SecretKeyEncrypted,
                               const ForceReduceElectionType& ForceReduceElection,
                               const VerifySAESFolderType& VerifySAESFolder,
                               const IsCompressElectionType& IsCompressElection,
                               const IsCompressVotingDevicesType& IsCompressVotingDevices,
                               const ImplementCACertificateFileNameType& ImplementCACertificateFileName,
                               const ImplementItermediateCACertificatesType& ImplementItermediateCACertificates,
                               const ImplementTrustedCertificatesType& ImplementTrustedCertificates,
                               const CertifiedTimeType& CertifiedTime,
                               const ValidateCertifiedTimeType& ValidateCertifiedTime,
                               const VerifyExternElementsType& VerifyExternElements,
                               const UseAsimetricKeyForTransmissionPackagesType& UseAsimetricKeyForTransmissionPackages,
                               const InstallationFilesType& InstallationFiles,
                               const ExternalFilesType& ExternalFiles,
                               const InternalFilesType& InternalFiles,
                               const ResourcesFilesType& ResourcesFiles,
                               const ExchangeFilesType& ExchangeFiles,
                               const UtilFilesType& UtilFiles,
                               const PrintedVoteDataType& PrintedVoteData,
                               const FileSystemVoteType& FileSystemVote,
                               const SaltSourceType& SaltSource,
                               const DigestAlgType& DigestAlg,
                               const KeyDerivAlgType& KeyDerivAlg,
                               const IterationsType& Iterations,
                               const SignedPVFormType& SignedPVForm)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SecurityCryptoMode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecretKeyEncrypted_ (SecretKeyEncrypted, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ForceReduceElection_ (ForceReduceElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VerifySAESFolder_ (VerifySAESFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IsCompressElection_ (IsCompressElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IsCompressVotingDevices_ (IsCompressVotingDevices, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementCACertificateFileName_ (ImplementCACertificateFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementItermediateCACertificates_ (ImplementItermediateCACertificates, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementTrustedCertificates_ (ImplementTrustedCertificates, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedTime_ (CertifiedTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertifiedTime_ (ValidateCertifiedTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VerifyExternElements_ (VerifyExternElements, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UseAsimetricKeyForTransmissionPackages_ (UseAsimetricKeyForTransmissionPackages, ::Smartmatic::ConfigurationTypes::Flags (), this),
          InstallationFiles_ (InstallationFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ExternalFiles_ (ExternalFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          InternalFiles_ (InternalFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ResourcesFiles_ (ResourcesFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ExchangeFiles_ (ExchangeFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UtilFiles_ (UtilFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PrintedVoteData_ (PrintedVoteData, ::Smartmatic::ConfigurationTypes::Flags (), this),
          FileSystemVote_ (FileSystemVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SaltSource_ (SaltSource, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DigestAlg_ (DigestAlg, ::Smartmatic::ConfigurationTypes::Flags (), this),
          KeyDerivAlg_ (KeyDerivAlg, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Iterations_ (Iterations, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SignedPVForm_ (SignedPVForm, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SecurityConfiguration::
        SecurityConfiguration (const SecretKeyEncryptedType& SecretKeyEncrypted,
                               const ForceReduceElectionType& ForceReduceElection,
                               const VerifySAESFolderType& VerifySAESFolder,
                               const IsCompressElectionType& IsCompressElection,
                               const IsCompressVotingDevicesType& IsCompressVotingDevices,
                               const ImplementCACertificateFileNameType& ImplementCACertificateFileName,
                               const ImplementItermediateCACertificatesType& ImplementItermediateCACertificates,
                               const ImplementTrustedCertificatesType& ImplementTrustedCertificates,
                               const CertifiedTimeType& CertifiedTime,
                               const ValidateCertifiedTimeType& ValidateCertifiedTime,
                               const VerifyExternElementsType& VerifyExternElements,
                               const UseAsimetricKeyForTransmissionPackagesType& UseAsimetricKeyForTransmissionPackages,
                               ::std::auto_ptr< InstallationFilesType >& InstallationFiles,
                               ::std::auto_ptr< ExternalFilesType >& ExternalFiles,
                               ::std::auto_ptr< InternalFilesType >& InternalFiles,
                               ::std::auto_ptr< ResourcesFilesType >& ResourcesFiles,
                               ::std::auto_ptr< ExchangeFilesType >& ExchangeFiles,
                               ::std::auto_ptr< UtilFilesType >& UtilFiles,
                               ::std::auto_ptr< PrintedVoteDataType >& PrintedVoteData,
                               ::std::auto_ptr< FileSystemVoteType >& FileSystemVote,
                               ::std::auto_ptr< SaltSourceType >& SaltSource,
                               const DigestAlgType& DigestAlg,
                               const KeyDerivAlgType& KeyDerivAlg,
                               const IterationsType& Iterations,
                               const SignedPVFormType& SignedPVForm)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SecurityCryptoMode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecretKeyEncrypted_ (SecretKeyEncrypted, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ForceReduceElection_ (ForceReduceElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VerifySAESFolder_ (VerifySAESFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IsCompressElection_ (IsCompressElection, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IsCompressVotingDevices_ (IsCompressVotingDevices, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementCACertificateFileName_ (ImplementCACertificateFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementItermediateCACertificates_ (ImplementItermediateCACertificates, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementTrustedCertificates_ (ImplementTrustedCertificates, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedTime_ (CertifiedTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertifiedTime_ (ValidateCertifiedTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VerifyExternElements_ (VerifyExternElements, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UseAsimetricKeyForTransmissionPackages_ (UseAsimetricKeyForTransmissionPackages, ::Smartmatic::ConfigurationTypes::Flags (), this),
          InstallationFiles_ (InstallationFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ExternalFiles_ (ExternalFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          InternalFiles_ (InternalFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ResourcesFiles_ (ResourcesFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ExchangeFiles_ (ExchangeFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UtilFiles_ (UtilFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PrintedVoteData_ (PrintedVoteData, ::Smartmatic::ConfigurationTypes::Flags (), this),
          FileSystemVote_ (FileSystemVote, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SaltSource_ (SaltSource, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DigestAlg_ (DigestAlg, ::Smartmatic::ConfigurationTypes::Flags (), this),
          KeyDerivAlg_ (KeyDerivAlg, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Iterations_ (Iterations, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SignedPVForm_ (SignedPVForm, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SecurityConfiguration::
        SecurityConfiguration (const SecurityConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          SecurityCryptoMode_ (x.SecurityCryptoMode_, f, this),
          SecretKeyEncrypted_ (x.SecretKeyEncrypted_, f, this),
          ForceReduceElection_ (x.ForceReduceElection_, f, this),
          VerifySAESFolder_ (x.VerifySAESFolder_, f, this),
          IsCompressElection_ (x.IsCompressElection_, f, this),
          IsCompressVotingDevices_ (x.IsCompressVotingDevices_, f, this),
          ImplementCACertificateFileName_ (x.ImplementCACertificateFileName_, f, this),
          ImplementItermediateCACertificates_ (x.ImplementItermediateCACertificates_, f, this),
          ImplementTrustedCertificates_ (x.ImplementTrustedCertificates_, f, this),
          CertifiedTime_ (x.CertifiedTime_, f, this),
          ValidateCertifiedTime_ (x.ValidateCertifiedTime_, f, this),
          VerifyExternElements_ (x.VerifyExternElements_, f, this),
          UseAsimetricKeyForTransmissionPackages_ (x.UseAsimetricKeyForTransmissionPackages_, f, this),
          InstallationFiles_ (x.InstallationFiles_, f, this),
          ExternalFiles_ (x.ExternalFiles_, f, this),
          InternalFiles_ (x.InternalFiles_, f, this),
          ResourcesFiles_ (x.ResourcesFiles_, f, this),
          ExchangeFiles_ (x.ExchangeFiles_, f, this),
          UtilFiles_ (x.UtilFiles_, f, this),
          PrintedVoteData_ (x.PrintedVoteData_, f, this),
          FileSystemVote_ (x.FileSystemVote_, f, this),
          SaltSource_ (x.SaltSource_, f, this),
          DigestAlg_ (x.DigestAlg_, f, this),
          KeyDerivAlg_ (x.KeyDerivAlg_, f, this),
          Iterations_ (x.Iterations_, f, this),
          SignedPVForm_ (x.SignedPVForm_, f, this)
        {
        }

        SecurityConfiguration::
        SecurityConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          SecurityCryptoMode_ (f, this),
          SecretKeyEncrypted_ (f, this),
          ForceReduceElection_ (f, this),
          VerifySAESFolder_ (f, this),
          IsCompressElection_ (f, this),
          IsCompressVotingDevices_ (f, this),
          ImplementCACertificateFileName_ (f, this),
          ImplementItermediateCACertificates_ (f, this),
          ImplementTrustedCertificates_ (f, this),
          CertifiedTime_ (f, this),
          ValidateCertifiedTime_ (f, this),
          VerifyExternElements_ (f, this),
          UseAsimetricKeyForTransmissionPackages_ (f, this),
          InstallationFiles_ (f, this),
          ExternalFiles_ (f, this),
          InternalFiles_ (f, this),
          ResourcesFiles_ (f, this),
          ExchangeFiles_ (f, this),
          UtilFiles_ (f, this),
          PrintedVoteData_ (f, this),
          FileSystemVote_ (f, this),
          SaltSource_ (f, this),
          DigestAlg_ (f, this),
          KeyDerivAlg_ (f, this),
          Iterations_ (f, this),
          SignedPVForm_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SecurityConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SecurityCryptoMode
            //
            if (n.name () == "SecurityCryptoMode" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SecurityCryptoModeType > r (
                SecurityCryptoModeTraits::create (i, f, this));

              if (!this->SecurityCryptoMode_)
              {
                this->SecurityCryptoMode_.set (r);
                continue;
              }
            }

            // SecretKeyEncrypted
            //
            if (n.name () == "SecretKeyEncrypted" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SecretKeyEncrypted_.present ())
              {
                this->SecretKeyEncrypted_.set (SecretKeyEncryptedTraits::create (i, f, this));
                continue;
              }
            }

            // ForceReduceElection
            //
            if (n.name () == "ForceReduceElection" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ForceReduceElection_.present ())
              {
                this->ForceReduceElection_.set (ForceReduceElectionTraits::create (i, f, this));
                continue;
              }
            }

            // VerifySAESFolder
            //
            if (n.name () == "VerifySAESFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!VerifySAESFolder_.present ())
              {
                this->VerifySAESFolder_.set (VerifySAESFolderTraits::create (i, f, this));
                continue;
              }
            }

            // IsCompressElection
            //
            if (n.name () == "IsCompressElection" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!IsCompressElection_.present ())
              {
                this->IsCompressElection_.set (IsCompressElectionTraits::create (i, f, this));
                continue;
              }
            }

            // IsCompressVotingDevices
            //
            if (n.name () == "IsCompressVotingDevices" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!IsCompressVotingDevices_.present ())
              {
                this->IsCompressVotingDevices_.set (IsCompressVotingDevicesTraits::create (i, f, this));
                continue;
              }
            }

            // ImplementCACertificateFileName
            //
            if (n.name () == "ImplementCACertificateFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ImplementCACertificateFileName_.present ())
              {
                this->ImplementCACertificateFileName_.set (ImplementCACertificateFileNameTraits::create (i, f, this));
                continue;
              }
            }

            // ImplementItermediateCACertificates
            //
            if (n.name () == "ImplementItermediateCACertificates" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ImplementItermediateCACertificates_.present ())
              {
                this->ImplementItermediateCACertificates_.set (ImplementItermediateCACertificatesTraits::create (i, f, this));
                continue;
              }
            }

            // ImplementTrustedCertificates
            //
            if (n.name () == "ImplementTrustedCertificates" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ImplementTrustedCertificates_.present ())
              {
                this->ImplementTrustedCertificates_.set (ImplementTrustedCertificatesTraits::create (i, f, this));
                continue;
              }
            }

            // CertifiedTime
            //
            if (n.name () == "CertifiedTime" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CertifiedTimeType > r (
                CertifiedTimeTraits::create (i, f, this));

              if (!CertifiedTime_.present ())
              {
                this->CertifiedTime_.set (r);
                continue;
              }
            }

            // ValidateCertifiedTime
            //
            if (n.name () == "ValidateCertifiedTime" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ValidateCertifiedTimeType > r (
                ValidateCertifiedTimeTraits::create (i, f, this));

              if (!ValidateCertifiedTime_.present ())
              {
                this->ValidateCertifiedTime_.set (r);
                continue;
              }
            }

            // VerifyExternElements
            //
            if (n.name () == "VerifyExternElements" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!VerifyExternElements_.present ())
              {
                this->VerifyExternElements_.set (VerifyExternElementsTraits::create (i, f, this));
                continue;
              }
            }

            // UseAsimetricKeyForTransmissionPackages
            //
            if (n.name () == "UseAsimetricKeyForTransmissionPackages" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!UseAsimetricKeyForTransmissionPackages_.present ())
              {
                this->UseAsimetricKeyForTransmissionPackages_.set (UseAsimetricKeyForTransmissionPackagesTraits::create (i, f, this));
                continue;
              }
            }

            // InstallationFiles
            //
            if (n.name () == "InstallationFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< InstallationFilesType > r (
                InstallationFilesTraits::create (i, f, this));

              if (!InstallationFiles_.present ())
              {
                this->InstallationFiles_.set (r);
                continue;
              }
            }

            // ExternalFiles
            //
            if (n.name () == "ExternalFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ExternalFilesType > r (
                ExternalFilesTraits::create (i, f, this));

              if (!ExternalFiles_.present ())
              {
                this->ExternalFiles_.set (r);
                continue;
              }
            }

            // InternalFiles
            //
            if (n.name () == "InternalFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< InternalFilesType > r (
                InternalFilesTraits::create (i, f, this));

              if (!InternalFiles_.present ())
              {
                this->InternalFiles_.set (r);
                continue;
              }
            }

            // ResourcesFiles
            //
            if (n.name () == "ResourcesFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ResourcesFilesType > r (
                ResourcesFilesTraits::create (i, f, this));

              if (!ResourcesFiles_.present ())
              {
                this->ResourcesFiles_.set (r);
                continue;
              }
            }

            // ExchangeFiles
            //
            if (n.name () == "ExchangeFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ExchangeFilesType > r (
                ExchangeFilesTraits::create (i, f, this));

              if (!ExchangeFiles_.present ())
              {
                this->ExchangeFiles_.set (r);
                continue;
              }
            }

            // UtilFiles
            //
            if (n.name () == "UtilFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< UtilFilesType > r (
                UtilFilesTraits::create (i, f, this));

              if (!UtilFiles_.present ())
              {
                this->UtilFiles_.set (r);
                continue;
              }
            }

            // PrintedVoteData
            //
            if (n.name () == "PrintedVoteData" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PrintedVoteDataType > r (
                PrintedVoteDataTraits::create (i, f, this));

              if (!PrintedVoteData_.present ())
              {
                this->PrintedVoteData_.set (r);
                continue;
              }
            }

            // FileSystemVote
            //
            if (n.name () == "FileSystemVote" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< FileSystemVoteType > r (
                FileSystemVoteTraits::create (i, f, this));

              if (!FileSystemVote_.present ())
              {
                this->FileSystemVote_.set (r);
                continue;
              }
            }

            // SaltSource
            //
            if (n.name () == "SaltSource" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SaltSourceType > r (
                SaltSourceTraits::create (i, f, this));

              if (!SaltSource_.present ())
              {
                this->SaltSource_.set (r);
                continue;
              }
            }

            // DigestAlg
            //
            if (n.name () == "DigestAlg" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DigestAlgType > r (
                DigestAlgTraits::create (i, f, this));

              if (!DigestAlg_.present ())
              {
                this->DigestAlg_.set (r);
                continue;
              }
            }

            // KeyDerivAlg
            //
            if (n.name () == "KeyDerivAlg" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< KeyDerivAlgType > r (
                KeyDerivAlgTraits::create (i, f, this));

              if (!KeyDerivAlg_.present ())
              {
                this->KeyDerivAlg_.set (r);
                continue;
              }
            }

            // Iterations
            //
            if (n.name () == "Iterations" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!Iterations_.present ())
              {
                this->Iterations_.set (IterationsTraits::create (i, f, this));
                continue;
              }
            }

            // SignedPVForm
            //
            if (n.name () == "SignedPVForm" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SignedPVForm_.present ())
              {
                this->SignedPVForm_.set (SignedPVFormTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!SecretKeyEncrypted_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecretKeyEncrypted",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ForceReduceElection_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ForceReduceElection",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VerifySAESFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VerifySAESFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!IsCompressElection_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IsCompressElection",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!IsCompressVotingDevices_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IsCompressVotingDevices",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ImplementCACertificateFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ImplementCACertificateFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ImplementItermediateCACertificates_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ImplementItermediateCACertificates",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ImplementTrustedCertificates_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ImplementTrustedCertificates",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CertifiedTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CertifiedTime",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ValidateCertifiedTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ValidateCertifiedTime",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VerifyExternElements_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VerifyExternElements",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!UseAsimetricKeyForTransmissionPackages_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UseAsimetricKeyForTransmissionPackages",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!InstallationFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InstallationFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ExternalFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExternalFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!InternalFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InternalFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ResourcesFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ResourcesFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ExchangeFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ExchangeFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!UtilFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UtilFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PrintedVoteData_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PrintedVoteData",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!FileSystemVote_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FileSystemVote",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SaltSource_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SaltSource",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DigestAlg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DigestAlg",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!KeyDerivAlg_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "KeyDerivAlg",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!Iterations_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Iterations",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SignedPVForm_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SignedPVForm",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        SecurityConfiguration* SecurityConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityConfiguration (*this, f, c);
        }

        SecurityConfiguration::
        ~SecurityConfiguration ()
        {
        }

        bool
        operator== (const SecurityConfiguration& x, const SecurityConfiguration& y)
        {
          if (!(x.getSecurityCryptoMode () == y.getSecurityCryptoMode ()))
            return false;

          if (!(x.getSecretKeyEncrypted () == y.getSecretKeyEncrypted ()))
            return false;

          if (!(x.getForceReduceElection () == y.getForceReduceElection ()))
            return false;

          if (!(x.getVerifySAESFolder () == y.getVerifySAESFolder ()))
            return false;

          if (!(x.getIsCompressElection () == y.getIsCompressElection ()))
            return false;

          if (!(x.getIsCompressVotingDevices () == y.getIsCompressVotingDevices ()))
            return false;

          if (!(x.getImplementCACertificateFileName () == y.getImplementCACertificateFileName ()))
            return false;

          if (!(x.getImplementItermediateCACertificates () == y.getImplementItermediateCACertificates ()))
            return false;

          if (!(x.getImplementTrustedCertificates () == y.getImplementTrustedCertificates ()))
            return false;

          if (!(x.getCertifiedTime () == y.getCertifiedTime ()))
            return false;

          if (!(x.getValidateCertifiedTime () == y.getValidateCertifiedTime ()))
            return false;

          if (!(x.getVerifyExternElements () == y.getVerifyExternElements ()))
            return false;

          if (!(x.getUseAsimetricKeyForTransmissionPackages () == y.getUseAsimetricKeyForTransmissionPackages ()))
            return false;

          if (!(x.getInstallationFiles () == y.getInstallationFiles ()))
            return false;

          if (!(x.getExternalFiles () == y.getExternalFiles ()))
            return false;

          if (!(x.getInternalFiles () == y.getInternalFiles ()))
            return false;

          if (!(x.getResourcesFiles () == y.getResourcesFiles ()))
            return false;

          if (!(x.getExchangeFiles () == y.getExchangeFiles ()))
            return false;

          if (!(x.getUtilFiles () == y.getUtilFiles ()))
            return false;

          if (!(x.getPrintedVoteData () == y.getPrintedVoteData ()))
            return false;

          if (!(x.getFileSystemVote () == y.getFileSystemVote ()))
            return false;

          if (!(x.getSaltSource () == y.getSaltSource ()))
            return false;

          if (!(x.getDigestAlg () == y.getDigestAlg ()))
            return false;

          if (!(x.getKeyDerivAlg () == y.getKeyDerivAlg ()))
            return false;

          if (!(x.getIterations () == y.getIterations ()))
            return false;

          if (!(x.getSignedPVForm () == y.getSignedPVForm ()))
            return false;

          return true;
        }

        bool
        operator!= (const SecurityConfiguration& x, const SecurityConfiguration& y)
        {
          return !(x == y);
        }

        // SecurityFileConfiguration
        //

        SecurityFileConfiguration::
        SecurityFileConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          EncryptedData_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SignedData_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateSigned_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedFilePath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertified_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertifiedConfig_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SecurityFileConfiguration::
        SecurityFileConfiguration (const EncryptedDataType& EncryptedData,
                                   const SignedDataType& SignedData,
                                   const ValidateSignedType& ValidateSigned,
                                   const CertifiedFilePathType& CertifiedFilePath,
                                   const CertifiedTypeType& CertifiedType,
                                   const ValidateCertifiedType& ValidateCertified)
        : ::Smartmatic::ConfigurationTypes::Type (),
          EncryptedData_ (EncryptedData, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SignedData_ (SignedData, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateSigned_ (ValidateSigned, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedFilePath_ (CertifiedFilePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CertifiedType_ (CertifiedType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertified_ (ValidateCertified, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ValidateCertifiedConfig_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SecurityFileConfiguration::
        SecurityFileConfiguration (const SecurityFileConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          EncryptedData_ (x.EncryptedData_, f, this),
          SignedData_ (x.SignedData_, f, this),
          ValidateSigned_ (x.ValidateSigned_, f, this),
          CertifiedFilePath_ (x.CertifiedFilePath_, f, this),
          CertifiedType_ (x.CertifiedType_, f, this),
          ValidateCertified_ (x.ValidateCertified_, f, this),
          ValidateCertifiedConfig_ (x.ValidateCertifiedConfig_, f, this)
        {
        }

        SecurityFileConfiguration::
        SecurityFileConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          EncryptedData_ (f, this),
          SignedData_ (f, this),
          ValidateSigned_ (f, this),
          CertifiedFilePath_ (f, this),
          CertifiedType_ (f, this),
          ValidateCertified_ (f, this),
          ValidateCertifiedConfig_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SecurityFileConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // EncryptedData
            //
            if (n.name () == "EncryptedData" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!EncryptedData_.present ())
              {
                this->EncryptedData_.set (EncryptedDataTraits::create (i, f, this));
                continue;
              }
            }

            // SignedData
            //
            if (n.name () == "SignedData" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SignedDataType > r (
                SignedDataTraits::create (i, f, this));

              if (!SignedData_.present ())
              {
                this->SignedData_.set (r);
                continue;
              }
            }

            // ValidateSigned
            //
            if (n.name () == "ValidateSigned" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ValidateSigned_.present ())
              {
                this->ValidateSigned_.set (ValidateSignedTraits::create (i, f, this));
                continue;
              }
            }

            // CertifiedFilePath
            //
            if (n.name () == "CertifiedFilePath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CertifiedFilePathType > r (
                CertifiedFilePathTraits::create (i, f, this));

              if (!CertifiedFilePath_.present ())
              {
                this->CertifiedFilePath_.set (r);
                continue;
              }
            }

            // CertifiedType
            //
            if (n.name () == "CertifiedType" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CertifiedTypeType > r (
                CertifiedTypeTraits::create (i, f, this));

              if (!CertifiedType_.present ())
              {
                this->CertifiedType_.set (r);
                continue;
              }
            }

            // ValidateCertified
            //
            if (n.name () == "ValidateCertified" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ValidateCertified_.present ())
              {
                this->ValidateCertified_.set (ValidateCertifiedTraits::create (i, f, this));
                continue;
              }
            }

            // ValidateCertifiedConfig
            //
            if (n.name () == "ValidateCertifiedConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ValidateCertifiedConfigType > r (
                ValidateCertifiedConfigTraits::create (i, f, this));

              this->ValidateCertifiedConfig_.push_back (r);
              continue;
            }

            break;
          }

          if (!EncryptedData_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EncryptedData",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SignedData_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SignedData",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ValidateSigned_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ValidateSigned",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CertifiedFilePath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CertifiedFilePath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CertifiedType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CertifiedType",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ValidateCertified_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ValidateCertified",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        SecurityFileConfiguration* SecurityFileConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityFileConfiguration (*this, f, c);
        }

        SecurityFileConfiguration::
        ~SecurityFileConfiguration ()
        {
        }

        bool
        operator== (const SecurityFileConfiguration& x, const SecurityFileConfiguration& y)
        {
          if (!(x.getEncryptedData () == y.getEncryptedData ()))
            return false;

          if (!(x.getSignedData () == y.getSignedData ()))
            return false;

          if (!(x.getValidateSigned () == y.getValidateSigned ()))
            return false;

          if (!(x.getCertifiedFilePath () == y.getCertifiedFilePath ()))
            return false;

          if (!(x.getCertifiedType () == y.getCertifiedType ()))
            return false;

          if (!(x.getValidateCertified () == y.getValidateCertified ()))
            return false;

          if (!(x.getValidateCertifiedConfig () == y.getValidateCertifiedConfig ()))
            return false;

          return true;
        }

        bool
        operator!= (const SecurityFileConfiguration& x, const SecurityFileConfiguration& y)
        {
          return !(x == y);
        }

        // FileSystemVoteConfiguration
        //

        FileSystemVoteConfiguration::
        FileSystemVoteConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          maxfiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          FileSystemVoteTime_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementRandom_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          BackupMarkFile_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        FileSystemVoteConfiguration::
        FileSystemVoteConfiguration (const MaxfilesType& maxfiles,
                                     const ImplementTimeType& ImplementTime,
                                     const FileSystemVoteTimeType& FileSystemVoteTime,
                                     const ImplementRandomType& ImplementRandom,
                                     const BackupMarkFileType& BackupMarkFile)
        : ::Smartmatic::ConfigurationTypes::Type (),
          maxfiles_ (maxfiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementTime_ (ImplementTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          FileSystemVoteTime_ (FileSystemVoteTime, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImplementRandom_ (ImplementRandom, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BackupMarkFile_ (BackupMarkFile, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        FileSystemVoteConfiguration::
        FileSystemVoteConfiguration (const FileSystemVoteConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          maxfiles_ (x.maxfiles_, f, this),
          ImplementTime_ (x.ImplementTime_, f, this),
          FileSystemVoteTime_ (x.FileSystemVoteTime_, f, this),
          ImplementRandom_ (x.ImplementRandom_, f, this),
          BackupMarkFile_ (x.BackupMarkFile_, f, this)
        {
        }

        FileSystemVoteConfiguration::
        FileSystemVoteConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          maxfiles_ (f, this),
          ImplementTime_ (f, this),
          FileSystemVoteTime_ (f, this),
          ImplementRandom_ (f, this),
          BackupMarkFile_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void FileSystemVoteConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // maxfiles
            //
            if (n.name () == "maxfiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!maxfiles_.present ())
              {
                this->maxfiles_.set (MaxfilesTraits::create (i, f, this));
                continue;
              }
            }

            // ImplementTime
            //
            if (n.name () == "ImplementTime" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ImplementTimeType > r (
                ImplementTimeTraits::create (i, f, this));

              if (!ImplementTime_.present ())
              {
                this->ImplementTime_.set (r);
                continue;
              }
            }

            // FileSystemVoteTime
            //
            if (n.name () == "FileSystemVoteTime" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< FileSystemVoteTimeType > r (
                FileSystemVoteTimeTraits::create (i, f, this));

              if (!FileSystemVoteTime_.present ())
              {
                this->FileSystemVoteTime_.set (r);
                continue;
              }
            }

            // ImplementRandom
            //
            if (n.name () == "ImplementRandom" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ImplementRandom_.present ())
              {
                this->ImplementRandom_.set (ImplementRandomTraits::create (i, f, this));
                continue;
              }
            }

            // BackupMarkFile
            //
            if (n.name () == "BackupMarkFile" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< BackupMarkFileType > r (
                BackupMarkFileTraits::create (i, f, this));

              if (!BackupMarkFile_.present ())
              {
                this->BackupMarkFile_.set (r);
                continue;
              }
            }

            break;
          }

          if (!maxfiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "maxfiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ImplementTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ImplementTime",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!FileSystemVoteTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FileSystemVoteTime",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ImplementRandom_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ImplementRandom",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!BackupMarkFile_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BackupMarkFile",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        FileSystemVoteConfiguration* FileSystemVoteConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class FileSystemVoteConfiguration (*this, f, c);
        }

        FileSystemVoteConfiguration::
        ~FileSystemVoteConfiguration ()
        {
        }

        bool
        operator== (const FileSystemVoteConfiguration& x, const FileSystemVoteConfiguration& y)
        {
          if (!(x.getMaxfiles () == y.getMaxfiles ()))
            return false;

          if (!(x.getImplementTime () == y.getImplementTime ()))
            return false;

          if (!(x.getFileSystemVoteTime () == y.getFileSystemVoteTime ()))
            return false;

          if (!(x.getImplementRandom () == y.getImplementRandom ()))
            return false;

          if (!(x.getBackupMarkFile () == y.getBackupMarkFile ()))
            return false;

          return true;
        }

        bool
        operator!= (const FileSystemVoteConfiguration& x, const FileSystemVoteConfiguration& y)
        {
          return !(x == y);
        }

        // SignedType
        //

        SignedType::
        SignedType (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SignedType_convert ();
        }

        SignedType::
        SignedType (const ::xercesc::DOMAttr& a,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SignedType_convert ();
        }

        SignedType::
        SignedType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SignedType_convert ();
        }

        SignedType* SignedType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SignedType (*this, f, c);
        }

        SignedType::Value SignedType::
        _xsd_SignedType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SignedType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SignedType_indexes_,
                            _xsd_SignedType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_SignedType_indexes_ + 3 || _xsd_SignedType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SignedType::
        _xsd_SignedType_literals_[3] =
        {
          "simple",
          "full",
          "none"
        };

        const SignedType::Value SignedType::
        _xsd_SignedType_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::SignedType::CONFIGURATION_FULL,
          ::Smartmatic::SAES::Common::Configuration::SignedType::CONFIGURATION_NONE,
          ::Smartmatic::SAES::Common::Configuration::SignedType::CONFIGURATION_SIMPLE
        };

        // ValidateCertifiedConfiguration
        //

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_ValidateCertifiedConfiguration_convert ();
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const ::xercesc::DOMAttr& a,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_ValidateCertifiedConfiguration_convert ();
        }

        ValidateCertifiedConfiguration::
        ValidateCertifiedConfiguration (const ::std::string& s,
                                        const ::xercesc::DOMElement* e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_ValidateCertifiedConfiguration_convert ();
        }

        ValidateCertifiedConfiguration* ValidateCertifiedConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class ValidateCertifiedConfiguration (*this, f, c);
        }

        ValidateCertifiedConfiguration::Value ValidateCertifiedConfiguration::
        _xsd_ValidateCertifiedConfiguration_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ValidateCertifiedConfiguration_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_ValidateCertifiedConfiguration_indexes_,
                            _xsd_ValidateCertifiedConfiguration_indexes_ + 17,
                            *this,
                            c));

          if (i == _xsd_ValidateCertifiedConfiguration_indexes_ + 17 || _xsd_ValidateCertifiedConfiguration_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const ValidateCertifiedConfiguration::
        _xsd_ValidateCertifiedConfiguration_literals_[17] =
        {
          "NO_FLAGS",
          "DO_NOT_VALIDATE",
          "IGNORE_CRITICAL",
          "CB_ISSUER_CHECK",
          "CRL_CHECK",
          "CRL_CHECK_ALL",
          "POLICY_CHECK",
          "EXPLICIT_POLICY",
          "INHIBIT_ANY",
          "INHIBIT_MAP",
          "X509_STRICT",
          "EXTENDED_CRL_SUPPORT",
          "USE_DELTAS",
          "NOTIFY_POLICY",
          "CHECK_SS_SIGNATURE",
          "SET_CHECK_TIME",
          "ALLOW_PROXY_CERTS"
        };

        const ValidateCertifiedConfiguration::Value ValidateCertifiedConfiguration::
        _xsd_ValidateCertifiedConfiguration_indexes_[17] =
        {
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_ALLOW_PROXY_CERTS,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_CB_ISSUER_CHECK,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_CHECK_SS_SIGNATURE,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_CRL_CHECK,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_CRL_CHECK_ALL,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_DO_NOT_VALIDATE,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_EXPLICIT_POLICY,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_EXTENDED_CRL_SUPPORT,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_IGNORE_CRITICAL,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_INHIBIT_ANY,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_INHIBIT_MAP,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_NOTIFY_POLICY,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_NO_FLAGS,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_POLICY_CHECK,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_SET_CHECK_TIME,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_USE_DELTAS,
          ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration::CONFIGURATION_X509_STRICT
        };

        // TimeConfiguration
        //

        TimeConfiguration::
        TimeConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_TimeConfiguration_convert ();
        }

        TimeConfiguration::
        TimeConfiguration (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_TimeConfiguration_convert ();
        }

        TimeConfiguration::
        TimeConfiguration (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_TimeConfiguration_convert ();
        }

        TimeConfiguration* TimeConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class TimeConfiguration (*this, f, c);
        }

        TimeConfiguration::Value TimeConfiguration::
        _xsd_TimeConfiguration_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TimeConfiguration_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_TimeConfiguration_indexes_,
                            _xsd_TimeConfiguration_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_TimeConfiguration_indexes_ + 3 || _xsd_TimeConfiguration_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const TimeConfiguration::
        _xsd_TimeConfiguration_literals_[3] =
        {
          "MACHINE_TIME",
          "CONFIG_TIME",
          "NONE"
        };

        const TimeConfiguration::Value TimeConfiguration::
        _xsd_TimeConfiguration_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::TimeConfiguration::CONFIGURATION_CONFIG_TIME,
          ::Smartmatic::SAES::Common::Configuration::TimeConfiguration::CONFIGURATION_MACHINE_TIME,
          ::Smartmatic::SAES::Common::Configuration::TimeConfiguration::CONFIGURATION_NONE
        };

        // CertifiedType
        //

        CertifiedType::
        CertifiedType (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_CertifiedType_convert ();
        }

        CertifiedType::
        CertifiedType (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_CertifiedType_convert ();
        }

        CertifiedType::
        CertifiedType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_CertifiedType_convert ();
        }

        CertifiedType* CertifiedType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class CertifiedType (*this, f, c);
        }

        CertifiedType::Value CertifiedType::
        _xsd_CertifiedType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CertifiedType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CertifiedType_indexes_,
                            _xsd_CertifiedType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_CertifiedType_indexes_ + 3 || _xsd_CertifiedType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CertifiedType::
        _xsd_CertifiedType_literals_[3] =
        {
          "PCKS12",
          "X509",
          "NONE"
        };

        const CertifiedType::Value CertifiedType::
        _xsd_CertifiedType_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::CertifiedType::CONFIGURATION_NONE,
          ::Smartmatic::SAES::Common::Configuration::CertifiedType::CONFIGURATION_PCKS12,
          ::Smartmatic::SAES::Common::Configuration::CertifiedType::CONFIGURATION_X509
        };

        // CryptoType
        //

        CryptoType::
        CryptoType (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_CryptoType_convert ();
        }

        CryptoType::
        CryptoType (const ::xercesc::DOMAttr& a,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_CryptoType_convert ();
        }

        CryptoType::
        CryptoType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_CryptoType_convert ();
        }

        CryptoType* CryptoType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class CryptoType (*this, f, c);
        }

        CryptoType::Value CryptoType::
        _xsd_CryptoType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CryptoType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CryptoType_indexes_,
                            _xsd_CryptoType_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_CryptoType_indexes_ + 3 || _xsd_CryptoType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CryptoType::
        _xsd_CryptoType_literals_[3] =
        {
          "GLOBAL",
          "BASE64",
          "PLAIN"
        };

        const CryptoType::Value CryptoType::
        _xsd_CryptoType_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::CryptoType::CONFIGURATION_BASE64,
          ::Smartmatic::SAES::Common::Configuration::CryptoType::CONFIGURATION_GLOBAL,
          ::Smartmatic::SAES::Common::Configuration::CryptoType::CONFIGURATION_PLAIN
        };

        // SecurityCryptoMode
        //

        SecurityCryptoMode::
        SecurityCryptoMode (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SecurityCryptoMode_convert ();
        }

        SecurityCryptoMode::
        SecurityCryptoMode (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SecurityCryptoMode_convert ();
        }

        SecurityCryptoMode::
        SecurityCryptoMode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SecurityCryptoMode_convert ();
        }

        SecurityCryptoMode* SecurityCryptoMode::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityCryptoMode (*this, f, c);
        }

        SecurityCryptoMode::Value SecurityCryptoMode::
        _xsd_SecurityCryptoMode_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SecurityCryptoMode_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SecurityCryptoMode_indexes_,
                            _xsd_SecurityCryptoMode_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_SecurityCryptoMode_indexes_ + 2 || _xsd_SecurityCryptoMode_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SecurityCryptoMode::
        _xsd_SecurityCryptoMode_literals_[2] =
        {
          "ECB",
          "CBC"
        };

        const SecurityCryptoMode::Value SecurityCryptoMode::
        _xsd_SecurityCryptoMode_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::SecurityCryptoMode::CONFIGURATION_CBC,
          ::Smartmatic::SAES::Common::Configuration::SecurityCryptoMode::CONFIGURATION_ECB
        };

        // PlatformMode
        //

        PlatformMode::
        PlatformMode (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_PlatformMode_convert ();
        }

        PlatformMode::
        PlatformMode (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_PlatformMode_convert ();
        }

        PlatformMode::
        PlatformMode (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::ConfigurationTypes::Flags f,
                      ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_PlatformMode_convert ();
        }

        PlatformMode* PlatformMode::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class PlatformMode (*this, f, c);
        }

        PlatformMode::Value PlatformMode::
        _xsd_PlatformMode_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PlatformMode_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_PlatformMode_indexes_,
                            _xsd_PlatformMode_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_PlatformMode_indexes_ + 2 || _xsd_PlatformMode_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const PlatformMode::
        _xsd_PlatformMode_literals_[2] =
        {
          "OP_201",
          "GP_211"
        };

        const PlatformMode::Value PlatformMode::
        _xsd_PlatformMode_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::PlatformMode::CONFIGURATION_GP_211,
          ::Smartmatic::SAES::Common::Configuration::PlatformMode::CONFIGURATION_OP_201
        };

        // GlobalPIN
        //

        GlobalPIN::
        GlobalPIN (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_GlobalPIN_convert ();
        }

        GlobalPIN::
        GlobalPIN (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_GlobalPIN_convert ();
        }

        GlobalPIN::
        GlobalPIN (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_GlobalPIN_convert ();
        }

        GlobalPIN* GlobalPIN::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class GlobalPIN (*this, f, c);
        }

        GlobalPIN::Value GlobalPIN::
        _xsd_GlobalPIN_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_GlobalPIN_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_GlobalPIN_indexes_,
                            _xsd_GlobalPIN_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_GlobalPIN_indexes_ + 2 || _xsd_GlobalPIN_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const GlobalPIN::
        _xsd_GlobalPIN_literals_[2] =
        {
          "fixed",
          "derived"
        };

        const GlobalPIN::Value GlobalPIN::
        _xsd_GlobalPIN_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::GlobalPIN::CONFIGURATION_DERIVED,
          ::Smartmatic::SAES::Common::Configuration::GlobalPIN::CONFIGURATION_FIXED
        };

        // DataPIN
        //

        DataPIN::
        DataPIN (const ::xercesc::DOMElement& e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_DataPIN_convert ();
        }

        DataPIN::
        DataPIN (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_DataPIN_convert ();
        }

        DataPIN::
        DataPIN (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_DataPIN_convert ();
        }

        DataPIN* DataPIN::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class DataPIN (*this, f, c);
        }

        DataPIN::Value DataPIN::
        _xsd_DataPIN_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DataPIN_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_DataPIN_indexes_,
                            _xsd_DataPIN_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_DataPIN_indexes_ + 2 || _xsd_DataPIN_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const DataPIN::
        _xsd_DataPIN_literals_[2] =
        {
          "opening-code",
          "verification-key"
        };

        const DataPIN::Value DataPIN::
        _xsd_DataPIN_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::DataPIN::CONFIGURATION_OPENING_CODE,
          ::Smartmatic::SAES::Common::Configuration::DataPIN::CONFIGURATION_VERIFICATION_KEY
        };

        // SecurityChannelProtocol
        //

        SecurityChannelProtocol::
        SecurityChannelProtocol (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SecurityChannelProtocol_convert ();
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (const ::xercesc::DOMAttr& a,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SecurityChannelProtocol_convert ();
        }

        SecurityChannelProtocol::
        SecurityChannelProtocol (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::Smartmatic::ConfigurationTypes::Flags f,
                                 ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SecurityChannelProtocol_convert ();
        }

        SecurityChannelProtocol* SecurityChannelProtocol::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityChannelProtocol (*this, f, c);
        }

        SecurityChannelProtocol::Value SecurityChannelProtocol::
        _xsd_SecurityChannelProtocol_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SecurityChannelProtocol_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SecurityChannelProtocol_indexes_,
                            _xsd_SecurityChannelProtocol_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_SecurityChannelProtocol_indexes_ + 2 || _xsd_SecurityChannelProtocol_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SecurityChannelProtocol::
        _xsd_SecurityChannelProtocol_literals_[2] =
        {
          "SCP01",
          "SCP02"
        };

        const SecurityChannelProtocol::Value SecurityChannelProtocol::
        _xsd_SecurityChannelProtocol_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocol::CONFIGURATION_SCP01,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocol::CONFIGURATION_SCP02
        };

        // SecurityChannelProtocolImpl
        //

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SecurityChannelProtocolImpl_convert ();
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const ::xercesc::DOMAttr& a,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SecurityChannelProtocolImpl_convert ();
        }

        SecurityChannelProtocolImpl::
        SecurityChannelProtocolImpl (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::Smartmatic::ConfigurationTypes::Flags f,
                                     ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SecurityChannelProtocolImpl_convert ();
        }

        SecurityChannelProtocolImpl* SecurityChannelProtocolImpl::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityChannelProtocolImpl (*this, f, c);
        }

        SecurityChannelProtocolImpl::Value SecurityChannelProtocolImpl::
        _xsd_SecurityChannelProtocolImpl_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SecurityChannelProtocolImpl_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SecurityChannelProtocolImpl_indexes_,
                            _xsd_SecurityChannelProtocolImpl_indexes_ + 14,
                            *this,
                            c));

          if (i == _xsd_SecurityChannelProtocolImpl_indexes_ + 14 || _xsd_SecurityChannelProtocolImpl_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SecurityChannelProtocolImpl::
        _xsd_SecurityChannelProtocolImpl_literals_[14] =
        {
          "SCP01_IMPL_i05",
          "SCP01_IMPL_i15",
          "SCP02_IMPL_i44",
          "SCP02_IMPL_i45",
          "SCP02_IMPL_i54",
          "SCP02_IMPL_i55",
          "SCP02_IMPL_i04",
          "SCP02_IMPL_i05",
          "SCP02_IMPL_i0A",
          "SCP02_IMPL_i0B",
          "SCP02_IMPL_i14",
          "SCP02_IMPL_i15",
          "SCP02_IMPL_i1A",
          "SCP02_IMPL_i1B"
        };

        const SecurityChannelProtocolImpl::Value SecurityChannelProtocolImpl::
        _xsd_SecurityChannelProtocolImpl_indexes_[14] =
        {
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP01_IMPL_I05,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP01_IMPL_I15,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I04,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I05,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I0A,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I0B,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I14,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I15,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I1A,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I1B,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I44,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I45,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I54,
          ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl::CONFIGURATION_SCP02_IMPL_I55
        };

        // SecurityLevel
        //

        SecurityLevel::
        SecurityLevel (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SecurityLevel_convert ();
        }

        SecurityLevel::
        SecurityLevel (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SecurityLevel_convert ();
        }

        SecurityLevel::
        SecurityLevel (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SecurityLevel_convert ();
        }

        SecurityLevel* SecurityLevel::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityLevel (*this, f, c);
        }

        SecurityLevel::Value SecurityLevel::
        _xsd_SecurityLevel_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SecurityLevel_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SecurityLevel_indexes_,
                            _xsd_SecurityLevel_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_SecurityLevel_indexes_ + 5 || _xsd_SecurityLevel_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SecurityLevel::
        _xsd_SecurityLevel_literals_[5] =
        {
          "C_MAC",
          "C_DEC_C_MAC",
          "R_MAC",
          "C_MAC_R_MAC",
          "C_DEC_C_MAC_R_MAC"
        };

        const SecurityLevel::Value SecurityLevel::
        _xsd_SecurityLevel_indexes_[5] =
        {
          ::Smartmatic::SAES::Common::Configuration::SecurityLevel::CONFIGURATION_C_DEC_C_MAC,
          ::Smartmatic::SAES::Common::Configuration::SecurityLevel::CONFIGURATION_C_DEC_C_MAC_R_MAC,
          ::Smartmatic::SAES::Common::Configuration::SecurityLevel::CONFIGURATION_C_MAC,
          ::Smartmatic::SAES::Common::Configuration::SecurityLevel::CONFIGURATION_C_MAC_R_MAC,
          ::Smartmatic::SAES::Common::Configuration::SecurityLevel::CONFIGURATION_R_MAC
        };

        // SecurityKeyDerivation
        //

        SecurityKeyDerivation::
        SecurityKeyDerivation (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_SecurityKeyDerivation_convert ();
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (const ::xercesc::DOMAttr& a,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_SecurityKeyDerivation_convert ();
        }

        SecurityKeyDerivation::
        SecurityKeyDerivation (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::Smartmatic::ConfigurationTypes::Flags f,
                               ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_SecurityKeyDerivation_convert ();
        }

        SecurityKeyDerivation* SecurityKeyDerivation::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SecurityKeyDerivation (*this, f, c);
        }

        SecurityKeyDerivation::Value SecurityKeyDerivation::
        _xsd_SecurityKeyDerivation_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_SecurityKeyDerivation_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_SecurityKeyDerivation_indexes_,
                            _xsd_SecurityKeyDerivation_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_SecurityKeyDerivation_indexes_ + 3 || _xsd_SecurityKeyDerivation_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const SecurityKeyDerivation::
        _xsd_SecurityKeyDerivation_literals_[3] =
        {
          "none",
          "visa2",
          "emvcps11"
        };

        const SecurityKeyDerivation::Value SecurityKeyDerivation::
        _xsd_SecurityKeyDerivation_indexes_[3] =
        {
          ::Smartmatic::SAES::Common::Configuration::SecurityKeyDerivation::CONFIGURATION_EMVCPS11,
          ::Smartmatic::SAES::Common::Configuration::SecurityKeyDerivation::CONFIGURATION_NONE,
          ::Smartmatic::SAES::Common::Configuration::SecurityKeyDerivation::CONFIGURATION_VISA2
        };

        // NivelTestConfig
        //

        NivelTestConfig::
        NivelTestConfig (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_NivelTestConfig_convert ();
        }

        NivelTestConfig::
        NivelTestConfig (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_NivelTestConfig_convert ();
        }

        NivelTestConfig::
        NivelTestConfig (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_NivelTestConfig_convert ();
        }

        NivelTestConfig* NivelTestConfig::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class NivelTestConfig (*this, f, c);
        }

        NivelTestConfig::Value NivelTestConfig::
        _xsd_NivelTestConfig_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NivelTestConfig_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_NivelTestConfig_indexes_,
                            _xsd_NivelTestConfig_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_NivelTestConfig_indexes_ + 2 || _xsd_NivelTestConfig_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const NivelTestConfig::
        _xsd_NivelTestConfig_literals_[2] =
        {
          "simple-select-applet",
          "simple-write-read"
        };

        const NivelTestConfig::Value NivelTestConfig::
        _xsd_NivelTestConfig_indexes_[2] =
        {
          ::Smartmatic::SAES::Common::Configuration::NivelTestConfig::CONFIGURATION_SIMPLE_SELECT_APPLET,
          ::Smartmatic::SAES::Common::Configuration::NivelTestConfig::CONFIGURATION_SIMPLE_WRITE_READ
        };

        // SmartCardErrorCode
        //

        SmartCardErrorCode::
        SmartCardErrorCode ()
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType > ()
        {
        }

        SmartCardErrorCode::
        SmartCardErrorCode (const ::Smartmatic::ConfigurationTypes::NonNegativeInteger& _xsd_NonNegativeInteger_base)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType > (_xsd_NonNegativeInteger_base)
        {
        }

        SmartCardErrorCode::
        SmartCardErrorCode (const SmartCardErrorCode& x,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType > (x, f, c)
        {
        }

        SmartCardErrorCode::
        SmartCardErrorCode (const ::xercesc::DOMElement& e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType > (e, f, c)
        {
        }

        SmartCardErrorCode::
        SmartCardErrorCode (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType > (a, f, c)
        {
        }

        SmartCardErrorCode::
        SmartCardErrorCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::ConfigurationTypes::Flags f,
                            ::Smartmatic::ConfigurationTypes::Container* c)
        : ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType > (s, e, f, c)
        {
        }

        SmartCardErrorCode* SmartCardErrorCode::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SmartCardErrorCode (*this, f, c);
        }

        SmartCardErrorCode::
        ~SmartCardErrorCode ()
        {
        }

        // ConfigurationElectionFilesPath
        //

        ConfigurationElectionFilesPath::
        ConfigurationElectionFilesPath ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          CodiFilesFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SAESFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ResourcesFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ImagesFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VotesFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DocsFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CodiFolder_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LogsFolderName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageHashFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageKeyFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageCrtFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionStatusFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CardListStatusFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionResourcesFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingMachineStatusFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingDeviceFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PollworkersFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StatisticsFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ActivatedCardStatisticsFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          IncidentReportFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ClosingNotesFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          XMLImageFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          AssistedActivationFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingDisabledFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PoliceNotesFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LanguageFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingCentersFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigBasePath_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SecretKeyFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          UPKeyFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          MachineKeysFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          IDCardMembersFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageSignatureFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormSignatureFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CACertificateFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ItermediateCACertificatesFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ItermediateCACertificatesFromPKCS12FileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TrustedCertificatesFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TrustedCertificatesFromPKCS12FileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PVTemplateFolderName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PVTemplateFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          GeneratedPVReportFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionResultSignatureFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          VoteStatisticsFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SignatureResourceFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LogErrorFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          LogAuditFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SSignedKeyCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SSignedCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SCryptoCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationElectionFilesPath::
        ConfigurationElectionFilesPath (const CodiFilesFolderType& CodiFilesFolder,
                                        const SAESFolderType& SAESFolder,
                                        const ResourcesFolderType& ResourcesFolder,
                                        const ImagesFolderType& ImagesFolder,
                                        const VotesFolderType& VotesFolder,
                                        const DocsFolderType& DocsFolder,
                                        const CodiFolderType& CodiFolder,
                                        const LogsFolderNameType& LogsFolderName,
                                        const TransmissionPackageFileNameType& TransmissionPackageFileName,
                                        const TransmissionPackageHashFileNameType& TransmissionPackageHashFileName,
                                        const TransmissionPackageKeyFileNameType& TransmissionPackageKeyFileName,
                                        const TransmissionPackageCrtFileNameType& TransmissionPackageCrtFileName,
                                        const PVFormFileNameType& PVFormFileName,
                                        const ElectionFileNameType& ElectionFileName,
                                        const ElectionStatusFileNameType& ElectionStatusFileName,
                                        const CardListStatusFileNameType& CardListStatusFileName,
                                        const ElectionResourcesFileNameType& ElectionResourcesFileName,
                                        const VotingMachineStatusFileNameType& VotingMachineStatusFileName,
                                        const VotingDeviceFileNameType& VotingDeviceFileName,
                                        const PollworkersFileNameType& PollworkersFileName,
                                        const StatisticsFileNameType& StatisticsFileName,
                                        const ActivatedCardStatisticsFileNameType& ActivatedCardStatisticsFileName,
                                        const IncidentReportFileNameType& IncidentReportFileName,
                                        const ClosingNotesFileNameType& ClosingNotesFileName,
                                        const XMLImageFileNameType& XMLImageFileName,
                                        const AssistedActivationFileNameType& AssistedActivationFileName,
                                        const VotingDisabledFileNameType& VotingDisabledFileName,
                                        const PoliceNotesFileNameType& PoliceNotesFileName,
                                        const LanguageFileNameType& LanguageFileName,
                                        const VotingCentersFileNameType& VotingCentersFileName,
                                        const ConfigBasePathType& ConfigBasePath,
                                        const SecretKeyFileType& SecretKeyFile,
                                        const UPKeyFileType& UPKeyFile,
                                        const MachineKeysFileType& MachineKeysFile,
                                        const IDCardMembersFileNameType& IDCardMembersFileName,
                                        const TransmissionPackageSignatureFileNameType& TransmissionPackageSignatureFileName,
                                        const PVFormSignatureFileNameType& PVFormSignatureFileName,
                                        const CACertificateFileNameType& CACertificateFileName,
                                        const ItermediateCACertificatesFileNameType& ItermediateCACertificatesFileName,
                                        const ItermediateCACertificatesFromPKCS12FileNameType& ItermediateCACertificatesFromPKCS12FileName,
                                        const TrustedCertificatesFileNameType& TrustedCertificatesFileName,
                                        const TrustedCertificatesFromPKCS12FileNameType& TrustedCertificatesFromPKCS12FileName,
                                        const PVTemplateFolderNameType& PVTemplateFolderName,
                                        const PVTemplateFileNameType& PVTemplateFileName,
                                        const GeneratedPVReportFileNameType& GeneratedPVReportFileName,
                                        const ElectionResultSignatureFileNameType& ElectionResultSignatureFileName,
                                        const VoteStatisticsFileNameType& VoteStatisticsFileName,
                                        const SignatureResourceFileNameType& SignatureResourceFileName,
                                        const LogErrorFileNameType& LogErrorFileName,
                                        const LogAuditFileNameType& LogAuditFileName)
        : ::Smartmatic::ConfigurationTypes::Type (),
          CodiFilesFolder_ (CodiFilesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SAESFolder_ (SAESFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ResourcesFolder_ (ResourcesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImagesFolder_ (ImagesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotesFolder_ (VotesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DocsFolder_ (DocsFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CodiFolder_ (CodiFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogsFolderName_ (LogsFolderName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageFileName_ (TransmissionPackageFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageHashFileName_ (TransmissionPackageHashFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageKeyFileName_ (TransmissionPackageKeyFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageCrtFileName_ (TransmissionPackageCrtFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormFileName_ (PVFormFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionFileName_ (ElectionFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionStatusFileName_ (ElectionStatusFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CardListStatusFileName_ (CardListStatusFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionResourcesFileName_ (ElectionResourcesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingMachineStatusFileName_ (VotingMachineStatusFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingDeviceFileName_ (VotingDeviceFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PollworkersFileName_ (PollworkersFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StatisticsFileName_ (StatisticsFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ActivatedCardStatisticsFileName_ (ActivatedCardStatisticsFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IncidentReportFileName_ (IncidentReportFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ClosingNotesFileName_ (ClosingNotesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          XMLImageFileName_ (XMLImageFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          AssistedActivationFileName_ (AssistedActivationFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingDisabledFileName_ (VotingDisabledFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PoliceNotesFileName_ (PoliceNotesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LanguageFileName_ (LanguageFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingCentersFileName_ (VotingCentersFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigBasePath_ (ConfigBasePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecretKeyFile_ (SecretKeyFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UPKeyFile_ (UPKeyFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          MachineKeysFile_ (MachineKeysFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IDCardMembersFileName_ (IDCardMembersFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageSignatureFileName_ (TransmissionPackageSignatureFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormSignatureFileName_ (PVFormSignatureFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CACertificateFileName_ (CACertificateFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ItermediateCACertificatesFileName_ (ItermediateCACertificatesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ItermediateCACertificatesFromPKCS12FileName_ (ItermediateCACertificatesFromPKCS12FileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TrustedCertificatesFileName_ (TrustedCertificatesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TrustedCertificatesFromPKCS12FileName_ (TrustedCertificatesFromPKCS12FileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVTemplateFolderName_ (PVTemplateFolderName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVTemplateFileName_ (PVTemplateFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          GeneratedPVReportFileName_ (GeneratedPVReportFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionResultSignatureFileName_ (ElectionResultSignatureFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VoteStatisticsFileName_ (VoteStatisticsFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SignatureResourceFileName_ (SignatureResourceFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogErrorFileName_ (LogErrorFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogAuditFileName_ (LogAuditFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SSignedKeyCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SSignedCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SCryptoCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationElectionFilesPath::
        ConfigurationElectionFilesPath (const CodiFilesFolderType& CodiFilesFolder,
                                        const SAESFolderType& SAESFolder,
                                        const ResourcesFolderType& ResourcesFolder,
                                        const ImagesFolderType& ImagesFolder,
                                        const VotesFolderType& VotesFolder,
                                        const DocsFolderType& DocsFolder,
                                        const CodiFolderType& CodiFolder,
                                        const LogsFolderNameType& LogsFolderName,
                                        const TransmissionPackageFileNameType& TransmissionPackageFileName,
                                        const TransmissionPackageHashFileNameType& TransmissionPackageHashFileName,
                                        const TransmissionPackageKeyFileNameType& TransmissionPackageKeyFileName,
                                        const TransmissionPackageCrtFileNameType& TransmissionPackageCrtFileName,
                                        const PVFormFileNameType& PVFormFileName,
                                        const ElectionFileNameType& ElectionFileName,
                                        const ElectionStatusFileNameType& ElectionStatusFileName,
                                        const CardListStatusFileNameType& CardListStatusFileName,
                                        const ElectionResourcesFileNameType& ElectionResourcesFileName,
                                        const VotingMachineStatusFileNameType& VotingMachineStatusFileName,
                                        const VotingDeviceFileNameType& VotingDeviceFileName,
                                        const PollworkersFileNameType& PollworkersFileName,
                                        const StatisticsFileNameType& StatisticsFileName,
                                        const ActivatedCardStatisticsFileNameType& ActivatedCardStatisticsFileName,
                                        const IncidentReportFileNameType& IncidentReportFileName,
                                        const ClosingNotesFileNameType& ClosingNotesFileName,
                                        const XMLImageFileNameType& XMLImageFileName,
                                        const AssistedActivationFileNameType& AssistedActivationFileName,
                                        const VotingDisabledFileNameType& VotingDisabledFileName,
                                        const PoliceNotesFileNameType& PoliceNotesFileName,
                                        const LanguageFileNameType& LanguageFileName,
                                        const VotingCentersFileNameType& VotingCentersFileName,
                                        ::std::auto_ptr< ConfigBasePathType >& ConfigBasePath,
                                        const SecretKeyFileType& SecretKeyFile,
                                        const UPKeyFileType& UPKeyFile,
                                        const MachineKeysFileType& MachineKeysFile,
                                        const IDCardMembersFileNameType& IDCardMembersFileName,
                                        const TransmissionPackageSignatureFileNameType& TransmissionPackageSignatureFileName,
                                        const PVFormSignatureFileNameType& PVFormSignatureFileName,
                                        const CACertificateFileNameType& CACertificateFileName,
                                        const ItermediateCACertificatesFileNameType& ItermediateCACertificatesFileName,
                                        const ItermediateCACertificatesFromPKCS12FileNameType& ItermediateCACertificatesFromPKCS12FileName,
                                        const TrustedCertificatesFileNameType& TrustedCertificatesFileName,
                                        const TrustedCertificatesFromPKCS12FileNameType& TrustedCertificatesFromPKCS12FileName,
                                        const PVTemplateFolderNameType& PVTemplateFolderName,
                                        const PVTemplateFileNameType& PVTemplateFileName,
                                        const GeneratedPVReportFileNameType& GeneratedPVReportFileName,
                                        const ElectionResultSignatureFileNameType& ElectionResultSignatureFileName,
                                        const VoteStatisticsFileNameType& VoteStatisticsFileName,
                                        const SignatureResourceFileNameType& SignatureResourceFileName,
                                        const LogErrorFileNameType& LogErrorFileName,
                                        const LogAuditFileNameType& LogAuditFileName)
        : ::Smartmatic::ConfigurationTypes::Type (),
          CodiFilesFolder_ (CodiFilesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SAESFolder_ (SAESFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ResourcesFolder_ (ResourcesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ImagesFolder_ (ImagesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotesFolder_ (VotesFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DocsFolder_ (DocsFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CodiFolder_ (CodiFolder, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogsFolderName_ (LogsFolderName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageFileName_ (TransmissionPackageFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageHashFileName_ (TransmissionPackageHashFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageKeyFileName_ (TransmissionPackageKeyFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageCrtFileName_ (TransmissionPackageCrtFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormFileName_ (PVFormFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionFileName_ (ElectionFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionStatusFileName_ (ElectionStatusFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CardListStatusFileName_ (CardListStatusFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionResourcesFileName_ (ElectionResourcesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingMachineStatusFileName_ (VotingMachineStatusFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingDeviceFileName_ (VotingDeviceFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PollworkersFileName_ (PollworkersFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StatisticsFileName_ (StatisticsFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ActivatedCardStatisticsFileName_ (ActivatedCardStatisticsFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IncidentReportFileName_ (IncidentReportFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ClosingNotesFileName_ (ClosingNotesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          XMLImageFileName_ (XMLImageFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          AssistedActivationFileName_ (AssistedActivationFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingDisabledFileName_ (VotingDisabledFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PoliceNotesFileName_ (PoliceNotesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LanguageFileName_ (LanguageFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VotingCentersFileName_ (VotingCentersFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigBasePath_ (ConfigBasePath, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SecretKeyFile_ (SecretKeyFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UPKeyFile_ (UPKeyFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          MachineKeysFile_ (MachineKeysFile, ::Smartmatic::ConfigurationTypes::Flags (), this),
          IDCardMembersFileName_ (IDCardMembersFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TransmissionPackageSignatureFileName_ (TransmissionPackageSignatureFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVFormSignatureFileName_ (PVFormSignatureFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CACertificateFileName_ (CACertificateFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ItermediateCACertificatesFileName_ (ItermediateCACertificatesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ItermediateCACertificatesFromPKCS12FileName_ (ItermediateCACertificatesFromPKCS12FileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TrustedCertificatesFileName_ (TrustedCertificatesFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TrustedCertificatesFromPKCS12FileName_ (TrustedCertificatesFromPKCS12FileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVTemplateFolderName_ (PVTemplateFolderName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PVTemplateFileName_ (PVTemplateFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          GeneratedPVReportFileName_ (GeneratedPVReportFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ElectionResultSignatureFileName_ (ElectionResultSignatureFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          VoteStatisticsFileName_ (VoteStatisticsFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          SignatureResourceFileName_ (SignatureResourceFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogErrorFileName_ (LogErrorFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          LogAuditFileName_ (LogAuditFileName, ::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SSignedKeyCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SSignedCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          X7SCryptoCertifiedFileName_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationElectionFilesPath::
        ConfigurationElectionFilesPath (const ConfigurationElectionFilesPath& x,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          CodiFilesFolder_ (x.CodiFilesFolder_, f, this),
          SAESFolder_ (x.SAESFolder_, f, this),
          ResourcesFolder_ (x.ResourcesFolder_, f, this),
          ImagesFolder_ (x.ImagesFolder_, f, this),
          VotesFolder_ (x.VotesFolder_, f, this),
          DocsFolder_ (x.DocsFolder_, f, this),
          CodiFolder_ (x.CodiFolder_, f, this),
          LogsFolderName_ (x.LogsFolderName_, f, this),
          TransmissionPackageFileName_ (x.TransmissionPackageFileName_, f, this),
          TransmissionPackageHashFileName_ (x.TransmissionPackageHashFileName_, f, this),
          TransmissionPackageKeyFileName_ (x.TransmissionPackageKeyFileName_, f, this),
          TransmissionPackageCrtFileName_ (x.TransmissionPackageCrtFileName_, f, this),
          PVFormFileName_ (x.PVFormFileName_, f, this),
          ElectionFileName_ (x.ElectionFileName_, f, this),
          ElectionStatusFileName_ (x.ElectionStatusFileName_, f, this),
          CardListStatusFileName_ (x.CardListStatusFileName_, f, this),
          ElectionResourcesFileName_ (x.ElectionResourcesFileName_, f, this),
          VotingMachineStatusFileName_ (x.VotingMachineStatusFileName_, f, this),
          VotingDeviceFileName_ (x.VotingDeviceFileName_, f, this),
          PollworkersFileName_ (x.PollworkersFileName_, f, this),
          StatisticsFileName_ (x.StatisticsFileName_, f, this),
          ActivatedCardStatisticsFileName_ (x.ActivatedCardStatisticsFileName_, f, this),
          IncidentReportFileName_ (x.IncidentReportFileName_, f, this),
          ClosingNotesFileName_ (x.ClosingNotesFileName_, f, this),
          XMLImageFileName_ (x.XMLImageFileName_, f, this),
          AssistedActivationFileName_ (x.AssistedActivationFileName_, f, this),
          VotingDisabledFileName_ (x.VotingDisabledFileName_, f, this),
          PoliceNotesFileName_ (x.PoliceNotesFileName_, f, this),
          LanguageFileName_ (x.LanguageFileName_, f, this),
          VotingCentersFileName_ (x.VotingCentersFileName_, f, this),
          ConfigBasePath_ (x.ConfigBasePath_, f, this),
          SecretKeyFile_ (x.SecretKeyFile_, f, this),
          UPKeyFile_ (x.UPKeyFile_, f, this),
          MachineKeysFile_ (x.MachineKeysFile_, f, this),
          IDCardMembersFileName_ (x.IDCardMembersFileName_, f, this),
          TransmissionPackageSignatureFileName_ (x.TransmissionPackageSignatureFileName_, f, this),
          PVFormSignatureFileName_ (x.PVFormSignatureFileName_, f, this),
          CACertificateFileName_ (x.CACertificateFileName_, f, this),
          ItermediateCACertificatesFileName_ (x.ItermediateCACertificatesFileName_, f, this),
          ItermediateCACertificatesFromPKCS12FileName_ (x.ItermediateCACertificatesFromPKCS12FileName_, f, this),
          TrustedCertificatesFileName_ (x.TrustedCertificatesFileName_, f, this),
          TrustedCertificatesFromPKCS12FileName_ (x.TrustedCertificatesFromPKCS12FileName_, f, this),
          PVTemplateFolderName_ (x.PVTemplateFolderName_, f, this),
          PVTemplateFileName_ (x.PVTemplateFileName_, f, this),
          GeneratedPVReportFileName_ (x.GeneratedPVReportFileName_, f, this),
          ElectionResultSignatureFileName_ (x.ElectionResultSignatureFileName_, f, this),
          VoteStatisticsFileName_ (x.VoteStatisticsFileName_, f, this),
          SignatureResourceFileName_ (x.SignatureResourceFileName_, f, this),
          LogErrorFileName_ (x.LogErrorFileName_, f, this),
          LogAuditFileName_ (x.LogAuditFileName_, f, this),
          X7SSignedKeyCertifiedFileName_ (x.X7SSignedKeyCertifiedFileName_, f, this),
          X7SSignedCertifiedFileName_ (x.X7SSignedCertifiedFileName_, f, this),
          X7SCryptoCertifiedFileName_ (x.X7SCryptoCertifiedFileName_, f, this)
        {
        }

        ConfigurationElectionFilesPath::
        ConfigurationElectionFilesPath (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          CodiFilesFolder_ (f, this),
          SAESFolder_ (f, this),
          ResourcesFolder_ (f, this),
          ImagesFolder_ (f, this),
          VotesFolder_ (f, this),
          DocsFolder_ (f, this),
          CodiFolder_ (f, this),
          LogsFolderName_ (f, this),
          TransmissionPackageFileName_ (f, this),
          TransmissionPackageHashFileName_ (f, this),
          TransmissionPackageKeyFileName_ (f, this),
          TransmissionPackageCrtFileName_ (f, this),
          PVFormFileName_ (f, this),
          ElectionFileName_ (f, this),
          ElectionStatusFileName_ (f, this),
          CardListStatusFileName_ (f, this),
          ElectionResourcesFileName_ (f, this),
          VotingMachineStatusFileName_ (f, this),
          VotingDeviceFileName_ (f, this),
          PollworkersFileName_ (f, this),
          StatisticsFileName_ (f, this),
          ActivatedCardStatisticsFileName_ (f, this),
          IncidentReportFileName_ (f, this),
          ClosingNotesFileName_ (f, this),
          XMLImageFileName_ (f, this),
          AssistedActivationFileName_ (f, this),
          VotingDisabledFileName_ (f, this),
          PoliceNotesFileName_ (f, this),
          LanguageFileName_ (f, this),
          VotingCentersFileName_ (f, this),
          ConfigBasePath_ (f, this),
          SecretKeyFile_ (f, this),
          UPKeyFile_ (f, this),
          MachineKeysFile_ (f, this),
          IDCardMembersFileName_ (f, this),
          TransmissionPackageSignatureFileName_ (f, this),
          PVFormSignatureFileName_ (f, this),
          CACertificateFileName_ (f, this),
          ItermediateCACertificatesFileName_ (f, this),
          ItermediateCACertificatesFromPKCS12FileName_ (f, this),
          TrustedCertificatesFileName_ (f, this),
          TrustedCertificatesFromPKCS12FileName_ (f, this),
          PVTemplateFolderName_ (f, this),
          PVTemplateFileName_ (f, this),
          GeneratedPVReportFileName_ (f, this),
          ElectionResultSignatureFileName_ (f, this),
          VoteStatisticsFileName_ (f, this),
          SignatureResourceFileName_ (f, this),
          LogErrorFileName_ (f, this),
          LogAuditFileName_ (f, this),
          X7SSignedKeyCertifiedFileName_ (f, this),
          X7SSignedCertifiedFileName_ (f, this),
          X7SCryptoCertifiedFileName_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ConfigurationElectionFilesPath::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CodiFilesFolder
            //
            if (n.name () == "CodiFilesFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CodiFilesFolderType > r (
                CodiFilesFolderTraits::create (i, f, this));

              if (!CodiFilesFolder_.present ())
              {
                this->CodiFilesFolder_.set (r);
                continue;
              }
            }

            // SAESFolder
            //
            if (n.name () == "SAESFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SAESFolderType > r (
                SAESFolderTraits::create (i, f, this));

              if (!SAESFolder_.present ())
              {
                this->SAESFolder_.set (r);
                continue;
              }
            }

            // ResourcesFolder
            //
            if (n.name () == "ResourcesFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ResourcesFolderType > r (
                ResourcesFolderTraits::create (i, f, this));

              if (!ResourcesFolder_.present ())
              {
                this->ResourcesFolder_.set (r);
                continue;
              }
            }

            // ImagesFolder
            //
            if (n.name () == "ImagesFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ImagesFolderType > r (
                ImagesFolderTraits::create (i, f, this));

              if (!ImagesFolder_.present ())
              {
                this->ImagesFolder_.set (r);
                continue;
              }
            }

            // VotesFolder
            //
            if (n.name () == "VotesFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< VotesFolderType > r (
                VotesFolderTraits::create (i, f, this));

              if (!VotesFolder_.present ())
              {
                this->VotesFolder_.set (r);
                continue;
              }
            }

            // DocsFolder
            //
            if (n.name () == "DocsFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DocsFolderType > r (
                DocsFolderTraits::create (i, f, this));

              if (!DocsFolder_.present ())
              {
                this->DocsFolder_.set (r);
                continue;
              }
            }

            // CodiFolder
            //
            if (n.name () == "CodiFolder" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CodiFolderType > r (
                CodiFolderTraits::create (i, f, this));

              if (!CodiFolder_.present ())
              {
                this->CodiFolder_.set (r);
                continue;
              }
            }

            // LogsFolderName
            //
            if (n.name () == "LogsFolderName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LogsFolderNameType > r (
                LogsFolderNameTraits::create (i, f, this));

              if (!LogsFolderName_.present ())
              {
                this->LogsFolderName_.set (r);
                continue;
              }
            }

            // TransmissionPackageFileName
            //
            if (n.name () == "TransmissionPackageFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TransmissionPackageFileNameType > r (
                TransmissionPackageFileNameTraits::create (i, f, this));

              if (!TransmissionPackageFileName_.present ())
              {
                this->TransmissionPackageFileName_.set (r);
                continue;
              }
            }

            // TransmissionPackageHashFileName
            //
            if (n.name () == "TransmissionPackageHashFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TransmissionPackageHashFileNameType > r (
                TransmissionPackageHashFileNameTraits::create (i, f, this));

              if (!TransmissionPackageHashFileName_.present ())
              {
                this->TransmissionPackageHashFileName_.set (r);
                continue;
              }
            }

            // TransmissionPackageKeyFileName
            //
            if (n.name () == "TransmissionPackageKeyFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TransmissionPackageKeyFileNameType > r (
                TransmissionPackageKeyFileNameTraits::create (i, f, this));

              if (!TransmissionPackageKeyFileName_.present ())
              {
                this->TransmissionPackageKeyFileName_.set (r);
                continue;
              }
            }

            // TransmissionPackageCrtFileName
            //
            if (n.name () == "TransmissionPackageCrtFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TransmissionPackageCrtFileNameType > r (
                TransmissionPackageCrtFileNameTraits::create (i, f, this));

              if (!TransmissionPackageCrtFileName_.present ())
              {
                this->TransmissionPackageCrtFileName_.set (r);
                continue;
              }
            }

            // PVFormFileName
            //
            if (n.name () == "PVFormFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PVFormFileNameType > r (
                PVFormFileNameTraits::create (i, f, this));

              if (!PVFormFileName_.present ())
              {
                this->PVFormFileName_.set (r);
                continue;
              }
            }

            // ElectionFileName
            //
            if (n.name () == "ElectionFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ElectionFileNameType > r (
                ElectionFileNameTraits::create (i, f, this));

              if (!ElectionFileName_.present ())
              {
                this->ElectionFileName_.set (r);
                continue;
              }
            }

            // ElectionStatusFileName
            //
            if (n.name () == "ElectionStatusFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ElectionStatusFileNameType > r (
                ElectionStatusFileNameTraits::create (i, f, this));

              if (!ElectionStatusFileName_.present ())
              {
                this->ElectionStatusFileName_.set (r);
                continue;
              }
            }

            // CardListStatusFileName
            //
            if (n.name () == "CardListStatusFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CardListStatusFileNameType > r (
                CardListStatusFileNameTraits::create (i, f, this));

              if (!CardListStatusFileName_.present ())
              {
                this->CardListStatusFileName_.set (r);
                continue;
              }
            }

            // ElectionResourcesFileName
            //
            if (n.name () == "ElectionResourcesFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ElectionResourcesFileNameType > r (
                ElectionResourcesFileNameTraits::create (i, f, this));

              if (!ElectionResourcesFileName_.present ())
              {
                this->ElectionResourcesFileName_.set (r);
                continue;
              }
            }

            // VotingMachineStatusFileName
            //
            if (n.name () == "VotingMachineStatusFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< VotingMachineStatusFileNameType > r (
                VotingMachineStatusFileNameTraits::create (i, f, this));

              if (!VotingMachineStatusFileName_.present ())
              {
                this->VotingMachineStatusFileName_.set (r);
                continue;
              }
            }

            // VotingDeviceFileName
            //
            if (n.name () == "VotingDeviceFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< VotingDeviceFileNameType > r (
                VotingDeviceFileNameTraits::create (i, f, this));

              if (!VotingDeviceFileName_.present ())
              {
                this->VotingDeviceFileName_.set (r);
                continue;
              }
            }

            // PollworkersFileName
            //
            if (n.name () == "PollworkersFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PollworkersFileNameType > r (
                PollworkersFileNameTraits::create (i, f, this));

              if (!PollworkersFileName_.present ())
              {
                this->PollworkersFileName_.set (r);
                continue;
              }
            }

            // StatisticsFileName
            //
            if (n.name () == "StatisticsFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< StatisticsFileNameType > r (
                StatisticsFileNameTraits::create (i, f, this));

              if (!StatisticsFileName_.present ())
              {
                this->StatisticsFileName_.set (r);
                continue;
              }
            }

            // ActivatedCardStatisticsFileName
            //
            if (n.name () == "ActivatedCardStatisticsFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ActivatedCardStatisticsFileNameType > r (
                ActivatedCardStatisticsFileNameTraits::create (i, f, this));

              if (!ActivatedCardStatisticsFileName_.present ())
              {
                this->ActivatedCardStatisticsFileName_.set (r);
                continue;
              }
            }

            // IncidentReportFileName
            //
            if (n.name () == "IncidentReportFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< IncidentReportFileNameType > r (
                IncidentReportFileNameTraits::create (i, f, this));

              if (!IncidentReportFileName_.present ())
              {
                this->IncidentReportFileName_.set (r);
                continue;
              }
            }

            // ClosingNotesFileName
            //
            if (n.name () == "ClosingNotesFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ClosingNotesFileNameType > r (
                ClosingNotesFileNameTraits::create (i, f, this));

              if (!ClosingNotesFileName_.present ())
              {
                this->ClosingNotesFileName_.set (r);
                continue;
              }
            }

            // XMLImageFileName
            //
            if (n.name () == "XMLImageFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< XMLImageFileNameType > r (
                XMLImageFileNameTraits::create (i, f, this));

              if (!XMLImageFileName_.present ())
              {
                this->XMLImageFileName_.set (r);
                continue;
              }
            }

            // AssistedActivationFileName
            //
            if (n.name () == "AssistedActivationFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< AssistedActivationFileNameType > r (
                AssistedActivationFileNameTraits::create (i, f, this));

              if (!AssistedActivationFileName_.present ())
              {
                this->AssistedActivationFileName_.set (r);
                continue;
              }
            }

            // VotingDisabledFileName
            //
            if (n.name () == "VotingDisabledFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< VotingDisabledFileNameType > r (
                VotingDisabledFileNameTraits::create (i, f, this));

              if (!VotingDisabledFileName_.present ())
              {
                this->VotingDisabledFileName_.set (r);
                continue;
              }
            }

            // PoliceNotesFileName
            //
            if (n.name () == "PoliceNotesFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PoliceNotesFileNameType > r (
                PoliceNotesFileNameTraits::create (i, f, this));

              if (!PoliceNotesFileName_.present ())
              {
                this->PoliceNotesFileName_.set (r);
                continue;
              }
            }

            // LanguageFileName
            //
            if (n.name () == "LanguageFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LanguageFileNameType > r (
                LanguageFileNameTraits::create (i, f, this));

              if (!LanguageFileName_.present ())
              {
                this->LanguageFileName_.set (r);
                continue;
              }
            }

            // VotingCentersFileName
            //
            if (n.name () == "VotingCentersFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< VotingCentersFileNameType > r (
                VotingCentersFileNameTraits::create (i, f, this));

              if (!VotingCentersFileName_.present ())
              {
                this->VotingCentersFileName_.set (r);
                continue;
              }
            }

            // ConfigBasePath
            //
            if (n.name () == "ConfigBasePath" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ConfigBasePathType > r (
                ConfigBasePathTraits::create (i, f, this));

              if (!ConfigBasePath_.present ())
              {
                this->ConfigBasePath_.set (r);
                continue;
              }
            }

            // SecretKeyFile
            //
            if (n.name () == "SecretKeyFile" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SecretKeyFileType > r (
                SecretKeyFileTraits::create (i, f, this));

              if (!SecretKeyFile_.present ())
              {
                this->SecretKeyFile_.set (r);
                continue;
              }
            }

            // UPKeyFile
            //
            if (n.name () == "UPKeyFile" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< UPKeyFileType > r (
                UPKeyFileTraits::create (i, f, this));

              if (!UPKeyFile_.present ())
              {
                this->UPKeyFile_.set (r);
                continue;
              }
            }

            // MachineKeysFile
            //
            if (n.name () == "MachineKeysFile" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< MachineKeysFileType > r (
                MachineKeysFileTraits::create (i, f, this));

              if (!MachineKeysFile_.present ())
              {
                this->MachineKeysFile_.set (r);
                continue;
              }
            }

            // IDCardMembersFileName
            //
            if (n.name () == "IDCardMembersFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< IDCardMembersFileNameType > r (
                IDCardMembersFileNameTraits::create (i, f, this));

              if (!IDCardMembersFileName_.present ())
              {
                this->IDCardMembersFileName_.set (r);
                continue;
              }
            }

            // TransmissionPackageSignatureFileName
            //
            if (n.name () == "TransmissionPackageSignatureFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TransmissionPackageSignatureFileNameType > r (
                TransmissionPackageSignatureFileNameTraits::create (i, f, this));

              if (!TransmissionPackageSignatureFileName_.present ())
              {
                this->TransmissionPackageSignatureFileName_.set (r);
                continue;
              }
            }

            // PVFormSignatureFileName
            //
            if (n.name () == "PVFormSignatureFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PVFormSignatureFileNameType > r (
                PVFormSignatureFileNameTraits::create (i, f, this));

              if (!PVFormSignatureFileName_.present ())
              {
                this->PVFormSignatureFileName_.set (r);
                continue;
              }
            }

            // CACertificateFileName
            //
            if (n.name () == "CACertificateFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CACertificateFileNameType > r (
                CACertificateFileNameTraits::create (i, f, this));

              if (!CACertificateFileName_.present ())
              {
                this->CACertificateFileName_.set (r);
                continue;
              }
            }

            // ItermediateCACertificatesFileName
            //
            if (n.name () == "ItermediateCACertificatesFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ItermediateCACertificatesFileNameType > r (
                ItermediateCACertificatesFileNameTraits::create (i, f, this));

              if (!ItermediateCACertificatesFileName_.present ())
              {
                this->ItermediateCACertificatesFileName_.set (r);
                continue;
              }
            }

            // ItermediateCACertificatesFromPKCS12FileName
            //
            if (n.name () == "ItermediateCACertificatesFromPKCS12FileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ItermediateCACertificatesFromPKCS12FileNameType > r (
                ItermediateCACertificatesFromPKCS12FileNameTraits::create (i, f, this));

              if (!ItermediateCACertificatesFromPKCS12FileName_.present ())
              {
                this->ItermediateCACertificatesFromPKCS12FileName_.set (r);
                continue;
              }
            }

            // TrustedCertificatesFileName
            //
            if (n.name () == "TrustedCertificatesFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TrustedCertificatesFileNameType > r (
                TrustedCertificatesFileNameTraits::create (i, f, this));

              if (!TrustedCertificatesFileName_.present ())
              {
                this->TrustedCertificatesFileName_.set (r);
                continue;
              }
            }

            // TrustedCertificatesFromPKCS12FileName
            //
            if (n.name () == "TrustedCertificatesFromPKCS12FileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< TrustedCertificatesFromPKCS12FileNameType > r (
                TrustedCertificatesFromPKCS12FileNameTraits::create (i, f, this));

              if (!TrustedCertificatesFromPKCS12FileName_.present ())
              {
                this->TrustedCertificatesFromPKCS12FileName_.set (r);
                continue;
              }
            }

            // PVTemplateFolderName
            //
            if (n.name () == "PVTemplateFolderName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PVTemplateFolderNameType > r (
                PVTemplateFolderNameTraits::create (i, f, this));

              if (!PVTemplateFolderName_.present ())
              {
                this->PVTemplateFolderName_.set (r);
                continue;
              }
            }

            // PVTemplateFileName
            //
            if (n.name () == "PVTemplateFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PVTemplateFileNameType > r (
                PVTemplateFileNameTraits::create (i, f, this));

              if (!PVTemplateFileName_.present ())
              {
                this->PVTemplateFileName_.set (r);
                continue;
              }
            }

            // GeneratedPVReportFileName
            //
            if (n.name () == "GeneratedPVReportFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< GeneratedPVReportFileNameType > r (
                GeneratedPVReportFileNameTraits::create (i, f, this));

              if (!GeneratedPVReportFileName_.present ())
              {
                this->GeneratedPVReportFileName_.set (r);
                continue;
              }
            }

            // ElectionResultSignatureFileName
            //
            if (n.name () == "ElectionResultSignatureFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< ElectionResultSignatureFileNameType > r (
                ElectionResultSignatureFileNameTraits::create (i, f, this));

              if (!ElectionResultSignatureFileName_.present ())
              {
                this->ElectionResultSignatureFileName_.set (r);
                continue;
              }
            }

            // VoteStatisticsFileName
            //
            if (n.name () == "VoteStatisticsFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< VoteStatisticsFileNameType > r (
                VoteStatisticsFileNameTraits::create (i, f, this));

              if (!VoteStatisticsFileName_.present ())
              {
                this->VoteStatisticsFileName_.set (r);
                continue;
              }
            }

            // SignatureResourceFileName
            //
            if (n.name () == "SignatureResourceFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< SignatureResourceFileNameType > r (
                SignatureResourceFileNameTraits::create (i, f, this));

              if (!SignatureResourceFileName_.present ())
              {
                this->SignatureResourceFileName_.set (r);
                continue;
              }
            }

            // LogErrorFileName
            //
            if (n.name () == "LogErrorFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LogErrorFileNameType > r (
                LogErrorFileNameTraits::create (i, f, this));

              if (!LogErrorFileName_.present ())
              {
                this->LogErrorFileName_.set (r);
                continue;
              }
            }

            // LogAuditFileName
            //
            if (n.name () == "LogAuditFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< LogAuditFileNameType > r (
                LogAuditFileNameTraits::create (i, f, this));

              if (!LogAuditFileName_.present ())
              {
                this->LogAuditFileName_.set (r);
                continue;
              }
            }

            // X7SSignedKeyCertifiedFileName
            //
            if (n.name () == "X7SSignedKeyCertifiedFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< X7SSignedKeyCertifiedFileNameType > r (
                X7SSignedKeyCertifiedFileNameTraits::create (i, f, this));

              if (!this->X7SSignedKeyCertifiedFileName_)
              {
                this->X7SSignedKeyCertifiedFileName_.set (r);
                continue;
              }
            }

            // X7SSignedCertifiedFileName
            //
            if (n.name () == "X7SSignedCertifiedFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< X7SSignedCertifiedFileNameType > r (
                X7SSignedCertifiedFileNameTraits::create (i, f, this));

              if (!this->X7SSignedCertifiedFileName_)
              {
                this->X7SSignedCertifiedFileName_.set (r);
                continue;
              }
            }

            // X7SCryptoCertifiedFileName
            //
            if (n.name () == "X7SCryptoCertifiedFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< X7SCryptoCertifiedFileNameType > r (
                X7SCryptoCertifiedFileNameTraits::create (i, f, this));

              if (!this->X7SCryptoCertifiedFileName_)
              {
                this->X7SCryptoCertifiedFileName_.set (r);
                continue;
              }
            }

            break;
          }

          if (!CodiFilesFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CodiFilesFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SAESFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SAESFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ResourcesFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ResourcesFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ImagesFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ImagesFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VotesFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotesFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DocsFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DocsFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CodiFolder_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CodiFolder",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LogsFolderName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogsFolderName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TransmissionPackageFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TransmissionPackageFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TransmissionPackageHashFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TransmissionPackageHashFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TransmissionPackageKeyFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TransmissionPackageKeyFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TransmissionPackageCrtFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TransmissionPackageCrtFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PVFormFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PVFormFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ElectionFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElectionFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ElectionStatusFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElectionStatusFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CardListStatusFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CardListStatusFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ElectionResourcesFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElectionResourcesFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VotingMachineStatusFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotingMachineStatusFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VotingDeviceFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotingDeviceFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PollworkersFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PollworkersFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!StatisticsFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StatisticsFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ActivatedCardStatisticsFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivatedCardStatisticsFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!IncidentReportFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IncidentReportFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ClosingNotesFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ClosingNotesFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!XMLImageFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "XMLImageFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!AssistedActivationFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AssistedActivationFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VotingDisabledFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotingDisabledFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PoliceNotesFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PoliceNotesFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LanguageFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LanguageFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VotingCentersFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotingCentersFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ConfigBasePath_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ConfigBasePath",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SecretKeyFile_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SecretKeyFile",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!UPKeyFile_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UPKeyFile",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!MachineKeysFile_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "MachineKeysFile",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!IDCardMembersFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IDCardMembersFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TransmissionPackageSignatureFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TransmissionPackageSignatureFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PVFormSignatureFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PVFormSignatureFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CACertificateFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CACertificateFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ItermediateCACertificatesFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ItermediateCACertificatesFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ItermediateCACertificatesFromPKCS12FileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ItermediateCACertificatesFromPKCS12FileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TrustedCertificatesFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TrustedCertificatesFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TrustedCertificatesFromPKCS12FileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TrustedCertificatesFromPKCS12FileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PVTemplateFolderName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PVTemplateFolderName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PVTemplateFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PVTemplateFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!GeneratedPVReportFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "GeneratedPVReportFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ElectionResultSignatureFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ElectionResultSignatureFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!VoteStatisticsFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VoteStatisticsFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!SignatureResourceFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SignatureResourceFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LogErrorFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogErrorFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!LogAuditFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "LogAuditFileName",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        ConfigurationElectionFilesPath* ConfigurationElectionFilesPath::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class ConfigurationElectionFilesPath (*this, f, c);
        }

        ConfigurationElectionFilesPath::
        ~ConfigurationElectionFilesPath ()
        {
        }

        bool
        operator== (const ConfigurationElectionFilesPath& x, const ConfigurationElectionFilesPath& y)
        {
          if (!(x.getCodiFilesFolder () == y.getCodiFilesFolder ()))
            return false;

          if (!(x.getSAESFolder () == y.getSAESFolder ()))
            return false;

          if (!(x.getResourcesFolder () == y.getResourcesFolder ()))
            return false;

          if (!(x.getImagesFolder () == y.getImagesFolder ()))
            return false;

          if (!(x.getVotesFolder () == y.getVotesFolder ()))
            return false;

          if (!(x.getDocsFolder () == y.getDocsFolder ()))
            return false;

          if (!(x.getCodiFolder () == y.getCodiFolder ()))
            return false;

          if (!(x.getLogsFolderName () == y.getLogsFolderName ()))
            return false;

          if (!(x.getTransmissionPackageFileName () == y.getTransmissionPackageFileName ()))
            return false;

          if (!(x.getTransmissionPackageHashFileName () == y.getTransmissionPackageHashFileName ()))
            return false;

          if (!(x.getTransmissionPackageKeyFileName () == y.getTransmissionPackageKeyFileName ()))
            return false;

          if (!(x.getTransmissionPackageCrtFileName () == y.getTransmissionPackageCrtFileName ()))
            return false;

          if (!(x.getPVFormFileName () == y.getPVFormFileName ()))
            return false;

          if (!(x.getElectionFileName () == y.getElectionFileName ()))
            return false;

          if (!(x.getElectionStatusFileName () == y.getElectionStatusFileName ()))
            return false;

          if (!(x.getCardListStatusFileName () == y.getCardListStatusFileName ()))
            return false;

          if (!(x.getElectionResourcesFileName () == y.getElectionResourcesFileName ()))
            return false;

          if (!(x.getVotingMachineStatusFileName () == y.getVotingMachineStatusFileName ()))
            return false;

          if (!(x.getVotingDeviceFileName () == y.getVotingDeviceFileName ()))
            return false;

          if (!(x.getPollworkersFileName () == y.getPollworkersFileName ()))
            return false;

          if (!(x.getStatisticsFileName () == y.getStatisticsFileName ()))
            return false;

          if (!(x.getActivatedCardStatisticsFileName () == y.getActivatedCardStatisticsFileName ()))
            return false;

          if (!(x.getIncidentReportFileName () == y.getIncidentReportFileName ()))
            return false;

          if (!(x.getClosingNotesFileName () == y.getClosingNotesFileName ()))
            return false;

          if (!(x.getXMLImageFileName () == y.getXMLImageFileName ()))
            return false;

          if (!(x.getAssistedActivationFileName () == y.getAssistedActivationFileName ()))
            return false;

          if (!(x.getVotingDisabledFileName () == y.getVotingDisabledFileName ()))
            return false;

          if (!(x.getPoliceNotesFileName () == y.getPoliceNotesFileName ()))
            return false;

          if (!(x.getLanguageFileName () == y.getLanguageFileName ()))
            return false;

          if (!(x.getVotingCentersFileName () == y.getVotingCentersFileName ()))
            return false;

          if (!(x.getConfigBasePath () == y.getConfigBasePath ()))
            return false;

          if (!(x.getSecretKeyFile () == y.getSecretKeyFile ()))
            return false;

          if (!(x.getUPKeyFile () == y.getUPKeyFile ()))
            return false;

          if (!(x.getMachineKeysFile () == y.getMachineKeysFile ()))
            return false;

          if (!(x.getIDCardMembersFileName () == y.getIDCardMembersFileName ()))
            return false;

          if (!(x.getTransmissionPackageSignatureFileName () == y.getTransmissionPackageSignatureFileName ()))
            return false;

          if (!(x.getPVFormSignatureFileName () == y.getPVFormSignatureFileName ()))
            return false;

          if (!(x.getCACertificateFileName () == y.getCACertificateFileName ()))
            return false;

          if (!(x.getItermediateCACertificatesFileName () == y.getItermediateCACertificatesFileName ()))
            return false;

          if (!(x.getItermediateCACertificatesFromPKCS12FileName () == y.getItermediateCACertificatesFromPKCS12FileName ()))
            return false;

          if (!(x.getTrustedCertificatesFileName () == y.getTrustedCertificatesFileName ()))
            return false;

          if (!(x.getTrustedCertificatesFromPKCS12FileName () == y.getTrustedCertificatesFromPKCS12FileName ()))
            return false;

          if (!(x.getPVTemplateFolderName () == y.getPVTemplateFolderName ()))
            return false;

          if (!(x.getPVTemplateFileName () == y.getPVTemplateFileName ()))
            return false;

          if (!(x.getGeneratedPVReportFileName () == y.getGeneratedPVReportFileName ()))
            return false;

          if (!(x.getElectionResultSignatureFileName () == y.getElectionResultSignatureFileName ()))
            return false;

          if (!(x.getVoteStatisticsFileName () == y.getVoteStatisticsFileName ()))
            return false;

          if (!(x.getSignatureResourceFileName () == y.getSignatureResourceFileName ()))
            return false;

          if (!(x.getLogErrorFileName () == y.getLogErrorFileName ()))
            return false;

          if (!(x.getLogAuditFileName () == y.getLogAuditFileName ()))
            return false;

          if (!(x.getX7SSignedKeyCertifiedFileName () == y.getX7SSignedKeyCertifiedFileName ()))
            return false;

          if (!(x.getX7SSignedCertifiedFileName () == y.getX7SSignedCertifiedFileName ()))
            return false;

          if (!(x.getX7SCryptoCertifiedFileName () == y.getX7SCryptoCertifiedFileName ()))
            return false;

          return true;
        }

        bool
        operator!= (const ConfigurationElectionFilesPath& x, const ConfigurationElectionFilesPath& y)
        {
          return !(x == y);
        }

        // ConfigurationPrinter
        //

        ConfigurationPrinter::
        ConfigurationPrinter ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          SkipPrint_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          TimeToPrintTicket_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          UsePresentPaperOnline_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DefaultPrinterFontFamily_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          EndPaddingDirectPrint_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CharsetDirectPrint_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CharPaddingDirectPrint_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CharIndentationDirectPrint_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CutType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          PrinterBackendType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectPrintDeleteFiles_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          GeneratePVReportInAllLanguages_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CommandPrintingMode_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StatusMonitorTimeOut_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          StatusMonitorCancel_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectQrUseOptimization_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectQrCommandHeader_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectQrCommandFooter_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ScreenPreviewWidth_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ScreenPreviewResolutionFactor_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationPrinter::
        ConfigurationPrinter (const SkipPrintType& SkipPrint,
                              const TimeToPrintTicketType& TimeToPrintTicket,
                              const UsePresentPaperOnlineType& UsePresentPaperOnline,
                              const DefaultPrinterFontFamilyType& DefaultPrinterFontFamily,
                              const EndPaddingDirectPrintType& EndPaddingDirectPrint,
                              const CharsetDirectPrintType& CharsetDirectPrint,
                              const CharPaddingDirectPrintType& CharPaddingDirectPrint,
                              const CharIndentationDirectPrintType& CharIndentationDirectPrint,
                              const CutTypeType& CutType,
                              const PrinterBackendTypeType& PrinterBackendType,
                              const DirectPrintDeleteFilesType& DirectPrintDeleteFiles,
                              const GeneratePVReportInAllLanguagesType& GeneratePVReportInAllLanguages,
                              const CommandPrintingModeType& CommandPrintingMode,
                              const StatusMonitorTimeOutType& StatusMonitorTimeOut,
                              const StatusMonitorCancelType& StatusMonitorCancel,
                              const DirectQrUseOptimizationType& DirectQrUseOptimization,
                              const DirectQrCommandHeaderType& DirectQrCommandHeader,
                              const DirectQrCommandFooterType& DirectQrCommandFooter,
                              const ScreenPreviewWidthType& ScreenPreviewWidth,
                              const ScreenPreviewResolutionFactorType& ScreenPreviewResolutionFactor)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SkipPrint_ (SkipPrint, ::Smartmatic::ConfigurationTypes::Flags (), this),
          TimeToPrintTicket_ (TimeToPrintTicket, ::Smartmatic::ConfigurationTypes::Flags (), this),
          UsePresentPaperOnline_ (UsePresentPaperOnline, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DefaultPrinterFontFamily_ (DefaultPrinterFontFamily, ::Smartmatic::ConfigurationTypes::Flags (), this),
          EndPaddingDirectPrint_ (EndPaddingDirectPrint, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CharsetDirectPrint_ (CharsetDirectPrint, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CharPaddingDirectPrint_ (CharPaddingDirectPrint, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CharIndentationDirectPrint_ (CharIndentationDirectPrint, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CutType_ (CutType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          PrinterBackendType_ (PrinterBackendType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectPrintDeleteFiles_ (DirectPrintDeleteFiles, ::Smartmatic::ConfigurationTypes::Flags (), this),
          GeneratePVReportInAllLanguages_ (GeneratePVReportInAllLanguages, ::Smartmatic::ConfigurationTypes::Flags (), this),
          CommandPrintingMode_ (CommandPrintingMode, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StatusMonitorTimeOut_ (StatusMonitorTimeOut, ::Smartmatic::ConfigurationTypes::Flags (), this),
          StatusMonitorCancel_ (StatusMonitorCancel, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectQrUseOptimization_ (DirectQrUseOptimization, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectQrCommandHeader_ (DirectQrCommandHeader, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DirectQrCommandFooter_ (DirectQrCommandFooter, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ScreenPreviewWidth_ (ScreenPreviewWidth, ::Smartmatic::ConfigurationTypes::Flags (), this),
          ScreenPreviewResolutionFactor_ (ScreenPreviewResolutionFactor, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        ConfigurationPrinter::
        ConfigurationPrinter (const ConfigurationPrinter& x,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          SkipPrint_ (x.SkipPrint_, f, this),
          TimeToPrintTicket_ (x.TimeToPrintTicket_, f, this),
          UsePresentPaperOnline_ (x.UsePresentPaperOnline_, f, this),
          DefaultPrinterFontFamily_ (x.DefaultPrinterFontFamily_, f, this),
          EndPaddingDirectPrint_ (x.EndPaddingDirectPrint_, f, this),
          CharsetDirectPrint_ (x.CharsetDirectPrint_, f, this),
          CharPaddingDirectPrint_ (x.CharPaddingDirectPrint_, f, this),
          CharIndentationDirectPrint_ (x.CharIndentationDirectPrint_, f, this),
          CutType_ (x.CutType_, f, this),
          PrinterBackendType_ (x.PrinterBackendType_, f, this),
          DirectPrintDeleteFiles_ (x.DirectPrintDeleteFiles_, f, this),
          GeneratePVReportInAllLanguages_ (x.GeneratePVReportInAllLanguages_, f, this),
          CommandPrintingMode_ (x.CommandPrintingMode_, f, this),
          StatusMonitorTimeOut_ (x.StatusMonitorTimeOut_, f, this),
          StatusMonitorCancel_ (x.StatusMonitorCancel_, f, this),
          DirectQrUseOptimization_ (x.DirectQrUseOptimization_, f, this),
          DirectQrCommandHeader_ (x.DirectQrCommandHeader_, f, this),
          DirectQrCommandFooter_ (x.DirectQrCommandFooter_, f, this),
          ScreenPreviewWidth_ (x.ScreenPreviewWidth_, f, this),
          ScreenPreviewResolutionFactor_ (x.ScreenPreviewResolutionFactor_, f, this)
        {
        }

        ConfigurationPrinter::
        ConfigurationPrinter (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f,
                              ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          SkipPrint_ (f, this),
          TimeToPrintTicket_ (f, this),
          UsePresentPaperOnline_ (f, this),
          DefaultPrinterFontFamily_ (f, this),
          EndPaddingDirectPrint_ (f, this),
          CharsetDirectPrint_ (f, this),
          CharPaddingDirectPrint_ (f, this),
          CharIndentationDirectPrint_ (f, this),
          CutType_ (f, this),
          PrinterBackendType_ (f, this),
          DirectPrintDeleteFiles_ (f, this),
          GeneratePVReportInAllLanguages_ (f, this),
          CommandPrintingMode_ (f, this),
          StatusMonitorTimeOut_ (f, this),
          StatusMonitorCancel_ (f, this),
          DirectQrUseOptimization_ (f, this),
          DirectQrCommandHeader_ (f, this),
          DirectQrCommandFooter_ (f, this),
          ScreenPreviewWidth_ (f, this),
          ScreenPreviewResolutionFactor_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ConfigurationPrinter::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SkipPrint
            //
            if (n.name () == "SkipPrint" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!SkipPrint_.present ())
              {
                this->SkipPrint_.set (SkipPrintTraits::create (i, f, this));
                continue;
              }
            }

            // TimeToPrintTicket
            //
            if (n.name () == "TimeToPrintTicket" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!TimeToPrintTicket_.present ())
              {
                this->TimeToPrintTicket_.set (TimeToPrintTicketTraits::create (i, f, this));
                continue;
              }
            }

            // UsePresentPaperOnline
            //
            if (n.name () == "UsePresentPaperOnline" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!UsePresentPaperOnline_.present ())
              {
                this->UsePresentPaperOnline_.set (UsePresentPaperOnlineTraits::create (i, f, this));
                continue;
              }
            }

            // DefaultPrinterFontFamily
            //
            if (n.name () == "DefaultPrinterFontFamily" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DefaultPrinterFontFamilyType > r (
                DefaultPrinterFontFamilyTraits::create (i, f, this));

              if (!DefaultPrinterFontFamily_.present ())
              {
                this->DefaultPrinterFontFamily_.set (r);
                continue;
              }
            }

            // EndPaddingDirectPrint
            //
            if (n.name () == "EndPaddingDirectPrint" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!EndPaddingDirectPrint_.present ())
              {
                this->EndPaddingDirectPrint_.set (EndPaddingDirectPrintTraits::create (i, f, this));
                continue;
              }
            }

            // CharsetDirectPrint
            //
            if (n.name () == "CharsetDirectPrint" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!CharsetDirectPrint_.present ())
              {
                this->CharsetDirectPrint_.set (CharsetDirectPrintTraits::create (i, f, this));
                continue;
              }
            }

            // CharPaddingDirectPrint
            //
            if (n.name () == "CharPaddingDirectPrint" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CharPaddingDirectPrintType > r (
                CharPaddingDirectPrintTraits::create (i, f, this));

              if (!CharPaddingDirectPrint_.present ())
              {
                this->CharPaddingDirectPrint_.set (r);
                continue;
              }
            }

            // CharIndentationDirectPrint
            //
            if (n.name () == "CharIndentationDirectPrint" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CharIndentationDirectPrintType > r (
                CharIndentationDirectPrintTraits::create (i, f, this));

              if (!CharIndentationDirectPrint_.present ())
              {
                this->CharIndentationDirectPrint_.set (r);
                continue;
              }
            }

            // CutType
            //
            if (n.name () == "CutType" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CutTypeType > r (
                CutTypeTraits::create (i, f, this));

              if (!CutType_.present ())
              {
                this->CutType_.set (r);
                continue;
              }
            }

            // PrinterBackendType
            //
            if (n.name () == "PrinterBackendType" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< PrinterBackendTypeType > r (
                PrinterBackendTypeTraits::create (i, f, this));

              if (!PrinterBackendType_.present ())
              {
                this->PrinterBackendType_.set (r);
                continue;
              }
            }

            // DirectPrintDeleteFiles
            //
            if (n.name () == "DirectPrintDeleteFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!DirectPrintDeleteFiles_.present ())
              {
                this->DirectPrintDeleteFiles_.set (DirectPrintDeleteFilesTraits::create (i, f, this));
                continue;
              }
            }

            // GeneratePVReportInAllLanguages
            //
            if (n.name () == "GeneratePVReportInAllLanguages" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!GeneratePVReportInAllLanguages_.present ())
              {
                this->GeneratePVReportInAllLanguages_.set (GeneratePVReportInAllLanguagesTraits::create (i, f, this));
                continue;
              }
            }

            // CommandPrintingMode
            //
            if (n.name () == "CommandPrintingMode" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< CommandPrintingModeType > r (
                CommandPrintingModeTraits::create (i, f, this));

              if (!CommandPrintingMode_.present ())
              {
                this->CommandPrintingMode_.set (r);
                continue;
              }
            }

            // StatusMonitorTimeOut
            //
            if (n.name () == "StatusMonitorTimeOut" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!StatusMonitorTimeOut_.present ())
              {
                this->StatusMonitorTimeOut_.set (StatusMonitorTimeOutTraits::create (i, f, this));
                continue;
              }
            }

            // StatusMonitorCancel
            //
            if (n.name () == "StatusMonitorCancel" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!StatusMonitorCancel_.present ())
              {
                this->StatusMonitorCancel_.set (StatusMonitorCancelTraits::create (i, f, this));
                continue;
              }
            }

            // DirectQrUseOptimization
            //
            if (n.name () == "DirectQrUseOptimization" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!DirectQrUseOptimization_.present ())
              {
                this->DirectQrUseOptimization_.set (DirectQrUseOptimizationTraits::create (i, f, this));
                continue;
              }
            }

            // DirectQrCommandHeader
            //
            if (n.name () == "DirectQrCommandHeader" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DirectQrCommandHeaderType > r (
                DirectQrCommandHeaderTraits::create (i, f, this));

              if (!DirectQrCommandHeader_.present ())
              {
                this->DirectQrCommandHeader_.set (r);
                continue;
              }
            }

            // DirectQrCommandFooter
            //
            if (n.name () == "DirectQrCommandFooter" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              ::std::auto_ptr< DirectQrCommandFooterType > r (
                DirectQrCommandFooterTraits::create (i, f, this));

              if (!DirectQrCommandFooter_.present ())
              {
                this->DirectQrCommandFooter_.set (r);
                continue;
              }
            }

            // ScreenPreviewWidth
            //
            if (n.name () == "ScreenPreviewWidth" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ScreenPreviewWidth_.present ())
              {
                this->ScreenPreviewWidth_.set (ScreenPreviewWidthTraits::create (i, f, this));
                continue;
              }
            }

            // ScreenPreviewResolutionFactor
            //
            if (n.name () == "ScreenPreviewResolutionFactor" && n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
            {
              if (!ScreenPreviewResolutionFactor_.present ())
              {
                this->ScreenPreviewResolutionFactor_.set (ScreenPreviewResolutionFactorTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!SkipPrint_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SkipPrint",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!TimeToPrintTicket_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TimeToPrintTicket",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!UsePresentPaperOnline_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "UsePresentPaperOnline",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DefaultPrinterFontFamily_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DefaultPrinterFontFamily",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!EndPaddingDirectPrint_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "EndPaddingDirectPrint",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CharsetDirectPrint_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CharsetDirectPrint",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CharPaddingDirectPrint_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CharPaddingDirectPrint",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CharIndentationDirectPrint_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CharIndentationDirectPrint",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CutType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CutType",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!PrinterBackendType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PrinterBackendType",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DirectPrintDeleteFiles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DirectPrintDeleteFiles",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!GeneratePVReportInAllLanguages_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "GeneratePVReportInAllLanguages",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!CommandPrintingMode_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CommandPrintingMode",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!StatusMonitorTimeOut_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StatusMonitorTimeOut",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!StatusMonitorCancel_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "StatusMonitorCancel",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DirectQrUseOptimization_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DirectQrUseOptimization",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DirectQrCommandHeader_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DirectQrCommandHeader",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!DirectQrCommandFooter_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DirectQrCommandFooter",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ScreenPreviewWidth_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ScreenPreviewWidth",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }

          if (!ScreenPreviewResolutionFactor_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ScreenPreviewResolutionFactor",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        ConfigurationPrinter* ConfigurationPrinter::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class ConfigurationPrinter (*this, f, c);
        }

        ConfigurationPrinter::
        ~ConfigurationPrinter ()
        {
        }

        bool
        operator== (const ConfigurationPrinter& x, const ConfigurationPrinter& y)
        {
          if (!(x.getSkipPrint () == y.getSkipPrint ()))
            return false;

          if (!(x.getTimeToPrintTicket () == y.getTimeToPrintTicket ()))
            return false;

          if (!(x.getUsePresentPaperOnline () == y.getUsePresentPaperOnline ()))
            return false;

          if (!(x.getDefaultPrinterFontFamily () == y.getDefaultPrinterFontFamily ()))
            return false;

          if (!(x.getEndPaddingDirectPrint () == y.getEndPaddingDirectPrint ()))
            return false;

          if (!(x.getCharsetDirectPrint () == y.getCharsetDirectPrint ()))
            return false;

          if (!(x.getCharPaddingDirectPrint () == y.getCharPaddingDirectPrint ()))
            return false;

          if (!(x.getCharIndentationDirectPrint () == y.getCharIndentationDirectPrint ()))
            return false;

          if (!(x.getCutType () == y.getCutType ()))
            return false;

          if (!(x.getPrinterBackendType () == y.getPrinterBackendType ()))
            return false;

          if (!(x.getDirectPrintDeleteFiles () == y.getDirectPrintDeleteFiles ()))
            return false;

          if (!(x.getGeneratePVReportInAllLanguages () == y.getGeneratePVReportInAllLanguages ()))
            return false;

          if (!(x.getCommandPrintingMode () == y.getCommandPrintingMode ()))
            return false;

          if (!(x.getStatusMonitorTimeOut () == y.getStatusMonitorTimeOut ()))
            return false;

          if (!(x.getStatusMonitorCancel () == y.getStatusMonitorCancel ()))
            return false;

          if (!(x.getDirectQrUseOptimization () == y.getDirectQrUseOptimization ()))
            return false;

          if (!(x.getDirectQrCommandHeader () == y.getDirectQrCommandHeader ()))
            return false;

          if (!(x.getDirectQrCommandFooter () == y.getDirectQrCommandFooter ()))
            return false;

          if (!(x.getScreenPreviewWidth () == y.getScreenPreviewWidth ()))
            return false;

          if (!(x.getScreenPreviewResolutionFactor () == y.getScreenPreviewResolutionFactor ()))
            return false;

          return true;
        }

        bool
        operator!= (const ConfigurationPrinter& x, const ConfigurationPrinter& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::std::string& u,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
            ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::std::string& u,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
            ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
            ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      const ::std::string& sid,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      const ::std::string& sid,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::xercesc::InputSource& i,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
            ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::xercesc::InputSource& i,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
            ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
            ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::xercesc::DOMDocument& d,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
          {
            ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
              ::Smartmatic::SAES::Common::Configuration::parseSaesCommonConfiguration (
                c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "SaesCommonConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesCommonConfiguration",
            "http://www.smartmatic.com/SaesCommonConfiguration");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::Smartmatic::ConfigurationTypes::Flags f,
                                      const ::Smartmatic::ConfigurationTypes::Properties&)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "SaesCommonConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesCommonConfiguration",
            "http://www.smartmatic.com/SaesCommonConfiguration");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        void
        operator<< (::xercesc::DOMElement& e, const SaesCommonConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // ConfigurationElectionFilesPath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConfigurationElectionFilesPath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getConfigurationElectionFilesPath ();
          }

          // ConfigurationPrinter
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConfigurationPrinter",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getConfigurationPrinter ();
          }

          // OSConfigurationFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OSConfigurationFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getOSConfigurationFiles ();
          }

          // MachineSecuritySchema
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MachineSecuritySchema",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getMachineSecuritySchema ();
          }

          // LogConfigurationReader
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LogConfigurationReader",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLogConfigurationReader ();
          }

          // BEIDConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BEIDConfiguration",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getBEIDConfiguration ();
          }

          // SmartCardConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SmartCardConfiguration",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSmartCardConfiguration ();
          }

          // PCSCDConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PCSCDConfiguration",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPCSCDConfiguration ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const OSConfigurationFiles& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // IdHardwareFileFullPath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IdHardwareFileFullPath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getIdHardwareFileFullPath ();
          }

          // MasterDeviceFileFullPath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MasterDeviceFileFullPath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getMasterDeviceFileFullPath ();
          }

          // EventDeviceFileFullPath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "EventDeviceFileFullPath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getEventDeviceFileFullPath ();
          }

          // LineDeviceSeparator
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LineDeviceSeparator",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLineDeviceSeparator ();
          }

          // RemoveEventDeviceFile
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RemoveEventDeviceFile",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getRemoveEventDeviceFile ();
          }

          // SerialLocationFileFullPath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SerialLocationFileFullPath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSerialLocationFileFullPath ();
          }

          // LineSerialLocationSeparator
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LineSerialLocationSeparator",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLineSerialLocationSeparator ();
          }

          // ScriptRunSmartCard
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ScriptRunSmartCard",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getScriptRunSmartCard ();
          }

          // ScriptRunPrintBlank
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ScriptRunPrintBlank",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getScriptRunPrintBlank ();
          }

          // ScriptRunDSortVote
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ScriptRunDSortVote",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getScriptRunDSortVote ();
          }

          // SyncFileSignalUSER1
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SyncFileSignalUSER1",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSyncFileSignalUSER1 ();
          }

          // SyncFileSignalUSER2
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SyncFileSignalUSER2",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSyncFileSignalUSER2 ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const LogConfigurationReader& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // LogErrorReader
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LogErrorReader",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLogErrorReader ();
          }

          // LogAuditReader
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LogAuditReader",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLogAuditReader ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BEIDConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // UseCallbackEvent
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "UseCallbackEvent",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getUseCallbackEvent ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SmartCardConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // AppletAID
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AppletAID",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getAppletAID ();
          }

          // GlobalPIN
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "GlobalPIN",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getGlobalPIN ();
          }

          // DataPIN
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DataPIN",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDataPIN ();
          }

          // PlatformMode
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PlatformMode",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPlatformMode ();
          }

          // SecureChannelEnabled
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecureChannelEnabled",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecureChannelEnabled ();
          }

          // SecurityKeySetVersion
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityKeySetVersion",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecurityKeySetVersion ();
          }

          // SecurityKeyIndex
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityKeyIndex",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecurityKeyIndex ();
          }

          // SecurityChannelProtocol
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityChannelProtocol",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecurityChannelProtocol ();
          }

          // SecurityChannelProtocolImpl
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityChannelProtocolImpl",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecurityChannelProtocolImpl ();
          }

          // SecurityLevel
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityLevel",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecurityLevel ();
          }

          // SecurityKeyDerivation
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityKeyDerivation",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecurityKeyDerivation ();
          }

          // NivelTest
          //
          for (SmartCardConfiguration::NivelTestConstIterator
               b (i.getNivelTest ().begin ()), n (i.getNivelTest ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NivelTest",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *b;
          }

          // SuspendResumeEachVote
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SuspendResumeEachVote",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSuspendResumeEachVote ();
          }

          // SuspendResumeOnErrorCondition
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SuspendResumeOnErrorCondition",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSuspendResumeOnErrorCondition ();
          }

          // DelayAfterSuspend
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DelayAfterSuspend",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDelayAfterSuspend ();
          }

          // DelayAfterOn
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DelayAfterOn",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDelayAfterOn ();
          }

          // ShowMessagePowerCycle
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ShowMessagePowerCycle",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getShowMessagePowerCycle ();
          }

          // TimeOutMessagePowerCycle
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TimeOutMessagePowerCycle",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTimeOutMessagePowerCycle ();
          }

          // PowerCycleTries
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PowerCycleTries",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPowerCycleTries ();
          }

          // ForceRestartPCSCD
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ForceRestartPCSCD",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getForceRestartPCSCD ();
          }

          // WaitStopPCSCD
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "WaitStopPCSCD",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getWaitStopPCSCD ();
          }

          // WaitStartPCSCD
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "WaitStartPCSCD",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getWaitStartPCSCD ();
          }

          // ShowMessageRestartPCSCD
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ShowMessageRestartPCSCD",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getShowMessageRestartPCSCD ();
          }

          // ReadRetry
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ReadRetry",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getReadRetry ();
          }

          // FatalErrorCodes
          //
          for (SmartCardConfiguration::FatalErrorCodesConstIterator
               b (i.getFatalErrorCodes ().begin ()), n (i.getFatalErrorCodes ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FatalErrorCodes",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *b;
          }

          // UseConnectedSmartcardReader
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "UseConnectedSmartcardReader",
                e));

            a << i.getUseConnectedSmartcardReader ();
          }

          // ConnectedReaderRenewContext
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ConnectedReaderRenewContext",
                e));

            a << i.getConnectedReaderRenewContext ();
          }

          // ConnectedSmartcardPCSCCheckCard
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ConnectedSmartcardPCSCCheckCard",
                e));

            a << i.getConnectedSmartcardPCSCCheckCard ();
          }

          // ConnectedSmartcardConnectToCheckPresence
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ConnectedSmartcardConnectToCheckPresence",
                e));

            a << i.getConnectedSmartcardConnectToCheckPresence ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PCSCDConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // StartService
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StartService",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getStartService ();
          }

          // StopService
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StopService",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getStopService ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const CommandPrintingModeType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CommandPrintingModeType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const CommandPrintingModeType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const PrinterBackendType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const PrinterBackendType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const PrinterBackendType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const CutType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CutType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const CutType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const ConfigurationBasePath& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // RulesBasePath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RulesBasePath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getRulesBasePath ();
          }

          // LiveFileSystemBasePath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LiveFileSystemBasePath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLiveFileSystemBasePath ();
          }

          // languageImageDirectory
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "languageImageDirectory",
                e));

            a << i.getLanguageImageDirectory ();
          }

          // backupFileName
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "backupFileName",
                e));

            a << i.getBackupFileName ();
          }

          // ProjectName
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "ProjectName",
                e));

            a << i.getProjectName ();
          }

          // WorkingDirectory
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "WorkingDirectory",
                e));

            a << i.getWorkingDirectory ();
          }

          // VotingExperienceValidationScreensDirectory
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VotingExperienceValidationScreensDirectory",
                e));

            a << i.getVotingExperienceValidationScreensDirectory ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const RulesBasePathType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const RulesBasePathType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const RulesBasePathType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const BasePath& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // path
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "path",
                e));

            a << i.getPath ();
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.getType ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BasePathType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const BasePathType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const BasePathType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const DigestAlgType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const DigestAlgType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const DigestAlgType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const KeyDerivAlgType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const KeyDerivAlgType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const KeyDerivAlgType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SaltSourceType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // CalcSalt
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CalcSalt",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCalcSalt ();
          }

          // SepChar
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SepChar",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSepChar ();
          }

          // DefaultSalt
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DefaultSalt",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDefaultSalt ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // SecurityCryptoMode
          //
          if (i.getSecurityCryptoMode ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecurityCryptoMode",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *i.getSecurityCryptoMode ();
          }

          // SecretKeyEncrypted
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecretKeyEncrypted",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecretKeyEncrypted ();
          }

          // ForceReduceElection
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ForceReduceElection",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getForceReduceElection ();
          }

          // VerifySAESFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VerifySAESFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVerifySAESFolder ();
          }

          // IsCompressElection
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IsCompressElection",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getIsCompressElection ();
          }

          // IsCompressVotingDevices
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IsCompressVotingDevices",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getIsCompressVotingDevices ();
          }

          // ImplementCACertificateFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImplementCACertificateFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getImplementCACertificateFileName ();
          }

          // ImplementItermediateCACertificates
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImplementItermediateCACertificates",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getImplementItermediateCACertificates ();
          }

          // ImplementTrustedCertificates
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImplementTrustedCertificates",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getImplementTrustedCertificates ();
          }

          // CertifiedTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CertifiedTime",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCertifiedTime ();
          }

          // ValidateCertifiedTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ValidateCertifiedTime",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getValidateCertifiedTime ();
          }

          // VerifyExternElements
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VerifyExternElements",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVerifyExternElements ();
          }

          // UseAsimetricKeyForTransmissionPackages
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "UseAsimetricKeyForTransmissionPackages",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getUseAsimetricKeyForTransmissionPackages ();
          }

          // InstallationFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InstallationFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getInstallationFiles ();
          }

          // ExternalFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ExternalFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getExternalFiles ();
          }

          // InternalFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InternalFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getInternalFiles ();
          }

          // ResourcesFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ResourcesFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getResourcesFiles ();
          }

          // ExchangeFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ExchangeFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getExchangeFiles ();
          }

          // UtilFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "UtilFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getUtilFiles ();
          }

          // PrintedVoteData
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PrintedVoteData",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPrintedVoteData ();
          }

          // FileSystemVote
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FileSystemVote",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getFileSystemVote ();
          }

          // SaltSource
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SaltSource",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSaltSource ();
          }

          // DigestAlg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DigestAlg",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDigestAlg ();
          }

          // KeyDerivAlg
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "KeyDerivAlg",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getKeyDerivAlg ();
          }

          // Iterations
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Iterations",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getIterations ();
          }

          // SignedPVForm
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SignedPVForm",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSignedPVForm ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityFileConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // EncryptedData
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "EncryptedData",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getEncryptedData ();
          }

          // SignedData
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SignedData",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSignedData ();
          }

          // ValidateSigned
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ValidateSigned",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getValidateSigned ();
          }

          // CertifiedFilePath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CertifiedFilePath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCertifiedFilePath ();
          }

          // CertifiedType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CertifiedType",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCertifiedType ();
          }

          // ValidateCertified
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ValidateCertified",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getValidateCertified ();
          }

          // ValidateCertifiedConfig
          //
          for (SecurityFileConfiguration::ValidateCertifiedConfigConstIterator
               b (i.getValidateCertifiedConfig ().begin ()), n (i.getValidateCertifiedConfig ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ValidateCertifiedConfig",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const FileSystemVoteConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // maxfiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "maxfiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getMaxfiles ();
          }

          // ImplementTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImplementTime",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getImplementTime ();
          }

          // FileSystemVoteTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FileSystemVoteTime",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getFileSystemVoteTime ();
          }

          // ImplementRandom
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImplementRandom",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getImplementRandom ();
          }

          // BackupMarkFile
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BackupMarkFile",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getBackupMarkFile ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SignedType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SignedType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SignedType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const ValidateCertifiedConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const ValidateCertifiedConfiguration& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const ValidateCertifiedConfiguration& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const TimeConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const TimeConfiguration& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const TimeConfiguration& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const CertifiedType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CertifiedType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const CertifiedType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const CryptoType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CryptoType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const CryptoType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityCryptoMode& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SecurityCryptoMode& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SecurityCryptoMode& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const PlatformMode& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const PlatformMode& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const PlatformMode& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const GlobalPIN& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const GlobalPIN& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const GlobalPIN& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const DataPIN& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const DataPIN& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const DataPIN& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityChannelProtocol& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SecurityChannelProtocol& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SecurityChannelProtocol& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityChannelProtocolImpl& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SecurityChannelProtocolImpl& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SecurityChannelProtocolImpl& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityLevel& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SecurityLevel& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SecurityLevel& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const SecurityKeyDerivation& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SecurityKeyDerivation& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SecurityKeyDerivation& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const NivelTestConfig& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const NivelTestConfig& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const NivelTestConfig& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        serializeSaesCommonConfiguration (::std::ostream& o,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeSaesCommonConfiguration (::std::ostream& o,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesCommonConfiguration (::std::ostream& o,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          ::xercesc::DOMErrorHandler& h,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesCommonConfiguration (::xercesc::XMLFormatTarget& t,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeSaesCommonConfiguration (::xercesc::XMLFormatTarget& t,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesCommonConfiguration (::xercesc::XMLFormatTarget& t,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          ::xercesc::DOMErrorHandler& h,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesCommonConfiguration (::xercesc::DOMDocument& d,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          ::Smartmatic::ConfigurationTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "SaesCommonConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesCommonConfiguration")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "SaesCommonConfiguration",
              "http://www.smartmatic.com/SaesCommonConfiguration");
          }
        }

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeSaesCommonConfiguration (const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& s,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                          ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "SaesCommonConfiguration",
              "http://www.smartmatic.com/SaesCommonConfiguration",
              m, f));

          ::Smartmatic::SAES::Common::Configuration::serializeSaesCommonConfiguration (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const SmartCardErrorCode& i)
        {
          e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType >& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const SmartCardErrorCode& i)
        {
          a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType >& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const SmartCardErrorCode& i)
        {
          l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType >& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const ConfigurationElectionFilesPath& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // CodiFilesFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CodiFilesFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCodiFilesFolder ();
          }

          // SAESFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SAESFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSAESFolder ();
          }

          // ResourcesFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ResourcesFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getResourcesFolder ();
          }

          // ImagesFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImagesFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getImagesFolder ();
          }

          // VotesFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotesFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVotesFolder ();
          }

          // DocsFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DocsFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDocsFolder ();
          }

          // CodiFolder
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CodiFolder",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCodiFolder ();
          }

          // LogsFolderName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LogsFolderName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLogsFolderName ();
          }

          // TransmissionPackageFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TransmissionPackageFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTransmissionPackageFileName ();
          }

          // TransmissionPackageHashFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TransmissionPackageHashFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTransmissionPackageHashFileName ();
          }

          // TransmissionPackageKeyFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TransmissionPackageKeyFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTransmissionPackageKeyFileName ();
          }

          // TransmissionPackageCrtFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TransmissionPackageCrtFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTransmissionPackageCrtFileName ();
          }

          // PVFormFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PVFormFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPVFormFileName ();
          }

          // ElectionFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ElectionFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getElectionFileName ();
          }

          // ElectionStatusFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ElectionStatusFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getElectionStatusFileName ();
          }

          // CardListStatusFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardListStatusFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCardListStatusFileName ();
          }

          // ElectionResourcesFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ElectionResourcesFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getElectionResourcesFileName ();
          }

          // VotingMachineStatusFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingMachineStatusFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVotingMachineStatusFileName ();
          }

          // VotingDeviceFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingDeviceFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVotingDeviceFileName ();
          }

          // PollworkersFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PollworkersFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPollworkersFileName ();
          }

          // StatisticsFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StatisticsFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getStatisticsFileName ();
          }

          // ActivatedCardStatisticsFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivatedCardStatisticsFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getActivatedCardStatisticsFileName ();
          }

          // IncidentReportFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IncidentReportFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getIncidentReportFileName ();
          }

          // ClosingNotesFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ClosingNotesFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getClosingNotesFileName ();
          }

          // XMLImageFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "XMLImageFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getXMLImageFileName ();
          }

          // AssistedActivationFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AssistedActivationFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getAssistedActivationFileName ();
          }

          // VotingDisabledFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingDisabledFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVotingDisabledFileName ();
          }

          // PoliceNotesFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PoliceNotesFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPoliceNotesFileName ();
          }

          // LanguageFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LanguageFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLanguageFileName ();
          }

          // VotingCentersFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingCentersFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVotingCentersFileName ();
          }

          // ConfigBasePath
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConfigBasePath",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getConfigBasePath ();
          }

          // SecretKeyFile
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SecretKeyFile",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSecretKeyFile ();
          }

          // UPKeyFile
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "UPKeyFile",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getUPKeyFile ();
          }

          // MachineKeysFile
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MachineKeysFile",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getMachineKeysFile ();
          }

          // IDCardMembersFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IDCardMembersFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getIDCardMembersFileName ();
          }

          // TransmissionPackageSignatureFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TransmissionPackageSignatureFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTransmissionPackageSignatureFileName ();
          }

          // PVFormSignatureFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PVFormSignatureFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPVFormSignatureFileName ();
          }

          // CACertificateFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CACertificateFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCACertificateFileName ();
          }

          // ItermediateCACertificatesFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ItermediateCACertificatesFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getItermediateCACertificatesFileName ();
          }

          // ItermediateCACertificatesFromPKCS12FileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ItermediateCACertificatesFromPKCS12FileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getItermediateCACertificatesFromPKCS12FileName ();
          }

          // TrustedCertificatesFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TrustedCertificatesFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTrustedCertificatesFileName ();
          }

          // TrustedCertificatesFromPKCS12FileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TrustedCertificatesFromPKCS12FileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTrustedCertificatesFromPKCS12FileName ();
          }

          // PVTemplateFolderName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PVTemplateFolderName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPVTemplateFolderName ();
          }

          // PVTemplateFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PVTemplateFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPVTemplateFileName ();
          }

          // GeneratedPVReportFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "GeneratedPVReportFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getGeneratedPVReportFileName ();
          }

          // ElectionResultSignatureFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ElectionResultSignatureFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getElectionResultSignatureFileName ();
          }

          // VoteStatisticsFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VoteStatisticsFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getVoteStatisticsFileName ();
          }

          // SignatureResourceFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SignatureResourceFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSignatureResourceFileName ();
          }

          // LogErrorFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LogErrorFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLogErrorFileName ();
          }

          // LogAuditFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LogAuditFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getLogAuditFileName ();
          }

          // X7SSignedKeyCertifiedFileName
          //
          if (i.getX7SSignedKeyCertifiedFileName ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "X7SSignedKeyCertifiedFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *i.getX7SSignedKeyCertifiedFileName ();
          }

          // X7SSignedCertifiedFileName
          //
          if (i.getX7SSignedCertifiedFileName ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "X7SSignedCertifiedFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *i.getX7SSignedCertifiedFileName ();
          }

          // X7SCryptoCertifiedFileName
          //
          if (i.getX7SCryptoCertifiedFileName ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "X7SCryptoCertifiedFileName",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << *i.getX7SCryptoCertifiedFileName ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ConfigurationPrinter& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // SkipPrint
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SkipPrint",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getSkipPrint ();
          }

          // TimeToPrintTicket
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TimeToPrintTicket",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getTimeToPrintTicket ();
          }

          // UsePresentPaperOnline
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "UsePresentPaperOnline",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getUsePresentPaperOnline ();
          }

          // DefaultPrinterFontFamily
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DefaultPrinterFontFamily",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDefaultPrinterFontFamily ();
          }

          // EndPaddingDirectPrint
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "EndPaddingDirectPrint",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getEndPaddingDirectPrint ();
          }

          // CharsetDirectPrint
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CharsetDirectPrint",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCharsetDirectPrint ();
          }

          // CharPaddingDirectPrint
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CharPaddingDirectPrint",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCharPaddingDirectPrint ();
          }

          // CharIndentationDirectPrint
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CharIndentationDirectPrint",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCharIndentationDirectPrint ();
          }

          // CutType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CutType",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCutType ();
          }

          // PrinterBackendType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PrinterBackendType",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getPrinterBackendType ();
          }

          // DirectPrintDeleteFiles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DirectPrintDeleteFiles",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDirectPrintDeleteFiles ();
          }

          // GeneratePVReportInAllLanguages
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "GeneratePVReportInAllLanguages",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getGeneratePVReportInAllLanguages ();
          }

          // CommandPrintingMode
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CommandPrintingMode",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getCommandPrintingMode ();
          }

          // StatusMonitorTimeOut
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StatusMonitorTimeOut",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getStatusMonitorTimeOut ();
          }

          // StatusMonitorCancel
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StatusMonitorCancel",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getStatusMonitorCancel ();
          }

          // DirectQrUseOptimization
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DirectQrUseOptimization",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDirectQrUseOptimization ();
          }

          // DirectQrCommandHeader
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DirectQrCommandHeader",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDirectQrCommandHeader ();
          }

          // DirectQrCommandFooter
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DirectQrCommandFooter",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getDirectQrCommandFooter ();
          }

          // ScreenPreviewWidth
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ScreenPreviewWidth",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getScreenPreviewWidth ();
          }

          // ScreenPreviewResolutionFactor
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ScreenPreviewResolutionFactor",
                "http://www.smartmatic.com/SaesCommonConfiguration",
                e));

            s << i.getScreenPreviewResolutionFactor ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

