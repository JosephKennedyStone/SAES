// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SaesCommonConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SAES_COMMON_CONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SAES_COMMON_CONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
   * schema namespace.
   */
  namespace ConfigurationTypes
  {
    // anyType and anySimpleType.
    //

    /**
     * @brief C++ type corresponding to the anyType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::type Type;

    /**
     * @brief C++ type corresponding to the anySimpleType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

    /**
     * @brief Alias for the anyType type.
     */
    typedef ::xsd::cxx::tree::type Container;


    // 8-bit
    //

    /**
     * @brief C++ type corresponding to the byte XML Schema
     * built-in type.
     */
    typedef signed char Byte;

    /**
     * @brief C++ type corresponding to the unsignedByte XML Schema
     * built-in type.
     */
    typedef unsigned char UnsignedByte;


    // 16-bit
    //

    /**
     * @brief C++ type corresponding to the short XML Schema
     * built-in type.
     */
    typedef short Short;

    /**
     * @brief C++ type corresponding to the unsignedShort XML Schema
     * built-in type.
     */
    typedef unsigned short UnsignedShort;


    // 32-bit
    //

    /**
     * @brief C++ type corresponding to the int XML Schema
     * built-in type.
     */
    typedef int Int;

    /**
     * @brief C++ type corresponding to the unsignedInt XML Schema
     * built-in type.
     */
    typedef unsigned int UnsignedInt;


    // 64-bit
    //

    /**
     * @brief C++ type corresponding to the long XML Schema
     * built-in type.
     */
    typedef long long Long;

    /**
     * @brief C++ type corresponding to the unsignedLong XML Schema
     * built-in type.
     */
    typedef unsigned long long UnsignedLong;


    // Supposed to be arbitrary-length integral types.
    //

    /**
     * @brief C++ type corresponding to the integer XML Schema
     * built-in type.
     */
    typedef long long Integer;

    /**
     * @brief C++ type corresponding to the nonPositiveInteger XML Schema
     * built-in type.
     */
    typedef long long NonPositiveInteger;

    /**
     * @brief C++ type corresponding to the nonNegativeInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long NonNegativeInteger;

    /**
     * @brief C++ type corresponding to the positiveInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long PositiveInteger;

    /**
     * @brief C++ type corresponding to the negativeInteger XML Schema
     * built-in type.
     */
    typedef long long NegativeInteger;


    // Boolean.
    //

    /**
     * @brief C++ type corresponding to the boolean XML Schema
     * built-in type.
     */
    typedef bool Boolean;


    // Floating-point types.
    //

    /**
     * @brief C++ type corresponding to the float XML Schema
     * built-in type.
     */
    typedef float Float;

    /**
     * @brief C++ type corresponding to the double XML Schema
     * built-in type.
     */
    typedef double Double;

    /**
     * @brief C++ type corresponding to the decimal XML Schema
     * built-in type.
     */
    typedef double Decimal;


    // String types.
    //

    /**
     * @brief C++ type corresponding to the string XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::string< char, SimpleType > String;

    /**
     * @brief C++ type corresponding to the normalizedString XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

    /**
     * @brief C++ type corresponding to the token XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

    /**
     * @brief C++ type corresponding to the Name XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::name< char, Token > Name;

    /**
     * @brief C++ type corresponding to the NMTOKEN XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

    /**
     * @brief C++ type corresponding to the NMTOKENS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

    /**
     * @brief C++ type corresponding to the NCName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

    /**
     * @brief C++ type corresponding to the language XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::language< char, Token > Language;


    // ID/IDREF.
    //

    /**
     * @brief C++ type corresponding to the ID XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::id< char, Ncname > Id;

    /**
     * @brief C++ type corresponding to the IDREF XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

    /**
     * @brief C++ type corresponding to the IDREFS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


    // URI.
    //

    /**
     * @brief C++ type corresponding to the anyURI XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


    // Qualified name.
    //

    /**
     * @brief C++ type corresponding to the QName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


    // Binary.
    //

    /**
     * @brief Binary buffer type.
     */
    typedef ::xsd::cxx::tree::buffer< char > Buffer;

    /**
     * @brief C++ type corresponding to the base64Binary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

    /**
     * @brief C++ type corresponding to the hexBinary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


    // Date/time.
    //

    /**
     * @brief Time zone type.
     */
    typedef ::xsd::cxx::tree::time_zone TimeZone;

    /**
     * @brief C++ type corresponding to the date XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

    /**
     * @brief C++ type corresponding to the dateTime XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

    /**
     * @brief C++ type corresponding to the duration XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

    /**
     * @brief C++ type corresponding to the gDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

    /**
     * @brief C++ type corresponding to the gMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

    /**
     * @brief C++ type corresponding to the gMonthDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

    /**
     * @brief C++ type corresponding to the gYear XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

    /**
     * @brief C++ type corresponding to the gYearMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

    /**
     * @brief C++ type corresponding to the time XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


    // Entity.
    //

    /**
     * @brief C++ type corresponding to the ENTITY XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

    /**
     * @brief C++ type corresponding to the ENTITIES XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


    // Namespace information and list stream. Used in
    // serialization functions.
    //
    /**
     * @brief Namespace serialization information.
     */
    typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

    /**
     * @brief Namespace serialization information map.
     */
    typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

    /**
     * @brief List serialization stream.
     */
    typedef ::xsd::cxx::tree::list_stream< char > ListStream;

    /**
     * @brief Serialization wrapper for the %double type.
     */
    typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

    /**
     * @brief Serialization wrapper for the %decimal type.
     */
    typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

    /**
     * @brief Simple type facet.
     */
    typedef ::xsd::cxx::tree::facet Facet;

    // Flags and properties.
    //

    /**
     * @brief Parsing and serialization flags.
     */
    typedef ::xsd::cxx::tree::flags Flags;

    /**
     * @brief Parsing properties.
     */
    typedef ::xsd::cxx::tree::properties< char > Properties;

    // Parsing/serialization diagnostics.
    //

    /**
     * @brief Error severity.
     */
    typedef ::xsd::cxx::tree::severity Severity;

    /**
     * @brief Error condition.
     */
    typedef ::xsd::cxx::tree::error< char > Error;

    /**
     * @brief List of %error conditions.
     */
    typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

    // Exceptions.
    //

    /**
     * @brief Root of the C++/Tree %exception hierarchy.
     */
    typedef ::xsd::cxx::tree::exception< char > Exception;

    /**
     * @brief Exception indicating that the size argument exceeds
     * the capacity argument.
     */
    typedef ::xsd::cxx::tree::bounds< char > Bounds;

    /**
     * @brief Exception indicating that a duplicate ID value
     * was encountered in the object model.
     */
    typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

    /**
     * @brief Exception indicating a parsing failure.
     */
    typedef ::xsd::cxx::tree::parsing< char > Parsing;

    /**
     * @brief Exception indicating that an expected element
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

    /**
     * @brief Exception indicating that an unexpected element
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

    /**
     * @brief Exception indicating that an expected attribute
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

    /**
     * @brief Exception indicating that an unexpected enumerator
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

    /**
     * @brief Exception indicating that the text content was
     * expected for an element.
     */
    typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

    /**
     * @brief Exception indicating that a prefix-namespace
     * mapping was not provided.
     */
    typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

    /**
     * @brief Exception indicating a serialization failure.
     */
    typedef ::xsd::cxx::tree::serialization< char > Serialization;

    /**
     * @brief Error handler callback interface.
     */
    typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

    /**
     * @brief DOM interaction.
     */
    namespace dom
    {
      /**
       * @brief Automatic pointer for DOMDocument.
       */
      using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
      /**
       * @brief DOM user data key for back pointers to tree nodes.
       */
      const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        class SaesCommonConfiguration;
        class OSConfigurationFiles;
        class LogConfigurationReader;
        class BEIDConfiguration;
        class SmartCardConfiguration;
        class PCSCDConfiguration;
        class CommandPrintingModeType;
        class PrinterBackendType;
        class CutType;
        class ConfigurationBasePath;
        class RulesBasePathType;
        class BasePath;
        class BasePathType;
        class DigestAlgType;
        class KeyDerivAlgType;
        class SaltSourceType;
        class SecurityConfiguration;
        class SecurityFileConfiguration;
        class FileSystemVoteConfiguration;
        class SignedType;
        class ValidateCertifiedConfiguration;
        class TimeConfiguration;
        class CertifiedType;
        class CryptoType;
        class SecurityCryptoMode;
        class PlatformMode;
        class GlobalPIN;
        class DataPIN;
        class SecurityChannelProtocol;
        class SecurityChannelProtocolImpl;
        class SecurityLevel;
        class SecurityKeyDerivation;
        class NivelTestConfig;
        class SmartCardErrorCode;
        class ConfigurationElectionFilesPath;
        class ConfigurationPrinter;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/SaesCommonConfiguration
       * schema namespace.
       */
      namespace Configuration
      {
        /**
         * @brief Class corresponding to the %SaesCommonConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SaesCommonConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name ConfigurationElectionFilesPath
           *
           * @brief Accessor and modifier functions for the %ConfigurationElectionFilesPath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::ConfigurationElectionFilesPath ConfigurationElectionFilesPathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConfigurationElectionFilesPathType, char > ConfigurationElectionFilesPathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConfigurationElectionFilesPathType&
          getConfigurationElectionFilesPath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConfigurationElectionFilesPathType&
          getConfigurationElectionFilesPath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setConfigurationElectionFilesPath (const ConfigurationElectionFilesPathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setConfigurationElectionFilesPath (::std::auto_ptr< ConfigurationElectionFilesPathType > p);

          //@}

          /**
           * @name ConfigurationPrinter
           *
           * @brief Accessor and modifier functions for the %ConfigurationPrinter
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::ConfigurationPrinter ConfigurationPrinterType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConfigurationPrinterType, char > ConfigurationPrinterTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConfigurationPrinterType&
          getConfigurationPrinter () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConfigurationPrinterType&
          getConfigurationPrinter ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setConfigurationPrinter (const ConfigurationPrinterType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setConfigurationPrinter (::std::auto_ptr< ConfigurationPrinterType > p);

          //@}

          /**
           * @name OSConfigurationFiles
           *
           * @brief Accessor and modifier functions for the %OSConfigurationFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::OSConfigurationFiles OSConfigurationFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< OSConfigurationFilesType, char > OSConfigurationFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const OSConfigurationFilesType&
          getOSConfigurationFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          OSConfigurationFilesType&
          getOSConfigurationFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setOSConfigurationFiles (const OSConfigurationFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOSConfigurationFiles (::std::auto_ptr< OSConfigurationFilesType > p);

          //@}

          /**
           * @name MachineSecuritySchema
           *
           * @brief Accessor and modifier functions for the %MachineSecuritySchema
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityConfiguration MachineSecuritySchemaType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MachineSecuritySchemaType, char > MachineSecuritySchemaTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MachineSecuritySchemaType&
          getMachineSecuritySchema () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MachineSecuritySchemaType&
          getMachineSecuritySchema ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMachineSecuritySchema (const MachineSecuritySchemaType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setMachineSecuritySchema (::std::auto_ptr< MachineSecuritySchemaType > p);

          //@}

          /**
           * @name LogConfigurationReader
           *
           * @brief Accessor and modifier functions for the %LogConfigurationReader
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::LogConfigurationReader LogConfigurationReaderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LogConfigurationReaderType, char > LogConfigurationReaderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LogConfigurationReaderType&
          getLogConfigurationReader () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LogConfigurationReaderType&
          getLogConfigurationReader ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogConfigurationReader (const LogConfigurationReaderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogConfigurationReader (::std::auto_ptr< LogConfigurationReaderType > p);

          //@}

          /**
           * @name BEIDConfiguration
           *
           * @brief Accessor and modifier functions for the %BEIDConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::BEIDConfiguration BEIDConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BEIDConfigurationType, char > BEIDConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BEIDConfigurationType&
          getBEIDConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BEIDConfigurationType&
          getBEIDConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBEIDConfiguration (const BEIDConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBEIDConfiguration (::std::auto_ptr< BEIDConfigurationType > p);

          //@}

          /**
           * @name SmartCardConfiguration
           *
           * @brief Accessor and modifier functions for the %SmartCardConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SmartCardConfiguration SmartCardConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SmartCardConfigurationType, char > SmartCardConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SmartCardConfigurationType&
          getSmartCardConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SmartCardConfigurationType&
          getSmartCardConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSmartCardConfiguration (const SmartCardConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSmartCardConfiguration (::std::auto_ptr< SmartCardConfigurationType > p);

          //@}

          /**
           * @name PCSCDConfiguration
           *
           * @brief Accessor and modifier functions for the %PCSCDConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::PCSCDConfiguration PCSCDConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PCSCDConfigurationType, char > PCSCDConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PCSCDConfigurationType&
          getPCSCDConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PCSCDConfigurationType&
          getPCSCDConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPCSCDConfiguration (const PCSCDConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPCSCDConfiguration (::std::auto_ptr< PCSCDConfigurationType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SaesCommonConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SaesCommonConfiguration (const ConfigurationElectionFilesPathType&,
                                   const ConfigurationPrinterType&,
                                   const OSConfigurationFilesType&,
                                   const MachineSecuritySchemaType&,
                                   const LogConfigurationReaderType&,
                                   const BEIDConfigurationType&,
                                   const SmartCardConfigurationType&,
                                   const PCSCDConfigurationType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SaesCommonConfiguration (::std::auto_ptr< ConfigurationElectionFilesPathType >&,
                                   ::std::auto_ptr< ConfigurationPrinterType >&,
                                   ::std::auto_ptr< OSConfigurationFilesType >&,
                                   ::std::auto_ptr< MachineSecuritySchemaType >&,
                                   ::std::auto_ptr< LogConfigurationReaderType >&,
                                   ::std::auto_ptr< BEIDConfigurationType >&,
                                   ::std::auto_ptr< SmartCardConfigurationType >&,
                                   ::std::auto_ptr< PCSCDConfigurationType >&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SaesCommonConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SaesCommonConfiguration (const SaesCommonConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SaesCommonConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SaesCommonConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< ConfigurationElectionFilesPathType > ConfigurationElectionFilesPath_;
          ::xsd::cxx::tree::one< ConfigurationPrinterType > ConfigurationPrinter_;
          ::xsd::cxx::tree::one< OSConfigurationFilesType > OSConfigurationFiles_;
          ::xsd::cxx::tree::one< MachineSecuritySchemaType > MachineSecuritySchema_;
          ::xsd::cxx::tree::one< LogConfigurationReaderType > LogConfigurationReader_;
          ::xsd::cxx::tree::one< BEIDConfigurationType > BEIDConfiguration_;
          ::xsd::cxx::tree::one< SmartCardConfigurationType > SmartCardConfiguration_;
          ::xsd::cxx::tree::one< PCSCDConfigurationType > PCSCDConfiguration_;

          //@endcond
        };

        bool
        operator== (const SaesCommonConfiguration&, const SaesCommonConfiguration&);

        bool
        operator!= (const SaesCommonConfiguration&, const SaesCommonConfiguration&);


        /**
         * @brief Class corresponding to the %OSConfigurationFiles schema type.
         *
         * @nosubgrouping
         */
        class OSConfigurationFiles: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name IdHardwareFileFullPath
           *
           * @brief Accessor and modifier functions for the %IdHardwareFileFullPath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String IdHardwareFileFullPathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IdHardwareFileFullPathType, char > IdHardwareFileFullPathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IdHardwareFileFullPathType&
          getIdHardwareFileFullPath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IdHardwareFileFullPathType&
          getIdHardwareFileFullPath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIdHardwareFileFullPath (const IdHardwareFileFullPathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setIdHardwareFileFullPath (::std::auto_ptr< IdHardwareFileFullPathType > p);

          //@}

          /**
           * @name MasterDeviceFileFullPath
           *
           * @brief Accessor and modifier functions for the %MasterDeviceFileFullPath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String MasterDeviceFileFullPathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MasterDeviceFileFullPathType, char > MasterDeviceFileFullPathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MasterDeviceFileFullPathType&
          getMasterDeviceFileFullPath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MasterDeviceFileFullPathType&
          getMasterDeviceFileFullPath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMasterDeviceFileFullPath (const MasterDeviceFileFullPathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setMasterDeviceFileFullPath (::std::auto_ptr< MasterDeviceFileFullPathType > p);

          //@}

          /**
           * @name EventDeviceFileFullPath
           *
           * @brief Accessor and modifier functions for the %EventDeviceFileFullPath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String EventDeviceFileFullPathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EventDeviceFileFullPathType, char > EventDeviceFileFullPathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EventDeviceFileFullPathType&
          getEventDeviceFileFullPath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EventDeviceFileFullPathType&
          getEventDeviceFileFullPath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setEventDeviceFileFullPath (const EventDeviceFileFullPathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setEventDeviceFileFullPath (::std::auto_ptr< EventDeviceFileFullPathType > p);

          //@}

          /**
           * @name LineDeviceSeparator
           *
           * @brief Accessor and modifier functions for the %LineDeviceSeparator
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LineDeviceSeparatorType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LineDeviceSeparatorType, char > LineDeviceSeparatorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LineDeviceSeparatorType&
          getLineDeviceSeparator () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LineDeviceSeparatorType&
          getLineDeviceSeparator ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLineDeviceSeparator (const LineDeviceSeparatorType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLineDeviceSeparator (::std::auto_ptr< LineDeviceSeparatorType > p);

          //@}

          /**
           * @name RemoveEventDeviceFile
           *
           * @brief Accessor and modifier functions for the %RemoveEventDeviceFile
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean RemoveEventDeviceFileType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RemoveEventDeviceFileType, char > RemoveEventDeviceFileTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RemoveEventDeviceFileType&
          getRemoveEventDeviceFile () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RemoveEventDeviceFileType&
          getRemoveEventDeviceFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setRemoveEventDeviceFile (const RemoveEventDeviceFileType& x);

          //@}

          /**
           * @name SerialLocationFileFullPath
           *
           * @brief Accessor and modifier functions for the %SerialLocationFileFullPath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SerialLocationFileFullPathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SerialLocationFileFullPathType, char > SerialLocationFileFullPathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SerialLocationFileFullPathType&
          getSerialLocationFileFullPath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SerialLocationFileFullPathType&
          getSerialLocationFileFullPath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSerialLocationFileFullPath (const SerialLocationFileFullPathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSerialLocationFileFullPath (::std::auto_ptr< SerialLocationFileFullPathType > p);

          //@}

          /**
           * @name LineSerialLocationSeparator
           *
           * @brief Accessor and modifier functions for the %LineSerialLocationSeparator
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LineSerialLocationSeparatorType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LineSerialLocationSeparatorType, char > LineSerialLocationSeparatorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LineSerialLocationSeparatorType&
          getLineSerialLocationSeparator () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LineSerialLocationSeparatorType&
          getLineSerialLocationSeparator ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLineSerialLocationSeparator (const LineSerialLocationSeparatorType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLineSerialLocationSeparator (::std::auto_ptr< LineSerialLocationSeparatorType > p);

          //@}

          /**
           * @name ScriptRunSmartCard
           *
           * @brief Accessor and modifier functions for the %ScriptRunSmartCard
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ScriptRunSmartCardType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ScriptRunSmartCardType, char > ScriptRunSmartCardTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ScriptRunSmartCardType&
          getScriptRunSmartCard () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ScriptRunSmartCardType&
          getScriptRunSmartCard ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setScriptRunSmartCard (const ScriptRunSmartCardType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setScriptRunSmartCard (::std::auto_ptr< ScriptRunSmartCardType > p);

          //@}

          /**
           * @name ScriptRunPrintBlank
           *
           * @brief Accessor and modifier functions for the %ScriptRunPrintBlank
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ScriptRunPrintBlankType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ScriptRunPrintBlankType, char > ScriptRunPrintBlankTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ScriptRunPrintBlankType&
          getScriptRunPrintBlank () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ScriptRunPrintBlankType&
          getScriptRunPrintBlank ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setScriptRunPrintBlank (const ScriptRunPrintBlankType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setScriptRunPrintBlank (::std::auto_ptr< ScriptRunPrintBlankType > p);

          //@}

          /**
           * @name ScriptRunDSortVote
           *
           * @brief Accessor and modifier functions for the %ScriptRunDSortVote
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ScriptRunDSortVoteType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ScriptRunDSortVoteType, char > ScriptRunDSortVoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ScriptRunDSortVoteType&
          getScriptRunDSortVote () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ScriptRunDSortVoteType&
          getScriptRunDSortVote ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setScriptRunDSortVote (const ScriptRunDSortVoteType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setScriptRunDSortVote (::std::auto_ptr< ScriptRunDSortVoteType > p);

          //@}

          /**
           * @name SyncFileSignalUSER1
           *
           * @brief Accessor and modifier functions for the %SyncFileSignalUSER1
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SyncFileSignalUSER1Type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SyncFileSignalUSER1Type, char > SyncFileSignalUSER1Traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SyncFileSignalUSER1Type&
          getSyncFileSignalUSER1 () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SyncFileSignalUSER1Type&
          getSyncFileSignalUSER1 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSyncFileSignalUSER1 (const SyncFileSignalUSER1Type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSyncFileSignalUSER1 (::std::auto_ptr< SyncFileSignalUSER1Type > p);

          //@}

          /**
           * @name SyncFileSignalUSER2
           *
           * @brief Accessor and modifier functions for the %SyncFileSignalUSER2
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SyncFileSignalUSER2Type;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SyncFileSignalUSER2Type, char > SyncFileSignalUSER2Traits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SyncFileSignalUSER2Type&
          getSyncFileSignalUSER2 () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SyncFileSignalUSER2Type&
          getSyncFileSignalUSER2 ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSyncFileSignalUSER2 (const SyncFileSignalUSER2Type& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSyncFileSignalUSER2 (::std::auto_ptr< SyncFileSignalUSER2Type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          OSConfigurationFiles ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          OSConfigurationFiles (const IdHardwareFileFullPathType&,
                                const MasterDeviceFileFullPathType&,
                                const EventDeviceFileFullPathType&,
                                const LineDeviceSeparatorType&,
                                const RemoveEventDeviceFileType&,
                                const SerialLocationFileFullPathType&,
                                const LineSerialLocationSeparatorType&,
                                const ScriptRunSmartCardType&,
                                const ScriptRunPrintBlankType&,
                                const ScriptRunDSortVoteType&,
                                const SyncFileSignalUSER1Type&,
                                const SyncFileSignalUSER2Type&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          OSConfigurationFiles (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          OSConfigurationFiles (const OSConfigurationFiles& x,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual OSConfigurationFiles*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~OSConfigurationFiles ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< IdHardwareFileFullPathType > IdHardwareFileFullPath_;
          ::xsd::cxx::tree::one< MasterDeviceFileFullPathType > MasterDeviceFileFullPath_;
          ::xsd::cxx::tree::one< EventDeviceFileFullPathType > EventDeviceFileFullPath_;
          ::xsd::cxx::tree::one< LineDeviceSeparatorType > LineDeviceSeparator_;
          ::xsd::cxx::tree::one< RemoveEventDeviceFileType > RemoveEventDeviceFile_;
          ::xsd::cxx::tree::one< SerialLocationFileFullPathType > SerialLocationFileFullPath_;
          ::xsd::cxx::tree::one< LineSerialLocationSeparatorType > LineSerialLocationSeparator_;
          ::xsd::cxx::tree::one< ScriptRunSmartCardType > ScriptRunSmartCard_;
          ::xsd::cxx::tree::one< ScriptRunPrintBlankType > ScriptRunPrintBlank_;
          ::xsd::cxx::tree::one< ScriptRunDSortVoteType > ScriptRunDSortVote_;
          ::xsd::cxx::tree::one< SyncFileSignalUSER1Type > SyncFileSignalUSER1_;
          ::xsd::cxx::tree::one< SyncFileSignalUSER2Type > SyncFileSignalUSER2_;

          //@endcond
        };

        bool
        operator== (const OSConfigurationFiles&, const OSConfigurationFiles&);

        bool
        operator!= (const OSConfigurationFiles&, const OSConfigurationFiles&);


        /**
         * @brief Class corresponding to the %LogConfigurationReader schema type.
         *
         * @nosubgrouping
         */
        class LogConfigurationReader: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name LogErrorReader
           *
           * @brief Accessor and modifier functions for the %LogErrorReader
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::CryptoType LogErrorReaderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LogErrorReaderType, char > LogErrorReaderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LogErrorReaderType&
          getLogErrorReader () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LogErrorReaderType&
          getLogErrorReader ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogErrorReader (const LogErrorReaderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogErrorReader (::std::auto_ptr< LogErrorReaderType > p);

          //@}

          /**
           * @name LogAuditReader
           *
           * @brief Accessor and modifier functions for the %LogAuditReader
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::CryptoType LogAuditReaderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LogAuditReaderType, char > LogAuditReaderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LogAuditReaderType&
          getLogAuditReader () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LogAuditReaderType&
          getLogAuditReader ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogAuditReader (const LogAuditReaderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogAuditReader (::std::auto_ptr< LogAuditReaderType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          LogConfigurationReader ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          LogConfigurationReader (const LogErrorReaderType&,
                                  const LogAuditReaderType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          LogConfigurationReader (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          LogConfigurationReader (const LogConfigurationReader& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual LogConfigurationReader*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~LogConfigurationReader ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< LogErrorReaderType > LogErrorReader_;
          ::xsd::cxx::tree::one< LogAuditReaderType > LogAuditReader_;

          //@endcond
        };

        bool
        operator== (const LogConfigurationReader&, const LogConfigurationReader&);

        bool
        operator!= (const LogConfigurationReader&, const LogConfigurationReader&);


        /**
         * @brief Class corresponding to the %BEIDConfiguration schema type.
         *
         * @nosubgrouping
         */
        class BEIDConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name UseCallbackEvent
           *
           * @brief Accessor and modifier functions for the %UseCallbackEvent
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean UseCallbackEventType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UseCallbackEventType, char > UseCallbackEventTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UseCallbackEventType&
          getUseCallbackEvent () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UseCallbackEventType&
          getUseCallbackEvent ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setUseCallbackEvent (const UseCallbackEventType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BEIDConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BEIDConfiguration (const UseCallbackEventType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BEIDConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BEIDConfiguration (const BEIDConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BEIDConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BEIDConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< UseCallbackEventType > UseCallbackEvent_;

          //@endcond
        };

        bool
        operator== (const BEIDConfiguration&, const BEIDConfiguration&);

        bool
        operator!= (const BEIDConfiguration&, const BEIDConfiguration&);


        /**
         * @brief Class corresponding to the %SmartCardConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SmartCardConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name AppletAID
           *
           * @brief Accessor and modifier functions for the %AppletAID
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String AppletAIDType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AppletAIDType, char > AppletAIDTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AppletAIDType&
          getAppletAID () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AppletAIDType&
          getAppletAID ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAppletAID (const AppletAIDType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAppletAID (::std::auto_ptr< AppletAIDType > p);

          //@}

          /**
           * @name GlobalPIN
           *
           * @brief Accessor and modifier functions for the %GlobalPIN
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::GlobalPIN GlobalPINType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GlobalPINType, char > GlobalPINTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const GlobalPINType&
          getGlobalPIN () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          GlobalPINType&
          getGlobalPIN ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setGlobalPIN (const GlobalPINType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setGlobalPIN (::std::auto_ptr< GlobalPINType > p);

          //@}

          /**
           * @name DataPIN
           *
           * @brief Accessor and modifier functions for the %DataPIN
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::DataPIN DataPINType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DataPINType, char > DataPINTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DataPINType&
          getDataPIN () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DataPINType&
          getDataPIN ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDataPIN (const DataPINType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDataPIN (::std::auto_ptr< DataPINType > p);

          //@}

          /**
           * @name PlatformMode
           *
           * @brief Accessor and modifier functions for the %PlatformMode
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::PlatformMode PlatformModeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PlatformModeType, char > PlatformModeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PlatformModeType&
          getPlatformMode () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PlatformModeType&
          getPlatformMode ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPlatformMode (const PlatformModeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPlatformMode (::std::auto_ptr< PlatformModeType > p);

          //@}

          /**
           * @name SecureChannelEnabled
           *
           * @brief Accessor and modifier functions for the %SecureChannelEnabled
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SecureChannelEnabledType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecureChannelEnabledType, char > SecureChannelEnabledTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecureChannelEnabledType&
          getSecureChannelEnabled () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecureChannelEnabledType&
          getSecureChannelEnabled ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecureChannelEnabled (const SecureChannelEnabledType& x);

          //@}

          /**
           * @name SecurityKeySetVersion
           *
           * @brief Accessor and modifier functions for the %SecurityKeySetVersion
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer SecurityKeySetVersionType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityKeySetVersionType, char > SecurityKeySetVersionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecurityKeySetVersionType&
          getSecurityKeySetVersion () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecurityKeySetVersionType&
          getSecurityKeySetVersion ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityKeySetVersion (const SecurityKeySetVersionType& x);

          //@}

          /**
           * @name SecurityKeyIndex
           *
           * @brief Accessor and modifier functions for the %SecurityKeyIndex
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer SecurityKeyIndexType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityKeyIndexType, char > SecurityKeyIndexTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecurityKeyIndexType&
          getSecurityKeyIndex () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecurityKeyIndexType&
          getSecurityKeyIndex ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityKeyIndex (const SecurityKeyIndexType& x);

          //@}

          /**
           * @name SecurityChannelProtocol
           *
           * @brief Accessor and modifier functions for the %SecurityChannelProtocol
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocol SecurityChannelProtocolType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityChannelProtocolType, char > SecurityChannelProtocolTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecurityChannelProtocolType&
          getSecurityChannelProtocol () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecurityChannelProtocolType&
          getSecurityChannelProtocol ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityChannelProtocol (const SecurityChannelProtocolType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSecurityChannelProtocol (::std::auto_ptr< SecurityChannelProtocolType > p);

          //@}

          /**
           * @name SecurityChannelProtocolImpl
           *
           * @brief Accessor and modifier functions for the %SecurityChannelProtocolImpl
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityChannelProtocolImpl SecurityChannelProtocolImplType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityChannelProtocolImplType, char > SecurityChannelProtocolImplTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecurityChannelProtocolImplType&
          getSecurityChannelProtocolImpl () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecurityChannelProtocolImplType&
          getSecurityChannelProtocolImpl ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityChannelProtocolImpl (const SecurityChannelProtocolImplType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSecurityChannelProtocolImpl (::std::auto_ptr< SecurityChannelProtocolImplType > p);

          //@}

          /**
           * @name SecurityLevel
           *
           * @brief Accessor and modifier functions for the %SecurityLevel
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityLevel SecurityLevelType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityLevelType, char > SecurityLevelTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecurityLevelType&
          getSecurityLevel () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecurityLevelType&
          getSecurityLevel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityLevel (const SecurityLevelType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSecurityLevel (::std::auto_ptr< SecurityLevelType > p);

          //@}

          /**
           * @name SecurityKeyDerivation
           *
           * @brief Accessor and modifier functions for the %SecurityKeyDerivation
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityKeyDerivation SecurityKeyDerivationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityKeyDerivationType, char > SecurityKeyDerivationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecurityKeyDerivationType&
          getSecurityKeyDerivation () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecurityKeyDerivationType&
          getSecurityKeyDerivation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityKeyDerivation (const SecurityKeyDerivationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSecurityKeyDerivation (::std::auto_ptr< SecurityKeyDerivationType > p);

          //@}

          /**
           * @name NivelTest
           *
           * @brief Accessor and modifier functions for the %NivelTest
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::NivelTestConfig NivelTestType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< NivelTestType > NivelTestSequence;

          /**
           * @brief Element iterator type.
           */
          typedef NivelTestSequence::iterator NivelTestIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef NivelTestSequence::const_iterator NivelTestConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NivelTestType, char > NivelTestTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const NivelTestSequence&
          getNivelTest () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          NivelTestSequence&
          getNivelTest ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setNivelTest (const NivelTestSequence& s);

          //@}

          /**
           * @name SuspendResumeEachVote
           *
           * @brief Accessor and modifier functions for the %SuspendResumeEachVote
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SuspendResumeEachVoteType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SuspendResumeEachVoteType, char > SuspendResumeEachVoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SuspendResumeEachVoteType&
          getSuspendResumeEachVote () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SuspendResumeEachVoteType&
          getSuspendResumeEachVote ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSuspendResumeEachVote (const SuspendResumeEachVoteType& x);

          //@}

          /**
           * @name SuspendResumeOnErrorCondition
           *
           * @brief Accessor and modifier functions for the %SuspendResumeOnErrorCondition
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SuspendResumeOnErrorConditionType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SuspendResumeOnErrorConditionType, char > SuspendResumeOnErrorConditionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SuspendResumeOnErrorConditionType&
          getSuspendResumeOnErrorCondition () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SuspendResumeOnErrorConditionType&
          getSuspendResumeOnErrorCondition ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSuspendResumeOnErrorCondition (const SuspendResumeOnErrorConditionType& x);

          //@}

          /**
           * @name DelayAfterSuspend
           *
           * @brief Accessor and modifier functions for the %DelayAfterSuspend
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer DelayAfterSuspendType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DelayAfterSuspendType, char > DelayAfterSuspendTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DelayAfterSuspendType&
          getDelayAfterSuspend () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DelayAfterSuspendType&
          getDelayAfterSuspend ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDelayAfterSuspend (const DelayAfterSuspendType& x);

          //@}

          /**
           * @name DelayAfterOn
           *
           * @brief Accessor and modifier functions for the %DelayAfterOn
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer DelayAfterOnType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DelayAfterOnType, char > DelayAfterOnTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DelayAfterOnType&
          getDelayAfterOn () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DelayAfterOnType&
          getDelayAfterOn ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDelayAfterOn (const DelayAfterOnType& x);

          //@}

          /**
           * @name ShowMessagePowerCycle
           *
           * @brief Accessor and modifier functions for the %ShowMessagePowerCycle
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ShowMessagePowerCycleType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ShowMessagePowerCycleType, char > ShowMessagePowerCycleTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ShowMessagePowerCycleType&
          getShowMessagePowerCycle () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ShowMessagePowerCycleType&
          getShowMessagePowerCycle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setShowMessagePowerCycle (const ShowMessagePowerCycleType& x);

          //@}

          /**
           * @name TimeOutMessagePowerCycle
           *
           * @brief Accessor and modifier functions for the %TimeOutMessagePowerCycle
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger TimeOutMessagePowerCycleType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TimeOutMessagePowerCycleType, char > TimeOutMessagePowerCycleTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TimeOutMessagePowerCycleType&
          getTimeOutMessagePowerCycle () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TimeOutMessagePowerCycleType&
          getTimeOutMessagePowerCycle ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTimeOutMessagePowerCycle (const TimeOutMessagePowerCycleType& x);

          //@}

          /**
           * @name PowerCycleTries
           *
           * @brief Accessor and modifier functions for the %PowerCycleTries
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger PowerCycleTriesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PowerCycleTriesType, char > PowerCycleTriesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PowerCycleTriesType&
          getPowerCycleTries () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PowerCycleTriesType&
          getPowerCycleTries ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPowerCycleTries (const PowerCycleTriesType& x);

          //@}

          /**
           * @name ForceRestartPCSCD
           *
           * @brief Accessor and modifier functions for the %ForceRestartPCSCD
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ForceRestartPCSCDType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForceRestartPCSCDType, char > ForceRestartPCSCDTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ForceRestartPCSCDType&
          getForceRestartPCSCD () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ForceRestartPCSCDType&
          getForceRestartPCSCD ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setForceRestartPCSCD (const ForceRestartPCSCDType& x);

          //@}

          /**
           * @name WaitStopPCSCD
           *
           * @brief Accessor and modifier functions for the %WaitStopPCSCD
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger WaitStopPCSCDType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WaitStopPCSCDType, char > WaitStopPCSCDTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const WaitStopPCSCDType&
          getWaitStopPCSCD () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          WaitStopPCSCDType&
          getWaitStopPCSCD ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setWaitStopPCSCD (const WaitStopPCSCDType& x);

          //@}

          /**
           * @name WaitStartPCSCD
           *
           * @brief Accessor and modifier functions for the %WaitStartPCSCD
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger WaitStartPCSCDType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< WaitStartPCSCDType, char > WaitStartPCSCDTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const WaitStartPCSCDType&
          getWaitStartPCSCD () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          WaitStartPCSCDType&
          getWaitStartPCSCD ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setWaitStartPCSCD (const WaitStartPCSCDType& x);

          //@}

          /**
           * @name ShowMessageRestartPCSCD
           *
           * @brief Accessor and modifier functions for the %ShowMessageRestartPCSCD
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ShowMessageRestartPCSCDType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ShowMessageRestartPCSCDType, char > ShowMessageRestartPCSCDTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ShowMessageRestartPCSCDType&
          getShowMessageRestartPCSCD () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ShowMessageRestartPCSCDType&
          getShowMessageRestartPCSCD ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setShowMessageRestartPCSCD (const ShowMessageRestartPCSCDType& x);

          //@}

          /**
           * @name ReadRetry
           *
           * @brief Accessor and modifier functions for the %ReadRetry
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ReadRetryType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReadRetryType, char > ReadRetryTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ReadRetryType&
          getReadRetry () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ReadRetryType&
          getReadRetry ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setReadRetry (const ReadRetryType& x);

          //@}

          /**
           * @name FatalErrorCodes
           *
           * @brief Accessor and modifier functions for the %FatalErrorCodes
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SmartCardErrorCode FatalErrorCodesType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< FatalErrorCodesType > FatalErrorCodesSequence;

          /**
           * @brief Element iterator type.
           */
          typedef FatalErrorCodesSequence::iterator FatalErrorCodesIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef FatalErrorCodesSequence::const_iterator FatalErrorCodesConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FatalErrorCodesType, char > FatalErrorCodesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const FatalErrorCodesSequence&
          getFatalErrorCodes () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          FatalErrorCodesSequence&
          getFatalErrorCodes ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setFatalErrorCodes (const FatalErrorCodesSequence& s);

          //@}

          /**
           * @name UseConnectedSmartcardReader
           *
           * @brief Accessor and modifier functions for the %UseConnectedSmartcardReader
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean UseConnectedSmartcardReaderType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< UseConnectedSmartcardReaderType, char > UseConnectedSmartcardReaderTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const UseConnectedSmartcardReaderType&
          getUseConnectedSmartcardReader () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          UseConnectedSmartcardReaderType&
          getUseConnectedSmartcardReader ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setUseConnectedSmartcardReader (const UseConnectedSmartcardReaderType& x);

          //@}

          /**
           * @name ConnectedReaderRenewContext
           *
           * @brief Accessor and modifier functions for the %ConnectedReaderRenewContext
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ConnectedReaderRenewContextType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConnectedReaderRenewContextType, char > ConnectedReaderRenewContextTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ConnectedReaderRenewContextType&
          getConnectedReaderRenewContext () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ConnectedReaderRenewContextType&
          getConnectedReaderRenewContext ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setConnectedReaderRenewContext (const ConnectedReaderRenewContextType& x);

          //@}

          /**
           * @name ConnectedSmartcardPCSCCheckCard
           *
           * @brief Accessor and modifier functions for the %ConnectedSmartcardPCSCCheckCard
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ConnectedSmartcardPCSCCheckCardType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConnectedSmartcardPCSCCheckCardType, char > ConnectedSmartcardPCSCCheckCardTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ConnectedSmartcardPCSCCheckCardType&
          getConnectedSmartcardPCSCCheckCard () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ConnectedSmartcardPCSCCheckCardType&
          getConnectedSmartcardPCSCCheckCard ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setConnectedSmartcardPCSCCheckCard (const ConnectedSmartcardPCSCCheckCardType& x);

          //@}

          /**
           * @name ConnectedSmartcardConnectToCheckPresence
           *
           * @brief Accessor and modifier functions for the %ConnectedSmartcardConnectToCheckPresence
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ConnectedSmartcardConnectToCheckPresenceType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConnectedSmartcardConnectToCheckPresenceType, char > ConnectedSmartcardConnectToCheckPresenceTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ConnectedSmartcardConnectToCheckPresenceType&
          getConnectedSmartcardConnectToCheckPresence () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ConnectedSmartcardConnectToCheckPresenceType&
          getConnectedSmartcardConnectToCheckPresence ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setConnectedSmartcardConnectToCheckPresence (const ConnectedSmartcardConnectToCheckPresenceType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SmartCardConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SmartCardConfiguration (const AppletAIDType&,
                                  const GlobalPINType&,
                                  const DataPINType&,
                                  const PlatformModeType&,
                                  const SecureChannelEnabledType&,
                                  const SecurityKeySetVersionType&,
                                  const SecurityKeyIndexType&,
                                  const SecurityChannelProtocolType&,
                                  const SecurityChannelProtocolImplType&,
                                  const SecurityLevelType&,
                                  const SecurityKeyDerivationType&,
                                  const SuspendResumeEachVoteType&,
                                  const SuspendResumeOnErrorConditionType&,
                                  const DelayAfterSuspendType&,
                                  const DelayAfterOnType&,
                                  const ShowMessagePowerCycleType&,
                                  const TimeOutMessagePowerCycleType&,
                                  const PowerCycleTriesType&,
                                  const ForceRestartPCSCDType&,
                                  const WaitStopPCSCDType&,
                                  const WaitStartPCSCDType&,
                                  const ShowMessageRestartPCSCDType&,
                                  const ReadRetryType&,
                                  const UseConnectedSmartcardReaderType&,
                                  const ConnectedReaderRenewContextType&,
                                  const ConnectedSmartcardPCSCCheckCardType&,
                                  const ConnectedSmartcardConnectToCheckPresenceType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SmartCardConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SmartCardConfiguration (const SmartCardConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SmartCardConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SmartCardConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< AppletAIDType > AppletAID_;
          ::xsd::cxx::tree::one< GlobalPINType > GlobalPIN_;
          ::xsd::cxx::tree::one< DataPINType > DataPIN_;
          ::xsd::cxx::tree::one< PlatformModeType > PlatformMode_;
          ::xsd::cxx::tree::one< SecureChannelEnabledType > SecureChannelEnabled_;
          ::xsd::cxx::tree::one< SecurityKeySetVersionType > SecurityKeySetVersion_;
          ::xsd::cxx::tree::one< SecurityKeyIndexType > SecurityKeyIndex_;
          ::xsd::cxx::tree::one< SecurityChannelProtocolType > SecurityChannelProtocol_;
          ::xsd::cxx::tree::one< SecurityChannelProtocolImplType > SecurityChannelProtocolImpl_;
          ::xsd::cxx::tree::one< SecurityLevelType > SecurityLevel_;
          ::xsd::cxx::tree::one< SecurityKeyDerivationType > SecurityKeyDerivation_;
          NivelTestSequence NivelTest_;
          ::xsd::cxx::tree::one< SuspendResumeEachVoteType > SuspendResumeEachVote_;
          ::xsd::cxx::tree::one< SuspendResumeOnErrorConditionType > SuspendResumeOnErrorCondition_;
          ::xsd::cxx::tree::one< DelayAfterSuspendType > DelayAfterSuspend_;
          ::xsd::cxx::tree::one< DelayAfterOnType > DelayAfterOn_;
          ::xsd::cxx::tree::one< ShowMessagePowerCycleType > ShowMessagePowerCycle_;
          ::xsd::cxx::tree::one< TimeOutMessagePowerCycleType > TimeOutMessagePowerCycle_;
          ::xsd::cxx::tree::one< PowerCycleTriesType > PowerCycleTries_;
          ::xsd::cxx::tree::one< ForceRestartPCSCDType > ForceRestartPCSCD_;
          ::xsd::cxx::tree::one< WaitStopPCSCDType > WaitStopPCSCD_;
          ::xsd::cxx::tree::one< WaitStartPCSCDType > WaitStartPCSCD_;
          ::xsd::cxx::tree::one< ShowMessageRestartPCSCDType > ShowMessageRestartPCSCD_;
          ::xsd::cxx::tree::one< ReadRetryType > ReadRetry_;
          FatalErrorCodesSequence FatalErrorCodes_;
          ::xsd::cxx::tree::one< UseConnectedSmartcardReaderType > UseConnectedSmartcardReader_;
          ::xsd::cxx::tree::one< ConnectedReaderRenewContextType > ConnectedReaderRenewContext_;
          ::xsd::cxx::tree::one< ConnectedSmartcardPCSCCheckCardType > ConnectedSmartcardPCSCCheckCard_;
          ::xsd::cxx::tree::one< ConnectedSmartcardConnectToCheckPresenceType > ConnectedSmartcardConnectToCheckPresence_;

          //@endcond
        };

        bool
        operator== (const SmartCardConfiguration&, const SmartCardConfiguration&);

        bool
        operator!= (const SmartCardConfiguration&, const SmartCardConfiguration&);


        /**
         * @brief Class corresponding to the %PCSCDConfiguration schema type.
         *
         * @nosubgrouping
         */
        class PCSCDConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name StartService
           *
           * @brief Accessor and modifier functions for the %StartService
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean StartServiceType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StartServiceType, char > StartServiceTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StartServiceType&
          getStartService () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StartServiceType&
          getStartService ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStartService (const StartServiceType& x);

          //@}

          /**
           * @name StopService
           *
           * @brief Accessor and modifier functions for the %StopService
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean StopServiceType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StopServiceType, char > StopServiceTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StopServiceType&
          getStopService () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StopServiceType&
          getStopService ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStopService (const StopServiceType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PCSCDConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PCSCDConfiguration (const StartServiceType&,
                              const StopServiceType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PCSCDConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PCSCDConfiguration (const PCSCDConfiguration& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PCSCDConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PCSCDConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< StartServiceType > StartService_;
          ::xsd::cxx::tree::one< StopServiceType > StopService_;

          //@endcond
        };

        bool
        operator== (const PCSCDConfiguration&, const PCSCDConfiguration&);

        bool
        operator!= (const PCSCDConfiguration&, const PCSCDConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %CommandPrintingModeType
         * schema type.
         */
        class CommandPrintingModeType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_EMBEDDED_TEXT_CMD,
            CONFIGURATION_BINARY_CMD
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CommandPrintingModeType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CommandPrintingModeType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CommandPrintingModeType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CommandPrintingModeType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CommandPrintingModeType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CommandPrintingModeType (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CommandPrintingModeType (const ::xercesc::DOMAttr& a,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CommandPrintingModeType (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CommandPrintingModeType (const CommandPrintingModeType& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CommandPrintingModeType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CommandPrintingModeType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CommandPrintingModeType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CommandPrintingModeType_convert () const;

          public:
          static const char* const _xsd_CommandPrintingModeType_literals_[2];
          static const Value _xsd_CommandPrintingModeType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %PrinterBackendType
         * schema type.
         */
        class PrinterBackendType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_DIRECTPRINTING,
            CONFIGURATION_GTKPRINTING
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          PrinterBackendType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          PrinterBackendType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          PrinterBackendType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          PrinterBackendType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          PrinterBackendType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PrinterBackendType (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PrinterBackendType (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PrinterBackendType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PrinterBackendType (const PrinterBackendType& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PrinterBackendType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          PrinterBackendType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_PrinterBackendType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_PrinterBackendType_convert () const;

          public:
          static const char* const _xsd_PrinterBackendType_literals_[2];
          static const Value _xsd_PrinterBackendType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %CutType
         * schema type.
         */
        class CutType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_NOCUT,
            CONFIGURATION_CUT,
            CONFIGURATION_PARTIALCUT
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CutType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CutType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CutType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CutType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CutType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CutType (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CutType (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CutType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CutType (const CutType& x,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CutType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CutType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CutType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CutType_convert () const;

          public:
          static const char* const _xsd_CutType_literals_[3];
          static const Value _xsd_CutType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ConfigurationBasePath schema type.
         *
         * @nosubgrouping
         */
        class ConfigurationBasePath: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name RulesBasePath
           *
           * @brief Accessor and modifier functions for the %RulesBasePath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::RulesBasePathType RulesBasePathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RulesBasePathType, char > RulesBasePathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RulesBasePathType&
          getRulesBasePath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RulesBasePathType&
          getRulesBasePath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setRulesBasePath (const RulesBasePathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRulesBasePath (::std::auto_ptr< RulesBasePathType > p);

          //@}

          /**
           * @name LiveFileSystemBasePath
           *
           * @brief Accessor and modifier functions for the %LiveFileSystemBasePath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LiveFileSystemBasePathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LiveFileSystemBasePathType, char > LiveFileSystemBasePathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LiveFileSystemBasePathType&
          getLiveFileSystemBasePath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LiveFileSystemBasePathType&
          getLiveFileSystemBasePath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLiveFileSystemBasePath (const LiveFileSystemBasePathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLiveFileSystemBasePath (::std::auto_ptr< LiveFileSystemBasePathType > p);

          //@}

          /**
           * @name languageImageDirectory
           *
           * @brief Accessor and modifier functions for the %languageImageDirectory
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LanguageImageDirectoryType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< LanguageImageDirectoryType, char > LanguageImageDirectoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const LanguageImageDirectoryType&
          getLanguageImageDirectory () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          LanguageImageDirectoryType&
          getLanguageImageDirectory ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setLanguageImageDirectory (const LanguageImageDirectoryType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLanguageImageDirectory (::std::auto_ptr< LanguageImageDirectoryType > p);

          //@}

          /**
           * @name backupFileName
           *
           * @brief Accessor and modifier functions for the %backupFileName
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String BackupFileNameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< BackupFileNameType, char > BackupFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const BackupFileNameType&
          getBackupFileName () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          BackupFileNameType&
          getBackupFileName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBackupFileName (const BackupFileNameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBackupFileName (::std::auto_ptr< BackupFileNameType > p);

          //@}

          /**
           * @name ProjectName
           *
           * @brief Accessor and modifier functions for the %ProjectName
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ProjectNameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ProjectNameType, char > ProjectNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ProjectNameType&
          getProjectName () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ProjectNameType&
          getProjectName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setProjectName (const ProjectNameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setProjectName (::std::auto_ptr< ProjectNameType > p);

          //@}

          /**
           * @name WorkingDirectory
           *
           * @brief Accessor and modifier functions for the %WorkingDirectory
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String WorkingDirectoryType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< WorkingDirectoryType, char > WorkingDirectoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const WorkingDirectoryType&
          getWorkingDirectory () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          WorkingDirectoryType&
          getWorkingDirectory ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setWorkingDirectory (const WorkingDirectoryType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setWorkingDirectory (::std::auto_ptr< WorkingDirectoryType > p);

          //@}

          /**
           * @name VotingExperienceValidationScreensDirectory
           *
           * @brief Accessor and modifier functions for the %VotingExperienceValidationScreensDirectory
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VotingExperienceValidationScreensDirectoryType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingExperienceValidationScreensDirectoryType, char > VotingExperienceValidationScreensDirectoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const VotingExperienceValidationScreensDirectoryType&
          getVotingExperienceValidationScreensDirectory () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          VotingExperienceValidationScreensDirectoryType&
          getVotingExperienceValidationScreensDirectory ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVotingExperienceValidationScreensDirectory (const VotingExperienceValidationScreensDirectoryType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingExperienceValidationScreensDirectory (::std::auto_ptr< VotingExperienceValidationScreensDirectoryType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ConfigurationBasePath ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConfigurationBasePath (const RulesBasePathType&,
                                 const LiveFileSystemBasePathType&,
                                 const LanguageImageDirectoryType&,
                                 const BackupFileNameType&,
                                 const ProjectNameType&,
                                 const WorkingDirectoryType&,
                                 const VotingExperienceValidationScreensDirectoryType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConfigurationBasePath (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConfigurationBasePath (const ConfigurationBasePath& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConfigurationBasePath*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConfigurationBasePath ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< RulesBasePathType > RulesBasePath_;
          ::xsd::cxx::tree::one< LiveFileSystemBasePathType > LiveFileSystemBasePath_;
          ::xsd::cxx::tree::one< LanguageImageDirectoryType > languageImageDirectory_;
          ::xsd::cxx::tree::one< BackupFileNameType > backupFileName_;
          ::xsd::cxx::tree::one< ProjectNameType > ProjectName_;
          ::xsd::cxx::tree::one< WorkingDirectoryType > WorkingDirectory_;
          ::xsd::cxx::tree::one< VotingExperienceValidationScreensDirectoryType > VotingExperienceValidationScreensDirectory_;

          //@endcond
        };

        bool
        operator== (const ConfigurationBasePath&, const ConfigurationBasePath&);

        bool
        operator!= (const ConfigurationBasePath&, const ConfigurationBasePath&);


        /**
         * @brief Enumeration class corresponding to the %RulesBasePathType
         * schema type.
         */
        class RulesBasePathType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_PM_RULE,
            CONFIGURATION_VM_RULE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          RulesBasePathType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          RulesBasePathType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          RulesBasePathType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          RulesBasePathType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          RulesBasePathType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RulesBasePathType (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RulesBasePathType (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RulesBasePathType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RulesBasePathType (const RulesBasePathType& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RulesBasePathType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          RulesBasePathType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_RulesBasePathType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_RulesBasePathType_convert () const;

          public:
          static const char* const _xsd_RulesBasePathType_literals_[2];
          static const Value _xsd_RulesBasePathType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BasePath schema type.
         *
         * @nosubgrouping
         */
        class BasePath: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name path
           *
           * @brief Accessor and modifier functions for the %path
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PathType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< PathType, char > PathTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const PathType&
          getPath () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          PathType&
          getPath ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPath (const PathType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPath (::std::auto_ptr< PathType > p);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::BasePathType TypeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeType&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeType&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BasePath ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BasePath (const PathType&,
                    const TypeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BasePath (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BasePath (const BasePath& x,
                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BasePath*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BasePath ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< PathType > path_;
          ::xsd::cxx::tree::one< TypeType > type_;

          //@endcond
        };

        bool
        operator== (const BasePath&, const BasePath&);

        bool
        operator!= (const BasePath&, const BasePath&);


        /**
         * @brief Enumeration class corresponding to the %BasePathType
         * schema type.
         */
        class BasePathType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_DOM,
            CONFIGURATION_FLASH,
            CONFIGURATION_BACKUP
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          BasePathType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          BasePathType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          BasePathType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          BasePathType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          BasePathType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BasePathType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BasePathType (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BasePathType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BasePathType (const BasePathType& x,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BasePathType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          BasePathType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_BasePathType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_BasePathType_convert () const;

          public:
          static const char* const _xsd_BasePathType_literals_[3];
          static const Value _xsd_BasePathType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %DigestAlgType
         * schema type.
         */
        class DigestAlgType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_MD5,
            CONFIGURATION_SHA1,
            CONFIGURATION_SHA224,
            CONFIGURATION_SHA256,
            CONFIGURATION_SHA384,
            CONFIGURATION_SHA512
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          DigestAlgType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          DigestAlgType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          DigestAlgType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          DigestAlgType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          DigestAlgType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DigestAlgType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DigestAlgType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DigestAlgType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DigestAlgType (const DigestAlgType& x,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual DigestAlgType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          DigestAlgType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_DigestAlgType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_DigestAlgType_convert () const;

          public:
          static const char* const _xsd_DigestAlgType_literals_[6];
          static const Value _xsd_DigestAlgType_indexes_[6];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %KeyDerivAlgType
         * schema type.
         */
        class KeyDerivAlgType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_HMAC,
            CONFIGURATION_DES,
            CONFIGURATION_3KEY3DES,
            CONFIGURATION_2KEY3DES,
            CONFIGURATION_RC4
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          KeyDerivAlgType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          KeyDerivAlgType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          KeyDerivAlgType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          KeyDerivAlgType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          KeyDerivAlgType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          KeyDerivAlgType (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          KeyDerivAlgType (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          KeyDerivAlgType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          KeyDerivAlgType (const KeyDerivAlgType& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual KeyDerivAlgType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          KeyDerivAlgType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_KeyDerivAlgType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_KeyDerivAlgType_convert () const;

          public:
          static const char* const _xsd_KeyDerivAlgType_literals_[5];
          static const Value _xsd_KeyDerivAlgType_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SaltSourceType schema type.
         *
         * @nosubgrouping
         */
        class SaltSourceType: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name CalcSalt
           *
           * @brief Accessor and modifier functions for the %CalcSalt
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean CalcSaltType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CalcSaltType, char > CalcSaltTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CalcSaltType&
          getCalcSalt () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CalcSaltType&
          getCalcSalt ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCalcSalt (const CalcSaltType& x);

          //@}

          /**
           * @name SepChar
           *
           * @brief Accessor and modifier functions for the %SepChar
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SepCharType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SepCharType, char > SepCharTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SepCharType&
          getSepChar () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SepCharType&
          getSepChar ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSepChar (const SepCharType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSepChar (::std::auto_ptr< SepCharType > p);

          //@}

          /**
           * @name DefaultSalt
           *
           * @brief Accessor and modifier functions for the %DefaultSalt
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String DefaultSaltType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultSaltType, char > DefaultSaltTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DefaultSaltType&
          getDefaultSalt () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DefaultSaltType&
          getDefaultSalt ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDefaultSalt (const DefaultSaltType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDefaultSalt (::std::auto_ptr< DefaultSaltType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SaltSourceType ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SaltSourceType (const CalcSaltType&,
                          const SepCharType&,
                          const DefaultSaltType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SaltSourceType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SaltSourceType (const SaltSourceType& x,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SaltSourceType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SaltSourceType ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CalcSaltType > CalcSalt_;
          ::xsd::cxx::tree::one< SepCharType > SepChar_;
          ::xsd::cxx::tree::one< DefaultSaltType > DefaultSalt_;

          //@endcond
        };

        bool
        operator== (const SaltSourceType&, const SaltSourceType&);

        bool
        operator!= (const SaltSourceType&, const SaltSourceType&);


        /**
         * @brief Class corresponding to the %SecurityConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SecurityConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name SecurityCryptoMode
           *
           * @brief Accessor and modifier functions for the %SecurityCryptoMode
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityCryptoMode SecurityCryptoModeType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SecurityCryptoModeType > SecurityCryptoModeOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecurityCryptoModeType, char > SecurityCryptoModeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SecurityCryptoModeOptional&
          getSecurityCryptoMode () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SecurityCryptoModeOptional&
          getSecurityCryptoMode ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecurityCryptoMode (const SecurityCryptoModeType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setSecurityCryptoMode (const SecurityCryptoModeOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setSecurityCryptoMode (::std::auto_ptr< SecurityCryptoModeType > p);

          //@}

          /**
           * @name SecretKeyEncrypted
           *
           * @brief Accessor and modifier functions for the %SecretKeyEncrypted
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SecretKeyEncryptedType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecretKeyEncryptedType, char > SecretKeyEncryptedTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecretKeyEncryptedType&
          getSecretKeyEncrypted () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecretKeyEncryptedType&
          getSecretKeyEncrypted ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecretKeyEncrypted (const SecretKeyEncryptedType& x);

          //@}

          /**
           * @name ForceReduceElection
           *
           * @brief Accessor and modifier functions for the %ForceReduceElection
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ForceReduceElectionType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ForceReduceElectionType, char > ForceReduceElectionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ForceReduceElectionType&
          getForceReduceElection () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ForceReduceElectionType&
          getForceReduceElection ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setForceReduceElection (const ForceReduceElectionType& x);

          //@}

          /**
           * @name VerifySAESFolder
           *
           * @brief Accessor and modifier functions for the %VerifySAESFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean VerifySAESFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VerifySAESFolderType, char > VerifySAESFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VerifySAESFolderType&
          getVerifySAESFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VerifySAESFolderType&
          getVerifySAESFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVerifySAESFolder (const VerifySAESFolderType& x);

          //@}

          /**
           * @name IsCompressElection
           *
           * @brief Accessor and modifier functions for the %IsCompressElection
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean IsCompressElectionType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IsCompressElectionType, char > IsCompressElectionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IsCompressElectionType&
          getIsCompressElection () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IsCompressElectionType&
          getIsCompressElection ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIsCompressElection (const IsCompressElectionType& x);

          //@}

          /**
           * @name IsCompressVotingDevices
           *
           * @brief Accessor and modifier functions for the %IsCompressVotingDevices
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean IsCompressVotingDevicesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IsCompressVotingDevicesType, char > IsCompressVotingDevicesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IsCompressVotingDevicesType&
          getIsCompressVotingDevices () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IsCompressVotingDevicesType&
          getIsCompressVotingDevices ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIsCompressVotingDevices (const IsCompressVotingDevicesType& x);

          //@}

          /**
           * @name ImplementCACertificateFileName
           *
           * @brief Accessor and modifier functions for the %ImplementCACertificateFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ImplementCACertificateFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ImplementCACertificateFileNameType, char > ImplementCACertificateFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ImplementCACertificateFileNameType&
          getImplementCACertificateFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ImplementCACertificateFileNameType&
          getImplementCACertificateFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setImplementCACertificateFileName (const ImplementCACertificateFileNameType& x);

          //@}

          /**
           * @name ImplementItermediateCACertificates
           *
           * @brief Accessor and modifier functions for the %ImplementItermediateCACertificates
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ImplementItermediateCACertificatesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ImplementItermediateCACertificatesType, char > ImplementItermediateCACertificatesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ImplementItermediateCACertificatesType&
          getImplementItermediateCACertificates () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ImplementItermediateCACertificatesType&
          getImplementItermediateCACertificates ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setImplementItermediateCACertificates (const ImplementItermediateCACertificatesType& x);

          //@}

          /**
           * @name ImplementTrustedCertificates
           *
           * @brief Accessor and modifier functions for the %ImplementTrustedCertificates
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ImplementTrustedCertificatesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ImplementTrustedCertificatesType, char > ImplementTrustedCertificatesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ImplementTrustedCertificatesType&
          getImplementTrustedCertificates () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ImplementTrustedCertificatesType&
          getImplementTrustedCertificates ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setImplementTrustedCertificates (const ImplementTrustedCertificatesType& x);

          //@}

          /**
           * @name CertifiedTime
           *
           * @brief Accessor and modifier functions for the %CertifiedTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CertifiedTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CertifiedTimeType, char > CertifiedTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CertifiedTimeType&
          getCertifiedTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CertifiedTimeType&
          getCertifiedTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCertifiedTime (const CertifiedTimeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCertifiedTime (::std::auto_ptr< CertifiedTimeType > p);

          //@}

          /**
           * @name ValidateCertifiedTime
           *
           * @brief Accessor and modifier functions for the %ValidateCertifiedTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::TimeConfiguration ValidateCertifiedTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValidateCertifiedTimeType, char > ValidateCertifiedTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ValidateCertifiedTimeType&
          getValidateCertifiedTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ValidateCertifiedTimeType&
          getValidateCertifiedTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setValidateCertifiedTime (const ValidateCertifiedTimeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setValidateCertifiedTime (::std::auto_ptr< ValidateCertifiedTimeType > p);

          //@}

          /**
           * @name VerifyExternElements
           *
           * @brief Accessor and modifier functions for the %VerifyExternElements
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean VerifyExternElementsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VerifyExternElementsType, char > VerifyExternElementsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VerifyExternElementsType&
          getVerifyExternElements () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VerifyExternElementsType&
          getVerifyExternElements ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVerifyExternElements (const VerifyExternElementsType& x);

          //@}

          /**
           * @name UseAsimetricKeyForTransmissionPackages
           *
           * @brief Accessor and modifier functions for the %UseAsimetricKeyForTransmissionPackages
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean UseAsimetricKeyForTransmissionPackagesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UseAsimetricKeyForTransmissionPackagesType, char > UseAsimetricKeyForTransmissionPackagesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UseAsimetricKeyForTransmissionPackagesType&
          getUseAsimetricKeyForTransmissionPackages () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UseAsimetricKeyForTransmissionPackagesType&
          getUseAsimetricKeyForTransmissionPackages ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setUseAsimetricKeyForTransmissionPackages (const UseAsimetricKeyForTransmissionPackagesType& x);

          //@}

          /**
           * @name InstallationFiles
           *
           * @brief Accessor and modifier functions for the %InstallationFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration InstallationFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InstallationFilesType, char > InstallationFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InstallationFilesType&
          getInstallationFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InstallationFilesType&
          getInstallationFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setInstallationFiles (const InstallationFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setInstallationFiles (::std::auto_ptr< InstallationFilesType > p);

          //@}

          /**
           * @name ExternalFiles
           *
           * @brief Accessor and modifier functions for the %ExternalFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration ExternalFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExternalFilesType, char > ExternalFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExternalFilesType&
          getExternalFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExternalFilesType&
          getExternalFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setExternalFiles (const ExternalFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setExternalFiles (::std::auto_ptr< ExternalFilesType > p);

          //@}

          /**
           * @name InternalFiles
           *
           * @brief Accessor and modifier functions for the %InternalFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration InternalFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InternalFilesType, char > InternalFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InternalFilesType&
          getInternalFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InternalFilesType&
          getInternalFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setInternalFiles (const InternalFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setInternalFiles (::std::auto_ptr< InternalFilesType > p);

          //@}

          /**
           * @name ResourcesFiles
           *
           * @brief Accessor and modifier functions for the %ResourcesFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration ResourcesFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResourcesFilesType, char > ResourcesFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ResourcesFilesType&
          getResourcesFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ResourcesFilesType&
          getResourcesFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setResourcesFiles (const ResourcesFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setResourcesFiles (::std::auto_ptr< ResourcesFilesType > p);

          //@}

          /**
           * @name ExchangeFiles
           *
           * @brief Accessor and modifier functions for the %ExchangeFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration ExchangeFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExchangeFilesType, char > ExchangeFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExchangeFilesType&
          getExchangeFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExchangeFilesType&
          getExchangeFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setExchangeFiles (const ExchangeFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setExchangeFiles (::std::auto_ptr< ExchangeFilesType > p);

          //@}

          /**
           * @name UtilFiles
           *
           * @brief Accessor and modifier functions for the %UtilFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration UtilFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UtilFilesType, char > UtilFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UtilFilesType&
          getUtilFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UtilFilesType&
          getUtilFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setUtilFiles (const UtilFilesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setUtilFiles (::std::auto_ptr< UtilFilesType > p);

          //@}

          /**
           * @name PrintedVoteData
           *
           * @brief Accessor and modifier functions for the %PrintedVoteData
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SecurityFileConfiguration PrintedVoteDataType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PrintedVoteDataType, char > PrintedVoteDataTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PrintedVoteDataType&
          getPrintedVoteData () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PrintedVoteDataType&
          getPrintedVoteData ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPrintedVoteData (const PrintedVoteDataType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPrintedVoteData (::std::auto_ptr< PrintedVoteDataType > p);

          //@}

          /**
           * @name FileSystemVote
           *
           * @brief Accessor and modifier functions for the %FileSystemVote
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::FileSystemVoteConfiguration FileSystemVoteType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FileSystemVoteType, char > FileSystemVoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FileSystemVoteType&
          getFileSystemVote () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FileSystemVoteType&
          getFileSystemVote ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setFileSystemVote (const FileSystemVoteType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFileSystemVote (::std::auto_ptr< FileSystemVoteType > p);

          //@}

          /**
           * @name SaltSource
           *
           * @brief Accessor and modifier functions for the %SaltSource
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SaltSourceType SaltSourceType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SaltSourceType, char > SaltSourceTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SaltSourceType&
          getSaltSource () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SaltSourceType&
          getSaltSource ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSaltSource (const SaltSourceType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSaltSource (::std::auto_ptr< SaltSourceType > p);

          //@}

          /**
           * @name DigestAlg
           *
           * @brief Accessor and modifier functions for the %DigestAlg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::DigestAlgType DigestAlgType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DigestAlgType, char > DigestAlgTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DigestAlgType&
          getDigestAlg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DigestAlgType&
          getDigestAlg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDigestAlg (const DigestAlgType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDigestAlg (::std::auto_ptr< DigestAlgType > p);

          //@}

          /**
           * @name KeyDerivAlg
           *
           * @brief Accessor and modifier functions for the %KeyDerivAlg
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::KeyDerivAlgType KeyDerivAlgType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< KeyDerivAlgType, char > KeyDerivAlgTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const KeyDerivAlgType&
          getKeyDerivAlg () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          KeyDerivAlgType&
          getKeyDerivAlg ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setKeyDerivAlg (const KeyDerivAlgType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setKeyDerivAlg (::std::auto_ptr< KeyDerivAlgType > p);

          //@}

          /**
           * @name Iterations
           *
           * @brief Accessor and modifier functions for the %Iterations
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer IterationsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IterationsType, char > IterationsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IterationsType&
          getIterations () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IterationsType&
          getIterations ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIterations (const IterationsType& x);

          //@}

          /**
           * @name SignedPVForm
           *
           * @brief Accessor and modifier functions for the %SignedPVForm
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SignedPVFormType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SignedPVFormType, char > SignedPVFormTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SignedPVFormType&
          getSignedPVForm () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SignedPVFormType&
          getSignedPVForm ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSignedPVForm (const SignedPVFormType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SecurityConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SecurityConfiguration (const SecretKeyEncryptedType&,
                                 const ForceReduceElectionType&,
                                 const VerifySAESFolderType&,
                                 const IsCompressElectionType&,
                                 const IsCompressVotingDevicesType&,
                                 const ImplementCACertificateFileNameType&,
                                 const ImplementItermediateCACertificatesType&,
                                 const ImplementTrustedCertificatesType&,
                                 const CertifiedTimeType&,
                                 const ValidateCertifiedTimeType&,
                                 const VerifyExternElementsType&,
                                 const UseAsimetricKeyForTransmissionPackagesType&,
                                 const InstallationFilesType&,
                                 const ExternalFilesType&,
                                 const InternalFilesType&,
                                 const ResourcesFilesType&,
                                 const ExchangeFilesType&,
                                 const UtilFilesType&,
                                 const PrintedVoteDataType&,
                                 const FileSystemVoteType&,
                                 const SaltSourceType&,
                                 const DigestAlgType&,
                                 const KeyDerivAlgType&,
                                 const IterationsType&,
                                 const SignedPVFormType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SecurityConfiguration (const SecretKeyEncryptedType&,
                                 const ForceReduceElectionType&,
                                 const VerifySAESFolderType&,
                                 const IsCompressElectionType&,
                                 const IsCompressVotingDevicesType&,
                                 const ImplementCACertificateFileNameType&,
                                 const ImplementItermediateCACertificatesType&,
                                 const ImplementTrustedCertificatesType&,
                                 const CertifiedTimeType&,
                                 const ValidateCertifiedTimeType&,
                                 const VerifyExternElementsType&,
                                 const UseAsimetricKeyForTransmissionPackagesType&,
                                 ::std::auto_ptr< InstallationFilesType >&,
                                 ::std::auto_ptr< ExternalFilesType >&,
                                 ::std::auto_ptr< InternalFilesType >&,
                                 ::std::auto_ptr< ResourcesFilesType >&,
                                 ::std::auto_ptr< ExchangeFilesType >&,
                                 ::std::auto_ptr< UtilFilesType >&,
                                 ::std::auto_ptr< PrintedVoteDataType >&,
                                 ::std::auto_ptr< FileSystemVoteType >&,
                                 ::std::auto_ptr< SaltSourceType >&,
                                 const DigestAlgType&,
                                 const KeyDerivAlgType&,
                                 const IterationsType&,
                                 const SignedPVFormType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityConfiguration (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityConfiguration (const SecurityConfiguration& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SecurityConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          SecurityCryptoModeOptional SecurityCryptoMode_;
          ::xsd::cxx::tree::one< SecretKeyEncryptedType > SecretKeyEncrypted_;
          ::xsd::cxx::tree::one< ForceReduceElectionType > ForceReduceElection_;
          ::xsd::cxx::tree::one< VerifySAESFolderType > VerifySAESFolder_;
          ::xsd::cxx::tree::one< IsCompressElectionType > IsCompressElection_;
          ::xsd::cxx::tree::one< IsCompressVotingDevicesType > IsCompressVotingDevices_;
          ::xsd::cxx::tree::one< ImplementCACertificateFileNameType > ImplementCACertificateFileName_;
          ::xsd::cxx::tree::one< ImplementItermediateCACertificatesType > ImplementItermediateCACertificates_;
          ::xsd::cxx::tree::one< ImplementTrustedCertificatesType > ImplementTrustedCertificates_;
          ::xsd::cxx::tree::one< CertifiedTimeType > CertifiedTime_;
          ::xsd::cxx::tree::one< ValidateCertifiedTimeType > ValidateCertifiedTime_;
          ::xsd::cxx::tree::one< VerifyExternElementsType > VerifyExternElements_;
          ::xsd::cxx::tree::one< UseAsimetricKeyForTransmissionPackagesType > UseAsimetricKeyForTransmissionPackages_;
          ::xsd::cxx::tree::one< InstallationFilesType > InstallationFiles_;
          ::xsd::cxx::tree::one< ExternalFilesType > ExternalFiles_;
          ::xsd::cxx::tree::one< InternalFilesType > InternalFiles_;
          ::xsd::cxx::tree::one< ResourcesFilesType > ResourcesFiles_;
          ::xsd::cxx::tree::one< ExchangeFilesType > ExchangeFiles_;
          ::xsd::cxx::tree::one< UtilFilesType > UtilFiles_;
          ::xsd::cxx::tree::one< PrintedVoteDataType > PrintedVoteData_;
          ::xsd::cxx::tree::one< FileSystemVoteType > FileSystemVote_;
          ::xsd::cxx::tree::one< SaltSourceType > SaltSource_;
          ::xsd::cxx::tree::one< DigestAlgType > DigestAlg_;
          ::xsd::cxx::tree::one< KeyDerivAlgType > KeyDerivAlg_;
          ::xsd::cxx::tree::one< IterationsType > Iterations_;
          ::xsd::cxx::tree::one< SignedPVFormType > SignedPVForm_;

          //@endcond
        };

        bool
        operator== (const SecurityConfiguration&, const SecurityConfiguration&);

        bool
        operator!= (const SecurityConfiguration&, const SecurityConfiguration&);


        /**
         * @brief Class corresponding to the %SecurityFileConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SecurityFileConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name EncryptedData
           *
           * @brief Accessor and modifier functions for the %EncryptedData
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean EncryptedDataType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EncryptedDataType, char > EncryptedDataTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EncryptedDataType&
          getEncryptedData () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EncryptedDataType&
          getEncryptedData ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setEncryptedData (const EncryptedDataType& x);

          //@}

          /**
           * @name SignedData
           *
           * @brief Accessor and modifier functions for the %SignedData
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::SignedType SignedDataType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SignedDataType, char > SignedDataTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SignedDataType&
          getSignedData () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SignedDataType&
          getSignedData ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSignedData (const SignedDataType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSignedData (::std::auto_ptr< SignedDataType > p);

          //@}

          /**
           * @name ValidateSigned
           *
           * @brief Accessor and modifier functions for the %ValidateSigned
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ValidateSignedType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValidateSignedType, char > ValidateSignedTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ValidateSignedType&
          getValidateSigned () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ValidateSignedType&
          getValidateSigned ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setValidateSigned (const ValidateSignedType& x);

          //@}

          /**
           * @name CertifiedFilePath
           *
           * @brief Accessor and modifier functions for the %CertifiedFilePath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CertifiedFilePathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CertifiedFilePathType, char > CertifiedFilePathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CertifiedFilePathType&
          getCertifiedFilePath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CertifiedFilePathType&
          getCertifiedFilePath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCertifiedFilePath (const CertifiedFilePathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCertifiedFilePath (::std::auto_ptr< CertifiedFilePathType > p);

          //@}

          /**
           * @name CertifiedType
           *
           * @brief Accessor and modifier functions for the %CertifiedType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::CertifiedType CertifiedTypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CertifiedTypeType, char > CertifiedTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CertifiedTypeType&
          getCertifiedType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CertifiedTypeType&
          getCertifiedType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCertifiedType (const CertifiedTypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCertifiedType (::std::auto_ptr< CertifiedTypeType > p);

          //@}

          /**
           * @name ValidateCertified
           *
           * @brief Accessor and modifier functions for the %ValidateCertified
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ValidateCertifiedType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValidateCertifiedType, char > ValidateCertifiedTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ValidateCertifiedType&
          getValidateCertified () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ValidateCertifiedType&
          getValidateCertified ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setValidateCertified (const ValidateCertifiedType& x);

          //@}

          /**
           * @name ValidateCertifiedConfig
           *
           * @brief Accessor and modifier functions for the %ValidateCertifiedConfig
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::ValidateCertifiedConfiguration ValidateCertifiedConfigType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ValidateCertifiedConfigType > ValidateCertifiedConfigSequence;

          /**
           * @brief Element iterator type.
           */
          typedef ValidateCertifiedConfigSequence::iterator ValidateCertifiedConfigIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ValidateCertifiedConfigSequence::const_iterator ValidateCertifiedConfigConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValidateCertifiedConfigType, char > ValidateCertifiedConfigTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ValidateCertifiedConfigSequence&
          getValidateCertifiedConfig () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ValidateCertifiedConfigSequence&
          getValidateCertifiedConfig ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setValidateCertifiedConfig (const ValidateCertifiedConfigSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SecurityFileConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SecurityFileConfiguration (const EncryptedDataType&,
                                     const SignedDataType&,
                                     const ValidateSignedType&,
                                     const CertifiedFilePathType&,
                                     const CertifiedTypeType&,
                                     const ValidateCertifiedType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityFileConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityFileConfiguration (const SecurityFileConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityFileConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SecurityFileConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< EncryptedDataType > EncryptedData_;
          ::xsd::cxx::tree::one< SignedDataType > SignedData_;
          ::xsd::cxx::tree::one< ValidateSignedType > ValidateSigned_;
          ::xsd::cxx::tree::one< CertifiedFilePathType > CertifiedFilePath_;
          ::xsd::cxx::tree::one< CertifiedTypeType > CertifiedType_;
          ::xsd::cxx::tree::one< ValidateCertifiedType > ValidateCertified_;
          ValidateCertifiedConfigSequence ValidateCertifiedConfig_;

          //@endcond
        };

        bool
        operator== (const SecurityFileConfiguration&, const SecurityFileConfiguration&);

        bool
        operator!= (const SecurityFileConfiguration&, const SecurityFileConfiguration&);


        /**
         * @brief Class corresponding to the %FileSystemVoteConfiguration schema type.
         *
         * @nosubgrouping
         */
        class FileSystemVoteConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name maxfiles
           *
           * @brief Accessor and modifier functions for the %maxfiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MaxfilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MaxfilesType, char > MaxfilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MaxfilesType&
          getMaxfiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MaxfilesType&
          getMaxfiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMaxfiles (const MaxfilesType& x);

          //@}

          /**
           * @name ImplementTime
           *
           * @brief Accessor and modifier functions for the %ImplementTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::TimeConfiguration ImplementTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ImplementTimeType, char > ImplementTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ImplementTimeType&
          getImplementTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ImplementTimeType&
          getImplementTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setImplementTime (const ImplementTimeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setImplementTime (::std::auto_ptr< ImplementTimeType > p);

          //@}

          /**
           * @name FileSystemVoteTime
           *
           * @brief Accessor and modifier functions for the %FileSystemVoteTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String FileSystemVoteTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FileSystemVoteTimeType, char > FileSystemVoteTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FileSystemVoteTimeType&
          getFileSystemVoteTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FileSystemVoteTimeType&
          getFileSystemVoteTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setFileSystemVoteTime (const FileSystemVoteTimeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFileSystemVoteTime (::std::auto_ptr< FileSystemVoteTimeType > p);

          //@}

          /**
           * @name ImplementRandom
           *
           * @brief Accessor and modifier functions for the %ImplementRandom
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ImplementRandomType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ImplementRandomType, char > ImplementRandomTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ImplementRandomType&
          getImplementRandom () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ImplementRandomType&
          getImplementRandom ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setImplementRandom (const ImplementRandomType& x);

          //@}

          /**
           * @name BackupMarkFile
           *
           * @brief Accessor and modifier functions for the %BackupMarkFile
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String BackupMarkFileType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BackupMarkFileType, char > BackupMarkFileTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BackupMarkFileType&
          getBackupMarkFile () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BackupMarkFileType&
          getBackupMarkFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBackupMarkFile (const BackupMarkFileType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBackupMarkFile (::std::auto_ptr< BackupMarkFileType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          FileSystemVoteConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FileSystemVoteConfiguration (const MaxfilesType&,
                                       const ImplementTimeType&,
                                       const FileSystemVoteTimeType&,
                                       const ImplementRandomType&,
                                       const BackupMarkFileType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FileSystemVoteConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          FileSystemVoteConfiguration (const FileSystemVoteConfiguration& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FileSystemVoteConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~FileSystemVoteConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< MaxfilesType > maxfiles_;
          ::xsd::cxx::tree::one< ImplementTimeType > ImplementTime_;
          ::xsd::cxx::tree::one< FileSystemVoteTimeType > FileSystemVoteTime_;
          ::xsd::cxx::tree::one< ImplementRandomType > ImplementRandom_;
          ::xsd::cxx::tree::one< BackupMarkFileType > BackupMarkFile_;

          //@endcond
        };

        bool
        operator== (const FileSystemVoteConfiguration&, const FileSystemVoteConfiguration&);

        bool
        operator!= (const FileSystemVoteConfiguration&, const FileSystemVoteConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %SignedType
         * schema type.
         */
        class SignedType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_SIMPLE,
            CONFIGURATION_FULL,
            CONFIGURATION_NONE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SignedType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SignedType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SignedType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SignedType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SignedType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SignedType (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SignedType (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SignedType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SignedType (const SignedType& x,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SignedType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SignedType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SignedType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SignedType_convert () const;

          public:
          static const char* const _xsd_SignedType_literals_[3];
          static const Value _xsd_SignedType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %ValidateCertifiedConfiguration
         * schema type.
         */
        class ValidateCertifiedConfiguration: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_NO_FLAGS,
            CONFIGURATION_DO_NOT_VALIDATE,
            CONFIGURATION_IGNORE_CRITICAL,
            CONFIGURATION_CB_ISSUER_CHECK,
            CONFIGURATION_CRL_CHECK,
            CONFIGURATION_CRL_CHECK_ALL,
            CONFIGURATION_POLICY_CHECK,
            CONFIGURATION_EXPLICIT_POLICY,
            CONFIGURATION_INHIBIT_ANY,
            CONFIGURATION_INHIBIT_MAP,
            CONFIGURATION_X509_STRICT,
            CONFIGURATION_EXTENDED_CRL_SUPPORT,
            CONFIGURATION_USE_DELTAS,
            CONFIGURATION_NOTIFY_POLICY,
            CONFIGURATION_CHECK_SS_SIGNATURE,
            CONFIGURATION_SET_CHECK_TIME,
            CONFIGURATION_ALLOW_PROXY_CERTS
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          ValidateCertifiedConfiguration ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          ValidateCertifiedConfiguration (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          ValidateCertifiedConfiguration (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          ValidateCertifiedConfiguration (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          ValidateCertifiedConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ValidateCertifiedConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ValidateCertifiedConfiguration (const ::xercesc::DOMAttr& a,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ValidateCertifiedConfiguration (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ValidateCertifiedConfiguration (const ValidateCertifiedConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ValidateCertifiedConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          ValidateCertifiedConfiguration&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_ValidateCertifiedConfiguration_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_ValidateCertifiedConfiguration_convert () const;

          public:
          static const char* const _xsd_ValidateCertifiedConfiguration_literals_[17];
          static const Value _xsd_ValidateCertifiedConfiguration_indexes_[17];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %TimeConfiguration
         * schema type.
         */
        class TimeConfiguration: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_MACHINE_TIME,
            CONFIGURATION_CONFIG_TIME,
            CONFIGURATION_NONE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          TimeConfiguration ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          TimeConfiguration (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          TimeConfiguration (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          TimeConfiguration (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          TimeConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeConfiguration (const ::xercesc::DOMAttr& a,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeConfiguration (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          TimeConfiguration (const TimeConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TimeConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          TimeConfiguration&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_TimeConfiguration_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_TimeConfiguration_convert () const;

          public:
          static const char* const _xsd_TimeConfiguration_literals_[3];
          static const Value _xsd_TimeConfiguration_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %CertifiedType
         * schema type.
         */
        class CertifiedType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_PCKS12,
            CONFIGURATION_X509,
            CONFIGURATION_NONE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CertifiedType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CertifiedType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CertifiedType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CertifiedType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CertifiedType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CertifiedType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CertifiedType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CertifiedType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CertifiedType (const CertifiedType& x,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CertifiedType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CertifiedType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CertifiedType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CertifiedType_convert () const;

          public:
          static const char* const _xsd_CertifiedType_literals_[3];
          static const Value _xsd_CertifiedType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %CryptoType
         * schema type.
         */
        class CryptoType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_GLOBAL,
            CONFIGURATION_BASE64,
            CONFIGURATION_PLAIN
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CryptoType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CryptoType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CryptoType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CryptoType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CryptoType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CryptoType (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CryptoType (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CryptoType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CryptoType (const CryptoType& x,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CryptoType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CryptoType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CryptoType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CryptoType_convert () const;

          public:
          static const char* const _xsd_CryptoType_literals_[3];
          static const Value _xsd_CryptoType_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %SecurityCryptoMode
         * schema type.
         */
        class SecurityCryptoMode: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_ECB,
            CONFIGURATION_CBC
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SecurityCryptoMode ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SecurityCryptoMode (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SecurityCryptoMode (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SecurityCryptoMode (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SecurityCryptoMode (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityCryptoMode (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityCryptoMode (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityCryptoMode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityCryptoMode (const SecurityCryptoMode& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityCryptoMode*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SecurityCryptoMode&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SecurityCryptoMode_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SecurityCryptoMode_convert () const;

          public:
          static const char* const _xsd_SecurityCryptoMode_literals_[2];
          static const Value _xsd_SecurityCryptoMode_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %PlatformMode
         * schema type.
         */
        class PlatformMode: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_OP_201,
            CONFIGURATION_GP_211
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          PlatformMode ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          PlatformMode (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          PlatformMode (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          PlatformMode (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          PlatformMode (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PlatformMode (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PlatformMode (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PlatformMode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PlatformMode (const PlatformMode& x,
                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PlatformMode*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          PlatformMode&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_PlatformMode_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_PlatformMode_convert () const;

          public:
          static const char* const _xsd_PlatformMode_literals_[2];
          static const Value _xsd_PlatformMode_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %GlobalPIN
         * schema type.
         */
        class GlobalPIN: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_FIXED,
            CONFIGURATION_DERIVED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          GlobalPIN ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          GlobalPIN (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          GlobalPIN (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          GlobalPIN (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          GlobalPIN (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GlobalPIN (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GlobalPIN (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          GlobalPIN (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          GlobalPIN (const GlobalPIN& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual GlobalPIN*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          GlobalPIN&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_GlobalPIN_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_GlobalPIN_convert () const;

          public:
          static const char* const _xsd_GlobalPIN_literals_[2];
          static const Value _xsd_GlobalPIN_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %DataPIN
         * schema type.
         */
        class DataPIN: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_OPENING_CODE,
            CONFIGURATION_VERIFICATION_KEY
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          DataPIN ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          DataPIN (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          DataPIN (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          DataPIN (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          DataPIN (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DataPIN (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DataPIN (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          DataPIN (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          DataPIN (const DataPIN& x,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual DataPIN*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          DataPIN&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_DataPIN_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_DataPIN_convert () const;

          public:
          static const char* const _xsd_DataPIN_literals_[2];
          static const Value _xsd_DataPIN_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %SecurityChannelProtocol
         * schema type.
         */
        class SecurityChannelProtocol: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_SCP01,
            CONFIGURATION_SCP02
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SecurityChannelProtocol ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SecurityChannelProtocol (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SecurityChannelProtocol (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SecurityChannelProtocol (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SecurityChannelProtocol (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityChannelProtocol (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityChannelProtocol (const ::xercesc::DOMAttr& a,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityChannelProtocol (const ::std::string& s,
                                   const ::xercesc::DOMElement* e,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityChannelProtocol (const SecurityChannelProtocol& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityChannelProtocol*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SecurityChannelProtocol&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SecurityChannelProtocol_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SecurityChannelProtocol_convert () const;

          public:
          static const char* const _xsd_SecurityChannelProtocol_literals_[2];
          static const Value _xsd_SecurityChannelProtocol_indexes_[2];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %SecurityChannelProtocolImpl
         * schema type.
         */
        class SecurityChannelProtocolImpl: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_SCP01_IMPL_I05,
            CONFIGURATION_SCP01_IMPL_I15,
            CONFIGURATION_SCP02_IMPL_I44,
            CONFIGURATION_SCP02_IMPL_I45,
            CONFIGURATION_SCP02_IMPL_I54,
            CONFIGURATION_SCP02_IMPL_I55,
            CONFIGURATION_SCP02_IMPL_I04,
            CONFIGURATION_SCP02_IMPL_I05,
            CONFIGURATION_SCP02_IMPL_I0A,
            CONFIGURATION_SCP02_IMPL_I0B,
            CONFIGURATION_SCP02_IMPL_I14,
            CONFIGURATION_SCP02_IMPL_I15,
            CONFIGURATION_SCP02_IMPL_I1A,
            CONFIGURATION_SCP02_IMPL_I1B
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SecurityChannelProtocolImpl ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SecurityChannelProtocolImpl (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SecurityChannelProtocolImpl (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SecurityChannelProtocolImpl (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SecurityChannelProtocolImpl (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityChannelProtocolImpl (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityChannelProtocolImpl (const ::xercesc::DOMAttr& a,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityChannelProtocolImpl (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityChannelProtocolImpl (const SecurityChannelProtocolImpl& x,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityChannelProtocolImpl*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SecurityChannelProtocolImpl&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SecurityChannelProtocolImpl_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SecurityChannelProtocolImpl_convert () const;

          public:
          static const char* const _xsd_SecurityChannelProtocolImpl_literals_[14];
          static const Value _xsd_SecurityChannelProtocolImpl_indexes_[14];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %SecurityLevel
         * schema type.
         */
        class SecurityLevel: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_C_MAC,
            CONFIGURATION_C_DEC_C_MAC,
            CONFIGURATION_R_MAC,
            CONFIGURATION_C_MAC_R_MAC,
            CONFIGURATION_C_DEC_C_MAC_R_MAC
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SecurityLevel ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SecurityLevel (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SecurityLevel (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SecurityLevel (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SecurityLevel (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityLevel (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityLevel (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityLevel (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityLevel (const SecurityLevel& x,
                         ::Smartmatic::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityLevel*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SecurityLevel&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SecurityLevel_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SecurityLevel_convert () const;

          public:
          static const char* const _xsd_SecurityLevel_literals_[5];
          static const Value _xsd_SecurityLevel_indexes_[5];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %SecurityKeyDerivation
         * schema type.
         */
        class SecurityKeyDerivation: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_NONE,
            CONFIGURATION_VISA2,
            CONFIGURATION_EMVCPS11
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          SecurityKeyDerivation ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          SecurityKeyDerivation (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          SecurityKeyDerivation (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          SecurityKeyDerivation (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          SecurityKeyDerivation (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityKeyDerivation (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityKeyDerivation (const ::xercesc::DOMAttr& a,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SecurityKeyDerivation (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SecurityKeyDerivation (const SecurityKeyDerivation& x,
                                 ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SecurityKeyDerivation*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          SecurityKeyDerivation&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_SecurityKeyDerivation_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_SecurityKeyDerivation_convert () const;

          public:
          static const char* const _xsd_SecurityKeyDerivation_literals_[3];
          static const Value _xsd_SecurityKeyDerivation_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %NivelTestConfig
         * schema type.
         */
        class NivelTestConfig: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_SIMPLE_SELECT_APPLET,
            CONFIGURATION_SIMPLE_WRITE_READ
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          NivelTestConfig ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          NivelTestConfig (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          NivelTestConfig (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          NivelTestConfig (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          NivelTestConfig (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NivelTestConfig (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NivelTestConfig (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          NivelTestConfig (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          NivelTestConfig (const NivelTestConfig& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual NivelTestConfig*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          NivelTestConfig&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_NivelTestConfig_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_NivelTestConfig_convert () const;

          public:
          static const char* const _xsd_NivelTestConfig_literals_[2];
          static const Value _xsd_NivelTestConfig_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %SmartCardErrorCode schema type.
         *
         * @nosubgrouping
         */
        class SmartCardErrorCode: public ::xsd::cxx::tree::fundamental_base< ::Smartmatic::ConfigurationTypes::NonNegativeInteger, char, ::Smartmatic::ConfigurationTypes::SimpleType >
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SmartCardErrorCode ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SmartCardErrorCode (const ::Smartmatic::ConfigurationTypes::NonNegativeInteger&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SmartCardErrorCode (const ::xercesc::DOMElement& e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SmartCardErrorCode (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SmartCardErrorCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SmartCardErrorCode (const SmartCardErrorCode& x,
                              ::Smartmatic::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SmartCardErrorCode*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SmartCardErrorCode ();
        };

        /**
         * @brief Class corresponding to the %ConfigurationElectionFilesPath schema type.
         *
         * @nosubgrouping
         */
        class ConfigurationElectionFilesPath: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name CodiFilesFolder
           *
           * @brief Accessor and modifier functions for the %CodiFilesFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CodiFilesFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodiFilesFolderType, char > CodiFilesFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CodiFilesFolderType&
          getCodiFilesFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CodiFilesFolderType&
          getCodiFilesFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCodiFilesFolder (const CodiFilesFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCodiFilesFolder (::std::auto_ptr< CodiFilesFolderType > p);

          //@}

          /**
           * @name SAESFolder
           *
           * @brief Accessor and modifier functions for the %SAESFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SAESFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SAESFolderType, char > SAESFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SAESFolderType&
          getSAESFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SAESFolderType&
          getSAESFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSAESFolder (const SAESFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSAESFolder (::std::auto_ptr< SAESFolderType > p);

          //@}

          /**
           * @name ResourcesFolder
           *
           * @brief Accessor and modifier functions for the %ResourcesFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ResourcesFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ResourcesFolderType, char > ResourcesFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ResourcesFolderType&
          getResourcesFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ResourcesFolderType&
          getResourcesFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setResourcesFolder (const ResourcesFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setResourcesFolder (::std::auto_ptr< ResourcesFolderType > p);

          //@}

          /**
           * @name ImagesFolder
           *
           * @brief Accessor and modifier functions for the %ImagesFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ImagesFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ImagesFolderType, char > ImagesFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ImagesFolderType&
          getImagesFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ImagesFolderType&
          getImagesFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setImagesFolder (const ImagesFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setImagesFolder (::std::auto_ptr< ImagesFolderType > p);

          //@}

          /**
           * @name VotesFolder
           *
           * @brief Accessor and modifier functions for the %VotesFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VotesFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotesFolderType, char > VotesFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotesFolderType&
          getVotesFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotesFolderType&
          getVotesFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotesFolder (const VotesFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotesFolder (::std::auto_ptr< VotesFolderType > p);

          //@}

          /**
           * @name DocsFolder
           *
           * @brief Accessor and modifier functions for the %DocsFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String DocsFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DocsFolderType, char > DocsFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DocsFolderType&
          getDocsFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DocsFolderType&
          getDocsFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDocsFolder (const DocsFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDocsFolder (::std::auto_ptr< DocsFolderType > p);

          //@}

          /**
           * @name CodiFolder
           *
           * @brief Accessor and modifier functions for the %CodiFolder
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CodiFolderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodiFolderType, char > CodiFolderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CodiFolderType&
          getCodiFolder () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CodiFolderType&
          getCodiFolder ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCodiFolder (const CodiFolderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCodiFolder (::std::auto_ptr< CodiFolderType > p);

          //@}

          /**
           * @name LogsFolderName
           *
           * @brief Accessor and modifier functions for the %LogsFolderName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LogsFolderNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LogsFolderNameType, char > LogsFolderNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LogsFolderNameType&
          getLogsFolderName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LogsFolderNameType&
          getLogsFolderName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogsFolderName (const LogsFolderNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogsFolderName (::std::auto_ptr< LogsFolderNameType > p);

          //@}

          /**
           * @name TransmissionPackageFileName
           *
           * @brief Accessor and modifier functions for the %TransmissionPackageFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TransmissionPackageFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransmissionPackageFileNameType, char > TransmissionPackageFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TransmissionPackageFileNameType&
          getTransmissionPackageFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TransmissionPackageFileNameType&
          getTransmissionPackageFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTransmissionPackageFileName (const TransmissionPackageFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmissionPackageFileName (::std::auto_ptr< TransmissionPackageFileNameType > p);

          //@}

          /**
           * @name TransmissionPackageHashFileName
           *
           * @brief Accessor and modifier functions for the %TransmissionPackageHashFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TransmissionPackageHashFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransmissionPackageHashFileNameType, char > TransmissionPackageHashFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TransmissionPackageHashFileNameType&
          getTransmissionPackageHashFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TransmissionPackageHashFileNameType&
          getTransmissionPackageHashFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTransmissionPackageHashFileName (const TransmissionPackageHashFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmissionPackageHashFileName (::std::auto_ptr< TransmissionPackageHashFileNameType > p);

          //@}

          /**
           * @name TransmissionPackageKeyFileName
           *
           * @brief Accessor and modifier functions for the %TransmissionPackageKeyFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TransmissionPackageKeyFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransmissionPackageKeyFileNameType, char > TransmissionPackageKeyFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TransmissionPackageKeyFileNameType&
          getTransmissionPackageKeyFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TransmissionPackageKeyFileNameType&
          getTransmissionPackageKeyFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTransmissionPackageKeyFileName (const TransmissionPackageKeyFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmissionPackageKeyFileName (::std::auto_ptr< TransmissionPackageKeyFileNameType > p);

          //@}

          /**
           * @name TransmissionPackageCrtFileName
           *
           * @brief Accessor and modifier functions for the %TransmissionPackageCrtFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TransmissionPackageCrtFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransmissionPackageCrtFileNameType, char > TransmissionPackageCrtFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TransmissionPackageCrtFileNameType&
          getTransmissionPackageCrtFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TransmissionPackageCrtFileNameType&
          getTransmissionPackageCrtFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTransmissionPackageCrtFileName (const TransmissionPackageCrtFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmissionPackageCrtFileName (::std::auto_ptr< TransmissionPackageCrtFileNameType > p);

          //@}

          /**
           * @name PVFormFileName
           *
           * @brief Accessor and modifier functions for the %PVFormFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PVFormFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PVFormFileNameType, char > PVFormFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PVFormFileNameType&
          getPVFormFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PVFormFileNameType&
          getPVFormFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPVFormFileName (const PVFormFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPVFormFileName (::std::auto_ptr< PVFormFileNameType > p);

          //@}

          /**
           * @name ElectionFileName
           *
           * @brief Accessor and modifier functions for the %ElectionFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ElectionFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectionFileNameType, char > ElectionFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectionFileNameType&
          getElectionFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectionFileNameType&
          getElectionFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setElectionFileName (const ElectionFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElectionFileName (::std::auto_ptr< ElectionFileNameType > p);

          //@}

          /**
           * @name ElectionStatusFileName
           *
           * @brief Accessor and modifier functions for the %ElectionStatusFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ElectionStatusFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectionStatusFileNameType, char > ElectionStatusFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectionStatusFileNameType&
          getElectionStatusFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectionStatusFileNameType&
          getElectionStatusFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setElectionStatusFileName (const ElectionStatusFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElectionStatusFileName (::std::auto_ptr< ElectionStatusFileNameType > p);

          //@}

          /**
           * @name CardListStatusFileName
           *
           * @brief Accessor and modifier functions for the %CardListStatusFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CardListStatusFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CardListStatusFileNameType, char > CardListStatusFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CardListStatusFileNameType&
          getCardListStatusFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CardListStatusFileNameType&
          getCardListStatusFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCardListStatusFileName (const CardListStatusFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCardListStatusFileName (::std::auto_ptr< CardListStatusFileNameType > p);

          //@}

          /**
           * @name ElectionResourcesFileName
           *
           * @brief Accessor and modifier functions for the %ElectionResourcesFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ElectionResourcesFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectionResourcesFileNameType, char > ElectionResourcesFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectionResourcesFileNameType&
          getElectionResourcesFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectionResourcesFileNameType&
          getElectionResourcesFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setElectionResourcesFileName (const ElectionResourcesFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElectionResourcesFileName (::std::auto_ptr< ElectionResourcesFileNameType > p);

          //@}

          /**
           * @name VotingMachineStatusFileName
           *
           * @brief Accessor and modifier functions for the %VotingMachineStatusFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VotingMachineStatusFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingMachineStatusFileNameType, char > VotingMachineStatusFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotingMachineStatusFileNameType&
          getVotingMachineStatusFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotingMachineStatusFileNameType&
          getVotingMachineStatusFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotingMachineStatusFileName (const VotingMachineStatusFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingMachineStatusFileName (::std::auto_ptr< VotingMachineStatusFileNameType > p);

          //@}

          /**
           * @name VotingDeviceFileName
           *
           * @brief Accessor and modifier functions for the %VotingDeviceFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VotingDeviceFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingDeviceFileNameType, char > VotingDeviceFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotingDeviceFileNameType&
          getVotingDeviceFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotingDeviceFileNameType&
          getVotingDeviceFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotingDeviceFileName (const VotingDeviceFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingDeviceFileName (::std::auto_ptr< VotingDeviceFileNameType > p);

          //@}

          /**
           * @name PollworkersFileName
           *
           * @brief Accessor and modifier functions for the %PollworkersFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PollworkersFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PollworkersFileNameType, char > PollworkersFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PollworkersFileNameType&
          getPollworkersFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PollworkersFileNameType&
          getPollworkersFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPollworkersFileName (const PollworkersFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPollworkersFileName (::std::auto_ptr< PollworkersFileNameType > p);

          //@}

          /**
           * @name StatisticsFileName
           *
           * @brief Accessor and modifier functions for the %StatisticsFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String StatisticsFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StatisticsFileNameType, char > StatisticsFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StatisticsFileNameType&
          getStatisticsFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StatisticsFileNameType&
          getStatisticsFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStatisticsFileName (const StatisticsFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setStatisticsFileName (::std::auto_ptr< StatisticsFileNameType > p);

          //@}

          /**
           * @name ActivatedCardStatisticsFileName
           *
           * @brief Accessor and modifier functions for the %ActivatedCardStatisticsFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ActivatedCardStatisticsFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ActivatedCardStatisticsFileNameType, char > ActivatedCardStatisticsFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ActivatedCardStatisticsFileNameType&
          getActivatedCardStatisticsFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ActivatedCardStatisticsFileNameType&
          getActivatedCardStatisticsFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setActivatedCardStatisticsFileName (const ActivatedCardStatisticsFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setActivatedCardStatisticsFileName (::std::auto_ptr< ActivatedCardStatisticsFileNameType > p);

          //@}

          /**
           * @name IncidentReportFileName
           *
           * @brief Accessor and modifier functions for the %IncidentReportFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String IncidentReportFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IncidentReportFileNameType, char > IncidentReportFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IncidentReportFileNameType&
          getIncidentReportFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IncidentReportFileNameType&
          getIncidentReportFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIncidentReportFileName (const IncidentReportFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setIncidentReportFileName (::std::auto_ptr< IncidentReportFileNameType > p);

          //@}

          /**
           * @name ClosingNotesFileName
           *
           * @brief Accessor and modifier functions for the %ClosingNotesFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ClosingNotesFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ClosingNotesFileNameType, char > ClosingNotesFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ClosingNotesFileNameType&
          getClosingNotesFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ClosingNotesFileNameType&
          getClosingNotesFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setClosingNotesFileName (const ClosingNotesFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setClosingNotesFileName (::std::auto_ptr< ClosingNotesFileNameType > p);

          //@}

          /**
           * @name XMLImageFileName
           *
           * @brief Accessor and modifier functions for the %XMLImageFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String XMLImageFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< XMLImageFileNameType, char > XMLImageFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const XMLImageFileNameType&
          getXMLImageFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          XMLImageFileNameType&
          getXMLImageFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setXMLImageFileName (const XMLImageFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setXMLImageFileName (::std::auto_ptr< XMLImageFileNameType > p);

          //@}

          /**
           * @name AssistedActivationFileName
           *
           * @brief Accessor and modifier functions for the %AssistedActivationFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String AssistedActivationFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AssistedActivationFileNameType, char > AssistedActivationFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AssistedActivationFileNameType&
          getAssistedActivationFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AssistedActivationFileNameType&
          getAssistedActivationFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAssistedActivationFileName (const AssistedActivationFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAssistedActivationFileName (::std::auto_ptr< AssistedActivationFileNameType > p);

          //@}

          /**
           * @name VotingDisabledFileName
           *
           * @brief Accessor and modifier functions for the %VotingDisabledFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VotingDisabledFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingDisabledFileNameType, char > VotingDisabledFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotingDisabledFileNameType&
          getVotingDisabledFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotingDisabledFileNameType&
          getVotingDisabledFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotingDisabledFileName (const VotingDisabledFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingDisabledFileName (::std::auto_ptr< VotingDisabledFileNameType > p);

          //@}

          /**
           * @name PoliceNotesFileName
           *
           * @brief Accessor and modifier functions for the %PoliceNotesFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PoliceNotesFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PoliceNotesFileNameType, char > PoliceNotesFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PoliceNotesFileNameType&
          getPoliceNotesFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PoliceNotesFileNameType&
          getPoliceNotesFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPoliceNotesFileName (const PoliceNotesFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPoliceNotesFileName (::std::auto_ptr< PoliceNotesFileNameType > p);

          //@}

          /**
           * @name LanguageFileName
           *
           * @brief Accessor and modifier functions for the %LanguageFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LanguageFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LanguageFileNameType, char > LanguageFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LanguageFileNameType&
          getLanguageFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LanguageFileNameType&
          getLanguageFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLanguageFileName (const LanguageFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLanguageFileName (::std::auto_ptr< LanguageFileNameType > p);

          //@}

          /**
           * @name VotingCentersFileName
           *
           * @brief Accessor and modifier functions for the %VotingCentersFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VotingCentersFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingCentersFileNameType, char > VotingCentersFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotingCentersFileNameType&
          getVotingCentersFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotingCentersFileNameType&
          getVotingCentersFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotingCentersFileName (const VotingCentersFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingCentersFileName (::std::auto_ptr< VotingCentersFileNameType > p);

          //@}

          /**
           * @name ConfigBasePath
           *
           * @brief Accessor and modifier functions for the %ConfigBasePath
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::ConfigurationBasePath ConfigBasePathType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConfigBasePathType, char > ConfigBasePathTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ConfigBasePathType&
          getConfigBasePath () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ConfigBasePathType&
          getConfigBasePath ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setConfigBasePath (const ConfigBasePathType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setConfigBasePath (::std::auto_ptr< ConfigBasePathType > p);

          //@}

          /**
           * @name SecretKeyFile
           *
           * @brief Accessor and modifier functions for the %SecretKeyFile
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SecretKeyFileType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecretKeyFileType, char > SecretKeyFileTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SecretKeyFileType&
          getSecretKeyFile () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SecretKeyFileType&
          getSecretKeyFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSecretKeyFile (const SecretKeyFileType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSecretKeyFile (::std::auto_ptr< SecretKeyFileType > p);

          //@}

          /**
           * @name UPKeyFile
           *
           * @brief Accessor and modifier functions for the %UPKeyFile
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String UPKeyFileType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UPKeyFileType, char > UPKeyFileTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UPKeyFileType&
          getUPKeyFile () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UPKeyFileType&
          getUPKeyFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setUPKeyFile (const UPKeyFileType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setUPKeyFile (::std::auto_ptr< UPKeyFileType > p);

          //@}

          /**
           * @name MachineKeysFile
           *
           * @brief Accessor and modifier functions for the %MachineKeysFile
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String MachineKeysFileType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MachineKeysFileType, char > MachineKeysFileTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const MachineKeysFileType&
          getMachineKeysFile () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          MachineKeysFileType&
          getMachineKeysFile ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMachineKeysFile (const MachineKeysFileType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setMachineKeysFile (::std::auto_ptr< MachineKeysFileType > p);

          //@}

          /**
           * @name IDCardMembersFileName
           *
           * @brief Accessor and modifier functions for the %IDCardMembersFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String IDCardMembersFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IDCardMembersFileNameType, char > IDCardMembersFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IDCardMembersFileNameType&
          getIDCardMembersFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IDCardMembersFileNameType&
          getIDCardMembersFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIDCardMembersFileName (const IDCardMembersFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setIDCardMembersFileName (::std::auto_ptr< IDCardMembersFileNameType > p);

          //@}

          /**
           * @name TransmissionPackageSignatureFileName
           *
           * @brief Accessor and modifier functions for the %TransmissionPackageSignatureFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TransmissionPackageSignatureFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TransmissionPackageSignatureFileNameType, char > TransmissionPackageSignatureFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TransmissionPackageSignatureFileNameType&
          getTransmissionPackageSignatureFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TransmissionPackageSignatureFileNameType&
          getTransmissionPackageSignatureFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTransmissionPackageSignatureFileName (const TransmissionPackageSignatureFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmissionPackageSignatureFileName (::std::auto_ptr< TransmissionPackageSignatureFileNameType > p);

          //@}

          /**
           * @name PVFormSignatureFileName
           *
           * @brief Accessor and modifier functions for the %PVFormSignatureFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PVFormSignatureFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PVFormSignatureFileNameType, char > PVFormSignatureFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PVFormSignatureFileNameType&
          getPVFormSignatureFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PVFormSignatureFileNameType&
          getPVFormSignatureFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPVFormSignatureFileName (const PVFormSignatureFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPVFormSignatureFileName (::std::auto_ptr< PVFormSignatureFileNameType > p);

          //@}

          /**
           * @name CACertificateFileName
           *
           * @brief Accessor and modifier functions for the %CACertificateFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CACertificateFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CACertificateFileNameType, char > CACertificateFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CACertificateFileNameType&
          getCACertificateFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CACertificateFileNameType&
          getCACertificateFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCACertificateFileName (const CACertificateFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCACertificateFileName (::std::auto_ptr< CACertificateFileNameType > p);

          //@}

          /**
           * @name ItermediateCACertificatesFileName
           *
           * @brief Accessor and modifier functions for the %ItermediateCACertificatesFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ItermediateCACertificatesFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ItermediateCACertificatesFileNameType, char > ItermediateCACertificatesFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ItermediateCACertificatesFileNameType&
          getItermediateCACertificatesFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ItermediateCACertificatesFileNameType&
          getItermediateCACertificatesFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setItermediateCACertificatesFileName (const ItermediateCACertificatesFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setItermediateCACertificatesFileName (::std::auto_ptr< ItermediateCACertificatesFileNameType > p);

          //@}

          /**
           * @name ItermediateCACertificatesFromPKCS12FileName
           *
           * @brief Accessor and modifier functions for the %ItermediateCACertificatesFromPKCS12FileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ItermediateCACertificatesFromPKCS12FileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ItermediateCACertificatesFromPKCS12FileNameType, char > ItermediateCACertificatesFromPKCS12FileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ItermediateCACertificatesFromPKCS12FileNameType&
          getItermediateCACertificatesFromPKCS12FileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ItermediateCACertificatesFromPKCS12FileNameType&
          getItermediateCACertificatesFromPKCS12FileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setItermediateCACertificatesFromPKCS12FileName (const ItermediateCACertificatesFromPKCS12FileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setItermediateCACertificatesFromPKCS12FileName (::std::auto_ptr< ItermediateCACertificatesFromPKCS12FileNameType > p);

          //@}

          /**
           * @name TrustedCertificatesFileName
           *
           * @brief Accessor and modifier functions for the %TrustedCertificatesFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TrustedCertificatesFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TrustedCertificatesFileNameType, char > TrustedCertificatesFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TrustedCertificatesFileNameType&
          getTrustedCertificatesFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TrustedCertificatesFileNameType&
          getTrustedCertificatesFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTrustedCertificatesFileName (const TrustedCertificatesFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTrustedCertificatesFileName (::std::auto_ptr< TrustedCertificatesFileNameType > p);

          //@}

          /**
           * @name TrustedCertificatesFromPKCS12FileName
           *
           * @brief Accessor and modifier functions for the %TrustedCertificatesFromPKCS12FileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String TrustedCertificatesFromPKCS12FileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TrustedCertificatesFromPKCS12FileNameType, char > TrustedCertificatesFromPKCS12FileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TrustedCertificatesFromPKCS12FileNameType&
          getTrustedCertificatesFromPKCS12FileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TrustedCertificatesFromPKCS12FileNameType&
          getTrustedCertificatesFromPKCS12FileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTrustedCertificatesFromPKCS12FileName (const TrustedCertificatesFromPKCS12FileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTrustedCertificatesFromPKCS12FileName (::std::auto_ptr< TrustedCertificatesFromPKCS12FileNameType > p);

          //@}

          /**
           * @name PVTemplateFolderName
           *
           * @brief Accessor and modifier functions for the %PVTemplateFolderName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PVTemplateFolderNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PVTemplateFolderNameType, char > PVTemplateFolderNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PVTemplateFolderNameType&
          getPVTemplateFolderName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PVTemplateFolderNameType&
          getPVTemplateFolderName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPVTemplateFolderName (const PVTemplateFolderNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPVTemplateFolderName (::std::auto_ptr< PVTemplateFolderNameType > p);

          //@}

          /**
           * @name PVTemplateFileName
           *
           * @brief Accessor and modifier functions for the %PVTemplateFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PVTemplateFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PVTemplateFileNameType, char > PVTemplateFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PVTemplateFileNameType&
          getPVTemplateFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PVTemplateFileNameType&
          getPVTemplateFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPVTemplateFileName (const PVTemplateFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPVTemplateFileName (::std::auto_ptr< PVTemplateFileNameType > p);

          //@}

          /**
           * @name GeneratedPVReportFileName
           *
           * @brief Accessor and modifier functions for the %GeneratedPVReportFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String GeneratedPVReportFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GeneratedPVReportFileNameType, char > GeneratedPVReportFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const GeneratedPVReportFileNameType&
          getGeneratedPVReportFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          GeneratedPVReportFileNameType&
          getGeneratedPVReportFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setGeneratedPVReportFileName (const GeneratedPVReportFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setGeneratedPVReportFileName (::std::auto_ptr< GeneratedPVReportFileNameType > p);

          //@}

          /**
           * @name ElectionResultSignatureFileName
           *
           * @brief Accessor and modifier functions for the %ElectionResultSignatureFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String ElectionResultSignatureFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ElectionResultSignatureFileNameType, char > ElectionResultSignatureFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ElectionResultSignatureFileNameType&
          getElectionResultSignatureFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ElectionResultSignatureFileNameType&
          getElectionResultSignatureFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setElectionResultSignatureFileName (const ElectionResultSignatureFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElectionResultSignatureFileName (::std::auto_ptr< ElectionResultSignatureFileNameType > p);

          //@}

          /**
           * @name VoteStatisticsFileName
           *
           * @brief Accessor and modifier functions for the %VoteStatisticsFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String VoteStatisticsFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VoteStatisticsFileNameType, char > VoteStatisticsFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VoteStatisticsFileNameType&
          getVoteStatisticsFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VoteStatisticsFileNameType&
          getVoteStatisticsFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVoteStatisticsFileName (const VoteStatisticsFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoteStatisticsFileName (::std::auto_ptr< VoteStatisticsFileNameType > p);

          //@}

          /**
           * @name SignatureResourceFileName
           *
           * @brief Accessor and modifier functions for the %SignatureResourceFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String SignatureResourceFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SignatureResourceFileNameType, char > SignatureResourceFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SignatureResourceFileNameType&
          getSignatureResourceFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SignatureResourceFileNameType&
          getSignatureResourceFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSignatureResourceFileName (const SignatureResourceFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSignatureResourceFileName (::std::auto_ptr< SignatureResourceFileNameType > p);

          //@}

          /**
           * @name LogErrorFileName
           *
           * @brief Accessor and modifier functions for the %LogErrorFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LogErrorFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LogErrorFileNameType, char > LogErrorFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LogErrorFileNameType&
          getLogErrorFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LogErrorFileNameType&
          getLogErrorFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogErrorFileName (const LogErrorFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogErrorFileName (::std::auto_ptr< LogErrorFileNameType > p);

          //@}

          /**
           * @name LogAuditFileName
           *
           * @brief Accessor and modifier functions for the %LogAuditFileName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String LogAuditFileNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LogAuditFileNameType, char > LogAuditFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const LogAuditFileNameType&
          getLogAuditFileName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          LogAuditFileNameType&
          getLogAuditFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogAuditFileName (const LogAuditFileNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogAuditFileName (::std::auto_ptr< LogAuditFileNameType > p);

          //@}

          /**
           * @name X7SSignedKeyCertifiedFileName
           *
           * @brief Accessor and modifier functions for the %X7SSignedKeyCertifiedFileName
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String X7SSignedKeyCertifiedFileNameType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< X7SSignedKeyCertifiedFileNameType > X7SSignedKeyCertifiedFileNameOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< X7SSignedKeyCertifiedFileNameType, char > X7SSignedKeyCertifiedFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const X7SSignedKeyCertifiedFileNameOptional&
          getX7SSignedKeyCertifiedFileName () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          X7SSignedKeyCertifiedFileNameOptional&
          getX7SSignedKeyCertifiedFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setX7SSignedKeyCertifiedFileName (const X7SSignedKeyCertifiedFileNameType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setX7SSignedKeyCertifiedFileName (const X7SSignedKeyCertifiedFileNameOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setX7SSignedKeyCertifiedFileName (::std::auto_ptr< X7SSignedKeyCertifiedFileNameType > p);

          //@}

          /**
           * @name X7SSignedCertifiedFileName
           *
           * @brief Accessor and modifier functions for the %X7SSignedCertifiedFileName
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String X7SSignedCertifiedFileNameType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< X7SSignedCertifiedFileNameType > X7SSignedCertifiedFileNameOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< X7SSignedCertifiedFileNameType, char > X7SSignedCertifiedFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const X7SSignedCertifiedFileNameOptional&
          getX7SSignedCertifiedFileName () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          X7SSignedCertifiedFileNameOptional&
          getX7SSignedCertifiedFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setX7SSignedCertifiedFileName (const X7SSignedCertifiedFileNameType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setX7SSignedCertifiedFileName (const X7SSignedCertifiedFileNameOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setX7SSignedCertifiedFileName (::std::auto_ptr< X7SSignedCertifiedFileNameType > p);

          //@}

          /**
           * @name X7SCryptoCertifiedFileName
           *
           * @brief Accessor and modifier functions for the %X7SCryptoCertifiedFileName
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String X7SCryptoCertifiedFileNameType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< X7SCryptoCertifiedFileNameType > X7SCryptoCertifiedFileNameOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< X7SCryptoCertifiedFileNameType, char > X7SCryptoCertifiedFileNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const X7SCryptoCertifiedFileNameOptional&
          getX7SCryptoCertifiedFileName () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          X7SCryptoCertifiedFileNameOptional&
          getX7SCryptoCertifiedFileName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setX7SCryptoCertifiedFileName (const X7SCryptoCertifiedFileNameType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setX7SCryptoCertifiedFileName (const X7SCryptoCertifiedFileNameOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setX7SCryptoCertifiedFileName (::std::auto_ptr< X7SCryptoCertifiedFileNameType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ConfigurationElectionFilesPath ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConfigurationElectionFilesPath (const CodiFilesFolderType&,
                                          const SAESFolderType&,
                                          const ResourcesFolderType&,
                                          const ImagesFolderType&,
                                          const VotesFolderType&,
                                          const DocsFolderType&,
                                          const CodiFolderType&,
                                          const LogsFolderNameType&,
                                          const TransmissionPackageFileNameType&,
                                          const TransmissionPackageHashFileNameType&,
                                          const TransmissionPackageKeyFileNameType&,
                                          const TransmissionPackageCrtFileNameType&,
                                          const PVFormFileNameType&,
                                          const ElectionFileNameType&,
                                          const ElectionStatusFileNameType&,
                                          const CardListStatusFileNameType&,
                                          const ElectionResourcesFileNameType&,
                                          const VotingMachineStatusFileNameType&,
                                          const VotingDeviceFileNameType&,
                                          const PollworkersFileNameType&,
                                          const StatisticsFileNameType&,
                                          const ActivatedCardStatisticsFileNameType&,
                                          const IncidentReportFileNameType&,
                                          const ClosingNotesFileNameType&,
                                          const XMLImageFileNameType&,
                                          const AssistedActivationFileNameType&,
                                          const VotingDisabledFileNameType&,
                                          const PoliceNotesFileNameType&,
                                          const LanguageFileNameType&,
                                          const VotingCentersFileNameType&,
                                          const ConfigBasePathType&,
                                          const SecretKeyFileType&,
                                          const UPKeyFileType&,
                                          const MachineKeysFileType&,
                                          const IDCardMembersFileNameType&,
                                          const TransmissionPackageSignatureFileNameType&,
                                          const PVFormSignatureFileNameType&,
                                          const CACertificateFileNameType&,
                                          const ItermediateCACertificatesFileNameType&,
                                          const ItermediateCACertificatesFromPKCS12FileNameType&,
                                          const TrustedCertificatesFileNameType&,
                                          const TrustedCertificatesFromPKCS12FileNameType&,
                                          const PVTemplateFolderNameType&,
                                          const PVTemplateFileNameType&,
                                          const GeneratedPVReportFileNameType&,
                                          const ElectionResultSignatureFileNameType&,
                                          const VoteStatisticsFileNameType&,
                                          const SignatureResourceFileNameType&,
                                          const LogErrorFileNameType&,
                                          const LogAuditFileNameType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          ConfigurationElectionFilesPath (const CodiFilesFolderType&,
                                          const SAESFolderType&,
                                          const ResourcesFolderType&,
                                          const ImagesFolderType&,
                                          const VotesFolderType&,
                                          const DocsFolderType&,
                                          const CodiFolderType&,
                                          const LogsFolderNameType&,
                                          const TransmissionPackageFileNameType&,
                                          const TransmissionPackageHashFileNameType&,
                                          const TransmissionPackageKeyFileNameType&,
                                          const TransmissionPackageCrtFileNameType&,
                                          const PVFormFileNameType&,
                                          const ElectionFileNameType&,
                                          const ElectionStatusFileNameType&,
                                          const CardListStatusFileNameType&,
                                          const ElectionResourcesFileNameType&,
                                          const VotingMachineStatusFileNameType&,
                                          const VotingDeviceFileNameType&,
                                          const PollworkersFileNameType&,
                                          const StatisticsFileNameType&,
                                          const ActivatedCardStatisticsFileNameType&,
                                          const IncidentReportFileNameType&,
                                          const ClosingNotesFileNameType&,
                                          const XMLImageFileNameType&,
                                          const AssistedActivationFileNameType&,
                                          const VotingDisabledFileNameType&,
                                          const PoliceNotesFileNameType&,
                                          const LanguageFileNameType&,
                                          const VotingCentersFileNameType&,
                                          ::std::auto_ptr< ConfigBasePathType >&,
                                          const SecretKeyFileType&,
                                          const UPKeyFileType&,
                                          const MachineKeysFileType&,
                                          const IDCardMembersFileNameType&,
                                          const TransmissionPackageSignatureFileNameType&,
                                          const PVFormSignatureFileNameType&,
                                          const CACertificateFileNameType&,
                                          const ItermediateCACertificatesFileNameType&,
                                          const ItermediateCACertificatesFromPKCS12FileNameType&,
                                          const TrustedCertificatesFileNameType&,
                                          const TrustedCertificatesFromPKCS12FileNameType&,
                                          const PVTemplateFolderNameType&,
                                          const PVTemplateFileNameType&,
                                          const GeneratedPVReportFileNameType&,
                                          const ElectionResultSignatureFileNameType&,
                                          const VoteStatisticsFileNameType&,
                                          const SignatureResourceFileNameType&,
                                          const LogErrorFileNameType&,
                                          const LogAuditFileNameType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConfigurationElectionFilesPath (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConfigurationElectionFilesPath (const ConfigurationElectionFilesPath& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConfigurationElectionFilesPath*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConfigurationElectionFilesPath ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CodiFilesFolderType > CodiFilesFolder_;
          ::xsd::cxx::tree::one< SAESFolderType > SAESFolder_;
          ::xsd::cxx::tree::one< ResourcesFolderType > ResourcesFolder_;
          ::xsd::cxx::tree::one< ImagesFolderType > ImagesFolder_;
          ::xsd::cxx::tree::one< VotesFolderType > VotesFolder_;
          ::xsd::cxx::tree::one< DocsFolderType > DocsFolder_;
          ::xsd::cxx::tree::one< CodiFolderType > CodiFolder_;
          ::xsd::cxx::tree::one< LogsFolderNameType > LogsFolderName_;
          ::xsd::cxx::tree::one< TransmissionPackageFileNameType > TransmissionPackageFileName_;
          ::xsd::cxx::tree::one< TransmissionPackageHashFileNameType > TransmissionPackageHashFileName_;
          ::xsd::cxx::tree::one< TransmissionPackageKeyFileNameType > TransmissionPackageKeyFileName_;
          ::xsd::cxx::tree::one< TransmissionPackageCrtFileNameType > TransmissionPackageCrtFileName_;
          ::xsd::cxx::tree::one< PVFormFileNameType > PVFormFileName_;
          ::xsd::cxx::tree::one< ElectionFileNameType > ElectionFileName_;
          ::xsd::cxx::tree::one< ElectionStatusFileNameType > ElectionStatusFileName_;
          ::xsd::cxx::tree::one< CardListStatusFileNameType > CardListStatusFileName_;
          ::xsd::cxx::tree::one< ElectionResourcesFileNameType > ElectionResourcesFileName_;
          ::xsd::cxx::tree::one< VotingMachineStatusFileNameType > VotingMachineStatusFileName_;
          ::xsd::cxx::tree::one< VotingDeviceFileNameType > VotingDeviceFileName_;
          ::xsd::cxx::tree::one< PollworkersFileNameType > PollworkersFileName_;
          ::xsd::cxx::tree::one< StatisticsFileNameType > StatisticsFileName_;
          ::xsd::cxx::tree::one< ActivatedCardStatisticsFileNameType > ActivatedCardStatisticsFileName_;
          ::xsd::cxx::tree::one< IncidentReportFileNameType > IncidentReportFileName_;
          ::xsd::cxx::tree::one< ClosingNotesFileNameType > ClosingNotesFileName_;
          ::xsd::cxx::tree::one< XMLImageFileNameType > XMLImageFileName_;
          ::xsd::cxx::tree::one< AssistedActivationFileNameType > AssistedActivationFileName_;
          ::xsd::cxx::tree::one< VotingDisabledFileNameType > VotingDisabledFileName_;
          ::xsd::cxx::tree::one< PoliceNotesFileNameType > PoliceNotesFileName_;
          ::xsd::cxx::tree::one< LanguageFileNameType > LanguageFileName_;
          ::xsd::cxx::tree::one< VotingCentersFileNameType > VotingCentersFileName_;
          ::xsd::cxx::tree::one< ConfigBasePathType > ConfigBasePath_;
          ::xsd::cxx::tree::one< SecretKeyFileType > SecretKeyFile_;
          ::xsd::cxx::tree::one< UPKeyFileType > UPKeyFile_;
          ::xsd::cxx::tree::one< MachineKeysFileType > MachineKeysFile_;
          ::xsd::cxx::tree::one< IDCardMembersFileNameType > IDCardMembersFileName_;
          ::xsd::cxx::tree::one< TransmissionPackageSignatureFileNameType > TransmissionPackageSignatureFileName_;
          ::xsd::cxx::tree::one< PVFormSignatureFileNameType > PVFormSignatureFileName_;
          ::xsd::cxx::tree::one< CACertificateFileNameType > CACertificateFileName_;
          ::xsd::cxx::tree::one< ItermediateCACertificatesFileNameType > ItermediateCACertificatesFileName_;
          ::xsd::cxx::tree::one< ItermediateCACertificatesFromPKCS12FileNameType > ItermediateCACertificatesFromPKCS12FileName_;
          ::xsd::cxx::tree::one< TrustedCertificatesFileNameType > TrustedCertificatesFileName_;
          ::xsd::cxx::tree::one< TrustedCertificatesFromPKCS12FileNameType > TrustedCertificatesFromPKCS12FileName_;
          ::xsd::cxx::tree::one< PVTemplateFolderNameType > PVTemplateFolderName_;
          ::xsd::cxx::tree::one< PVTemplateFileNameType > PVTemplateFileName_;
          ::xsd::cxx::tree::one< GeneratedPVReportFileNameType > GeneratedPVReportFileName_;
          ::xsd::cxx::tree::one< ElectionResultSignatureFileNameType > ElectionResultSignatureFileName_;
          ::xsd::cxx::tree::one< VoteStatisticsFileNameType > VoteStatisticsFileName_;
          ::xsd::cxx::tree::one< SignatureResourceFileNameType > SignatureResourceFileName_;
          ::xsd::cxx::tree::one< LogErrorFileNameType > LogErrorFileName_;
          ::xsd::cxx::tree::one< LogAuditFileNameType > LogAuditFileName_;
          X7SSignedKeyCertifiedFileNameOptional X7SSignedKeyCertifiedFileName_;
          X7SSignedCertifiedFileNameOptional X7SSignedCertifiedFileName_;
          X7SCryptoCertifiedFileNameOptional X7SCryptoCertifiedFileName_;

          //@endcond
        };

        bool
        operator== (const ConfigurationElectionFilesPath&, const ConfigurationElectionFilesPath&);

        bool
        operator!= (const ConfigurationElectionFilesPath&, const ConfigurationElectionFilesPath&);


        /**
         * @brief Class corresponding to the %ConfigurationPrinter schema type.
         *
         * @nosubgrouping
         */
        class ConfigurationPrinter: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name SkipPrint
           *
           * @brief Accessor and modifier functions for the %SkipPrint
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean SkipPrintType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SkipPrintType, char > SkipPrintTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SkipPrintType&
          getSkipPrint () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SkipPrintType&
          getSkipPrint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSkipPrint (const SkipPrintType& x);

          //@}

          /**
           * @name TimeToPrintTicket
           *
           * @brief Accessor and modifier functions for the %TimeToPrintTicket
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer TimeToPrintTicketType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< TimeToPrintTicketType, char > TimeToPrintTicketTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const TimeToPrintTicketType&
          getTimeToPrintTicket () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          TimeToPrintTicketType&
          getTimeToPrintTicket ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTimeToPrintTicket (const TimeToPrintTicketType& x);

          //@}

          /**
           * @name UsePresentPaperOnline
           *
           * @brief Accessor and modifier functions for the %UsePresentPaperOnline
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean UsePresentPaperOnlineType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< UsePresentPaperOnlineType, char > UsePresentPaperOnlineTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const UsePresentPaperOnlineType&
          getUsePresentPaperOnline () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          UsePresentPaperOnlineType&
          getUsePresentPaperOnline ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setUsePresentPaperOnline (const UsePresentPaperOnlineType& x);

          //@}

          /**
           * @name DefaultPrinterFontFamily
           *
           * @brief Accessor and modifier functions for the %DefaultPrinterFontFamily
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String DefaultPrinterFontFamilyType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultPrinterFontFamilyType, char > DefaultPrinterFontFamilyTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DefaultPrinterFontFamilyType&
          getDefaultPrinterFontFamily () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DefaultPrinterFontFamilyType&
          getDefaultPrinterFontFamily ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDefaultPrinterFontFamily (const DefaultPrinterFontFamilyType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDefaultPrinterFontFamily (::std::auto_ptr< DefaultPrinterFontFamilyType > p);

          //@}

          /**
           * @name EndPaddingDirectPrint
           *
           * @brief Accessor and modifier functions for the %EndPaddingDirectPrint
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer EndPaddingDirectPrintType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< EndPaddingDirectPrintType, char > EndPaddingDirectPrintTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const EndPaddingDirectPrintType&
          getEndPaddingDirectPrint () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          EndPaddingDirectPrintType&
          getEndPaddingDirectPrint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setEndPaddingDirectPrint (const EndPaddingDirectPrintType& x);

          //@}

          /**
           * @name CharsetDirectPrint
           *
           * @brief Accessor and modifier functions for the %CharsetDirectPrint
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer CharsetDirectPrintType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CharsetDirectPrintType, char > CharsetDirectPrintTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CharsetDirectPrintType&
          getCharsetDirectPrint () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CharsetDirectPrintType&
          getCharsetDirectPrint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCharsetDirectPrint (const CharsetDirectPrintType& x);

          //@}

          /**
           * @name CharPaddingDirectPrint
           *
           * @brief Accessor and modifier functions for the %CharPaddingDirectPrint
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CharPaddingDirectPrintType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CharPaddingDirectPrintType, char > CharPaddingDirectPrintTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CharPaddingDirectPrintType&
          getCharPaddingDirectPrint () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CharPaddingDirectPrintType&
          getCharPaddingDirectPrint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCharPaddingDirectPrint (const CharPaddingDirectPrintType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCharPaddingDirectPrint (::std::auto_ptr< CharPaddingDirectPrintType > p);

          //@}

          /**
           * @name CharIndentationDirectPrint
           *
           * @brief Accessor and modifier functions for the %CharIndentationDirectPrint
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CharIndentationDirectPrintType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CharIndentationDirectPrintType, char > CharIndentationDirectPrintTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CharIndentationDirectPrintType&
          getCharIndentationDirectPrint () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CharIndentationDirectPrintType&
          getCharIndentationDirectPrint ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCharIndentationDirectPrint (const CharIndentationDirectPrintType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCharIndentationDirectPrint (::std::auto_ptr< CharIndentationDirectPrintType > p);

          //@}

          /**
           * @name CutType
           *
           * @brief Accessor and modifier functions for the %CutType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::CutType CutTypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CutTypeType, char > CutTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CutTypeType&
          getCutType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CutTypeType&
          getCutType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCutType (const CutTypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCutType (::std::auto_ptr< CutTypeType > p);

          //@}

          /**
           * @name PrinterBackendType
           *
           * @brief Accessor and modifier functions for the %PrinterBackendType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::PrinterBackendType PrinterBackendTypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PrinterBackendTypeType, char > PrinterBackendTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PrinterBackendTypeType&
          getPrinterBackendType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PrinterBackendTypeType&
          getPrinterBackendType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPrinterBackendType (const PrinterBackendTypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPrinterBackendType (::std::auto_ptr< PrinterBackendTypeType > p);

          //@}

          /**
           * @name DirectPrintDeleteFiles
           *
           * @brief Accessor and modifier functions for the %DirectPrintDeleteFiles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean DirectPrintDeleteFilesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DirectPrintDeleteFilesType, char > DirectPrintDeleteFilesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DirectPrintDeleteFilesType&
          getDirectPrintDeleteFiles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DirectPrintDeleteFilesType&
          getDirectPrintDeleteFiles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDirectPrintDeleteFiles (const DirectPrintDeleteFilesType& x);

          //@}

          /**
           * @name GeneratePVReportInAllLanguages
           *
           * @brief Accessor and modifier functions for the %GeneratePVReportInAllLanguages
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean GeneratePVReportInAllLanguagesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GeneratePVReportInAllLanguagesType, char > GeneratePVReportInAllLanguagesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const GeneratePVReportInAllLanguagesType&
          getGeneratePVReportInAllLanguages () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          GeneratePVReportInAllLanguagesType&
          getGeneratePVReportInAllLanguages ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setGeneratePVReportInAllLanguages (const GeneratePVReportInAllLanguagesType& x);

          //@}

          /**
           * @name CommandPrintingMode
           *
           * @brief Accessor and modifier functions for the %CommandPrintingMode
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Common::Configuration::CommandPrintingModeType CommandPrintingModeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CommandPrintingModeType, char > CommandPrintingModeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CommandPrintingModeType&
          getCommandPrintingMode () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CommandPrintingModeType&
          getCommandPrintingMode ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCommandPrintingMode (const CommandPrintingModeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCommandPrintingMode (::std::auto_ptr< CommandPrintingModeType > p);

          //@}

          /**
           * @name StatusMonitorTimeOut
           *
           * @brief Accessor and modifier functions for the %StatusMonitorTimeOut
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer StatusMonitorTimeOutType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StatusMonitorTimeOutType, char > StatusMonitorTimeOutTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StatusMonitorTimeOutType&
          getStatusMonitorTimeOut () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StatusMonitorTimeOutType&
          getStatusMonitorTimeOut ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStatusMonitorTimeOut (const StatusMonitorTimeOutType& x);

          //@}

          /**
           * @name StatusMonitorCancel
           *
           * @brief Accessor and modifier functions for the %StatusMonitorCancel
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean StatusMonitorCancelType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StatusMonitorCancelType, char > StatusMonitorCancelTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StatusMonitorCancelType&
          getStatusMonitorCancel () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StatusMonitorCancelType&
          getStatusMonitorCancel ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStatusMonitorCancel (const StatusMonitorCancelType& x);

          //@}

          /**
           * @name DirectQrUseOptimization
           *
           * @brief Accessor and modifier functions for the %DirectQrUseOptimization
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean DirectQrUseOptimizationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DirectQrUseOptimizationType, char > DirectQrUseOptimizationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DirectQrUseOptimizationType&
          getDirectQrUseOptimization () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DirectQrUseOptimizationType&
          getDirectQrUseOptimization ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDirectQrUseOptimization (const DirectQrUseOptimizationType& x);

          //@}

          /**
           * @name DirectQrCommandHeader
           *
           * @brief Accessor and modifier functions for the %DirectQrCommandHeader
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String DirectQrCommandHeaderType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DirectQrCommandHeaderType, char > DirectQrCommandHeaderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DirectQrCommandHeaderType&
          getDirectQrCommandHeader () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DirectQrCommandHeaderType&
          getDirectQrCommandHeader ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDirectQrCommandHeader (const DirectQrCommandHeaderType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDirectQrCommandHeader (::std::auto_ptr< DirectQrCommandHeaderType > p);

          //@}

          /**
           * @name DirectQrCommandFooter
           *
           * @brief Accessor and modifier functions for the %DirectQrCommandFooter
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String DirectQrCommandFooterType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DirectQrCommandFooterType, char > DirectQrCommandFooterTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DirectQrCommandFooterType&
          getDirectQrCommandFooter () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DirectQrCommandFooterType&
          getDirectQrCommandFooter ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDirectQrCommandFooter (const DirectQrCommandFooterType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDirectQrCommandFooter (::std::auto_ptr< DirectQrCommandFooterType > p);

          //@}

          /**
           * @name ScreenPreviewWidth
           *
           * @brief Accessor and modifier functions for the %ScreenPreviewWidth
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger ScreenPreviewWidthType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ScreenPreviewWidthType, char > ScreenPreviewWidthTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ScreenPreviewWidthType&
          getScreenPreviewWidth () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ScreenPreviewWidthType&
          getScreenPreviewWidth ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setScreenPreviewWidth (const ScreenPreviewWidthType& x);

          //@}

          /**
           * @name ScreenPreviewResolutionFactor
           *
           * @brief Accessor and modifier functions for the %ScreenPreviewResolutionFactor
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Float ScreenPreviewResolutionFactorType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ScreenPreviewResolutionFactorType, char > ScreenPreviewResolutionFactorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ScreenPreviewResolutionFactorType&
          getScreenPreviewResolutionFactor () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ScreenPreviewResolutionFactorType&
          getScreenPreviewResolutionFactor ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setScreenPreviewResolutionFactor (const ScreenPreviewResolutionFactorType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          ConfigurationPrinter ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConfigurationPrinter (const SkipPrintType&,
                                const TimeToPrintTicketType&,
                                const UsePresentPaperOnlineType&,
                                const DefaultPrinterFontFamilyType&,
                                const EndPaddingDirectPrintType&,
                                const CharsetDirectPrintType&,
                                const CharPaddingDirectPrintType&,
                                const CharIndentationDirectPrintType&,
                                const CutTypeType&,
                                const PrinterBackendTypeType&,
                                const DirectPrintDeleteFilesType&,
                                const GeneratePVReportInAllLanguagesType&,
                                const CommandPrintingModeType&,
                                const StatusMonitorTimeOutType&,
                                const StatusMonitorCancelType&,
                                const DirectQrUseOptimizationType&,
                                const DirectQrCommandHeaderType&,
                                const DirectQrCommandFooterType&,
                                const ScreenPreviewWidthType&,
                                const ScreenPreviewResolutionFactorType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConfigurationPrinter (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          ConfigurationPrinter (const ConfigurationPrinter& x,
                                ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConfigurationPrinter*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~ConfigurationPrinter ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< SkipPrintType > SkipPrint_;
          ::xsd::cxx::tree::one< TimeToPrintTicketType > TimeToPrintTicket_;
          ::xsd::cxx::tree::one< UsePresentPaperOnlineType > UsePresentPaperOnline_;
          ::xsd::cxx::tree::one< DefaultPrinterFontFamilyType > DefaultPrinterFontFamily_;
          ::xsd::cxx::tree::one< EndPaddingDirectPrintType > EndPaddingDirectPrint_;
          ::xsd::cxx::tree::one< CharsetDirectPrintType > CharsetDirectPrint_;
          ::xsd::cxx::tree::one< CharPaddingDirectPrintType > CharPaddingDirectPrint_;
          ::xsd::cxx::tree::one< CharIndentationDirectPrintType > CharIndentationDirectPrint_;
          ::xsd::cxx::tree::one< CutTypeType > CutType_;
          ::xsd::cxx::tree::one< PrinterBackendTypeType > PrinterBackendType_;
          ::xsd::cxx::tree::one< DirectPrintDeleteFilesType > DirectPrintDeleteFiles_;
          ::xsd::cxx::tree::one< GeneratePVReportInAllLanguagesType > GeneratePVReportInAllLanguages_;
          ::xsd::cxx::tree::one< CommandPrintingModeType > CommandPrintingMode_;
          ::xsd::cxx::tree::one< StatusMonitorTimeOutType > StatusMonitorTimeOut_;
          ::xsd::cxx::tree::one< StatusMonitorCancelType > StatusMonitorCancel_;
          ::xsd::cxx::tree::one< DirectQrUseOptimizationType > DirectQrUseOptimization_;
          ::xsd::cxx::tree::one< DirectQrCommandHeaderType > DirectQrCommandHeader_;
          ::xsd::cxx::tree::one< DirectQrCommandFooterType > DirectQrCommandFooter_;
          ::xsd::cxx::tree::one< ScreenPreviewWidthType > ScreenPreviewWidth_;
          ::xsd::cxx::tree::one< ScreenPreviewResolutionFactorType > ScreenPreviewResolutionFactor_;

          //@endcond
        };

        bool
        operator== (const ConfigurationPrinter&, const ConfigurationPrinter&);

        bool
        operator!= (const ConfigurationPrinter&, const ConfigurationPrinter&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        /**
         * @name Parsing functions for the %SaesCommonConfiguration document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::std::string& uri,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::std::string& uri,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      const ::std::string& id,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      const ::std::string& id,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::xercesc::InputSource& is,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::xercesc::InputSource& is,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (const ::xercesc::DOMDocument& d,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration >
        parseSaesCommonConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Common
    {
      namespace Configuration
      {
        void
        operator<< (::xercesc::DOMElement&, const SaesCommonConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const OSConfigurationFiles&);

        void
        operator<< (::xercesc::DOMElement&, const LogConfigurationReader&);

        void
        operator<< (::xercesc::DOMElement&, const BEIDConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const SmartCardConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const PCSCDConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const CommandPrintingModeType&);

        void
        operator<< (::xercesc::DOMAttr&, const CommandPrintingModeType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const CommandPrintingModeType&);

        void
        operator<< (::xercesc::DOMElement&, const PrinterBackendType&);

        void
        operator<< (::xercesc::DOMAttr&, const PrinterBackendType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const PrinterBackendType&);

        void
        operator<< (::xercesc::DOMElement&, const CutType&);

        void
        operator<< (::xercesc::DOMAttr&, const CutType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const CutType&);

        void
        operator<< (::xercesc::DOMElement&, const ConfigurationBasePath&);

        void
        operator<< (::xercesc::DOMElement&, const RulesBasePathType&);

        void
        operator<< (::xercesc::DOMAttr&, const RulesBasePathType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const RulesBasePathType&);

        void
        operator<< (::xercesc::DOMElement&, const BasePath&);

        void
        operator<< (::xercesc::DOMElement&, const BasePathType&);

        void
        operator<< (::xercesc::DOMAttr&, const BasePathType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const BasePathType&);

        void
        operator<< (::xercesc::DOMElement&, const DigestAlgType&);

        void
        operator<< (::xercesc::DOMAttr&, const DigestAlgType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const DigestAlgType&);

        void
        operator<< (::xercesc::DOMElement&, const KeyDerivAlgType&);

        void
        operator<< (::xercesc::DOMAttr&, const KeyDerivAlgType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const KeyDerivAlgType&);

        void
        operator<< (::xercesc::DOMElement&, const SaltSourceType&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityFileConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const FileSystemVoteConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const SignedType&);

        void
        operator<< (::xercesc::DOMAttr&, const SignedType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SignedType&);

        void
        operator<< (::xercesc::DOMElement&, const ValidateCertifiedConfiguration&);

        void
        operator<< (::xercesc::DOMAttr&, const ValidateCertifiedConfiguration&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const ValidateCertifiedConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const TimeConfiguration&);

        void
        operator<< (::xercesc::DOMAttr&, const TimeConfiguration&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const TimeConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const CertifiedType&);

        void
        operator<< (::xercesc::DOMAttr&, const CertifiedType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const CertifiedType&);

        void
        operator<< (::xercesc::DOMElement&, const CryptoType&);

        void
        operator<< (::xercesc::DOMAttr&, const CryptoType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const CryptoType&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityCryptoMode&);

        void
        operator<< (::xercesc::DOMAttr&, const SecurityCryptoMode&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SecurityCryptoMode&);

        void
        operator<< (::xercesc::DOMElement&, const PlatformMode&);

        void
        operator<< (::xercesc::DOMAttr&, const PlatformMode&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const PlatformMode&);

        void
        operator<< (::xercesc::DOMElement&, const GlobalPIN&);

        void
        operator<< (::xercesc::DOMAttr&, const GlobalPIN&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const GlobalPIN&);

        void
        operator<< (::xercesc::DOMElement&, const DataPIN&);

        void
        operator<< (::xercesc::DOMAttr&, const DataPIN&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const DataPIN&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityChannelProtocol&);

        void
        operator<< (::xercesc::DOMAttr&, const SecurityChannelProtocol&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SecurityChannelProtocol&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityChannelProtocolImpl&);

        void
        operator<< (::xercesc::DOMAttr&, const SecurityChannelProtocolImpl&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SecurityChannelProtocolImpl&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityLevel&);

        void
        operator<< (::xercesc::DOMAttr&, const SecurityLevel&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SecurityLevel&);

        void
        operator<< (::xercesc::DOMElement&, const SecurityKeyDerivation&);

        void
        operator<< (::xercesc::DOMAttr&, const SecurityKeyDerivation&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SecurityKeyDerivation&);

        void
        operator<< (::xercesc::DOMElement&, const NivelTestConfig&);

        void
        operator<< (::xercesc::DOMAttr&, const NivelTestConfig&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const NivelTestConfig&);

        /**
         * @name Serialization functions for the %SaesCommonConfiguration document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeSaesCommonConfiguration (::std::ostream& os,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesCommonConfiguration (::std::ostream& os,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesCommonConfiguration (::std::ostream& os,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeSaesCommonConfiguration (::xercesc::XMLFormatTarget& ft,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesCommonConfiguration (::xercesc::XMLFormatTarget& ft,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesCommonConfiguration (::xercesc::XMLFormatTarget& ft,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          ::xercesc::DOMErrorHandler& eh,
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          const ::std::string& e = "UTF-8",
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeSaesCommonConfiguration (::xercesc::DOMDocument& d,
                                          const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x,
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeSaesCommonConfiguration (const ::Smartmatic::SAES::Common::Configuration::SaesCommonConfiguration& x, 
                                          const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                          ::Smartmatic::ConfigurationTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const SmartCardErrorCode&);

        void
        operator<< (::xercesc::DOMAttr&, const SmartCardErrorCode&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const SmartCardErrorCode&);

        void
        operator<< (::xercesc::DOMElement&, const ConfigurationElectionFilesPath&);

        void
        operator<< (::xercesc::DOMElement&, const ConfigurationPrinter&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SAES_COMMON_CONFIGURATION_SCHEMA_HXX
