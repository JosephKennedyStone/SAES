// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ConfigurationBase-schema.hxx"

namespace Smartmatic
{
  namespace Configuration
  {
    // ConfigurationBase
    // 

    const ConfigurationBase::ConfigurationTypeSequence& ConfigurationBase::
    getConfigurationType () const
    {
      return this->ConfigurationType_;
    }

    ConfigurationBase::ConfigurationTypeSequence& ConfigurationBase::
    getConfigurationType ()
    {
      return this->ConfigurationType_;
    }

    void ConfigurationBase::
    setConfigurationType (const ConfigurationTypeSequence& s)
    {
      this->ConfigurationType_ = s;
    }


    // ConfigurationType
    // 

    const ConfigurationType::ConfigurationType1& ConfigurationType::
    getConfiguration () const
    {
      return this->Configuration_.get ();
    }

    ConfigurationType::ConfigurationType1& ConfigurationType::
    getConfiguration ()
    {
      return this->Configuration_.get ();
    }

    void ConfigurationType::
    setConfiguration (const ConfigurationType1& x)
    {
      this->Configuration_.set (x);
    }

    void ConfigurationType::
    setConfiguration (::std::auto_ptr< ConfigurationType1 > x)
    {
      this->Configuration_.set (x);
    }

    const ConfigurationType::NameType& ConfigurationType::
    getName () const
    {
      return this->name_.get ();
    }

    ConfigurationType::NameType& ConfigurationType::
    getName ()
    {
      return this->name_.get ();
    }

    void ConfigurationType::
    setName (const NameType& x)
    {
      this->name_.set (x);
    }

    void ConfigurationType::
    setName (::std::auto_ptr< NameType > x)
    {
      this->name_.set (x);
    }

    const ConfigurationType::DescriptionType& ConfigurationType::
    getDescription () const
    {
      return this->description_.get ();
    }

    ConfigurationType::DescriptionType& ConfigurationType::
    getDescription ()
    {
      return this->description_.get ();
    }

    void ConfigurationType::
    setDescription (const DescriptionType& x)
    {
      this->description_.set (x);
    }

    void ConfigurationType::
    setDescription (::std::auto_ptr< DescriptionType > x)
    {
      this->description_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    // ConfigurationBase
    //

    ConfigurationBase::
    ConfigurationBase ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      ConfigurationType_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    ConfigurationBase::
    ConfigurationBase (const ConfigurationBase& x,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      ConfigurationType_ (x.ConfigurationType_, f, this)
    {
    }

    ConfigurationBase::
    ConfigurationBase (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      ConfigurationType_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ConfigurationBase::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ConfigurationType
        //
        if (n.name () == "ConfigurationType" && n.namespace_ () == "http://www.smartmatic.com/Configuration")
        {
          ::std::auto_ptr< ConfigurationTypeType > r (
            ConfigurationTypeTraits::create (i, f, this));

          this->ConfigurationType_.push_back (r);
          continue;
        }

        break;
      }
    }

    ConfigurationBase* ConfigurationBase::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class ConfigurationBase (*this, f, c);
    }

    ConfigurationBase::
    ~ConfigurationBase ()
    {
    }

    bool
    operator== (const ConfigurationBase& x, const ConfigurationBase& y)
    {
      if (!(x.getConfigurationType () == y.getConfigurationType ()))
        return false;

      return true;
    }

    bool
    operator!= (const ConfigurationBase& x, const ConfigurationBase& y)
    {
      return !(x == y);
    }

    // ConfigurationType
    //

    ConfigurationType::
    ConfigurationType ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      Configuration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      name_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      description_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    ConfigurationType::
    ConfigurationType (const ConfigurationType1& Configuration,
                       const NameType& name,
                       const DescriptionType& description)
    : ::Smartmatic::ConfigurationTypes::Type (),
      Configuration_ (Configuration, ::Smartmatic::ConfigurationTypes::Flags (), this),
      name_ (name, ::Smartmatic::ConfigurationTypes::Flags (), this),
      description_ (description, ::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    ConfigurationType::
    ConfigurationType (const ConfigurationType& x,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      Configuration_ (x.Configuration_, f, this),
      name_ (x.name_, f, this),
      description_ (x.description_, f, this)
    {
    }

    ConfigurationType::
    ConfigurationType (const ::xercesc::DOMElement& e,
                       ::Smartmatic::ConfigurationTypes::Flags f,
                       ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      Configuration_ (f, this),
      name_ (f, this),
      description_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ConfigurationType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Configuration
        //
        if (n.name () == "Configuration" && n.namespace_ () == "http://www.smartmatic.com/Configuration")
        {
          ::std::auto_ptr< ConfigurationType1 > r (
            ConfigurationTraits::create (i, f, this));

          if (!Configuration_.present ())
          {
            this->Configuration_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Configuration_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Configuration",
          "http://www.smartmatic.com/Configuration");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< NameType > r (
            NameTraits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "description" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< DescriptionType > r (
            DescriptionTraits::create (i, f, this));

          this->description_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!description_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "description",
          "");
      }
    }

    ConfigurationType* ConfigurationType::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class ConfigurationType (*this, f, c);
    }

    ConfigurationType::
    ~ConfigurationType ()
    {
    }

    bool
    operator== (const ConfigurationType& x, const ConfigurationType& y)
    {
      if (!(x.getConfiguration () == y.getConfiguration ()))
        return false;

      if (!(x.getName () == y.getName ()))
        return false;

      if (!(x.getDescription () == y.getDescription ()))
        return false;

      return true;
    }

    bool
    operator!= (const ConfigurationType& x, const ConfigurationType& y)
    {
      return !(x == y);
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (const ::std::string& u,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
        ::Smartmatic::Configuration::parseConfigurationBaseRoot (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (const ::std::string& u,
                                ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
        ::Smartmatic::Configuration::parseConfigurationBaseRoot (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
        ::Smartmatic::Configuration::parseConfigurationBaseRoot (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::std::istream& is,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Smartmatic::Configuration::parseConfigurationBaseRoot (isrc, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::std::istream& is,
                                ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Smartmatic::Configuration::parseConfigurationBaseRoot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Smartmatic::Configuration::parseConfigurationBaseRoot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::std::istream& is,
                                const ::std::string& sid,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Smartmatic::Configuration::parseConfigurationBaseRoot (isrc, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::std::istream& is,
                                const ::std::string& sid,
                                ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Smartmatic::Configuration::parseConfigurationBaseRoot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Smartmatic::Configuration::parseConfigurationBaseRoot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::xercesc::InputSource& i,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
        ::Smartmatic::Configuration::parseConfigurationBaseRoot (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::xercesc::InputSource& i,
                                ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
        ::Smartmatic::Configuration::parseConfigurationBaseRoot (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
        ::Smartmatic::Configuration::parseConfigurationBaseRoot (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (const ::xercesc::DOMDocument& d,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
          ::Smartmatic::Configuration::parseConfigurationBaseRoot (
            c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConfigurationBaseRoot" &&
          n.namespace_ () == "http://www.smartmatic.com/Configuration")
      {
        ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
          ::xsd::cxx::tree::traits< ::Smartmatic::Configuration::ConfigurationBase, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConfigurationBaseRoot",
        "http://www.smartmatic.com/Configuration");
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase >
    parseConfigurationBaseRoot (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                const ::Smartmatic::ConfigurationTypes::Properties&)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
         !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
        doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "ConfigurationBaseRoot" &&
          n.namespace_ () == "http://www.smartmatic.com/Configuration")
      {
        ::std::auto_ptr< ::Smartmatic::Configuration::ConfigurationBase > r (
          ::xsd::cxx::tree::traits< ::Smartmatic::Configuration::ConfigurationBase, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ConfigurationBaseRoot",
        "http://www.smartmatic.com/Configuration");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    void
    operator<< (::xercesc::DOMElement& e, const ConfigurationBase& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // ConfigurationType
      //
      for (ConfigurationBase::ConfigurationTypeConstIterator
           b (i.getConfigurationType ().begin ()), n (i.getConfigurationType ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ConfigurationType",
            "http://www.smartmatic.com/Configuration",
            e));

        s << *b;
      }
    }

    void
    serializeConfigurationBaseRoot (::std::ostream& o,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeConfigurationBaseRoot (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeConfigurationBaseRoot (::std::ostream& o,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeConfigurationBaseRoot (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeConfigurationBaseRoot (::std::ostream& o,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeConfigurationBaseRoot (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeConfigurationBaseRoot (::xercesc::XMLFormatTarget& t,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeConfigurationBaseRoot (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeConfigurationBaseRoot (::xercesc::XMLFormatTarget& t,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeConfigurationBaseRoot (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeConfigurationBaseRoot (::xercesc::XMLFormatTarget& t,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    const ::std::string& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeConfigurationBaseRoot (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeConfigurationBaseRoot (::xercesc::DOMDocument& d,
                                    const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    ::Smartmatic::ConfigurationTypes::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "ConfigurationBaseRoot" &&
          n.namespace_ () == "http://www.smartmatic.com/Configuration")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ConfigurationBaseRoot",
          "http://www.smartmatic.com/Configuration");
      }
    }

    ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
    serializeConfigurationBaseRoot (const ::Smartmatic::Configuration::ConfigurationBase& s,
                                    const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                    ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ConfigurationBaseRoot",
          "http://www.smartmatic.com/Configuration",
          m, f));

      ::Smartmatic::Configuration::serializeConfigurationBaseRoot (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ConfigurationType& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // Configuration
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Configuration",
            "http://www.smartmatic.com/Configuration",
            e));

        s << i.getConfiguration ();
      }

      // name
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "name",
            e));

        a << i.getName ();
      }

      // description
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "description",
            e));

        a << i.getDescription ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

