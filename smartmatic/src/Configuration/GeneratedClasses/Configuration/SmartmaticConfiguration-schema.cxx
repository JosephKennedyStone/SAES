// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SmartmaticConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace Configuration
  {
    // SmartmaticConfiguration
    // 

    const SmartmaticConfiguration::ResourcePathsType& SmartmaticConfiguration::
    getResourcePaths () const
    {
      return this->ResourcePaths_.get ();
    }

    SmartmaticConfiguration::ResourcePathsType& SmartmaticConfiguration::
    getResourcePaths ()
    {
      return this->ResourcePaths_.get ();
    }

    void SmartmaticConfiguration::
    setResourcePaths (const ResourcePathsType& x)
    {
      this->ResourcePaths_.set (x);
    }

    void SmartmaticConfiguration::
    setResourcePaths (::std::auto_ptr< ResourcePathsType > x)
    {
      this->ResourcePaths_.set (x);
    }

    const SmartmaticConfiguration::ImageResourcesType& SmartmaticConfiguration::
    getImageResources () const
    {
      return this->ImageResources_.get ();
    }

    SmartmaticConfiguration::ImageResourcesType& SmartmaticConfiguration::
    getImageResources ()
    {
      return this->ImageResources_.get ();
    }

    void SmartmaticConfiguration::
    setImageResources (const ImageResourcesType& x)
    {
      this->ImageResources_.set (x);
    }

    void SmartmaticConfiguration::
    setImageResources (::std::auto_ptr< ImageResourcesType > x)
    {
      this->ImageResources_.set (x);
    }

    const SmartmaticConfiguration::SoundOutputType& SmartmaticConfiguration::
    getSoundOutput () const
    {
      return this->SoundOutput_.get ();
    }

    SmartmaticConfiguration::SoundOutputType& SmartmaticConfiguration::
    getSoundOutput ()
    {
      return this->SoundOutput_.get ();
    }

    void SmartmaticConfiguration::
    setSoundOutput (const SoundOutputType& x)
    {
      this->SoundOutput_.set (x);
    }

    void SmartmaticConfiguration::
    setSoundOutput (::std::auto_ptr< SoundOutputType > x)
    {
      this->SoundOutput_.set (x);
    }


    // SoundDescriptorConfiguration
    // 

    const SoundDescriptorConfiguration::FrequencyType& SoundDescriptorConfiguration::
    getFrequency () const
    {
      return this->frequency_.get ();
    }

    SoundDescriptorConfiguration::FrequencyType& SoundDescriptorConfiguration::
    getFrequency ()
    {
      return this->frequency_.get ();
    }

    void SoundDescriptorConfiguration::
    setFrequency (const FrequencyType& x)
    {
      this->frequency_.set (x);
    }

    const SoundDescriptorConfiguration::TimeType& SoundDescriptorConfiguration::
    getTime () const
    {
      return this->time_.get ();
    }

    SoundDescriptorConfiguration::TimeType& SoundDescriptorConfiguration::
    getTime ()
    {
      return this->time_.get ();
    }

    void SoundDescriptorConfiguration::
    setTime (const TimeType& x)
    {
      this->time_.set (x);
    }

    const SoundDescriptorConfiguration::RepetitionsType& SoundDescriptorConfiguration::
    getRepetitions () const
    {
      return this->repetitions_.get ();
    }

    SoundDescriptorConfiguration::RepetitionsType& SoundDescriptorConfiguration::
    getRepetitions ()
    {
      return this->repetitions_.get ();
    }

    void SoundDescriptorConfiguration::
    setRepetitions (const RepetitionsType& x)
    {
      this->repetitions_.set (x);
    }

    const SoundDescriptorConfiguration::TimeBetweenRepetitionsType& SoundDescriptorConfiguration::
    getTimeBetweenRepetitions () const
    {
      return this->timeBetweenRepetitions_.get ();
    }

    SoundDescriptorConfiguration::TimeBetweenRepetitionsType& SoundDescriptorConfiguration::
    getTimeBetweenRepetitions ()
    {
      return this->timeBetweenRepetitions_.get ();
    }

    void SoundDescriptorConfiguration::
    setTimeBetweenRepetitions (const TimeBetweenRepetitionsType& x)
    {
      this->timeBetweenRepetitions_.set (x);
    }


    // ResourcePaths
    // 

    const ResourcePaths::ResourcePathSequence& ResourcePaths::
    getResourcePath () const
    {
      return this->ResourcePath_;
    }

    ResourcePaths::ResourcePathSequence& ResourcePaths::
    getResourcePath ()
    {
      return this->ResourcePath_;
    }

    void ResourcePaths::
    setResourcePath (const ResourcePathSequence& s)
    {
      this->ResourcePath_ = s;
    }


    // ImageResources
    // 

    const ImageResources::StoreInMemoryType& ImageResources::
    getStoreInMemory () const
    {
      return this->StoreInMemory_.get ();
    }

    ImageResources::StoreInMemoryType& ImageResources::
    getStoreInMemory ()
    {
      return this->StoreInMemory_.get ();
    }

    void ImageResources::
    setStoreInMemory (const StoreInMemoryType& x)
    {
      this->StoreInMemory_.set (x);
    }


    // SoundOutput
    // 

    const SoundOutput::UseBeepType& SoundOutput::
    getUseBeep () const
    {
      return this->UseBeep_.get ();
    }

    SoundOutput::UseBeepType& SoundOutput::
    getUseBeep ()
    {
      return this->UseBeep_.get ();
    }

    void SoundOutput::
    setUseBeep (const UseBeepType& x)
    {
      this->UseBeep_.set (x);
    }

    const SoundOutput::AppSoundType& SoundOutput::
    getAppSound () const
    {
      return this->AppSound_.get ();
    }

    SoundOutput::AppSoundType& SoundOutput::
    getAppSound ()
    {
      return this->AppSound_.get ();
    }

    void SoundOutput::
    setAppSound (const AppSoundType& x)
    {
      this->AppSound_.set (x);
    }

    void SoundOutput::
    setAppSound (::std::auto_ptr< AppSoundType > x)
    {
      this->AppSound_.set (x);
    }

    const SoundOutput::SoundConfigurationsSequence& SoundOutput::
    getSoundConfigurations () const
    {
      return this->SoundConfigurations_;
    }

    SoundOutput::SoundConfigurationsSequence& SoundOutput::
    getSoundConfigurations ()
    {
      return this->SoundConfigurations_;
    }

    void SoundOutput::
    setSoundConfigurations (const SoundConfigurationsSequence& s)
    {
      this->SoundConfigurations_ = s;
    }


    // SoundConfigurations
    // 

    const SoundConfigurations::SoundFileOptional& SoundConfigurations::
    getSoundFile () const
    {
      return this->SoundFile_;
    }

    SoundConfigurations::SoundFileOptional& SoundConfigurations::
    getSoundFile ()
    {
      return this->SoundFile_;
    }

    void SoundConfigurations::
    setSoundFile (const SoundFileType& x)
    {
      this->SoundFile_.set (x);
    }

    void SoundConfigurations::
    setSoundFile (const SoundFileOptional& x)
    {
      this->SoundFile_ = x;
    }

    void SoundConfigurations::
    setSoundFile (::std::auto_ptr< SoundFileType > x)
    {
      this->SoundFile_.set (x);
    }

    const SoundConfigurations::SoundConfigurationSequence& SoundConfigurations::
    getSoundConfiguration () const
    {
      return this->SoundConfiguration_;
    }

    SoundConfigurations::SoundConfigurationSequence& SoundConfigurations::
    getSoundConfiguration ()
    {
      return this->SoundConfiguration_;
    }

    void SoundConfigurations::
    setSoundConfiguration (const SoundConfigurationSequence& s)
    {
      this->SoundConfiguration_ = s;
    }

    const SoundConfigurations::NameType& SoundConfigurations::
    getName () const
    {
      return this->Name_.get ();
    }

    SoundConfigurations::NameType& SoundConfigurations::
    getName ()
    {
      return this->Name_.get ();
    }

    void SoundConfigurations::
    setName (const NameType& x)
    {
      this->Name_.set (x);
    }

    void SoundConfigurations::
    setName (::std::auto_ptr< NameType > x)
    {
      this->Name_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    // SmartmaticConfiguration
    //

    SmartmaticConfiguration::
    SmartmaticConfiguration ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      ResourcePaths_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      ImageResources_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundOutput_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SmartmaticConfiguration::
    SmartmaticConfiguration (const ResourcePathsType& ResourcePaths,
                             const ImageResourcesType& ImageResources,
                             const SoundOutputType& SoundOutput)
    : ::Smartmatic::ConfigurationTypes::Type (),
      ResourcePaths_ (ResourcePaths, ::Smartmatic::ConfigurationTypes::Flags (), this),
      ImageResources_ (ImageResources, ::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundOutput_ (SoundOutput, ::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SmartmaticConfiguration::
    SmartmaticConfiguration (::std::auto_ptr< ResourcePathsType >& ResourcePaths,
                             ::std::auto_ptr< ImageResourcesType >& ImageResources,
                             ::std::auto_ptr< SoundOutputType >& SoundOutput)
    : ::Smartmatic::ConfigurationTypes::Type (),
      ResourcePaths_ (ResourcePaths, ::Smartmatic::ConfigurationTypes::Flags (), this),
      ImageResources_ (ImageResources, ::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundOutput_ (SoundOutput, ::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SmartmaticConfiguration::
    SmartmaticConfiguration (const SmartmaticConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      ResourcePaths_ (x.ResourcePaths_, f, this),
      ImageResources_ (x.ImageResources_, f, this),
      SoundOutput_ (x.SoundOutput_, f, this)
    {
    }

    SmartmaticConfiguration::
    SmartmaticConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f,
                             ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      ResourcePaths_ (f, this),
      ImageResources_ (f, this),
      SoundOutput_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SmartmaticConfiguration::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ResourcePaths
        //
        if (n.name () == "ResourcePaths" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< ResourcePathsType > r (
            ResourcePathsTraits::create (i, f, this));

          if (!ResourcePaths_.present ())
          {
            this->ResourcePaths_.set (r);
            continue;
          }
        }

        // ImageResources
        //
        if (n.name () == "ImageResources" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< ImageResourcesType > r (
            ImageResourcesTraits::create (i, f, this));

          if (!ImageResources_.present ())
          {
            this->ImageResources_.set (r);
            continue;
          }
        }

        // SoundOutput
        //
        if (n.name () == "SoundOutput" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< SoundOutputType > r (
            SoundOutputTraits::create (i, f, this));

          if (!SoundOutput_.present ())
          {
            this->SoundOutput_.set (r);
            continue;
          }
        }

        break;
      }

      if (!ResourcePaths_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ResourcePaths",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }

      if (!ImageResources_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "ImageResources",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }

      if (!SoundOutput_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "SoundOutput",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }
    }

    SmartmaticConfiguration* SmartmaticConfiguration::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class SmartmaticConfiguration (*this, f, c);
    }

    SmartmaticConfiguration::
    ~SmartmaticConfiguration ()
    {
    }

    bool
    operator== (const SmartmaticConfiguration& x, const SmartmaticConfiguration& y)
    {
      if (!(x.getResourcePaths () == y.getResourcePaths ()))
        return false;

      if (!(x.getImageResources () == y.getImageResources ()))
        return false;

      if (!(x.getSoundOutput () == y.getSoundOutput ()))
        return false;

      return true;
    }

    bool
    operator!= (const SmartmaticConfiguration& x, const SmartmaticConfiguration& y)
    {
      return !(x == y);
    }

    // SoundDescriptorConfiguration
    //

    SoundDescriptorConfiguration::
    SoundDescriptorConfiguration ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      frequency_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      time_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      repetitions_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      timeBetweenRepetitions_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SoundDescriptorConfiguration::
    SoundDescriptorConfiguration (const FrequencyType& frequency,
                                  const TimeType& time,
                                  const RepetitionsType& repetitions,
                                  const TimeBetweenRepetitionsType& timeBetweenRepetitions)
    : ::Smartmatic::ConfigurationTypes::Type (),
      frequency_ (frequency, ::Smartmatic::ConfigurationTypes::Flags (), this),
      time_ (time, ::Smartmatic::ConfigurationTypes::Flags (), this),
      repetitions_ (repetitions, ::Smartmatic::ConfigurationTypes::Flags (), this),
      timeBetweenRepetitions_ (timeBetweenRepetitions, ::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SoundDescriptorConfiguration::
    SoundDescriptorConfiguration (const SoundDescriptorConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      frequency_ (x.frequency_, f, this),
      time_ (x.time_, f, this),
      repetitions_ (x.repetitions_, f, this),
      timeBetweenRepetitions_ (x.timeBetweenRepetitions_, f, this)
    {
    }

    SoundDescriptorConfiguration::
    SoundDescriptorConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      frequency_ (f, this),
      time_ (f, this),
      repetitions_ (f, this),
      timeBetweenRepetitions_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SoundDescriptorConfiguration::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // frequency
        //
        if (n.name () == "frequency" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          if (!frequency_.present ())
          {
            this->frequency_.set (FrequencyTraits::create (i, f, this));
            continue;
          }
        }

        // time
        //
        if (n.name () == "time" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          if (!time_.present ())
          {
            this->time_.set (TimeTraits::create (i, f, this));
            continue;
          }
        }

        // repetitions
        //
        if (n.name () == "repetitions" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          if (!repetitions_.present ())
          {
            this->repetitions_.set (RepetitionsTraits::create (i, f, this));
            continue;
          }
        }

        // timeBetweenRepetitions
        //
        if (n.name () == "timeBetweenRepetitions" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          if (!timeBetweenRepetitions_.present ())
          {
            this->timeBetweenRepetitions_.set (TimeBetweenRepetitionsTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!frequency_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "frequency",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }

      if (!time_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "time",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }

      if (!repetitions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "repetitions",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }

      if (!timeBetweenRepetitions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "timeBetweenRepetitions",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }
    }

    SoundDescriptorConfiguration* SoundDescriptorConfiguration::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class SoundDescriptorConfiguration (*this, f, c);
    }

    SoundDescriptorConfiguration::
    ~SoundDescriptorConfiguration ()
    {
    }

    bool
    operator== (const SoundDescriptorConfiguration& x, const SoundDescriptorConfiguration& y)
    {
      if (!(x.getFrequency () == y.getFrequency ()))
        return false;

      if (!(x.getTime () == y.getTime ()))
        return false;

      if (!(x.getRepetitions () == y.getRepetitions ()))
        return false;

      if (!(x.getTimeBetweenRepetitions () == y.getTimeBetweenRepetitions ()))
        return false;

      return true;
    }

    bool
    operator!= (const SoundDescriptorConfiguration& x, const SoundDescriptorConfiguration& y)
    {
      return !(x == y);
    }

    // ResourcePaths
    //

    ResourcePaths::
    ResourcePaths ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      ResourcePath_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    ResourcePaths::
    ResourcePaths (const ResourcePaths& x,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      ResourcePath_ (x.ResourcePath_, f, this)
    {
    }

    ResourcePaths::
    ResourcePaths (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f,
                   ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      ResourcePath_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ResourcePaths::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // ResourcePath
        //
        if (n.name () == "ResourcePath" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< ResourcePathType > r (
            ResourcePathTraits::create (i, f, this));

          this->ResourcePath_.push_back (r);
          continue;
        }

        break;
      }
    }

    ResourcePaths* ResourcePaths::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class ResourcePaths (*this, f, c);
    }

    ResourcePaths::
    ~ResourcePaths ()
    {
    }

    bool
    operator== (const ResourcePaths& x, const ResourcePaths& y)
    {
      if (!(x.getResourcePath () == y.getResourcePath ()))
        return false;

      return true;
    }

    bool
    operator!= (const ResourcePaths& x, const ResourcePaths& y)
    {
      return !(x == y);
    }

    // ImageResources
    //

    ImageResources::
    ImageResources ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      StoreInMemory_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    ImageResources::
    ImageResources (const StoreInMemoryType& StoreInMemory)
    : ::Smartmatic::ConfigurationTypes::Type (),
      StoreInMemory_ (StoreInMemory, ::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    ImageResources::
    ImageResources (const ImageResources& x,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      StoreInMemory_ (x.StoreInMemory_, f, this)
    {
    }

    ImageResources::
    ImageResources (const ::xercesc::DOMElement& e,
                    ::Smartmatic::ConfigurationTypes::Flags f,
                    ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      StoreInMemory_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ImageResources::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // StoreInMemory
        //
        if (n.name () == "StoreInMemory" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          if (!StoreInMemory_.present ())
          {
            this->StoreInMemory_.set (StoreInMemoryTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!StoreInMemory_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "StoreInMemory",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }
    }

    ImageResources* ImageResources::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class ImageResources (*this, f, c);
    }

    ImageResources::
    ~ImageResources ()
    {
    }

    bool
    operator== (const ImageResources& x, const ImageResources& y)
    {
      if (!(x.getStoreInMemory () == y.getStoreInMemory ()))
        return false;

      return true;
    }

    bool
    operator!= (const ImageResources& x, const ImageResources& y)
    {
      return !(x == y);
    }

    // SoundOutput
    //

    SoundOutput::
    SoundOutput ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      UseBeep_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      AppSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundConfigurations_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SoundOutput::
    SoundOutput (const UseBeepType& UseBeep,
                 const AppSoundType& AppSound)
    : ::Smartmatic::ConfigurationTypes::Type (),
      UseBeep_ (UseBeep, ::Smartmatic::ConfigurationTypes::Flags (), this),
      AppSound_ (AppSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundConfigurations_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SoundOutput::
    SoundOutput (const SoundOutput& x,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      UseBeep_ (x.UseBeep_, f, this),
      AppSound_ (x.AppSound_, f, this),
      SoundConfigurations_ (x.SoundConfigurations_, f, this)
    {
    }

    SoundOutput::
    SoundOutput (const ::xercesc::DOMElement& e,
                 ::Smartmatic::ConfigurationTypes::Flags f,
                 ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      UseBeep_ (f, this),
      AppSound_ (f, this),
      SoundConfigurations_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SoundOutput::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // UseBeep
        //
        if (n.name () == "UseBeep" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          if (!UseBeep_.present ())
          {
            this->UseBeep_.set (UseBeepTraits::create (i, f, this));
            continue;
          }
        }

        // AppSound
        //
        if (n.name () == "AppSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< AppSoundType > r (
            AppSoundTraits::create (i, f, this));

          if (!AppSound_.present ())
          {
            this->AppSound_.set (r);
            continue;
          }
        }

        // SoundConfigurations
        //
        if (n.name () == "SoundConfigurations" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< SoundConfigurationsType > r (
            SoundConfigurationsTraits::create (i, f, this));

          this->SoundConfigurations_.push_back (r);
          continue;
        }

        break;
      }

      if (!UseBeep_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "UseBeep",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }

      if (!AppSound_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "AppSound",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }
    }

    SoundOutput* SoundOutput::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class SoundOutput (*this, f, c);
    }

    SoundOutput::
    ~SoundOutput ()
    {
    }

    bool
    operator== (const SoundOutput& x, const SoundOutput& y)
    {
      if (!(x.getUseBeep () == y.getUseBeep ()))
        return false;

      if (!(x.getAppSound () == y.getAppSound ()))
        return false;

      if (!(x.getSoundConfigurations () == y.getSoundConfigurations ()))
        return false;

      return true;
    }

    bool
    operator!= (const SoundOutput& x, const SoundOutput& y)
    {
      return !(x == y);
    }

    // SoundConfigurations
    //

    SoundConfigurations::
    SoundConfigurations ()
    : ::Smartmatic::ConfigurationTypes::Type (),
      SoundFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      Name_ (::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SoundConfigurations::
    SoundConfigurations (const NameType& Name)
    : ::Smartmatic::ConfigurationTypes::Type (),
      SoundFile_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      SoundConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
      Name_ (Name, ::Smartmatic::ConfigurationTypes::Flags (), this)
    {
    }

    SoundConfigurations::
    SoundConfigurations (const SoundConfigurations& x,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
      SoundFile_ (x.SoundFile_, f, this),
      SoundConfiguration_ (x.SoundConfiguration_, f, this),
      Name_ (x.Name_, f, this)
    {
    }

    SoundConfigurations::
    SoundConfigurations (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
    : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
      SoundFile_ (f, this),
      SoundConfiguration_ (f, this),
      Name_ (f, this)
    {
      if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SoundConfigurations::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::Smartmatic::ConfigurationTypes::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // SoundFile
        //
        if (n.name () == "SoundFile" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< SoundFileType > r (
            SoundFileTraits::create (i, f, this));

          if (!this->SoundFile_)
          {
            this->SoundFile_.set (r);
            continue;
          }
        }

        // SoundConfiguration
        //
        if (n.name () == "SoundConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< SoundConfigurationType > r (
            SoundConfigurationTraits::create (i, f, this));

          this->SoundConfiguration_.push_back (r);
          continue;
        }

        // Name
        //
        if (n.name () == "Name" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
        {
          ::std::auto_ptr< NameType > r (
            NameTraits::create (i, f, this));

          if (!Name_.present ())
          {
            this->Name_.set (r);
            continue;
          }
        }

        break;
      }

      if (!Name_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Name",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }
    }

    SoundConfigurations* SoundConfigurations::
    _clone (::Smartmatic::ConfigurationTypes::Flags f,
            ::Smartmatic::ConfigurationTypes::Container* c) const
    {
      return new class SoundConfigurations (*this, f, c);
    }

    SoundConfigurations::
    ~SoundConfigurations ()
    {
    }

    bool
    operator== (const SoundConfigurations& x, const SoundConfigurations& y)
    {
      if (!(x.getSoundFile () == y.getSoundFile ()))
        return false;

      if (!(x.getSoundConfiguration () == y.getSoundConfiguration ()))
        return false;

      if (!(x.getName () == y.getName ()))
        return false;

      return true;
    }

    bool
    operator!= (const SoundConfigurations& x, const SoundConfigurations& y)
    {
      return !(x == y);
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::std::string& u,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
        ::Smartmatic::Configuration::parseSmartmaticConfiguration (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::std::string& u,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
        ::Smartmatic::Configuration::parseSmartmaticConfiguration (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
        ::Smartmatic::Configuration::parseSmartmaticConfiguration (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Smartmatic::Configuration::parseSmartmaticConfiguration (isrc, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Smartmatic::Configuration::parseSmartmaticConfiguration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::Smartmatic::Configuration::parseSmartmaticConfiguration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Smartmatic::Configuration::parseSmartmaticConfiguration (isrc, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
        (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Smartmatic::Configuration::parseSmartmaticConfiguration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::Smartmatic::Configuration::parseSmartmaticConfiguration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::xercesc::InputSource& i,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
        ::Smartmatic::Configuration::parseSmartmaticConfiguration (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::xercesc::InputSource& i,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
        ::Smartmatic::Configuration::parseSmartmaticConfiguration (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
        ::Smartmatic::Configuration::parseSmartmaticConfiguration (
          d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p)
    {
      if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
          ::Smartmatic::Configuration::parseSmartmaticConfiguration (
            c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SmartmaticConfiguration" &&
          n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
      {
        ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
          ::xsd::cxx::tree::traits< ::Smartmatic::Configuration::SmartmaticConfiguration, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SmartmaticConfiguration",
        "http://www.smartmatic.com/SmartmaticConfiguration");
    }

    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  const ::Smartmatic::ConfigurationTypes::Properties&)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
         !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
        doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "SmartmaticConfiguration" &&
          n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
      {
        ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration > r (
          ::xsd::cxx::tree::traits< ::Smartmatic::Configuration::SmartmaticConfiguration, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SmartmaticConfiguration",
        "http://www.smartmatic.com/SmartmaticConfiguration");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    void
    operator<< (::xercesc::DOMElement& e, const SmartmaticConfiguration& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // ResourcePaths
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ResourcePaths",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getResourcePaths ();
      }

      // ImageResources
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ImageResources",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getImageResources ();
      }

      // SoundOutput
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SoundOutput",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getSoundOutput ();
      }
    }

    void
    serializeSmartmaticConfiguration (::std::ostream& o,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeSmartmaticConfiguration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSmartmaticConfiguration (::std::ostream& o,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeSmartmaticConfiguration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSmartmaticConfiguration (::std::ostream& o,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeSmartmaticConfiguration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSmartmaticConfiguration (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeSmartmaticConfiguration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serializeSmartmaticConfiguration (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeSmartmaticConfiguration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSmartmaticConfiguration (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::Smartmatic::Configuration::serializeSmartmaticConfiguration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serializeSmartmaticConfiguration (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      ::Smartmatic::ConfigurationTypes::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "SmartmaticConfiguration" &&
          n.namespace_ () == "http://www.smartmatic.com/SmartmaticConfiguration")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SmartmaticConfiguration",
          "http://www.smartmatic.com/SmartmaticConfiguration");
      }
    }

    ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
    serializeSmartmaticConfiguration (const ::Smartmatic::Configuration::SmartmaticConfiguration& s,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                      ::Smartmatic::ConfigurationTypes::Flags f)
    {
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SmartmaticConfiguration",
          "http://www.smartmatic.com/SmartmaticConfiguration",
          m, f));

      ::Smartmatic::Configuration::serializeSmartmaticConfiguration (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SoundDescriptorConfiguration& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // frequency
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "frequency",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getFrequency ();
      }

      // time
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "time",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getTime ();
      }

      // repetitions
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "repetitions",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getRepetitions ();
      }

      // timeBetweenRepetitions
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "timeBetweenRepetitions",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getTimeBetweenRepetitions ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ResourcePaths& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // ResourcePath
      //
      for (ResourcePaths::ResourcePathConstIterator
           b (i.getResourcePath ().begin ()), n (i.getResourcePath ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ResourcePath",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ImageResources& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // StoreInMemory
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "StoreInMemory",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getStoreInMemory ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SoundOutput& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // UseBeep
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "UseBeep",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getUseBeep ();
      }

      // AppSound
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "AppSound",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getAppSound ();
      }

      // SoundConfigurations
      //
      for (SoundOutput::SoundConfigurationsConstIterator
           b (i.getSoundConfigurations ().begin ()), n (i.getSoundConfigurations ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SoundConfigurations",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SoundConfigurations& i)
    {
      e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

      // SoundFile
      //
      if (i.getSoundFile ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SoundFile",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << *i.getSoundFile ();
      }

      // SoundConfiguration
      //
      for (SoundConfigurations::SoundConfigurationConstIterator
           b (i.getSoundConfiguration ().begin ()), n (i.getSoundConfiguration ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "SoundConfiguration",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << *b;
      }

      // Name
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "Name",
            "http://www.smartmatic.com/SmartmaticConfiguration",
            e));

        s << i.getName ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

