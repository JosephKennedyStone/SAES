// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SmartmaticConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SMARTMATIC_CONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SMARTMATIC_CONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
   * schema namespace.
   */
  namespace ConfigurationTypes
  {
    // anyType and anySimpleType.
    //

    /**
     * @brief C++ type corresponding to the anyType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::type Type;

    /**
     * @brief C++ type corresponding to the anySimpleType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

    /**
     * @brief Alias for the anyType type.
     */
    typedef ::xsd::cxx::tree::type Container;


    // 8-bit
    //

    /**
     * @brief C++ type corresponding to the byte XML Schema
     * built-in type.
     */
    typedef signed char Byte;

    /**
     * @brief C++ type corresponding to the unsignedByte XML Schema
     * built-in type.
     */
    typedef unsigned char UnsignedByte;


    // 16-bit
    //

    /**
     * @brief C++ type corresponding to the short XML Schema
     * built-in type.
     */
    typedef short Short;

    /**
     * @brief C++ type corresponding to the unsignedShort XML Schema
     * built-in type.
     */
    typedef unsigned short UnsignedShort;


    // 32-bit
    //

    /**
     * @brief C++ type corresponding to the int XML Schema
     * built-in type.
     */
    typedef int Int;

    /**
     * @brief C++ type corresponding to the unsignedInt XML Schema
     * built-in type.
     */
    typedef unsigned int UnsignedInt;


    // 64-bit
    //

    /**
     * @brief C++ type corresponding to the long XML Schema
     * built-in type.
     */
    typedef long long Long;

    /**
     * @brief C++ type corresponding to the unsignedLong XML Schema
     * built-in type.
     */
    typedef unsigned long long UnsignedLong;


    // Supposed to be arbitrary-length integral types.
    //

    /**
     * @brief C++ type corresponding to the integer XML Schema
     * built-in type.
     */
    typedef long long Integer;

    /**
     * @brief C++ type corresponding to the nonPositiveInteger XML Schema
     * built-in type.
     */
    typedef long long NonPositiveInteger;

    /**
     * @brief C++ type corresponding to the nonNegativeInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long NonNegativeInteger;

    /**
     * @brief C++ type corresponding to the positiveInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long PositiveInteger;

    /**
     * @brief C++ type corresponding to the negativeInteger XML Schema
     * built-in type.
     */
    typedef long long NegativeInteger;


    // Boolean.
    //

    /**
     * @brief C++ type corresponding to the boolean XML Schema
     * built-in type.
     */
    typedef bool Boolean;


    // Floating-point types.
    //

    /**
     * @brief C++ type corresponding to the float XML Schema
     * built-in type.
     */
    typedef float Float;

    /**
     * @brief C++ type corresponding to the double XML Schema
     * built-in type.
     */
    typedef double Double;

    /**
     * @brief C++ type corresponding to the decimal XML Schema
     * built-in type.
     */
    typedef double Decimal;


    // String types.
    //

    /**
     * @brief C++ type corresponding to the string XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::string< char, SimpleType > String;

    /**
     * @brief C++ type corresponding to the normalizedString XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

    /**
     * @brief C++ type corresponding to the token XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

    /**
     * @brief C++ type corresponding to the Name XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::name< char, Token > Name;

    /**
     * @brief C++ type corresponding to the NMTOKEN XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

    /**
     * @brief C++ type corresponding to the NMTOKENS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

    /**
     * @brief C++ type corresponding to the NCName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

    /**
     * @brief C++ type corresponding to the language XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::language< char, Token > Language;


    // ID/IDREF.
    //

    /**
     * @brief C++ type corresponding to the ID XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::id< char, Ncname > Id;

    /**
     * @brief C++ type corresponding to the IDREF XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

    /**
     * @brief C++ type corresponding to the IDREFS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


    // URI.
    //

    /**
     * @brief C++ type corresponding to the anyURI XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


    // Qualified name.
    //

    /**
     * @brief C++ type corresponding to the QName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


    // Binary.
    //

    /**
     * @brief Binary buffer type.
     */
    typedef ::xsd::cxx::tree::buffer< char > Buffer;

    /**
     * @brief C++ type corresponding to the base64Binary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

    /**
     * @brief C++ type corresponding to the hexBinary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


    // Date/time.
    //

    /**
     * @brief Time zone type.
     */
    typedef ::xsd::cxx::tree::time_zone TimeZone;

    /**
     * @brief C++ type corresponding to the date XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

    /**
     * @brief C++ type corresponding to the dateTime XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

    /**
     * @brief C++ type corresponding to the duration XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

    /**
     * @brief C++ type corresponding to the gDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

    /**
     * @brief C++ type corresponding to the gMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

    /**
     * @brief C++ type corresponding to the gMonthDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

    /**
     * @brief C++ type corresponding to the gYear XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

    /**
     * @brief C++ type corresponding to the gYearMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

    /**
     * @brief C++ type corresponding to the time XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


    // Entity.
    //

    /**
     * @brief C++ type corresponding to the ENTITY XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

    /**
     * @brief C++ type corresponding to the ENTITIES XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


    // Namespace information and list stream. Used in
    // serialization functions.
    //
    /**
     * @brief Namespace serialization information.
     */
    typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

    /**
     * @brief Namespace serialization information map.
     */
    typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

    /**
     * @brief List serialization stream.
     */
    typedef ::xsd::cxx::tree::list_stream< char > ListStream;

    /**
     * @brief Serialization wrapper for the %double type.
     */
    typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

    /**
     * @brief Serialization wrapper for the %decimal type.
     */
    typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

    /**
     * @brief Simple type facet.
     */
    typedef ::xsd::cxx::tree::facet Facet;

    // Flags and properties.
    //

    /**
     * @brief Parsing and serialization flags.
     */
    typedef ::xsd::cxx::tree::flags Flags;

    /**
     * @brief Parsing properties.
     */
    typedef ::xsd::cxx::tree::properties< char > Properties;

    // Parsing/serialization diagnostics.
    //

    /**
     * @brief Error severity.
     */
    typedef ::xsd::cxx::tree::severity Severity;

    /**
     * @brief Error condition.
     */
    typedef ::xsd::cxx::tree::error< char > Error;

    /**
     * @brief List of %error conditions.
     */
    typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

    // Exceptions.
    //

    /**
     * @brief Root of the C++/Tree %exception hierarchy.
     */
    typedef ::xsd::cxx::tree::exception< char > Exception;

    /**
     * @brief Exception indicating that the size argument exceeds
     * the capacity argument.
     */
    typedef ::xsd::cxx::tree::bounds< char > Bounds;

    /**
     * @brief Exception indicating that a duplicate ID value
     * was encountered in the object model.
     */
    typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

    /**
     * @brief Exception indicating a parsing failure.
     */
    typedef ::xsd::cxx::tree::parsing< char > Parsing;

    /**
     * @brief Exception indicating that an expected element
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

    /**
     * @brief Exception indicating that an unexpected element
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

    /**
     * @brief Exception indicating that an expected attribute
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

    /**
     * @brief Exception indicating that an unexpected enumerator
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

    /**
     * @brief Exception indicating that the text content was
     * expected for an element.
     */
    typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

    /**
     * @brief Exception indicating that a prefix-namespace
     * mapping was not provided.
     */
    typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

    /**
     * @brief Exception indicating a serialization failure.
     */
    typedef ::xsd::cxx::tree::serialization< char > Serialization;

    /**
     * @brief Error handler callback interface.
     */
    typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

    /**
     * @brief DOM interaction.
     */
    namespace dom
    {
      /**
       * @brief Automatic pointer for DOMDocument.
       */
      using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
      /**
       * @brief DOM user data key for back pointers to tree nodes.
       */
      const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace Configuration
  {
    class SmartmaticConfiguration;
    class SoundDescriptorConfiguration;
    class ResourcePaths;
    class ImageResources;
    class SoundOutput;
    class SoundConfigurations;
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.smartmatic.com/SmartmaticConfiguration
   * schema namespace.
   */
  namespace Configuration
  {
    /**
     * @brief Class corresponding to the %SmartmaticConfiguration schema type.
     *
     * @nosubgrouping
     */
    class SmartmaticConfiguration: public ::Smartmatic::ConfigurationTypes::Type
    {
      public:
      /**
       * @name ResourcePaths
       *
       * @brief Accessor and modifier functions for the %ResourcePaths
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::Configuration::ResourcePaths ResourcePathsType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ResourcePathsType, char > ResourcePathsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ResourcePathsType&
      getResourcePaths () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ResourcePathsType&
      getResourcePaths ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setResourcePaths (const ResourcePathsType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      setResourcePaths (::std::auto_ptr< ResourcePathsType > p);

      //@}

      /**
       * @name ImageResources
       *
       * @brief Accessor and modifier functions for the %ImageResources
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::Configuration::ImageResources ImageResourcesType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ImageResourcesType, char > ImageResourcesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ImageResourcesType&
      getImageResources () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ImageResourcesType&
      getImageResources ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setImageResources (const ImageResourcesType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      setImageResources (::std::auto_ptr< ImageResourcesType > p);

      //@}

      /**
       * @name SoundOutput
       *
       * @brief Accessor and modifier functions for the %SoundOutput
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::Configuration::SoundOutput SoundOutputType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SoundOutputType, char > SoundOutputTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SoundOutputType&
      getSoundOutput () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SoundOutputType&
      getSoundOutput ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setSoundOutput (const SoundOutputType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      setSoundOutput (::std::auto_ptr< SoundOutputType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      SmartmaticConfiguration ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SmartmaticConfiguration (const ResourcePathsType&,
                               const ImageResourcesType&,
                               const SoundOutputType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (auto_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      SmartmaticConfiguration (::std::auto_ptr< ResourcePathsType >&,
                               ::std::auto_ptr< ImageResourcesType >&,
                               ::std::auto_ptr< SoundOutputType >&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SmartmaticConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SmartmaticConfiguration (const SmartmaticConfiguration& x,
                               ::Smartmatic::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SmartmaticConfiguration*
      _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
              ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SmartmaticConfiguration ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::Smartmatic::ConfigurationTypes::Flags);

      protected:
      ::xsd::cxx::tree::one< ResourcePathsType > ResourcePaths_;
      ::xsd::cxx::tree::one< ImageResourcesType > ImageResources_;
      ::xsd::cxx::tree::one< SoundOutputType > SoundOutput_;

      //@endcond
    };

    bool
    operator== (const SmartmaticConfiguration&, const SmartmaticConfiguration&);

    bool
    operator!= (const SmartmaticConfiguration&, const SmartmaticConfiguration&);


    /**
     * @brief Class corresponding to the %SoundDescriptorConfiguration schema type.
     *
     * @nosubgrouping
     */
    class SoundDescriptorConfiguration: public ::Smartmatic::ConfigurationTypes::Type
    {
      public:
      /**
       * @name frequency
       *
       * @brief Accessor and modifier functions for the %frequency
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::Integer FrequencyType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FrequencyType, char > FrequencyTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FrequencyType&
      getFrequency () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FrequencyType&
      getFrequency ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setFrequency (const FrequencyType& x);

      //@}

      /**
       * @name time
       *
       * @brief Accessor and modifier functions for the %time
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::Integer TimeType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< TimeType, char > TimeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const TimeType&
      getTime () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      TimeType&
      getTime ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setTime (const TimeType& x);

      //@}

      /**
       * @name repetitions
       *
       * @brief Accessor and modifier functions for the %repetitions
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::Integer RepetitionsType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RepetitionsType, char > RepetitionsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const RepetitionsType&
      getRepetitions () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      RepetitionsType&
      getRepetitions ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setRepetitions (const RepetitionsType& x);

      //@}

      /**
       * @name timeBetweenRepetitions
       *
       * @brief Accessor and modifier functions for the %timeBetweenRepetitions
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::Integer TimeBetweenRepetitionsType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< TimeBetweenRepetitionsType, char > TimeBetweenRepetitionsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const TimeBetweenRepetitionsType&
      getTimeBetweenRepetitions () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      TimeBetweenRepetitionsType&
      getTimeBetweenRepetitions ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setTimeBetweenRepetitions (const TimeBetweenRepetitionsType& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      SoundDescriptorConfiguration ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SoundDescriptorConfiguration (const FrequencyType&,
                                    const TimeType&,
                                    const RepetitionsType&,
                                    const TimeBetweenRepetitionsType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SoundDescriptorConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SoundDescriptorConfiguration (const SoundDescriptorConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SoundDescriptorConfiguration*
      _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
              ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SoundDescriptorConfiguration ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::Smartmatic::ConfigurationTypes::Flags);

      protected:
      ::xsd::cxx::tree::one< FrequencyType > frequency_;
      ::xsd::cxx::tree::one< TimeType > time_;
      ::xsd::cxx::tree::one< RepetitionsType > repetitions_;
      ::xsd::cxx::tree::one< TimeBetweenRepetitionsType > timeBetweenRepetitions_;

      //@endcond
    };

    bool
    operator== (const SoundDescriptorConfiguration&, const SoundDescriptorConfiguration&);

    bool
    operator!= (const SoundDescriptorConfiguration&, const SoundDescriptorConfiguration&);


    /**
     * @brief Class corresponding to the %ResourcePaths schema type.
     *
     * @nosubgrouping
     */
    class ResourcePaths: public ::Smartmatic::ConfigurationTypes::Type
    {
      public:
      /**
       * @name ResourcePath
       *
       * @brief Accessor and modifier functions for the %ResourcePath
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::String ResourcePathType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ResourcePathType > ResourcePathSequence;

      /**
       * @brief Element iterator type.
       */
      typedef ResourcePathSequence::iterator ResourcePathIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ResourcePathSequence::const_iterator ResourcePathConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ResourcePathType, char > ResourcePathTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ResourcePathSequence&
      getResourcePath () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ResourcePathSequence&
      getResourcePath ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      setResourcePath (const ResourcePathSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ResourcePaths ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ResourcePaths (const ::xercesc::DOMElement& e,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ResourcePaths (const ResourcePaths& x,
                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ResourcePaths*
      _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
              ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ResourcePaths ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::Smartmatic::ConfigurationTypes::Flags);

      protected:
      ResourcePathSequence ResourcePath_;

      //@endcond
    };

    bool
    operator== (const ResourcePaths&, const ResourcePaths&);

    bool
    operator!= (const ResourcePaths&, const ResourcePaths&);


    /**
     * @brief Class corresponding to the %ImageResources schema type.
     *
     * @nosubgrouping
     */
    class ImageResources: public ::Smartmatic::ConfigurationTypes::Type
    {
      public:
      /**
       * @name StoreInMemory
       *
       * @brief Accessor and modifier functions for the %StoreInMemory
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::Boolean StoreInMemoryType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< StoreInMemoryType, char > StoreInMemoryTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const StoreInMemoryType&
      getStoreInMemory () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      StoreInMemoryType&
      getStoreInMemory ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setStoreInMemory (const StoreInMemoryType& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      ImageResources ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ImageResources (const StoreInMemoryType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ImageResources (const ::xercesc::DOMElement& e,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ImageResources (const ImageResources& x,
                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ImageResources*
      _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
              ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ImageResources ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::Smartmatic::ConfigurationTypes::Flags);

      protected:
      ::xsd::cxx::tree::one< StoreInMemoryType > StoreInMemory_;

      //@endcond
    };

    bool
    operator== (const ImageResources&, const ImageResources&);

    bool
    operator!= (const ImageResources&, const ImageResources&);


    /**
     * @brief Class corresponding to the %SoundOutput schema type.
     *
     * @nosubgrouping
     */
    class SoundOutput: public ::Smartmatic::ConfigurationTypes::Type
    {
      public:
      /**
       * @name UseBeep
       *
       * @brief Accessor and modifier functions for the %UseBeep
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::Boolean UseBeepType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< UseBeepType, char > UseBeepTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const UseBeepType&
      getUseBeep () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      UseBeepType&
      getUseBeep ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setUseBeep (const UseBeepType& x);

      //@}

      /**
       * @name AppSound
       *
       * @brief Accessor and modifier functions for the %AppSound
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::String AppSoundType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AppSoundType, char > AppSoundTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const AppSoundType&
      getAppSound () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      AppSoundType&
      getAppSound ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setAppSound (const AppSoundType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      setAppSound (::std::auto_ptr< AppSoundType > p);

      //@}

      /**
       * @name SoundConfigurations
       *
       * @brief Accessor and modifier functions for the %SoundConfigurations
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::Configuration::SoundConfigurations SoundConfigurationsType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< SoundConfigurationsType > SoundConfigurationsSequence;

      /**
       * @brief Element iterator type.
       */
      typedef SoundConfigurationsSequence::iterator SoundConfigurationsIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef SoundConfigurationsSequence::const_iterator SoundConfigurationsConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SoundConfigurationsType, char > SoundConfigurationsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const SoundConfigurationsSequence&
      getSoundConfigurations () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      SoundConfigurationsSequence&
      getSoundConfigurations ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      setSoundConfigurations (const SoundConfigurationsSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      SoundOutput ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SoundOutput (const UseBeepType&,
                   const AppSoundType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SoundOutput (const ::xercesc::DOMElement& e,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SoundOutput (const SoundOutput& x,
                   ::Smartmatic::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SoundOutput*
      _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
              ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SoundOutput ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::Smartmatic::ConfigurationTypes::Flags);

      protected:
      ::xsd::cxx::tree::one< UseBeepType > UseBeep_;
      ::xsd::cxx::tree::one< AppSoundType > AppSound_;
      SoundConfigurationsSequence SoundConfigurations_;

      //@endcond
    };

    bool
    operator== (const SoundOutput&, const SoundOutput&);

    bool
    operator!= (const SoundOutput&, const SoundOutput&);


    /**
     * @brief Class corresponding to the %SoundConfigurations schema type.
     *
     * @nosubgrouping
     */
    class SoundConfigurations: public ::Smartmatic::ConfigurationTypes::Type
    {
      public:
      /**
       * @name SoundFile
       *
       * @brief Accessor and modifier functions for the %SoundFile
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::String SoundFileType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SoundFileType > SoundFileOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SoundFileType, char > SoundFileTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SoundFileOptional&
      getSoundFile () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SoundFileOptional&
      getSoundFile ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setSoundFile (const SoundFileType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      setSoundFile (const SoundFileOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      setSoundFile (::std::auto_ptr< SoundFileType > p);

      //@}

      /**
       * @name SoundConfiguration
       *
       * @brief Accessor and modifier functions for the %SoundConfiguration
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::Configuration::SoundDescriptorConfiguration SoundConfigurationType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< SoundConfigurationType > SoundConfigurationSequence;

      /**
       * @brief Element iterator type.
       */
      typedef SoundConfigurationSequence::iterator SoundConfigurationIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef SoundConfigurationSequence::const_iterator SoundConfigurationConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SoundConfigurationType, char > SoundConfigurationTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const SoundConfigurationSequence&
      getSoundConfiguration () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      SoundConfigurationSequence&
      getSoundConfiguration ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      setSoundConfiguration (const SoundConfigurationSequence& s);

      //@}

      /**
       * @name Name
       *
       * @brief Accessor and modifier functions for the %Name
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::Smartmatic::ConfigurationTypes::String NameType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const NameType&
      getName () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      NameType&
      getName ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      setName (const NameType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      setName (::std::auto_ptr< NameType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Default constructor.
       *
       * Note that this constructor leaves required elements and
       * attributes uninitialized.
       */
      SoundConfigurations ();

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SoundConfigurations (const NameType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SoundConfigurations (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SoundConfigurations (const SoundConfigurations& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SoundConfigurations*
      _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
              ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SoundConfigurations ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::Smartmatic::ConfigurationTypes::Flags);

      protected:
      SoundFileOptional SoundFile_;
      SoundConfigurationSequence SoundConfiguration_;
      ::xsd::cxx::tree::one< NameType > Name_;

      //@endcond
    };

    bool
    operator== (const SoundConfigurations&, const SoundConfigurations&);

    bool
    operator!= (const SoundConfigurations&, const SoundConfigurations&);
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace Configuration
  {
    /**
     * @name Parsing functions for the %SmartmaticConfiguration document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::std::string& uri,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::std::string& uri,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  const ::std::string& id,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  const ::std::string& id,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source.
     *
     * @param is A Xerces-C++ input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::xercesc::InputSource& is,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source with an error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::xercesc::InputSource& is,
                                  ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    ::std::auto_ptr< ::Smartmatic::Configuration::SmartmaticConfiguration >
    parseSmartmaticConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace Configuration
  {
    void
    operator<< (::xercesc::DOMElement&, const SmartmaticConfiguration&);

    /**
     * @name Serialization functions for the %SmartmaticConfiguration document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    serializeSmartmaticConfiguration (::std::ostream& os,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    serializeSmartmaticConfiguration (::std::ostream& os,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    serializeSmartmaticConfiguration (::std::ostream& os,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    serializeSmartmaticConfiguration (::xercesc::XMLFormatTarget& ft,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    serializeSmartmaticConfiguration (::xercesc::XMLFormatTarget& ft,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    serializeSmartmaticConfiguration (::xercesc::XMLFormatTarget& ft,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    void
    serializeSmartmaticConfiguration (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::Configuration::SmartmaticConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
    serializeSmartmaticConfiguration (const ::Smartmatic::Configuration::SmartmaticConfiguration& x, 
                                      const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0);

    //@}

    void
    operator<< (::xercesc::DOMElement&, const SoundDescriptorConfiguration&);

    void
    operator<< (::xercesc::DOMElement&, const ResourcePaths&);

    void
    operator<< (::xercesc::DOMElement&, const ImageResources&);

    void
    operator<< (::xercesc::DOMElement&, const SoundOutput&);

    void
    operator<< (::xercesc::DOMElement&, const SoundConfigurations&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SMARTMATIC_CONFIGURATION_SCHEMA_HXX
