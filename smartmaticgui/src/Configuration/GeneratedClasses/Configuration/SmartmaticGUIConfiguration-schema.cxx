// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SmartmaticGUIConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      // SmartmaticGUIConfiguration
      // 

      const SmartmaticGUIConfiguration::BasicWindowConfigurationType& SmartmaticGUIConfiguration::
      getBasicWindowConfiguration () const
      {
        return this->BasicWindowConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::BasicWindowConfigurationType& SmartmaticGUIConfiguration::
      getBasicWindowConfiguration ()
      {
        return this->BasicWindowConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setBasicWindowConfiguration (const BasicWindowConfigurationType& x)
      {
        this->BasicWindowConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setBasicWindowConfiguration (::std::auto_ptr< BasicWindowConfigurationType > x)
      {
        this->BasicWindowConfiguration_.set (x);
      }

      const SmartmaticGUIConfiguration::EventSoundsConfigurationType& SmartmaticGUIConfiguration::
      getEventSoundsConfiguration () const
      {
        return this->EventSoundsConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::EventSoundsConfigurationType& SmartmaticGUIConfiguration::
      getEventSoundsConfiguration ()
      {
        return this->EventSoundsConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setEventSoundsConfiguration (const EventSoundsConfigurationType& x)
      {
        this->EventSoundsConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setEventSoundsConfiguration (::std::auto_ptr< EventSoundsConfigurationType > x)
      {
        this->EventSoundsConfiguration_.set (x);
      }

      const SmartmaticGUIConfiguration::ButtonLabelSizeConfigurationType& SmartmaticGUIConfiguration::
      getButtonLabelSizeConfiguration () const
      {
        return this->ButtonLabelSizeConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::ButtonLabelSizeConfigurationType& SmartmaticGUIConfiguration::
      getButtonLabelSizeConfiguration ()
      {
        return this->ButtonLabelSizeConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setButtonLabelSizeConfiguration (const ButtonLabelSizeConfigurationType& x)
      {
        this->ButtonLabelSizeConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setButtonLabelSizeConfiguration (::std::auto_ptr< ButtonLabelSizeConfigurationType > x)
      {
        this->ButtonLabelSizeConfiguration_.set (x);
      }

      const SmartmaticGUIConfiguration::AZERTYKeyboardWidgetConfigurationType& SmartmaticGUIConfiguration::
      getAZERTYKeyboardWidgetConfiguration () const
      {
        return this->AZERTYKeyboardWidgetConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::AZERTYKeyboardWidgetConfigurationType& SmartmaticGUIConfiguration::
      getAZERTYKeyboardWidgetConfiguration ()
      {
        return this->AZERTYKeyboardWidgetConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setAZERTYKeyboardWidgetConfiguration (const AZERTYKeyboardWidgetConfigurationType& x)
      {
        this->AZERTYKeyboardWidgetConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setAZERTYKeyboardWidgetConfiguration (::std::auto_ptr< AZERTYKeyboardWidgetConfigurationType > x)
      {
        this->AZERTYKeyboardWidgetConfiguration_.set (x);
      }

      const SmartmaticGUIConfiguration::EntryPassPhraseConfigurationType& SmartmaticGUIConfiguration::
      getEntryPassPhraseConfiguration () const
      {
        return this->EntryPassPhraseConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::EntryPassPhraseConfigurationType& SmartmaticGUIConfiguration::
      getEntryPassPhraseConfiguration ()
      {
        return this->EntryPassPhraseConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setEntryPassPhraseConfiguration (const EntryPassPhraseConfigurationType& x)
      {
        this->EntryPassPhraseConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setEntryPassPhraseConfiguration (::std::auto_ptr< EntryPassPhraseConfigurationType > x)
      {
        this->EntryPassPhraseConfiguration_.set (x);
      }

      const SmartmaticGUIConfiguration::ButtonsQuestionConfigurationType& SmartmaticGUIConfiguration::
      getButtonsQuestionConfiguration () const
      {
        return this->ButtonsQuestionConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::ButtonsQuestionConfigurationType& SmartmaticGUIConfiguration::
      getButtonsQuestionConfiguration ()
      {
        return this->ButtonsQuestionConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setButtonsQuestionConfiguration (const ButtonsQuestionConfigurationType& x)
      {
        this->ButtonsQuestionConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setButtonsQuestionConfiguration (::std::auto_ptr< ButtonsQuestionConfigurationType > x)
      {
        this->ButtonsQuestionConfiguration_.set (x);
      }

      const SmartmaticGUIConfiguration::GenderConfigurationType& SmartmaticGUIConfiguration::
      getGenderConfiguration () const
      {
        return this->GenderConfiguration_.get ();
      }

      SmartmaticGUIConfiguration::GenderConfigurationType& SmartmaticGUIConfiguration::
      getGenderConfiguration ()
      {
        return this->GenderConfiguration_.get ();
      }

      void SmartmaticGUIConfiguration::
      setGenderConfiguration (const GenderConfigurationType& x)
      {
        this->GenderConfiguration_.set (x);
      }

      void SmartmaticGUIConfiguration::
      setGenderConfiguration (::std::auto_ptr< GenderConfigurationType > x)
      {
        this->GenderConfiguration_.set (x);
      }


      // BasicWindowConfiguration
      // 

      const BasicWindowConfiguration::HeightType& BasicWindowConfiguration::
      getHeight () const
      {
        return this->Height_.get ();
      }

      BasicWindowConfiguration::HeightType& BasicWindowConfiguration::
      getHeight ()
      {
        return this->Height_.get ();
      }

      void BasicWindowConfiguration::
      setHeight (const HeightType& x)
      {
        this->Height_.set (x);
      }

      const BasicWindowConfiguration::WidthType& BasicWindowConfiguration::
      getWidth () const
      {
        return this->Width_.get ();
      }

      BasicWindowConfiguration::WidthType& BasicWindowConfiguration::
      getWidth ()
      {
        return this->Width_.get ();
      }

      void BasicWindowConfiguration::
      setWidth (const WidthType& x)
      {
        this->Width_.set (x);
      }

      const BasicWindowConfiguration::HeaderHeightType& BasicWindowConfiguration::
      getHeaderHeight () const
      {
        return this->HeaderHeight_.get ();
      }

      BasicWindowConfiguration::HeaderHeightType& BasicWindowConfiguration::
      getHeaderHeight ()
      {
        return this->HeaderHeight_.get ();
      }

      void BasicWindowConfiguration::
      setHeaderHeight (const HeaderHeightType& x)
      {
        this->HeaderHeight_.set (x);
      }

      const BasicWindowConfiguration::TitleHeightType& BasicWindowConfiguration::
      getTitleHeight () const
      {
        return this->TitleHeight_.get ();
      }

      BasicWindowConfiguration::TitleHeightType& BasicWindowConfiguration::
      getTitleHeight ()
      {
        return this->TitleHeight_.get ();
      }

      void BasicWindowConfiguration::
      setTitleHeight (const TitleHeightType& x)
      {
        this->TitleHeight_.set (x);
      }

      const BasicWindowConfiguration::BottomHeightType& BasicWindowConfiguration::
      getBottomHeight () const
      {
        return this->BottomHeight_.get ();
      }

      BasicWindowConfiguration::BottomHeightType& BasicWindowConfiguration::
      getBottomHeight ()
      {
        return this->BottomHeight_.get ();
      }

      void BasicWindowConfiguration::
      setBottomHeight (const BottomHeightType& x)
      {
        this->BottomHeight_.set (x);
      }

      const BasicWindowConfiguration::HorizontalPaddingType& BasicWindowConfiguration::
      getHorizontalPadding () const
      {
        return this->HorizontalPadding_.get ();
      }

      BasicWindowConfiguration::HorizontalPaddingType& BasicWindowConfiguration::
      getHorizontalPadding ()
      {
        return this->HorizontalPadding_.get ();
      }

      void BasicWindowConfiguration::
      setHorizontalPadding (const HorizontalPaddingType& x)
      {
        this->HorizontalPadding_.set (x);
      }

      const BasicWindowConfiguration::VerticalPaddingType& BasicWindowConfiguration::
      getVerticalPadding () const
      {
        return this->verticalPadding_.get ();
      }

      BasicWindowConfiguration::VerticalPaddingType& BasicWindowConfiguration::
      getVerticalPadding ()
      {
        return this->verticalPadding_.get ();
      }

      void BasicWindowConfiguration::
      setVerticalPadding (const VerticalPaddingType& x)
      {
        this->verticalPadding_.set (x);
      }


      // EventSoundsConfiguration
      // 

      const EventSoundsConfiguration::SmartmaticButtonSoundType& EventSoundsConfiguration::
      getSmartmaticButtonSound () const
      {
        return this->SmartmaticButtonSound_.get ();
      }

      EventSoundsConfiguration::SmartmaticButtonSoundType& EventSoundsConfiguration::
      getSmartmaticButtonSound ()
      {
        return this->SmartmaticButtonSound_.get ();
      }

      void EventSoundsConfiguration::
      setSmartmaticButtonSound (const SmartmaticButtonSoundType& x)
      {
        this->SmartmaticButtonSound_.set (x);
      }

      void EventSoundsConfiguration::
      setSmartmaticButtonSound (::std::auto_ptr< SmartmaticButtonSoundType > x)
      {
        this->SmartmaticButtonSound_.set (x);
      }

      const EventSoundsConfiguration::AzertyKeypadSoundType& EventSoundsConfiguration::
      getAzertyKeypadSound () const
      {
        return this->AzertyKeypadSound_.get ();
      }

      EventSoundsConfiguration::AzertyKeypadSoundType& EventSoundsConfiguration::
      getAzertyKeypadSound ()
      {
        return this->AzertyKeypadSound_.get ();
      }

      void EventSoundsConfiguration::
      setAzertyKeypadSound (const AzertyKeypadSoundType& x)
      {
        this->AzertyKeypadSound_.set (x);
      }

      void EventSoundsConfiguration::
      setAzertyKeypadSound (::std::auto_ptr< AzertyKeypadSoundType > x)
      {
        this->AzertyKeypadSound_.set (x);
      }

      const EventSoundsConfiguration::KeypadSoundType& EventSoundsConfiguration::
      getKeypadSound () const
      {
        return this->KeypadSound_.get ();
      }

      EventSoundsConfiguration::KeypadSoundType& EventSoundsConfiguration::
      getKeypadSound ()
      {
        return this->KeypadSound_.get ();
      }

      void EventSoundsConfiguration::
      setKeypadSound (const KeypadSoundType& x)
      {
        this->KeypadSound_.set (x);
      }

      void EventSoundsConfiguration::
      setKeypadSound (::std::auto_ptr< KeypadSoundType > x)
      {
        this->KeypadSound_.set (x);
      }

      const EventSoundsConfiguration::MenuSoundType& EventSoundsConfiguration::
      getMenuSound () const
      {
        return this->MenuSound_.get ();
      }

      EventSoundsConfiguration::MenuSoundType& EventSoundsConfiguration::
      getMenuSound ()
      {
        return this->MenuSound_.get ();
      }

      void EventSoundsConfiguration::
      setMenuSound (const MenuSoundType& x)
      {
        this->MenuSound_.set (x);
      }

      void EventSoundsConfiguration::
      setMenuSound (::std::auto_ptr< MenuSoundType > x)
      {
        this->MenuSound_.set (x);
      }

      const EventSoundsConfiguration::ConfirmationDialogSoundType& EventSoundsConfiguration::
      getConfirmationDialogSound () const
      {
        return this->ConfirmationDialogSound_.get ();
      }

      EventSoundsConfiguration::ConfirmationDialogSoundType& EventSoundsConfiguration::
      getConfirmationDialogSound ()
      {
        return this->ConfirmationDialogSound_.get ();
      }

      void EventSoundsConfiguration::
      setConfirmationDialogSound (const ConfirmationDialogSoundType& x)
      {
        this->ConfirmationDialogSound_.set (x);
      }

      void EventSoundsConfiguration::
      setConfirmationDialogSound (::std::auto_ptr< ConfirmationDialogSoundType > x)
      {
        this->ConfirmationDialogSound_.set (x);
      }

      const EventSoundsConfiguration::ChooseDialogSoundType& EventSoundsConfiguration::
      getChooseDialogSound () const
      {
        return this->ChooseDialogSound_.get ();
      }

      EventSoundsConfiguration::ChooseDialogSoundType& EventSoundsConfiguration::
      getChooseDialogSound ()
      {
        return this->ChooseDialogSound_.get ();
      }

      void EventSoundsConfiguration::
      setChooseDialogSound (const ChooseDialogSoundType& x)
      {
        this->ChooseDialogSound_.set (x);
      }

      void EventSoundsConfiguration::
      setChooseDialogSound (::std::auto_ptr< ChooseDialogSoundType > x)
      {
        this->ChooseDialogSound_.set (x);
      }


      // ButtonLabelSizeConfiguration
      // 

      const ButtonLabelSizeConfiguration::MenuButtonsType& ButtonLabelSizeConfiguration::
      getMenuButtons () const
      {
        return this->MenuButtons_.get ();
      }

      ButtonLabelSizeConfiguration::MenuButtonsType& ButtonLabelSizeConfiguration::
      getMenuButtons ()
      {
        return this->MenuButtons_.get ();
      }

      void ButtonLabelSizeConfiguration::
      setMenuButtons (const MenuButtonsType& x)
      {
        this->MenuButtons_.set (x);
      }

      const ButtonLabelSizeConfiguration::AllButtonsType& ButtonLabelSizeConfiguration::
      getAllButtons () const
      {
        return this->AllButtons_.get ();
      }

      ButtonLabelSizeConfiguration::AllButtonsType& ButtonLabelSizeConfiguration::
      getAllButtons ()
      {
        return this->AllButtons_.get ();
      }

      void ButtonLabelSizeConfiguration::
      setAllButtons (const AllButtonsType& x)
      {
        this->AllButtons_.set (x);
      }


      // AZERTYKeyboardWidgetConfiguration
      // 

      const AZERTYKeyboardWidgetConfiguration::ShowCharsType& AZERTYKeyboardWidgetConfiguration::
      getShowChars () const
      {
        return this->ShowChars_.get ();
      }

      AZERTYKeyboardWidgetConfiguration::ShowCharsType& AZERTYKeyboardWidgetConfiguration::
      getShowChars ()
      {
        return this->ShowChars_.get ();
      }

      void AZERTYKeyboardWidgetConfiguration::
      setShowChars (const ShowCharsType& x)
      {
        this->ShowChars_.set (x);
      }


      // EntryPassPhraseConfiguration
      // 

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_EntryPassPhraseConfiguration_literals_[v])
      {
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const EntryPassPhraseConfiguration& v,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      EntryPassPhraseConfiguration& EntryPassPhraseConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_EntryPassPhraseConfiguration_literals_[v]);

        return *this;
      }


      // ButtonsQuestionConfiguration
      // 

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration ()
      : ::Smartmatic::ConfigurationTypes::String ()
      {
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (Value v)
      : ::Smartmatic::ConfigurationTypes::String (_xsd_ButtonsQuestionConfiguration_literals_[v])
      {
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const char* v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const ::std::string& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const ::Smartmatic::ConfigurationTypes::String& v)
      : ::Smartmatic::ConfigurationTypes::String (v)
      {
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const ButtonsQuestionConfiguration& v,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (v, f, c)
      {
      }

      ButtonsQuestionConfiguration& ButtonsQuestionConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::ConfigurationTypes::String (_xsd_ButtonsQuestionConfiguration_literals_[v]);

        return *this;
      }


      // GenderConfiguration
      // 

      const GenderConfiguration::FemaleSequence& GenderConfiguration::
      getFemale () const
      {
        return this->Female_;
      }

      GenderConfiguration::FemaleSequence& GenderConfiguration::
      getFemale ()
      {
        return this->Female_;
      }

      void GenderConfiguration::
      setFemale (const FemaleSequence& s)
      {
        this->Female_ = s;
      }

      const GenderConfiguration::MaleSequence& GenderConfiguration::
      getMale () const
      {
        return this->Male_;
      }

      GenderConfiguration::MaleSequence& GenderConfiguration::
      getMale ()
      {
        return this->Male_;
      }

      void GenderConfiguration::
      setMale (const MaleSequence& s)
      {
        this->Male_ = s;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      // SmartmaticGUIConfiguration
      //

      SmartmaticGUIConfiguration::
      SmartmaticGUIConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        BasicWindowConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EventSoundsConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonLabelSizeConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AZERTYKeyboardWidgetConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryPassPhraseConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsQuestionConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        GenderConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SmartmaticGUIConfiguration::
      SmartmaticGUIConfiguration (const BasicWindowConfigurationType& BasicWindowConfiguration,
                                  const EventSoundsConfigurationType& EventSoundsConfiguration,
                                  const ButtonLabelSizeConfigurationType& ButtonLabelSizeConfiguration,
                                  const AZERTYKeyboardWidgetConfigurationType& AZERTYKeyboardWidgetConfiguration,
                                  const EntryPassPhraseConfigurationType& EntryPassPhraseConfiguration,
                                  const ButtonsQuestionConfigurationType& ButtonsQuestionConfiguration,
                                  const GenderConfigurationType& GenderConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        BasicWindowConfiguration_ (BasicWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventSoundsConfiguration_ (EventSoundsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonLabelSizeConfiguration_ (ButtonLabelSizeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AZERTYKeyboardWidgetConfiguration_ (AZERTYKeyboardWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryPassPhraseConfiguration_ (EntryPassPhraseConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsQuestionConfiguration_ (ButtonsQuestionConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        GenderConfiguration_ (GenderConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SmartmaticGUIConfiguration::
      SmartmaticGUIConfiguration (::std::auto_ptr< BasicWindowConfigurationType >& BasicWindowConfiguration,
                                  ::std::auto_ptr< EventSoundsConfigurationType >& EventSoundsConfiguration,
                                  ::std::auto_ptr< ButtonLabelSizeConfigurationType >& ButtonLabelSizeConfiguration,
                                  ::std::auto_ptr< AZERTYKeyboardWidgetConfigurationType >& AZERTYKeyboardWidgetConfiguration,
                                  const EntryPassPhraseConfigurationType& EntryPassPhraseConfiguration,
                                  const ButtonsQuestionConfigurationType& ButtonsQuestionConfiguration,
                                  ::std::auto_ptr< GenderConfigurationType >& GenderConfiguration)
      : ::Smartmatic::ConfigurationTypes::Type (),
        BasicWindowConfiguration_ (BasicWindowConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EventSoundsConfiguration_ (EventSoundsConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonLabelSizeConfiguration_ (ButtonLabelSizeConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AZERTYKeyboardWidgetConfiguration_ (AZERTYKeyboardWidgetConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        EntryPassPhraseConfiguration_ (EntryPassPhraseConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ButtonsQuestionConfiguration_ (ButtonsQuestionConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
        GenderConfiguration_ (GenderConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      SmartmaticGUIConfiguration::
      SmartmaticGUIConfiguration (const SmartmaticGUIConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        BasicWindowConfiguration_ (x.BasicWindowConfiguration_, f, this),
        EventSoundsConfiguration_ (x.EventSoundsConfiguration_, f, this),
        ButtonLabelSizeConfiguration_ (x.ButtonLabelSizeConfiguration_, f, this),
        AZERTYKeyboardWidgetConfiguration_ (x.AZERTYKeyboardWidgetConfiguration_, f, this),
        EntryPassPhraseConfiguration_ (x.EntryPassPhraseConfiguration_, f, this),
        ButtonsQuestionConfiguration_ (x.ButtonsQuestionConfiguration_, f, this),
        GenderConfiguration_ (x.GenderConfiguration_, f, this)
      {
      }

      SmartmaticGUIConfiguration::
      SmartmaticGUIConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f,
                                  ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        BasicWindowConfiguration_ (f, this),
        EventSoundsConfiguration_ (f, this),
        ButtonLabelSizeConfiguration_ (f, this),
        AZERTYKeyboardWidgetConfiguration_ (f, this),
        EntryPassPhraseConfiguration_ (f, this),
        ButtonsQuestionConfiguration_ (f, this),
        GenderConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void SmartmaticGUIConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // BasicWindowConfiguration
          //
          if (n.name () == "BasicWindowConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< BasicWindowConfigurationType > r (
              BasicWindowConfigurationTraits::create (i, f, this));

            if (!BasicWindowConfiguration_.present ())
            {
              this->BasicWindowConfiguration_.set (r);
              continue;
            }
          }

          // EventSoundsConfiguration
          //
          if (n.name () == "EventSoundsConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< EventSoundsConfigurationType > r (
              EventSoundsConfigurationTraits::create (i, f, this));

            if (!EventSoundsConfiguration_.present ())
            {
              this->EventSoundsConfiguration_.set (r);
              continue;
            }
          }

          // ButtonLabelSizeConfiguration
          //
          if (n.name () == "ButtonLabelSizeConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< ButtonLabelSizeConfigurationType > r (
              ButtonLabelSizeConfigurationTraits::create (i, f, this));

            if (!ButtonLabelSizeConfiguration_.present ())
            {
              this->ButtonLabelSizeConfiguration_.set (r);
              continue;
            }
          }

          // AZERTYKeyboardWidgetConfiguration
          //
          if (n.name () == "AZERTYKeyboardWidgetConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< AZERTYKeyboardWidgetConfigurationType > r (
              AZERTYKeyboardWidgetConfigurationTraits::create (i, f, this));

            if (!AZERTYKeyboardWidgetConfiguration_.present ())
            {
              this->AZERTYKeyboardWidgetConfiguration_.set (r);
              continue;
            }
          }

          // EntryPassPhraseConfiguration
          //
          if (n.name () == "EntryPassPhraseConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< EntryPassPhraseConfigurationType > r (
              EntryPassPhraseConfigurationTraits::create (i, f, this));

            if (!EntryPassPhraseConfiguration_.present ())
            {
              this->EntryPassPhraseConfiguration_.set (r);
              continue;
            }
          }

          // ButtonsQuestionConfiguration
          //
          if (n.name () == "ButtonsQuestionConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< ButtonsQuestionConfigurationType > r (
              ButtonsQuestionConfigurationTraits::create (i, f, this));

            if (!ButtonsQuestionConfiguration_.present ())
            {
              this->ButtonsQuestionConfiguration_.set (r);
              continue;
            }
          }

          // GenderConfiguration
          //
          if (n.name () == "GenderConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< GenderConfigurationType > r (
              GenderConfigurationTraits::create (i, f, this));

            if (!GenderConfiguration_.present ())
            {
              this->GenderConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!BasicWindowConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BasicWindowConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!EventSoundsConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EventSoundsConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!ButtonLabelSizeConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonLabelSizeConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!AZERTYKeyboardWidgetConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AZERTYKeyboardWidgetConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!EntryPassPhraseConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EntryPassPhraseConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!ButtonsQuestionConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ButtonsQuestionConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!GenderConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "GenderConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }
      }

      SmartmaticGUIConfiguration* SmartmaticGUIConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class SmartmaticGUIConfiguration (*this, f, c);
      }

      SmartmaticGUIConfiguration::
      ~SmartmaticGUIConfiguration ()
      {
      }

      bool
      operator== (const SmartmaticGUIConfiguration& x, const SmartmaticGUIConfiguration& y)
      {
        if (!(x.getBasicWindowConfiguration () == y.getBasicWindowConfiguration ()))
          return false;

        if (!(x.getEventSoundsConfiguration () == y.getEventSoundsConfiguration ()))
          return false;

        if (!(x.getButtonLabelSizeConfiguration () == y.getButtonLabelSizeConfiguration ()))
          return false;

        if (!(x.getAZERTYKeyboardWidgetConfiguration () == y.getAZERTYKeyboardWidgetConfiguration ()))
          return false;

        if (!(x.getEntryPassPhraseConfiguration () == y.getEntryPassPhraseConfiguration ()))
          return false;

        if (!(x.getButtonsQuestionConfiguration () == y.getButtonsQuestionConfiguration ()))
          return false;

        if (!(x.getGenderConfiguration () == y.getGenderConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const SmartmaticGUIConfiguration& x, const SmartmaticGUIConfiguration& y)
      {
        return !(x == y);
      }

      // BasicWindowConfiguration
      //

      BasicWindowConfiguration::
      BasicWindowConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Height_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Width_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomHeight_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        HorizontalPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        verticalPadding_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BasicWindowConfiguration::
      BasicWindowConfiguration (const HeightType& Height,
                                const WidthType& Width,
                                const HeaderHeightType& HeaderHeight,
                                const TitleHeightType& TitleHeight,
                                const BottomHeightType& BottomHeight,
                                const HorizontalPaddingType& HorizontalPadding,
                                const VerticalPaddingType& verticalPadding)
      : ::Smartmatic::ConfigurationTypes::Type (),
        Height_ (Height, ::Smartmatic::ConfigurationTypes::Flags (), this),
        Width_ (Width, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HeaderHeight_ (HeaderHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        TitleHeight_ (TitleHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        BottomHeight_ (BottomHeight, ::Smartmatic::ConfigurationTypes::Flags (), this),
        HorizontalPadding_ (HorizontalPadding, ::Smartmatic::ConfigurationTypes::Flags (), this),
        verticalPadding_ (verticalPadding, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      BasicWindowConfiguration::
      BasicWindowConfiguration (const BasicWindowConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Height_ (x.Height_, f, this),
        Width_ (x.Width_, f, this),
        HeaderHeight_ (x.HeaderHeight_, f, this),
        TitleHeight_ (x.TitleHeight_, f, this),
        BottomHeight_ (x.BottomHeight_, f, this),
        HorizontalPadding_ (x.HorizontalPadding_, f, this),
        verticalPadding_ (x.verticalPadding_, f, this)
      {
      }

      BasicWindowConfiguration::
      BasicWindowConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Height_ (f, this),
        Width_ (f, this),
        HeaderHeight_ (f, this),
        TitleHeight_ (f, this),
        BottomHeight_ (f, this),
        HorizontalPadding_ (f, this),
        verticalPadding_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void BasicWindowConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!Height_.present ())
            {
              this->Height_.set (HeightTraits::create (i, f, this));
              continue;
            }
          }

          // Width
          //
          if (n.name () == "Width" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!Width_.present ())
            {
              this->Width_.set (WidthTraits::create (i, f, this));
              continue;
            }
          }

          // HeaderHeight
          //
          if (n.name () == "HeaderHeight" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!HeaderHeight_.present ())
            {
              this->HeaderHeight_.set (HeaderHeightTraits::create (i, f, this));
              continue;
            }
          }

          // TitleHeight
          //
          if (n.name () == "TitleHeight" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!TitleHeight_.present ())
            {
              this->TitleHeight_.set (TitleHeightTraits::create (i, f, this));
              continue;
            }
          }

          // BottomHeight
          //
          if (n.name () == "BottomHeight" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!BottomHeight_.present ())
            {
              this->BottomHeight_.set (BottomHeightTraits::create (i, f, this));
              continue;
            }
          }

          // HorizontalPadding
          //
          if (n.name () == "HorizontalPadding" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!HorizontalPadding_.present ())
            {
              this->HorizontalPadding_.set (HorizontalPaddingTraits::create (i, f, this));
              continue;
            }
          }

          // verticalPadding
          //
          if (n.name () == "verticalPadding" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!verticalPadding_.present ())
            {
              this->verticalPadding_.set (VerticalPaddingTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Height_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Height",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!Width_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Width",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!HeaderHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HeaderHeight",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!TitleHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TitleHeight",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!BottomHeight_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BottomHeight",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!HorizontalPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HorizontalPadding",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!verticalPadding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "verticalPadding",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }
      }

      BasicWindowConfiguration* BasicWindowConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class BasicWindowConfiguration (*this, f, c);
      }

      BasicWindowConfiguration::
      ~BasicWindowConfiguration ()
      {
      }

      bool
      operator== (const BasicWindowConfiguration& x, const BasicWindowConfiguration& y)
      {
        if (!(x.getHeight () == y.getHeight ()))
          return false;

        if (!(x.getWidth () == y.getWidth ()))
          return false;

        if (!(x.getHeaderHeight () == y.getHeaderHeight ()))
          return false;

        if (!(x.getTitleHeight () == y.getTitleHeight ()))
          return false;

        if (!(x.getBottomHeight () == y.getBottomHeight ()))
          return false;

        if (!(x.getHorizontalPadding () == y.getHorizontalPadding ()))
          return false;

        if (!(x.getVerticalPadding () == y.getVerticalPadding ()))
          return false;

        return true;
      }

      bool
      operator!= (const BasicWindowConfiguration& x, const BasicWindowConfiguration& y)
      {
        return !(x == y);
      }

      // EventSoundsConfiguration
      //

      EventSoundsConfiguration::
      EventSoundsConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        SmartmaticButtonSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AzertyKeypadSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        KeypadSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        MenuSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ConfirmationDialogSound_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        ChooseDialogSound_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      EventSoundsConfiguration::
      EventSoundsConfiguration (const SmartmaticButtonSoundType& SmartmaticButtonSound,
                                const AzertyKeypadSoundType& AzertyKeypadSound,
                                const KeypadSoundType& KeypadSound,
                                const MenuSoundType& MenuSound,
                                const ConfirmationDialogSoundType& ConfirmationDialogSound,
                                const ChooseDialogSoundType& ChooseDialogSound)
      : ::Smartmatic::ConfigurationTypes::Type (),
        SmartmaticButtonSound_ (SmartmaticButtonSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AzertyKeypadSound_ (AzertyKeypadSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        KeypadSound_ (KeypadSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        MenuSound_ (MenuSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ConfirmationDialogSound_ (ConfirmationDialogSound, ::Smartmatic::ConfigurationTypes::Flags (), this),
        ChooseDialogSound_ (ChooseDialogSound, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      EventSoundsConfiguration::
      EventSoundsConfiguration (const EventSoundsConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        SmartmaticButtonSound_ (x.SmartmaticButtonSound_, f, this),
        AzertyKeypadSound_ (x.AzertyKeypadSound_, f, this),
        KeypadSound_ (x.KeypadSound_, f, this),
        MenuSound_ (x.MenuSound_, f, this),
        ConfirmationDialogSound_ (x.ConfirmationDialogSound_, f, this),
        ChooseDialogSound_ (x.ChooseDialogSound_, f, this)
      {
      }

      EventSoundsConfiguration::
      EventSoundsConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        SmartmaticButtonSound_ (f, this),
        AzertyKeypadSound_ (f, this),
        KeypadSound_ (f, this),
        MenuSound_ (f, this),
        ConfirmationDialogSound_ (f, this),
        ChooseDialogSound_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void EventSoundsConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SmartmaticButtonSound
          //
          if (n.name () == "SmartmaticButtonSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< SmartmaticButtonSoundType > r (
              SmartmaticButtonSoundTraits::create (i, f, this));

            if (!SmartmaticButtonSound_.present ())
            {
              this->SmartmaticButtonSound_.set (r);
              continue;
            }
          }

          // AzertyKeypadSound
          //
          if (n.name () == "AzertyKeypadSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< AzertyKeypadSoundType > r (
              AzertyKeypadSoundTraits::create (i, f, this));

            if (!AzertyKeypadSound_.present ())
            {
              this->AzertyKeypadSound_.set (r);
              continue;
            }
          }

          // KeypadSound
          //
          if (n.name () == "KeypadSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< KeypadSoundType > r (
              KeypadSoundTraits::create (i, f, this));

            if (!KeypadSound_.present ())
            {
              this->KeypadSound_.set (r);
              continue;
            }
          }

          // MenuSound
          //
          if (n.name () == "MenuSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< MenuSoundType > r (
              MenuSoundTraits::create (i, f, this));

            if (!MenuSound_.present ())
            {
              this->MenuSound_.set (r);
              continue;
            }
          }

          // ConfirmationDialogSound
          //
          if (n.name () == "ConfirmationDialogSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< ConfirmationDialogSoundType > r (
              ConfirmationDialogSoundTraits::create (i, f, this));

            if (!ConfirmationDialogSound_.present ())
            {
              this->ConfirmationDialogSound_.set (r);
              continue;
            }
          }

          // ChooseDialogSound
          //
          if (n.name () == "ChooseDialogSound" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< ChooseDialogSoundType > r (
              ChooseDialogSoundTraits::create (i, f, this));

            if (!ChooseDialogSound_.present ())
            {
              this->ChooseDialogSound_.set (r);
              continue;
            }
          }

          break;
        }

        if (!SmartmaticButtonSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SmartmaticButtonSound",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!AzertyKeypadSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AzertyKeypadSound",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!KeypadSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "KeypadSound",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!MenuSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MenuSound",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!ConfirmationDialogSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfirmationDialogSound",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!ChooseDialogSound_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ChooseDialogSound",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }
      }

      EventSoundsConfiguration* EventSoundsConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class EventSoundsConfiguration (*this, f, c);
      }

      EventSoundsConfiguration::
      ~EventSoundsConfiguration ()
      {
      }

      bool
      operator== (const EventSoundsConfiguration& x, const EventSoundsConfiguration& y)
      {
        if (!(x.getSmartmaticButtonSound () == y.getSmartmaticButtonSound ()))
          return false;

        if (!(x.getAzertyKeypadSound () == y.getAzertyKeypadSound ()))
          return false;

        if (!(x.getKeypadSound () == y.getKeypadSound ()))
          return false;

        if (!(x.getMenuSound () == y.getMenuSound ()))
          return false;

        if (!(x.getConfirmationDialogSound () == y.getConfirmationDialogSound ()))
          return false;

        if (!(x.getChooseDialogSound () == y.getChooseDialogSound ()))
          return false;

        return true;
      }

      bool
      operator!= (const EventSoundsConfiguration& x, const EventSoundsConfiguration& y)
      {
        return !(x == y);
      }

      // ButtonLabelSizeConfiguration
      //

      ButtonLabelSizeConfiguration::
      ButtonLabelSizeConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        MenuButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        AllButtons_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ButtonLabelSizeConfiguration::
      ButtonLabelSizeConfiguration (const MenuButtonsType& MenuButtons,
                                    const AllButtonsType& AllButtons)
      : ::Smartmatic::ConfigurationTypes::Type (),
        MenuButtons_ (MenuButtons, ::Smartmatic::ConfigurationTypes::Flags (), this),
        AllButtons_ (AllButtons, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      ButtonLabelSizeConfiguration::
      ButtonLabelSizeConfiguration (const ButtonLabelSizeConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        MenuButtons_ (x.MenuButtons_, f, this),
        AllButtons_ (x.AllButtons_, f, this)
      {
      }

      ButtonLabelSizeConfiguration::
      ButtonLabelSizeConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        MenuButtons_ (f, this),
        AllButtons_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ButtonLabelSizeConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MenuButtons
          //
          if (n.name () == "MenuButtons" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!MenuButtons_.present ())
            {
              this->MenuButtons_.set (MenuButtonsTraits::create (i, f, this));
              continue;
            }
          }

          // AllButtons
          //
          if (n.name () == "AllButtons" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!AllButtons_.present ())
            {
              this->AllButtons_.set (AllButtonsTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!MenuButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MenuButtons",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }

        if (!AllButtons_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AllButtons",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }
      }

      ButtonLabelSizeConfiguration* ButtonLabelSizeConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ButtonLabelSizeConfiguration (*this, f, c);
      }

      ButtonLabelSizeConfiguration::
      ~ButtonLabelSizeConfiguration ()
      {
      }

      bool
      operator== (const ButtonLabelSizeConfiguration& x, const ButtonLabelSizeConfiguration& y)
      {
        if (!(x.getMenuButtons () == y.getMenuButtons ()))
          return false;

        if (!(x.getAllButtons () == y.getAllButtons ()))
          return false;

        return true;
      }

      bool
      operator!= (const ButtonLabelSizeConfiguration& x, const ButtonLabelSizeConfiguration& y)
      {
        return !(x == y);
      }

      // AZERTYKeyboardWidgetConfiguration
      //

      AZERTYKeyboardWidgetConfiguration::
      AZERTYKeyboardWidgetConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowChars_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AZERTYKeyboardWidgetConfiguration::
      AZERTYKeyboardWidgetConfiguration (const ShowCharsType& ShowChars)
      : ::Smartmatic::ConfigurationTypes::Type (),
        ShowChars_ (ShowChars, ::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      AZERTYKeyboardWidgetConfiguration::
      AZERTYKeyboardWidgetConfiguration (const AZERTYKeyboardWidgetConfiguration& x,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        ShowChars_ (x.ShowChars_, f, this)
      {
      }

      AZERTYKeyboardWidgetConfiguration::
      AZERTYKeyboardWidgetConfiguration (const ::xercesc::DOMElement& e,
                                         ::Smartmatic::ConfigurationTypes::Flags f,
                                         ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        ShowChars_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void AZERTYKeyboardWidgetConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ShowChars
          //
          if (n.name () == "ShowChars" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            if (!ShowChars_.present ())
            {
              this->ShowChars_.set (ShowCharsTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ShowChars_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowChars",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }
      }

      AZERTYKeyboardWidgetConfiguration* AZERTYKeyboardWidgetConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class AZERTYKeyboardWidgetConfiguration (*this, f, c);
      }

      AZERTYKeyboardWidgetConfiguration::
      ~AZERTYKeyboardWidgetConfiguration ()
      {
      }

      bool
      operator== (const AZERTYKeyboardWidgetConfiguration& x, const AZERTYKeyboardWidgetConfiguration& y)
      {
        if (!(x.getShowChars () == y.getShowChars ()))
          return false;

        return true;
      }

      bool
      operator!= (const AZERTYKeyboardWidgetConfiguration& x, const AZERTYKeyboardWidgetConfiguration& y)
      {
        return !(x == y);
      }

      // EntryPassPhraseConfiguration
      //

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_EntryPassPhraseConfiguration_convert ();
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const ::xercesc::DOMAttr& a,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_EntryPassPhraseConfiguration_convert ();
      }

      EntryPassPhraseConfiguration::
      EntryPassPhraseConfiguration (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_EntryPassPhraseConfiguration_convert ();
      }

      EntryPassPhraseConfiguration* EntryPassPhraseConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class EntryPassPhraseConfiguration (*this, f, c);
      }

      EntryPassPhraseConfiguration::Value EntryPassPhraseConfiguration::
      _xsd_EntryPassPhraseConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_EntryPassPhraseConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_EntryPassPhraseConfiguration_indexes_,
                          _xsd_EntryPassPhraseConfiguration_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_EntryPassPhraseConfiguration_indexes_ + 3 || _xsd_EntryPassPhraseConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const EntryPassPhraseConfiguration::
      _xsd_EntryPassPhraseConfiguration_literals_[3] =
      {
        "CaseSensitive",
        "UpperCase",
        "LowerCase"
      };

      const EntryPassPhraseConfiguration::Value EntryPassPhraseConfiguration::
      _xsd_EntryPassPhraseConfiguration_indexes_[3] =
      {
        ::Smartmatic::GUI::Configuration::EntryPassPhraseConfiguration::CONFIGURATION_CASESENSITIVE,
        ::Smartmatic::GUI::Configuration::EntryPassPhraseConfiguration::CONFIGURATION_LOWERCASE,
        ::Smartmatic::GUI::Configuration::EntryPassPhraseConfiguration::CONFIGURATION_UPPERCASE
      };

      // ButtonsQuestionConfiguration
      //

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (e, f, c)
      {
        _xsd_ButtonsQuestionConfiguration_convert ();
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const ::xercesc::DOMAttr& a,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (a, f, c)
      {
        _xsd_ButtonsQuestionConfiguration_convert ();
      }

      ButtonsQuestionConfiguration::
      ButtonsQuestionConfiguration (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_ButtonsQuestionConfiguration_convert ();
      }

      ButtonsQuestionConfiguration* ButtonsQuestionConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class ButtonsQuestionConfiguration (*this, f, c);
      }

      ButtonsQuestionConfiguration::Value ButtonsQuestionConfiguration::
      _xsd_ButtonsQuestionConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ButtonsQuestionConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_ButtonsQuestionConfiguration_indexes_,
                          _xsd_ButtonsQuestionConfiguration_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_ButtonsQuestionConfiguration_indexes_ + 2 || _xsd_ButtonsQuestionConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const ButtonsQuestionConfiguration::
      _xsd_ButtonsQuestionConfiguration_literals_[2] =
      {
        "cancel-accept",
        "accept-cancel"
      };

      const ButtonsQuestionConfiguration::Value ButtonsQuestionConfiguration::
      _xsd_ButtonsQuestionConfiguration_indexes_[2] =
      {
        ::Smartmatic::GUI::Configuration::ButtonsQuestionConfiguration::CONFIGURATION_ACCEPT_CANCEL,
        ::Smartmatic::GUI::Configuration::ButtonsQuestionConfiguration::CONFIGURATION_CANCEL_ACCEPT
      };

      // GenderConfiguration
      //

      GenderConfiguration::
      GenderConfiguration ()
      : ::Smartmatic::ConfigurationTypes::Type (),
        Female_ (::Smartmatic::ConfigurationTypes::Flags (), this),
        Male_ (::Smartmatic::ConfigurationTypes::Flags (), this)
      {
      }

      GenderConfiguration::
      GenderConfiguration (const GenderConfiguration& x,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
        Female_ (x.Female_, f, this),
        Male_ (x.Male_, f, this)
      {
      }

      GenderConfiguration::
      GenderConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f,
                           ::Smartmatic::ConfigurationTypes::Container* c)
      : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
        Female_ (f, this),
        Male_ (f, this)
      {
        if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void GenderConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Female
          //
          if (n.name () == "Female" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< FemaleType > r (
              FemaleTraits::create (i, f, this));

            this->Female_.push_back (r);
            continue;
          }

          // Male
          //
          if (n.name () == "Male" && n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
          {
            ::std::auto_ptr< MaleType > r (
              MaleTraits::create (i, f, this));

            this->Male_.push_back (r);
            continue;
          }

          break;
        }
      }

      GenderConfiguration* GenderConfiguration::
      _clone (::Smartmatic::ConfigurationTypes::Flags f,
              ::Smartmatic::ConfigurationTypes::Container* c) const
      {
        return new class GenderConfiguration (*this, f, c);
      }

      GenderConfiguration::
      ~GenderConfiguration ()
      {
      }

      bool
      operator== (const GenderConfiguration& x, const GenderConfiguration& y)
      {
        if (!(x.getFemale () == y.getFemale ()))
          return false;

        if (!(x.getMale () == y.getMale ()))
          return false;

        return true;
      }

      bool
      operator!= (const GenderConfiguration& x, const GenderConfiguration& y)
      {
        return !(x == y);
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::std::string& u,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
          ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::std::string& u,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
          ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
          ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       const ::std::string& sid,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       const ::std::string& sid,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::xercesc::InputSource& i,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
          ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::xercesc::InputSource& i,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
          ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
          ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
            d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::xercesc::DOMDocument& d,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p)
      {
        if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
            ::Smartmatic::GUI::Configuration::parseSmartmaticGUIConfiguration (
              c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SmartmaticGUIConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SmartmaticGUIConfiguration",
          "http://www.smartmatic.com/SmartmaticGUIConfiguration");
      }

      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::Smartmatic::ConfigurationTypes::Flags f,
                                       const ::Smartmatic::ConfigurationTypes::Properties&)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
           !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
          doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SmartmaticGUIConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SmartmaticGUIConfiguration",
          "http://www.smartmatic.com/SmartmaticGUIConfiguration");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      void
      operator<< (::xercesc::DOMElement& e, const SmartmaticGUIConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // BasicWindowConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BasicWindowConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getBasicWindowConfiguration ();
        }

        // EventSoundsConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EventSoundsConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getEventSoundsConfiguration ();
        }

        // ButtonLabelSizeConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonLabelSizeConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getButtonLabelSizeConfiguration ();
        }

        // AZERTYKeyboardWidgetConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AZERTYKeyboardWidgetConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getAZERTYKeyboardWidgetConfiguration ();
        }

        // EntryPassPhraseConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EntryPassPhraseConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getEntryPassPhraseConfiguration ();
        }

        // ButtonsQuestionConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ButtonsQuestionConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getButtonsQuestionConfiguration ();
        }

        // GenderConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "GenderConfiguration",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getGenderConfiguration ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::std::ostream& o,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           const ::std::string& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::std::ostream& o,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           const ::std::string& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::std::ostream& o,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           ::xercesc::DOMErrorHandler& h,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           const ::std::string& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::xercesc::XMLFormatTarget& t,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           const ::std::string& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::xercesc::XMLFormatTarget& t,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           const ::std::string& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::xercesc::XMLFormatTarget& t,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           ::xercesc::DOMErrorHandler& h,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           const ::std::string& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSmartmaticGUIConfiguration (::xercesc::DOMDocument& d,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           ::Smartmatic::ConfigurationTypes::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SmartmaticGUIConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SmartmaticGUIConfiguration")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SmartmaticGUIConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration");
        }
      }

      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeSmartmaticGUIConfiguration (const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& s,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                           ::Smartmatic::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SmartmaticGUIConfiguration",
            "http://www.smartmatic.com/SmartmaticGUIConfiguration",
            m, f));

        ::Smartmatic::GUI::Configuration::serializeSmartmaticGUIConfiguration (*d, s, f);
        return d;
      }

      void
      operator<< (::xercesc::DOMElement& e, const BasicWindowConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Height
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Height",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getHeight ();
        }

        // Width
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Width",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getWidth ();
        }

        // HeaderHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HeaderHeight",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getHeaderHeight ();
        }

        // TitleHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TitleHeight",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getTitleHeight ();
        }

        // BottomHeight
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BottomHeight",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getBottomHeight ();
        }

        // HorizontalPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HorizontalPadding",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getHorizontalPadding ();
        }

        // verticalPadding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "verticalPadding",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getVerticalPadding ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const EventSoundsConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // SmartmaticButtonSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SmartmaticButtonSound",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getSmartmaticButtonSound ();
        }

        // AzertyKeypadSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AzertyKeypadSound",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getAzertyKeypadSound ();
        }

        // KeypadSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "KeypadSound",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getKeypadSound ();
        }

        // MenuSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MenuSound",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getMenuSound ();
        }

        // ConfirmationDialogSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfirmationDialogSound",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getConfirmationDialogSound ();
        }

        // ChooseDialogSound
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ChooseDialogSound",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getChooseDialogSound ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ButtonLabelSizeConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // MenuButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MenuButtons",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getMenuButtons ();
        }

        // AllButtons
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AllButtons",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getAllButtons ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const AZERTYKeyboardWidgetConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // ShowChars
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowChars",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << i.getShowChars ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const EntryPassPhraseConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const EntryPassPhraseConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const EntryPassPhraseConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const ButtonsQuestionConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const ButtonsQuestionConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                  const ButtonsQuestionConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const GenderConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

        // Female
        //
        for (GenderConfiguration::FemaleConstIterator
             b (i.getFemale ().begin ()), n (i.getFemale ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Female",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << *b;
        }

        // Male
        //
        for (GenderConfiguration::MaleConstIterator
             b (i.getMale ().begin ()), n (i.getMale ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Male",
              "http://www.smartmatic.com/SmartmaticGUIConfiguration",
              e));

          s << *b;
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

