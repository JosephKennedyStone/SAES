// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SmartmaticGUIConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SMARTMATIC_GUICONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SMARTMATIC_GUICONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
   * schema namespace.
   */
  namespace ConfigurationTypes
  {
    // anyType and anySimpleType.
    //

    /**
     * @brief C++ type corresponding to the anyType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::type Type;

    /**
     * @brief C++ type corresponding to the anySimpleType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

    /**
     * @brief Alias for the anyType type.
     */
    typedef ::xsd::cxx::tree::type Container;


    // 8-bit
    //

    /**
     * @brief C++ type corresponding to the byte XML Schema
     * built-in type.
     */
    typedef signed char Byte;

    /**
     * @brief C++ type corresponding to the unsignedByte XML Schema
     * built-in type.
     */
    typedef unsigned char UnsignedByte;


    // 16-bit
    //

    /**
     * @brief C++ type corresponding to the short XML Schema
     * built-in type.
     */
    typedef short Short;

    /**
     * @brief C++ type corresponding to the unsignedShort XML Schema
     * built-in type.
     */
    typedef unsigned short UnsignedShort;


    // 32-bit
    //

    /**
     * @brief C++ type corresponding to the int XML Schema
     * built-in type.
     */
    typedef int Int;

    /**
     * @brief C++ type corresponding to the unsignedInt XML Schema
     * built-in type.
     */
    typedef unsigned int UnsignedInt;


    // 64-bit
    //

    /**
     * @brief C++ type corresponding to the long XML Schema
     * built-in type.
     */
    typedef long long Long;

    /**
     * @brief C++ type corresponding to the unsignedLong XML Schema
     * built-in type.
     */
    typedef unsigned long long UnsignedLong;


    // Supposed to be arbitrary-length integral types.
    //

    /**
     * @brief C++ type corresponding to the integer XML Schema
     * built-in type.
     */
    typedef long long Integer;

    /**
     * @brief C++ type corresponding to the nonPositiveInteger XML Schema
     * built-in type.
     */
    typedef long long NonPositiveInteger;

    /**
     * @brief C++ type corresponding to the nonNegativeInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long NonNegativeInteger;

    /**
     * @brief C++ type corresponding to the positiveInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long PositiveInteger;

    /**
     * @brief C++ type corresponding to the negativeInteger XML Schema
     * built-in type.
     */
    typedef long long NegativeInteger;


    // Boolean.
    //

    /**
     * @brief C++ type corresponding to the boolean XML Schema
     * built-in type.
     */
    typedef bool Boolean;


    // Floating-point types.
    //

    /**
     * @brief C++ type corresponding to the float XML Schema
     * built-in type.
     */
    typedef float Float;

    /**
     * @brief C++ type corresponding to the double XML Schema
     * built-in type.
     */
    typedef double Double;

    /**
     * @brief C++ type corresponding to the decimal XML Schema
     * built-in type.
     */
    typedef double Decimal;


    // String types.
    //

    /**
     * @brief C++ type corresponding to the string XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::string< char, SimpleType > String;

    /**
     * @brief C++ type corresponding to the normalizedString XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

    /**
     * @brief C++ type corresponding to the token XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

    /**
     * @brief C++ type corresponding to the Name XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::name< char, Token > Name;

    /**
     * @brief C++ type corresponding to the NMTOKEN XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

    /**
     * @brief C++ type corresponding to the NMTOKENS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

    /**
     * @brief C++ type corresponding to the NCName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

    /**
     * @brief C++ type corresponding to the language XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::language< char, Token > Language;


    // ID/IDREF.
    //

    /**
     * @brief C++ type corresponding to the ID XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::id< char, Ncname > Id;

    /**
     * @brief C++ type corresponding to the IDREF XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

    /**
     * @brief C++ type corresponding to the IDREFS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


    // URI.
    //

    /**
     * @brief C++ type corresponding to the anyURI XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


    // Qualified name.
    //

    /**
     * @brief C++ type corresponding to the QName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


    // Binary.
    //

    /**
     * @brief Binary buffer type.
     */
    typedef ::xsd::cxx::tree::buffer< char > Buffer;

    /**
     * @brief C++ type corresponding to the base64Binary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

    /**
     * @brief C++ type corresponding to the hexBinary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


    // Date/time.
    //

    /**
     * @brief Time zone type.
     */
    typedef ::xsd::cxx::tree::time_zone TimeZone;

    /**
     * @brief C++ type corresponding to the date XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

    /**
     * @brief C++ type corresponding to the dateTime XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

    /**
     * @brief C++ type corresponding to the duration XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

    /**
     * @brief C++ type corresponding to the gDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

    /**
     * @brief C++ type corresponding to the gMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

    /**
     * @brief C++ type corresponding to the gMonthDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

    /**
     * @brief C++ type corresponding to the gYear XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

    /**
     * @brief C++ type corresponding to the gYearMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

    /**
     * @brief C++ type corresponding to the time XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


    // Entity.
    //

    /**
     * @brief C++ type corresponding to the ENTITY XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

    /**
     * @brief C++ type corresponding to the ENTITIES XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


    // Namespace information and list stream. Used in
    // serialization functions.
    //
    /**
     * @brief Namespace serialization information.
     */
    typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

    /**
     * @brief Namespace serialization information map.
     */
    typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

    /**
     * @brief List serialization stream.
     */
    typedef ::xsd::cxx::tree::list_stream< char > ListStream;

    /**
     * @brief Serialization wrapper for the %double type.
     */
    typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

    /**
     * @brief Serialization wrapper for the %decimal type.
     */
    typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

    /**
     * @brief Simple type facet.
     */
    typedef ::xsd::cxx::tree::facet Facet;

    // Flags and properties.
    //

    /**
     * @brief Parsing and serialization flags.
     */
    typedef ::xsd::cxx::tree::flags Flags;

    /**
     * @brief Parsing properties.
     */
    typedef ::xsd::cxx::tree::properties< char > Properties;

    // Parsing/serialization diagnostics.
    //

    /**
     * @brief Error severity.
     */
    typedef ::xsd::cxx::tree::severity Severity;

    /**
     * @brief Error condition.
     */
    typedef ::xsd::cxx::tree::error< char > Error;

    /**
     * @brief List of %error conditions.
     */
    typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

    // Exceptions.
    //

    /**
     * @brief Root of the C++/Tree %exception hierarchy.
     */
    typedef ::xsd::cxx::tree::exception< char > Exception;

    /**
     * @brief Exception indicating that the size argument exceeds
     * the capacity argument.
     */
    typedef ::xsd::cxx::tree::bounds< char > Bounds;

    /**
     * @brief Exception indicating that a duplicate ID value
     * was encountered in the object model.
     */
    typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

    /**
     * @brief Exception indicating a parsing failure.
     */
    typedef ::xsd::cxx::tree::parsing< char > Parsing;

    /**
     * @brief Exception indicating that an expected element
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

    /**
     * @brief Exception indicating that an unexpected element
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

    /**
     * @brief Exception indicating that an expected attribute
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

    /**
     * @brief Exception indicating that an unexpected enumerator
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

    /**
     * @brief Exception indicating that the text content was
     * expected for an element.
     */
    typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

    /**
     * @brief Exception indicating that a prefix-namespace
     * mapping was not provided.
     */
    typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

    /**
     * @brief Exception indicating a serialization failure.
     */
    typedef ::xsd::cxx::tree::serialization< char > Serialization;

    /**
     * @brief Error handler callback interface.
     */
    typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

    /**
     * @brief DOM interaction.
     */
    namespace dom
    {
      /**
       * @brief Automatic pointer for DOMDocument.
       */
      using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
      /**
       * @brief DOM user data key for back pointers to tree nodes.
       */
      const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      class SmartmaticGUIConfiguration;
      class BasicWindowConfiguration;
      class EventSoundsConfiguration;
      class ButtonLabelSizeConfiguration;
      class AZERTYKeyboardWidgetConfiguration;
      class EntryPassPhraseConfiguration;
      class ButtonsQuestionConfiguration;
      class GenderConfiguration;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace GUI
  {
    /**
     * @brief C++ namespace for the %http://www.smartmatic.com/SmartmaticGUIConfiguration
     * schema namespace.
     */
    namespace Configuration
    {
      /**
       * @brief Class corresponding to the %SmartmaticGUIConfiguration schema type.
       *
       * @nosubgrouping
       */
      class SmartmaticGUIConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name BasicWindowConfiguration
         *
         * @brief Accessor and modifier functions for the %BasicWindowConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::BasicWindowConfiguration BasicWindowConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BasicWindowConfigurationType, char > BasicWindowConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BasicWindowConfigurationType&
        getBasicWindowConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BasicWindowConfigurationType&
        getBasicWindowConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBasicWindowConfiguration (const BasicWindowConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBasicWindowConfiguration (::std::auto_ptr< BasicWindowConfigurationType > p);

        //@}

        /**
         * @name EventSoundsConfiguration
         *
         * @brief Accessor and modifier functions for the %EventSoundsConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::EventSoundsConfiguration EventSoundsConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EventSoundsConfigurationType, char > EventSoundsConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EventSoundsConfigurationType&
        getEventSoundsConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EventSoundsConfigurationType&
        getEventSoundsConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEventSoundsConfiguration (const EventSoundsConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEventSoundsConfiguration (::std::auto_ptr< EventSoundsConfigurationType > p);

        //@}

        /**
         * @name ButtonLabelSizeConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonLabelSizeConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::ButtonLabelSizeConfiguration ButtonLabelSizeConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonLabelSizeConfigurationType, char > ButtonLabelSizeConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonLabelSizeConfigurationType&
        getButtonLabelSizeConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonLabelSizeConfigurationType&
        getButtonLabelSizeConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonLabelSizeConfiguration (const ButtonLabelSizeConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonLabelSizeConfiguration (::std::auto_ptr< ButtonLabelSizeConfigurationType > p);

        //@}

        /**
         * @name AZERTYKeyboardWidgetConfiguration
         *
         * @brief Accessor and modifier functions for the %AZERTYKeyboardWidgetConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::AZERTYKeyboardWidgetConfiguration AZERTYKeyboardWidgetConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AZERTYKeyboardWidgetConfigurationType, char > AZERTYKeyboardWidgetConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AZERTYKeyboardWidgetConfigurationType&
        getAZERTYKeyboardWidgetConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AZERTYKeyboardWidgetConfigurationType&
        getAZERTYKeyboardWidgetConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAZERTYKeyboardWidgetConfiguration (const AZERTYKeyboardWidgetConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAZERTYKeyboardWidgetConfiguration (::std::auto_ptr< AZERTYKeyboardWidgetConfigurationType > p);

        //@}

        /**
         * @name EntryPassPhraseConfiguration
         *
         * @brief Accessor and modifier functions for the %EntryPassPhraseConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::EntryPassPhraseConfiguration EntryPassPhraseConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EntryPassPhraseConfigurationType, char > EntryPassPhraseConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EntryPassPhraseConfigurationType&
        getEntryPassPhraseConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EntryPassPhraseConfigurationType&
        getEntryPassPhraseConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEntryPassPhraseConfiguration (const EntryPassPhraseConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEntryPassPhraseConfiguration (::std::auto_ptr< EntryPassPhraseConfigurationType > p);

        //@}

        /**
         * @name ButtonsQuestionConfiguration
         *
         * @brief Accessor and modifier functions for the %ButtonsQuestionConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::ButtonsQuestionConfiguration ButtonsQuestionConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ButtonsQuestionConfigurationType, char > ButtonsQuestionConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ButtonsQuestionConfigurationType&
        getButtonsQuestionConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ButtonsQuestionConfigurationType&
        getButtonsQuestionConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setButtonsQuestionConfiguration (const ButtonsQuestionConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setButtonsQuestionConfiguration (::std::auto_ptr< ButtonsQuestionConfigurationType > p);

        //@}

        /**
         * @name GenderConfiguration
         *
         * @brief Accessor and modifier functions for the %GenderConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::GUI::Configuration::GenderConfiguration GenderConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< GenderConfigurationType, char > GenderConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const GenderConfigurationType&
        getGenderConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        GenderConfigurationType&
        getGenderConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setGenderConfiguration (const GenderConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setGenderConfiguration (::std::auto_ptr< GenderConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        SmartmaticGUIConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SmartmaticGUIConfiguration (const BasicWindowConfigurationType&,
                                    const EventSoundsConfigurationType&,
                                    const ButtonLabelSizeConfigurationType&,
                                    const AZERTYKeyboardWidgetConfigurationType&,
                                    const EntryPassPhraseConfigurationType&,
                                    const ButtonsQuestionConfigurationType&,
                                    const GenderConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        SmartmaticGUIConfiguration (::std::auto_ptr< BasicWindowConfigurationType >&,
                                    ::std::auto_ptr< EventSoundsConfigurationType >&,
                                    ::std::auto_ptr< ButtonLabelSizeConfigurationType >&,
                                    ::std::auto_ptr< AZERTYKeyboardWidgetConfigurationType >&,
                                    const EntryPassPhraseConfigurationType&,
                                    const ButtonsQuestionConfigurationType&,
                                    ::std::auto_ptr< GenderConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SmartmaticGUIConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        SmartmaticGUIConfiguration (const SmartmaticGUIConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SmartmaticGUIConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~SmartmaticGUIConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< BasicWindowConfigurationType > BasicWindowConfiguration_;
        ::xsd::cxx::tree::one< EventSoundsConfigurationType > EventSoundsConfiguration_;
        ::xsd::cxx::tree::one< ButtonLabelSizeConfigurationType > ButtonLabelSizeConfiguration_;
        ::xsd::cxx::tree::one< AZERTYKeyboardWidgetConfigurationType > AZERTYKeyboardWidgetConfiguration_;
        ::xsd::cxx::tree::one< EntryPassPhraseConfigurationType > EntryPassPhraseConfiguration_;
        ::xsd::cxx::tree::one< ButtonsQuestionConfigurationType > ButtonsQuestionConfiguration_;
        ::xsd::cxx::tree::one< GenderConfigurationType > GenderConfiguration_;

        //@endcond
      };

      bool
      operator== (const SmartmaticGUIConfiguration&, const SmartmaticGUIConfiguration&);

      bool
      operator!= (const SmartmaticGUIConfiguration&, const SmartmaticGUIConfiguration&);


      /**
       * @brief Class corresponding to the %BasicWindowConfiguration schema type.
       *
       * @nosubgrouping
       */
      class BasicWindowConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Height
         *
         * @brief Accessor and modifier functions for the %Height
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int HeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeightType, char > HeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeightType&
        getHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeightType&
        getHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeight (const HeightType& x);

        //@}

        /**
         * @name Width
         *
         * @brief Accessor and modifier functions for the %Width
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int WidthType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< WidthType, char > WidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const WidthType&
        getWidth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        WidthType&
        getWidth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setWidth (const WidthType& x);

        //@}

        /**
         * @name HeaderHeight
         *
         * @brief Accessor and modifier functions for the %HeaderHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int HeaderHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeaderHeightType, char > HeaderHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HeaderHeightType&
        getHeaderHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HeaderHeightType&
        getHeaderHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHeaderHeight (const HeaderHeightType& x);

        //@}

        /**
         * @name TitleHeight
         *
         * @brief Accessor and modifier functions for the %TitleHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int TitleHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TitleHeightType, char > TitleHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TitleHeightType&
        getTitleHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TitleHeightType&
        getTitleHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTitleHeight (const TitleHeightType& x);

        //@}

        /**
         * @name BottomHeight
         *
         * @brief Accessor and modifier functions for the %BottomHeight
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int BottomHeightType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BottomHeightType, char > BottomHeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BottomHeightType&
        getBottomHeight () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BottomHeightType&
        getBottomHeight ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBottomHeight (const BottomHeightType& x);

        //@}

        /**
         * @name HorizontalPadding
         *
         * @brief Accessor and modifier functions for the %HorizontalPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int HorizontalPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HorizontalPaddingType, char > HorizontalPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HorizontalPaddingType&
        getHorizontalPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HorizontalPaddingType&
        getHorizontalPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHorizontalPadding (const HorizontalPaddingType& x);

        //@}

        /**
         * @name verticalPadding
         *
         * @brief Accessor and modifier functions for the %verticalPadding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Int VerticalPaddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VerticalPaddingType, char > VerticalPaddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VerticalPaddingType&
        getVerticalPadding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VerticalPaddingType&
        getVerticalPadding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVerticalPadding (const VerticalPaddingType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        BasicWindowConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BasicWindowConfiguration (const HeightType&,
                                  const WidthType&,
                                  const HeaderHeightType&,
                                  const TitleHeightType&,
                                  const BottomHeightType&,
                                  const HorizontalPaddingType&,
                                  const VerticalPaddingType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BasicWindowConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        BasicWindowConfiguration (const BasicWindowConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BasicWindowConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~BasicWindowConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< HeightType > Height_;
        ::xsd::cxx::tree::one< WidthType > Width_;
        ::xsd::cxx::tree::one< HeaderHeightType > HeaderHeight_;
        ::xsd::cxx::tree::one< TitleHeightType > TitleHeight_;
        ::xsd::cxx::tree::one< BottomHeightType > BottomHeight_;
        ::xsd::cxx::tree::one< HorizontalPaddingType > HorizontalPadding_;
        ::xsd::cxx::tree::one< VerticalPaddingType > verticalPadding_;

        //@endcond
      };

      bool
      operator== (const BasicWindowConfiguration&, const BasicWindowConfiguration&);

      bool
      operator!= (const BasicWindowConfiguration&, const BasicWindowConfiguration&);


      /**
       * @brief Class corresponding to the %EventSoundsConfiguration schema type.
       *
       * @nosubgrouping
       */
      class EventSoundsConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name SmartmaticButtonSound
         *
         * @brief Accessor and modifier functions for the %SmartmaticButtonSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String SmartmaticButtonSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SmartmaticButtonSoundType, char > SmartmaticButtonSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SmartmaticButtonSoundType&
        getSmartmaticButtonSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SmartmaticButtonSoundType&
        getSmartmaticButtonSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSmartmaticButtonSound (const SmartmaticButtonSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSmartmaticButtonSound (::std::auto_ptr< SmartmaticButtonSoundType > p);

        //@}

        /**
         * @name AzertyKeypadSound
         *
         * @brief Accessor and modifier functions for the %AzertyKeypadSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String AzertyKeypadSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AzertyKeypadSoundType, char > AzertyKeypadSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AzertyKeypadSoundType&
        getAzertyKeypadSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AzertyKeypadSoundType&
        getAzertyKeypadSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAzertyKeypadSound (const AzertyKeypadSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAzertyKeypadSound (::std::auto_ptr< AzertyKeypadSoundType > p);

        //@}

        /**
         * @name KeypadSound
         *
         * @brief Accessor and modifier functions for the %KeypadSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String KeypadSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< KeypadSoundType, char > KeypadSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const KeypadSoundType&
        getKeypadSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        KeypadSoundType&
        getKeypadSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setKeypadSound (const KeypadSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setKeypadSound (::std::auto_ptr< KeypadSoundType > p);

        //@}

        /**
         * @name MenuSound
         *
         * @brief Accessor and modifier functions for the %MenuSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String MenuSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MenuSoundType, char > MenuSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MenuSoundType&
        getMenuSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MenuSoundType&
        getMenuSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMenuSound (const MenuSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMenuSound (::std::auto_ptr< MenuSoundType > p);

        //@}

        /**
         * @name ConfirmationDialogSound
         *
         * @brief Accessor and modifier functions for the %ConfirmationDialogSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ConfirmationDialogSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfirmationDialogSoundType, char > ConfirmationDialogSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfirmationDialogSoundType&
        getConfirmationDialogSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfirmationDialogSoundType&
        getConfirmationDialogSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfirmationDialogSound (const ConfirmationDialogSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfirmationDialogSound (::std::auto_ptr< ConfirmationDialogSoundType > p);

        //@}

        /**
         * @name ChooseDialogSound
         *
         * @brief Accessor and modifier functions for the %ChooseDialogSound
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String ChooseDialogSoundType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ChooseDialogSoundType, char > ChooseDialogSoundTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ChooseDialogSoundType&
        getChooseDialogSound () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ChooseDialogSoundType&
        getChooseDialogSound ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setChooseDialogSound (const ChooseDialogSoundType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setChooseDialogSound (::std::auto_ptr< ChooseDialogSoundType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        EventSoundsConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        EventSoundsConfiguration (const SmartmaticButtonSoundType&,
                                  const AzertyKeypadSoundType&,
                                  const KeypadSoundType&,
                                  const MenuSoundType&,
                                  const ConfirmationDialogSoundType&,
                                  const ChooseDialogSoundType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        EventSoundsConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        EventSoundsConfiguration (const EventSoundsConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual EventSoundsConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~EventSoundsConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SmartmaticButtonSoundType > SmartmaticButtonSound_;
        ::xsd::cxx::tree::one< AzertyKeypadSoundType > AzertyKeypadSound_;
        ::xsd::cxx::tree::one< KeypadSoundType > KeypadSound_;
        ::xsd::cxx::tree::one< MenuSoundType > MenuSound_;
        ::xsd::cxx::tree::one< ConfirmationDialogSoundType > ConfirmationDialogSound_;
        ::xsd::cxx::tree::one< ChooseDialogSoundType > ChooseDialogSound_;

        //@endcond
      };

      bool
      operator== (const EventSoundsConfiguration&, const EventSoundsConfiguration&);

      bool
      operator!= (const EventSoundsConfiguration&, const EventSoundsConfiguration&);


      /**
       * @brief Class corresponding to the %ButtonLabelSizeConfiguration schema type.
       *
       * @nosubgrouping
       */
      class ButtonLabelSizeConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name MenuButtons
         *
         * @brief Accessor and modifier functions for the %MenuButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger MenuButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MenuButtonsType, char > MenuButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MenuButtonsType&
        getMenuButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MenuButtonsType&
        getMenuButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMenuButtons (const MenuButtonsType& x);

        //@}

        /**
         * @name AllButtons
         *
         * @brief Accessor and modifier functions for the %AllButtons
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger AllButtonsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AllButtonsType, char > AllButtonsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AllButtonsType&
        getAllButtons () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AllButtonsType&
        getAllButtons ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAllButtons (const AllButtonsType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ButtonLabelSizeConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ButtonLabelSizeConfiguration (const MenuButtonsType&,
                                      const AllButtonsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ButtonLabelSizeConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ButtonLabelSizeConfiguration (const ButtonLabelSizeConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ButtonLabelSizeConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ButtonLabelSizeConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< MenuButtonsType > MenuButtons_;
        ::xsd::cxx::tree::one< AllButtonsType > AllButtons_;

        //@endcond
      };

      bool
      operator== (const ButtonLabelSizeConfiguration&, const ButtonLabelSizeConfiguration&);

      bool
      operator!= (const ButtonLabelSizeConfiguration&, const ButtonLabelSizeConfiguration&);


      /**
       * @brief Class corresponding to the %AZERTYKeyboardWidgetConfiguration schema type.
       *
       * @nosubgrouping
       */
      class AZERTYKeyboardWidgetConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ShowChars
         *
         * @brief Accessor and modifier functions for the %ShowChars
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::Boolean ShowCharsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowCharsType, char > ShowCharsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowCharsType&
        getShowChars () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowCharsType&
        getShowChars ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowChars (const ShowCharsType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        AZERTYKeyboardWidgetConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AZERTYKeyboardWidgetConfiguration (const ShowCharsType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AZERTYKeyboardWidgetConfiguration (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AZERTYKeyboardWidgetConfiguration (const AZERTYKeyboardWidgetConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AZERTYKeyboardWidgetConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~AZERTYKeyboardWidgetConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ShowCharsType > ShowChars_;

        //@endcond
      };

      bool
      operator== (const AZERTYKeyboardWidgetConfiguration&, const AZERTYKeyboardWidgetConfiguration&);

      bool
      operator!= (const AZERTYKeyboardWidgetConfiguration&, const AZERTYKeyboardWidgetConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %EntryPassPhraseConfiguration
       * schema type.
       */
      class EntryPassPhraseConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_CASESENSITIVE,
          CONFIGURATION_UPPERCASE,
          CONFIGURATION_LOWERCASE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        EntryPassPhraseConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        EntryPassPhraseConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        EntryPassPhraseConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        EntryPassPhraseConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        EntryPassPhraseConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        EntryPassPhraseConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        EntryPassPhraseConfiguration (const ::xercesc::DOMAttr& a,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        EntryPassPhraseConfiguration (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        EntryPassPhraseConfiguration (const EntryPassPhraseConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual EntryPassPhraseConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        EntryPassPhraseConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_EntryPassPhraseConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_EntryPassPhraseConfiguration_convert () const;

        public:
        static const char* const _xsd_EntryPassPhraseConfiguration_literals_[3];
        static const Value _xsd_EntryPassPhraseConfiguration_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %ButtonsQuestionConfiguration
       * schema type.
       */
      class ButtonsQuestionConfiguration: public ::Smartmatic::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_CANCEL_ACCEPT,
          CONFIGURATION_ACCEPT_CANCEL
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        ButtonsQuestionConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        ButtonsQuestionConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        ButtonsQuestionConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        ButtonsQuestionConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        ButtonsQuestionConfiguration (const ::Smartmatic::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ButtonsQuestionConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ButtonsQuestionConfiguration (const ::xercesc::DOMAttr& a,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ButtonsQuestionConfiguration (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ButtonsQuestionConfiguration (const ButtonsQuestionConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ButtonsQuestionConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        ButtonsQuestionConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_ButtonsQuestionConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_ButtonsQuestionConfiguration_convert () const;

        public:
        static const char* const _xsd_ButtonsQuestionConfiguration_literals_[2];
        static const Value _xsd_ButtonsQuestionConfiguration_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %GenderConfiguration schema type.
       *
       * @nosubgrouping
       */
      class GenderConfiguration: public ::Smartmatic::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Female
         *
         * @brief Accessor and modifier functions for the %Female
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String FemaleType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< FemaleType > FemaleSequence;

        /**
         * @brief Element iterator type.
         */
        typedef FemaleSequence::iterator FemaleIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef FemaleSequence::const_iterator FemaleConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FemaleType, char > FemaleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const FemaleSequence&
        getFemale () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        FemaleSequence&
        getFemale ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setFemale (const FemaleSequence& s);

        //@}

        /**
         * @name Male
         *
         * @brief Accessor and modifier functions for the %Male
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::ConfigurationTypes::String MaleType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< MaleType > MaleSequence;

        /**
         * @brief Element iterator type.
         */
        typedef MaleSequence::iterator MaleIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef MaleSequence::const_iterator MaleConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaleType, char > MaleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const MaleSequence&
        getMale () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        MaleSequence&
        getMale ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setMale (const MaleSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        GenderConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        GenderConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        GenderConfiguration (const GenderConfiguration& x,
                             ::Smartmatic::ConfigurationTypes::Flags f = 0,
                             ::Smartmatic::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual GenderConfiguration*
        _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~GenderConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::ConfigurationTypes::Flags);

        protected:
        FemaleSequence Female_;
        MaleSequence Male_;

        //@endcond
      };

      bool
      operator== (const GenderConfiguration&, const GenderConfiguration&);

      bool
      operator!= (const GenderConfiguration&, const GenderConfiguration&);
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      /**
       * @name Parsing functions for the %SmartmaticGUIConfiguration document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::std::string& uri,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::std::string& uri,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::std::string& uri,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       const ::std::string& id,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       const ::std::string& id,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::std::istream& is,
                                       const ::std::string& id,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::xercesc::InputSource& is,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::xercesc::InputSource& is,
                                       ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::xercesc::InputSource& is,
                                       ::xercesc::DOMErrorHandler& eh,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (const ::xercesc::DOMDocument& d,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::auto_ptr< ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration >
      parseSmartmaticGUIConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                       ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                       const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

      //@}
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace GUI
  {
    namespace Configuration
    {
      void
      operator<< (::xercesc::DOMElement&, const SmartmaticGUIConfiguration&);

      /**
       * @name Serialization functions for the %SmartmaticGUIConfiguration document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeSmartmaticGUIConfiguration (::std::ostream& os,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSmartmaticGUIConfiguration (::std::ostream& os,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSmartmaticGUIConfiguration (::std::ostream& os,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeSmartmaticGUIConfiguration (::xercesc::XMLFormatTarget& ft,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSmartmaticGUIConfiguration (::xercesc::XMLFormatTarget& ft,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSmartmaticGUIConfiguration (::xercesc::XMLFormatTarget& ft,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           ::xercesc::DOMErrorHandler& eh,
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           const ::std::string& e = "UTF-8",
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeSmartmaticGUIConfiguration (::xercesc::DOMDocument& d,
                                           const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x,
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeSmartmaticGUIConfiguration (const ::Smartmatic::GUI::Configuration::SmartmaticGUIConfiguration& x, 
                                           const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                           ::Smartmatic::ConfigurationTypes::Flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const BasicWindowConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const EventSoundsConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ButtonLabelSizeConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const AZERTYKeyboardWidgetConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const EntryPassPhraseConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const EntryPassPhraseConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const EntryPassPhraseConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ButtonsQuestionConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const ButtonsQuestionConfiguration&);

      void
      operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                  const ButtonsQuestionConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const GenderConfiguration&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SMARTMATIC_GUICONFIGURATION_SCHEMA_HXX
