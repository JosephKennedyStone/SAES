// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SaesHardwareConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        // SaesHardwareConfiguration
        // 

        const SaesHardwareConfiguration::SmartcardConfigurationType& SaesHardwareConfiguration::
        getSmartcardConfiguration () const
        {
          return this->SmartcardConfiguration_.get ();
        }

        SaesHardwareConfiguration::SmartcardConfigurationType& SaesHardwareConfiguration::
        getSmartcardConfiguration ()
        {
          return this->SmartcardConfiguration_.get ();
        }

        void SaesHardwareConfiguration::
        setSmartcardConfiguration (const SmartcardConfigurationType& x)
        {
          this->SmartcardConfiguration_.set (x);
        }

        void SaesHardwareConfiguration::
        setSmartcardConfiguration (::std::auto_ptr< SmartcardConfigurationType > x)
        {
          this->SmartcardConfiguration_.set (x);
        }

        const SaesHardwareConfiguration::BarcodeDeviceConfigurationType& SaesHardwareConfiguration::
        getBarcodeDeviceConfiguration () const
        {
          return this->BarcodeDeviceConfiguration_.get ();
        }

        SaesHardwareConfiguration::BarcodeDeviceConfigurationType& SaesHardwareConfiguration::
        getBarcodeDeviceConfiguration ()
        {
          return this->BarcodeDeviceConfiguration_.get ();
        }

        void SaesHardwareConfiguration::
        setBarcodeDeviceConfiguration (const BarcodeDeviceConfigurationType& x)
        {
          this->BarcodeDeviceConfiguration_.set (x);
        }

        void SaesHardwareConfiguration::
        setBarcodeDeviceConfiguration (::std::auto_ptr< BarcodeDeviceConfigurationType > x)
        {
          this->BarcodeDeviceConfiguration_.set (x);
        }


        // CardReaderType
        // 

        CardReaderType::
        CardReaderType ()
        : ::Smartmatic::ConfigurationTypes::String ()
        {
        }

        CardReaderType::
        CardReaderType (Value v)
        : ::Smartmatic::ConfigurationTypes::String (_xsd_CardReaderType_literals_[v])
        {
        }

        CardReaderType::
        CardReaderType (const char* v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CardReaderType::
        CardReaderType (const ::std::string& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CardReaderType::
        CardReaderType (const ::Smartmatic::ConfigurationTypes::String& v)
        : ::Smartmatic::ConfigurationTypes::String (v)
        {
        }

        CardReaderType::
        CardReaderType (const CardReaderType& v,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (v, f, c)
        {
        }

        CardReaderType& CardReaderType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::ConfigurationTypes::String& > (*this) = 
          ::Smartmatic::ConfigurationTypes::String (_xsd_CardReaderType_literals_[v]);

          return *this;
        }


        // BarcodeCommands
        // 

        const BarcodeCommands::CommandSequence& BarcodeCommands::
        getCommand () const
        {
          return this->Command_;
        }

        BarcodeCommands::CommandSequence& BarcodeCommands::
        getCommand ()
        {
          return this->Command_;
        }

        void BarcodeCommands::
        setCommand (const CommandSequence& s)
        {
          this->Command_ = s;
        }

        const BarcodeCommands::CommandBlockNameType& BarcodeCommands::
        getCommandBlockName () const
        {
          return this->CommandBlockName_.get ();
        }

        BarcodeCommands::CommandBlockNameType& BarcodeCommands::
        getCommandBlockName ()
        {
          return this->CommandBlockName_.get ();
        }

        void BarcodeCommands::
        setCommandBlockName (const CommandBlockNameType& x)
        {
          this->CommandBlockName_.set (x);
        }

        void BarcodeCommands::
        setCommandBlockName (::std::auto_ptr< CommandBlockNameType > x)
        {
          this->CommandBlockName_.set (x);
        }


        // BarcodeCommand
        // 

        const BarcodeCommand::CommandType& BarcodeCommand::
        getCommand () const
        {
          return this->Command_.get ();
        }

        BarcodeCommand::CommandType& BarcodeCommand::
        getCommand ()
        {
          return this->Command_.get ();
        }

        void BarcodeCommand::
        setCommand (const CommandType& x)
        {
          this->Command_.set (x);
        }

        void BarcodeCommand::
        setCommand (::std::auto_ptr< CommandType > x)
        {
          this->Command_.set (x);
        }

        const BarcodeCommand::DelayResponseType& BarcodeCommand::
        getDelayResponse () const
        {
          return this->DelayResponse_.get ();
        }

        BarcodeCommand::DelayResponseType& BarcodeCommand::
        getDelayResponse ()
        {
          return this->DelayResponse_.get ();
        }

        void BarcodeCommand::
        setDelayResponse (const DelayResponseType& x)
        {
          this->DelayResponse_.set (x);
        }

        const BarcodeCommand::RetriesType& BarcodeCommand::
        getRetries () const
        {
          return this->Retries_.get ();
        }

        BarcodeCommand::RetriesType& BarcodeCommand::
        getRetries ()
        {
          return this->Retries_.get ();
        }

        void BarcodeCommand::
        setRetries (const RetriesType& x)
        {
          this->Retries_.set (x);
        }

        const BarcodeCommand::MandatorySentType& BarcodeCommand::
        getMandatorySent () const
        {
          return this->MandatorySent_.get ();
        }

        BarcodeCommand::MandatorySentType& BarcodeCommand::
        getMandatorySent ()
        {
          return this->MandatorySent_.get ();
        }

        void BarcodeCommand::
        setMandatorySent (const MandatorySentType& x)
        {
          this->MandatorySent_.set (x);
        }


        // SmartcardConfiguration
        // 

        const SmartcardConfiguration::SmartCardReaderTypeType& SmartcardConfiguration::
        getSmartCardReaderType () const
        {
          return this->SmartCardReaderType_.get ();
        }

        SmartcardConfiguration::SmartCardReaderTypeType& SmartcardConfiguration::
        getSmartCardReaderType ()
        {
          return this->SmartCardReaderType_.get ();
        }

        void SmartcardConfiguration::
        setSmartCardReaderType (const SmartCardReaderTypeType& x)
        {
          this->SmartCardReaderType_.set (x);
        }

        void SmartcardConfiguration::
        setSmartCardReaderType (::std::auto_ptr< SmartCardReaderTypeType > x)
        {
          this->SmartCardReaderType_.set (x);
        }

        const SmartcardConfiguration::ExtendedType& SmartcardConfiguration::
        getExtended () const
        {
          return this->Extended_.get ();
        }

        SmartcardConfiguration::ExtendedType& SmartcardConfiguration::
        getExtended ()
        {
          return this->Extended_.get ();
        }

        void SmartcardConfiguration::
        setExtended (const ExtendedType& x)
        {
          this->Extended_.set (x);
        }


        // BarcodeDeviceConfiguration
        // 

        const BarcodeDeviceConfiguration::PortToLookSequence& BarcodeDeviceConfiguration::
        getPortToLook () const
        {
          return this->PortToLook_;
        }

        BarcodeDeviceConfiguration::PortToLookSequence& BarcodeDeviceConfiguration::
        getPortToLook ()
        {
          return this->PortToLook_;
        }

        void BarcodeDeviceConfiguration::
        setPortToLook (const PortToLookSequence& s)
        {
          this->PortToLook_ = s;
        }

        const BarcodeDeviceConfiguration::ConfigurationCommandsSequence& BarcodeDeviceConfiguration::
        getConfigurationCommands () const
        {
          return this->ConfigurationCommands_;
        }

        BarcodeDeviceConfiguration::ConfigurationCommandsSequence& BarcodeDeviceConfiguration::
        getConfigurationCommands ()
        {
          return this->ConfigurationCommands_;
        }

        void BarcodeDeviceConfiguration::
        setConfigurationCommands (const ConfigurationCommandsSequence& s)
        {
          this->ConfigurationCommands_ = s;
        }

        const BarcodeDeviceConfiguration::SerialPollingTimeType& BarcodeDeviceConfiguration::
        getSerialPollingTime () const
        {
          return this->SerialPollingTime_.get ();
        }

        BarcodeDeviceConfiguration::SerialPollingTimeType& BarcodeDeviceConfiguration::
        getSerialPollingTime ()
        {
          return this->SerialPollingTime_.get ();
        }

        void BarcodeDeviceConfiguration::
        setSerialPollingTime (const SerialPollingTimeType& x)
        {
          this->SerialPollingTime_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        // SaesHardwareConfiguration
        //

        SaesHardwareConfiguration::
        SaesHardwareConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          SmartcardConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          BarcodeDeviceConfiguration_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesHardwareConfiguration::
        SaesHardwareConfiguration (const SmartcardConfigurationType& SmartcardConfiguration,
                                   const BarcodeDeviceConfigurationType& BarcodeDeviceConfiguration)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SmartcardConfiguration_ (SmartcardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BarcodeDeviceConfiguration_ (BarcodeDeviceConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesHardwareConfiguration::
        SaesHardwareConfiguration (::std::auto_ptr< SmartcardConfigurationType >& SmartcardConfiguration,
                                   ::std::auto_ptr< BarcodeDeviceConfigurationType >& BarcodeDeviceConfiguration)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SmartcardConfiguration_ (SmartcardConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this),
          BarcodeDeviceConfiguration_ (BarcodeDeviceConfiguration, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SaesHardwareConfiguration::
        SaesHardwareConfiguration (const SaesHardwareConfiguration& x,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          SmartcardConfiguration_ (x.SmartcardConfiguration_, f, this),
          BarcodeDeviceConfiguration_ (x.BarcodeDeviceConfiguration_, f, this)
        {
        }

        SaesHardwareConfiguration::
        SaesHardwareConfiguration (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::ConfigurationTypes::Flags f,
                                   ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          SmartcardConfiguration_ (f, this),
          BarcodeDeviceConfiguration_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SaesHardwareConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SmartcardConfiguration
            //
            if (n.name () == "SmartcardConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              ::std::auto_ptr< SmartcardConfigurationType > r (
                SmartcardConfigurationTraits::create (i, f, this));

              if (!SmartcardConfiguration_.present ())
              {
                this->SmartcardConfiguration_.set (r);
                continue;
              }
            }

            // BarcodeDeviceConfiguration
            //
            if (n.name () == "BarcodeDeviceConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              ::std::auto_ptr< BarcodeDeviceConfigurationType > r (
                BarcodeDeviceConfigurationTraits::create (i, f, this));

              if (!BarcodeDeviceConfiguration_.present ())
              {
                this->BarcodeDeviceConfiguration_.set (r);
                continue;
              }
            }

            break;
          }

          if (!SmartcardConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SmartcardConfiguration",
              "http://www.smartmatic.com/SaesHardwareConfiguration");
          }

          if (!BarcodeDeviceConfiguration_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "BarcodeDeviceConfiguration",
              "http://www.smartmatic.com/SaesHardwareConfiguration");
          }
        }

        SaesHardwareConfiguration* SaesHardwareConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SaesHardwareConfiguration (*this, f, c);
        }

        SaesHardwareConfiguration::
        ~SaesHardwareConfiguration ()
        {
        }

        bool
        operator== (const SaesHardwareConfiguration& x, const SaesHardwareConfiguration& y)
        {
          if (!(x.getSmartcardConfiguration () == y.getSmartcardConfiguration ()))
            return false;

          if (!(x.getBarcodeDeviceConfiguration () == y.getBarcodeDeviceConfiguration ()))
            return false;

          return true;
        }

        bool
        operator!= (const SaesHardwareConfiguration& x, const SaesHardwareConfiguration& y)
        {
          return !(x == y);
        }

        // CardReaderType
        //

        CardReaderType::
        CardReaderType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (e, f, c)
        {
          _xsd_CardReaderType_convert ();
        }

        CardReaderType::
        CardReaderType (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (a, f, c)
        {
          _xsd_CardReaderType_convert ();
        }

        CardReaderType::
        CardReaderType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::String (s, e, f, c)
        {
          _xsd_CardReaderType_convert ();
        }

        CardReaderType* CardReaderType::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class CardReaderType (*this, f, c);
        }

        CardReaderType::Value CardReaderType::
        _xsd_CardReaderType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CardReaderType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CardReaderType_indexes_,
                            _xsd_CardReaderType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_CardReaderType_indexes_ + 2 || _xsd_CardReaderType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CardReaderType::
        _xsd_CardReaderType_literals_[2] =
        {
          "AU9520",
          "Athena"
        };

        const CardReaderType::Value CardReaderType::
        _xsd_CardReaderType_indexes_[2] =
        {
          ::Smartmatic::SAES::HW::Configuration::CardReaderType::CONFIGURATION_AU9520,
          ::Smartmatic::SAES::HW::Configuration::CardReaderType::CONFIGURATION_ATHENA
        };

        // BarcodeCommands
        //

        BarcodeCommands::
        BarcodeCommands ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          Command_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CommandBlockName_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BarcodeCommands::
        BarcodeCommands (const CommandBlockNameType& CommandBlockName)
        : ::Smartmatic::ConfigurationTypes::Type (),
          Command_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          CommandBlockName_ (CommandBlockName, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BarcodeCommands::
        BarcodeCommands (const BarcodeCommands& x,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          Command_ (x.Command_, f, this),
          CommandBlockName_ (x.CommandBlockName_, f, this)
        {
        }

        BarcodeCommands::
        BarcodeCommands (const ::xercesc::DOMElement& e,
                         ::Smartmatic::ConfigurationTypes::Flags f,
                         ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          Command_ (f, this),
          CommandBlockName_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void BarcodeCommands::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Command
            //
            if (n.name () == "Command" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              ::std::auto_ptr< CommandType > r (
                CommandTraits::create (i, f, this));

              this->Command_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "CommandBlockName" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CommandBlockNameType > r (
                CommandBlockNameTraits::create (i, f, this));

              this->CommandBlockName_.set (r);
              continue;
            }
          }

          if (!CommandBlockName_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CommandBlockName",
              "");
          }
        }

        BarcodeCommands* BarcodeCommands::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BarcodeCommands (*this, f, c);
        }

        BarcodeCommands::
        ~BarcodeCommands ()
        {
        }

        bool
        operator== (const BarcodeCommands& x, const BarcodeCommands& y)
        {
          if (!(x.getCommand () == y.getCommand ()))
            return false;

          if (!(x.getCommandBlockName () == y.getCommandBlockName ()))
            return false;

          return true;
        }

        bool
        operator!= (const BarcodeCommands& x, const BarcodeCommands& y)
        {
          return !(x == y);
        }

        // BarcodeCommand
        //

        BarcodeCommand::
        BarcodeCommand ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          Command_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          DelayResponse_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          Retries_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          MandatorySent_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BarcodeCommand::
        BarcodeCommand (const CommandType& Command,
                        const DelayResponseType& DelayResponse,
                        const RetriesType& Retries,
                        const MandatorySentType& MandatorySent)
        : ::Smartmatic::ConfigurationTypes::Type (),
          Command_ (Command, ::Smartmatic::ConfigurationTypes::Flags (), this),
          DelayResponse_ (DelayResponse, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Retries_ (Retries, ::Smartmatic::ConfigurationTypes::Flags (), this),
          MandatorySent_ (MandatorySent, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BarcodeCommand::
        BarcodeCommand (const BarcodeCommand& x,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          Command_ (x.Command_, f, this),
          DelayResponse_ (x.DelayResponse_, f, this),
          Retries_ (x.Retries_, f, this),
          MandatorySent_ (x.MandatorySent_, f, this)
        {
        }

        BarcodeCommand::
        BarcodeCommand (const ::xercesc::DOMElement& e,
                        ::Smartmatic::ConfigurationTypes::Flags f,
                        ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          Command_ (f, this),
          DelayResponse_ (f, this),
          Retries_ (f, this),
          MandatorySent_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void BarcodeCommand::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Command" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CommandType > r (
                CommandTraits::create (i, f, this));

              this->Command_.set (r);
              continue;
            }

            if (n.name () == "DelayResponse" && n.namespace_ ().empty ())
            {
              this->DelayResponse_.set (DelayResponseTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "Retries" && n.namespace_ ().empty ())
            {
              this->Retries_.set (RetriesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "MandatorySent" && n.namespace_ ().empty ())
            {
              this->MandatorySent_.set (MandatorySentTraits::create (i, f, this));
              continue;
            }
          }

          if (!Command_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Command",
              "");
          }

          if (!DelayResponse_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "DelayResponse",
              "");
          }

          if (!Retries_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Retries",
              "");
          }

          if (!MandatorySent_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "MandatorySent",
              "");
          }
        }

        BarcodeCommand* BarcodeCommand::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BarcodeCommand (*this, f, c);
        }

        BarcodeCommand::
        ~BarcodeCommand ()
        {
        }

        bool
        operator== (const BarcodeCommand& x, const BarcodeCommand& y)
        {
          if (!(x.getCommand () == y.getCommand ()))
            return false;

          if (!(x.getDelayResponse () == y.getDelayResponse ()))
            return false;

          if (!(x.getRetries () == y.getRetries ()))
            return false;

          if (!(x.getMandatorySent () == y.getMandatorySent ()))
            return false;

          return true;
        }

        bool
        operator!= (const BarcodeCommand& x, const BarcodeCommand& y)
        {
          return !(x == y);
        }

        // SmartcardConfiguration
        //

        SmartcardConfiguration::
        SmartcardConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          SmartCardReaderType_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          Extended_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SmartcardConfiguration::
        SmartcardConfiguration (const SmartCardReaderTypeType& SmartCardReaderType,
                                const ExtendedType& Extended)
        : ::Smartmatic::ConfigurationTypes::Type (),
          SmartCardReaderType_ (SmartCardReaderType, ::Smartmatic::ConfigurationTypes::Flags (), this),
          Extended_ (Extended, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        SmartcardConfiguration::
        SmartcardConfiguration (const SmartcardConfiguration& x,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          SmartCardReaderType_ (x.SmartCardReaderType_, f, this),
          Extended_ (x.Extended_, f, this)
        {
        }

        SmartcardConfiguration::
        SmartcardConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::ConfigurationTypes::Flags f,
                                ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          SmartCardReaderType_ (f, this),
          Extended_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SmartcardConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SmartCardReaderType
            //
            if (n.name () == "SmartCardReaderType" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              ::std::auto_ptr< SmartCardReaderTypeType > r (
                SmartCardReaderTypeTraits::create (i, f, this));

              if (!SmartCardReaderType_.present ())
              {
                this->SmartCardReaderType_.set (r);
                continue;
              }
            }

            // Extended
            //
            if (n.name () == "Extended" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              if (!Extended_.present ())
              {
                this->Extended_.set (ExtendedTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!SmartCardReaderType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SmartCardReaderType",
              "http://www.smartmatic.com/SaesHardwareConfiguration");
          }

          if (!Extended_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Extended",
              "http://www.smartmatic.com/SaesHardwareConfiguration");
          }
        }

        SmartcardConfiguration* SmartcardConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class SmartcardConfiguration (*this, f, c);
        }

        SmartcardConfiguration::
        ~SmartcardConfiguration ()
        {
        }

        bool
        operator== (const SmartcardConfiguration& x, const SmartcardConfiguration& y)
        {
          if (!(x.getSmartCardReaderType () == y.getSmartCardReaderType ()))
            return false;

          if (!(x.getExtended () == y.getExtended ()))
            return false;

          return true;
        }

        bool
        operator!= (const SmartcardConfiguration& x, const SmartcardConfiguration& y)
        {
          return !(x == y);
        }

        // BarcodeDeviceConfiguration
        //

        BarcodeDeviceConfiguration::
        BarcodeDeviceConfiguration ()
        : ::Smartmatic::ConfigurationTypes::Type (),
          PortToLook_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigurationCommands_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SerialPollingTime_ (::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BarcodeDeviceConfiguration::
        BarcodeDeviceConfiguration (const SerialPollingTimeType& SerialPollingTime)
        : ::Smartmatic::ConfigurationTypes::Type (),
          PortToLook_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          ConfigurationCommands_ (::Smartmatic::ConfigurationTypes::Flags (), this),
          SerialPollingTime_ (SerialPollingTime, ::Smartmatic::ConfigurationTypes::Flags (), this)
        {
        }

        BarcodeDeviceConfiguration::
        BarcodeDeviceConfiguration (const BarcodeDeviceConfiguration& x,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (x, f, c),
          PortToLook_ (x.PortToLook_, f, this),
          ConfigurationCommands_ (x.ConfigurationCommands_, f, this),
          SerialPollingTime_ (x.SerialPollingTime_, f, this)
        {
        }

        BarcodeDeviceConfiguration::
        BarcodeDeviceConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::ConfigurationTypes::Flags f,
                                    ::Smartmatic::ConfigurationTypes::Container* c)
        : ::Smartmatic::ConfigurationTypes::Type (e, f | ::Smartmatic::ConfigurationTypes::Flags::base, c),
          PortToLook_ (f, this),
          ConfigurationCommands_ (f, this),
          SerialPollingTime_ (f, this)
        {
          if ((f & ::Smartmatic::ConfigurationTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void BarcodeDeviceConfiguration::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::ConfigurationTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PortToLook
            //
            if (n.name () == "PortToLook" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              ::std::auto_ptr< PortToLookType > r (
                PortToLookTraits::create (i, f, this));

              this->PortToLook_.push_back (r);
              continue;
            }

            // ConfigurationCommands
            //
            if (n.name () == "ConfigurationCommands" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              ::std::auto_ptr< ConfigurationCommandsType > r (
                ConfigurationCommandsTraits::create (i, f, this));

              this->ConfigurationCommands_.push_back (r);
              continue;
            }

            // SerialPollingTime
            //
            if (n.name () == "SerialPollingTime" && n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
            {
              if (!SerialPollingTime_.present ())
              {
                this->SerialPollingTime_.set (SerialPollingTimeTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!SerialPollingTime_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SerialPollingTime",
              "http://www.smartmatic.com/SaesHardwareConfiguration");
          }
        }

        BarcodeDeviceConfiguration* BarcodeDeviceConfiguration::
        _clone (::Smartmatic::ConfigurationTypes::Flags f,
                ::Smartmatic::ConfigurationTypes::Container* c) const
        {
          return new class BarcodeDeviceConfiguration (*this, f, c);
        }

        BarcodeDeviceConfiguration::
        ~BarcodeDeviceConfiguration ()
        {
        }

        bool
        operator== (const BarcodeDeviceConfiguration& x, const BarcodeDeviceConfiguration& y)
        {
          if (!(x.getPortToLook () == y.getPortToLook ()))
            return false;

          if (!(x.getConfigurationCommands () == y.getConfigurationCommands ()))
            return false;

          if (!(x.getSerialPollingTime () == y.getSerialPollingTime ()))
            return false;

          return true;
        }

        bool
        operator!= (const BarcodeDeviceConfiguration& x, const BarcodeDeviceConfiguration& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::std::string& u,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
            ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::std::string& u,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
            ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
            ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        const ::std::string& sid,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        const ::std::string& sid,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::xercesc::InputSource& i,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
            ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::xercesc::InputSource& i,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
            ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
            ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
              d, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::xercesc::DOMDocument& d,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p)
        {
          if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
          {
            ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
              ::Smartmatic::SAES::HW::Configuration::parseSaesHardwareConfiguration (
                c, f | ::Smartmatic::ConfigurationTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "SaesHardwareConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesHardwareConfiguration",
            "http://www.smartmatic.com/SaesHardwareConfiguration");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::Smartmatic::ConfigurationTypes::Flags f,
                                        const ::Smartmatic::ConfigurationTypes::Properties&)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::ConfigurationTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::ConfigurationTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::ConfigurationTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "SaesHardwareConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesHardwareConfiguration",
            "http://www.smartmatic.com/SaesHardwareConfiguration");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        void
        operator<< (::xercesc::DOMElement& e, const SaesHardwareConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // SmartcardConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SmartcardConfiguration",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << i.getSmartcardConfiguration ();
          }

          // BarcodeDeviceConfiguration
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "BarcodeDeviceConfiguration",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << i.getBarcodeDeviceConfiguration ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::std::ostream& o,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::std::ostream& o,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::ConfigurationTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::std::ostream& o,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            ::xercesc::DOMErrorHandler& h,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::xercesc::XMLFormatTarget& t,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::xercesc::XMLFormatTarget& t,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            ::Smartmatic::ConfigurationTypes::ErrorHandler& h,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::xercesc::XMLFormatTarget& t,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            ::xercesc::DOMErrorHandler& h,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeSaesHardwareConfiguration (::xercesc::DOMDocument& d,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            ::Smartmatic::ConfigurationTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "SaesHardwareConfiguration" &&
              n.namespace_ () == "http://www.smartmatic.com/SaesHardwareConfiguration")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "SaesHardwareConfiguration",
              "http://www.smartmatic.com/SaesHardwareConfiguration");
          }
        }

        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeSaesHardwareConfiguration (const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& s,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m,
                                            ::Smartmatic::ConfigurationTypes::Flags f)
        {
          ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "SaesHardwareConfiguration",
              "http://www.smartmatic.com/SaesHardwareConfiguration",
              m, f));

          ::Smartmatic::SAES::HW::Configuration::serializeSaesHardwareConfiguration (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const CardReaderType& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CardReaderType& i)
        {
          a << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream& l,
                    const CardReaderType& i)
        {
          l << static_cast< const ::Smartmatic::ConfigurationTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const BarcodeCommands& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // Command
          //
          for (BarcodeCommands::CommandConstIterator
               b (i.getCommand ().begin ()), n (i.getCommand ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Command",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << *b;
          }

          // CommandBlockName
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CommandBlockName",
                e));

            a << i.getCommandBlockName ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BarcodeCommand& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // Command
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Command",
                e));

            a << i.getCommand ();
          }

          // DelayResponse
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "DelayResponse",
                e));

            a << i.getDelayResponse ();
          }

          // Retries
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Retries",
                e));

            a << i.getRetries ();
          }

          // MandatorySent
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "MandatorySent",
                e));

            a << i.getMandatorySent ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SmartcardConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // SmartCardReaderType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SmartCardReaderType",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << i.getSmartCardReaderType ();
          }

          // Extended
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Extended",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << i.getExtended ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const BarcodeDeviceConfiguration& i)
        {
          e << static_cast< const ::Smartmatic::ConfigurationTypes::Type& > (i);

          // PortToLook
          //
          for (BarcodeDeviceConfiguration::PortToLookConstIterator
               b (i.getPortToLook ().begin ()), n (i.getPortToLook ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PortToLook",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << *b;
          }

          // ConfigurationCommands
          //
          for (BarcodeDeviceConfiguration::ConfigurationCommandsConstIterator
               b (i.getConfigurationCommands ().begin ()), n (i.getConfigurationCommands ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ConfigurationCommands",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << *b;
          }

          // SerialPollingTime
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SerialPollingTime",
                "http://www.smartmatic.com/SaesHardwareConfiguration",
                e));

            s << i.getSerialPollingTime ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

