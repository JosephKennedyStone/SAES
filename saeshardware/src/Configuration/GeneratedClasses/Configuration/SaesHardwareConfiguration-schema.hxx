// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SaesHardwareConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SAES_HARDWARE_CONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SAES_HARDWARE_CONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  /**
   * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
   * schema namespace.
   */
  namespace ConfigurationTypes
  {
    // anyType and anySimpleType.
    //

    /**
     * @brief C++ type corresponding to the anyType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::type Type;

    /**
     * @brief C++ type corresponding to the anySimpleType XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

    /**
     * @brief Alias for the anyType type.
     */
    typedef ::xsd::cxx::tree::type Container;


    // 8-bit
    //

    /**
     * @brief C++ type corresponding to the byte XML Schema
     * built-in type.
     */
    typedef signed char Byte;

    /**
     * @brief C++ type corresponding to the unsignedByte XML Schema
     * built-in type.
     */
    typedef unsigned char UnsignedByte;


    // 16-bit
    //

    /**
     * @brief C++ type corresponding to the short XML Schema
     * built-in type.
     */
    typedef short Short;

    /**
     * @brief C++ type corresponding to the unsignedShort XML Schema
     * built-in type.
     */
    typedef unsigned short UnsignedShort;


    // 32-bit
    //

    /**
     * @brief C++ type corresponding to the int XML Schema
     * built-in type.
     */
    typedef int Int;

    /**
     * @brief C++ type corresponding to the unsignedInt XML Schema
     * built-in type.
     */
    typedef unsigned int UnsignedInt;


    // 64-bit
    //

    /**
     * @brief C++ type corresponding to the long XML Schema
     * built-in type.
     */
    typedef long long Long;

    /**
     * @brief C++ type corresponding to the unsignedLong XML Schema
     * built-in type.
     */
    typedef unsigned long long UnsignedLong;


    // Supposed to be arbitrary-length integral types.
    //

    /**
     * @brief C++ type corresponding to the integer XML Schema
     * built-in type.
     */
    typedef long long Integer;

    /**
     * @brief C++ type corresponding to the nonPositiveInteger XML Schema
     * built-in type.
     */
    typedef long long NonPositiveInteger;

    /**
     * @brief C++ type corresponding to the nonNegativeInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long NonNegativeInteger;

    /**
     * @brief C++ type corresponding to the positiveInteger XML Schema
     * built-in type.
     */
    typedef unsigned long long PositiveInteger;

    /**
     * @brief C++ type corresponding to the negativeInteger XML Schema
     * built-in type.
     */
    typedef long long NegativeInteger;


    // Boolean.
    //

    /**
     * @brief C++ type corresponding to the boolean XML Schema
     * built-in type.
     */
    typedef bool Boolean;


    // Floating-point types.
    //

    /**
     * @brief C++ type corresponding to the float XML Schema
     * built-in type.
     */
    typedef float Float;

    /**
     * @brief C++ type corresponding to the double XML Schema
     * built-in type.
     */
    typedef double Double;

    /**
     * @brief C++ type corresponding to the decimal XML Schema
     * built-in type.
     */
    typedef double Decimal;


    // String types.
    //

    /**
     * @brief C++ type corresponding to the string XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::string< char, SimpleType > String;

    /**
     * @brief C++ type corresponding to the normalizedString XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

    /**
     * @brief C++ type corresponding to the token XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

    /**
     * @brief C++ type corresponding to the Name XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::name< char, Token > Name;

    /**
     * @brief C++ type corresponding to the NMTOKEN XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

    /**
     * @brief C++ type corresponding to the NMTOKENS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

    /**
     * @brief C++ type corresponding to the NCName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

    /**
     * @brief C++ type corresponding to the language XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::language< char, Token > Language;


    // ID/IDREF.
    //

    /**
     * @brief C++ type corresponding to the ID XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::id< char, Ncname > Id;

    /**
     * @brief C++ type corresponding to the IDREF XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

    /**
     * @brief C++ type corresponding to the IDREFS XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


    // URI.
    //

    /**
     * @brief C++ type corresponding to the anyURI XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


    // Qualified name.
    //

    /**
     * @brief C++ type corresponding to the QName XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


    // Binary.
    //

    /**
     * @brief Binary buffer type.
     */
    typedef ::xsd::cxx::tree::buffer< char > Buffer;

    /**
     * @brief C++ type corresponding to the base64Binary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

    /**
     * @brief C++ type corresponding to the hexBinary XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


    // Date/time.
    //

    /**
     * @brief Time zone type.
     */
    typedef ::xsd::cxx::tree::time_zone TimeZone;

    /**
     * @brief C++ type corresponding to the date XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

    /**
     * @brief C++ type corresponding to the dateTime XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

    /**
     * @brief C++ type corresponding to the duration XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

    /**
     * @brief C++ type corresponding to the gDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

    /**
     * @brief C++ type corresponding to the gMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

    /**
     * @brief C++ type corresponding to the gMonthDay XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

    /**
     * @brief C++ type corresponding to the gYear XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

    /**
     * @brief C++ type corresponding to the gYearMonth XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

    /**
     * @brief C++ type corresponding to the time XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


    // Entity.
    //

    /**
     * @brief C++ type corresponding to the ENTITY XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

    /**
     * @brief C++ type corresponding to the ENTITIES XML Schema
     * built-in type.
     */
    typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


    // Namespace information and list stream. Used in
    // serialization functions.
    //
    /**
     * @brief Namespace serialization information.
     */
    typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

    /**
     * @brief Namespace serialization information map.
     */
    typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

    /**
     * @brief List serialization stream.
     */
    typedef ::xsd::cxx::tree::list_stream< char > ListStream;

    /**
     * @brief Serialization wrapper for the %double type.
     */
    typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

    /**
     * @brief Serialization wrapper for the %decimal type.
     */
    typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

    /**
     * @brief Simple type facet.
     */
    typedef ::xsd::cxx::tree::facet Facet;

    // Flags and properties.
    //

    /**
     * @brief Parsing and serialization flags.
     */
    typedef ::xsd::cxx::tree::flags Flags;

    /**
     * @brief Parsing properties.
     */
    typedef ::xsd::cxx::tree::properties< char > Properties;

    // Parsing/serialization diagnostics.
    //

    /**
     * @brief Error severity.
     */
    typedef ::xsd::cxx::tree::severity Severity;

    /**
     * @brief Error condition.
     */
    typedef ::xsd::cxx::tree::error< char > Error;

    /**
     * @brief List of %error conditions.
     */
    typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

    // Exceptions.
    //

    /**
     * @brief Root of the C++/Tree %exception hierarchy.
     */
    typedef ::xsd::cxx::tree::exception< char > Exception;

    /**
     * @brief Exception indicating that the size argument exceeds
     * the capacity argument.
     */
    typedef ::xsd::cxx::tree::bounds< char > Bounds;

    /**
     * @brief Exception indicating that a duplicate ID value
     * was encountered in the object model.
     */
    typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

    /**
     * @brief Exception indicating a parsing failure.
     */
    typedef ::xsd::cxx::tree::parsing< char > Parsing;

    /**
     * @brief Exception indicating that an expected element
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

    /**
     * @brief Exception indicating that an unexpected element
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

    /**
     * @brief Exception indicating that an expected attribute
     * was not encountered.
     */
    typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

    /**
     * @brief Exception indicating that an unexpected enumerator
     * was encountered.
     */
    typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

    /**
     * @brief Exception indicating that the text content was
     * expected for an element.
     */
    typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

    /**
     * @brief Exception indicating that a prefix-namespace
     * mapping was not provided.
     */
    typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

    /**
     * @brief Exception indicating a serialization failure.
     */
    typedef ::xsd::cxx::tree::serialization< char > Serialization;

    /**
     * @brief Error handler callback interface.
     */
    typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

    /**
     * @brief DOM interaction.
     */
    namespace dom
    {
      /**
       * @brief Automatic pointer for DOMDocument.
       */
      using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__CONFIGURATIONTYPES
      /**
       * @brief DOM user data key for back pointers to tree nodes.
       */
      const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        class SaesHardwareConfiguration;
        class CardReaderType;
        class BarcodeCommands;
        class BarcodeCommand;
        class SmartcardConfiguration;
        class BarcodeDeviceConfiguration;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/SaesHardwareConfiguration
       * schema namespace.
       */
      namespace Configuration
      {
        /**
         * @brief Class corresponding to the %SaesHardwareConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SaesHardwareConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name SmartcardConfiguration
           *
           * @brief Accessor and modifier functions for the %SmartcardConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::HW::Configuration::SmartcardConfiguration SmartcardConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SmartcardConfigurationType, char > SmartcardConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SmartcardConfigurationType&
          getSmartcardConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SmartcardConfigurationType&
          getSmartcardConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSmartcardConfiguration (const SmartcardConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSmartcardConfiguration (::std::auto_ptr< SmartcardConfigurationType > p);

          //@}

          /**
           * @name BarcodeDeviceConfiguration
           *
           * @brief Accessor and modifier functions for the %BarcodeDeviceConfiguration
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::HW::Configuration::BarcodeDeviceConfiguration BarcodeDeviceConfigurationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BarcodeDeviceConfigurationType, char > BarcodeDeviceConfigurationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BarcodeDeviceConfigurationType&
          getBarcodeDeviceConfiguration () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BarcodeDeviceConfigurationType&
          getBarcodeDeviceConfiguration ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBarcodeDeviceConfiguration (const BarcodeDeviceConfigurationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBarcodeDeviceConfiguration (::std::auto_ptr< BarcodeDeviceConfigurationType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SaesHardwareConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SaesHardwareConfiguration (const SmartcardConfigurationType&,
                                     const BarcodeDeviceConfigurationType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          SaesHardwareConfiguration (::std::auto_ptr< SmartcardConfigurationType >&,
                                     ::std::auto_ptr< BarcodeDeviceConfigurationType >&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SaesHardwareConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SaesHardwareConfiguration (const SaesHardwareConfiguration& x,
                                     ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SaesHardwareConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SaesHardwareConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< SmartcardConfigurationType > SmartcardConfiguration_;
          ::xsd::cxx::tree::one< BarcodeDeviceConfigurationType > BarcodeDeviceConfiguration_;

          //@endcond
        };

        bool
        operator== (const SaesHardwareConfiguration&, const SaesHardwareConfiguration&);

        bool
        operator!= (const SaesHardwareConfiguration&, const SaesHardwareConfiguration&);


        /**
         * @brief Enumeration class corresponding to the %CardReaderType
         * schema type.
         */
        class CardReaderType: public ::Smartmatic::ConfigurationTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CONFIGURATION_AU9520,
            CONFIGURATION_ATHENA
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CardReaderType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CardReaderType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CardReaderType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CardReaderType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CardReaderType (const ::Smartmatic::ConfigurationTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardReaderType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardReaderType (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CardReaderType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CardReaderType (const CardReaderType& x,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CardReaderType*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CardReaderType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CardReaderType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CardReaderType_convert () const;

          public:
          static const char* const _xsd_CardReaderType_literals_[2];
          static const Value _xsd_CardReaderType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %BarcodeCommands schema type.
         *
         * @nosubgrouping
         */
        class BarcodeCommands: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name Command
           *
           * @brief Accessor and modifier functions for the %Command
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::HW::Configuration::BarcodeCommand CommandType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< CommandType > CommandSequence;

          /**
           * @brief Element iterator type.
           */
          typedef CommandSequence::iterator CommandIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef CommandSequence::const_iterator CommandConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CommandType, char > CommandTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const CommandSequence&
          getCommand () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          CommandSequence&
          getCommand ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setCommand (const CommandSequence& s);

          //@}

          /**
           * @name CommandBlockName
           *
           * @brief Accessor and modifier functions for the %CommandBlockName
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CommandBlockNameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CommandBlockNameType, char > CommandBlockNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CommandBlockNameType&
          getCommandBlockName () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CommandBlockNameType&
          getCommandBlockName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCommandBlockName (const CommandBlockNameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCommandBlockName (::std::auto_ptr< CommandBlockNameType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BarcodeCommands ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BarcodeCommands (const CommandBlockNameType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BarcodeCommands (const ::xercesc::DOMElement& e,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BarcodeCommands (const BarcodeCommands& x,
                           ::Smartmatic::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BarcodeCommands*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BarcodeCommands ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          CommandSequence Command_;
          ::xsd::cxx::tree::one< CommandBlockNameType > CommandBlockName_;

          //@endcond
        };

        bool
        operator== (const BarcodeCommands&, const BarcodeCommands&);

        bool
        operator!= (const BarcodeCommands&, const BarcodeCommands&);


        /**
         * @brief Class corresponding to the %BarcodeCommand schema type.
         *
         * @nosubgrouping
         */
        class BarcodeCommand: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name Command
           *
           * @brief Accessor and modifier functions for the %Command
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String CommandType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CommandType, char > CommandTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CommandType&
          getCommand () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CommandType&
          getCommand ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCommand (const CommandType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCommand (::std::auto_ptr< CommandType > p);

          //@}

          /**
           * @name DelayResponse
           *
           * @brief Accessor and modifier functions for the %DelayResponse
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger DelayResponseType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DelayResponseType, char > DelayResponseTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DelayResponseType&
          getDelayResponse () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DelayResponseType&
          getDelayResponse ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDelayResponse (const DelayResponseType& x);

          //@}

          /**
           * @name Retries
           *
           * @brief Accessor and modifier functions for the %Retries
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::NonNegativeInteger RetriesType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< RetriesType, char > RetriesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const RetriesType&
          getRetries () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          RetriesType&
          getRetries ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setRetries (const RetriesType& x);

          //@}

          /**
           * @name MandatorySent
           *
           * @brief Accessor and modifier functions for the %MandatorySent
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean MandatorySentType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< MandatorySentType, char > MandatorySentTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const MandatorySentType&
          getMandatorySent () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          MandatorySentType&
          getMandatorySent ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMandatorySent (const MandatorySentType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BarcodeCommand ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BarcodeCommand (const CommandType&,
                          const DelayResponseType&,
                          const RetriesType&,
                          const MandatorySentType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BarcodeCommand (const ::xercesc::DOMElement& e,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BarcodeCommand (const BarcodeCommand& x,
                          ::Smartmatic::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BarcodeCommand*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BarcodeCommand ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CommandType > Command_;
          ::xsd::cxx::tree::one< DelayResponseType > DelayResponse_;
          ::xsd::cxx::tree::one< RetriesType > Retries_;
          ::xsd::cxx::tree::one< MandatorySentType > MandatorySent_;

          //@endcond
        };

        bool
        operator== (const BarcodeCommand&, const BarcodeCommand&);

        bool
        operator!= (const BarcodeCommand&, const BarcodeCommand&);


        /**
         * @brief Class corresponding to the %SmartcardConfiguration schema type.
         *
         * @nosubgrouping
         */
        class SmartcardConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name SmartCardReaderType
           *
           * @brief Accessor and modifier functions for the %SmartCardReaderType
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::HW::Configuration::CardReaderType SmartCardReaderTypeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SmartCardReaderTypeType, char > SmartCardReaderTypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SmartCardReaderTypeType&
          getSmartCardReaderType () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SmartCardReaderTypeType&
          getSmartCardReaderType ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSmartCardReaderType (const SmartCardReaderTypeType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSmartCardReaderType (::std::auto_ptr< SmartCardReaderTypeType > p);

          //@}

          /**
           * @name Extended
           *
           * @brief Accessor and modifier functions for the %Extended
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Boolean ExtendedType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ExtendedType, char > ExtendedTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ExtendedType&
          getExtended () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ExtendedType&
          getExtended ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setExtended (const ExtendedType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          SmartcardConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SmartcardConfiguration (const SmartCardReaderTypeType&,
                                  const ExtendedType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SmartcardConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          SmartcardConfiguration (const SmartcardConfiguration& x,
                                  ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SmartcardConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~SmartcardConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< SmartCardReaderTypeType > SmartCardReaderType_;
          ::xsd::cxx::tree::one< ExtendedType > Extended_;

          //@endcond
        };

        bool
        operator== (const SmartcardConfiguration&, const SmartcardConfiguration&);

        bool
        operator!= (const SmartcardConfiguration&, const SmartcardConfiguration&);


        /**
         * @brief Class corresponding to the %BarcodeDeviceConfiguration schema type.
         *
         * @nosubgrouping
         */
        class BarcodeDeviceConfiguration: public ::Smartmatic::ConfigurationTypes::Type
        {
          public:
          /**
           * @name PortToLook
           *
           * @brief Accessor and modifier functions for the %PortToLook
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::String PortToLookType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< PortToLookType > PortToLookSequence;

          /**
           * @brief Element iterator type.
           */
          typedef PortToLookSequence::iterator PortToLookIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef PortToLookSequence::const_iterator PortToLookConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PortToLookType, char > PortToLookTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const PortToLookSequence&
          getPortToLook () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          PortToLookSequence&
          getPortToLook ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setPortToLook (const PortToLookSequence& s);

          //@}

          /**
           * @name ConfigurationCommands
           *
           * @brief Accessor and modifier functions for the %ConfigurationCommands
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::HW::Configuration::BarcodeCommands ConfigurationCommandsType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ConfigurationCommandsType > ConfigurationCommandsSequence;

          /**
           * @brief Element iterator type.
           */
          typedef ConfigurationCommandsSequence::iterator ConfigurationCommandsIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ConfigurationCommandsSequence::const_iterator ConfigurationCommandsConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ConfigurationCommandsType, char > ConfigurationCommandsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ConfigurationCommandsSequence&
          getConfigurationCommands () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ConfigurationCommandsSequence&
          getConfigurationCommands ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setConfigurationCommands (const ConfigurationCommandsSequence& s);

          //@}

          /**
           * @name SerialPollingTime
           *
           * @brief Accessor and modifier functions for the %SerialPollingTime
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::ConfigurationTypes::Integer SerialPollingTimeType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SerialPollingTimeType, char > SerialPollingTimeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SerialPollingTimeType&
          getSerialPollingTime () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SerialPollingTimeType&
          getSerialPollingTime ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSerialPollingTime (const SerialPollingTimeType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          BarcodeDeviceConfiguration ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BarcodeDeviceConfiguration (const SerialPollingTimeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BarcodeDeviceConfiguration (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          BarcodeDeviceConfiguration (const BarcodeDeviceConfiguration& x,
                                      ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                      ::Smartmatic::ConfigurationTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BarcodeDeviceConfiguration*
          _clone (::Smartmatic::ConfigurationTypes::Flags f = 0,
                  ::Smartmatic::ConfigurationTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~BarcodeDeviceConfiguration ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::ConfigurationTypes::Flags);

          protected:
          PortToLookSequence PortToLook_;
          ConfigurationCommandsSequence ConfigurationCommands_;
          ::xsd::cxx::tree::one< SerialPollingTimeType > SerialPollingTime_;

          //@endcond
        };

        bool
        operator== (const BarcodeDeviceConfiguration&, const BarcodeDeviceConfiguration&);

        bool
        operator!= (const BarcodeDeviceConfiguration&, const BarcodeDeviceConfiguration&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        /**
         * @name Parsing functions for the %SaesHardwareConfiguration document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::std::string& uri,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::std::string& uri,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        const ::std::string& id,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        const ::std::string& id,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::xercesc::InputSource& is,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::xercesc::InputSource& is,
                                        ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (const ::xercesc::DOMDocument& d,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration >
        parseSaesHardwareConfiguration (::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::Smartmatic::ConfigurationTypes::Flags f = 0,
                                        const ::Smartmatic::ConfigurationTypes::Properties& p = ::Smartmatic::ConfigurationTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace HW
    {
      namespace Configuration
      {
        void
        operator<< (::xercesc::DOMElement&, const SaesHardwareConfiguration&);

        /**
         * @name Serialization functions for the %SaesHardwareConfiguration document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeSaesHardwareConfiguration (::std::ostream& os,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesHardwareConfiguration (::std::ostream& os,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesHardwareConfiguration (::std::ostream& os,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeSaesHardwareConfiguration (::xercesc::XMLFormatTarget& ft,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesHardwareConfiguration (::xercesc::XMLFormatTarget& ft,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            ::Smartmatic::ConfigurationTypes::ErrorHandler& eh,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeSaesHardwareConfiguration (::xercesc::XMLFormatTarget& ft,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeSaesHardwareConfiguration (::xercesc::DOMDocument& d,
                                            const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x,
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeSaesHardwareConfiguration (const ::Smartmatic::SAES::HW::Configuration::SaesHardwareConfiguration& x, 
                                            const ::Smartmatic::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::ConfigurationTypes::NamespaceInfomap (),
                                            ::Smartmatic::ConfigurationTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const CardReaderType&);

        void
        operator<< (::xercesc::DOMAttr&, const CardReaderType&);

        void
        operator<< (::Smartmatic::ConfigurationTypes::ListStream&,
                    const CardReaderType&);

        void
        operator<< (::xercesc::DOMElement&, const BarcodeCommands&);

        void
        operator<< (::xercesc::DOMElement&, const BarcodeCommand&);

        void
        operator<< (::xercesc::DOMElement&, const SmartcardConfiguration&);

        void
        operator<< (::xercesc::DOMElement&, const BarcodeDeviceConfiguration&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SAES_HARDWARE_CONFIGURATION_SCHEMA_HXX
