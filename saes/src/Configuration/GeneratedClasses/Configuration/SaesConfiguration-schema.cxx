// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SaesConfiguration-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      // TextConfiguration
      // 

      const TextConfiguration::SizeType& TextConfiguration::
      getSize () const
      {
        return this->Size_.get ();
      }

      TextConfiguration::SizeType& TextConfiguration::
      getSize ()
      {
        return this->Size_.get ();
      }

      void TextConfiguration::
      setSize (const SizeType& x)
      {
        this->Size_.set (x);
      }

      const TextConfiguration::FontFamilyType& TextConfiguration::
      getFontFamily () const
      {
        return this->FontFamily_.get ();
      }

      TextConfiguration::FontFamilyType& TextConfiguration::
      getFontFamily ()
      {
        return this->FontFamily_.get ();
      }

      void TextConfiguration::
      setFontFamily (const FontFamilyType& x)
      {
        this->FontFamily_.set (x);
      }

      void TextConfiguration::
      setFontFamily (::std::auto_ptr< FontFamilyType > x)
      {
        this->FontFamily_.set (x);
      }

      const TextConfiguration::BoldType& TextConfiguration::
      getBold () const
      {
        return this->Bold_.get ();
      }

      TextConfiguration::BoldType& TextConfiguration::
      getBold ()
      {
        return this->Bold_.get ();
      }

      void TextConfiguration::
      setBold (const BoldType& x)
      {
        this->Bold_.set (x);
      }

      const TextConfiguration::ItalicType& TextConfiguration::
      getItalic () const
      {
        return this->Italic_.get ();
      }

      TextConfiguration::ItalicType& TextConfiguration::
      getItalic ()
      {
        return this->Italic_.get ();
      }

      void TextConfiguration::
      setItalic (const ItalicType& x)
      {
        this->Italic_.set (x);
      }

      const TextConfiguration::HPanddingType& TextConfiguration::
      getHPandding () const
      {
        return this->HPandding_.get ();
      }

      TextConfiguration::HPanddingType& TextConfiguration::
      getHPandding ()
      {
        return this->HPandding_.get ();
      }

      void TextConfiguration::
      setHPandding (const HPanddingType& x)
      {
        this->HPandding_.set (x);
      }

      const TextConfiguration::VPanddingType& TextConfiguration::
      getVPandding () const
      {
        return this->VPandding_.get ();
      }

      TextConfiguration::VPanddingType& TextConfiguration::
      getVPandding ()
      {
        return this->VPandding_.get ();
      }

      void TextConfiguration::
      setVPandding (const VPanddingType& x)
      {
        this->VPandding_.set (x);
      }

      const TextConfiguration::AlignType& TextConfiguration::
      getAlign () const
      {
        return this->Align_.get ();
      }

      TextConfiguration::AlignType& TextConfiguration::
      getAlign ()
      {
        return this->Align_.get ();
      }

      void TextConfiguration::
      setAlign (const AlignType& x)
      {
        this->Align_.set (x);
      }

      void TextConfiguration::
      setAlign (::std::auto_ptr< AlignType > x)
      {
        this->Align_.set (x);
      }

      const TextConfiguration::LevelPaddingSpaceCharType& TextConfiguration::
      getLevelPaddingSpaceChar () const
      {
        return this->LevelPaddingSpaceChar_.get ();
      }

      TextConfiguration::LevelPaddingSpaceCharType& TextConfiguration::
      getLevelPaddingSpaceChar ()
      {
        return this->LevelPaddingSpaceChar_.get ();
      }

      void TextConfiguration::
      setLevelPaddingSpaceChar (const LevelPaddingSpaceCharType& x)
      {
        this->LevelPaddingSpaceChar_.set (x);
      }

      const TextConfiguration::VisibleType& TextConfiguration::
      getVisible () const
      {
        return this->Visible_.get ();
      }

      TextConfiguration::VisibleType& TextConfiguration::
      getVisible ()
      {
        return this->Visible_.get ();
      }

      void TextConfiguration::
      setVisible (const VisibleType& x)
      {
        this->Visible_.set (x);
      }


      // AlignType
      // 

      AlignType::
      AlignType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      AlignType::
      AlignType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_AlignType_literals_[v])
      {
      }

      AlignType::
      AlignType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      AlignType::
      AlignType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      AlignType::
      AlignType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      AlignType::
      AlignType (const AlignType& v,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      AlignType& AlignType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_AlignType_literals_[v]);

        return *this;
      }


      // VoteChecksumType
      // 

      VoteChecksumType::
      VoteChecksumType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      VoteChecksumType::
      VoteChecksumType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_VoteChecksumType_literals_[v])
      {
      }

      VoteChecksumType::
      VoteChecksumType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteChecksumType::
      VoteChecksumType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteChecksumType::
      VoteChecksumType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteChecksumType::
      VoteChecksumType (const VoteChecksumType& v,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      VoteChecksumType& VoteChecksumType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_VoteChecksumType_literals_[v]);

        return *this;
      }


      // VoteEncodeModeType
      // 

      VoteEncodeModeType::
      VoteEncodeModeType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      VoteEncodeModeType::
      VoteEncodeModeType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_VoteEncodeModeType_literals_[v])
      {
      }

      VoteEncodeModeType::
      VoteEncodeModeType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteEncodeModeType::
      VoteEncodeModeType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteEncodeModeType::
      VoteEncodeModeType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteEncodeModeType::
      VoteEncodeModeType (const VoteEncodeModeType& v,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      VoteEncodeModeType& VoteEncodeModeType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_VoteEncodeModeType_literals_[v]);

        return *this;
      }


      // LayoutBallotOptiontType
      // 

      LayoutBallotOptiontType::
      LayoutBallotOptiontType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_LayoutBallotOptiontType_literals_[v])
      {
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const LayoutBallotOptiontType& v,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      LayoutBallotOptiontType& LayoutBallotOptiontType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_LayoutBallotOptiontType_literals_[v]);

        return *this;
      }


      // LayoutSuperBlankType
      // 

      LayoutSuperBlankType::
      LayoutSuperBlankType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_LayoutSuperBlankType_literals_[v])
      {
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (const LayoutSuperBlankType& v,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      LayoutSuperBlankType& LayoutSuperBlankType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_LayoutSuperBlankType_literals_[v]);

        return *this;
      }


      // LayoutContestType
      // 

      LayoutContestType::
      LayoutContestType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      LayoutContestType::
      LayoutContestType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_LayoutContestType_literals_[v])
      {
      }

      LayoutContestType::
      LayoutContestType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutContestType::
      LayoutContestType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutContestType::
      LayoutContestType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      LayoutContestType::
      LayoutContestType (const LayoutContestType& v,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      LayoutContestType& LayoutContestType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_LayoutContestType_literals_[v]);

        return *this;
      }


      // QRcodePosition
      // 

      QRcodePosition::
      QRcodePosition ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      QRcodePosition::
      QRcodePosition (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_QRcodePosition_literals_[v])
      {
      }

      QRcodePosition::
      QRcodePosition (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      QRcodePosition::
      QRcodePosition (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      QRcodePosition::
      QRcodePosition (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      QRcodePosition::
      QRcodePosition (const QRcodePosition& v,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      QRcodePosition& QRcodePosition::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_QRcodePosition_literals_[v]);

        return *this;
      }


      // CorrectionModeQRCode
      // 

      CorrectionModeQRCode::
      CorrectionModeQRCode ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_CorrectionModeQRCode_literals_[v])
      {
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (const CorrectionModeQRCode& v,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      CorrectionModeQRCode& CorrectionModeQRCode::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_CorrectionModeQRCode_literals_[v]);

        return *this;
      }


      // QRCodePrintingModeType
      // 

      QRCodePrintingModeType::
      QRCodePrintingModeType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_QRCodePrintingModeType_literals_[v])
      {
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (const QRCodePrintingModeType& v,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      QRCodePrintingModeType& QRCodePrintingModeType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_QRCodePrintingModeType_literals_[v]);

        return *this;
      }


      // LayoutContestConfiguration
      // 

      const LayoutContestConfiguration::LayoutContestTypeType& LayoutContestConfiguration::
      getLayoutContestType () const
      {
        return this->LayoutContestType_.get ();
      }

      LayoutContestConfiguration::LayoutContestTypeType& LayoutContestConfiguration::
      getLayoutContestType ()
      {
        return this->LayoutContestType_.get ();
      }

      void LayoutContestConfiguration::
      setLayoutContestType (const LayoutContestTypeType& x)
      {
        this->LayoutContestType_.set (x);
      }

      void LayoutContestConfiguration::
      setLayoutContestType (::std::auto_ptr< LayoutContestTypeType > x)
      {
        this->LayoutContestType_.set (x);
      }

      const LayoutContestConfiguration::TextBallotOptionType& LayoutContestConfiguration::
      getTextBallotOption () const
      {
        return this->TextBallotOption_.get ();
      }

      LayoutContestConfiguration::TextBallotOptionType& LayoutContestConfiguration::
      getTextBallotOption ()
      {
        return this->TextBallotOption_.get ();
      }

      void LayoutContestConfiguration::
      setTextBallotOption (const TextBallotOptionType& x)
      {
        this->TextBallotOption_.set (x);
      }

      void LayoutContestConfiguration::
      setTextBallotOption (::std::auto_ptr< TextBallotOptionType > x)
      {
        this->TextBallotOption_.set (x);
      }

      const LayoutContestConfiguration::CompleteWithSpacesType& LayoutContestConfiguration::
      getCompleteWithSpaces () const
      {
        return this->CompleteWithSpaces_.get ();
      }

      LayoutContestConfiguration::CompleteWithSpacesType& LayoutContestConfiguration::
      getCompleteWithSpaces ()
      {
        return this->CompleteWithSpaces_.get ();
      }

      void LayoutContestConfiguration::
      setCompleteWithSpaces (const CompleteWithSpacesType& x)
      {
        this->CompleteWithSpaces_.set (x);
      }


      // ConfigurationVote
      // 

      const ConfigurationVote::PaddingCharType& ConfigurationVote::
      getPaddingChar () const
      {
        return this->PaddingChar_.get ();
      }

      ConfigurationVote::PaddingCharType& ConfigurationVote::
      getPaddingChar ()
      {
        return this->PaddingChar_.get ();
      }

      void ConfigurationVote::
      setPaddingChar (const PaddingCharType& x)
      {
        this->PaddingChar_.set (x);
      }

      void ConfigurationVote::
      setPaddingChar (::std::auto_ptr< PaddingCharType > x)
      {
        this->PaddingChar_.set (x);
      }

      const ConfigurationVote::PrintToPdfType& ConfigurationVote::
      getPrintToPdf () const
      {
        return this->PrintToPdf_.get ();
      }

      ConfigurationVote::PrintToPdfType& ConfigurationVote::
      getPrintToPdf ()
      {
        return this->PrintToPdf_.get ();
      }

      void ConfigurationVote::
      setPrintToPdf (const PrintToPdfType& x)
      {
        this->PrintToPdf_.set (x);
      }

      const ConfigurationVote::QRcodePositionType& ConfigurationVote::
      getQRcodePosition () const
      {
        return this->QRcodePosition_.get ();
      }

      ConfigurationVote::QRcodePositionType& ConfigurationVote::
      getQRcodePosition ()
      {
        return this->QRcodePosition_.get ();
      }

      void ConfigurationVote::
      setQRcodePosition (const QRcodePositionType& x)
      {
        this->QRcodePosition_.set (x);
      }

      void ConfigurationVote::
      setQRcodePosition (::std::auto_ptr< QRcodePositionType > x)
      {
        this->QRcodePosition_.set (x);
      }

      const ConfigurationVote::QRCodePrintingModeType& ConfigurationVote::
      getQRCodePrintingMode () const
      {
        return this->QRCodePrintingMode_.get ();
      }

      ConfigurationVote::QRCodePrintingModeType& ConfigurationVote::
      getQRCodePrintingMode ()
      {
        return this->QRCodePrintingMode_.get ();
      }

      void ConfigurationVote::
      setQRCodePrintingMode (const QRCodePrintingModeType& x)
      {
        this->QRCodePrintingMode_.set (x);
      }

      void ConfigurationVote::
      setQRCodePrintingMode (::std::auto_ptr< QRCodePrintingModeType > x)
      {
        this->QRCodePrintingMode_.set (x);
      }

      const ConfigurationVote::LevelPaddingSpaceCharSizeType& ConfigurationVote::
      getLevelPaddingSpaceCharSize () const
      {
        return this->LevelPaddingSpaceCharSize_.get ();
      }

      ConfigurationVote::LevelPaddingSpaceCharSizeType& ConfigurationVote::
      getLevelPaddingSpaceCharSize ()
      {
        return this->LevelPaddingSpaceCharSize_.get ();
      }

      void ConfigurationVote::
      setLevelPaddingSpaceCharSize (const LevelPaddingSpaceCharSizeType& x)
      {
        this->LevelPaddingSpaceCharSize_.set (x);
      }

      const ConfigurationVote::MaxBallotOptionLastNameCharsType& ConfigurationVote::
      getMaxBallotOptionLastNameChars () const
      {
        return this->MaxBallotOptionLastNameChars_.get ();
      }

      ConfigurationVote::MaxBallotOptionLastNameCharsType& ConfigurationVote::
      getMaxBallotOptionLastNameChars ()
      {
        return this->MaxBallotOptionLastNameChars_.get ();
      }

      void ConfigurationVote::
      setMaxBallotOptionLastNameChars (const MaxBallotOptionLastNameCharsType& x)
      {
        this->MaxBallotOptionLastNameChars_.set (x);
      }

      const ConfigurationVote::MaxBallotOptionNameCharsType& ConfigurationVote::
      getMaxBallotOptionNameChars () const
      {
        return this->MaxBallotOptionNameChars_.get ();
      }

      ConfigurationVote::MaxBallotOptionNameCharsType& ConfigurationVote::
      getMaxBallotOptionNameChars ()
      {
        return this->MaxBallotOptionNameChars_.get ();
      }

      void ConfigurationVote::
      setMaxBallotOptionNameChars (const MaxBallotOptionNameCharsType& x)
      {
        this->MaxBallotOptionNameChars_.set (x);
      }

      const ConfigurationVote::MaxBallotOptionCodeCharsType& ConfigurationVote::
      getMaxBallotOptionCodeChars () const
      {
        return this->MaxBallotOptionCodeChars_.get ();
      }

      ConfigurationVote::MaxBallotOptionCodeCharsType& ConfigurationVote::
      getMaxBallotOptionCodeChars ()
      {
        return this->MaxBallotOptionCodeChars_.get ();
      }

      void ConfigurationVote::
      setMaxBallotOptionCodeChars (const MaxBallotOptionCodeCharsType& x)
      {
        this->MaxBallotOptionCodeChars_.set (x);
      }

      const ConfigurationVote::BallotOptionNameSeparatorType& ConfigurationVote::
      getBallotOptionNameSeparator () const
      {
        return this->BallotOptionNameSeparator_.get ();
      }

      ConfigurationVote::BallotOptionNameSeparatorType& ConfigurationVote::
      getBallotOptionNameSeparator ()
      {
        return this->BallotOptionNameSeparator_.get ();
      }

      void ConfigurationVote::
      setBallotOptionNameSeparator (const BallotOptionNameSeparatorType& x)
      {
        this->BallotOptionNameSeparator_.set (x);
      }

      void ConfigurationVote::
      setBallotOptionNameSeparator (::std::auto_ptr< BallotOptionNameSeparatorType > x)
      {
        this->BallotOptionNameSeparator_.set (x);
      }

      const ConfigurationVote::DirectPrintingType& ConfigurationVote::
      getDirectPrinting () const
      {
        return this->DirectPrinting_.get ();
      }

      ConfigurationVote::DirectPrintingType& ConfigurationVote::
      getDirectPrinting ()
      {
        return this->DirectPrinting_.get ();
      }

      void ConfigurationVote::
      setDirectPrinting (const DirectPrintingType& x)
      {
        this->DirectPrinting_.set (x);
      }

      const ConfigurationVote::TextHeader1Type& ConfigurationVote::
      getTextHeader1 () const
      {
        return this->TextHeader1_.get ();
      }

      ConfigurationVote::TextHeader1Type& ConfigurationVote::
      getTextHeader1 ()
      {
        return this->TextHeader1_.get ();
      }

      void ConfigurationVote::
      setTextHeader1 (const TextHeader1Type& x)
      {
        this->TextHeader1_.set (x);
      }

      void ConfigurationVote::
      setTextHeader1 (::std::auto_ptr< TextHeader1Type > x)
      {
        this->TextHeader1_.set (x);
      }

      const ConfigurationVote::TextHeader2Type& ConfigurationVote::
      getTextHeader2 () const
      {
        return this->TextHeader2_.get ();
      }

      ConfigurationVote::TextHeader2Type& ConfigurationVote::
      getTextHeader2 ()
      {
        return this->TextHeader2_.get ();
      }

      void ConfigurationVote::
      setTextHeader2 (const TextHeader2Type& x)
      {
        this->TextHeader2_.set (x);
      }

      void ConfigurationVote::
      setTextHeader2 (::std::auto_ptr< TextHeader2Type > x)
      {
        this->TextHeader2_.set (x);
      }

      const ConfigurationVote::TextHeader3Type& ConfigurationVote::
      getTextHeader3 () const
      {
        return this->TextHeader3_.get ();
      }

      ConfigurationVote::TextHeader3Type& ConfigurationVote::
      getTextHeader3 ()
      {
        return this->TextHeader3_.get ();
      }

      void ConfigurationVote::
      setTextHeader3 (const TextHeader3Type& x)
      {
        this->TextHeader3_.set (x);
      }

      void ConfigurationVote::
      setTextHeader3 (::std::auto_ptr< TextHeader3Type > x)
      {
        this->TextHeader3_.set (x);
      }

      const ConfigurationVote::TextHeader4Type& ConfigurationVote::
      getTextHeader4 () const
      {
        return this->TextHeader4_.get ();
      }

      ConfigurationVote::TextHeader4Type& ConfigurationVote::
      getTextHeader4 ()
      {
        return this->TextHeader4_.get ();
      }

      void ConfigurationVote::
      setTextHeader4 (const TextHeader4Type& x)
      {
        this->TextHeader4_.set (x);
      }

      void ConfigurationVote::
      setTextHeader4 (::std::auto_ptr< TextHeader4Type > x)
      {
        this->TextHeader4_.set (x);
      }

      const ConfigurationVote::TextHeader5Type& ConfigurationVote::
      getTextHeader5 () const
      {
        return this->TextHeader5_.get ();
      }

      ConfigurationVote::TextHeader5Type& ConfigurationVote::
      getTextHeader5 ()
      {
        return this->TextHeader5_.get ();
      }

      void ConfigurationVote::
      setTextHeader5 (const TextHeader5Type& x)
      {
        this->TextHeader5_.set (x);
      }

      void ConfigurationVote::
      setTextHeader5 (::std::auto_ptr< TextHeader5Type > x)
      {
        this->TextHeader5_.set (x);
      }

      const ConfigurationVote::TextHeader6Type& ConfigurationVote::
      getTextHeader6 () const
      {
        return this->TextHeader6_.get ();
      }

      ConfigurationVote::TextHeader6Type& ConfigurationVote::
      getTextHeader6 ()
      {
        return this->TextHeader6_.get ();
      }

      void ConfigurationVote::
      setTextHeader6 (const TextHeader6Type& x)
      {
        this->TextHeader6_.set (x);
      }

      void ConfigurationVote::
      setTextHeader6 (::std::auto_ptr< TextHeader6Type > x)
      {
        this->TextHeader6_.set (x);
      }

      const ConfigurationVote::TextHeader7Type& ConfigurationVote::
      getTextHeader7 () const
      {
        return this->TextHeader7_.get ();
      }

      ConfigurationVote::TextHeader7Type& ConfigurationVote::
      getTextHeader7 ()
      {
        return this->TextHeader7_.get ();
      }

      void ConfigurationVote::
      setTextHeader7 (const TextHeader7Type& x)
      {
        this->TextHeader7_.set (x);
      }

      void ConfigurationVote::
      setTextHeader7 (::std::auto_ptr< TextHeader7Type > x)
      {
        this->TextHeader7_.set (x);
      }

      const ConfigurationVote::TextHeaderCustomAttributesType& ConfigurationVote::
      getTextHeaderCustomAttributes () const
      {
        return this->TextHeaderCustomAttributes_.get ();
      }

      ConfigurationVote::TextHeaderCustomAttributesType& ConfigurationVote::
      getTextHeaderCustomAttributes ()
      {
        return this->TextHeaderCustomAttributes_.get ();
      }

      void ConfigurationVote::
      setTextHeaderCustomAttributes (const TextHeaderCustomAttributesType& x)
      {
        this->TextHeaderCustomAttributes_.set (x);
      }

      void ConfigurationVote::
      setTextHeaderCustomAttributes (::std::auto_ptr< TextHeaderCustomAttributesType > x)
      {
        this->TextHeaderCustomAttributes_.set (x);
      }

      const ConfigurationVote::TextBallotNameType& ConfigurationVote::
      getTextBallotName () const
      {
        return this->TextBallotName_.get ();
      }

      ConfigurationVote::TextBallotNameType& ConfigurationVote::
      getTextBallotName ()
      {
        return this->TextBallotName_.get ();
      }

      void ConfigurationVote::
      setTextBallotName (const TextBallotNameType& x)
      {
        this->TextBallotName_.set (x);
      }

      void ConfigurationVote::
      setTextBallotName (::std::auto_ptr< TextBallotNameType > x)
      {
        this->TextBallotName_.set (x);
      }

      const ConfigurationVote::TextRegionNameType& ConfigurationVote::
      getTextRegionName () const
      {
        return this->TextRegionName_.get ();
      }

      ConfigurationVote::TextRegionNameType& ConfigurationVote::
      getTextRegionName ()
      {
        return this->TextRegionName_.get ();
      }

      void ConfigurationVote::
      setTextRegionName (const TextRegionNameType& x)
      {
        this->TextRegionName_.set (x);
      }

      void ConfigurationVote::
      setTextRegionName (::std::auto_ptr< TextRegionNameType > x)
      {
        this->TextRegionName_.set (x);
      }

      const ConfigurationVote::TextGenericType& ConfigurationVote::
      getTextGeneric () const
      {
        return this->TextGeneric_.get ();
      }

      ConfigurationVote::TextGenericType& ConfigurationVote::
      getTextGeneric ()
      {
        return this->TextGeneric_.get ();
      }

      void ConfigurationVote::
      setTextGeneric (const TextGenericType& x)
      {
        this->TextGeneric_.set (x);
      }

      void ConfigurationVote::
      setTextGeneric (::std::auto_ptr< TextGenericType > x)
      {
        this->TextGeneric_.set (x);
      }

      const ConfigurationVote::TextBlankVoteType& ConfigurationVote::
      getTextBlankVote () const
      {
        return this->TextBlankVote_.get ();
      }

      ConfigurationVote::TextBlankVoteType& ConfigurationVote::
      getTextBlankVote ()
      {
        return this->TextBlankVote_.get ();
      }

      void ConfigurationVote::
      setTextBlankVote (const TextBlankVoteType& x)
      {
        this->TextBlankVote_.set (x);
      }

      void ConfigurationVote::
      setTextBlankVote (::std::auto_ptr< TextBlankVoteType > x)
      {
        this->TextBlankVote_.set (x);
      }

      const ConfigurationVote::CompleteVoteWithSpacesType& ConfigurationVote::
      getCompleteVoteWithSpaces () const
      {
        return this->CompleteVoteWithSpaces_.get ();
      }

      ConfigurationVote::CompleteVoteWithSpacesType& ConfigurationVote::
      getCompleteVoteWithSpaces ()
      {
        return this->CompleteVoteWithSpaces_.get ();
      }

      void ConfigurationVote::
      setCompleteVoteWithSpaces (const CompleteVoteWithSpacesType& x)
      {
        this->CompleteVoteWithSpaces_.set (x);
      }

      const ConfigurationVote::UseMaxSizeBlankVoteType& ConfigurationVote::
      getUseMaxSizeBlankVote () const
      {
        return this->UseMaxSizeBlankVote_.get ();
      }

      ConfigurationVote::UseMaxSizeBlankVoteType& ConfigurationVote::
      getUseMaxSizeBlankVote ()
      {
        return this->UseMaxSizeBlankVote_.get ();
      }

      void ConfigurationVote::
      setUseMaxSizeBlankVote (const UseMaxSizeBlankVoteType& x)
      {
        this->UseMaxSizeBlankVote_.set (x);
      }

      const ConfigurationVote::ShowBallotLinesType& ConfigurationVote::
      getShowBallotLines () const
      {
        return this->ShowBallotLines_.get ();
      }

      ConfigurationVote::ShowBallotLinesType& ConfigurationVote::
      getShowBallotLines ()
      {
        return this->ShowBallotLines_.get ();
      }

      void ConfigurationVote::
      setShowBallotLines (const ShowBallotLinesType& x)
      {
        this->ShowBallotLines_.set (x);
      }

      const ConfigurationVote::LayoutContestConfigurationType& ConfigurationVote::
      getLayoutContestConfiguration () const
      {
        return this->LayoutContestConfiguration_.get ();
      }

      ConfigurationVote::LayoutContestConfigurationType& ConfigurationVote::
      getLayoutContestConfiguration ()
      {
        return this->LayoutContestConfiguration_.get ();
      }

      void ConfigurationVote::
      setLayoutContestConfiguration (const LayoutContestConfigurationType& x)
      {
        this->LayoutContestConfiguration_.set (x);
      }

      void ConfigurationVote::
      setLayoutContestConfiguration (::std::auto_ptr< LayoutContestConfigurationType > x)
      {
        this->LayoutContestConfiguration_.set (x);
      }

      const ConfigurationVote::TextContestName1Type& ConfigurationVote::
      getTextContestName1 () const
      {
        return this->TextContestName1_.get ();
      }

      ConfigurationVote::TextContestName1Type& ConfigurationVote::
      getTextContestName1 ()
      {
        return this->TextContestName1_.get ();
      }

      void ConfigurationVote::
      setTextContestName1 (const TextContestName1Type& x)
      {
        this->TextContestName1_.set (x);
      }

      void ConfigurationVote::
      setTextContestName1 (::std::auto_ptr< TextContestName1Type > x)
      {
        this->TextContestName1_.set (x);
      }

      const ConfigurationVote::TextContestName2Type& ConfigurationVote::
      getTextContestName2 () const
      {
        return this->TextContestName2_.get ();
      }

      ConfigurationVote::TextContestName2Type& ConfigurationVote::
      getTextContestName2 ()
      {
        return this->TextContestName2_.get ();
      }

      void ConfigurationVote::
      setTextContestName2 (const TextContestName2Type& x)
      {
        this->TextContestName2_.set (x);
      }

      void ConfigurationVote::
      setTextContestName2 (::std::auto_ptr< TextContestName2Type > x)
      {
        this->TextContestName2_.set (x);
      }

      const ConfigurationVote::TextContestName3Type& ConfigurationVote::
      getTextContestName3 () const
      {
        return this->TextContestName3_.get ();
      }

      ConfigurationVote::TextContestName3Type& ConfigurationVote::
      getTextContestName3 ()
      {
        return this->TextContestName3_.get ();
      }

      void ConfigurationVote::
      setTextContestName3 (const TextContestName3Type& x)
      {
        this->TextContestName3_.set (x);
      }

      void ConfigurationVote::
      setTextContestName3 (::std::auto_ptr< TextContestName3Type > x)
      {
        this->TextContestName3_.set (x);
      }

      const ConfigurationVote::IsTextContestName1CustomAttributeType& ConfigurationVote::
      getIsTextContestName1CustomAttribute () const
      {
        return this->IsTextContestName1CustomAttribute_.get ();
      }

      ConfigurationVote::IsTextContestName1CustomAttributeType& ConfigurationVote::
      getIsTextContestName1CustomAttribute ()
      {
        return this->IsTextContestName1CustomAttribute_.get ();
      }

      void ConfigurationVote::
      setIsTextContestName1CustomAttribute (const IsTextContestName1CustomAttributeType& x)
      {
        this->IsTextContestName1CustomAttribute_.set (x);
      }

      const ConfigurationVote::IsTextContestName2CustomAttributeType& ConfigurationVote::
      getIsTextContestName2CustomAttribute () const
      {
        return this->IsTextContestName2CustomAttribute_.get ();
      }

      ConfigurationVote::IsTextContestName2CustomAttributeType& ConfigurationVote::
      getIsTextContestName2CustomAttribute ()
      {
        return this->IsTextContestName2CustomAttribute_.get ();
      }

      void ConfigurationVote::
      setIsTextContestName2CustomAttribute (const IsTextContestName2CustomAttributeType& x)
      {
        this->IsTextContestName2CustomAttribute_.set (x);
      }

      const ConfigurationVote::IsTextContestName3CustomAttributeType& ConfigurationVote::
      getIsTextContestName3CustomAttribute () const
      {
        return this->IsTextContestName3CustomAttribute_.get ();
      }

      ConfigurationVote::IsTextContestName3CustomAttributeType& ConfigurationVote::
      getIsTextContestName3CustomAttribute ()
      {
        return this->IsTextContestName3CustomAttribute_.get ();
      }

      void ConfigurationVote::
      setIsTextContestName3CustomAttribute (const IsTextContestName3CustomAttributeType& x)
      {
        this->IsTextContestName3CustomAttribute_.set (x);
      }

      const ConfigurationVote::TextParentOptionSelectedType& ConfigurationVote::
      getTextParentOptionSelected () const
      {
        return this->TextParentOptionSelected_.get ();
      }

      ConfigurationVote::TextParentOptionSelectedType& ConfigurationVote::
      getTextParentOptionSelected ()
      {
        return this->TextParentOptionSelected_.get ();
      }

      void ConfigurationVote::
      setTextParentOptionSelected (const TextParentOptionSelectedType& x)
      {
        this->TextParentOptionSelected_.set (x);
      }

      void ConfigurationVote::
      setTextParentOptionSelected (::std::auto_ptr< TextParentOptionSelectedType > x)
      {
        this->TextParentOptionSelected_.set (x);
      }

      const ConfigurationVote::TextPrincipalsMessageType& ConfigurationVote::
      getTextPrincipalsMessage () const
      {
        return this->TextPrincipalsMessage_.get ();
      }

      ConfigurationVote::TextPrincipalsMessageType& ConfigurationVote::
      getTextPrincipalsMessage ()
      {
        return this->TextPrincipalsMessage_.get ();
      }

      void ConfigurationVote::
      setTextPrincipalsMessage (const TextPrincipalsMessageType& x)
      {
        this->TextPrincipalsMessage_.set (x);
      }

      void ConfigurationVote::
      setTextPrincipalsMessage (::std::auto_ptr< TextPrincipalsMessageType > x)
      {
        this->TextPrincipalsMessage_.set (x);
      }

      const ConfigurationVote::TextStandInMessageType& ConfigurationVote::
      getTextStandInMessage () const
      {
        return this->TextStandInMessage_.get ();
      }

      ConfigurationVote::TextStandInMessageType& ConfigurationVote::
      getTextStandInMessage ()
      {
        return this->TextStandInMessage_.get ();
      }

      void ConfigurationVote::
      setTextStandInMessage (const TextStandInMessageType& x)
      {
        this->TextStandInMessage_.set (x);
      }

      void ConfigurationVote::
      setTextStandInMessage (::std::auto_ptr< TextStandInMessageType > x)
      {
        this->TextStandInMessage_.set (x);
      }

      const ConfigurationVote::LayoutBallotOptiontTypeType& ConfigurationVote::
      getLayoutBallotOptiontType () const
      {
        return this->LayoutBallotOptiontType_.get ();
      }

      ConfigurationVote::LayoutBallotOptiontTypeType& ConfigurationVote::
      getLayoutBallotOptiontType ()
      {
        return this->LayoutBallotOptiontType_.get ();
      }

      void ConfigurationVote::
      setLayoutBallotOptiontType (const LayoutBallotOptiontTypeType& x)
      {
        this->LayoutBallotOptiontType_.set (x);
      }

      void ConfigurationVote::
      setLayoutBallotOptiontType (::std::auto_ptr< LayoutBallotOptiontTypeType > x)
      {
        this->LayoutBallotOptiontType_.set (x);
      }

      const ConfigurationVote::LayoutSuperBlankTypeType& ConfigurationVote::
      getLayoutSuperBlankType () const
      {
        return this->LayoutSuperBlankType_.get ();
      }

      ConfigurationVote::LayoutSuperBlankTypeType& ConfigurationVote::
      getLayoutSuperBlankType ()
      {
        return this->LayoutSuperBlankType_.get ();
      }

      void ConfigurationVote::
      setLayoutSuperBlankType (const LayoutSuperBlankTypeType& x)
      {
        this->LayoutSuperBlankType_.set (x);
      }

      void ConfigurationVote::
      setLayoutSuperBlankType (::std::auto_ptr< LayoutSuperBlankTypeType > x)
      {
        this->LayoutSuperBlankType_.set (x);
      }

      const ConfigurationVote::VoteEncodeModeType& ConfigurationVote::
      getVoteEncodeMode () const
      {
        return this->VoteEncodeMode_.get ();
      }

      ConfigurationVote::VoteEncodeModeType& ConfigurationVote::
      getVoteEncodeMode ()
      {
        return this->VoteEncodeMode_.get ();
      }

      void ConfigurationVote::
      setVoteEncodeMode (const VoteEncodeModeType& x)
      {
        this->VoteEncodeMode_.set (x);
      }

      void ConfigurationVote::
      setVoteEncodeMode (::std::auto_ptr< VoteEncodeModeType > x)
      {
        this->VoteEncodeMode_.set (x);
      }

      const ConfigurationVote::VoteChecksumType& ConfigurationVote::
      getVoteChecksum () const
      {
        return this->VoteChecksum_.get ();
      }

      ConfigurationVote::VoteChecksumType& ConfigurationVote::
      getVoteChecksum ()
      {
        return this->VoteChecksum_.get ();
      }

      void ConfigurationVote::
      setVoteChecksum (const VoteChecksumType& x)
      {
        this->VoteChecksum_.set (x);
      }

      void ConfigurationVote::
      setVoteChecksum (::std::auto_ptr< VoteChecksumType > x)
      {
        this->VoteChecksum_.set (x);
      }

      const ConfigurationVote::QRCodeVoteListType& ConfigurationVote::
      getQRCodeVoteList () const
      {
        return this->QRCodeVoteList_.get ();
      }

      ConfigurationVote::QRCodeVoteListType& ConfigurationVote::
      getQRCodeVoteList ()
      {
        return this->QRCodeVoteList_.get ();
      }

      void ConfigurationVote::
      setQRCodeVoteList (const QRCodeVoteListType& x)
      {
        this->QRCodeVoteList_.set (x);
      }

      void ConfigurationVote::
      setQRCodeVoteList (::std::auto_ptr< QRCodeVoteListType > x)
      {
        this->QRCodeVoteList_.set (x);
      }

      const ConfigurationVote::VoteQRCodeModeType& ConfigurationVote::
      getVoteQRCodeMode () const
      {
        return this->VoteQRCodeMode_.get ();
      }

      ConfigurationVote::VoteQRCodeModeType& ConfigurationVote::
      getVoteQRCodeMode ()
      {
        return this->VoteQRCodeMode_.get ();
      }

      void ConfigurationVote::
      setVoteQRCodeMode (const VoteQRCodeModeType& x)
      {
        this->VoteQRCodeMode_.set (x);
      }

      void ConfigurationVote::
      setVoteQRCodeMode (::std::auto_ptr< VoteQRCodeModeType > x)
      {
        this->VoteQRCodeMode_.set (x);
      }

      const ConfigurationVote::UseBackgroundImageForQRType& ConfigurationVote::
      getUseBackgroundImageForQR () const
      {
        return this->UseBackgroundImageForQR_.get ();
      }

      ConfigurationVote::UseBackgroundImageForQRType& ConfigurationVote::
      getUseBackgroundImageForQR ()
      {
        return this->UseBackgroundImageForQR_.get ();
      }

      void ConfigurationVote::
      setUseBackgroundImageForQR (const UseBackgroundImageForQRType& x)
      {
        this->UseBackgroundImageForQR_.set (x);
      }

      const ConfigurationVote::PositionImageInBackgroundQRType& ConfigurationVote::
      getPositionImageInBackgroundQR () const
      {
        return this->PositionImageInBackgroundQR_.get ();
      }

      ConfigurationVote::PositionImageInBackgroundQRType& ConfigurationVote::
      getPositionImageInBackgroundQR ()
      {
        return this->PositionImageInBackgroundQR_.get ();
      }

      void ConfigurationVote::
      setPositionImageInBackgroundQR (const PositionImageInBackgroundQRType& x)
      {
        this->PositionImageInBackgroundQR_.set (x);
      }

      void ConfigurationVote::
      setPositionImageInBackgroundQR (::std::auto_ptr< PositionImageInBackgroundQRType > x)
      {
        this->PositionImageInBackgroundQR_.set (x);
      }

      const ConfigurationVote::VoteCodeConfigType& ConfigurationVote::
      getVoteCodeConfig () const
      {
        return this->VoteCodeConfig_.get ();
      }

      ConfigurationVote::VoteCodeConfigType& ConfigurationVote::
      getVoteCodeConfig ()
      {
        return this->VoteCodeConfig_.get ();
      }

      void ConfigurationVote::
      setVoteCodeConfig (const VoteCodeConfigType& x)
      {
        this->VoteCodeConfig_.set (x);
      }

      void ConfigurationVote::
      setVoteCodeConfig (::std::auto_ptr< VoteCodeConfigType > x)
      {
        this->VoteCodeConfig_.set (x);
      }

      const ConfigurationVote::AddBlankSpaceFullContestType& ConfigurationVote::
      getAddBlankSpaceFullContest () const
      {
        return this->AddBlankSpaceFullContest_.get ();
      }

      ConfigurationVote::AddBlankSpaceFullContestType& ConfigurationVote::
      getAddBlankSpaceFullContest ()
      {
        return this->AddBlankSpaceFullContest_.get ();
      }

      void ConfigurationVote::
      setAddBlankSpaceFullContest (const AddBlankSpaceFullContestType& x)
      {
        this->AddBlankSpaceFullContest_.set (x);
      }

      const ConfigurationVote::MultiLanguageConfigurationType& ConfigurationVote::
      getMultiLanguageConfiguration () const
      {
        return this->MultiLanguageConfiguration_.get ();
      }

      ConfigurationVote::MultiLanguageConfigurationType& ConfigurationVote::
      getMultiLanguageConfiguration ()
      {
        return this->MultiLanguageConfiguration_.get ();
      }

      void ConfigurationVote::
      setMultiLanguageConfiguration (const MultiLanguageConfigurationType& x)
      {
        this->MultiLanguageConfiguration_.set (x);
      }

      void ConfigurationVote::
      setMultiLanguageConfiguration (::std::auto_ptr< MultiLanguageConfigurationType > x)
      {
        this->MultiLanguageConfiguration_.set (x);
      }


      // VoteQRCodeModeEnum
      // 

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_VoteQRCodeModeEnum_literals_[v])
      {
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const VoteQRCodeModeEnum& v,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      VoteQRCodeModeEnum& VoteQRCodeModeEnum::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_VoteQRCodeModeEnum_literals_[v]);

        return *this;
      }


      // VoteCodeConfig
      // 

      const VoteCodeConfig::UseShortVoteCodeType& VoteCodeConfig::
      getUseShortVoteCode () const
      {
        return this->UseShortVoteCode_.get ();
      }

      VoteCodeConfig::UseShortVoteCodeType& VoteCodeConfig::
      getUseShortVoteCode ()
      {
        return this->UseShortVoteCode_.get ();
      }

      void VoteCodeConfig::
      setUseShortVoteCode (const UseShortVoteCodeType& x)
      {
        this->UseShortVoteCode_.set (x);
      }

      const VoteCodeConfig::CountGroupVoteCodeType& VoteCodeConfig::
      getCountGroupVoteCode () const
      {
        return this->CountGroupVoteCode_.get ();
      }

      VoteCodeConfig::CountGroupVoteCodeType& VoteCodeConfig::
      getCountGroupVoteCode ()
      {
        return this->CountGroupVoteCode_.get ();
      }

      void VoteCodeConfig::
      setCountGroupVoteCode (const CountGroupVoteCodeType& x)
      {
        this->CountGroupVoteCode_.set (x);
      }

      const VoteCodeConfig::CharSeparatorVoteCodeType& VoteCodeConfig::
      getCharSeparatorVoteCode () const
      {
        return this->CharSeparatorVoteCode_.get ();
      }

      VoteCodeConfig::CharSeparatorVoteCodeType& VoteCodeConfig::
      getCharSeparatorVoteCode ()
      {
        return this->CharSeparatorVoteCode_.get ();
      }

      void VoteCodeConfig::
      setCharSeparatorVoteCode (const CharSeparatorVoteCodeType& x)
      {
        this->CharSeparatorVoteCode_.set (x);
      }

      void VoteCodeConfig::
      setCharSeparatorVoteCode (::std::auto_ptr< CharSeparatorVoteCodeType > x)
      {
        this->CharSeparatorVoteCode_.set (x);
      }


      // MultiLanguageConfiguration
      // 

      const MultiLanguageConfiguration::EnableType& MultiLanguageConfiguration::
      getEnable () const
      {
        return this->Enable_.get ();
      }

      MultiLanguageConfiguration::EnableType& MultiLanguageConfiguration::
      getEnable ()
      {
        return this->Enable_.get ();
      }

      void MultiLanguageConfiguration::
      setEnable (const EnableType& x)
      {
        this->Enable_.set (x);
      }

      const MultiLanguageConfiguration::SeparatorType& MultiLanguageConfiguration::
      getSeparator () const
      {
        return this->Separator_.get ();
      }

      MultiLanguageConfiguration::SeparatorType& MultiLanguageConfiguration::
      getSeparator ()
      {
        return this->Separator_.get ();
      }

      void MultiLanguageConfiguration::
      setSeparator (const SeparatorType& x)
      {
        this->Separator_.set (x);
      }

      void MultiLanguageConfiguration::
      setSeparator (::std::auto_ptr< SeparatorType > x)
      {
        this->Separator_.set (x);
      }

      const MultiLanguageConfiguration::MaxCharsByLanguageType& MultiLanguageConfiguration::
      getMaxCharsByLanguage () const
      {
        return this->MaxCharsByLanguage_.get ();
      }

      MultiLanguageConfiguration::MaxCharsByLanguageType& MultiLanguageConfiguration::
      getMaxCharsByLanguage ()
      {
        return this->MaxCharsByLanguage_.get ();
      }

      void MultiLanguageConfiguration::
      setMaxCharsByLanguage (const MaxCharsByLanguageType& x)
      {
        this->MaxCharsByLanguage_.set (x);
      }


      // QRCodeVoteList
      // 

      const QRCodeVoteList::QRCodeVoteConfigSequence& QRCodeVoteList::
      getQRCodeVoteConfig () const
      {
        return this->QRCodeVoteConfig_;
      }

      QRCodeVoteList::QRCodeVoteConfigSequence& QRCodeVoteList::
      getQRCodeVoteConfig ()
      {
        return this->QRCodeVoteConfig_;
      }

      void QRCodeVoteList::
      setQRCodeVoteConfig (const QRCodeVoteConfigSequence& s)
      {
        this->QRCodeVoteConfig_ = s;
      }


      // QRCodeVoteConfig
      // 

      const QRCodeVoteConfig::MaxSizeType& QRCodeVoteConfig::
      getMaxSize () const
      {
        return this->MaxSize_.get ();
      }

      QRCodeVoteConfig::MaxSizeType& QRCodeVoteConfig::
      getMaxSize ()
      {
        return this->MaxSize_.get ();
      }

      void QRCodeVoteConfig::
      setMaxSize (const MaxSizeType& x)
      {
        this->MaxSize_.set (x);
      }

      const QRCodeVoteConfig::QRCodeConfigType& QRCodeVoteConfig::
      getQRCodeConfig () const
      {
        return this->QRCodeConfig_.get ();
      }

      QRCodeVoteConfig::QRCodeConfigType& QRCodeVoteConfig::
      getQRCodeConfig ()
      {
        return this->QRCodeConfig_.get ();
      }

      void QRCodeVoteConfig::
      setQRCodeConfig (const QRCodeConfigType& x)
      {
        this->QRCodeConfig_.set (x);
      }

      void QRCodeVoteConfig::
      setQRCodeConfig (::std::auto_ptr< QRCodeConfigType > x)
      {
        this->QRCodeConfig_.set (x);
      }


      // QRCodeConfig
      // 

      const QRCodeConfig::SizeQRCodeType& QRCodeConfig::
      getSizeQRCode () const
      {
        return this->SizeQRCode_.get ();
      }

      QRCodeConfig::SizeQRCodeType& QRCodeConfig::
      getSizeQRCode ()
      {
        return this->SizeQRCode_.get ();
      }

      void QRCodeConfig::
      setSizeQRCode (const SizeQRCodeType& x)
      {
        this->SizeQRCode_.set (x);
      }

      const QRCodeConfig::MarginQRCodeType& QRCodeConfig::
      getMarginQRCode () const
      {
        return this->MarginQRCode_.get ();
      }

      QRCodeConfig::MarginQRCodeType& QRCodeConfig::
      getMarginQRCode ()
      {
        return this->MarginQRCode_.get ();
      }

      void QRCodeConfig::
      setMarginQRCode (const MarginQRCodeType& x)
      {
        this->MarginQRCode_.set (x);
      }

      const QRCodeConfig::CorrectionModeQRCodeType& QRCodeConfig::
      getCorrectionModeQRCode () const
      {
        return this->CorrectionModeQRCode_.get ();
      }

      QRCodeConfig::CorrectionModeQRCodeType& QRCodeConfig::
      getCorrectionModeQRCode ()
      {
        return this->CorrectionModeQRCode_.get ();
      }

      void QRCodeConfig::
      setCorrectionModeQRCode (const CorrectionModeQRCodeType& x)
      {
        this->CorrectionModeQRCode_.set (x);
      }

      void QRCodeConfig::
      setCorrectionModeQRCode (::std::auto_ptr< CorrectionModeQRCodeType > x)
      {
        this->CorrectionModeQRCode_.set (x);
      }

      const QRCodeConfig::VersionQRCodeType& QRCodeConfig::
      getVersionQRCode () const
      {
        return this->VersionQRCode_.get ();
      }

      QRCodeConfig::VersionQRCodeType& QRCodeConfig::
      getVersionQRCode ()
      {
        return this->VersionQRCode_.get ();
      }

      void QRCodeConfig::
      setVersionQRCode (const VersionQRCodeType& x)
      {
        this->VersionQRCode_.set (x);
      }


      // ConfigurationSmartcardRemoved
      // 

      const ConfigurationSmartcardRemoved::TextTitleType& ConfigurationSmartcardRemoved::
      getTextTitle () const
      {
        return this->TextTitle_.get ();
      }

      ConfigurationSmartcardRemoved::TextTitleType& ConfigurationSmartcardRemoved::
      getTextTitle ()
      {
        return this->TextTitle_.get ();
      }

      void ConfigurationSmartcardRemoved::
      setTextTitle (const TextTitleType& x)
      {
        this->TextTitle_.set (x);
      }

      void ConfigurationSmartcardRemoved::
      setTextTitle (::std::auto_ptr< TextTitleType > x)
      {
        this->TextTitle_.set (x);
      }

      const ConfigurationSmartcardRemoved::TextElectionNameType& ConfigurationSmartcardRemoved::
      getTextElectionName () const
      {
        return this->TextElectionName_.get ();
      }

      ConfigurationSmartcardRemoved::TextElectionNameType& ConfigurationSmartcardRemoved::
      getTextElectionName ()
      {
        return this->TextElectionName_.get ();
      }

      void ConfigurationSmartcardRemoved::
      setTextElectionName (const TextElectionNameType& x)
      {
        this->TextElectionName_.set (x);
      }

      void ConfigurationSmartcardRemoved::
      setTextElectionName (::std::auto_ptr< TextElectionNameType > x)
      {
        this->TextElectionName_.set (x);
      }

      const ConfigurationSmartcardRemoved::TextVotingBoothType& ConfigurationSmartcardRemoved::
      getTextVotingBooth () const
      {
        return this->TextVotingBooth_.get ();
      }

      ConfigurationSmartcardRemoved::TextVotingBoothType& ConfigurationSmartcardRemoved::
      getTextVotingBooth ()
      {
        return this->TextVotingBooth_.get ();
      }

      void ConfigurationSmartcardRemoved::
      setTextVotingBooth (const TextVotingBoothType& x)
      {
        this->TextVotingBooth_.set (x);
      }

      void ConfigurationSmartcardRemoved::
      setTextVotingBooth (::std::auto_ptr< TextVotingBoothType > x)
      {
        this->TextVotingBooth_.set (x);
      }

      const ConfigurationSmartcardRemoved::TextVoteIDType& ConfigurationSmartcardRemoved::
      getTextVoteID () const
      {
        return this->TextVoteID_.get ();
      }

      ConfigurationSmartcardRemoved::TextVoteIDType& ConfigurationSmartcardRemoved::
      getTextVoteID ()
      {
        return this->TextVoteID_.get ();
      }

      void ConfigurationSmartcardRemoved::
      setTextVoteID (const TextVoteIDType& x)
      {
        this->TextVoteID_.set (x);
      }

      void ConfigurationSmartcardRemoved::
      setTextVoteID (::std::auto_ptr< TextVoteIDType > x)
      {
        this->TextVoteID_.set (x);
      }

      const ConfigurationSmartcardRemoved::TextDescriptionType& ConfigurationSmartcardRemoved::
      getTextDescription () const
      {
        return this->TextDescription_.get ();
      }

      ConfigurationSmartcardRemoved::TextDescriptionType& ConfigurationSmartcardRemoved::
      getTextDescription ()
      {
        return this->TextDescription_.get ();
      }

      void ConfigurationSmartcardRemoved::
      setTextDescription (const TextDescriptionType& x)
      {
        this->TextDescription_.set (x);
      }

      void ConfigurationSmartcardRemoved::
      setTextDescription (::std::auto_ptr< TextDescriptionType > x)
      {
        this->TextDescription_.set (x);
      }


      // ConfigurationTimeout
      // 

      const ConfigurationTimeout::TextTitleType& ConfigurationTimeout::
      getTextTitle () const
      {
        return this->TextTitle_.get ();
      }

      ConfigurationTimeout::TextTitleType& ConfigurationTimeout::
      getTextTitle ()
      {
        return this->TextTitle_.get ();
      }

      void ConfigurationTimeout::
      setTextTitle (const TextTitleType& x)
      {
        this->TextTitle_.set (x);
      }

      void ConfigurationTimeout::
      setTextTitle (::std::auto_ptr< TextTitleType > x)
      {
        this->TextTitle_.set (x);
      }

      const ConfigurationTimeout::TextElectionNameType& ConfigurationTimeout::
      getTextElectionName () const
      {
        return this->TextElectionName_.get ();
      }

      ConfigurationTimeout::TextElectionNameType& ConfigurationTimeout::
      getTextElectionName ()
      {
        return this->TextElectionName_.get ();
      }

      void ConfigurationTimeout::
      setTextElectionName (const TextElectionNameType& x)
      {
        this->TextElectionName_.set (x);
      }

      void ConfigurationTimeout::
      setTextElectionName (::std::auto_ptr< TextElectionNameType > x)
      {
        this->TextElectionName_.set (x);
      }

      const ConfigurationTimeout::TextVotingBoothType& ConfigurationTimeout::
      getTextVotingBooth () const
      {
        return this->TextVotingBooth_.get ();
      }

      ConfigurationTimeout::TextVotingBoothType& ConfigurationTimeout::
      getTextVotingBooth ()
      {
        return this->TextVotingBooth_.get ();
      }

      void ConfigurationTimeout::
      setTextVotingBooth (const TextVotingBoothType& x)
      {
        this->TextVotingBooth_.set (x);
      }

      void ConfigurationTimeout::
      setTextVotingBooth (::std::auto_ptr< TextVotingBoothType > x)
      {
        this->TextVotingBooth_.set (x);
      }

      const ConfigurationTimeout::TextVoteIDType& ConfigurationTimeout::
      getTextVoteID () const
      {
        return this->TextVoteID_.get ();
      }

      ConfigurationTimeout::TextVoteIDType& ConfigurationTimeout::
      getTextVoteID ()
      {
        return this->TextVoteID_.get ();
      }

      void ConfigurationTimeout::
      setTextVoteID (const TextVoteIDType& x)
      {
        this->TextVoteID_.set (x);
      }

      void ConfigurationTimeout::
      setTextVoteID (::std::auto_ptr< TextVoteIDType > x)
      {
        this->TextVoteID_.set (x);
      }

      const ConfigurationTimeout::TextDescriptionType& ConfigurationTimeout::
      getTextDescription () const
      {
        return this->TextDescription_.get ();
      }

      ConfigurationTimeout::TextDescriptionType& ConfigurationTimeout::
      getTextDescription ()
      {
        return this->TextDescription_.get ();
      }

      void ConfigurationTimeout::
      setTextDescription (const TextDescriptionType& x)
      {
        this->TextDescription_.set (x);
      }

      void ConfigurationTimeout::
      setTextDescription (::std::auto_ptr< TextDescriptionType > x)
      {
        this->TextDescription_.set (x);
      }


      // ConfigurationInstallation
      // 

      const ConfigurationInstallation::TextInstallationTitleLevel1Type& ConfigurationInstallation::
      getTextInstallationTitleLevel1 () const
      {
        return this->TextInstallationTitleLevel1_.get ();
      }

      ConfigurationInstallation::TextInstallationTitleLevel1Type& ConfigurationInstallation::
      getTextInstallationTitleLevel1 ()
      {
        return this->TextInstallationTitleLevel1_.get ();
      }

      void ConfigurationInstallation::
      setTextInstallationTitleLevel1 (const TextInstallationTitleLevel1Type& x)
      {
        this->TextInstallationTitleLevel1_.set (x);
      }

      void ConfigurationInstallation::
      setTextInstallationTitleLevel1 (::std::auto_ptr< TextInstallationTitleLevel1Type > x)
      {
        this->TextInstallationTitleLevel1_.set (x);
      }

      const ConfigurationInstallation::TextInstallationTitleLevel2Type& ConfigurationInstallation::
      getTextInstallationTitleLevel2 () const
      {
        return this->TextInstallationTitleLevel2_.get ();
      }

      ConfigurationInstallation::TextInstallationTitleLevel2Type& ConfigurationInstallation::
      getTextInstallationTitleLevel2 ()
      {
        return this->TextInstallationTitleLevel2_.get ();
      }

      void ConfigurationInstallation::
      setTextInstallationTitleLevel2 (const TextInstallationTitleLevel2Type& x)
      {
        this->TextInstallationTitleLevel2_.set (x);
      }

      void ConfigurationInstallation::
      setTextInstallationTitleLevel2 (::std::auto_ptr< TextInstallationTitleLevel2Type > x)
      {
        this->TextInstallationTitleLevel2_.set (x);
      }

      const ConfigurationInstallation::TextInstallationTitleLevel3Type& ConfigurationInstallation::
      getTextInstallationTitleLevel3 () const
      {
        return this->TextInstallationTitleLevel3_.get ();
      }

      ConfigurationInstallation::TextInstallationTitleLevel3Type& ConfigurationInstallation::
      getTextInstallationTitleLevel3 ()
      {
        return this->TextInstallationTitleLevel3_.get ();
      }

      void ConfigurationInstallation::
      setTextInstallationTitleLevel3 (const TextInstallationTitleLevel3Type& x)
      {
        this->TextInstallationTitleLevel3_.set (x);
      }

      void ConfigurationInstallation::
      setTextInstallationTitleLevel3 (::std::auto_ptr< TextInstallationTitleLevel3Type > x)
      {
        this->TextInstallationTitleLevel3_.set (x);
      }

      const ConfigurationInstallation::TextInstallationInfoType& ConfigurationInstallation::
      getTextInstallationInfo () const
      {
        return this->TextInstallationInfo_.get ();
      }

      ConfigurationInstallation::TextInstallationInfoType& ConfigurationInstallation::
      getTextInstallationInfo ()
      {
        return this->TextInstallationInfo_.get ();
      }

      void ConfigurationInstallation::
      setTextInstallationInfo (const TextInstallationInfoType& x)
      {
        this->TextInstallationInfo_.set (x);
      }

      void ConfigurationInstallation::
      setTextInstallationInfo (::std::auto_ptr< TextInstallationInfoType > x)
      {
        this->TextInstallationInfo_.set (x);
      }

      const ConfigurationInstallation::ShowBarCodeType& ConfigurationInstallation::
      getShowBarCode () const
      {
        return this->ShowBarCode_.get ();
      }

      ConfigurationInstallation::ShowBarCodeType& ConfigurationInstallation::
      getShowBarCode ()
      {
        return this->ShowBarCode_.get ();
      }

      void ConfigurationInstallation::
      setShowBarCode (const ShowBarCodeType& x)
      {
        this->ShowBarCode_.set (x);
      }

      const ConfigurationInstallation::QRCodeConfigType& ConfigurationInstallation::
      getQRCodeConfig () const
      {
        return this->QRCodeConfig_.get ();
      }

      ConfigurationInstallation::QRCodeConfigType& ConfigurationInstallation::
      getQRCodeConfig ()
      {
        return this->QRCodeConfig_.get ();
      }

      void ConfigurationInstallation::
      setQRCodeConfig (const QRCodeConfigType& x)
      {
        this->QRCodeConfig_.set (x);
      }

      void ConfigurationInstallation::
      setQRCodeConfig (::std::auto_ptr< QRCodeConfigType > x)
      {
        this->QRCodeConfig_.set (x);
      }

      const ConfigurationInstallation::Base64QRCodeType& ConfigurationInstallation::
      getBase64QRCode () const
      {
        return this->Base64QRCode_.get ();
      }

      ConfigurationInstallation::Base64QRCodeType& ConfigurationInstallation::
      getBase64QRCode ()
      {
        return this->Base64QRCode_.get ();
      }

      void ConfigurationInstallation::
      setBase64QRCode (const Base64QRCodeType& x)
      {
        this->Base64QRCode_.set (x);
      }

      const ConfigurationInstallation::QRcodePositionType& ConfigurationInstallation::
      getQRcodePosition () const
      {
        return this->QRcodePosition_.get ();
      }

      ConfigurationInstallation::QRcodePositionType& ConfigurationInstallation::
      getQRcodePosition ()
      {
        return this->QRcodePosition_.get ();
      }

      void ConfigurationInstallation::
      setQRcodePosition (const QRcodePositionType& x)
      {
        this->QRcodePosition_.set (x);
      }

      void ConfigurationInstallation::
      setQRcodePosition (::std::auto_ptr< QRcodePositionType > x)
      {
        this->QRcodePosition_.set (x);
      }


      // ConfigurationContingency
      // 

      const ConfigurationContingency::TextContingencyTitleLevel1Type& ConfigurationContingency::
      getTextContingencyTitleLevel1 () const
      {
        return this->TextContingencyTitleLevel1_.get ();
      }

      ConfigurationContingency::TextContingencyTitleLevel1Type& ConfigurationContingency::
      getTextContingencyTitleLevel1 ()
      {
        return this->TextContingencyTitleLevel1_.get ();
      }

      void ConfigurationContingency::
      setTextContingencyTitleLevel1 (const TextContingencyTitleLevel1Type& x)
      {
        this->TextContingencyTitleLevel1_.set (x);
      }

      void ConfigurationContingency::
      setTextContingencyTitleLevel1 (::std::auto_ptr< TextContingencyTitleLevel1Type > x)
      {
        this->TextContingencyTitleLevel1_.set (x);
      }

      const ConfigurationContingency::TextContingencyTitleLevel2Type& ConfigurationContingency::
      getTextContingencyTitleLevel2 () const
      {
        return this->TextContingencyTitleLevel2_.get ();
      }

      ConfigurationContingency::TextContingencyTitleLevel2Type& ConfigurationContingency::
      getTextContingencyTitleLevel2 ()
      {
        return this->TextContingencyTitleLevel2_.get ();
      }

      void ConfigurationContingency::
      setTextContingencyTitleLevel2 (const TextContingencyTitleLevel2Type& x)
      {
        this->TextContingencyTitleLevel2_.set (x);
      }

      void ConfigurationContingency::
      setTextContingencyTitleLevel2 (::std::auto_ptr< TextContingencyTitleLevel2Type > x)
      {
        this->TextContingencyTitleLevel2_.set (x);
      }

      const ConfigurationContingency::TextContingencyTitleLevel3Type& ConfigurationContingency::
      getTextContingencyTitleLevel3 () const
      {
        return this->TextContingencyTitleLevel3_.get ();
      }

      ConfigurationContingency::TextContingencyTitleLevel3Type& ConfigurationContingency::
      getTextContingencyTitleLevel3 ()
      {
        return this->TextContingencyTitleLevel3_.get ();
      }

      void ConfigurationContingency::
      setTextContingencyTitleLevel3 (const TextContingencyTitleLevel3Type& x)
      {
        this->TextContingencyTitleLevel3_.set (x);
      }

      void ConfigurationContingency::
      setTextContingencyTitleLevel3 (::std::auto_ptr< TextContingencyTitleLevel3Type > x)
      {
        this->TextContingencyTitleLevel3_.set (x);
      }

      const ConfigurationContingency::TextContingencyInfoType& ConfigurationContingency::
      getTextContingencyInfo () const
      {
        return this->TextContingencyInfo_.get ();
      }

      ConfigurationContingency::TextContingencyInfoType& ConfigurationContingency::
      getTextContingencyInfo ()
      {
        return this->TextContingencyInfo_.get ();
      }

      void ConfigurationContingency::
      setTextContingencyInfo (const TextContingencyInfoType& x)
      {
        this->TextContingencyInfo_.set (x);
      }

      void ConfigurationContingency::
      setTextContingencyInfo (::std::auto_ptr< TextContingencyInfoType > x)
      {
        this->TextContingencyInfo_.set (x);
      }

      const ConfigurationContingency::IncludeHelpType& ConfigurationContingency::
      getIncludeHelp () const
      {
        return this->IncludeHelp_.get ();
      }

      ConfigurationContingency::IncludeHelpType& ConfigurationContingency::
      getIncludeHelp ()
      {
        return this->IncludeHelp_.get ();
      }

      void ConfigurationContingency::
      setIncludeHelp (const IncludeHelpType& x)
      {
        this->IncludeHelp_.set (x);
      }

      const ConfigurationContingency::IncludeRegionSectionType& ConfigurationContingency::
      getIncludeRegionSection () const
      {
        return this->IncludeRegionSection_.get ();
      }

      ConfigurationContingency::IncludeRegionSectionType& ConfigurationContingency::
      getIncludeRegionSection ()
      {
        return this->IncludeRegionSection_.get ();
      }

      void ConfigurationContingency::
      setIncludeRegionSection (const IncludeRegionSectionType& x)
      {
        this->IncludeRegionSection_.set (x);
      }


      // DocumentColumnLayout
      // 

      DocumentColumnLayout::
      DocumentColumnLayout ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      DocumentColumnLayout::
      DocumentColumnLayout (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_DocumentColumnLayout_literals_[v])
      {
      }

      DocumentColumnLayout::
      DocumentColumnLayout (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      DocumentColumnLayout::
      DocumentColumnLayout (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      DocumentColumnLayout::
      DocumentColumnLayout (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      DocumentColumnLayout::
      DocumentColumnLayout (const DocumentColumnLayout& v,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      DocumentColumnLayout& DocumentColumnLayout::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_DocumentColumnLayout_literals_[v]);

        return *this;
      }


      // LogPrintDocumentConfiguration
      // 

      const LogPrintDocumentConfiguration::TextLogTitleLevel1Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel1 () const
      {
        return this->TextLogTitleLevel1_.get ();
      }

      LogPrintDocumentConfiguration::TextLogTitleLevel1Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel1 ()
      {
        return this->TextLogTitleLevel1_.get ();
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel1 (const TextLogTitleLevel1Type& x)
      {
        this->TextLogTitleLevel1_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel1 (::std::auto_ptr< TextLogTitleLevel1Type > x)
      {
        this->TextLogTitleLevel1_.set (x);
      }

      const LogPrintDocumentConfiguration::TextLogTitleLevel2Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel2 () const
      {
        return this->TextLogTitleLevel2_.get ();
      }

      LogPrintDocumentConfiguration::TextLogTitleLevel2Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel2 ()
      {
        return this->TextLogTitleLevel2_.get ();
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel2 (const TextLogTitleLevel2Type& x)
      {
        this->TextLogTitleLevel2_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel2 (::std::auto_ptr< TextLogTitleLevel2Type > x)
      {
        this->TextLogTitleLevel2_.set (x);
      }

      const LogPrintDocumentConfiguration::TextLogTitleLevel3Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel3 () const
      {
        return this->TextLogTitleLevel3_.get ();
      }

      LogPrintDocumentConfiguration::TextLogTitleLevel3Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel3 ()
      {
        return this->TextLogTitleLevel3_.get ();
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel3 (const TextLogTitleLevel3Type& x)
      {
        this->TextLogTitleLevel3_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel3 (::std::auto_ptr< TextLogTitleLevel3Type > x)
      {
        this->TextLogTitleLevel3_.set (x);
      }

      const LogPrintDocumentConfiguration::TextLogTitleLevel4Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel4 () const
      {
        return this->TextLogTitleLevel4_.get ();
      }

      LogPrintDocumentConfiguration::TextLogTitleLevel4Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel4 ()
      {
        return this->TextLogTitleLevel4_.get ();
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel4 (const TextLogTitleLevel4Type& x)
      {
        this->TextLogTitleLevel4_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel4 (::std::auto_ptr< TextLogTitleLevel4Type > x)
      {
        this->TextLogTitleLevel4_.set (x);
      }

      const LogPrintDocumentConfiguration::TextLogTitleLevel5Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel5 () const
      {
        return this->TextLogTitleLevel5_.get ();
      }

      LogPrintDocumentConfiguration::TextLogTitleLevel5Type& LogPrintDocumentConfiguration::
      getTextLogTitleLevel5 ()
      {
        return this->TextLogTitleLevel5_.get ();
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel5 (const TextLogTitleLevel5Type& x)
      {
        this->TextLogTitleLevel5_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setTextLogTitleLevel5 (::std::auto_ptr< TextLogTitleLevel5Type > x)
      {
        this->TextLogTitleLevel5_.set (x);
      }

      const LogPrintDocumentConfiguration::TextLogEntryType& LogPrintDocumentConfiguration::
      getTextLogEntry () const
      {
        return this->TextLogEntry_.get ();
      }

      LogPrintDocumentConfiguration::TextLogEntryType& LogPrintDocumentConfiguration::
      getTextLogEntry ()
      {
        return this->TextLogEntry_.get ();
      }

      void LogPrintDocumentConfiguration::
      setTextLogEntry (const TextLogEntryType& x)
      {
        this->TextLogEntry_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setTextLogEntry (::std::auto_ptr< TextLogEntryType > x)
      {
        this->TextLogEntry_.set (x);
      }

      const LogPrintDocumentConfiguration::ColumnLayoutType& LogPrintDocumentConfiguration::
      getColumnLayout () const
      {
        return this->ColumnLayout_.get ();
      }

      LogPrintDocumentConfiguration::ColumnLayoutType& LogPrintDocumentConfiguration::
      getColumnLayout ()
      {
        return this->ColumnLayout_.get ();
      }

      void LogPrintDocumentConfiguration::
      setColumnLayout (const ColumnLayoutType& x)
      {
        this->ColumnLayout_.set (x);
      }

      void LogPrintDocumentConfiguration::
      setColumnLayout (::std::auto_ptr< ColumnLayoutType > x)
      {
        this->ColumnLayout_.set (x);
      }


      // ConfigurationPrinter
      // 

      const ConfigurationPrinter::ConfigurationVoteType& ConfigurationPrinter::
      getConfigurationVote () const
      {
        return this->ConfigurationVote_.get ();
      }

      ConfigurationPrinter::ConfigurationVoteType& ConfigurationPrinter::
      getConfigurationVote ()
      {
        return this->ConfigurationVote_.get ();
      }

      void ConfigurationPrinter::
      setConfigurationVote (const ConfigurationVoteType& x)
      {
        this->ConfigurationVote_.set (x);
      }

      void ConfigurationPrinter::
      setConfigurationVote (::std::auto_ptr< ConfigurationVoteType > x)
      {
        this->ConfigurationVote_.set (x);
      }

      const ConfigurationPrinter::ConfigurationTimeoutType& ConfigurationPrinter::
      getConfigurationTimeout () const
      {
        return this->ConfigurationTimeout_.get ();
      }

      ConfigurationPrinter::ConfigurationTimeoutType& ConfigurationPrinter::
      getConfigurationTimeout ()
      {
        return this->ConfigurationTimeout_.get ();
      }

      void ConfigurationPrinter::
      setConfigurationTimeout (const ConfigurationTimeoutType& x)
      {
        this->ConfigurationTimeout_.set (x);
      }

      void ConfigurationPrinter::
      setConfigurationTimeout (::std::auto_ptr< ConfigurationTimeoutType > x)
      {
        this->ConfigurationTimeout_.set (x);
      }

      const ConfigurationPrinter::ConfigurationSmartcardRemovedType& ConfigurationPrinter::
      getConfigurationSmartcardRemoved () const
      {
        return this->ConfigurationSmartcardRemoved_.get ();
      }

      ConfigurationPrinter::ConfigurationSmartcardRemovedType& ConfigurationPrinter::
      getConfigurationSmartcardRemoved ()
      {
        return this->ConfigurationSmartcardRemoved_.get ();
      }

      void ConfigurationPrinter::
      setConfigurationSmartcardRemoved (const ConfigurationSmartcardRemovedType& x)
      {
        this->ConfigurationSmartcardRemoved_.set (x);
      }

      void ConfigurationPrinter::
      setConfigurationSmartcardRemoved (::std::auto_ptr< ConfigurationSmartcardRemovedType > x)
      {
        this->ConfigurationSmartcardRemoved_.set (x);
      }

      const ConfigurationPrinter::ConfigurationInstallationType& ConfigurationPrinter::
      getConfigurationInstallation () const
      {
        return this->ConfigurationInstallation_.get ();
      }

      ConfigurationPrinter::ConfigurationInstallationType& ConfigurationPrinter::
      getConfigurationInstallation ()
      {
        return this->ConfigurationInstallation_.get ();
      }

      void ConfigurationPrinter::
      setConfigurationInstallation (const ConfigurationInstallationType& x)
      {
        this->ConfigurationInstallation_.set (x);
      }

      void ConfigurationPrinter::
      setConfigurationInstallation (::std::auto_ptr< ConfigurationInstallationType > x)
      {
        this->ConfigurationInstallation_.set (x);
      }

      const ConfigurationPrinter::ConfigurationContingencyType& ConfigurationPrinter::
      getConfigurationContingency () const
      {
        return this->ConfigurationContingency_.get ();
      }

      ConfigurationPrinter::ConfigurationContingencyType& ConfigurationPrinter::
      getConfigurationContingency ()
      {
        return this->ConfigurationContingency_.get ();
      }

      void ConfigurationPrinter::
      setConfigurationContingency (const ConfigurationContingencyType& x)
      {
        this->ConfigurationContingency_.set (x);
      }

      void ConfigurationPrinter::
      setConfigurationContingency (::std::auto_ptr< ConfigurationContingencyType > x)
      {
        this->ConfigurationContingency_.set (x);
      }

      const ConfigurationPrinter::LogPrintDocConfigurationType& ConfigurationPrinter::
      getLogPrintDocConfiguration () const
      {
        return this->LogPrintDocConfiguration_.get ();
      }

      ConfigurationPrinter::LogPrintDocConfigurationType& ConfigurationPrinter::
      getLogPrintDocConfiguration ()
      {
        return this->LogPrintDocConfiguration_.get ();
      }

      void ConfigurationPrinter::
      setLogPrintDocConfiguration (const LogPrintDocConfigurationType& x)
      {
        this->LogPrintDocConfiguration_.set (x);
      }

      void ConfigurationPrinter::
      setLogPrintDocConfiguration (::std::auto_ptr< LogPrintDocConfigurationType > x)
      {
        this->LogPrintDocConfiguration_.set (x);
      }


      // ConfigurationScreenPreview
      // 

      const ConfigurationScreenPreview::ConfigurationVoteType& ConfigurationScreenPreview::
      getConfigurationVote () const
      {
        return this->ConfigurationVote_.get ();
      }

      ConfigurationScreenPreview::ConfigurationVoteType& ConfigurationScreenPreview::
      getConfigurationVote ()
      {
        return this->ConfigurationVote_.get ();
      }

      void ConfigurationScreenPreview::
      setConfigurationVote (const ConfigurationVoteType& x)
      {
        this->ConfigurationVote_.set (x);
      }

      void ConfigurationScreenPreview::
      setConfigurationVote (::std::auto_ptr< ConfigurationVoteType > x)
      {
        this->ConfigurationVote_.set (x);
      }


      // ConfigurationCard
      // 

      const ConfigurationCard::TimeOfValidityType& ConfigurationCard::
      getTimeOfValidity () const
      {
        return this->TimeOfValidity_.get ();
      }

      ConfigurationCard::TimeOfValidityType& ConfigurationCard::
      getTimeOfValidity ()
      {
        return this->TimeOfValidity_.get ();
      }

      void ConfigurationCard::
      setTimeOfValidity (const TimeOfValidityType& x)
      {
        this->TimeOfValidity_.set (x);
      }

      const ConfigurationCard::AllowRecoveryCardGenerationOfConsolidatedVotesType& ConfigurationCard::
      getAllowRecoveryCardGenerationOfConsolidatedVotes () const
      {
        return this->AllowRecoveryCardGenerationOfConsolidatedVotes_.get ();
      }

      ConfigurationCard::AllowRecoveryCardGenerationOfConsolidatedVotesType& ConfigurationCard::
      getAllowRecoveryCardGenerationOfConsolidatedVotes ()
      {
        return this->AllowRecoveryCardGenerationOfConsolidatedVotes_.get ();
      }

      void ConfigurationCard::
      setAllowRecoveryCardGenerationOfConsolidatedVotes (const AllowRecoveryCardGenerationOfConsolidatedVotesType& x)
      {
        this->AllowRecoveryCardGenerationOfConsolidatedVotes_.set (x);
      }


      // ConfigurationReportFile
      // 

      const ConfigurationReportFile::FileNameType& ConfigurationReportFile::
      getFileName () const
      {
        return this->FileName_.get ();
      }

      ConfigurationReportFile::FileNameType& ConfigurationReportFile::
      getFileName ()
      {
        return this->FileName_.get ();
      }

      void ConfigurationReportFile::
      setFileName (const FileNameType& x)
      {
        this->FileName_.set (x);
      }

      void ConfigurationReportFile::
      setFileName (::std::auto_ptr< FileNameType > x)
      {
        this->FileName_.set (x);
      }

      const ConfigurationReportFile::ReportTitleType& ConfigurationReportFile::
      getReportTitle () const
      {
        return this->ReportTitle_.get ();
      }

      ConfigurationReportFile::ReportTitleType& ConfigurationReportFile::
      getReportTitle ()
      {
        return this->ReportTitle_.get ();
      }

      void ConfigurationReportFile::
      setReportTitle (const ReportTitleType& x)
      {
        this->ReportTitle_.set (x);
      }

      void ConfigurationReportFile::
      setReportTitle (::std::auto_ptr< ReportTitleType > x)
      {
        this->ReportTitle_.set (x);
      }

      const ConfigurationReportFile::FileDescriptionType& ConfigurationReportFile::
      getFileDescription () const
      {
        return this->FileDescription_.get ();
      }

      ConfigurationReportFile::FileDescriptionType& ConfigurationReportFile::
      getFileDescription ()
      {
        return this->FileDescription_.get ();
      }

      void ConfigurationReportFile::
      setFileDescription (const FileDescriptionType& x)
      {
        this->FileDescription_.set (x);
      }

      void ConfigurationReportFile::
      setFileDescription (::std::auto_ptr< FileDescriptionType > x)
      {
        this->FileDescription_.set (x);
      }

      const ConfigurationReportFile::NumCopiesType& ConfigurationReportFile::
      getNumCopies () const
      {
        return this->NumCopies_.get ();
      }

      ConfigurationReportFile::NumCopiesType& ConfigurationReportFile::
      getNumCopies ()
      {
        return this->NumCopies_.get ();
      }

      void ConfigurationReportFile::
      setNumCopies (const NumCopiesType& x)
      {
        this->NumCopies_.set (x);
      }


      // ConfigurationReportPrinting
      // 

      const ConfigurationReportPrinting::ReportFilesSequence& ConfigurationReportPrinting::
      getReportFiles () const
      {
        return this->ReportFiles_;
      }

      ConfigurationReportPrinting::ReportFilesSequence& ConfigurationReportPrinting::
      getReportFiles ()
      {
        return this->ReportFiles_;
      }

      void ConfigurationReportPrinting::
      setReportFiles (const ReportFilesSequence& s)
      {
        this->ReportFiles_ = s;
      }


      // SaesConfiguration
      // 

      const SaesConfiguration::ConfigurationCardType& SaesConfiguration::
      getConfigurationCard () const
      {
        return this->ConfigurationCard_.get ();
      }

      SaesConfiguration::ConfigurationCardType& SaesConfiguration::
      getConfigurationCard ()
      {
        return this->ConfigurationCard_.get ();
      }

      void SaesConfiguration::
      setConfigurationCard (const ConfigurationCardType& x)
      {
        this->ConfigurationCard_.set (x);
      }

      void SaesConfiguration::
      setConfigurationCard (::std::auto_ptr< ConfigurationCardType > x)
      {
        this->ConfigurationCard_.set (x);
      }

      const SaesConfiguration::ConfigurationPrinterType& SaesConfiguration::
      getConfigurationPrinter () const
      {
        return this->ConfigurationPrinter_.get ();
      }

      SaesConfiguration::ConfigurationPrinterType& SaesConfiguration::
      getConfigurationPrinter ()
      {
        return this->ConfigurationPrinter_.get ();
      }

      void SaesConfiguration::
      setConfigurationPrinter (const ConfigurationPrinterType& x)
      {
        this->ConfigurationPrinter_.set (x);
      }

      void SaesConfiguration::
      setConfigurationPrinter (::std::auto_ptr< ConfigurationPrinterType > x)
      {
        this->ConfigurationPrinter_.set (x);
      }

      const SaesConfiguration::ConfigurationScreenPreviewType& SaesConfiguration::
      getConfigurationScreenPreview () const
      {
        return this->ConfigurationScreenPreview_.get ();
      }

      SaesConfiguration::ConfigurationScreenPreviewType& SaesConfiguration::
      getConfigurationScreenPreview ()
      {
        return this->ConfigurationScreenPreview_.get ();
      }

      void SaesConfiguration::
      setConfigurationScreenPreview (const ConfigurationScreenPreviewType& x)
      {
        this->ConfigurationScreenPreview_.set (x);
      }

      void SaesConfiguration::
      setConfigurationScreenPreview (::std::auto_ptr< ConfigurationScreenPreviewType > x)
      {
        this->ConfigurationScreenPreview_.set (x);
      }

      const SaesConfiguration::VoteDummyType& SaesConfiguration::
      getVoteDummy () const
      {
        return this->VoteDummy_.get ();
      }

      SaesConfiguration::VoteDummyType& SaesConfiguration::
      getVoteDummy ()
      {
        return this->VoteDummy_.get ();
      }

      void SaesConfiguration::
      setVoteDummy (const VoteDummyType& x)
      {
        this->VoteDummy_.set (x);
      }

      void SaesConfiguration::
      setVoteDummy (::std::auto_ptr< VoteDummyType > x)
      {
        this->VoteDummy_.set (x);
      }

      const SaesConfiguration::ReportPrintingType& SaesConfiguration::
      getReportPrinting () const
      {
        return this->ReportPrinting_.get ();
      }

      SaesConfiguration::ReportPrintingType& SaesConfiguration::
      getReportPrinting ()
      {
        return this->ReportPrinting_.get ();
      }

      void SaesConfiguration::
      setReportPrinting (const ReportPrintingType& x)
      {
        this->ReportPrinting_.set (x);
      }

      void SaesConfiguration::
      setReportPrinting (::std::auto_ptr< ReportPrintingType > x)
      {
        this->ReportPrinting_.set (x);
      }

      const SaesConfiguration::StatisticConfigurationType& SaesConfiguration::
      getStatisticConfiguration () const
      {
        return this->StatisticConfiguration_.get ();
      }

      SaesConfiguration::StatisticConfigurationType& SaesConfiguration::
      getStatisticConfiguration ()
      {
        return this->StatisticConfiguration_.get ();
      }

      void SaesConfiguration::
      setStatisticConfiguration (const StatisticConfigurationType& x)
      {
        this->StatisticConfiguration_.set (x);
      }

      void SaesConfiguration::
      setStatisticConfiguration (::std::auto_ptr< StatisticConfigurationType > x)
      {
        this->StatisticConfiguration_.set (x);
      }

      const SaesConfiguration::TransmissionPackageConfigurationType& SaesConfiguration::
      getTransmissionPackageConfiguration () const
      {
        return this->TransmissionPackageConfiguration_.get ();
      }

      SaesConfiguration::TransmissionPackageConfigurationType& SaesConfiguration::
      getTransmissionPackageConfiguration ()
      {
        return this->TransmissionPackageConfiguration_.get ();
      }

      void SaesConfiguration::
      setTransmissionPackageConfiguration (const TransmissionPackageConfigurationType& x)
      {
        this->TransmissionPackageConfiguration_.set (x);
      }

      void SaesConfiguration::
      setTransmissionPackageConfiguration (::std::auto_ptr< TransmissionPackageConfigurationType > x)
      {
        this->TransmissionPackageConfiguration_.set (x);
      }

      const SaesConfiguration::CodiFileConfigurationType& SaesConfiguration::
      getCodiFileConfiguration () const
      {
        return this->CodiFileConfiguration_.get ();
      }

      SaesConfiguration::CodiFileConfigurationType& SaesConfiguration::
      getCodiFileConfiguration ()
      {
        return this->CodiFileConfiguration_.get ();
      }

      void SaesConfiguration::
      setCodiFileConfiguration (const CodiFileConfigurationType& x)
      {
        this->CodiFileConfiguration_.set (x);
      }

      void SaesConfiguration::
      setCodiFileConfiguration (::std::auto_ptr< CodiFileConfigurationType > x)
      {
        this->CodiFileConfiguration_.set (x);
      }

      const SaesConfiguration::BarcodeQRCodeConfigType& SaesConfiguration::
      getBarcodeQRCodeConfig () const
      {
        return this->BarcodeQRCodeConfig_.get ();
      }

      SaesConfiguration::BarcodeQRCodeConfigType& SaesConfiguration::
      getBarcodeQRCodeConfig ()
      {
        return this->BarcodeQRCodeConfig_.get ();
      }

      void SaesConfiguration::
      setBarcodeQRCodeConfig (const BarcodeQRCodeConfigType& x)
      {
        this->BarcodeQRCodeConfig_.set (x);
      }

      void SaesConfiguration::
      setBarcodeQRCodeConfig (::std::auto_ptr< BarcodeQRCodeConfigType > x)
      {
        this->BarcodeQRCodeConfig_.set (x);
      }


      // VoteDummyConfiguration
      // 

      const VoteDummyConfiguration::LogicalVoterGroupCodeType& VoteDummyConfiguration::
      getLogicalVoterGroupCode () const
      {
        return this->LogicalVoterGroupCode_.get ();
      }

      VoteDummyConfiguration::LogicalVoterGroupCodeType& VoteDummyConfiguration::
      getLogicalVoterGroupCode ()
      {
        return this->LogicalVoterGroupCode_.get ();
      }

      void VoteDummyConfiguration::
      setLogicalVoterGroupCode (const LogicalVoterGroupCodeType& x)
      {
        this->LogicalVoterGroupCode_.set (x);
      }

      void VoteDummyConfiguration::
      setLogicalVoterGroupCode (::std::auto_ptr< LogicalVoterGroupCodeType > x)
      {
        this->LogicalVoterGroupCode_.set (x);
      }

      const VoteDummyConfiguration::ContestCodeType& VoteDummyConfiguration::
      getContestCode () const
      {
        return this->ContestCode_.get ();
      }

      VoteDummyConfiguration::ContestCodeType& VoteDummyConfiguration::
      getContestCode ()
      {
        return this->ContestCode_.get ();
      }

      void VoteDummyConfiguration::
      setContestCode (const ContestCodeType& x)
      {
        this->ContestCode_.set (x);
      }

      void VoteDummyConfiguration::
      setContestCode (::std::auto_ptr< ContestCodeType > x)
      {
        this->ContestCode_.set (x);
      }

      const VoteDummyConfiguration::BallotOptionCodeType& VoteDummyConfiguration::
      getBallotOptionCode () const
      {
        return this->BallotOptionCode_.get ();
      }

      VoteDummyConfiguration::BallotOptionCodeType& VoteDummyConfiguration::
      getBallotOptionCode ()
      {
        return this->BallotOptionCode_.get ();
      }

      void VoteDummyConfiguration::
      setBallotOptionCode (const BallotOptionCodeType& x)
      {
        this->BallotOptionCode_.set (x);
      }

      void VoteDummyConfiguration::
      setBallotOptionCode (::std::auto_ptr< BallotOptionCodeType > x)
      {
        this->BallotOptionCode_.set (x);
      }


      // TransmissionPackageConfiguration
      // 

      const TransmissionPackageConfiguration::SaveDemoVotesInTransmissionPackageType& TransmissionPackageConfiguration::
      getSaveDemoVotesInTransmissionPackage () const
      {
        return this->SaveDemoVotesInTransmissionPackage_.get ();
      }

      TransmissionPackageConfiguration::SaveDemoVotesInTransmissionPackageType& TransmissionPackageConfiguration::
      getSaveDemoVotesInTransmissionPackage ()
      {
        return this->SaveDemoVotesInTransmissionPackage_.get ();
      }

      void TransmissionPackageConfiguration::
      setSaveDemoVotesInTransmissionPackage (const SaveDemoVotesInTransmissionPackageType& x)
      {
        this->SaveDemoVotesInTransmissionPackage_.set (x);
      }


      // CodiFileConfiguration
      // 

      const CodiFileConfiguration::EnableCodiType& CodiFileConfiguration::
      getEnableCodi () const
      {
        return this->EnableCodi_.get ();
      }

      CodiFileConfiguration::EnableCodiType& CodiFileConfiguration::
      getEnableCodi ()
      {
        return this->EnableCodi_.get ();
      }

      void CodiFileConfiguration::
      setEnableCodi (const EnableCodiType& x)
      {
        this->EnableCodi_.set (x);
      }

      const CodiFileConfiguration::PersistenceCodiType& CodiFileConfiguration::
      getPersistenceCodi () const
      {
        return this->PersistenceCodi_.get ();
      }

      CodiFileConfiguration::PersistenceCodiType& CodiFileConfiguration::
      getPersistenceCodi ()
      {
        return this->PersistenceCodi_.get ();
      }

      void CodiFileConfiguration::
      setPersistenceCodi (const PersistenceCodiType& x)
      {
        this->PersistenceCodi_.set (x);
      }

      const CodiFileConfiguration::SeparatorVotingDeviceType& CodiFileConfiguration::
      getSeparatorVotingDevice () const
      {
        return this->SeparatorVotingDevice_.get ();
      }

      CodiFileConfiguration::SeparatorVotingDeviceType& CodiFileConfiguration::
      getSeparatorVotingDevice ()
      {
        return this->SeparatorVotingDevice_.get ();
      }

      void CodiFileConfiguration::
      setSeparatorVotingDevice (const SeparatorVotingDeviceType& x)
      {
        this->SeparatorVotingDevice_.set (x);
      }

      void CodiFileConfiguration::
      setSeparatorVotingDevice (::std::auto_ptr< SeparatorVotingDeviceType > x)
      {
        this->SeparatorVotingDevice_.set (x);
      }

      const CodiFileConfiguration::FirstStringFileNameType& CodiFileConfiguration::
      getFirstStringFileName () const
      {
        return this->FirstStringFileName_.get ();
      }

      CodiFileConfiguration::FirstStringFileNameType& CodiFileConfiguration::
      getFirstStringFileName ()
      {
        return this->FirstStringFileName_.get ();
      }

      void CodiFileConfiguration::
      setFirstStringFileName (const FirstStringFileNameType& x)
      {
        this->FirstStringFileName_.set (x);
      }

      void CodiFileConfiguration::
      setFirstStringFileName (::std::auto_ptr< FirstStringFileNameType > x)
      {
        this->FirstStringFileName_.set (x);
      }

      const CodiFileConfiguration::RuleCodiFileNameType& CodiFileConfiguration::
      getRuleCodiFileName () const
      {
        return this->RuleCodiFileName_.get ();
      }

      CodiFileConfiguration::RuleCodiFileNameType& CodiFileConfiguration::
      getRuleCodiFileName ()
      {
        return this->RuleCodiFileName_.get ();
      }

      void CodiFileConfiguration::
      setRuleCodiFileName (const RuleCodiFileNameType& x)
      {
        this->RuleCodiFileName_.set (x);
      }

      void CodiFileConfiguration::
      setRuleCodiFileName (::std::auto_ptr< RuleCodiFileNameType > x)
      {
        this->RuleCodiFileName_.set (x);
      }

      const CodiFileConfiguration::RegisterSType& CodiFileConfiguration::
      getRegisterS () const
      {
        return this->RegisterS_.get ();
      }

      CodiFileConfiguration::RegisterSType& CodiFileConfiguration::
      getRegisterS ()
      {
        return this->RegisterS_.get ();
      }

      void CodiFileConfiguration::
      setRegisterS (const RegisterSType& x)
      {
        this->RegisterS_.set (x);
      }

      void CodiFileConfiguration::
      setRegisterS (::std::auto_ptr< RegisterSType > x)
      {
        this->RegisterS_.set (x);
      }

      const CodiFileConfiguration::RegisterLType& CodiFileConfiguration::
      getRegisterL () const
      {
        return this->RegisterL_.get ();
      }

      CodiFileConfiguration::RegisterLType& CodiFileConfiguration::
      getRegisterL ()
      {
        return this->RegisterL_.get ();
      }

      void CodiFileConfiguration::
      setRegisterL (const RegisterLType& x)
      {
        this->RegisterL_.set (x);
      }

      void CodiFileConfiguration::
      setRegisterL (::std::auto_ptr< RegisterLType > x)
      {
        this->RegisterL_.set (x);
      }

      const CodiFileConfiguration::RegisterCType& CodiFileConfiguration::
      getRegisterC () const
      {
        return this->RegisterC_.get ();
      }

      CodiFileConfiguration::RegisterCType& CodiFileConfiguration::
      getRegisterC ()
      {
        return this->RegisterC_.get ();
      }

      void CodiFileConfiguration::
      setRegisterC (const RegisterCType& x)
      {
        this->RegisterC_.set (x);
      }

      void CodiFileConfiguration::
      setRegisterC (::std::auto_ptr< RegisterCType > x)
      {
        this->RegisterC_.set (x);
      }

      const CodiFileConfiguration::RegionNameType& CodiFileConfiguration::
      getRegionName () const
      {
        return this->RegionName_.get ();
      }

      CodiFileConfiguration::RegionNameType& CodiFileConfiguration::
      getRegionName ()
      {
        return this->RegionName_.get ();
      }

      void CodiFileConfiguration::
      setRegionName (const RegionNameType& x)
      {
        this->RegionName_.set (x);
      }

      void CodiFileConfiguration::
      setRegionName (::std::auto_ptr< RegionNameType > x)
      {
        this->RegionName_.set (x);
      }

      const CodiFileConfiguration::PersistenceX7SCodiType& CodiFileConfiguration::
      getPersistenceX7SCodi () const
      {
        return this->PersistenceX7SCodi_.get ();
      }

      CodiFileConfiguration::PersistenceX7SCodiType& CodiFileConfiguration::
      getPersistenceX7SCodi ()
      {
        return this->PersistenceX7SCodi_.get ();
      }

      void CodiFileConfiguration::
      setPersistenceX7SCodi (const PersistenceX7SCodiType& x)
      {
        this->PersistenceX7SCodi_.set (x);
      }

      const CodiFileConfiguration::X7SAddPVReportType& CodiFileConfiguration::
      getX7SAddPVReport () const
      {
        return this->X7SAddPVReport_.get ();
      }

      CodiFileConfiguration::X7SAddPVReportType& CodiFileConfiguration::
      getX7SAddPVReport ()
      {
        return this->X7SAddPVReport_.get ();
      }

      void CodiFileConfiguration::
      setX7SAddPVReport (const X7SAddPVReportType& x)
      {
        this->X7SAddPVReport_.set (x);
      }

      const CodiFileConfiguration::X7SSignedType& CodiFileConfiguration::
      getX7SSigned () const
      {
        return this->X7SSigned_.get ();
      }

      CodiFileConfiguration::X7SSignedType& CodiFileConfiguration::
      getX7SSigned ()
      {
        return this->X7SSigned_.get ();
      }

      void CodiFileConfiguration::
      setX7SSigned (const X7SSignedType& x)
      {
        this->X7SSigned_.set (x);
      }

      void CodiFileConfiguration::
      setX7SSigned (::std::auto_ptr< X7SSignedType > x)
      {
        this->X7SSigned_.set (x);
      }

      const CodiFileConfiguration::X7SCryptoType& CodiFileConfiguration::
      getX7SCrypto () const
      {
        return this->X7SCrypto_.get ();
      }

      CodiFileConfiguration::X7SCryptoType& CodiFileConfiguration::
      getX7SCrypto ()
      {
        return this->X7SCrypto_.get ();
      }

      void CodiFileConfiguration::
      setX7SCrypto (const X7SCryptoType& x)
      {
        this->X7SCrypto_.set (x);
      }

      void CodiFileConfiguration::
      setX7SCrypto (::std::auto_ptr< X7SCryptoType > x)
      {
        this->X7SCrypto_.set (x);
      }

      const CodiFileConfiguration::X7SSignedCertifiedType& CodiFileConfiguration::
      getX7SSignedCertified () const
      {
        return this->X7SSignedCertified_.get ();
      }

      CodiFileConfiguration::X7SSignedCertifiedType& CodiFileConfiguration::
      getX7SSignedCertified ()
      {
        return this->X7SSignedCertified_.get ();
      }

      void CodiFileConfiguration::
      setX7SSignedCertified (const X7SSignedCertifiedType& x)
      {
        this->X7SSignedCertified_.set (x);
      }

      void CodiFileConfiguration::
      setX7SSignedCertified (::std::auto_ptr< X7SSignedCertifiedType > x)
      {
        this->X7SSignedCertified_.set (x);
      }

      const CodiFileConfiguration::X7SCryptoCertifiedType& CodiFileConfiguration::
      getX7SCryptoCertified () const
      {
        return this->X7SCryptoCertified_.get ();
      }

      CodiFileConfiguration::X7SCryptoCertifiedType& CodiFileConfiguration::
      getX7SCryptoCertified ()
      {
        return this->X7SCryptoCertified_.get ();
      }

      void CodiFileConfiguration::
      setX7SCryptoCertified (const X7SCryptoCertifiedType& x)
      {
        this->X7SCryptoCertified_.set (x);
      }

      void CodiFileConfiguration::
      setX7SCryptoCertified (::std::auto_ptr< X7SCryptoCertifiedType > x)
      {
        this->X7SCryptoCertified_.set (x);
      }


      // RegisterCodiConfig
      // 

      const RegisterCodiConfig::UpdateNISCodeType& RegisterCodiConfig::
      getUpdateNISCode () const
      {
        return this->UpdateNISCode_.get ();
      }

      RegisterCodiConfig::UpdateNISCodeType& RegisterCodiConfig::
      getUpdateNISCode ()
      {
        return this->UpdateNISCode_.get ();
      }

      void RegisterCodiConfig::
      setUpdateNISCode (const UpdateNISCodeType& x)
      {
        this->UpdateNISCode_.set (x);
      }

      const RegisterCodiConfig::SetVotingTypeType& RegisterCodiConfig::
      getSetVotingType () const
      {
        return this->SetVotingType_.get ();
      }

      RegisterCodiConfig::SetVotingTypeType& RegisterCodiConfig::
      getSetVotingType ()
      {
        return this->SetVotingType_.get ();
      }

      void RegisterCodiConfig::
      setSetVotingType (const SetVotingTypeType& x)
      {
        this->SetVotingType_.set (x);
      }

      const RegisterCodiConfig::SetLanguageType& RegisterCodiConfig::
      getSetLanguage () const
      {
        return this->SetLanguage_.get ();
      }

      RegisterCodiConfig::SetLanguageType& RegisterCodiConfig::
      getSetLanguage ()
      {
        return this->SetLanguage_.get ();
      }

      void RegisterCodiConfig::
      setSetLanguage (const SetLanguageType& x)
      {
        this->SetLanguage_.set (x);
      }

      const RegisterCodiConfig::SetNISCodeType& RegisterCodiConfig::
      getSetNISCode () const
      {
        return this->SetNISCode_.get ();
      }

      RegisterCodiConfig::SetNISCodeType& RegisterCodiConfig::
      getSetNISCode ()
      {
        return this->SetNISCode_.get ();
      }

      void RegisterCodiConfig::
      setSetNISCode (const SetNISCodeType& x)
      {
        this->SetNISCode_.set (x);
      }

      const RegisterCodiConfig::FillLastFieldsOptional& RegisterCodiConfig::
      getFillLastFields () const
      {
        return this->FillLastFields_;
      }

      RegisterCodiConfig::FillLastFieldsOptional& RegisterCodiConfig::
      getFillLastFields ()
      {
        return this->FillLastFields_;
      }

      void RegisterCodiConfig::
      setFillLastFields (const FillLastFieldsType& x)
      {
        this->FillLastFields_.set (x);
      }

      void RegisterCodiConfig::
      setFillLastFields (const FillLastFieldsOptional& x)
      {
        this->FillLastFields_ = x;
      }


      // RegionNameCodiConfig
      // 

      RegionNameCodiConfig::
      RegionNameCodiConfig ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_RegionNameCodiConfig_literals_[v])
      {
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (const RegionNameCodiConfig& v,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      RegionNameCodiConfig& RegionNameCodiConfig::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_RegionNameCodiConfig_literals_[v]);

        return *this;
      }


      // RuleCodiFileNameConfiguration
      // 

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_RuleCodiFileNameConfiguration_literals_[v])
      {
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const RuleCodiFileNameConfiguration& v,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      RuleCodiFileNameConfiguration& RuleCodiFileNameConfiguration::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_RuleCodiFileNameConfiguration_literals_[v]);

        return *this;
      }


      // X7SSecurityType
      // 

      X7SSecurityType::
      X7SSecurityType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      X7SSecurityType::
      X7SSecurityType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_X7SSecurityType_literals_[v])
      {
      }

      X7SSecurityType::
      X7SSecurityType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SSecurityType::
      X7SSecurityType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SSecurityType::
      X7SSecurityType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SSecurityType::
      X7SSecurityType (const X7SSecurityType& v,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      X7SSecurityType& X7SSecurityType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_X7SSecurityType_literals_[v]);

        return *this;
      }


      // X7SSigned
      // 

      X7SSigned::
      X7SSigned ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      X7SSigned::
      X7SSigned (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_X7SSigned_literals_[v])
      {
      }

      X7SSigned::
      X7SSigned (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SSigned::
      X7SSigned (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SSigned::
      X7SSigned (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SSigned::
      X7SSigned (const X7SSigned& v,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      X7SSigned& X7SSigned::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_X7SSigned_literals_[v]);

        return *this;
      }


      // X7SCrypto
      // 

      X7SCrypto::
      X7SCrypto ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      X7SCrypto::
      X7SCrypto (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_X7SCrypto_literals_[v])
      {
      }

      X7SCrypto::
      X7SCrypto (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SCrypto::
      X7SCrypto (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SCrypto::
      X7SCrypto (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      X7SCrypto::
      X7SCrypto (const X7SCrypto& v,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      X7SCrypto& X7SCrypto::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_X7SCrypto_literals_[v]);

        return *this;
      }


      // StatisticConfiguration
      // 

      const StatisticConfiguration::StatisticGroupsSequence& StatisticConfiguration::
      getStatisticGroups () const
      {
        return this->StatisticGroups_;
      }

      StatisticConfiguration::StatisticGroupsSequence& StatisticConfiguration::
      getStatisticGroups ()
      {
        return this->StatisticGroups_;
      }

      void StatisticConfiguration::
      setStatisticGroups (const StatisticGroupsSequence& s)
      {
        this->StatisticGroups_ = s;
      }


      // StatisticGroups
      // 

      const StatisticGroups::StatisticItemSequence& StatisticGroups::
      getStatisticItem () const
      {
        return this->StatisticItem_;
      }

      StatisticGroups::StatisticItemSequence& StatisticGroups::
      getStatisticItem ()
      {
        return this->StatisticItem_;
      }

      void StatisticGroups::
      setStatisticItem (const StatisticItemSequence& s)
      {
        this->StatisticItem_ = s;
      }

      const StatisticGroups::StatisticEditTypeSequence& StatisticGroups::
      getStatisticEditType () const
      {
        return this->StatisticEditType_;
      }

      StatisticGroups::StatisticEditTypeSequence& StatisticGroups::
      getStatisticEditType ()
      {
        return this->StatisticEditType_;
      }

      void StatisticGroups::
      setStatisticEditType (const StatisticEditTypeSequence& s)
      {
        this->StatisticEditType_ = s;
      }

      const StatisticGroups::NameKeyType& StatisticGroups::
      getNameKey () const
      {
        return this->NameKey_.get ();
      }

      StatisticGroups::NameKeyType& StatisticGroups::
      getNameKey ()
      {
        return this->NameKey_.get ();
      }

      void StatisticGroups::
      setNameKey (const NameKeyType& x)
      {
        this->NameKey_.set (x);
      }

      void StatisticGroups::
      setNameKey (::std::auto_ptr< NameKeyType > x)
      {
        this->NameKey_.set (x);
      }

      const StatisticGroups::EditInfoKeyType& StatisticGroups::
      getEditInfoKey () const
      {
        return this->EditInfoKey_.get ();
      }

      StatisticGroups::EditInfoKeyType& StatisticGroups::
      getEditInfoKey ()
      {
        return this->EditInfoKey_.get ();
      }

      void StatisticGroups::
      setEditInfoKey (const EditInfoKeyType& x)
      {
        this->EditInfoKey_.set (x);
      }

      void StatisticGroups::
      setEditInfoKey (::std::auto_ptr< EditInfoKeyType > x)
      {
        this->EditInfoKey_.set (x);
      }

      const StatisticGroups::BlockerInfoKeyType& StatisticGroups::
      getBlockerInfoKey () const
      {
        return this->BlockerInfoKey_.get ();
      }

      StatisticGroups::BlockerInfoKeyType& StatisticGroups::
      getBlockerInfoKey ()
      {
        return this->BlockerInfoKey_.get ();
      }

      void StatisticGroups::
      setBlockerInfoKey (const BlockerInfoKeyType& x)
      {
        this->BlockerInfoKey_.set (x);
      }

      void StatisticGroups::
      setBlockerInfoKey (::std::auto_ptr< BlockerInfoKeyType > x)
      {
        this->BlockerInfoKey_.set (x);
      }

      const StatisticGroups::VerticalFillingType& StatisticGroups::
      getVerticalFilling () const
      {
        return this->VerticalFilling_.get ();
      }

      StatisticGroups::VerticalFillingType& StatisticGroups::
      getVerticalFilling ()
      {
        return this->VerticalFilling_.get ();
      }

      void StatisticGroups::
      setVerticalFilling (const VerticalFillingType& x)
      {
        this->VerticalFilling_.set (x);
      }

      const StatisticGroups::PivotType& StatisticGroups::
      getPivot () const
      {
        return this->Pivot_.get ();
      }

      StatisticGroups::PivotType& StatisticGroups::
      getPivot ()
      {
        return this->Pivot_.get ();
      }

      void StatisticGroups::
      setPivot (const PivotType& x)
      {
        this->Pivot_.set (x);
      }


      // StatisticItem
      // 

      const StatisticItem::AddStatisticCodeSequence& StatisticItem::
      getAddStatisticCode () const
      {
        return this->addStatisticCode_;
      }

      StatisticItem::AddStatisticCodeSequence& StatisticItem::
      getAddStatisticCode ()
      {
        return this->addStatisticCode_;
      }

      void StatisticItem::
      setAddStatisticCode (const AddStatisticCodeSequence& s)
      {
        this->addStatisticCode_ = s;
      }

      const StatisticItem::TypeType& StatisticItem::
      getType () const
      {
        return this->Type_.get ();
      }

      StatisticItem::TypeType& StatisticItem::
      getType ()
      {
        return this->Type_.get ();
      }

      void StatisticItem::
      setType (const TypeType& x)
      {
        this->Type_.set (x);
      }

      void StatisticItem::
      setType (::std::auto_ptr< TypeType > x)
      {
        this->Type_.set (x);
      }

      const StatisticItem::CodeType& StatisticItem::
      getCode () const
      {
        return this->Code_.get ();
      }

      StatisticItem::CodeType& StatisticItem::
      getCode ()
      {
        return this->Code_.get ();
      }

      void StatisticItem::
      setCode (const CodeType& x)
      {
        this->Code_.set (x);
      }

      void StatisticItem::
      setCode (::std::auto_ptr< CodeType > x)
      {
        this->Code_.set (x);
      }

      const StatisticItem::NameKeyType& StatisticItem::
      getNameKey () const
      {
        return this->NameKey_.get ();
      }

      StatisticItem::NameKeyType& StatisticItem::
      getNameKey ()
      {
        return this->NameKey_.get ();
      }

      void StatisticItem::
      setNameKey (const NameKeyType& x)
      {
        this->NameKey_.set (x);
      }

      void StatisticItem::
      setNameKey (::std::auto_ptr< NameKeyType > x)
      {
        this->NameKey_.set (x);
      }

      const StatisticItem::DescriptionKeyType& StatisticItem::
      getDescriptionKey () const
      {
        return this->DescriptionKey_.get ();
      }

      StatisticItem::DescriptionKeyType& StatisticItem::
      getDescriptionKey ()
      {
        return this->DescriptionKey_.get ();
      }

      void StatisticItem::
      setDescriptionKey (const DescriptionKeyType& x)
      {
        this->DescriptionKey_.set (x);
      }

      void StatisticItem::
      setDescriptionKey (::std::auto_ptr< DescriptionKeyType > x)
      {
        this->DescriptionKey_.set (x);
      }

      const StatisticItem::MaxOptional& StatisticItem::
      getMax () const
      {
        return this->Max_;
      }

      StatisticItem::MaxOptional& StatisticItem::
      getMax ()
      {
        return this->Max_;
      }

      void StatisticItem::
      setMax (const MaxType& x)
      {
        this->Max_.set (x);
      }

      void StatisticItem::
      setMax (const MaxOptional& x)
      {
        this->Max_ = x;
      }

      const StatisticItem::MaskOptional& StatisticItem::
      getMask () const
      {
        return this->Mask_;
      }

      StatisticItem::MaskOptional& StatisticItem::
      getMask ()
      {
        return this->Mask_;
      }

      void StatisticItem::
      setMask (const MaskType& x)
      {
        this->Mask_.set (x);
      }

      void StatisticItem::
      setMask (const MaskOptional& x)
      {
        this->Mask_ = x;
      }

      void StatisticItem::
      setMask (::std::auto_ptr< MaskType > x)
      {
        this->Mask_.set (x);
      }

      const StatisticItem::RegexOptional& StatisticItem::
      getRegex () const
      {
        return this->Regex_;
      }

      StatisticItem::RegexOptional& StatisticItem::
      getRegex ()
      {
        return this->Regex_;
      }

      void StatisticItem::
      setRegex (const RegexType& x)
      {
        this->Regex_.set (x);
      }

      void StatisticItem::
      setRegex (const RegexOptional& x)
      {
        this->Regex_ = x;
      }

      void StatisticItem::
      setRegex (::std::auto_ptr< RegexType > x)
      {
        this->Regex_.set (x);
      }

      const StatisticItem::MandatoryOptional& StatisticItem::
      getMandatory () const
      {
        return this->Mandatory_;
      }

      StatisticItem::MandatoryOptional& StatisticItem::
      getMandatory ()
      {
        return this->Mandatory_;
      }

      void StatisticItem::
      setMandatory (const MandatoryType& x)
      {
        this->Mandatory_.set (x);
      }

      void StatisticItem::
      setMandatory (const MandatoryOptional& x)
      {
        this->Mandatory_ = x;
      }

      const StatisticItem::WidthOptional& StatisticItem::
      getWidth () const
      {
        return this->Width_;
      }

      StatisticItem::WidthOptional& StatisticItem::
      getWidth ()
      {
        return this->Width_;
      }

      void StatisticItem::
      setWidth (const WidthType& x)
      {
        this->Width_.set (x);
      }

      void StatisticItem::
      setWidth (const WidthOptional& x)
      {
        this->Width_ = x;
      }

      const StatisticItem::HeightOptional& StatisticItem::
      getHeight () const
      {
        return this->Height_;
      }

      StatisticItem::HeightOptional& StatisticItem::
      getHeight ()
      {
        return this->Height_;
      }

      void StatisticItem::
      setHeight (const HeightType& x)
      {
        this->Height_.set (x);
      }

      void StatisticItem::
      setHeight (const HeightOptional& x)
      {
        this->Height_ = x;
      }


      // StatisticElementType
      // 

      StatisticElementType::
      StatisticElementType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      StatisticElementType::
      StatisticElementType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_StatisticElementType_literals_[v])
      {
      }

      StatisticElementType::
      StatisticElementType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      StatisticElementType::
      StatisticElementType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      StatisticElementType::
      StatisticElementType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      StatisticElementType::
      StatisticElementType (const StatisticElementType& v,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      StatisticElementType& StatisticElementType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_StatisticElementType_literals_[v]);

        return *this;
      }


      // StatisticEditType
      // 

      StatisticEditType::
      StatisticEditType ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      StatisticEditType::
      StatisticEditType (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_StatisticEditType_literals_[v])
      {
      }

      StatisticEditType::
      StatisticEditType (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      StatisticEditType::
      StatisticEditType (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      StatisticEditType::
      StatisticEditType (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      StatisticEditType::
      StatisticEditType (const StatisticEditType& v,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      StatisticEditType& StatisticEditType::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_StatisticEditType_literals_[v]);

        return *this;
      }


      // PositionImage
      // 

      PositionImage::
      PositionImage ()
      : ::Smartmatic::SAES::ConfigurationTypes::String ()
      {
      }

      PositionImage::
      PositionImage (Value v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_PositionImage_literals_[v])
      {
      }

      PositionImage::
      PositionImage (const char* v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      PositionImage::
      PositionImage (const ::std::string& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      PositionImage::
      PositionImage (const ::Smartmatic::SAES::ConfigurationTypes::String& v)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v)
      {
      }

      PositionImage::
      PositionImage (const PositionImage& v,
                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (v, f, c)
      {
      }

      PositionImage& PositionImage::
      operator= (Value v)
      {
        static_cast< ::Smartmatic::SAES::ConfigurationTypes::String& > (*this) = 
        ::Smartmatic::SAES::ConfigurationTypes::String (_xsd_PositionImage_literals_[v]);

        return *this;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      // TextConfiguration
      //

      TextConfiguration::
      TextConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        Size_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FontFamily_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Bold_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Italic_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        HPandding_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VPandding_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Align_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LevelPaddingSpaceChar_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Visible_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      TextConfiguration::
      TextConfiguration (const SizeType& Size,
                         const FontFamilyType& FontFamily,
                         const BoldType& Bold,
                         const ItalicType& Italic,
                         const HPanddingType& HPandding,
                         const VPanddingType& VPandding,
                         const AlignType& Align,
                         const LevelPaddingSpaceCharType& LevelPaddingSpaceChar,
                         const VisibleType& Visible)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        Size_ (Size, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FontFamily_ (FontFamily, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Bold_ (Bold, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Italic_ (Italic, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        HPandding_ (HPandding, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VPandding_ (VPandding, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Align_ (Align, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LevelPaddingSpaceChar_ (LevelPaddingSpaceChar, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Visible_ (Visible, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      TextConfiguration::
      TextConfiguration (const TextConfiguration& x,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        Size_ (x.Size_, f, this),
        FontFamily_ (x.FontFamily_, f, this),
        Bold_ (x.Bold_, f, this),
        Italic_ (x.Italic_, f, this),
        HPandding_ (x.HPandding_, f, this),
        VPandding_ (x.VPandding_, f, this),
        Align_ (x.Align_, f, this),
        LevelPaddingSpaceChar_ (x.LevelPaddingSpaceChar_, f, this),
        Visible_ (x.Visible_, f, this)
      {
      }

      TextConfiguration::
      TextConfiguration (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        Size_ (f, this),
        FontFamily_ (f, this),
        Bold_ (f, this),
        Italic_ (f, this),
        HPandding_ (f, this),
        VPandding_ (f, this),
        Align_ (f, this),
        LevelPaddingSpaceChar_ (f, this),
        Visible_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void TextConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Size
          //
          if (n.name () == "Size" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!Size_.present ())
            {
              this->Size_.set (SizeTraits::create (i, f, this));
              continue;
            }
          }

          // FontFamily
          //
          if (n.name () == "FontFamily" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< FontFamilyType > r (
              FontFamilyTraits::create (i, f, this));

            if (!FontFamily_.present ())
            {
              this->FontFamily_.set (r);
              continue;
            }
          }

          // Bold
          //
          if (n.name () == "Bold" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!Bold_.present ())
            {
              this->Bold_.set (BoldTraits::create (i, f, this));
              continue;
            }
          }

          // Italic
          //
          if (n.name () == "Italic" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!Italic_.present ())
            {
              this->Italic_.set (ItalicTraits::create (i, f, this));
              continue;
            }
          }

          // HPandding
          //
          if (n.name () == "HPandding" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!HPandding_.present ())
            {
              this->HPandding_.set (HPanddingTraits::create (i, f, this));
              continue;
            }
          }

          // VPandding
          //
          if (n.name () == "VPandding" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!VPandding_.present ())
            {
              this->VPandding_.set (VPanddingTraits::create (i, f, this));
              continue;
            }
          }

          // Align
          //
          if (n.name () == "Align" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< AlignType > r (
              AlignTraits::create (i, f, this));

            if (!Align_.present ())
            {
              this->Align_.set (r);
              continue;
            }
          }

          // LevelPaddingSpaceChar
          //
          if (n.name () == "LevelPaddingSpaceChar" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!LevelPaddingSpaceChar_.present ())
            {
              this->LevelPaddingSpaceChar_.set (LevelPaddingSpaceCharTraits::create (i, f, this));
              continue;
            }
          }

          // Visible
          //
          if (n.name () == "Visible" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!Visible_.present ())
            {
              this->Visible_.set (VisibleTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Size_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Size",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!FontFamily_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FontFamily",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!Bold_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Bold",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!Italic_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Italic",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!HPandding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "HPandding",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VPandding_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VPandding",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!Align_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Align",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!LevelPaddingSpaceChar_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LevelPaddingSpaceChar",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!Visible_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Visible",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      TextConfiguration* TextConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class TextConfiguration (*this, f, c);
      }

      TextConfiguration::
      ~TextConfiguration ()
      {
      }

      bool
      operator== (const TextConfiguration& x, const TextConfiguration& y)
      {
        if (!(x.getSize () == y.getSize ()))
          return false;

        if (!(x.getFontFamily () == y.getFontFamily ()))
          return false;

        if (!(x.getBold () == y.getBold ()))
          return false;

        if (!(x.getItalic () == y.getItalic ()))
          return false;

        if (!(x.getHPandding () == y.getHPandding ()))
          return false;

        if (!(x.getVPandding () == y.getVPandding ()))
          return false;

        if (!(x.getAlign () == y.getAlign ()))
          return false;

        if (!(x.getLevelPaddingSpaceChar () == y.getLevelPaddingSpaceChar ()))
          return false;

        if (!(x.getVisible () == y.getVisible ()))
          return false;

        return true;
      }

      bool
      operator!= (const TextConfiguration& x, const TextConfiguration& y)
      {
        return !(x == y);
      }

      // AlignType
      //

      AlignType::
      AlignType (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_AlignType_convert ();
      }

      AlignType::
      AlignType (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_AlignType_convert ();
      }

      AlignType::
      AlignType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_AlignType_convert ();
      }

      AlignType* AlignType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class AlignType (*this, f, c);
      }

      AlignType::Value AlignType::
      _xsd_AlignType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_AlignType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_AlignType_indexes_,
                          _xsd_AlignType_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_AlignType_indexes_ + 3 || _xsd_AlignType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const AlignType::
      _xsd_AlignType_literals_[3] =
      {
        "Left",
        "Center",
        "Right"
      };

      const AlignType::Value AlignType::
      _xsd_AlignType_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::AlignType::CONFIGURATION_CENTER,
        ::Smartmatic::SAES::Configuration::AlignType::CONFIGURATION_LEFT,
        ::Smartmatic::SAES::Configuration::AlignType::CONFIGURATION_RIGHT
      };

      // VoteChecksumType
      //

      VoteChecksumType::
      VoteChecksumType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_VoteChecksumType_convert ();
      }

      VoteChecksumType::
      VoteChecksumType (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_VoteChecksumType_convert ();
      }

      VoteChecksumType::
      VoteChecksumType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_VoteChecksumType_convert ();
      }

      VoteChecksumType* VoteChecksumType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class VoteChecksumType (*this, f, c);
      }

      VoteChecksumType::Value VoteChecksumType::
      _xsd_VoteChecksumType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VoteChecksumType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_VoteChecksumType_indexes_,
                          _xsd_VoteChecksumType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_VoteChecksumType_indexes_ + 2 || _xsd_VoteChecksumType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const VoteChecksumType::
      _xsd_VoteChecksumType_literals_[2] =
      {
        "CRC32",
        "MD5"
      };

      const VoteChecksumType::Value VoteChecksumType::
      _xsd_VoteChecksumType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::VoteChecksumType::CONFIGURATION_CRC32,
        ::Smartmatic::SAES::Configuration::VoteChecksumType::CONFIGURATION_MD5
      };

      // VoteEncodeModeType
      //

      VoteEncodeModeType::
      VoteEncodeModeType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_VoteEncodeModeType_convert ();
      }

      VoteEncodeModeType::
      VoteEncodeModeType (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_VoteEncodeModeType_convert ();
      }

      VoteEncodeModeType::
      VoteEncodeModeType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_VoteEncodeModeType_convert ();
      }

      VoteEncodeModeType* VoteEncodeModeType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class VoteEncodeModeType (*this, f, c);
      }

      VoteEncodeModeType::Value VoteEncodeModeType::
      _xsd_VoteEncodeModeType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VoteEncodeModeType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_VoteEncodeModeType_indexes_,
                          _xsd_VoteEncodeModeType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_VoteEncodeModeType_indexes_ + 2 || _xsd_VoteEncodeModeType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const VoteEncodeModeType::
      _xsd_VoteEncodeModeType_literals_[2] =
      {
        "BITWISE",
        "OPTIMIZED"
      };

      const VoteEncodeModeType::Value VoteEncodeModeType::
      _xsd_VoteEncodeModeType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::VoteEncodeModeType::CONFIGURATION_BITWISE,
        ::Smartmatic::SAES::Configuration::VoteEncodeModeType::CONFIGURATION_OPTIMIZED
      };

      // LayoutBallotOptiontType
      //

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_LayoutBallotOptiontType_convert ();
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const ::xercesc::DOMAttr& a,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_LayoutBallotOptiontType_convert ();
      }

      LayoutBallotOptiontType::
      LayoutBallotOptiontType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_LayoutBallotOptiontType_convert ();
      }

      LayoutBallotOptiontType* LayoutBallotOptiontType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class LayoutBallotOptiontType (*this, f, c);
      }

      LayoutBallotOptiontType::Value LayoutBallotOptiontType::
      _xsd_LayoutBallotOptiontType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LayoutBallotOptiontType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_LayoutBallotOptiontType_indexes_,
                          _xsd_LayoutBallotOptiontType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_LayoutBallotOptiontType_indexes_ + 2 || _xsd_LayoutBallotOptiontType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const LayoutBallotOptiontType::
      _xsd_LayoutBallotOptiontType_literals_[2] =
      {
        "SeparatePrincipalAndStandIn",
        "ConcatenatePrincipalAndStandIn"
      };

      const LayoutBallotOptiontType::Value LayoutBallotOptiontType::
      _xsd_LayoutBallotOptiontType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::LayoutBallotOptiontType::CONFIGURATION_CONCATENATEPRINCIPALANDSTANDIN,
        ::Smartmatic::SAES::Configuration::LayoutBallotOptiontType::CONFIGURATION_SEPARATEPRINCIPALANDSTANDIN
      };

      // LayoutSuperBlankType
      //

      LayoutSuperBlankType::
      LayoutSuperBlankType (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_LayoutSuperBlankType_convert ();
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_LayoutSuperBlankType_convert ();
      }

      LayoutSuperBlankType::
      LayoutSuperBlankType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_LayoutSuperBlankType_convert ();
      }

      LayoutSuperBlankType* LayoutSuperBlankType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class LayoutSuperBlankType (*this, f, c);
      }

      LayoutSuperBlankType::Value LayoutSuperBlankType::
      _xsd_LayoutSuperBlankType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LayoutSuperBlankType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_LayoutSuperBlankType_indexes_,
                          _xsd_LayoutSuperBlankType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_LayoutSuperBlankType_indexes_ + 2 || _xsd_LayoutSuperBlankType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const LayoutSuperBlankType::
      _xsd_LayoutSuperBlankType_literals_[2] =
      {
        "AllContest",
        "JustContestClass"
      };

      const LayoutSuperBlankType::Value LayoutSuperBlankType::
      _xsd_LayoutSuperBlankType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::LayoutSuperBlankType::CONFIGURATION_ALLCONTEST,
        ::Smartmatic::SAES::Configuration::LayoutSuperBlankType::CONFIGURATION_JUSTCONTESTCLASS
      };

      // LayoutContestType
      //

      LayoutContestType::
      LayoutContestType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_LayoutContestType_convert ();
      }

      LayoutContestType::
      LayoutContestType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_LayoutContestType_convert ();
      }

      LayoutContestType::
      LayoutContestType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_LayoutContestType_convert ();
      }

      LayoutContestType* LayoutContestType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class LayoutContestType (*this, f, c);
      }

      LayoutContestType::Value LayoutContestType::
      _xsd_LayoutContestType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_LayoutContestType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_LayoutContestType_indexes_,
                          _xsd_LayoutContestType_indexes_ + 4,
                          *this,
                          c));

        if (i == _xsd_LayoutContestType_indexes_ + 4 || _xsd_LayoutContestType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const LayoutContestType::
      _xsd_LayoutContestType_literals_[4] =
      {
        "Simple",
        "Truncated",
        "Selected",
        "Vertical"
      };

      const LayoutContestType::Value LayoutContestType::
      _xsd_LayoutContestType_indexes_[4] =
      {
        ::Smartmatic::SAES::Configuration::LayoutContestType::CONFIGURATION_SELECTED,
        ::Smartmatic::SAES::Configuration::LayoutContestType::CONFIGURATION_SIMPLE,
        ::Smartmatic::SAES::Configuration::LayoutContestType::CONFIGURATION_TRUNCATED,
        ::Smartmatic::SAES::Configuration::LayoutContestType::CONFIGURATION_VERTICAL
      };

      // QRcodePosition
      //

      QRcodePosition::
      QRcodePosition (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_QRcodePosition_convert ();
      }

      QRcodePosition::
      QRcodePosition (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_QRcodePosition_convert ();
      }

      QRcodePosition::
      QRcodePosition (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_QRcodePosition_convert ();
      }

      QRcodePosition* QRcodePosition::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class QRcodePosition (*this, f, c);
      }

      QRcodePosition::Value QRcodePosition::
      _xsd_QRcodePosition_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_QRcodePosition_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_QRcodePosition_indexes_,
                          _xsd_QRcodePosition_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_QRcodePosition_indexes_ + 3 || _xsd_QRcodePosition_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const QRcodePosition::
      _xsd_QRcodePosition_literals_[3] =
      {
        "TOP_ALL",
        "BOTTOM_HEADER",
        "BOTTOM_ALL"
      };

      const QRcodePosition::Value QRcodePosition::
      _xsd_QRcodePosition_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::QRcodePosition::CONFIGURATION_BOTTOM_ALL,
        ::Smartmatic::SAES::Configuration::QRcodePosition::CONFIGURATION_BOTTOM_HEADER,
        ::Smartmatic::SAES::Configuration::QRcodePosition::CONFIGURATION_TOP_ALL
      };

      // CorrectionModeQRCode
      //

      CorrectionModeQRCode::
      CorrectionModeQRCode (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_CorrectionModeQRCode_convert ();
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_CorrectionModeQRCode_convert ();
      }

      CorrectionModeQRCode::
      CorrectionModeQRCode (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_CorrectionModeQRCode_convert ();
      }

      CorrectionModeQRCode* CorrectionModeQRCode::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class CorrectionModeQRCode (*this, f, c);
      }

      CorrectionModeQRCode::Value CorrectionModeQRCode::
      _xsd_CorrectionModeQRCode_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CorrectionModeQRCode_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_CorrectionModeQRCode_indexes_,
                          _xsd_CorrectionModeQRCode_indexes_ + 4,
                          *this,
                          c));

        if (i == _xsd_CorrectionModeQRCode_indexes_ + 4 || _xsd_CorrectionModeQRCode_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const CorrectionModeQRCode::
      _xsd_CorrectionModeQRCode_literals_[4] =
      {
        "QR_ECLEVEL_L",
        "QR_ECLEVEL_M",
        "QR_ECLEVEL_Q",
        "QR_ECLEVEL_H"
      };

      const CorrectionModeQRCode::Value CorrectionModeQRCode::
      _xsd_CorrectionModeQRCode_indexes_[4] =
      {
        ::Smartmatic::SAES::Configuration::CorrectionModeQRCode::CONFIGURATION_QR_ECLEVEL_H,
        ::Smartmatic::SAES::Configuration::CorrectionModeQRCode::CONFIGURATION_QR_ECLEVEL_L,
        ::Smartmatic::SAES::Configuration::CorrectionModeQRCode::CONFIGURATION_QR_ECLEVEL_M,
        ::Smartmatic::SAES::Configuration::CorrectionModeQRCode::CONFIGURATION_QR_ECLEVEL_Q
      };

      // QRCodePrintingModeType
      //

      QRCodePrintingModeType::
      QRCodePrintingModeType (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_QRCodePrintingModeType_convert ();
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_QRCodePrintingModeType_convert ();
      }

      QRCodePrintingModeType::
      QRCodePrintingModeType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_QRCodePrintingModeType_convert ();
      }

      QRCodePrintingModeType* QRCodePrintingModeType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class QRCodePrintingModeType (*this, f, c);
      }

      QRCodePrintingModeType::Value QRCodePrintingModeType::
      _xsd_QRCodePrintingModeType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_QRCodePrintingModeType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_QRCodePrintingModeType_indexes_,
                          _xsd_QRCodePrintingModeType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_QRCodePrintingModeType_indexes_ + 2 || _xsd_QRCodePrintingModeType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const QRCodePrintingModeType::
      _xsd_QRCodePrintingModeType_literals_[2] =
      {
        "IMAGE_BASED",
        "COMMAND_BASED"
      };

      const QRCodePrintingModeType::Value QRCodePrintingModeType::
      _xsd_QRCodePrintingModeType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::QRCodePrintingModeType::CONFIGURATION_COMMAND_BASED,
        ::Smartmatic::SAES::Configuration::QRCodePrintingModeType::CONFIGURATION_IMAGE_BASED
      };

      // LayoutContestConfiguration
      //

      LayoutContestConfiguration::
      LayoutContestConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        LayoutContestType_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBallotOption_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CompleteWithSpaces_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      LayoutContestConfiguration::
      LayoutContestConfiguration (const LayoutContestTypeType& LayoutContestType,
                                  const TextBallotOptionType& TextBallotOption,
                                  const CompleteWithSpacesType& CompleteWithSpaces)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        LayoutContestType_ (LayoutContestType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBallotOption_ (TextBallotOption, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CompleteWithSpaces_ (CompleteWithSpaces, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      LayoutContestConfiguration::
      LayoutContestConfiguration (const LayoutContestTypeType& LayoutContestType,
                                  ::std::auto_ptr< TextBallotOptionType >& TextBallotOption,
                                  const CompleteWithSpacesType& CompleteWithSpaces)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        LayoutContestType_ (LayoutContestType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBallotOption_ (TextBallotOption, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CompleteWithSpaces_ (CompleteWithSpaces, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      LayoutContestConfiguration::
      LayoutContestConfiguration (const LayoutContestConfiguration& x,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        LayoutContestType_ (x.LayoutContestType_, f, this),
        TextBallotOption_ (x.TextBallotOption_, f, this),
        CompleteWithSpaces_ (x.CompleteWithSpaces_, f, this)
      {
      }

      LayoutContestConfiguration::
      LayoutContestConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        LayoutContestType_ (f, this),
        TextBallotOption_ (f, this),
        CompleteWithSpaces_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LayoutContestConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // LayoutContestType
          //
          if (n.name () == "LayoutContestType" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< LayoutContestTypeType > r (
              LayoutContestTypeTraits::create (i, f, this));

            if (!LayoutContestType_.present ())
            {
              this->LayoutContestType_.set (r);
              continue;
            }
          }

          // TextBallotOption
          //
          if (n.name () == "TextBallotOption" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextBallotOptionType > r (
              TextBallotOptionTraits::create (i, f, this));

            if (!TextBallotOption_.present ())
            {
              this->TextBallotOption_.set (r);
              continue;
            }
          }

          // CompleteWithSpaces
          //
          if (n.name () == "CompleteWithSpaces" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!CompleteWithSpaces_.present ())
            {
              this->CompleteWithSpaces_.set (CompleteWithSpacesTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!LayoutContestType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LayoutContestType",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextBallotOption_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextBallotOption",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!CompleteWithSpaces_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CompleteWithSpaces",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      LayoutContestConfiguration* LayoutContestConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class LayoutContestConfiguration (*this, f, c);
      }

      LayoutContestConfiguration::
      ~LayoutContestConfiguration ()
      {
      }

      bool
      operator== (const LayoutContestConfiguration& x, const LayoutContestConfiguration& y)
      {
        if (!(x.getLayoutContestType () == y.getLayoutContestType ()))
          return false;

        if (!(x.getTextBallotOption () == y.getTextBallotOption ()))
          return false;

        if (!(x.getCompleteWithSpaces () == y.getCompleteWithSpaces ()))
          return false;

        return true;
      }

      bool
      operator!= (const LayoutContestConfiguration& x, const LayoutContestConfiguration& y)
      {
        return !(x == y);
      }

      // ConfigurationVote
      //

      ConfigurationVote::
      ConfigurationVote ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        PaddingChar_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PrintToPdf_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRcodePosition_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodePrintingMode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LevelPaddingSpaceCharSize_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionLastNameChars_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionNameChars_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionCodeChars_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BallotOptionNameSeparator_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        DirectPrinting_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader1_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader2_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader3_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader4_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader5_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader6_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader7_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeaderCustomAttributes_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBallotName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextRegionName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextGeneric_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBlankVote_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CompleteVoteWithSpaces_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        UseMaxSizeBlankVote_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ShowBallotLines_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutContestConfiguration_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName1_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName2_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName3_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName1CustomAttribute_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName2CustomAttribute_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName3CustomAttribute_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextParentOptionSelected_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextPrincipalsMessage_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextStandInMessage_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutBallotOptiontType_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutSuperBlankType_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteEncodeMode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteChecksum_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeVoteList_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteQRCodeMode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        UseBackgroundImageForQR_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PositionImageInBackgroundQR_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteCodeConfig_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        AddBlankSpaceFullContest_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MultiLanguageConfiguration_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationVote::
      ConfigurationVote (const PaddingCharType& PaddingChar,
                         const PrintToPdfType& PrintToPdf,
                         const QRcodePositionType& QRcodePosition,
                         const QRCodePrintingModeType& QRCodePrintingMode,
                         const LevelPaddingSpaceCharSizeType& LevelPaddingSpaceCharSize,
                         const MaxBallotOptionLastNameCharsType& MaxBallotOptionLastNameChars,
                         const MaxBallotOptionNameCharsType& MaxBallotOptionNameChars,
                         const MaxBallotOptionCodeCharsType& MaxBallotOptionCodeChars,
                         const BallotOptionNameSeparatorType& BallotOptionNameSeparator,
                         const DirectPrintingType& DirectPrinting,
                         const TextHeader1Type& TextHeader1,
                         const TextHeader2Type& TextHeader2,
                         const TextHeader3Type& TextHeader3,
                         const TextHeader4Type& TextHeader4,
                         const TextHeader5Type& TextHeader5,
                         const TextHeader6Type& TextHeader6,
                         const TextHeader7Type& TextHeader7,
                         const TextHeaderCustomAttributesType& TextHeaderCustomAttributes,
                         const TextBallotNameType& TextBallotName,
                         const TextRegionNameType& TextRegionName,
                         const TextGenericType& TextGeneric,
                         const TextBlankVoteType& TextBlankVote,
                         const CompleteVoteWithSpacesType& CompleteVoteWithSpaces,
                         const UseMaxSizeBlankVoteType& UseMaxSizeBlankVote,
                         const ShowBallotLinesType& ShowBallotLines,
                         const LayoutContestConfigurationType& LayoutContestConfiguration,
                         const TextContestName1Type& TextContestName1,
                         const TextContestName2Type& TextContestName2,
                         const TextContestName3Type& TextContestName3,
                         const IsTextContestName1CustomAttributeType& IsTextContestName1CustomAttribute,
                         const IsTextContestName2CustomAttributeType& IsTextContestName2CustomAttribute,
                         const IsTextContestName3CustomAttributeType& IsTextContestName3CustomAttribute,
                         const TextParentOptionSelectedType& TextParentOptionSelected,
                         const TextPrincipalsMessageType& TextPrincipalsMessage,
                         const TextStandInMessageType& TextStandInMessage,
                         const LayoutBallotOptiontTypeType& LayoutBallotOptiontType,
                         const LayoutSuperBlankTypeType& LayoutSuperBlankType,
                         const VoteEncodeModeType& VoteEncodeMode,
                         const VoteChecksumType& VoteChecksum,
                         const QRCodeVoteListType& QRCodeVoteList,
                         const VoteQRCodeModeType& VoteQRCodeMode,
                         const UseBackgroundImageForQRType& UseBackgroundImageForQR,
                         const PositionImageInBackgroundQRType& PositionImageInBackgroundQR,
                         const VoteCodeConfigType& VoteCodeConfig,
                         const AddBlankSpaceFullContestType& AddBlankSpaceFullContest,
                         const MultiLanguageConfigurationType& MultiLanguageConfiguration)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        PaddingChar_ (PaddingChar, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PrintToPdf_ (PrintToPdf, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRcodePosition_ (QRcodePosition, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodePrintingMode_ (QRCodePrintingMode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LevelPaddingSpaceCharSize_ (LevelPaddingSpaceCharSize, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionLastNameChars_ (MaxBallotOptionLastNameChars, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionNameChars_ (MaxBallotOptionNameChars, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionCodeChars_ (MaxBallotOptionCodeChars, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BallotOptionNameSeparator_ (BallotOptionNameSeparator, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        DirectPrinting_ (DirectPrinting, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader1_ (TextHeader1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader2_ (TextHeader2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader3_ (TextHeader3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader4_ (TextHeader4, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader5_ (TextHeader5, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader6_ (TextHeader6, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader7_ (TextHeader7, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeaderCustomAttributes_ (TextHeaderCustomAttributes, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBallotName_ (TextBallotName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextRegionName_ (TextRegionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextGeneric_ (TextGeneric, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBlankVote_ (TextBlankVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CompleteVoteWithSpaces_ (CompleteVoteWithSpaces, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        UseMaxSizeBlankVote_ (UseMaxSizeBlankVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ShowBallotLines_ (ShowBallotLines, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutContestConfiguration_ (LayoutContestConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName1_ (TextContestName1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName2_ (TextContestName2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName3_ (TextContestName3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName1CustomAttribute_ (IsTextContestName1CustomAttribute, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName2CustomAttribute_ (IsTextContestName2CustomAttribute, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName3CustomAttribute_ (IsTextContestName3CustomAttribute, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextParentOptionSelected_ (TextParentOptionSelected, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextPrincipalsMessage_ (TextPrincipalsMessage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextStandInMessage_ (TextStandInMessage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutBallotOptiontType_ (LayoutBallotOptiontType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutSuperBlankType_ (LayoutSuperBlankType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteEncodeMode_ (VoteEncodeMode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteChecksum_ (VoteChecksum, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeVoteList_ (QRCodeVoteList, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteQRCodeMode_ (VoteQRCodeMode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        UseBackgroundImageForQR_ (UseBackgroundImageForQR, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PositionImageInBackgroundQR_ (PositionImageInBackgroundQR, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteCodeConfig_ (VoteCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        AddBlankSpaceFullContest_ (AddBlankSpaceFullContest, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MultiLanguageConfiguration_ (MultiLanguageConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationVote::
      ConfigurationVote (const PaddingCharType& PaddingChar,
                         const PrintToPdfType& PrintToPdf,
                         const QRcodePositionType& QRcodePosition,
                         const QRCodePrintingModeType& QRCodePrintingMode,
                         const LevelPaddingSpaceCharSizeType& LevelPaddingSpaceCharSize,
                         const MaxBallotOptionLastNameCharsType& MaxBallotOptionLastNameChars,
                         const MaxBallotOptionNameCharsType& MaxBallotOptionNameChars,
                         const MaxBallotOptionCodeCharsType& MaxBallotOptionCodeChars,
                         const BallotOptionNameSeparatorType& BallotOptionNameSeparator,
                         const DirectPrintingType& DirectPrinting,
                         ::std::auto_ptr< TextHeader1Type >& TextHeader1,
                         ::std::auto_ptr< TextHeader2Type >& TextHeader2,
                         ::std::auto_ptr< TextHeader3Type >& TextHeader3,
                         ::std::auto_ptr< TextHeader4Type >& TextHeader4,
                         ::std::auto_ptr< TextHeader5Type >& TextHeader5,
                         ::std::auto_ptr< TextHeader6Type >& TextHeader6,
                         ::std::auto_ptr< TextHeader7Type >& TextHeader7,
                         ::std::auto_ptr< TextHeaderCustomAttributesType >& TextHeaderCustomAttributes,
                         ::std::auto_ptr< TextBallotNameType >& TextBallotName,
                         ::std::auto_ptr< TextRegionNameType >& TextRegionName,
                         ::std::auto_ptr< TextGenericType >& TextGeneric,
                         ::std::auto_ptr< TextBlankVoteType >& TextBlankVote,
                         const CompleteVoteWithSpacesType& CompleteVoteWithSpaces,
                         const UseMaxSizeBlankVoteType& UseMaxSizeBlankVote,
                         const ShowBallotLinesType& ShowBallotLines,
                         ::std::auto_ptr< LayoutContestConfigurationType >& LayoutContestConfiguration,
                         ::std::auto_ptr< TextContestName1Type >& TextContestName1,
                         ::std::auto_ptr< TextContestName2Type >& TextContestName2,
                         ::std::auto_ptr< TextContestName3Type >& TextContestName3,
                         const IsTextContestName1CustomAttributeType& IsTextContestName1CustomAttribute,
                         const IsTextContestName2CustomAttributeType& IsTextContestName2CustomAttribute,
                         const IsTextContestName3CustomAttributeType& IsTextContestName3CustomAttribute,
                         ::std::auto_ptr< TextParentOptionSelectedType >& TextParentOptionSelected,
                         ::std::auto_ptr< TextPrincipalsMessageType >& TextPrincipalsMessage,
                         ::std::auto_ptr< TextStandInMessageType >& TextStandInMessage,
                         const LayoutBallotOptiontTypeType& LayoutBallotOptiontType,
                         const LayoutSuperBlankTypeType& LayoutSuperBlankType,
                         const VoteEncodeModeType& VoteEncodeMode,
                         const VoteChecksumType& VoteChecksum,
                         ::std::auto_ptr< QRCodeVoteListType >& QRCodeVoteList,
                         const VoteQRCodeModeType& VoteQRCodeMode,
                         const UseBackgroundImageForQRType& UseBackgroundImageForQR,
                         const PositionImageInBackgroundQRType& PositionImageInBackgroundQR,
                         ::std::auto_ptr< VoteCodeConfigType >& VoteCodeConfig,
                         const AddBlankSpaceFullContestType& AddBlankSpaceFullContest,
                         ::std::auto_ptr< MultiLanguageConfigurationType >& MultiLanguageConfiguration)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        PaddingChar_ (PaddingChar, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PrintToPdf_ (PrintToPdf, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRcodePosition_ (QRcodePosition, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodePrintingMode_ (QRCodePrintingMode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LevelPaddingSpaceCharSize_ (LevelPaddingSpaceCharSize, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionLastNameChars_ (MaxBallotOptionLastNameChars, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionNameChars_ (MaxBallotOptionNameChars, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxBallotOptionCodeChars_ (MaxBallotOptionCodeChars, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BallotOptionNameSeparator_ (BallotOptionNameSeparator, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        DirectPrinting_ (DirectPrinting, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader1_ (TextHeader1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader2_ (TextHeader2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader3_ (TextHeader3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader4_ (TextHeader4, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader5_ (TextHeader5, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader6_ (TextHeader6, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeader7_ (TextHeader7, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextHeaderCustomAttributes_ (TextHeaderCustomAttributes, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBallotName_ (TextBallotName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextRegionName_ (TextRegionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextGeneric_ (TextGeneric, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextBlankVote_ (TextBlankVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CompleteVoteWithSpaces_ (CompleteVoteWithSpaces, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        UseMaxSizeBlankVote_ (UseMaxSizeBlankVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ShowBallotLines_ (ShowBallotLines, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutContestConfiguration_ (LayoutContestConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName1_ (TextContestName1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName2_ (TextContestName2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContestName3_ (TextContestName3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName1CustomAttribute_ (IsTextContestName1CustomAttribute, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName2CustomAttribute_ (IsTextContestName2CustomAttribute, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IsTextContestName3CustomAttribute_ (IsTextContestName3CustomAttribute, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextParentOptionSelected_ (TextParentOptionSelected, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextPrincipalsMessage_ (TextPrincipalsMessage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextStandInMessage_ (TextStandInMessage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutBallotOptiontType_ (LayoutBallotOptiontType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LayoutSuperBlankType_ (LayoutSuperBlankType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteEncodeMode_ (VoteEncodeMode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteChecksum_ (VoteChecksum, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeVoteList_ (QRCodeVoteList, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteQRCodeMode_ (VoteQRCodeMode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        UseBackgroundImageForQR_ (UseBackgroundImageForQR, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PositionImageInBackgroundQR_ (PositionImageInBackgroundQR, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteCodeConfig_ (VoteCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        AddBlankSpaceFullContest_ (AddBlankSpaceFullContest, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MultiLanguageConfiguration_ (MultiLanguageConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationVote::
      ConfigurationVote (const ConfigurationVote& x,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        PaddingChar_ (x.PaddingChar_, f, this),
        PrintToPdf_ (x.PrintToPdf_, f, this),
        QRcodePosition_ (x.QRcodePosition_, f, this),
        QRCodePrintingMode_ (x.QRCodePrintingMode_, f, this),
        LevelPaddingSpaceCharSize_ (x.LevelPaddingSpaceCharSize_, f, this),
        MaxBallotOptionLastNameChars_ (x.MaxBallotOptionLastNameChars_, f, this),
        MaxBallotOptionNameChars_ (x.MaxBallotOptionNameChars_, f, this),
        MaxBallotOptionCodeChars_ (x.MaxBallotOptionCodeChars_, f, this),
        BallotOptionNameSeparator_ (x.BallotOptionNameSeparator_, f, this),
        DirectPrinting_ (x.DirectPrinting_, f, this),
        TextHeader1_ (x.TextHeader1_, f, this),
        TextHeader2_ (x.TextHeader2_, f, this),
        TextHeader3_ (x.TextHeader3_, f, this),
        TextHeader4_ (x.TextHeader4_, f, this),
        TextHeader5_ (x.TextHeader5_, f, this),
        TextHeader6_ (x.TextHeader6_, f, this),
        TextHeader7_ (x.TextHeader7_, f, this),
        TextHeaderCustomAttributes_ (x.TextHeaderCustomAttributes_, f, this),
        TextBallotName_ (x.TextBallotName_, f, this),
        TextRegionName_ (x.TextRegionName_, f, this),
        TextGeneric_ (x.TextGeneric_, f, this),
        TextBlankVote_ (x.TextBlankVote_, f, this),
        CompleteVoteWithSpaces_ (x.CompleteVoteWithSpaces_, f, this),
        UseMaxSizeBlankVote_ (x.UseMaxSizeBlankVote_, f, this),
        ShowBallotLines_ (x.ShowBallotLines_, f, this),
        LayoutContestConfiguration_ (x.LayoutContestConfiguration_, f, this),
        TextContestName1_ (x.TextContestName1_, f, this),
        TextContestName2_ (x.TextContestName2_, f, this),
        TextContestName3_ (x.TextContestName3_, f, this),
        IsTextContestName1CustomAttribute_ (x.IsTextContestName1CustomAttribute_, f, this),
        IsTextContestName2CustomAttribute_ (x.IsTextContestName2CustomAttribute_, f, this),
        IsTextContestName3CustomAttribute_ (x.IsTextContestName3CustomAttribute_, f, this),
        TextParentOptionSelected_ (x.TextParentOptionSelected_, f, this),
        TextPrincipalsMessage_ (x.TextPrincipalsMessage_, f, this),
        TextStandInMessage_ (x.TextStandInMessage_, f, this),
        LayoutBallotOptiontType_ (x.LayoutBallotOptiontType_, f, this),
        LayoutSuperBlankType_ (x.LayoutSuperBlankType_, f, this),
        VoteEncodeMode_ (x.VoteEncodeMode_, f, this),
        VoteChecksum_ (x.VoteChecksum_, f, this),
        QRCodeVoteList_ (x.QRCodeVoteList_, f, this),
        VoteQRCodeMode_ (x.VoteQRCodeMode_, f, this),
        UseBackgroundImageForQR_ (x.UseBackgroundImageForQR_, f, this),
        PositionImageInBackgroundQR_ (x.PositionImageInBackgroundQR_, f, this),
        VoteCodeConfig_ (x.VoteCodeConfig_, f, this),
        AddBlankSpaceFullContest_ (x.AddBlankSpaceFullContest_, f, this),
        MultiLanguageConfiguration_ (x.MultiLanguageConfiguration_, f, this)
      {
      }

      ConfigurationVote::
      ConfigurationVote (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        PaddingChar_ (f, this),
        PrintToPdf_ (f, this),
        QRcodePosition_ (f, this),
        QRCodePrintingMode_ (f, this),
        LevelPaddingSpaceCharSize_ (f, this),
        MaxBallotOptionLastNameChars_ (f, this),
        MaxBallotOptionNameChars_ (f, this),
        MaxBallotOptionCodeChars_ (f, this),
        BallotOptionNameSeparator_ (f, this),
        DirectPrinting_ (f, this),
        TextHeader1_ (f, this),
        TextHeader2_ (f, this),
        TextHeader3_ (f, this),
        TextHeader4_ (f, this),
        TextHeader5_ (f, this),
        TextHeader6_ (f, this),
        TextHeader7_ (f, this),
        TextHeaderCustomAttributes_ (f, this),
        TextBallotName_ (f, this),
        TextRegionName_ (f, this),
        TextGeneric_ (f, this),
        TextBlankVote_ (f, this),
        CompleteVoteWithSpaces_ (f, this),
        UseMaxSizeBlankVote_ (f, this),
        ShowBallotLines_ (f, this),
        LayoutContestConfiguration_ (f, this),
        TextContestName1_ (f, this),
        TextContestName2_ (f, this),
        TextContestName3_ (f, this),
        IsTextContestName1CustomAttribute_ (f, this),
        IsTextContestName2CustomAttribute_ (f, this),
        IsTextContestName3CustomAttribute_ (f, this),
        TextParentOptionSelected_ (f, this),
        TextPrincipalsMessage_ (f, this),
        TextStandInMessage_ (f, this),
        LayoutBallotOptiontType_ (f, this),
        LayoutSuperBlankType_ (f, this),
        VoteEncodeMode_ (f, this),
        VoteChecksum_ (f, this),
        QRCodeVoteList_ (f, this),
        VoteQRCodeMode_ (f, this),
        UseBackgroundImageForQR_ (f, this),
        PositionImageInBackgroundQR_ (f, this),
        VoteCodeConfig_ (f, this),
        AddBlankSpaceFullContest_ (f, this),
        MultiLanguageConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationVote::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PaddingChar
          //
          if (n.name () == "PaddingChar" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< PaddingCharType > r (
              PaddingCharTraits::create (i, f, this));

            if (!PaddingChar_.present ())
            {
              this->PaddingChar_.set (r);
              continue;
            }
          }

          // PrintToPdf
          //
          if (n.name () == "PrintToPdf" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!PrintToPdf_.present ())
            {
              this->PrintToPdf_.set (PrintToPdfTraits::create (i, f, this));
              continue;
            }
          }

          // QRcodePosition
          //
          if (n.name () == "QRcodePosition" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRcodePositionType > r (
              QRcodePositionTraits::create (i, f, this));

            if (!QRcodePosition_.present ())
            {
              this->QRcodePosition_.set (r);
              continue;
            }
          }

          // QRCodePrintingMode
          //
          if (n.name () == "QRCodePrintingMode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRCodePrintingModeType > r (
              QRCodePrintingModeTraits::create (i, f, this));

            if (!QRCodePrintingMode_.present ())
            {
              this->QRCodePrintingMode_.set (r);
              continue;
            }
          }

          // LevelPaddingSpaceCharSize
          //
          if (n.name () == "LevelPaddingSpaceCharSize" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!LevelPaddingSpaceCharSize_.present ())
            {
              this->LevelPaddingSpaceCharSize_.set (LevelPaddingSpaceCharSizeTraits::create (i, f, this));
              continue;
            }
          }

          // MaxBallotOptionLastNameChars
          //
          if (n.name () == "MaxBallotOptionLastNameChars" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!MaxBallotOptionLastNameChars_.present ())
            {
              this->MaxBallotOptionLastNameChars_.set (MaxBallotOptionLastNameCharsTraits::create (i, f, this));
              continue;
            }
          }

          // MaxBallotOptionNameChars
          //
          if (n.name () == "MaxBallotOptionNameChars" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!MaxBallotOptionNameChars_.present ())
            {
              this->MaxBallotOptionNameChars_.set (MaxBallotOptionNameCharsTraits::create (i, f, this));
              continue;
            }
          }

          // MaxBallotOptionCodeChars
          //
          if (n.name () == "MaxBallotOptionCodeChars" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!MaxBallotOptionCodeChars_.present ())
            {
              this->MaxBallotOptionCodeChars_.set (MaxBallotOptionCodeCharsTraits::create (i, f, this));
              continue;
            }
          }

          // BallotOptionNameSeparator
          //
          if (n.name () == "BallotOptionNameSeparator" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< BallotOptionNameSeparatorType > r (
              BallotOptionNameSeparatorTraits::create (i, f, this));

            if (!BallotOptionNameSeparator_.present ())
            {
              this->BallotOptionNameSeparator_.set (r);
              continue;
            }
          }

          // DirectPrinting
          //
          if (n.name () == "DirectPrinting" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!DirectPrinting_.present ())
            {
              this->DirectPrinting_.set (DirectPrintingTraits::create (i, f, this));
              continue;
            }
          }

          // TextHeader1
          //
          if (n.name () == "TextHeader1" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader1Type > r (
              TextHeader1Traits::create (i, f, this));

            if (!TextHeader1_.present ())
            {
              this->TextHeader1_.set (r);
              continue;
            }
          }

          // TextHeader2
          //
          if (n.name () == "TextHeader2" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader2Type > r (
              TextHeader2Traits::create (i, f, this));

            if (!TextHeader2_.present ())
            {
              this->TextHeader2_.set (r);
              continue;
            }
          }

          // TextHeader3
          //
          if (n.name () == "TextHeader3" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader3Type > r (
              TextHeader3Traits::create (i, f, this));

            if (!TextHeader3_.present ())
            {
              this->TextHeader3_.set (r);
              continue;
            }
          }

          // TextHeader4
          //
          if (n.name () == "TextHeader4" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader4Type > r (
              TextHeader4Traits::create (i, f, this));

            if (!TextHeader4_.present ())
            {
              this->TextHeader4_.set (r);
              continue;
            }
          }

          // TextHeader5
          //
          if (n.name () == "TextHeader5" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader5Type > r (
              TextHeader5Traits::create (i, f, this));

            if (!TextHeader5_.present ())
            {
              this->TextHeader5_.set (r);
              continue;
            }
          }

          // TextHeader6
          //
          if (n.name () == "TextHeader6" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader6Type > r (
              TextHeader6Traits::create (i, f, this));

            if (!TextHeader6_.present ())
            {
              this->TextHeader6_.set (r);
              continue;
            }
          }

          // TextHeader7
          //
          if (n.name () == "TextHeader7" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeader7Type > r (
              TextHeader7Traits::create (i, f, this));

            if (!TextHeader7_.present ())
            {
              this->TextHeader7_.set (r);
              continue;
            }
          }

          // TextHeaderCustomAttributes
          //
          if (n.name () == "TextHeaderCustomAttributes" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextHeaderCustomAttributesType > r (
              TextHeaderCustomAttributesTraits::create (i, f, this));

            if (!TextHeaderCustomAttributes_.present ())
            {
              this->TextHeaderCustomAttributes_.set (r);
              continue;
            }
          }

          // TextBallotName
          //
          if (n.name () == "TextBallotName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextBallotNameType > r (
              TextBallotNameTraits::create (i, f, this));

            if (!TextBallotName_.present ())
            {
              this->TextBallotName_.set (r);
              continue;
            }
          }

          // TextRegionName
          //
          if (n.name () == "TextRegionName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextRegionNameType > r (
              TextRegionNameTraits::create (i, f, this));

            if (!TextRegionName_.present ())
            {
              this->TextRegionName_.set (r);
              continue;
            }
          }

          // TextGeneric
          //
          if (n.name () == "TextGeneric" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextGenericType > r (
              TextGenericTraits::create (i, f, this));

            if (!TextGeneric_.present ())
            {
              this->TextGeneric_.set (r);
              continue;
            }
          }

          // TextBlankVote
          //
          if (n.name () == "TextBlankVote" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextBlankVoteType > r (
              TextBlankVoteTraits::create (i, f, this));

            if (!TextBlankVote_.present ())
            {
              this->TextBlankVote_.set (r);
              continue;
            }
          }

          // CompleteVoteWithSpaces
          //
          if (n.name () == "CompleteVoteWithSpaces" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!CompleteVoteWithSpaces_.present ())
            {
              this->CompleteVoteWithSpaces_.set (CompleteVoteWithSpacesTraits::create (i, f, this));
              continue;
            }
          }

          // UseMaxSizeBlankVote
          //
          if (n.name () == "UseMaxSizeBlankVote" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!UseMaxSizeBlankVote_.present ())
            {
              this->UseMaxSizeBlankVote_.set (UseMaxSizeBlankVoteTraits::create (i, f, this));
              continue;
            }
          }

          // ShowBallotLines
          //
          if (n.name () == "ShowBallotLines" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!ShowBallotLines_.present ())
            {
              this->ShowBallotLines_.set (ShowBallotLinesTraits::create (i, f, this));
              continue;
            }
          }

          // LayoutContestConfiguration
          //
          if (n.name () == "LayoutContestConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< LayoutContestConfigurationType > r (
              LayoutContestConfigurationTraits::create (i, f, this));

            if (!LayoutContestConfiguration_.present ())
            {
              this->LayoutContestConfiguration_.set (r);
              continue;
            }
          }

          // TextContestName1
          //
          if (n.name () == "TextContestName1" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContestName1Type > r (
              TextContestName1Traits::create (i, f, this));

            if (!TextContestName1_.present ())
            {
              this->TextContestName1_.set (r);
              continue;
            }
          }

          // TextContestName2
          //
          if (n.name () == "TextContestName2" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContestName2Type > r (
              TextContestName2Traits::create (i, f, this));

            if (!TextContestName2_.present ())
            {
              this->TextContestName2_.set (r);
              continue;
            }
          }

          // TextContestName3
          //
          if (n.name () == "TextContestName3" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContestName3Type > r (
              TextContestName3Traits::create (i, f, this));

            if (!TextContestName3_.present ())
            {
              this->TextContestName3_.set (r);
              continue;
            }
          }

          // IsTextContestName1CustomAttribute
          //
          if (n.name () == "IsTextContestName1CustomAttribute" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!IsTextContestName1CustomAttribute_.present ())
            {
              this->IsTextContestName1CustomAttribute_.set (IsTextContestName1CustomAttributeTraits::create (i, f, this));
              continue;
            }
          }

          // IsTextContestName2CustomAttribute
          //
          if (n.name () == "IsTextContestName2CustomAttribute" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!IsTextContestName2CustomAttribute_.present ())
            {
              this->IsTextContestName2CustomAttribute_.set (IsTextContestName2CustomAttributeTraits::create (i, f, this));
              continue;
            }
          }

          // IsTextContestName3CustomAttribute
          //
          if (n.name () == "IsTextContestName3CustomAttribute" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!IsTextContestName3CustomAttribute_.present ())
            {
              this->IsTextContestName3CustomAttribute_.set (IsTextContestName3CustomAttributeTraits::create (i, f, this));
              continue;
            }
          }

          // TextParentOptionSelected
          //
          if (n.name () == "TextParentOptionSelected" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextParentOptionSelectedType > r (
              TextParentOptionSelectedTraits::create (i, f, this));

            if (!TextParentOptionSelected_.present ())
            {
              this->TextParentOptionSelected_.set (r);
              continue;
            }
          }

          // TextPrincipalsMessage
          //
          if (n.name () == "TextPrincipalsMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextPrincipalsMessageType > r (
              TextPrincipalsMessageTraits::create (i, f, this));

            if (!TextPrincipalsMessage_.present ())
            {
              this->TextPrincipalsMessage_.set (r);
              continue;
            }
          }

          // TextStandInMessage
          //
          if (n.name () == "TextStandInMessage" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextStandInMessageType > r (
              TextStandInMessageTraits::create (i, f, this));

            if (!TextStandInMessage_.present ())
            {
              this->TextStandInMessage_.set (r);
              continue;
            }
          }

          // LayoutBallotOptiontType
          //
          if (n.name () == "LayoutBallotOptiontType" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< LayoutBallotOptiontTypeType > r (
              LayoutBallotOptiontTypeTraits::create (i, f, this));

            if (!LayoutBallotOptiontType_.present ())
            {
              this->LayoutBallotOptiontType_.set (r);
              continue;
            }
          }

          // LayoutSuperBlankType
          //
          if (n.name () == "LayoutSuperBlankType" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< LayoutSuperBlankTypeType > r (
              LayoutSuperBlankTypeTraits::create (i, f, this));

            if (!LayoutSuperBlankType_.present ())
            {
              this->LayoutSuperBlankType_.set (r);
              continue;
            }
          }

          // VoteEncodeMode
          //
          if (n.name () == "VoteEncodeMode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< VoteEncodeModeType > r (
              VoteEncodeModeTraits::create (i, f, this));

            if (!VoteEncodeMode_.present ())
            {
              this->VoteEncodeMode_.set (r);
              continue;
            }
          }

          // VoteChecksum
          //
          if (n.name () == "VoteChecksum" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< VoteChecksumType > r (
              VoteChecksumTraits::create (i, f, this));

            if (!VoteChecksum_.present ())
            {
              this->VoteChecksum_.set (r);
              continue;
            }
          }

          // QRCodeVoteList
          //
          if (n.name () == "QRCodeVoteList" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRCodeVoteListType > r (
              QRCodeVoteListTraits::create (i, f, this));

            if (!QRCodeVoteList_.present ())
            {
              this->QRCodeVoteList_.set (r);
              continue;
            }
          }

          // VoteQRCodeMode
          //
          if (n.name () == "VoteQRCodeMode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< VoteQRCodeModeType > r (
              VoteQRCodeModeTraits::create (i, f, this));

            if (!VoteQRCodeMode_.present ())
            {
              this->VoteQRCodeMode_.set (r);
              continue;
            }
          }

          // UseBackgroundImageForQR
          //
          if (n.name () == "UseBackgroundImageForQR" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!UseBackgroundImageForQR_.present ())
            {
              this->UseBackgroundImageForQR_.set (UseBackgroundImageForQRTraits::create (i, f, this));
              continue;
            }
          }

          // PositionImageInBackgroundQR
          //
          if (n.name () == "PositionImageInBackgroundQR" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< PositionImageInBackgroundQRType > r (
              PositionImageInBackgroundQRTraits::create (i, f, this));

            if (!PositionImageInBackgroundQR_.present ())
            {
              this->PositionImageInBackgroundQR_.set (r);
              continue;
            }
          }

          // VoteCodeConfig
          //
          if (n.name () == "VoteCodeConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< VoteCodeConfigType > r (
              VoteCodeConfigTraits::create (i, f, this));

            if (!VoteCodeConfig_.present ())
            {
              this->VoteCodeConfig_.set (r);
              continue;
            }
          }

          // AddBlankSpaceFullContest
          //
          if (n.name () == "AddBlankSpaceFullContest" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!AddBlankSpaceFullContest_.present ())
            {
              this->AddBlankSpaceFullContest_.set (AddBlankSpaceFullContestTraits::create (i, f, this));
              continue;
            }
          }

          // MultiLanguageConfiguration
          //
          if (n.name () == "MultiLanguageConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< MultiLanguageConfigurationType > r (
              MultiLanguageConfigurationTraits::create (i, f, this));

            if (!MultiLanguageConfiguration_.present ())
            {
              this->MultiLanguageConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!PaddingChar_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PaddingChar",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!PrintToPdf_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PrintToPdf",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!QRcodePosition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QRcodePosition",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!QRCodePrintingMode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QRCodePrintingMode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!LevelPaddingSpaceCharSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LevelPaddingSpaceCharSize",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!MaxBallotOptionLastNameChars_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxBallotOptionLastNameChars",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!MaxBallotOptionNameChars_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxBallotOptionNameChars",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!MaxBallotOptionCodeChars_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxBallotOptionCodeChars",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!BallotOptionNameSeparator_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BallotOptionNameSeparator",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!DirectPrinting_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "DirectPrinting",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader1",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader2_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader2",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader3_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader3",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader4_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader4",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader5_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader5",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader6_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader6",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeader7_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeader7",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextHeaderCustomAttributes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextHeaderCustomAttributes",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextBallotName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextBallotName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextRegionName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextRegionName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextGeneric_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextGeneric",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextBlankVote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextBlankVote",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!CompleteVoteWithSpaces_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CompleteVoteWithSpaces",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!UseMaxSizeBlankVote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseMaxSizeBlankVote",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ShowBallotLines_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBallotLines",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!LayoutContestConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LayoutContestConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextContestName1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContestName1",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextContestName2_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContestName2",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextContestName3_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContestName3",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!IsTextContestName1CustomAttribute_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IsTextContestName1CustomAttribute",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!IsTextContestName2CustomAttribute_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IsTextContestName2CustomAttribute",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!IsTextContestName3CustomAttribute_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IsTextContestName3CustomAttribute",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextParentOptionSelected_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextParentOptionSelected",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextPrincipalsMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextPrincipalsMessage",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextStandInMessage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextStandInMessage",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!LayoutBallotOptiontType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LayoutBallotOptiontType",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!LayoutSuperBlankType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LayoutSuperBlankType",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VoteEncodeMode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteEncodeMode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VoteChecksum_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteChecksum",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!QRCodeVoteList_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QRCodeVoteList",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VoteQRCodeMode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteQRCodeMode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!UseBackgroundImageForQR_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseBackgroundImageForQR",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!PositionImageInBackgroundQR_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PositionImageInBackgroundQR",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VoteCodeConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteCodeConfig",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!AddBlankSpaceFullContest_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AddBlankSpaceFullContest",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!MultiLanguageConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MultiLanguageConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationVote* ConfigurationVote::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationVote (*this, f, c);
      }

      ConfigurationVote::
      ~ConfigurationVote ()
      {
      }

      bool
      operator== (const ConfigurationVote& x, const ConfigurationVote& y)
      {
        if (!(x.getPaddingChar () == y.getPaddingChar ()))
          return false;

        if (!(x.getPrintToPdf () == y.getPrintToPdf ()))
          return false;

        if (!(x.getQRcodePosition () == y.getQRcodePosition ()))
          return false;

        if (!(x.getQRCodePrintingMode () == y.getQRCodePrintingMode ()))
          return false;

        if (!(x.getLevelPaddingSpaceCharSize () == y.getLevelPaddingSpaceCharSize ()))
          return false;

        if (!(x.getMaxBallotOptionLastNameChars () == y.getMaxBallotOptionLastNameChars ()))
          return false;

        if (!(x.getMaxBallotOptionNameChars () == y.getMaxBallotOptionNameChars ()))
          return false;

        if (!(x.getMaxBallotOptionCodeChars () == y.getMaxBallotOptionCodeChars ()))
          return false;

        if (!(x.getBallotOptionNameSeparator () == y.getBallotOptionNameSeparator ()))
          return false;

        if (!(x.getDirectPrinting () == y.getDirectPrinting ()))
          return false;

        if (!(x.getTextHeader1 () == y.getTextHeader1 ()))
          return false;

        if (!(x.getTextHeader2 () == y.getTextHeader2 ()))
          return false;

        if (!(x.getTextHeader3 () == y.getTextHeader3 ()))
          return false;

        if (!(x.getTextHeader4 () == y.getTextHeader4 ()))
          return false;

        if (!(x.getTextHeader5 () == y.getTextHeader5 ()))
          return false;

        if (!(x.getTextHeader6 () == y.getTextHeader6 ()))
          return false;

        if (!(x.getTextHeader7 () == y.getTextHeader7 ()))
          return false;

        if (!(x.getTextHeaderCustomAttributes () == y.getTextHeaderCustomAttributes ()))
          return false;

        if (!(x.getTextBallotName () == y.getTextBallotName ()))
          return false;

        if (!(x.getTextRegionName () == y.getTextRegionName ()))
          return false;

        if (!(x.getTextGeneric () == y.getTextGeneric ()))
          return false;

        if (!(x.getTextBlankVote () == y.getTextBlankVote ()))
          return false;

        if (!(x.getCompleteVoteWithSpaces () == y.getCompleteVoteWithSpaces ()))
          return false;

        if (!(x.getUseMaxSizeBlankVote () == y.getUseMaxSizeBlankVote ()))
          return false;

        if (!(x.getShowBallotLines () == y.getShowBallotLines ()))
          return false;

        if (!(x.getLayoutContestConfiguration () == y.getLayoutContestConfiguration ()))
          return false;

        if (!(x.getTextContestName1 () == y.getTextContestName1 ()))
          return false;

        if (!(x.getTextContestName2 () == y.getTextContestName2 ()))
          return false;

        if (!(x.getTextContestName3 () == y.getTextContestName3 ()))
          return false;

        if (!(x.getIsTextContestName1CustomAttribute () == y.getIsTextContestName1CustomAttribute ()))
          return false;

        if (!(x.getIsTextContestName2CustomAttribute () == y.getIsTextContestName2CustomAttribute ()))
          return false;

        if (!(x.getIsTextContestName3CustomAttribute () == y.getIsTextContestName3CustomAttribute ()))
          return false;

        if (!(x.getTextParentOptionSelected () == y.getTextParentOptionSelected ()))
          return false;

        if (!(x.getTextPrincipalsMessage () == y.getTextPrincipalsMessage ()))
          return false;

        if (!(x.getTextStandInMessage () == y.getTextStandInMessage ()))
          return false;

        if (!(x.getLayoutBallotOptiontType () == y.getLayoutBallotOptiontType ()))
          return false;

        if (!(x.getLayoutSuperBlankType () == y.getLayoutSuperBlankType ()))
          return false;

        if (!(x.getVoteEncodeMode () == y.getVoteEncodeMode ()))
          return false;

        if (!(x.getVoteChecksum () == y.getVoteChecksum ()))
          return false;

        if (!(x.getQRCodeVoteList () == y.getQRCodeVoteList ()))
          return false;

        if (!(x.getVoteQRCodeMode () == y.getVoteQRCodeMode ()))
          return false;

        if (!(x.getUseBackgroundImageForQR () == y.getUseBackgroundImageForQR ()))
          return false;

        if (!(x.getPositionImageInBackgroundQR () == y.getPositionImageInBackgroundQR ()))
          return false;

        if (!(x.getVoteCodeConfig () == y.getVoteCodeConfig ()))
          return false;

        if (!(x.getAddBlankSpaceFullContest () == y.getAddBlankSpaceFullContest ()))
          return false;

        if (!(x.getMultiLanguageConfiguration () == y.getMultiLanguageConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationVote& x, const ConfigurationVote& y)
      {
        return !(x == y);
      }

      // VoteQRCodeModeEnum
      //

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_VoteQRCodeModeEnum_convert ();
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_VoteQRCodeModeEnum_convert ();
      }

      VoteQRCodeModeEnum::
      VoteQRCodeModeEnum (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_VoteQRCodeModeEnum_convert ();
      }

      VoteQRCodeModeEnum* VoteQRCodeModeEnum::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class VoteQRCodeModeEnum (*this, f, c);
      }

      VoteQRCodeModeEnum::Value VoteQRCodeModeEnum::
      _xsd_VoteQRCodeModeEnum_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VoteQRCodeModeEnum_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_VoteQRCodeModeEnum_indexes_,
                          _xsd_VoteQRCodeModeEnum_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_VoteQRCodeModeEnum_indexes_ + 3 || _xsd_VoteQRCodeModeEnum_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const VoteQRCodeModeEnum::
      _xsd_VoteQRCodeModeEnum_literals_[3] =
      {
        "XmlFull",
        "XmlReduced",
        "SizeOptimized"
      };

      const VoteQRCodeModeEnum::Value VoteQRCodeModeEnum::
      _xsd_VoteQRCodeModeEnum_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::VoteQRCodeModeEnum::CONFIGURATION_SIZEOPTIMIZED,
        ::Smartmatic::SAES::Configuration::VoteQRCodeModeEnum::CONFIGURATION_XMLFULL,
        ::Smartmatic::SAES::Configuration::VoteQRCodeModeEnum::CONFIGURATION_XMLREDUCED
      };

      // VoteCodeConfig
      //

      VoteCodeConfig::
      VoteCodeConfig ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        UseShortVoteCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CountGroupVoteCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CharSeparatorVoteCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      VoteCodeConfig::
      VoteCodeConfig (const UseShortVoteCodeType& UseShortVoteCode,
                      const CountGroupVoteCodeType& CountGroupVoteCode,
                      const CharSeparatorVoteCodeType& CharSeparatorVoteCode)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        UseShortVoteCode_ (UseShortVoteCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CountGroupVoteCode_ (CountGroupVoteCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CharSeparatorVoteCode_ (CharSeparatorVoteCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      VoteCodeConfig::
      VoteCodeConfig (const VoteCodeConfig& x,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        UseShortVoteCode_ (x.UseShortVoteCode_, f, this),
        CountGroupVoteCode_ (x.CountGroupVoteCode_, f, this),
        CharSeparatorVoteCode_ (x.CharSeparatorVoteCode_, f, this)
      {
      }

      VoteCodeConfig::
      VoteCodeConfig (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        UseShortVoteCode_ (f, this),
        CountGroupVoteCode_ (f, this),
        CharSeparatorVoteCode_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void VoteCodeConfig::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // UseShortVoteCode
          //
          if (n.name () == "UseShortVoteCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!UseShortVoteCode_.present ())
            {
              this->UseShortVoteCode_.set (UseShortVoteCodeTraits::create (i, f, this));
              continue;
            }
          }

          // CountGroupVoteCode
          //
          if (n.name () == "CountGroupVoteCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!CountGroupVoteCode_.present ())
            {
              this->CountGroupVoteCode_.set (CountGroupVoteCodeTraits::create (i, f, this));
              continue;
            }
          }

          // CharSeparatorVoteCode
          //
          if (n.name () == "CharSeparatorVoteCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< CharSeparatorVoteCodeType > r (
              CharSeparatorVoteCodeTraits::create (i, f, this));

            if (!CharSeparatorVoteCode_.present ())
            {
              this->CharSeparatorVoteCode_.set (r);
              continue;
            }
          }

          break;
        }

        if (!UseShortVoteCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UseShortVoteCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!CountGroupVoteCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CountGroupVoteCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!CharSeparatorVoteCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CharSeparatorVoteCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      VoteCodeConfig* VoteCodeConfig::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class VoteCodeConfig (*this, f, c);
      }

      VoteCodeConfig::
      ~VoteCodeConfig ()
      {
      }

      bool
      operator== (const VoteCodeConfig& x, const VoteCodeConfig& y)
      {
        if (!(x.getUseShortVoteCode () == y.getUseShortVoteCode ()))
          return false;

        if (!(x.getCountGroupVoteCode () == y.getCountGroupVoteCode ()))
          return false;

        if (!(x.getCharSeparatorVoteCode () == y.getCharSeparatorVoteCode ()))
          return false;

        return true;
      }

      bool
      operator!= (const VoteCodeConfig& x, const VoteCodeConfig& y)
      {
        return !(x == y);
      }

      // MultiLanguageConfiguration
      //

      MultiLanguageConfiguration::
      MultiLanguageConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        Enable_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Separator_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxCharsByLanguage_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      MultiLanguageConfiguration::
      MultiLanguageConfiguration (const EnableType& Enable,
                                  const SeparatorType& Separator,
                                  const MaxCharsByLanguageType& MaxCharsByLanguage)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        Enable_ (Enable, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Separator_ (Separator, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MaxCharsByLanguage_ (MaxCharsByLanguage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      MultiLanguageConfiguration::
      MultiLanguageConfiguration (const MultiLanguageConfiguration& x,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        Enable_ (x.Enable_, f, this),
        Separator_ (x.Separator_, f, this),
        MaxCharsByLanguage_ (x.MaxCharsByLanguage_, f, this)
      {
      }

      MultiLanguageConfiguration::
      MultiLanguageConfiguration (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        Enable_ (f, this),
        Separator_ (f, this),
        MaxCharsByLanguage_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void MultiLanguageConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Enable
          //
          if (n.name () == "Enable" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!Enable_.present ())
            {
              this->Enable_.set (EnableTraits::create (i, f, this));
              continue;
            }
          }

          // Separator
          //
          if (n.name () == "Separator" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< SeparatorType > r (
              SeparatorTraits::create (i, f, this));

            if (!Separator_.present ())
            {
              this->Separator_.set (r);
              continue;
            }
          }

          // MaxCharsByLanguage
          //
          if (n.name () == "MaxCharsByLanguage" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!MaxCharsByLanguage_.present ())
            {
              this->MaxCharsByLanguage_.set (MaxCharsByLanguageTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!Enable_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Enable",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!Separator_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Separator",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!MaxCharsByLanguage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxCharsByLanguage",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      MultiLanguageConfiguration* MultiLanguageConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class MultiLanguageConfiguration (*this, f, c);
      }

      MultiLanguageConfiguration::
      ~MultiLanguageConfiguration ()
      {
      }

      bool
      operator== (const MultiLanguageConfiguration& x, const MultiLanguageConfiguration& y)
      {
        if (!(x.getEnable () == y.getEnable ()))
          return false;

        if (!(x.getSeparator () == y.getSeparator ()))
          return false;

        if (!(x.getMaxCharsByLanguage () == y.getMaxCharsByLanguage ()))
          return false;

        return true;
      }

      bool
      operator!= (const MultiLanguageConfiguration& x, const MultiLanguageConfiguration& y)
      {
        return !(x == y);
      }

      // QRCodeVoteList
      //

      QRCodeVoteList::
      QRCodeVoteList ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        QRCodeVoteConfig_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      QRCodeVoteList::
      QRCodeVoteList (const QRCodeVoteList& x,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        QRCodeVoteConfig_ (x.QRCodeVoteConfig_, f, this)
      {
      }

      QRCodeVoteList::
      QRCodeVoteList (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        QRCodeVoteConfig_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void QRCodeVoteList::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // QRCodeVoteConfig
          //
          if (n.name () == "QRCodeVoteConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRCodeVoteConfigType > r (
              QRCodeVoteConfigTraits::create (i, f, this));

            this->QRCodeVoteConfig_.push_back (r);
            continue;
          }

          break;
        }
      }

      QRCodeVoteList* QRCodeVoteList::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class QRCodeVoteList (*this, f, c);
      }

      QRCodeVoteList::
      ~QRCodeVoteList ()
      {
      }

      bool
      operator== (const QRCodeVoteList& x, const QRCodeVoteList& y)
      {
        if (!(x.getQRCodeVoteConfig () == y.getQRCodeVoteConfig ()))
          return false;

        return true;
      }

      bool
      operator!= (const QRCodeVoteList& x, const QRCodeVoteList& y)
      {
        return !(x == y);
      }

      // QRCodeVoteConfig
      //

      QRCodeVoteConfig::
      QRCodeVoteConfig ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        MaxSize_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeConfig_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      QRCodeVoteConfig::
      QRCodeVoteConfig (const MaxSizeType& MaxSize,
                        const QRCodeConfigType& QRCodeConfig)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        MaxSize_ (MaxSize, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeConfig_ (QRCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      QRCodeVoteConfig::
      QRCodeVoteConfig (const MaxSizeType& MaxSize,
                        ::std::auto_ptr< QRCodeConfigType >& QRCodeConfig)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        MaxSize_ (MaxSize, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeConfig_ (QRCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      QRCodeVoteConfig::
      QRCodeVoteConfig (const QRCodeVoteConfig& x,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        MaxSize_ (x.MaxSize_, f, this),
        QRCodeConfig_ (x.QRCodeConfig_, f, this)
      {
      }

      QRCodeVoteConfig::
      QRCodeVoteConfig (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        MaxSize_ (f, this),
        QRCodeConfig_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void QRCodeVoteConfig::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // MaxSize
          //
          if (n.name () == "MaxSize" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!MaxSize_.present ())
            {
              this->MaxSize_.set (MaxSizeTraits::create (i, f, this));
              continue;
            }
          }

          // QRCodeConfig
          //
          if (n.name () == "QRCodeConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRCodeConfigType > r (
              QRCodeConfigTraits::create (i, f, this));

            if (!QRCodeConfig_.present ())
            {
              this->QRCodeConfig_.set (r);
              continue;
            }
          }

          break;
        }

        if (!MaxSize_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MaxSize",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!QRCodeConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QRCodeConfig",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      QRCodeVoteConfig* QRCodeVoteConfig::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class QRCodeVoteConfig (*this, f, c);
      }

      QRCodeVoteConfig::
      ~QRCodeVoteConfig ()
      {
      }

      bool
      operator== (const QRCodeVoteConfig& x, const QRCodeVoteConfig& y)
      {
        if (!(x.getMaxSize () == y.getMaxSize ()))
          return false;

        if (!(x.getQRCodeConfig () == y.getQRCodeConfig ()))
          return false;

        return true;
      }

      bool
      operator!= (const QRCodeVoteConfig& x, const QRCodeVoteConfig& y)
      {
        return !(x == y);
      }

      // QRCodeConfig
      //

      QRCodeConfig::
      QRCodeConfig ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        SizeQRCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MarginQRCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CorrectionModeQRCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VersionQRCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      QRCodeConfig::
      QRCodeConfig (const SizeQRCodeType& SizeQRCode,
                    const MarginQRCodeType& MarginQRCode,
                    const CorrectionModeQRCodeType& CorrectionModeQRCode,
                    const VersionQRCodeType& VersionQRCode)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        SizeQRCode_ (SizeQRCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        MarginQRCode_ (MarginQRCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CorrectionModeQRCode_ (CorrectionModeQRCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VersionQRCode_ (VersionQRCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      QRCodeConfig::
      QRCodeConfig (const QRCodeConfig& x,
                    ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                    ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        SizeQRCode_ (x.SizeQRCode_, f, this),
        MarginQRCode_ (x.MarginQRCode_, f, this),
        CorrectionModeQRCode_ (x.CorrectionModeQRCode_, f, this),
        VersionQRCode_ (x.VersionQRCode_, f, this)
      {
      }

      QRCodeConfig::
      QRCodeConfig (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                    ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        SizeQRCode_ (f, this),
        MarginQRCode_ (f, this),
        CorrectionModeQRCode_ (f, this),
        VersionQRCode_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void QRCodeConfig::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SizeQRCode
          //
          if (n.name () == "SizeQRCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!SizeQRCode_.present ())
            {
              this->SizeQRCode_.set (SizeQRCodeTraits::create (i, f, this));
              continue;
            }
          }

          // MarginQRCode
          //
          if (n.name () == "MarginQRCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!MarginQRCode_.present ())
            {
              this->MarginQRCode_.set (MarginQRCodeTraits::create (i, f, this));
              continue;
            }
          }

          // CorrectionModeQRCode
          //
          if (n.name () == "CorrectionModeQRCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< CorrectionModeQRCodeType > r (
              CorrectionModeQRCodeTraits::create (i, f, this));

            if (!CorrectionModeQRCode_.present ())
            {
              this->CorrectionModeQRCode_.set (r);
              continue;
            }
          }

          // VersionQRCode
          //
          if (n.name () == "VersionQRCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!VersionQRCode_.present ())
            {
              this->VersionQRCode_.set (VersionQRCodeTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!SizeQRCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SizeQRCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!MarginQRCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "MarginQRCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!CorrectionModeQRCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CorrectionModeQRCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VersionQRCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VersionQRCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      QRCodeConfig* QRCodeConfig::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class QRCodeConfig (*this, f, c);
      }

      QRCodeConfig::
      ~QRCodeConfig ()
      {
      }

      bool
      operator== (const QRCodeConfig& x, const QRCodeConfig& y)
      {
        if (!(x.getSizeQRCode () == y.getSizeQRCode ()))
          return false;

        if (!(x.getMarginQRCode () == y.getMarginQRCode ()))
          return false;

        if (!(x.getCorrectionModeQRCode () == y.getCorrectionModeQRCode ()))
          return false;

        if (!(x.getVersionQRCode () == y.getVersionQRCode ()))
          return false;

        return true;
      }

      bool
      operator!= (const QRCodeConfig& x, const QRCodeConfig& y)
      {
        return !(x == y);
      }

      // ConfigurationSmartcardRemoved
      //

      ConfigurationSmartcardRemoved::
      ConfigurationSmartcardRemoved ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextTitle_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextElectionName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVotingBooth_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVoteID_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextDescription_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationSmartcardRemoved::
      ConfigurationSmartcardRemoved (const TextTitleType& TextTitle,
                                     const TextElectionNameType& TextElectionName,
                                     const TextVotingBoothType& TextVotingBooth,
                                     const TextVoteIDType& TextVoteID,
                                     const TextDescriptionType& TextDescription)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextTitle_ (TextTitle, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextElectionName_ (TextElectionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVotingBooth_ (TextVotingBooth, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVoteID_ (TextVoteID, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextDescription_ (TextDescription, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationSmartcardRemoved::
      ConfigurationSmartcardRemoved (::std::auto_ptr< TextTitleType >& TextTitle,
                                     ::std::auto_ptr< TextElectionNameType >& TextElectionName,
                                     ::std::auto_ptr< TextVotingBoothType >& TextVotingBooth,
                                     ::std::auto_ptr< TextVoteIDType >& TextVoteID,
                                     ::std::auto_ptr< TextDescriptionType >& TextDescription)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextTitle_ (TextTitle, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextElectionName_ (TextElectionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVotingBooth_ (TextVotingBooth, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVoteID_ (TextVoteID, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextDescription_ (TextDescription, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationSmartcardRemoved::
      ConfigurationSmartcardRemoved (const ConfigurationSmartcardRemoved& x,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        TextTitle_ (x.TextTitle_, f, this),
        TextElectionName_ (x.TextElectionName_, f, this),
        TextVotingBooth_ (x.TextVotingBooth_, f, this),
        TextVoteID_ (x.TextVoteID_, f, this),
        TextDescription_ (x.TextDescription_, f, this)
      {
      }

      ConfigurationSmartcardRemoved::
      ConfigurationSmartcardRemoved (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        TextTitle_ (f, this),
        TextElectionName_ (f, this),
        TextVotingBooth_ (f, this),
        TextVoteID_ (f, this),
        TextDescription_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationSmartcardRemoved::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TextTitle
          //
          if (n.name () == "TextTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextTitleType > r (
              TextTitleTraits::create (i, f, this));

            if (!TextTitle_.present ())
            {
              this->TextTitle_.set (r);
              continue;
            }
          }

          // TextElectionName
          //
          if (n.name () == "TextElectionName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextElectionNameType > r (
              TextElectionNameTraits::create (i, f, this));

            if (!TextElectionName_.present ())
            {
              this->TextElectionName_.set (r);
              continue;
            }
          }

          // TextVotingBooth
          //
          if (n.name () == "TextVotingBooth" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextVotingBoothType > r (
              TextVotingBoothTraits::create (i, f, this));

            if (!TextVotingBooth_.present ())
            {
              this->TextVotingBooth_.set (r);
              continue;
            }
          }

          // TextVoteID
          //
          if (n.name () == "TextVoteID" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextVoteIDType > r (
              TextVoteIDTraits::create (i, f, this));

            if (!TextVoteID_.present ())
            {
              this->TextVoteID_.set (r);
              continue;
            }
          }

          // TextDescription
          //
          if (n.name () == "TextDescription" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextDescriptionType > r (
              TextDescriptionTraits::create (i, f, this));

            if (!TextDescription_.present ())
            {
              this->TextDescription_.set (r);
              continue;
            }
          }

          break;
        }

        if (!TextTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextTitle",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextElectionName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextElectionName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextVotingBooth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextVotingBooth",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextVoteID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextVoteID",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextDescription_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextDescription",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationSmartcardRemoved* ConfigurationSmartcardRemoved::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationSmartcardRemoved (*this, f, c);
      }

      ConfigurationSmartcardRemoved::
      ~ConfigurationSmartcardRemoved ()
      {
      }

      bool
      operator== (const ConfigurationSmartcardRemoved& x, const ConfigurationSmartcardRemoved& y)
      {
        if (!(x.getTextTitle () == y.getTextTitle ()))
          return false;

        if (!(x.getTextElectionName () == y.getTextElectionName ()))
          return false;

        if (!(x.getTextVotingBooth () == y.getTextVotingBooth ()))
          return false;

        if (!(x.getTextVoteID () == y.getTextVoteID ()))
          return false;

        if (!(x.getTextDescription () == y.getTextDescription ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationSmartcardRemoved& x, const ConfigurationSmartcardRemoved& y)
      {
        return !(x == y);
      }

      // ConfigurationTimeout
      //

      ConfigurationTimeout::
      ConfigurationTimeout ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextTitle_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextElectionName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVotingBooth_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVoteID_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextDescription_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationTimeout::
      ConfigurationTimeout (const TextTitleType& TextTitle,
                            const TextElectionNameType& TextElectionName,
                            const TextVotingBoothType& TextVotingBooth,
                            const TextVoteIDType& TextVoteID,
                            const TextDescriptionType& TextDescription)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextTitle_ (TextTitle, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextElectionName_ (TextElectionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVotingBooth_ (TextVotingBooth, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVoteID_ (TextVoteID, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextDescription_ (TextDescription, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationTimeout::
      ConfigurationTimeout (::std::auto_ptr< TextTitleType >& TextTitle,
                            ::std::auto_ptr< TextElectionNameType >& TextElectionName,
                            ::std::auto_ptr< TextVotingBoothType >& TextVotingBooth,
                            ::std::auto_ptr< TextVoteIDType >& TextVoteID,
                            ::std::auto_ptr< TextDescriptionType >& TextDescription)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextTitle_ (TextTitle, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextElectionName_ (TextElectionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVotingBooth_ (TextVotingBooth, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextVoteID_ (TextVoteID, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextDescription_ (TextDescription, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationTimeout::
      ConfigurationTimeout (const ConfigurationTimeout& x,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        TextTitle_ (x.TextTitle_, f, this),
        TextElectionName_ (x.TextElectionName_, f, this),
        TextVotingBooth_ (x.TextVotingBooth_, f, this),
        TextVoteID_ (x.TextVoteID_, f, this),
        TextDescription_ (x.TextDescription_, f, this)
      {
      }

      ConfigurationTimeout::
      ConfigurationTimeout (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        TextTitle_ (f, this),
        TextElectionName_ (f, this),
        TextVotingBooth_ (f, this),
        TextVoteID_ (f, this),
        TextDescription_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationTimeout::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TextTitle
          //
          if (n.name () == "TextTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextTitleType > r (
              TextTitleTraits::create (i, f, this));

            if (!TextTitle_.present ())
            {
              this->TextTitle_.set (r);
              continue;
            }
          }

          // TextElectionName
          //
          if (n.name () == "TextElectionName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextElectionNameType > r (
              TextElectionNameTraits::create (i, f, this));

            if (!TextElectionName_.present ())
            {
              this->TextElectionName_.set (r);
              continue;
            }
          }

          // TextVotingBooth
          //
          if (n.name () == "TextVotingBooth" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextVotingBoothType > r (
              TextVotingBoothTraits::create (i, f, this));

            if (!TextVotingBooth_.present ())
            {
              this->TextVotingBooth_.set (r);
              continue;
            }
          }

          // TextVoteID
          //
          if (n.name () == "TextVoteID" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextVoteIDType > r (
              TextVoteIDTraits::create (i, f, this));

            if (!TextVoteID_.present ())
            {
              this->TextVoteID_.set (r);
              continue;
            }
          }

          // TextDescription
          //
          if (n.name () == "TextDescription" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextDescriptionType > r (
              TextDescriptionTraits::create (i, f, this));

            if (!TextDescription_.present ())
            {
              this->TextDescription_.set (r);
              continue;
            }
          }

          break;
        }

        if (!TextTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextTitle",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextElectionName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextElectionName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextVotingBooth_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextVotingBooth",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextVoteID_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextVoteID",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextDescription_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextDescription",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationTimeout* ConfigurationTimeout::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationTimeout (*this, f, c);
      }

      ConfigurationTimeout::
      ~ConfigurationTimeout ()
      {
      }

      bool
      operator== (const ConfigurationTimeout& x, const ConfigurationTimeout& y)
      {
        if (!(x.getTextTitle () == y.getTextTitle ()))
          return false;

        if (!(x.getTextElectionName () == y.getTextElectionName ()))
          return false;

        if (!(x.getTextVotingBooth () == y.getTextVotingBooth ()))
          return false;

        if (!(x.getTextVoteID () == y.getTextVoteID ()))
          return false;

        if (!(x.getTextDescription () == y.getTextDescription ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationTimeout& x, const ConfigurationTimeout& y)
      {
        return !(x == y);
      }

      // ConfigurationInstallation
      //

      ConfigurationInstallation::
      ConfigurationInstallation ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextInstallationTitleLevel1_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationTitleLevel2_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationTitleLevel3_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationInfo_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ShowBarCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeConfig_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Base64QRCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRcodePosition_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationInstallation::
      ConfigurationInstallation (const TextInstallationTitleLevel1Type& TextInstallationTitleLevel1,
                                 const TextInstallationTitleLevel2Type& TextInstallationTitleLevel2,
                                 const TextInstallationTitleLevel3Type& TextInstallationTitleLevel3,
                                 const TextInstallationInfoType& TextInstallationInfo,
                                 const ShowBarCodeType& ShowBarCode,
                                 const QRCodeConfigType& QRCodeConfig,
                                 const Base64QRCodeType& Base64QRCode,
                                 const QRcodePositionType& QRcodePosition)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextInstallationTitleLevel1_ (TextInstallationTitleLevel1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationTitleLevel2_ (TextInstallationTitleLevel2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationTitleLevel3_ (TextInstallationTitleLevel3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationInfo_ (TextInstallationInfo, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ShowBarCode_ (ShowBarCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeConfig_ (QRCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Base64QRCode_ (Base64QRCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRcodePosition_ (QRcodePosition, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationInstallation::
      ConfigurationInstallation (::std::auto_ptr< TextInstallationTitleLevel1Type >& TextInstallationTitleLevel1,
                                 ::std::auto_ptr< TextInstallationTitleLevel2Type >& TextInstallationTitleLevel2,
                                 ::std::auto_ptr< TextInstallationTitleLevel3Type >& TextInstallationTitleLevel3,
                                 ::std::auto_ptr< TextInstallationInfoType >& TextInstallationInfo,
                                 const ShowBarCodeType& ShowBarCode,
                                 ::std::auto_ptr< QRCodeConfigType >& QRCodeConfig,
                                 const Base64QRCodeType& Base64QRCode,
                                 const QRcodePositionType& QRcodePosition)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextInstallationTitleLevel1_ (TextInstallationTitleLevel1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationTitleLevel2_ (TextInstallationTitleLevel2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationTitleLevel3_ (TextInstallationTitleLevel3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextInstallationInfo_ (TextInstallationInfo, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ShowBarCode_ (ShowBarCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRCodeConfig_ (QRCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Base64QRCode_ (Base64QRCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        QRcodePosition_ (QRcodePosition, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationInstallation::
      ConfigurationInstallation (const ConfigurationInstallation& x,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        TextInstallationTitleLevel1_ (x.TextInstallationTitleLevel1_, f, this),
        TextInstallationTitleLevel2_ (x.TextInstallationTitleLevel2_, f, this),
        TextInstallationTitleLevel3_ (x.TextInstallationTitleLevel3_, f, this),
        TextInstallationInfo_ (x.TextInstallationInfo_, f, this),
        ShowBarCode_ (x.ShowBarCode_, f, this),
        QRCodeConfig_ (x.QRCodeConfig_, f, this),
        Base64QRCode_ (x.Base64QRCode_, f, this),
        QRcodePosition_ (x.QRcodePosition_, f, this)
      {
      }

      ConfigurationInstallation::
      ConfigurationInstallation (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        TextInstallationTitleLevel1_ (f, this),
        TextInstallationTitleLevel2_ (f, this),
        TextInstallationTitleLevel3_ (f, this),
        TextInstallationInfo_ (f, this),
        ShowBarCode_ (f, this),
        QRCodeConfig_ (f, this),
        Base64QRCode_ (f, this),
        QRcodePosition_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationInstallation::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TextInstallationTitleLevel1
          //
          if (n.name () == "TextInstallationTitleLevel1" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextInstallationTitleLevel1Type > r (
              TextInstallationTitleLevel1Traits::create (i, f, this));

            if (!TextInstallationTitleLevel1_.present ())
            {
              this->TextInstallationTitleLevel1_.set (r);
              continue;
            }
          }

          // TextInstallationTitleLevel2
          //
          if (n.name () == "TextInstallationTitleLevel2" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextInstallationTitleLevel2Type > r (
              TextInstallationTitleLevel2Traits::create (i, f, this));

            if (!TextInstallationTitleLevel2_.present ())
            {
              this->TextInstallationTitleLevel2_.set (r);
              continue;
            }
          }

          // TextInstallationTitleLevel3
          //
          if (n.name () == "TextInstallationTitleLevel3" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextInstallationTitleLevel3Type > r (
              TextInstallationTitleLevel3Traits::create (i, f, this));

            if (!TextInstallationTitleLevel3_.present ())
            {
              this->TextInstallationTitleLevel3_.set (r);
              continue;
            }
          }

          // TextInstallationInfo
          //
          if (n.name () == "TextInstallationInfo" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextInstallationInfoType > r (
              TextInstallationInfoTraits::create (i, f, this));

            if (!TextInstallationInfo_.present ())
            {
              this->TextInstallationInfo_.set (r);
              continue;
            }
          }

          // ShowBarCode
          //
          if (n.name () == "ShowBarCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!ShowBarCode_.present ())
            {
              this->ShowBarCode_.set (ShowBarCodeTraits::create (i, f, this));
              continue;
            }
          }

          // QRCodeConfig
          //
          if (n.name () == "QRCodeConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRCodeConfigType > r (
              QRCodeConfigTraits::create (i, f, this));

            if (!QRCodeConfig_.present ())
            {
              this->QRCodeConfig_.set (r);
              continue;
            }
          }

          // Base64QRCode
          //
          if (n.name () == "Base64QRCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!Base64QRCode_.present ())
            {
              this->Base64QRCode_.set (Base64QRCodeTraits::create (i, f, this));
              continue;
            }
          }

          // QRcodePosition
          //
          if (n.name () == "QRcodePosition" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< QRcodePositionType > r (
              QRcodePositionTraits::create (i, f, this));

            if (!QRcodePosition_.present ())
            {
              this->QRcodePosition_.set (r);
              continue;
            }
          }

          break;
        }

        if (!TextInstallationTitleLevel1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextInstallationTitleLevel1",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextInstallationTitleLevel2_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextInstallationTitleLevel2",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextInstallationTitleLevel3_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextInstallationTitleLevel3",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextInstallationInfo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextInstallationInfo",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ShowBarCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ShowBarCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!QRCodeConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QRCodeConfig",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!Base64QRCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "Base64QRCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!QRcodePosition_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "QRcodePosition",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationInstallation* ConfigurationInstallation::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationInstallation (*this, f, c);
      }

      ConfigurationInstallation::
      ~ConfigurationInstallation ()
      {
      }

      bool
      operator== (const ConfigurationInstallation& x, const ConfigurationInstallation& y)
      {
        if (!(x.getTextInstallationTitleLevel1 () == y.getTextInstallationTitleLevel1 ()))
          return false;

        if (!(x.getTextInstallationTitleLevel2 () == y.getTextInstallationTitleLevel2 ()))
          return false;

        if (!(x.getTextInstallationTitleLevel3 () == y.getTextInstallationTitleLevel3 ()))
          return false;

        if (!(x.getTextInstallationInfo () == y.getTextInstallationInfo ()))
          return false;

        if (!(x.getShowBarCode () == y.getShowBarCode ()))
          return false;

        if (!(x.getQRCodeConfig () == y.getQRCodeConfig ()))
          return false;

        if (!(x.getBase64QRCode () == y.getBase64QRCode ()))
          return false;

        if (!(x.getQRcodePosition () == y.getQRcodePosition ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationInstallation& x, const ConfigurationInstallation& y)
      {
        return !(x == y);
      }

      // ConfigurationContingency
      //

      ConfigurationContingency::
      ConfigurationContingency ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextContingencyTitleLevel1_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyTitleLevel2_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyTitleLevel3_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyInfo_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IncludeHelp_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IncludeRegionSection_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationContingency::
      ConfigurationContingency (const TextContingencyTitleLevel1Type& TextContingencyTitleLevel1,
                                const TextContingencyTitleLevel2Type& TextContingencyTitleLevel2,
                                const TextContingencyTitleLevel3Type& TextContingencyTitleLevel3,
                                const TextContingencyInfoType& TextContingencyInfo,
                                const IncludeHelpType& IncludeHelp,
                                const IncludeRegionSectionType& IncludeRegionSection)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextContingencyTitleLevel1_ (TextContingencyTitleLevel1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyTitleLevel2_ (TextContingencyTitleLevel2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyTitleLevel3_ (TextContingencyTitleLevel3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyInfo_ (TextContingencyInfo, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IncludeHelp_ (IncludeHelp, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IncludeRegionSection_ (IncludeRegionSection, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationContingency::
      ConfigurationContingency (::std::auto_ptr< TextContingencyTitleLevel1Type >& TextContingencyTitleLevel1,
                                ::std::auto_ptr< TextContingencyTitleLevel2Type >& TextContingencyTitleLevel2,
                                ::std::auto_ptr< TextContingencyTitleLevel3Type >& TextContingencyTitleLevel3,
                                ::std::auto_ptr< TextContingencyInfoType >& TextContingencyInfo,
                                const IncludeHelpType& IncludeHelp,
                                const IncludeRegionSectionType& IncludeRegionSection)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextContingencyTitleLevel1_ (TextContingencyTitleLevel1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyTitleLevel2_ (TextContingencyTitleLevel2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyTitleLevel3_ (TextContingencyTitleLevel3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextContingencyInfo_ (TextContingencyInfo, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IncludeHelp_ (IncludeHelp, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        IncludeRegionSection_ (IncludeRegionSection, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationContingency::
      ConfigurationContingency (const ConfigurationContingency& x,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        TextContingencyTitleLevel1_ (x.TextContingencyTitleLevel1_, f, this),
        TextContingencyTitleLevel2_ (x.TextContingencyTitleLevel2_, f, this),
        TextContingencyTitleLevel3_ (x.TextContingencyTitleLevel3_, f, this),
        TextContingencyInfo_ (x.TextContingencyInfo_, f, this),
        IncludeHelp_ (x.IncludeHelp_, f, this),
        IncludeRegionSection_ (x.IncludeRegionSection_, f, this)
      {
      }

      ConfigurationContingency::
      ConfigurationContingency (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        TextContingencyTitleLevel1_ (f, this),
        TextContingencyTitleLevel2_ (f, this),
        TextContingencyTitleLevel3_ (f, this),
        TextContingencyInfo_ (f, this),
        IncludeHelp_ (f, this),
        IncludeRegionSection_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationContingency::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TextContingencyTitleLevel1
          //
          if (n.name () == "TextContingencyTitleLevel1" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContingencyTitleLevel1Type > r (
              TextContingencyTitleLevel1Traits::create (i, f, this));

            if (!TextContingencyTitleLevel1_.present ())
            {
              this->TextContingencyTitleLevel1_.set (r);
              continue;
            }
          }

          // TextContingencyTitleLevel2
          //
          if (n.name () == "TextContingencyTitleLevel2" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContingencyTitleLevel2Type > r (
              TextContingencyTitleLevel2Traits::create (i, f, this));

            if (!TextContingencyTitleLevel2_.present ())
            {
              this->TextContingencyTitleLevel2_.set (r);
              continue;
            }
          }

          // TextContingencyTitleLevel3
          //
          if (n.name () == "TextContingencyTitleLevel3" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContingencyTitleLevel3Type > r (
              TextContingencyTitleLevel3Traits::create (i, f, this));

            if (!TextContingencyTitleLevel3_.present ())
            {
              this->TextContingencyTitleLevel3_.set (r);
              continue;
            }
          }

          // TextContingencyInfo
          //
          if (n.name () == "TextContingencyInfo" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextContingencyInfoType > r (
              TextContingencyInfoTraits::create (i, f, this));

            if (!TextContingencyInfo_.present ())
            {
              this->TextContingencyInfo_.set (r);
              continue;
            }
          }

          // IncludeHelp
          //
          if (n.name () == "IncludeHelp" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!IncludeHelp_.present ())
            {
              this->IncludeHelp_.set (IncludeHelpTraits::create (i, f, this));
              continue;
            }
          }

          // IncludeRegionSection
          //
          if (n.name () == "IncludeRegionSection" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!IncludeRegionSection_.present ())
            {
              this->IncludeRegionSection_.set (IncludeRegionSectionTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!TextContingencyTitleLevel1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContingencyTitleLevel1",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextContingencyTitleLevel2_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContingencyTitleLevel2",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextContingencyTitleLevel3_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContingencyTitleLevel3",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextContingencyInfo_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextContingencyInfo",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!IncludeHelp_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncludeHelp",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!IncludeRegionSection_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "IncludeRegionSection",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationContingency* ConfigurationContingency::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationContingency (*this, f, c);
      }

      ConfigurationContingency::
      ~ConfigurationContingency ()
      {
      }

      bool
      operator== (const ConfigurationContingency& x, const ConfigurationContingency& y)
      {
        if (!(x.getTextContingencyTitleLevel1 () == y.getTextContingencyTitleLevel1 ()))
          return false;

        if (!(x.getTextContingencyTitleLevel2 () == y.getTextContingencyTitleLevel2 ()))
          return false;

        if (!(x.getTextContingencyTitleLevel3 () == y.getTextContingencyTitleLevel3 ()))
          return false;

        if (!(x.getTextContingencyInfo () == y.getTextContingencyInfo ()))
          return false;

        if (!(x.getIncludeHelp () == y.getIncludeHelp ()))
          return false;

        if (!(x.getIncludeRegionSection () == y.getIncludeRegionSection ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationContingency& x, const ConfigurationContingency& y)
      {
        return !(x == y);
      }

      // DocumentColumnLayout
      //

      DocumentColumnLayout::
      DocumentColumnLayout (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_DocumentColumnLayout_convert ();
      }

      DocumentColumnLayout::
      DocumentColumnLayout (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_DocumentColumnLayout_convert ();
      }

      DocumentColumnLayout::
      DocumentColumnLayout (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_DocumentColumnLayout_convert ();
      }

      DocumentColumnLayout* DocumentColumnLayout::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class DocumentColumnLayout (*this, f, c);
      }

      DocumentColumnLayout::Value DocumentColumnLayout::
      _xsd_DocumentColumnLayout_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DocumentColumnLayout_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_DocumentColumnLayout_indexes_,
                          _xsd_DocumentColumnLayout_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_DocumentColumnLayout_indexes_ + 2 || _xsd_DocumentColumnLayout_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const DocumentColumnLayout::
      _xsd_DocumentColumnLayout_literals_[2] =
      {
        "SingleColumn",
        "DoubleColumn"
      };

      const DocumentColumnLayout::Value DocumentColumnLayout::
      _xsd_DocumentColumnLayout_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::DocumentColumnLayout::CONFIGURATION_DOUBLECOLUMN,
        ::Smartmatic::SAES::Configuration::DocumentColumnLayout::CONFIGURATION_SINGLECOLUMN
      };

      // LogPrintDocumentConfiguration
      //

      LogPrintDocumentConfiguration::
      LogPrintDocumentConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextLogTitleLevel1_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel2_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel3_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel4_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel5_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogEntry_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ColumnLayout_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      LogPrintDocumentConfiguration::
      LogPrintDocumentConfiguration (const TextLogTitleLevel1Type& TextLogTitleLevel1,
                                     const TextLogTitleLevel2Type& TextLogTitleLevel2,
                                     const TextLogTitleLevel3Type& TextLogTitleLevel3,
                                     const TextLogTitleLevel4Type& TextLogTitleLevel4,
                                     const TextLogTitleLevel5Type& TextLogTitleLevel5,
                                     const TextLogEntryType& TextLogEntry,
                                     const ColumnLayoutType& ColumnLayout)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextLogTitleLevel1_ (TextLogTitleLevel1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel2_ (TextLogTitleLevel2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel3_ (TextLogTitleLevel3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel4_ (TextLogTitleLevel4, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel5_ (TextLogTitleLevel5, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogEntry_ (TextLogEntry, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ColumnLayout_ (ColumnLayout, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      LogPrintDocumentConfiguration::
      LogPrintDocumentConfiguration (::std::auto_ptr< TextLogTitleLevel1Type >& TextLogTitleLevel1,
                                     ::std::auto_ptr< TextLogTitleLevel2Type >& TextLogTitleLevel2,
                                     ::std::auto_ptr< TextLogTitleLevel3Type >& TextLogTitleLevel3,
                                     ::std::auto_ptr< TextLogTitleLevel4Type >& TextLogTitleLevel4,
                                     ::std::auto_ptr< TextLogTitleLevel5Type >& TextLogTitleLevel5,
                                     ::std::auto_ptr< TextLogEntryType >& TextLogEntry,
                                     const ColumnLayoutType& ColumnLayout)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TextLogTitleLevel1_ (TextLogTitleLevel1, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel2_ (TextLogTitleLevel2, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel3_ (TextLogTitleLevel3, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel4_ (TextLogTitleLevel4, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogTitleLevel5_ (TextLogTitleLevel5, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TextLogEntry_ (TextLogEntry, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ColumnLayout_ (ColumnLayout, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      LogPrintDocumentConfiguration::
      LogPrintDocumentConfiguration (const LogPrintDocumentConfiguration& x,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        TextLogTitleLevel1_ (x.TextLogTitleLevel1_, f, this),
        TextLogTitleLevel2_ (x.TextLogTitleLevel2_, f, this),
        TextLogTitleLevel3_ (x.TextLogTitleLevel3_, f, this),
        TextLogTitleLevel4_ (x.TextLogTitleLevel4_, f, this),
        TextLogTitleLevel5_ (x.TextLogTitleLevel5_, f, this),
        TextLogEntry_ (x.TextLogEntry_, f, this),
        ColumnLayout_ (x.ColumnLayout_, f, this)
      {
      }

      LogPrintDocumentConfiguration::
      LogPrintDocumentConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        TextLogTitleLevel1_ (f, this),
        TextLogTitleLevel2_ (f, this),
        TextLogTitleLevel3_ (f, this),
        TextLogTitleLevel4_ (f, this),
        TextLogTitleLevel5_ (f, this),
        TextLogEntry_ (f, this),
        ColumnLayout_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void LogPrintDocumentConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TextLogTitleLevel1
          //
          if (n.name () == "TextLogTitleLevel1" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextLogTitleLevel1Type > r (
              TextLogTitleLevel1Traits::create (i, f, this));

            if (!TextLogTitleLevel1_.present ())
            {
              this->TextLogTitleLevel1_.set (r);
              continue;
            }
          }

          // TextLogTitleLevel2
          //
          if (n.name () == "TextLogTitleLevel2" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextLogTitleLevel2Type > r (
              TextLogTitleLevel2Traits::create (i, f, this));

            if (!TextLogTitleLevel2_.present ())
            {
              this->TextLogTitleLevel2_.set (r);
              continue;
            }
          }

          // TextLogTitleLevel3
          //
          if (n.name () == "TextLogTitleLevel3" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextLogTitleLevel3Type > r (
              TextLogTitleLevel3Traits::create (i, f, this));

            if (!TextLogTitleLevel3_.present ())
            {
              this->TextLogTitleLevel3_.set (r);
              continue;
            }
          }

          // TextLogTitleLevel4
          //
          if (n.name () == "TextLogTitleLevel4" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextLogTitleLevel4Type > r (
              TextLogTitleLevel4Traits::create (i, f, this));

            if (!TextLogTitleLevel4_.present ())
            {
              this->TextLogTitleLevel4_.set (r);
              continue;
            }
          }

          // TextLogTitleLevel5
          //
          if (n.name () == "TextLogTitleLevel5" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextLogTitleLevel5Type > r (
              TextLogTitleLevel5Traits::create (i, f, this));

            if (!TextLogTitleLevel5_.present ())
            {
              this->TextLogTitleLevel5_.set (r);
              continue;
            }
          }

          // TextLogEntry
          //
          if (n.name () == "TextLogEntry" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TextLogEntryType > r (
              TextLogEntryTraits::create (i, f, this));

            if (!TextLogEntry_.present ())
            {
              this->TextLogEntry_.set (r);
              continue;
            }
          }

          // ColumnLayout
          //
          if (n.name () == "ColumnLayout" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ColumnLayoutType > r (
              ColumnLayoutTraits::create (i, f, this));

            if (!ColumnLayout_.present ())
            {
              this->ColumnLayout_.set (r);
              continue;
            }
          }

          break;
        }

        if (!TextLogTitleLevel1_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextLogTitleLevel1",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextLogTitleLevel2_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextLogTitleLevel2",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextLogTitleLevel3_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextLogTitleLevel3",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextLogTitleLevel4_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextLogTitleLevel4",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextLogTitleLevel5_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextLogTitleLevel5",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TextLogEntry_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TextLogEntry",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ColumnLayout_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ColumnLayout",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      LogPrintDocumentConfiguration* LogPrintDocumentConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class LogPrintDocumentConfiguration (*this, f, c);
      }

      LogPrintDocumentConfiguration::
      ~LogPrintDocumentConfiguration ()
      {
      }

      bool
      operator== (const LogPrintDocumentConfiguration& x, const LogPrintDocumentConfiguration& y)
      {
        if (!(x.getTextLogTitleLevel1 () == y.getTextLogTitleLevel1 ()))
          return false;

        if (!(x.getTextLogTitleLevel2 () == y.getTextLogTitleLevel2 ()))
          return false;

        if (!(x.getTextLogTitleLevel3 () == y.getTextLogTitleLevel3 ()))
          return false;

        if (!(x.getTextLogTitleLevel4 () == y.getTextLogTitleLevel4 ()))
          return false;

        if (!(x.getTextLogTitleLevel5 () == y.getTextLogTitleLevel5 ()))
          return false;

        if (!(x.getTextLogEntry () == y.getTextLogEntry ()))
          return false;

        if (!(x.getColumnLayout () == y.getColumnLayout ()))
          return false;

        return true;
      }

      bool
      operator!= (const LogPrintDocumentConfiguration& x, const LogPrintDocumentConfiguration& y)
      {
        return !(x == y);
      }

      // ConfigurationPrinter
      //

      ConfigurationPrinter::
      ConfigurationPrinter ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationVote_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationTimeout_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationSmartcardRemoved_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationInstallation_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationContingency_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LogPrintDocConfiguration_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationPrinter::
      ConfigurationPrinter (const ConfigurationVoteType& ConfigurationVote,
                            const ConfigurationTimeoutType& ConfigurationTimeout,
                            const ConfigurationSmartcardRemovedType& ConfigurationSmartcardRemoved,
                            const ConfigurationInstallationType& ConfigurationInstallation,
                            const ConfigurationContingencyType& ConfigurationContingency,
                            const LogPrintDocConfigurationType& LogPrintDocConfiguration)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationVote_ (ConfigurationVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationTimeout_ (ConfigurationTimeout, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationSmartcardRemoved_ (ConfigurationSmartcardRemoved, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationInstallation_ (ConfigurationInstallation, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationContingency_ (ConfigurationContingency, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LogPrintDocConfiguration_ (LogPrintDocConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationPrinter::
      ConfigurationPrinter (::std::auto_ptr< ConfigurationVoteType >& ConfigurationVote,
                            ::std::auto_ptr< ConfigurationTimeoutType >& ConfigurationTimeout,
                            ::std::auto_ptr< ConfigurationSmartcardRemovedType >& ConfigurationSmartcardRemoved,
                            ::std::auto_ptr< ConfigurationInstallationType >& ConfigurationInstallation,
                            ::std::auto_ptr< ConfigurationContingencyType >& ConfigurationContingency,
                            ::std::auto_ptr< LogPrintDocConfigurationType >& LogPrintDocConfiguration)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationVote_ (ConfigurationVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationTimeout_ (ConfigurationTimeout, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationSmartcardRemoved_ (ConfigurationSmartcardRemoved, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationInstallation_ (ConfigurationInstallation, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationContingency_ (ConfigurationContingency, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        LogPrintDocConfiguration_ (LogPrintDocConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationPrinter::
      ConfigurationPrinter (const ConfigurationPrinter& x,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        ConfigurationVote_ (x.ConfigurationVote_, f, this),
        ConfigurationTimeout_ (x.ConfigurationTimeout_, f, this),
        ConfigurationSmartcardRemoved_ (x.ConfigurationSmartcardRemoved_, f, this),
        ConfigurationInstallation_ (x.ConfigurationInstallation_, f, this),
        ConfigurationContingency_ (x.ConfigurationContingency_, f, this),
        LogPrintDocConfiguration_ (x.LogPrintDocConfiguration_, f, this)
      {
      }

      ConfigurationPrinter::
      ConfigurationPrinter (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        ConfigurationVote_ (f, this),
        ConfigurationTimeout_ (f, this),
        ConfigurationSmartcardRemoved_ (f, this),
        ConfigurationInstallation_ (f, this),
        ConfigurationContingency_ (f, this),
        LogPrintDocConfiguration_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationPrinter::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ConfigurationVote
          //
          if (n.name () == "ConfigurationVote" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationVoteType > r (
              ConfigurationVoteTraits::create (i, f, this));

            if (!ConfigurationVote_.present ())
            {
              this->ConfigurationVote_.set (r);
              continue;
            }
          }

          // ConfigurationTimeout
          //
          if (n.name () == "ConfigurationTimeout" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationTimeoutType > r (
              ConfigurationTimeoutTraits::create (i, f, this));

            if (!ConfigurationTimeout_.present ())
            {
              this->ConfigurationTimeout_.set (r);
              continue;
            }
          }

          // ConfigurationSmartcardRemoved
          //
          if (n.name () == "ConfigurationSmartcardRemoved" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationSmartcardRemovedType > r (
              ConfigurationSmartcardRemovedTraits::create (i, f, this));

            if (!ConfigurationSmartcardRemoved_.present ())
            {
              this->ConfigurationSmartcardRemoved_.set (r);
              continue;
            }
          }

          // ConfigurationInstallation
          //
          if (n.name () == "ConfigurationInstallation" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationInstallationType > r (
              ConfigurationInstallationTraits::create (i, f, this));

            if (!ConfigurationInstallation_.present ())
            {
              this->ConfigurationInstallation_.set (r);
              continue;
            }
          }

          // ConfigurationContingency
          //
          if (n.name () == "ConfigurationContingency" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationContingencyType > r (
              ConfigurationContingencyTraits::create (i, f, this));

            if (!ConfigurationContingency_.present ())
            {
              this->ConfigurationContingency_.set (r);
              continue;
            }
          }

          // LogPrintDocConfiguration
          //
          if (n.name () == "LogPrintDocConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< LogPrintDocConfigurationType > r (
              LogPrintDocConfigurationTraits::create (i, f, this));

            if (!LogPrintDocConfiguration_.present ())
            {
              this->LogPrintDocConfiguration_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ConfigurationVote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationVote",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ConfigurationTimeout_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationTimeout",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ConfigurationSmartcardRemoved_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationSmartcardRemoved",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ConfigurationInstallation_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationInstallation",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ConfigurationContingency_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationContingency",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!LogPrintDocConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "LogPrintDocConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationPrinter* ConfigurationPrinter::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationPrinter (*this, f, c);
      }

      ConfigurationPrinter::
      ~ConfigurationPrinter ()
      {
      }

      bool
      operator== (const ConfigurationPrinter& x, const ConfigurationPrinter& y)
      {
        if (!(x.getConfigurationVote () == y.getConfigurationVote ()))
          return false;

        if (!(x.getConfigurationTimeout () == y.getConfigurationTimeout ()))
          return false;

        if (!(x.getConfigurationSmartcardRemoved () == y.getConfigurationSmartcardRemoved ()))
          return false;

        if (!(x.getConfigurationInstallation () == y.getConfigurationInstallation ()))
          return false;

        if (!(x.getConfigurationContingency () == y.getConfigurationContingency ()))
          return false;

        if (!(x.getLogPrintDocConfiguration () == y.getLogPrintDocConfiguration ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationPrinter& x, const ConfigurationPrinter& y)
      {
        return !(x == y);
      }

      // ConfigurationScreenPreview
      //

      ConfigurationScreenPreview::
      ConfigurationScreenPreview ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationVote_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationScreenPreview::
      ConfigurationScreenPreview (const ConfigurationVoteType& ConfigurationVote)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationVote_ (ConfigurationVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationScreenPreview::
      ConfigurationScreenPreview (::std::auto_ptr< ConfigurationVoteType >& ConfigurationVote)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationVote_ (ConfigurationVote, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationScreenPreview::
      ConfigurationScreenPreview (const ConfigurationScreenPreview& x,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        ConfigurationVote_ (x.ConfigurationVote_, f, this)
      {
      }

      ConfigurationScreenPreview::
      ConfigurationScreenPreview (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        ConfigurationVote_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationScreenPreview::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ConfigurationVote
          //
          if (n.name () == "ConfigurationVote" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationVoteType > r (
              ConfigurationVoteTraits::create (i, f, this));

            if (!ConfigurationVote_.present ())
            {
              this->ConfigurationVote_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ConfigurationVote_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationVote",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationScreenPreview* ConfigurationScreenPreview::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationScreenPreview (*this, f, c);
      }

      ConfigurationScreenPreview::
      ~ConfigurationScreenPreview ()
      {
      }

      bool
      operator== (const ConfigurationScreenPreview& x, const ConfigurationScreenPreview& y)
      {
        if (!(x.getConfigurationVote () == y.getConfigurationVote ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationScreenPreview& x, const ConfigurationScreenPreview& y)
      {
        return !(x == y);
      }

      // ConfigurationCard
      //

      ConfigurationCard::
      ConfigurationCard ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TimeOfValidity_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        AllowRecoveryCardGenerationOfConsolidatedVotes_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationCard::
      ConfigurationCard (const TimeOfValidityType& TimeOfValidity,
                         const AllowRecoveryCardGenerationOfConsolidatedVotesType& AllowRecoveryCardGenerationOfConsolidatedVotes)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        TimeOfValidity_ (TimeOfValidity, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        AllowRecoveryCardGenerationOfConsolidatedVotes_ (AllowRecoveryCardGenerationOfConsolidatedVotes, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationCard::
      ConfigurationCard (const ConfigurationCard& x,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        TimeOfValidity_ (x.TimeOfValidity_, f, this),
        AllowRecoveryCardGenerationOfConsolidatedVotes_ (x.AllowRecoveryCardGenerationOfConsolidatedVotes_, f, this)
      {
      }

      ConfigurationCard::
      ConfigurationCard (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        TimeOfValidity_ (f, this),
        AllowRecoveryCardGenerationOfConsolidatedVotes_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationCard::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TimeOfValidity
          //
          if (n.name () == "TimeOfValidity" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!TimeOfValidity_.present ())
            {
              this->TimeOfValidity_.set (TimeOfValidityTraits::create (i, f, this));
              continue;
            }
          }

          // AllowRecoveryCardGenerationOfConsolidatedVotes
          //
          if (n.name () == "AllowRecoveryCardGenerationOfConsolidatedVotes" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!AllowRecoveryCardGenerationOfConsolidatedVotes_.present ())
            {
              this->AllowRecoveryCardGenerationOfConsolidatedVotes_.set (AllowRecoveryCardGenerationOfConsolidatedVotesTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!TimeOfValidity_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TimeOfValidity",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!AllowRecoveryCardGenerationOfConsolidatedVotes_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "AllowRecoveryCardGenerationOfConsolidatedVotes",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationCard* ConfigurationCard::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationCard (*this, f, c);
      }

      ConfigurationCard::
      ~ConfigurationCard ()
      {
      }

      bool
      operator== (const ConfigurationCard& x, const ConfigurationCard& y)
      {
        if (!(x.getTimeOfValidity () == y.getTimeOfValidity ()))
          return false;

        if (!(x.getAllowRecoveryCardGenerationOfConsolidatedVotes () == y.getAllowRecoveryCardGenerationOfConsolidatedVotes ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationCard& x, const ConfigurationCard& y)
      {
        return !(x == y);
      }

      // ConfigurationReportFile
      //

      ConfigurationReportFile::
      ConfigurationReportFile ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        FileName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ReportTitle_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FileDescription_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        NumCopies_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationReportFile::
      ConfigurationReportFile (const FileNameType& FileName,
                               const ReportTitleType& ReportTitle,
                               const FileDescriptionType& FileDescription,
                               const NumCopiesType& NumCopies)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        FileName_ (FileName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ReportTitle_ (ReportTitle, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FileDescription_ (FileDescription, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        NumCopies_ (NumCopies, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationReportFile::
      ConfigurationReportFile (const ConfigurationReportFile& x,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        FileName_ (x.FileName_, f, this),
        ReportTitle_ (x.ReportTitle_, f, this),
        FileDescription_ (x.FileDescription_, f, this),
        NumCopies_ (x.NumCopies_, f, this)
      {
      }

      ConfigurationReportFile::
      ConfigurationReportFile (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        FileName_ (f, this),
        ReportTitle_ (f, this),
        FileDescription_ (f, this),
        NumCopies_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationReportFile::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FileName
          //
          if (n.name () == "FileName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< FileNameType > r (
              FileNameTraits::create (i, f, this));

            if (!FileName_.present ())
            {
              this->FileName_.set (r);
              continue;
            }
          }

          // ReportTitle
          //
          if (n.name () == "ReportTitle" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ReportTitleType > r (
              ReportTitleTraits::create (i, f, this));

            if (!ReportTitle_.present ())
            {
              this->ReportTitle_.set (r);
              continue;
            }
          }

          // FileDescription
          //
          if (n.name () == "FileDescription" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< FileDescriptionType > r (
              FileDescriptionTraits::create (i, f, this));

            if (!FileDescription_.present ())
            {
              this->FileDescription_.set (r);
              continue;
            }
          }

          // NumCopies
          //
          if (n.name () == "NumCopies" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!NumCopies_.present ())
            {
              this->NumCopies_.set (NumCopiesTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!FileName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FileName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ReportTitle_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ReportTitle",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!FileDescription_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FileDescription",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!NumCopies_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "NumCopies",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ConfigurationReportFile* ConfigurationReportFile::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationReportFile (*this, f, c);
      }

      ConfigurationReportFile::
      ~ConfigurationReportFile ()
      {
      }

      bool
      operator== (const ConfigurationReportFile& x, const ConfigurationReportFile& y)
      {
        if (!(x.getFileName () == y.getFileName ()))
          return false;

        if (!(x.getReportTitle () == y.getReportTitle ()))
          return false;

        if (!(x.getFileDescription () == y.getFileDescription ()))
          return false;

        if (!(x.getNumCopies () == y.getNumCopies ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationReportFile& x, const ConfigurationReportFile& y)
      {
        return !(x == y);
      }

      // ConfigurationReportPrinting
      //

      ConfigurationReportPrinting::
      ConfigurationReportPrinting ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ReportFiles_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      ConfigurationReportPrinting::
      ConfigurationReportPrinting (const ConfigurationReportPrinting& x,
                                   ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                   ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        ReportFiles_ (x.ReportFiles_, f, this)
      {
      }

      ConfigurationReportPrinting::
      ConfigurationReportPrinting (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                   ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        ReportFiles_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void ConfigurationReportPrinting::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ReportFiles
          //
          if (n.name () == "ReportFiles" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ReportFilesType > r (
              ReportFilesTraits::create (i, f, this));

            this->ReportFiles_.push_back (r);
            continue;
          }

          break;
        }
      }

      ConfigurationReportPrinting* ConfigurationReportPrinting::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class ConfigurationReportPrinting (*this, f, c);
      }

      ConfigurationReportPrinting::
      ~ConfigurationReportPrinting ()
      {
      }

      bool
      operator== (const ConfigurationReportPrinting& x, const ConfigurationReportPrinting& y)
      {
        if (!(x.getReportFiles () == y.getReportFiles ()))
          return false;

        return true;
      }

      bool
      operator!= (const ConfigurationReportPrinting& x, const ConfigurationReportPrinting& y)
      {
        return !(x == y);
      }

      // SaesConfiguration
      //

      SaesConfiguration::
      SaesConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationCard_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationPrinter_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationScreenPreview_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteDummy_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ReportPrinting_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        StatisticConfiguration_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TransmissionPackageConfiguration_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CodiFileConfiguration_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BarcodeQRCodeConfig_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      SaesConfiguration::
      SaesConfiguration (const ConfigurationCardType& ConfigurationCard,
                         const ConfigurationPrinterType& ConfigurationPrinter,
                         const ConfigurationScreenPreviewType& ConfigurationScreenPreview,
                         const VoteDummyType& VoteDummy,
                         const ReportPrintingType& ReportPrinting,
                         const StatisticConfigurationType& StatisticConfiguration,
                         const TransmissionPackageConfigurationType& TransmissionPackageConfiguration,
                         const CodiFileConfigurationType& CodiFileConfiguration,
                         const BarcodeQRCodeConfigType& BarcodeQRCodeConfig)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationCard_ (ConfigurationCard, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationPrinter_ (ConfigurationPrinter, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationScreenPreview_ (ConfigurationScreenPreview, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteDummy_ (VoteDummy, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ReportPrinting_ (ReportPrinting, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        StatisticConfiguration_ (StatisticConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TransmissionPackageConfiguration_ (TransmissionPackageConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CodiFileConfiguration_ (CodiFileConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BarcodeQRCodeConfig_ (BarcodeQRCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      SaesConfiguration::
      SaesConfiguration (::std::auto_ptr< ConfigurationCardType >& ConfigurationCard,
                         ::std::auto_ptr< ConfigurationPrinterType >& ConfigurationPrinter,
                         ::std::auto_ptr< ConfigurationScreenPreviewType >& ConfigurationScreenPreview,
                         ::std::auto_ptr< VoteDummyType >& VoteDummy,
                         ::std::auto_ptr< ReportPrintingType >& ReportPrinting,
                         ::std::auto_ptr< StatisticConfigurationType >& StatisticConfiguration,
                         ::std::auto_ptr< TransmissionPackageConfigurationType >& TransmissionPackageConfiguration,
                         ::std::auto_ptr< CodiFileConfigurationType >& CodiFileConfiguration,
                         ::std::auto_ptr< BarcodeQRCodeConfigType >& BarcodeQRCodeConfig)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        ConfigurationCard_ (ConfigurationCard, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationPrinter_ (ConfigurationPrinter, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ConfigurationScreenPreview_ (ConfigurationScreenPreview, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VoteDummy_ (VoteDummy, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ReportPrinting_ (ReportPrinting, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        StatisticConfiguration_ (StatisticConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        TransmissionPackageConfiguration_ (TransmissionPackageConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        CodiFileConfiguration_ (CodiFileConfiguration, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BarcodeQRCodeConfig_ (BarcodeQRCodeConfig, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      SaesConfiguration::
      SaesConfiguration (const SaesConfiguration& x,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        ConfigurationCard_ (x.ConfigurationCard_, f, this),
        ConfigurationPrinter_ (x.ConfigurationPrinter_, f, this),
        ConfigurationScreenPreview_ (x.ConfigurationScreenPreview_, f, this),
        VoteDummy_ (x.VoteDummy_, f, this),
        ReportPrinting_ (x.ReportPrinting_, f, this),
        StatisticConfiguration_ (x.StatisticConfiguration_, f, this),
        TransmissionPackageConfiguration_ (x.TransmissionPackageConfiguration_, f, this),
        CodiFileConfiguration_ (x.CodiFileConfiguration_, f, this),
        BarcodeQRCodeConfig_ (x.BarcodeQRCodeConfig_, f, this)
      {
      }

      SaesConfiguration::
      SaesConfiguration (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        ConfigurationCard_ (f, this),
        ConfigurationPrinter_ (f, this),
        ConfigurationScreenPreview_ (f, this),
        VoteDummy_ (f, this),
        ReportPrinting_ (f, this),
        StatisticConfiguration_ (f, this),
        TransmissionPackageConfiguration_ (f, this),
        CodiFileConfiguration_ (f, this),
        BarcodeQRCodeConfig_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void SaesConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ConfigurationCard
          //
          if (n.name () == "ConfigurationCard" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationCardType > r (
              ConfigurationCardTraits::create (i, f, this));

            if (!ConfigurationCard_.present ())
            {
              this->ConfigurationCard_.set (r);
              continue;
            }
          }

          // ConfigurationPrinter
          //
          if (n.name () == "ConfigurationPrinter" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationPrinterType > r (
              ConfigurationPrinterTraits::create (i, f, this));

            if (!ConfigurationPrinter_.present ())
            {
              this->ConfigurationPrinter_.set (r);
              continue;
            }
          }

          // ConfigurationScreenPreview
          //
          if (n.name () == "ConfigurationScreenPreview" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ConfigurationScreenPreviewType > r (
              ConfigurationScreenPreviewTraits::create (i, f, this));

            if (!ConfigurationScreenPreview_.present ())
            {
              this->ConfigurationScreenPreview_.set (r);
              continue;
            }
          }

          // VoteDummy
          //
          if (n.name () == "VoteDummy" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< VoteDummyType > r (
              VoteDummyTraits::create (i, f, this));

            if (!VoteDummy_.present ())
            {
              this->VoteDummy_.set (r);
              continue;
            }
          }

          // ReportPrinting
          //
          if (n.name () == "ReportPrinting" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< ReportPrintingType > r (
              ReportPrintingTraits::create (i, f, this));

            if (!ReportPrinting_.present ())
            {
              this->ReportPrinting_.set (r);
              continue;
            }
          }

          // StatisticConfiguration
          //
          if (n.name () == "StatisticConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< StatisticConfigurationType > r (
              StatisticConfigurationTraits::create (i, f, this));

            if (!StatisticConfiguration_.present ())
            {
              this->StatisticConfiguration_.set (r);
              continue;
            }
          }

          // TransmissionPackageConfiguration
          //
          if (n.name () == "TransmissionPackageConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< TransmissionPackageConfigurationType > r (
              TransmissionPackageConfigurationTraits::create (i, f, this));

            if (!TransmissionPackageConfiguration_.present ())
            {
              this->TransmissionPackageConfiguration_.set (r);
              continue;
            }
          }

          // CodiFileConfiguration
          //
          if (n.name () == "CodiFileConfiguration" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< CodiFileConfigurationType > r (
              CodiFileConfigurationTraits::create (i, f, this));

            if (!CodiFileConfiguration_.present ())
            {
              this->CodiFileConfiguration_.set (r);
              continue;
            }
          }

          // BarcodeQRCodeConfig
          //
          if (n.name () == "BarcodeQRCodeConfig" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< BarcodeQRCodeConfigType > r (
              BarcodeQRCodeConfigTraits::create (i, f, this));

            if (!BarcodeQRCodeConfig_.present ())
            {
              this->BarcodeQRCodeConfig_.set (r);
              continue;
            }
          }

          break;
        }

        if (!ConfigurationCard_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationCard",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ConfigurationPrinter_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationPrinter",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ConfigurationScreenPreview_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ConfigurationScreenPreview",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!VoteDummy_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "VoteDummy",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!ReportPrinting_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ReportPrinting",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!StatisticConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "StatisticConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!TransmissionPackageConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "TransmissionPackageConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!CodiFileConfiguration_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CodiFileConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!BarcodeQRCodeConfig_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "BarcodeQRCodeConfig",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      SaesConfiguration* SaesConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class SaesConfiguration (*this, f, c);
      }

      SaesConfiguration::
      ~SaesConfiguration ()
      {
      }

      bool
      operator== (const SaesConfiguration& x, const SaesConfiguration& y)
      {
        if (!(x.getConfigurationCard () == y.getConfigurationCard ()))
          return false;

        if (!(x.getConfigurationPrinter () == y.getConfigurationPrinter ()))
          return false;

        if (!(x.getConfigurationScreenPreview () == y.getConfigurationScreenPreview ()))
          return false;

        if (!(x.getVoteDummy () == y.getVoteDummy ()))
          return false;

        if (!(x.getReportPrinting () == y.getReportPrinting ()))
          return false;

        if (!(x.getStatisticConfiguration () == y.getStatisticConfiguration ()))
          return false;

        if (!(x.getTransmissionPackageConfiguration () == y.getTransmissionPackageConfiguration ()))
          return false;

        if (!(x.getCodiFileConfiguration () == y.getCodiFileConfiguration ()))
          return false;

        if (!(x.getBarcodeQRCodeConfig () == y.getBarcodeQRCodeConfig ()))
          return false;

        return true;
      }

      bool
      operator!= (const SaesConfiguration& x, const SaesConfiguration& y)
      {
        return !(x == y);
      }

      // VoteDummyConfiguration
      //

      VoteDummyConfiguration::
      VoteDummyConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        LogicalVoterGroupCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ContestCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BallotOptionCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      VoteDummyConfiguration::
      VoteDummyConfiguration (const LogicalVoterGroupCodeType& LogicalVoterGroupCode,
                              const ContestCodeType& ContestCode,
                              const BallotOptionCodeType& BallotOptionCode)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        LogicalVoterGroupCode_ (LogicalVoterGroupCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        ContestCode_ (ContestCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BallotOptionCode_ (BallotOptionCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      VoteDummyConfiguration::
      VoteDummyConfiguration (const VoteDummyConfiguration& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        LogicalVoterGroupCode_ (x.LogicalVoterGroupCode_, f, this),
        ContestCode_ (x.ContestCode_, f, this),
        BallotOptionCode_ (x.BallotOptionCode_, f, this)
      {
      }

      VoteDummyConfiguration::
      VoteDummyConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        LogicalVoterGroupCode_ (f, this),
        ContestCode_ (f, this),
        BallotOptionCode_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void VoteDummyConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "LogicalVoterGroupCode" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< LogicalVoterGroupCodeType > r (
              LogicalVoterGroupCodeTraits::create (i, f, this));

            this->LogicalVoterGroupCode_.set (r);
            continue;
          }

          if (n.name () == "ContestCode" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< ContestCodeType > r (
              ContestCodeTraits::create (i, f, this));

            this->ContestCode_.set (r);
            continue;
          }

          if (n.name () == "BallotOptionCode" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< BallotOptionCodeType > r (
              BallotOptionCodeTraits::create (i, f, this));

            this->BallotOptionCode_.set (r);
            continue;
          }
        }

        if (!LogicalVoterGroupCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "LogicalVoterGroupCode",
            "");
        }

        if (!ContestCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "ContestCode",
            "");
        }

        if (!BallotOptionCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "BallotOptionCode",
            "");
        }
      }

      VoteDummyConfiguration* VoteDummyConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class VoteDummyConfiguration (*this, f, c);
      }

      VoteDummyConfiguration::
      ~VoteDummyConfiguration ()
      {
      }

      bool
      operator== (const VoteDummyConfiguration& x, const VoteDummyConfiguration& y)
      {
        if (!(x.getLogicalVoterGroupCode () == y.getLogicalVoterGroupCode ()))
          return false;

        if (!(x.getContestCode () == y.getContestCode ()))
          return false;

        if (!(x.getBallotOptionCode () == y.getBallotOptionCode ()))
          return false;

        return true;
      }

      bool
      operator!= (const VoteDummyConfiguration& x, const VoteDummyConfiguration& y)
      {
        return !(x == y);
      }

      // TransmissionPackageConfiguration
      //

      TransmissionPackageConfiguration::
      TransmissionPackageConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        SaveDemoVotesInTransmissionPackage_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      TransmissionPackageConfiguration::
      TransmissionPackageConfiguration (const SaveDemoVotesInTransmissionPackageType& SaveDemoVotesInTransmissionPackage)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        SaveDemoVotesInTransmissionPackage_ (SaveDemoVotesInTransmissionPackage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      TransmissionPackageConfiguration::
      TransmissionPackageConfiguration (const TransmissionPackageConfiguration& x,
                                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        SaveDemoVotesInTransmissionPackage_ (x.SaveDemoVotesInTransmissionPackage_, f, this)
      {
      }

      TransmissionPackageConfiguration::
      TransmissionPackageConfiguration (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                        ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        SaveDemoVotesInTransmissionPackage_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
          this->parse (p, f);
        }
      }

      void TransmissionPackageConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "SaveDemoVotesInTransmissionPackage" && n.namespace_ ().empty ())
          {
            this->SaveDemoVotesInTransmissionPackage_.set (SaveDemoVotesInTransmissionPackageTraits::create (i, f, this));
            continue;
          }
        }

        if (!SaveDemoVotesInTransmissionPackage_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "SaveDemoVotesInTransmissionPackage",
            "");
        }
      }

      TransmissionPackageConfiguration* TransmissionPackageConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class TransmissionPackageConfiguration (*this, f, c);
      }

      TransmissionPackageConfiguration::
      ~TransmissionPackageConfiguration ()
      {
      }

      bool
      operator== (const TransmissionPackageConfiguration& x, const TransmissionPackageConfiguration& y)
      {
        if (!(x.getSaveDemoVotesInTransmissionPackage () == y.getSaveDemoVotesInTransmissionPackage ()))
          return false;

        return true;
      }

      bool
      operator!= (const TransmissionPackageConfiguration& x, const TransmissionPackageConfiguration& y)
      {
        return !(x == y);
      }

      // CodiFileConfiguration
      //

      CodiFileConfiguration::
      CodiFileConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        EnableCodi_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PersistenceCodi_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SeparatorVotingDevice_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FirstStringFileName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RuleCodiFileName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterS_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterL_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterC_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegionName_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PersistenceX7SCodi_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SAddPVReport_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SSigned_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SCrypto_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SSignedCertified_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SCryptoCertified_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      CodiFileConfiguration::
      CodiFileConfiguration (const EnableCodiType& EnableCodi,
                             const PersistenceCodiType& PersistenceCodi,
                             const SeparatorVotingDeviceType& SeparatorVotingDevice,
                             const FirstStringFileNameType& FirstStringFileName,
                             const RuleCodiFileNameType& RuleCodiFileName,
                             const RegisterSType& RegisterS,
                             const RegisterLType& RegisterL,
                             const RegisterCType& RegisterC,
                             const RegionNameType& RegionName,
                             const PersistenceX7SCodiType& PersistenceX7SCodi,
                             const X7SAddPVReportType& X7SAddPVReport,
                             const X7SSignedType& X7SSigned,
                             const X7SCryptoType& X7SCrypto,
                             const X7SSignedCertifiedType& X7SSignedCertified,
                             const X7SCryptoCertifiedType& X7SCryptoCertified)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        EnableCodi_ (EnableCodi, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PersistenceCodi_ (PersistenceCodi, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SeparatorVotingDevice_ (SeparatorVotingDevice, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FirstStringFileName_ (FirstStringFileName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RuleCodiFileName_ (RuleCodiFileName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterS_ (RegisterS, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterL_ (RegisterL, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterC_ (RegisterC, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegionName_ (RegionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PersistenceX7SCodi_ (PersistenceX7SCodi, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SAddPVReport_ (X7SAddPVReport, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SSigned_ (X7SSigned, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SCrypto_ (X7SCrypto, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SSignedCertified_ (X7SSignedCertified, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SCryptoCertified_ (X7SCryptoCertified, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      CodiFileConfiguration::
      CodiFileConfiguration (const EnableCodiType& EnableCodi,
                             const PersistenceCodiType& PersistenceCodi,
                             const SeparatorVotingDeviceType& SeparatorVotingDevice,
                             const FirstStringFileNameType& FirstStringFileName,
                             const RuleCodiFileNameType& RuleCodiFileName,
                             ::std::auto_ptr< RegisterSType >& RegisterS,
                             ::std::auto_ptr< RegisterLType >& RegisterL,
                             ::std::auto_ptr< RegisterCType >& RegisterC,
                             const RegionNameType& RegionName,
                             const PersistenceX7SCodiType& PersistenceX7SCodi,
                             const X7SAddPVReportType& X7SAddPVReport,
                             const X7SSignedType& X7SSigned,
                             const X7SCryptoType& X7SCrypto,
                             const X7SSignedCertifiedType& X7SSignedCertified,
                             const X7SCryptoCertifiedType& X7SCryptoCertified)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        EnableCodi_ (EnableCodi, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PersistenceCodi_ (PersistenceCodi, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SeparatorVotingDevice_ (SeparatorVotingDevice, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FirstStringFileName_ (FirstStringFileName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RuleCodiFileName_ (RuleCodiFileName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterS_ (RegisterS, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterL_ (RegisterL, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegisterC_ (RegisterC, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        RegionName_ (RegionName, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        PersistenceX7SCodi_ (PersistenceX7SCodi, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SAddPVReport_ (X7SAddPVReport, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SSigned_ (X7SSigned, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SCrypto_ (X7SCrypto, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SSignedCertified_ (X7SSignedCertified, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        X7SCryptoCertified_ (X7SCryptoCertified, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      CodiFileConfiguration::
      CodiFileConfiguration (const CodiFileConfiguration& x,
                             ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                             ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        EnableCodi_ (x.EnableCodi_, f, this),
        PersistenceCodi_ (x.PersistenceCodi_, f, this),
        SeparatorVotingDevice_ (x.SeparatorVotingDevice_, f, this),
        FirstStringFileName_ (x.FirstStringFileName_, f, this),
        RuleCodiFileName_ (x.RuleCodiFileName_, f, this),
        RegisterS_ (x.RegisterS_, f, this),
        RegisterL_ (x.RegisterL_, f, this),
        RegisterC_ (x.RegisterC_, f, this),
        RegionName_ (x.RegionName_, f, this),
        PersistenceX7SCodi_ (x.PersistenceX7SCodi_, f, this),
        X7SAddPVReport_ (x.X7SAddPVReport_, f, this),
        X7SSigned_ (x.X7SSigned_, f, this),
        X7SCrypto_ (x.X7SCrypto_, f, this),
        X7SSignedCertified_ (x.X7SSignedCertified_, f, this),
        X7SCryptoCertified_ (x.X7SCryptoCertified_, f, this)
      {
      }

      CodiFileConfiguration::
      CodiFileConfiguration (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                             ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        EnableCodi_ (f, this),
        PersistenceCodi_ (f, this),
        SeparatorVotingDevice_ (f, this),
        FirstStringFileName_ (f, this),
        RuleCodiFileName_ (f, this),
        RegisterS_ (f, this),
        RegisterL_ (f, this),
        RegisterC_ (f, this),
        RegionName_ (f, this),
        PersistenceX7SCodi_ (f, this),
        X7SAddPVReport_ (f, this),
        X7SSigned_ (f, this),
        X7SCrypto_ (f, this),
        X7SSignedCertified_ (f, this),
        X7SCryptoCertified_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void CodiFileConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // EnableCodi
          //
          if (n.name () == "EnableCodi" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!EnableCodi_.present ())
            {
              this->EnableCodi_.set (EnableCodiTraits::create (i, f, this));
              continue;
            }
          }

          // PersistenceCodi
          //
          if (n.name () == "PersistenceCodi" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!PersistenceCodi_.present ())
            {
              this->PersistenceCodi_.set (PersistenceCodiTraits::create (i, f, this));
              continue;
            }
          }

          // SeparatorVotingDevice
          //
          if (n.name () == "SeparatorVotingDevice" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< SeparatorVotingDeviceType > r (
              SeparatorVotingDeviceTraits::create (i, f, this));

            if (!SeparatorVotingDevice_.present ())
            {
              this->SeparatorVotingDevice_.set (r);
              continue;
            }
          }

          // FirstStringFileName
          //
          if (n.name () == "FirstStringFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< FirstStringFileNameType > r (
              FirstStringFileNameTraits::create (i, f, this));

            if (!FirstStringFileName_.present ())
            {
              this->FirstStringFileName_.set (r);
              continue;
            }
          }

          // RuleCodiFileName
          //
          if (n.name () == "RuleCodiFileName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< RuleCodiFileNameType > r (
              RuleCodiFileNameTraits::create (i, f, this));

            if (!RuleCodiFileName_.present ())
            {
              this->RuleCodiFileName_.set (r);
              continue;
            }
          }

          // RegisterS
          //
          if (n.name () == "RegisterS" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< RegisterSType > r (
              RegisterSTraits::create (i, f, this));

            if (!RegisterS_.present ())
            {
              this->RegisterS_.set (r);
              continue;
            }
          }

          // RegisterL
          //
          if (n.name () == "RegisterL" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< RegisterLType > r (
              RegisterLTraits::create (i, f, this));

            if (!RegisterL_.present ())
            {
              this->RegisterL_.set (r);
              continue;
            }
          }

          // RegisterC
          //
          if (n.name () == "RegisterC" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< RegisterCType > r (
              RegisterCTraits::create (i, f, this));

            if (!RegisterC_.present ())
            {
              this->RegisterC_.set (r);
              continue;
            }
          }

          // RegionName
          //
          if (n.name () == "RegionName" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< RegionNameType > r (
              RegionNameTraits::create (i, f, this));

            if (!RegionName_.present ())
            {
              this->RegionName_.set (r);
              continue;
            }
          }

          // PersistenceX7SCodi
          //
          if (n.name () == "PersistenceX7SCodi" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!PersistenceX7SCodi_.present ())
            {
              this->PersistenceX7SCodi_.set (PersistenceX7SCodiTraits::create (i, f, this));
              continue;
            }
          }

          // X7SAddPVReport
          //
          if (n.name () == "X7SAddPVReport" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!X7SAddPVReport_.present ())
            {
              this->X7SAddPVReport_.set (X7SAddPVReportTraits::create (i, f, this));
              continue;
            }
          }

          // X7SSigned
          //
          if (n.name () == "X7SSigned" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< X7SSignedType > r (
              X7SSignedTraits::create (i, f, this));

            if (!X7SSigned_.present ())
            {
              this->X7SSigned_.set (r);
              continue;
            }
          }

          // X7SCrypto
          //
          if (n.name () == "X7SCrypto" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< X7SCryptoType > r (
              X7SCryptoTraits::create (i, f, this));

            if (!X7SCrypto_.present ())
            {
              this->X7SCrypto_.set (r);
              continue;
            }
          }

          // X7SSignedCertified
          //
          if (n.name () == "X7SSignedCertified" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< X7SSignedCertifiedType > r (
              X7SSignedCertifiedTraits::create (i, f, this));

            if (!X7SSignedCertified_.present ())
            {
              this->X7SSignedCertified_.set (r);
              continue;
            }
          }

          // X7SCryptoCertified
          //
          if (n.name () == "X7SCryptoCertified" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< X7SCryptoCertifiedType > r (
              X7SCryptoCertifiedTraits::create (i, f, this));

            if (!X7SCryptoCertified_.present ())
            {
              this->X7SCryptoCertified_.set (r);
              continue;
            }
          }

          break;
        }

        if (!EnableCodi_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "EnableCodi",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!PersistenceCodi_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PersistenceCodi",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!SeparatorVotingDevice_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SeparatorVotingDevice",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!FirstStringFileName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "FirstStringFileName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!RuleCodiFileName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RuleCodiFileName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!RegisterS_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterS",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!RegisterL_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterL",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!RegisterC_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegisterC",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!RegionName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "RegionName",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!PersistenceX7SCodi_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "PersistenceX7SCodi",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!X7SAddPVReport_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "X7SAddPVReport",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!X7SSigned_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "X7SSigned",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!X7SCrypto_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "X7SCrypto",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!X7SSignedCertified_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "X7SSignedCertified",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!X7SCryptoCertified_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "X7SCryptoCertified",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      CodiFileConfiguration* CodiFileConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class CodiFileConfiguration (*this, f, c);
      }

      CodiFileConfiguration::
      ~CodiFileConfiguration ()
      {
      }

      bool
      operator== (const CodiFileConfiguration& x, const CodiFileConfiguration& y)
      {
        if (!(x.getEnableCodi () == y.getEnableCodi ()))
          return false;

        if (!(x.getPersistenceCodi () == y.getPersistenceCodi ()))
          return false;

        if (!(x.getSeparatorVotingDevice () == y.getSeparatorVotingDevice ()))
          return false;

        if (!(x.getFirstStringFileName () == y.getFirstStringFileName ()))
          return false;

        if (!(x.getRuleCodiFileName () == y.getRuleCodiFileName ()))
          return false;

        if (!(x.getRegisterS () == y.getRegisterS ()))
          return false;

        if (!(x.getRegisterL () == y.getRegisterL ()))
          return false;

        if (!(x.getRegisterC () == y.getRegisterC ()))
          return false;

        if (!(x.getRegionName () == y.getRegionName ()))
          return false;

        if (!(x.getPersistenceX7SCodi () == y.getPersistenceX7SCodi ()))
          return false;

        if (!(x.getX7SAddPVReport () == y.getX7SAddPVReport ()))
          return false;

        if (!(x.getX7SSigned () == y.getX7SSigned ()))
          return false;

        if (!(x.getX7SCrypto () == y.getX7SCrypto ()))
          return false;

        if (!(x.getX7SSignedCertified () == y.getX7SSignedCertified ()))
          return false;

        if (!(x.getX7SCryptoCertified () == y.getX7SCryptoCertified ()))
          return false;

        return true;
      }

      bool
      operator!= (const CodiFileConfiguration& x, const CodiFileConfiguration& y)
      {
        return !(x == y);
      }

      // RegisterCodiConfig
      //

      RegisterCodiConfig::
      RegisterCodiConfig ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        UpdateNISCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SetVotingType_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SetLanguage_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SetNISCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FillLastFields_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      RegisterCodiConfig::
      RegisterCodiConfig (const UpdateNISCodeType& UpdateNISCode,
                          const SetVotingTypeType& SetVotingType,
                          const SetLanguageType& SetLanguage,
                          const SetNISCodeType& SetNISCode)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        UpdateNISCode_ (UpdateNISCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SetVotingType_ (SetVotingType, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SetLanguage_ (SetLanguage, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        SetNISCode_ (SetNISCode, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        FillLastFields_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      RegisterCodiConfig::
      RegisterCodiConfig (const RegisterCodiConfig& x,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        UpdateNISCode_ (x.UpdateNISCode_, f, this),
        SetVotingType_ (x.SetVotingType_, f, this),
        SetLanguage_ (x.SetLanguage_, f, this),
        SetNISCode_ (x.SetNISCode_, f, this),
        FillLastFields_ (x.FillLastFields_, f, this)
      {
      }

      RegisterCodiConfig::
      RegisterCodiConfig (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        UpdateNISCode_ (f, this),
        SetVotingType_ (f, this),
        SetLanguage_ (f, this),
        SetNISCode_ (f, this),
        FillLastFields_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void RegisterCodiConfig::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // UpdateNISCode
          //
          if (n.name () == "UpdateNISCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!UpdateNISCode_.present ())
            {
              this->UpdateNISCode_.set (UpdateNISCodeTraits::create (i, f, this));
              continue;
            }
          }

          // SetVotingType
          //
          if (n.name () == "SetVotingType" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!SetVotingType_.present ())
            {
              this->SetVotingType_.set (SetVotingTypeTraits::create (i, f, this));
              continue;
            }
          }

          // SetLanguage
          //
          if (n.name () == "SetLanguage" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!SetLanguage_.present ())
            {
              this->SetLanguage_.set (SetLanguageTraits::create (i, f, this));
              continue;
            }
          }

          // SetNISCode
          //
          if (n.name () == "SetNISCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!SetNISCode_.present ())
            {
              this->SetNISCode_.set (SetNISCodeTraits::create (i, f, this));
              continue;
            }
          }

          // FillLastFields
          //
          if (n.name () == "FillLastFields" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            if (!this->FillLastFields_)
            {
              this->FillLastFields_.set (FillLastFieldsTraits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!UpdateNISCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "UpdateNISCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!SetVotingType_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SetVotingType",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!SetLanguage_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SetLanguage",
            "http://www.smartmatic.com/SaesConfiguration");
        }

        if (!SetNISCode_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "SetNISCode",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      RegisterCodiConfig* RegisterCodiConfig::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class RegisterCodiConfig (*this, f, c);
      }

      RegisterCodiConfig::
      ~RegisterCodiConfig ()
      {
      }

      bool
      operator== (const RegisterCodiConfig& x, const RegisterCodiConfig& y)
      {
        if (!(x.getUpdateNISCode () == y.getUpdateNISCode ()))
          return false;

        if (!(x.getSetVotingType () == y.getSetVotingType ()))
          return false;

        if (!(x.getSetLanguage () == y.getSetLanguage ()))
          return false;

        if (!(x.getSetNISCode () == y.getSetNISCode ()))
          return false;

        if (!(x.getFillLastFields () == y.getFillLastFields ()))
          return false;

        return true;
      }

      bool
      operator!= (const RegisterCodiConfig& x, const RegisterCodiConfig& y)
      {
        return !(x == y);
      }

      // RegionNameCodiConfig
      //

      RegionNameCodiConfig::
      RegionNameCodiConfig (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_RegionNameCodiConfig_convert ();
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_RegionNameCodiConfig_convert ();
      }

      RegionNameCodiConfig::
      RegionNameCodiConfig (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_RegionNameCodiConfig_convert ();
      }

      RegionNameCodiConfig* RegionNameCodiConfig::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class RegionNameCodiConfig (*this, f, c);
      }

      RegionNameCodiConfig::Value RegionNameCodiConfig::
      _xsd_RegionNameCodiConfig_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RegionNameCodiConfig_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_RegionNameCodiConfig_indexes_,
                          _xsd_RegionNameCodiConfig_indexes_ + 10,
                          *this,
                          c));

        if (i == _xsd_RegionNameCodiConfig_indexes_ + 10 || _xsd_RegionNameCodiConfig_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const RegionNameCodiConfig::
      _xsd_RegionNameCodiConfig_literals_[10] =
      {
        "first-region",
        "second-region",
        "third-region",
        "fourth-region",
        "fifth-region",
        "sixth-region",
        "seventh-region",
        "eighth-region",
        "voting-vote-custom-code",
        "last"
      };

      const RegionNameCodiConfig::Value RegionNameCodiConfig::
      _xsd_RegionNameCodiConfig_indexes_[10] =
      {
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_EIGHTH_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_FIFTH_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_FIRST_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_FOURTH_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_LAST,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_SECOND_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_SEVENTH_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_SIXTH_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_THIRD_REGION,
        ::Smartmatic::SAES::Configuration::RegionNameCodiConfig::CONFIGURATION_VOTING_VOTE_CUSTOM_CODE
      };

      // RuleCodiFileNameConfiguration
      //

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_RuleCodiFileNameConfiguration_convert ();
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const ::xercesc::DOMAttr& a,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_RuleCodiFileNameConfiguration_convert ();
      }

      RuleCodiFileNameConfiguration::
      RuleCodiFileNameConfiguration (const ::std::string& s,
                                     const ::xercesc::DOMElement* e,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_RuleCodiFileNameConfiguration_convert ();
      }

      RuleCodiFileNameConfiguration* RuleCodiFileNameConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class RuleCodiFileNameConfiguration (*this, f, c);
      }

      RuleCodiFileNameConfiguration::Value RuleCodiFileNameConfiguration::
      _xsd_RuleCodiFileNameConfiguration_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RuleCodiFileNameConfiguration_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_RuleCodiFileNameConfiguration_indexes_,
                          _xsd_RuleCodiFileNameConfiguration_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_RuleCodiFileNameConfiguration_indexes_ + 2 || _xsd_RuleCodiFileNameConfiguration_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const RuleCodiFileNameConfiguration::
      _xsd_RuleCodiFileNameConfiguration_literals_[2] =
      {
        "code-machine",
        "totalization-type"
      };

      const RuleCodiFileNameConfiguration::Value RuleCodiFileNameConfiguration::
      _xsd_RuleCodiFileNameConfiguration_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::RuleCodiFileNameConfiguration::CONFIGURATION_CODE_MACHINE,
        ::Smartmatic::SAES::Configuration::RuleCodiFileNameConfiguration::CONFIGURATION_TOTALIZATION_TYPE
      };

      // X7SSecurityType
      //

      X7SSecurityType::
      X7SSecurityType (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_X7SSecurityType_convert ();
      }

      X7SSecurityType::
      X7SSecurityType (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_X7SSecurityType_convert ();
      }

      X7SSecurityType::
      X7SSecurityType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_X7SSecurityType_convert ();
      }

      X7SSecurityType* X7SSecurityType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class X7SSecurityType (*this, f, c);
      }

      X7SSecurityType::Value X7SSecurityType::
      _xsd_X7SSecurityType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_X7SSecurityType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_X7SSecurityType_indexes_,
                          _xsd_X7SSecurityType_indexes_ + 2,
                          *this,
                          c));

        if (i == _xsd_X7SSecurityType_indexes_ + 2 || _xsd_X7SSecurityType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const X7SSecurityType::
      _xsd_X7SSecurityType_literals_[2] =
      {
        "machine-keys-file",
        "pem-files"
      };

      const X7SSecurityType::Value X7SSecurityType::
      _xsd_X7SSecurityType_indexes_[2] =
      {
        ::Smartmatic::SAES::Configuration::X7SSecurityType::CONFIGURATION_MACHINE_KEYS_FILE,
        ::Smartmatic::SAES::Configuration::X7SSecurityType::CONFIGURATION_PEM_FILES
      };

      // X7SSigned
      //

      X7SSigned::
      X7SSigned (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_X7SSigned_convert ();
      }

      X7SSigned::
      X7SSigned (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_X7SSigned_convert ();
      }

      X7SSigned::
      X7SSigned (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_X7SSigned_convert ();
      }

      X7SSigned* X7SSigned::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class X7SSigned (*this, f, c);
      }

      X7SSigned::Value X7SSigned::
      _xsd_X7SSigned_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_X7SSigned_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_X7SSigned_indexes_,
                          _xsd_X7SSigned_indexes_ + 3,
                          *this,
                          c));

        if (i == _xsd_X7SSigned_indexes_ + 3 || _xsd_X7SSigned_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const X7SSigned::
      _xsd_X7SSigned_literals_[3] =
      {
        "pkcs7-signer",
        "cms-signer",
        "none"
      };

      const X7SSigned::Value X7SSigned::
      _xsd_X7SSigned_indexes_[3] =
      {
        ::Smartmatic::SAES::Configuration::X7SSigned::CONFIGURATION_CMS_SIGNER,
        ::Smartmatic::SAES::Configuration::X7SSigned::CONFIGURATION_NONE,
        ::Smartmatic::SAES::Configuration::X7SSigned::CONFIGURATION_PKCS7_SIGNER
      };

      // X7SCrypto
      //

      X7SCrypto::
      X7SCrypto (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_X7SCrypto_convert ();
      }

      X7SCrypto::
      X7SCrypto (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_X7SCrypto_convert ();
      }

      X7SCrypto::
      X7SCrypto (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                 ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_X7SCrypto_convert ();
      }

      X7SCrypto* X7SCrypto::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class X7SCrypto (*this, f, c);
      }

      X7SCrypto::Value X7SCrypto::
      _xsd_X7SCrypto_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_X7SCrypto_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_X7SCrypto_indexes_,
                          _xsd_X7SCrypto_indexes_ + 4,
                          *this,
                          c));

        if (i == _xsd_X7SCrypto_indexes_ + 4 || _xsd_X7SCrypto_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const X7SCrypto::
      _xsd_X7SCrypto_literals_[4] =
      {
        "pkcs7-crypto",
        "cms-crypto",
        "symmetric-key",
        "none"
      };

      const X7SCrypto::Value X7SCrypto::
      _xsd_X7SCrypto_indexes_[4] =
      {
        ::Smartmatic::SAES::Configuration::X7SCrypto::CONFIGURATION_CMS_CRYPTO,
        ::Smartmatic::SAES::Configuration::X7SCrypto::CONFIGURATION_NONE,
        ::Smartmatic::SAES::Configuration::X7SCrypto::CONFIGURATION_PKCS7_CRYPTO,
        ::Smartmatic::SAES::Configuration::X7SCrypto::CONFIGURATION_SYMMETRIC_KEY
      };

      // StatisticConfiguration
      //

      StatisticConfiguration::
      StatisticConfiguration ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        StatisticGroups_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticConfiguration::
      StatisticConfiguration (const StatisticConfiguration& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        StatisticGroups_ (x.StatisticGroups_, f, this)
      {
      }

      StatisticConfiguration::
      StatisticConfiguration (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        StatisticGroups_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
          this->parse (p, f);
        }
      }

      void StatisticConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // StatisticGroups
          //
          if (n.name () == "StatisticGroups" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< StatisticGroupsType > r (
              StatisticGroupsTraits::create (i, f, this));

            this->StatisticGroups_.push_back (r);
            continue;
          }

          break;
        }
      }

      StatisticConfiguration* StatisticConfiguration::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class StatisticConfiguration (*this, f, c);
      }

      StatisticConfiguration::
      ~StatisticConfiguration ()
      {
      }

      bool
      operator== (const StatisticConfiguration& x, const StatisticConfiguration& y)
      {
        if (!(x.getStatisticGroups () == y.getStatisticGroups ()))
          return false;

        return true;
      }

      bool
      operator!= (const StatisticConfiguration& x, const StatisticConfiguration& y)
      {
        return !(x == y);
      }

      // StatisticGroups
      //

      StatisticGroups::
      StatisticGroups ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        StatisticItem_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        StatisticEditType_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        NameKey_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        EditInfoKey_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BlockerInfoKey_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VerticalFilling_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Pivot_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticGroups::
      StatisticGroups (const NameKeyType& NameKey,
                       const EditInfoKeyType& EditInfoKey,
                       const BlockerInfoKeyType& BlockerInfoKey,
                       const VerticalFillingType& VerticalFilling,
                       const PivotType& Pivot)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        StatisticItem_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        StatisticEditType_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        NameKey_ (NameKey, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        EditInfoKey_ (EditInfoKey, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        BlockerInfoKey_ (BlockerInfoKey, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        VerticalFilling_ (VerticalFilling, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Pivot_ (Pivot, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticGroups::
      StatisticGroups (const StatisticGroups& x,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        StatisticItem_ (x.StatisticItem_, f, this),
        StatisticEditType_ (x.StatisticEditType_, f, this),
        NameKey_ (x.NameKey_, f, this),
        EditInfoKey_ (x.EditInfoKey_, f, this),
        BlockerInfoKey_ (x.BlockerInfoKey_, f, this),
        VerticalFilling_ (x.VerticalFilling_, f, this),
        Pivot_ (x.Pivot_, f, this)
      {
      }

      StatisticGroups::
      StatisticGroups (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        StatisticItem_ (f, this),
        StatisticEditType_ (f, this),
        NameKey_ (f, this),
        EditInfoKey_ (f, this),
        BlockerInfoKey_ (f, this),
        VerticalFilling_ (f, this),
        Pivot_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void StatisticGroups::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // StatisticItem
          //
          if (n.name () == "StatisticItem" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< StatisticItemType > r (
              StatisticItemTraits::create (i, f, this));

            this->StatisticItem_.push_back (r);
            continue;
          }

          // StatisticEditType
          //
          if (n.name () == "StatisticEditType" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< StatisticEditTypeType > r (
              StatisticEditTypeTraits::create (i, f, this));

            this->StatisticEditType_.push_back (r);
            continue;
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "NameKey" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< NameKeyType > r (
              NameKeyTraits::create (i, f, this));

            this->NameKey_.set (r);
            continue;
          }

          if (n.name () == "EditInfoKey" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< EditInfoKeyType > r (
              EditInfoKeyTraits::create (i, f, this));

            this->EditInfoKey_.set (r);
            continue;
          }

          if (n.name () == "BlockerInfoKey" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< BlockerInfoKeyType > r (
              BlockerInfoKeyTraits::create (i, f, this));

            this->BlockerInfoKey_.set (r);
            continue;
          }

          if (n.name () == "VerticalFilling" && n.namespace_ ().empty ())
          {
            this->VerticalFilling_.set (VerticalFillingTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Pivot" && n.namespace_ ().empty ())
          {
            this->Pivot_.set (PivotTraits::create (i, f, this));
            continue;
          }
        }

        if (!NameKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "NameKey",
            "");
        }

        if (!EditInfoKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "EditInfoKey",
            "");
        }

        if (!BlockerInfoKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "BlockerInfoKey",
            "");
        }

        if (!VerticalFilling_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "VerticalFilling",
            "");
        }

        if (!Pivot_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Pivot",
            "");
        }
      }

      StatisticGroups* StatisticGroups::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class StatisticGroups (*this, f, c);
      }

      StatisticGroups::
      ~StatisticGroups ()
      {
      }

      bool
      operator== (const StatisticGroups& x, const StatisticGroups& y)
      {
        if (!(x.getStatisticItem () == y.getStatisticItem ()))
          return false;

        if (!(x.getStatisticEditType () == y.getStatisticEditType ()))
          return false;

        if (!(x.getNameKey () == y.getNameKey ()))
          return false;

        if (!(x.getEditInfoKey () == y.getEditInfoKey ()))
          return false;

        if (!(x.getBlockerInfoKey () == y.getBlockerInfoKey ()))
          return false;

        if (!(x.getVerticalFilling () == y.getVerticalFilling ()))
          return false;

        if (!(x.getPivot () == y.getPivot ()))
          return false;

        return true;
      }

      bool
      operator!= (const StatisticGroups& x, const StatisticGroups& y)
      {
        return !(x == y);
      }

      // StatisticItem
      //

      StatisticItem::
      StatisticItem ()
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        addStatisticCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Type_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Code_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        NameKey_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        DescriptionKey_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Max_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Mask_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Regex_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Mandatory_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Width_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Height_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticItem::
      StatisticItem (const TypeType& Type,
                     const CodeType& Code,
                     const NameKeyType& NameKey,
                     const DescriptionKeyType& DescriptionKey)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (),
        addStatisticCode_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Type_ (Type, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Code_ (Code, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        NameKey_ (NameKey, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        DescriptionKey_ (DescriptionKey, ::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Max_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Mask_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Regex_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Mandatory_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Width_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this),
        Height_ (::Smartmatic::SAES::ConfigurationTypes::Flags (), this)
      {
      }

      StatisticItem::
      StatisticItem (const StatisticItem& x,
                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (x, f, c),
        addStatisticCode_ (x.addStatisticCode_, f, this),
        Type_ (x.Type_, f, this),
        Code_ (x.Code_, f, this),
        NameKey_ (x.NameKey_, f, this),
        DescriptionKey_ (x.DescriptionKey_, f, this),
        Max_ (x.Max_, f, this),
        Mask_ (x.Mask_, f, this),
        Regex_ (x.Regex_, f, this),
        Mandatory_ (x.Mandatory_, f, this),
        Width_ (x.Width_, f, this),
        Height_ (x.Height_, f, this)
      {
      }

      StatisticItem::
      StatisticItem (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::Type (e, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::base, c),
        addStatisticCode_ (f, this),
        Type_ (f, this),
        Code_ (f, this),
        NameKey_ (f, this),
        DescriptionKey_ (f, this),
        Max_ (f, this),
        Mask_ (f, this),
        Regex_ (f, this),
        Mandatory_ (f, this),
        Width_ (f, this),
        Height_ (f, this)
      {
        if ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
          this->parse (p, f);
        }
      }

      void StatisticItem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        for (; p.more_elements (); p.next_element ())
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // addStatisticCode
          //
          if (n.name () == "addStatisticCode" && n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
          {
            ::std::auto_ptr< AddStatisticCodeType > r (
              AddStatisticCodeTraits::create (i, f, this));

            this->addStatisticCode_.push_back (r);
            continue;
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "Type" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< TypeType > r (
              TypeTraits::create (i, f, this));

            this->Type_.set (r);
            continue;
          }

          if (n.name () == "Code" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< CodeType > r (
              CodeTraits::create (i, f, this));

            this->Code_.set (r);
            continue;
          }

          if (n.name () == "NameKey" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< NameKeyType > r (
              NameKeyTraits::create (i, f, this));

            this->NameKey_.set (r);
            continue;
          }

          if (n.name () == "DescriptionKey" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< DescriptionKeyType > r (
              DescriptionKeyTraits::create (i, f, this));

            this->DescriptionKey_.set (r);
            continue;
          }

          if (n.name () == "Max" && n.namespace_ ().empty ())
          {
            this->Max_.set (MaxTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Mask" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< MaskType > r (
              MaskTraits::create (i, f, this));

            this->Mask_.set (r);
            continue;
          }

          if (n.name () == "Regex" && n.namespace_ ().empty ())
          {
            ::std::auto_ptr< RegexType > r (
              RegexTraits::create (i, f, this));

            this->Regex_.set (r);
            continue;
          }

          if (n.name () == "Mandatory" && n.namespace_ ().empty ())
          {
            this->Mandatory_.set (MandatoryTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Width" && n.namespace_ ().empty ())
          {
            this->Width_.set (WidthTraits::create (i, f, this));
            continue;
          }

          if (n.name () == "Height" && n.namespace_ ().empty ())
          {
            this->Height_.set (HeightTraits::create (i, f, this));
            continue;
          }
        }

        if (!Type_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Type",
            "");
        }

        if (!Code_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "Code",
            "");
        }

        if (!NameKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "NameKey",
            "");
        }

        if (!DescriptionKey_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "DescriptionKey",
            "");
        }
      }

      StatisticItem* StatisticItem::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class StatisticItem (*this, f, c);
      }

      StatisticItem::
      ~StatisticItem ()
      {
      }

      bool
      operator== (const StatisticItem& x, const StatisticItem& y)
      {
        if (!(x.getAddStatisticCode () == y.getAddStatisticCode ()))
          return false;

        if (!(x.getType () == y.getType ()))
          return false;

        if (!(x.getCode () == y.getCode ()))
          return false;

        if (!(x.getNameKey () == y.getNameKey ()))
          return false;

        if (!(x.getDescriptionKey () == y.getDescriptionKey ()))
          return false;

        if (!(x.getMax () == y.getMax ()))
          return false;

        if (!(x.getMask () == y.getMask ()))
          return false;

        if (!(x.getRegex () == y.getRegex ()))
          return false;

        if (!(x.getMandatory () == y.getMandatory ()))
          return false;

        if (!(x.getWidth () == y.getWidth ()))
          return false;

        if (!(x.getHeight () == y.getHeight ()))
          return false;

        return true;
      }

      bool
      operator!= (const StatisticItem& x, const StatisticItem& y)
      {
        return !(x == y);
      }

      // StatisticElementType
      //

      StatisticElementType::
      StatisticElementType (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_StatisticElementType_convert ();
      }

      StatisticElementType::
      StatisticElementType (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_StatisticElementType_convert ();
      }

      StatisticElementType::
      StatisticElementType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_StatisticElementType_convert ();
      }

      StatisticElementType* StatisticElementType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class StatisticElementType (*this, f, c);
      }

      StatisticElementType::Value StatisticElementType::
      _xsd_StatisticElementType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StatisticElementType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_StatisticElementType_indexes_,
                          _xsd_StatisticElementType_indexes_ + 4,
                          *this,
                          c));

        if (i == _xsd_StatisticElementType_indexes_ + 4 || _xsd_StatisticElementType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const StatisticElementType::
      _xsd_StatisticElementType_literals_[4] =
      {
        "numeric",
        "boolean",
        "string",
        "custom"
      };

      const StatisticElementType::Value StatisticElementType::
      _xsd_StatisticElementType_indexes_[4] =
      {
        ::Smartmatic::SAES::Configuration::StatisticElementType::CONFIGURATION_BOOLEAN,
        ::Smartmatic::SAES::Configuration::StatisticElementType::CONFIGURATION_CUSTOM,
        ::Smartmatic::SAES::Configuration::StatisticElementType::CONFIGURATION_NUMERIC,
        ::Smartmatic::SAES::Configuration::StatisticElementType::CONFIGURATION_STRING
      };

      // StatisticEditType
      //

      StatisticEditType::
      StatisticEditType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_StatisticEditType_convert ();
      }

      StatisticEditType::
      StatisticEditType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_StatisticEditType_convert ();
      }

      StatisticEditType::
      StatisticEditType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_StatisticEditType_convert ();
      }

      StatisticEditType* StatisticEditType::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class StatisticEditType (*this, f, c);
      }

      StatisticEditType::Value StatisticEditType::
      _xsd_StatisticEditType_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_StatisticEditType_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_StatisticEditType_indexes_,
                          _xsd_StatisticEditType_indexes_ + 9,
                          *this,
                          c));

        if (i == _xsd_StatisticEditType_indexes_ + 9 || _xsd_StatisticEditType_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const StatisticEditType::
      _xsd_StatisticEditType_literals_[9] =
      {
        "NotInstalled",
        "NotPollworkerRegistered",
        "NotDemostrationVote",
        "NotInitiated",
        "Initiated",
        "Closed",
        "ResultsTransmitted",
        "All",
        "None"
      };

      const StatisticEditType::Value StatisticEditType::
      _xsd_StatisticEditType_indexes_[9] =
      {
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_ALL,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_CLOSED,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_INITIATED,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_NONE,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_NOTDEMOSTRATIONVOTE,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_NOTINITIATED,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_NOTINSTALLED,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_NOTPOLLWORKERREGISTERED,
        ::Smartmatic::SAES::Configuration::StatisticEditType::CONFIGURATION_RESULTSTRANSMITTED
      };

      // PositionImage
      //

      PositionImage::
      PositionImage (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (e, f, c)
      {
        _xsd_PositionImage_convert ();
      }

      PositionImage::
      PositionImage (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (a, f, c)
      {
        _xsd_PositionImage_convert ();
      }

      PositionImage::
      PositionImage (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                     ::Smartmatic::SAES::ConfigurationTypes::Container* c)
      : ::Smartmatic::SAES::ConfigurationTypes::String (s, e, f, c)
      {
        _xsd_PositionImage_convert ();
      }

      PositionImage* PositionImage::
      _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f,
              ::Smartmatic::SAES::ConfigurationTypes::Container* c) const
      {
        return new class PositionImage (*this, f, c);
      }

      PositionImage::Value PositionImage::
      _xsd_PositionImage_convert () const
      {
        ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PositionImage_literals_);
        const Value* i (::std::lower_bound (
                          _xsd_PositionImage_indexes_,
                          _xsd_PositionImage_indexes_ + 10,
                          *this,
                          c));

        if (i == _xsd_PositionImage_indexes_ + 10 || _xsd_PositionImage_literals_[*i] != *this)
        {
          throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
        }

        return *i;
      }

      const char* const PositionImage::
      _xsd_PositionImage_literals_[10] =
      {
        "TOP_LEFT",
        "TOP_CENTER",
        "TOP_RIGHT",
        "MIDDLE_LEFT",
        "MIDDLE_CENTER",
        "MIDDLE_RIGHT",
        "BOTTOM_LEFT",
        "BOTTOM_CENTER",
        "BOTTOM_RIGHT",
        "RANDOM"
      };

      const PositionImage::Value PositionImage::
      _xsd_PositionImage_indexes_[10] =
      {
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_BOTTOM_CENTER,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_BOTTOM_LEFT,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_BOTTOM_RIGHT,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_MIDDLE_CENTER,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_MIDDLE_LEFT,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_MIDDLE_RIGHT,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_RANDOM,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_TOP_CENTER,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_TOP_LEFT,
        ::Smartmatic::SAES::Configuration::PositionImage::CONFIGURATION_TOP_RIGHT
      };
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::std::string& u,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
            d, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::std::string& u,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) == 0);

        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
            d, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
            d, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parseSaesConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parseSaesConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::Smartmatic::SAES::Configuration::parseSaesConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parseSaesConfiguration (isrc, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0,
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parseSaesConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::Smartmatic::SAES::Configuration::parseSaesConfiguration (isrc, h, f, p);
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::xercesc::InputSource& i,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
            d, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::xercesc::InputSource& i,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
            d, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
          ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
            d, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

        return r;
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::xercesc::DOMDocument& d,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p)
      {
        if (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom)
        {
          ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
            ::Smartmatic::SAES::Configuration::parseSaesConfiguration (
              c, f | ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom, p));

          return r;
        }

        const ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SaesConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Configuration::SaesConfiguration, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SaesConfiguration",
          "http://www.smartmatic.com/SaesConfiguration");
      }

      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties&)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom) &&
           !(f & ::Smartmatic::SAES::ConfigurationTypes::Flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::keep_dom)
          doc.setUserData (::Smartmatic::SAES::ConfigurationTypes::dom::treeNodeKey,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SaesConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
        {
          ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration > r (
            ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Configuration::SaesConfiguration, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SaesConfiguration",
          "http://www.smartmatic.com/SaesConfiguration");
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      void
      operator<< (::xercesc::DOMElement& e, const TextConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // Size
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Size",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSize ();
        }

        // FontFamily
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FontFamily",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getFontFamily ();
        }

        // Bold
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Bold",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getBold ();
        }

        // Italic
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Italic",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getItalic ();
        }

        // HPandding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "HPandding",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getHPandding ();
        }

        // VPandding
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VPandding",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVPandding ();
        }

        // Align
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Align",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getAlign ();
        }

        // LevelPaddingSpaceChar
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LevelPaddingSpaceChar",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLevelPaddingSpaceChar ();
        }

        // Visible
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Visible",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVisible ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const AlignType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const AlignType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const AlignType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteChecksumType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const VoteChecksumType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const VoteChecksumType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteEncodeModeType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const VoteEncodeModeType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const VoteEncodeModeType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LayoutBallotOptiontType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const LayoutBallotOptiontType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const LayoutBallotOptiontType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LayoutSuperBlankType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const LayoutSuperBlankType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const LayoutSuperBlankType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LayoutContestType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const LayoutContestType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const LayoutContestType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const QRcodePosition& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const QRcodePosition& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const QRcodePosition& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const CorrectionModeQRCode& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const CorrectionModeQRCode& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const CorrectionModeQRCode& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const QRCodePrintingModeType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const QRCodePrintingModeType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const QRCodePrintingModeType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LayoutContestConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // LayoutContestType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LayoutContestType",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLayoutContestType ();
        }

        // TextBallotOption
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextBallotOption",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextBallotOption ();
        }

        // CompleteWithSpaces
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CompleteWithSpaces",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getCompleteWithSpaces ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationVote& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // PaddingChar
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PaddingChar",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getPaddingChar ();
        }

        // PrintToPdf
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PrintToPdf",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getPrintToPdf ();
        }

        // QRcodePosition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRcodePosition",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getQRcodePosition ();
        }

        // QRCodePrintingMode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRCodePrintingMode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getQRCodePrintingMode ();
        }

        // LevelPaddingSpaceCharSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LevelPaddingSpaceCharSize",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLevelPaddingSpaceCharSize ();
        }

        // MaxBallotOptionLastNameChars
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxBallotOptionLastNameChars",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMaxBallotOptionLastNameChars ();
        }

        // MaxBallotOptionNameChars
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxBallotOptionNameChars",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMaxBallotOptionNameChars ();
        }

        // MaxBallotOptionCodeChars
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxBallotOptionCodeChars",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMaxBallotOptionCodeChars ();
        }

        // BallotOptionNameSeparator
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BallotOptionNameSeparator",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getBallotOptionNameSeparator ();
        }

        // DirectPrinting
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "DirectPrinting",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getDirectPrinting ();
        }

        // TextHeader1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader1",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader1 ();
        }

        // TextHeader2
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader2",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader2 ();
        }

        // TextHeader3
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader3",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader3 ();
        }

        // TextHeader4
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader4",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader4 ();
        }

        // TextHeader5
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader5",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader5 ();
        }

        // TextHeader6
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader6",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader6 ();
        }

        // TextHeader7
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeader7",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeader7 ();
        }

        // TextHeaderCustomAttributes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextHeaderCustomAttributes",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextHeaderCustomAttributes ();
        }

        // TextBallotName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextBallotName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextBallotName ();
        }

        // TextRegionName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextRegionName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextRegionName ();
        }

        // TextGeneric
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextGeneric",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextGeneric ();
        }

        // TextBlankVote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextBlankVote",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextBlankVote ();
        }

        // CompleteVoteWithSpaces
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CompleteVoteWithSpaces",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getCompleteVoteWithSpaces ();
        }

        // UseMaxSizeBlankVote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseMaxSizeBlankVote",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getUseMaxSizeBlankVote ();
        }

        // ShowBallotLines
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBallotLines",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getShowBallotLines ();
        }

        // LayoutContestConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LayoutContestConfiguration",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLayoutContestConfiguration ();
        }

        // TextContestName1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContestName1",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContestName1 ();
        }

        // TextContestName2
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContestName2",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContestName2 ();
        }

        // TextContestName3
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContestName3",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContestName3 ();
        }

        // IsTextContestName1CustomAttribute
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IsTextContestName1CustomAttribute",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getIsTextContestName1CustomAttribute ();
        }

        // IsTextContestName2CustomAttribute
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IsTextContestName2CustomAttribute",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getIsTextContestName2CustomAttribute ();
        }

        // IsTextContestName3CustomAttribute
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IsTextContestName3CustomAttribute",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getIsTextContestName3CustomAttribute ();
        }

        // TextParentOptionSelected
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextParentOptionSelected",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextParentOptionSelected ();
        }

        // TextPrincipalsMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextPrincipalsMessage",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextPrincipalsMessage ();
        }

        // TextStandInMessage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextStandInMessage",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextStandInMessage ();
        }

        // LayoutBallotOptiontType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LayoutBallotOptiontType",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLayoutBallotOptiontType ();
        }

        // LayoutSuperBlankType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LayoutSuperBlankType",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLayoutSuperBlankType ();
        }

        // VoteEncodeMode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteEncodeMode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVoteEncodeMode ();
        }

        // VoteChecksum
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteChecksum",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVoteChecksum ();
        }

        // QRCodeVoteList
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRCodeVoteList",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getQRCodeVoteList ();
        }

        // VoteQRCodeMode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteQRCodeMode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVoteQRCodeMode ();
        }

        // UseBackgroundImageForQR
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseBackgroundImageForQR",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getUseBackgroundImageForQR ();
        }

        // PositionImageInBackgroundQR
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PositionImageInBackgroundQR",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getPositionImageInBackgroundQR ();
        }

        // VoteCodeConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteCodeConfig",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVoteCodeConfig ();
        }

        // AddBlankSpaceFullContest
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AddBlankSpaceFullContest",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getAddBlankSpaceFullContest ();
        }

        // MultiLanguageConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MultiLanguageConfiguration",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMultiLanguageConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteQRCodeModeEnum& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const VoteQRCodeModeEnum& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const VoteQRCodeModeEnum& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteCodeConfig& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // UseShortVoteCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UseShortVoteCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getUseShortVoteCode ();
        }

        // CountGroupVoteCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CountGroupVoteCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getCountGroupVoteCode ();
        }

        // CharSeparatorVoteCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CharSeparatorVoteCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getCharSeparatorVoteCode ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const MultiLanguageConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // Enable
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Enable",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getEnable ();
        }

        // Separator
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Separator",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSeparator ();
        }

        // MaxCharsByLanguage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxCharsByLanguage",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMaxCharsByLanguage ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const QRCodeVoteList& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // QRCodeVoteConfig
        //
        for (QRCodeVoteList::QRCodeVoteConfigConstIterator
             b (i.getQRCodeVoteConfig ().begin ()), n (i.getQRCodeVoteConfig ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRCodeVoteConfig",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const QRCodeVoteConfig& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // MaxSize
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MaxSize",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMaxSize ();
        }

        // QRCodeConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRCodeConfig",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getQRCodeConfig ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const QRCodeConfig& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // SizeQRCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SizeQRCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSizeQRCode ();
        }

        // MarginQRCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "MarginQRCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getMarginQRCode ();
        }

        // CorrectionModeQRCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CorrectionModeQRCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getCorrectionModeQRCode ();
        }

        // VersionQRCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VersionQRCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVersionQRCode ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationSmartcardRemoved& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // TextTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextTitle",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextTitle ();
        }

        // TextElectionName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextElectionName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextElectionName ();
        }

        // TextVotingBooth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextVotingBooth",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextVotingBooth ();
        }

        // TextVoteID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextVoteID",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextVoteID ();
        }

        // TextDescription
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextDescription",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextDescription ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationTimeout& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // TextTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextTitle",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextTitle ();
        }

        // TextElectionName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextElectionName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextElectionName ();
        }

        // TextVotingBooth
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextVotingBooth",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextVotingBooth ();
        }

        // TextVoteID
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextVoteID",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextVoteID ();
        }

        // TextDescription
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextDescription",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextDescription ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationInstallation& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // TextInstallationTitleLevel1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextInstallationTitleLevel1",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextInstallationTitleLevel1 ();
        }

        // TextInstallationTitleLevel2
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextInstallationTitleLevel2",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextInstallationTitleLevel2 ();
        }

        // TextInstallationTitleLevel3
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextInstallationTitleLevel3",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextInstallationTitleLevel3 ();
        }

        // TextInstallationInfo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextInstallationInfo",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextInstallationInfo ();
        }

        // ShowBarCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ShowBarCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getShowBarCode ();
        }

        // QRCodeConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRCodeConfig",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getQRCodeConfig ();
        }

        // Base64QRCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Base64QRCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getBase64QRCode ();
        }

        // QRcodePosition
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "QRcodePosition",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getQRcodePosition ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationContingency& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // TextContingencyTitleLevel1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContingencyTitleLevel1",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContingencyTitleLevel1 ();
        }

        // TextContingencyTitleLevel2
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContingencyTitleLevel2",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContingencyTitleLevel2 ();
        }

        // TextContingencyTitleLevel3
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContingencyTitleLevel3",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContingencyTitleLevel3 ();
        }

        // TextContingencyInfo
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextContingencyInfo",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextContingencyInfo ();
        }

        // IncludeHelp
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncludeHelp",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getIncludeHelp ();
        }

        // IncludeRegionSection
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IncludeRegionSection",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getIncludeRegionSection ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const DocumentColumnLayout& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const DocumentColumnLayout& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const DocumentColumnLayout& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const LogPrintDocumentConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // TextLogTitleLevel1
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextLogTitleLevel1",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextLogTitleLevel1 ();
        }

        // TextLogTitleLevel2
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextLogTitleLevel2",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextLogTitleLevel2 ();
        }

        // TextLogTitleLevel3
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextLogTitleLevel3",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextLogTitleLevel3 ();
        }

        // TextLogTitleLevel4
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextLogTitleLevel4",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextLogTitleLevel4 ();
        }

        // TextLogTitleLevel5
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextLogTitleLevel5",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextLogTitleLevel5 ();
        }

        // TextLogEntry
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TextLogEntry",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTextLogEntry ();
        }

        // ColumnLayout
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ColumnLayout",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getColumnLayout ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationPrinter& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // ConfigurationVote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationVote",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationVote ();
        }

        // ConfigurationTimeout
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationTimeout",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationTimeout ();
        }

        // ConfigurationSmartcardRemoved
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationSmartcardRemoved",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationSmartcardRemoved ();
        }

        // ConfigurationInstallation
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationInstallation",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationInstallation ();
        }

        // ConfigurationContingency
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationContingency",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationContingency ();
        }

        // LogPrintDocConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "LogPrintDocConfiguration",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getLogPrintDocConfiguration ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationScreenPreview& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // ConfigurationVote
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationVote",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationVote ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationCard& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // TimeOfValidity
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TimeOfValidity",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTimeOfValidity ();
        }

        // AllowRecoveryCardGenerationOfConsolidatedVotes
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "AllowRecoveryCardGenerationOfConsolidatedVotes",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getAllowRecoveryCardGenerationOfConsolidatedVotes ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationReportFile& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // FileName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FileName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getFileName ();
        }

        // ReportTitle
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportTitle",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getReportTitle ();
        }

        // FileDescription
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FileDescription",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getFileDescription ();
        }

        // NumCopies
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "NumCopies",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getNumCopies ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const ConfigurationReportPrinting& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // ReportFiles
        //
        for (ConfigurationReportPrinting::ReportFilesConstIterator
             b (i.getReportFiles ().begin ()), n (i.getReportFiles ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportFiles",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const SaesConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // ConfigurationCard
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationCard",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationCard ();
        }

        // ConfigurationPrinter
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationPrinter",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationPrinter ();
        }

        // ConfigurationScreenPreview
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ConfigurationScreenPreview",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getConfigurationScreenPreview ();
        }

        // VoteDummy
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "VoteDummy",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getVoteDummy ();
        }

        // ReportPrinting
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ReportPrinting",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getReportPrinting ();
        }

        // StatisticConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticConfiguration",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getStatisticConfiguration ();
        }

        // TransmissionPackageConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "TransmissionPackageConfiguration",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getTransmissionPackageConfiguration ();
        }

        // CodiFileConfiguration
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CodiFileConfiguration",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getCodiFileConfiguration ();
        }

        // BarcodeQRCodeConfig
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "BarcodeQRCodeConfig",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getBarcodeQRCodeConfig ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const VoteDummyConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // LogicalVoterGroupCode
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "LogicalVoterGroupCode",
              e));

          a << i.getLogicalVoterGroupCode ();
        }

        // ContestCode
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "ContestCode",
              e));

          a << i.getContestCode ();
        }

        // BallotOptionCode
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "BallotOptionCode",
              e));

          a << i.getBallotOptionCode ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const TransmissionPackageConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // SaveDemoVotesInTransmissionPackage
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "SaveDemoVotesInTransmissionPackage",
              e));

          a << i.getSaveDemoVotesInTransmissionPackage ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const CodiFileConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // EnableCodi
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "EnableCodi",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getEnableCodi ();
        }

        // PersistenceCodi
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersistenceCodi",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getPersistenceCodi ();
        }

        // SeparatorVotingDevice
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SeparatorVotingDevice",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSeparatorVotingDevice ();
        }

        // FirstStringFileName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FirstStringFileName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getFirstStringFileName ();
        }

        // RuleCodiFileName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RuleCodiFileName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getRuleCodiFileName ();
        }

        // RegisterS
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterS",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getRegisterS ();
        }

        // RegisterL
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterL",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getRegisterL ();
        }

        // RegisterC
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegisterC",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getRegisterC ();
        }

        // RegionName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RegionName",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getRegionName ();
        }

        // PersistenceX7SCodi
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "PersistenceX7SCodi",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getPersistenceX7SCodi ();
        }

        // X7SAddPVReport
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "X7SAddPVReport",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getX7SAddPVReport ();
        }

        // X7SSigned
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "X7SSigned",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getX7SSigned ();
        }

        // X7SCrypto
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "X7SCrypto",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getX7SCrypto ();
        }

        // X7SSignedCertified
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "X7SSignedCertified",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getX7SSignedCertified ();
        }

        // X7SCryptoCertified
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "X7SCryptoCertified",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getX7SCryptoCertified ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RegisterCodiConfig& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // UpdateNISCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "UpdateNISCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getUpdateNISCode ();
        }

        // SetVotingType
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SetVotingType",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSetVotingType ();
        }

        // SetLanguage
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SetLanguage",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSetLanguage ();
        }

        // SetNISCode
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "SetNISCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << i.getSetNISCode ();
        }

        // FillLastFields
        //
        if (i.getFillLastFields ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "FillLastFields",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *i.getFillLastFields ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const RegionNameCodiConfig& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const RegionNameCodiConfig& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const RegionNameCodiConfig& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const RuleCodiFileNameConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const RuleCodiFileNameConfiguration& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const RuleCodiFileNameConfiguration& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const X7SSecurityType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const X7SSecurityType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const X7SSecurityType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const X7SSigned& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const X7SSigned& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const X7SSigned& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const X7SCrypto& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const X7SCrypto& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const X7SCrypto& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const StatisticConfiguration& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // StatisticGroups
        //
        for (StatisticConfiguration::StatisticGroupsConstIterator
             b (i.getStatisticGroups ().begin ()), n (i.getStatisticGroups ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticGroups",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *b;
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const StatisticGroups& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // StatisticItem
        //
        for (StatisticGroups::StatisticItemConstIterator
             b (i.getStatisticItem ().begin ()), n (i.getStatisticItem ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticItem",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *b;
        }

        // StatisticEditType
        //
        for (StatisticGroups::StatisticEditTypeConstIterator
             b (i.getStatisticEditType ().begin ()), n (i.getStatisticEditType ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "StatisticEditType",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *b;
        }

        // NameKey
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "NameKey",
              e));

          a << i.getNameKey ();
        }

        // EditInfoKey
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "EditInfoKey",
              e));

          a << i.getEditInfoKey ();
        }

        // BlockerInfoKey
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "BlockerInfoKey",
              e));

          a << i.getBlockerInfoKey ();
        }

        // VerticalFilling
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "VerticalFilling",
              e));

          a << i.getVerticalFilling ();
        }

        // Pivot
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Pivot",
              e));

          a << i.getPivot ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const StatisticItem& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::Type& > (i);

        // addStatisticCode
        //
        for (StatisticItem::AddStatisticCodeConstIterator
             b (i.getAddStatisticCode ().begin ()), n (i.getAddStatisticCode ().end ());
             b != n; ++b)
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "addStatisticCode",
              "http://www.smartmatic.com/SaesConfiguration",
              e));

          s << *b;
        }

        // Type
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Type",
              e));

          a << i.getType ();
        }

        // Code
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Code",
              e));

          a << i.getCode ();
        }

        // NameKey
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "NameKey",
              e));

          a << i.getNameKey ();
        }

        // DescriptionKey
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "DescriptionKey",
              e));

          a << i.getDescriptionKey ();
        }

        // Max
        //
        if (i.getMax ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Max",
              e));

          a << *i.getMax ();
        }

        // Mask
        //
        if (i.getMask ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Mask",
              e));

          a << *i.getMask ();
        }

        // Regex
        //
        if (i.getRegex ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Regex",
              e));

          a << *i.getRegex ();
        }

        // Mandatory
        //
        if (i.getMandatory ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Mandatory",
              e));

          a << *i.getMandatory ();
        }

        // Width
        //
        if (i.getWidth ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Width",
              e));

          a << *i.getWidth ();
        }

        // Height
        //
        if (i.getHeight ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "Height",
              e));

          a << *i.getHeight ();
        }
      }

      void
      operator<< (::xercesc::DOMElement& e, const StatisticElementType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const StatisticElementType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const StatisticElementType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const StatisticEditType& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const StatisticEditType& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const StatisticEditType& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMElement& e, const PositionImage& i)
      {
        e << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::xercesc::DOMAttr& a, const PositionImage& i)
      {
        a << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream& l,
                  const PositionImage& i)
      {
        l << static_cast< const ::Smartmatic::SAES::ConfigurationTypes::String& > (i);
      }

      void
      serializeSaesConfiguration (::std::ostream& o,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeSaesConfiguration (::std::ostream& o,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& h,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::Smartmatic::SAES::ConfigurationTypes::Flags::dont_initialize) == 0);

        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesConfiguration (::std::ostream& o,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (s, m, f));
        ::xsd::cxx::xml::dom::ostream_format_target t (o);
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesConfiguration (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (s, m, f));

        ::xsd::cxx::tree::error_handler< char > h;

        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
        }
      }

      void
      serializeSaesConfiguration (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& h,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesConfiguration (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (s, m, f));
        if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
        {
          throw ::xsd::cxx::tree::serialization< char > ();
        }
      }

      void
      serializeSaesConfiguration (::xercesc::DOMDocument& d,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags)
      {
        ::xercesc::DOMElement& e (*d.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SaesConfiguration" &&
            n.namespace_ () == "http://www.smartmatic.com/SaesConfiguration")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "SaesConfiguration",
            "http://www.smartmatic.com/SaesConfiguration");
        }
      }

      ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeSaesConfiguration (const ::Smartmatic::SAES::Configuration::SaesConfiguration& s,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f)
      {
        ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::serialize< char > (
            "SaesConfiguration",
            "http://www.smartmatic.com/SaesConfiguration",
            m, f));

        ::Smartmatic::SAES::Configuration::serializeSaesConfiguration (*d, s, f);
        return d;
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

