// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from SaesConfiguration-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_SAES_CONFIGURATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_SAES_CONFIGURATION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    /**
     * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
     * schema namespace.
     */
    namespace ConfigurationTypes
    {
      // anyType and anySimpleType.
      //

      /**
       * @brief C++ type corresponding to the anyType XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::type Type;

      /**
       * @brief C++ type corresponding to the anySimpleType XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

      /**
       * @brief Alias for the anyType type.
       */
      typedef ::xsd::cxx::tree::type Container;


      // 8-bit
      //

      /**
       * @brief C++ type corresponding to the byte XML Schema
       * built-in type.
       */
      typedef signed char Byte;

      /**
       * @brief C++ type corresponding to the unsignedByte XML Schema
       * built-in type.
       */
      typedef unsigned char UnsignedByte;


      // 16-bit
      //

      /**
       * @brief C++ type corresponding to the short XML Schema
       * built-in type.
       */
      typedef short Short;

      /**
       * @brief C++ type corresponding to the unsignedShort XML Schema
       * built-in type.
       */
      typedef unsigned short UnsignedShort;


      // 32-bit
      //

      /**
       * @brief C++ type corresponding to the int XML Schema
       * built-in type.
       */
      typedef int Int;

      /**
       * @brief C++ type corresponding to the unsignedInt XML Schema
       * built-in type.
       */
      typedef unsigned int UnsignedInt;


      // 64-bit
      //

      /**
       * @brief C++ type corresponding to the long XML Schema
       * built-in type.
       */
      typedef long long Long;

      /**
       * @brief C++ type corresponding to the unsignedLong XML Schema
       * built-in type.
       */
      typedef unsigned long long UnsignedLong;


      // Supposed to be arbitrary-length integral types.
      //

      /**
       * @brief C++ type corresponding to the integer XML Schema
       * built-in type.
       */
      typedef long long Integer;

      /**
       * @brief C++ type corresponding to the nonPositiveInteger XML Schema
       * built-in type.
       */
      typedef long long NonPositiveInteger;

      /**
       * @brief C++ type corresponding to the nonNegativeInteger XML Schema
       * built-in type.
       */
      typedef unsigned long long NonNegativeInteger;

      /**
       * @brief C++ type corresponding to the positiveInteger XML Schema
       * built-in type.
       */
      typedef unsigned long long PositiveInteger;

      /**
       * @brief C++ type corresponding to the negativeInteger XML Schema
       * built-in type.
       */
      typedef long long NegativeInteger;


      // Boolean.
      //

      /**
       * @brief C++ type corresponding to the boolean XML Schema
       * built-in type.
       */
      typedef bool Boolean;


      // Floating-point types.
      //

      /**
       * @brief C++ type corresponding to the float XML Schema
       * built-in type.
       */
      typedef float Float;

      /**
       * @brief C++ type corresponding to the double XML Schema
       * built-in type.
       */
      typedef double Double;

      /**
       * @brief C++ type corresponding to the decimal XML Schema
       * built-in type.
       */
      typedef double Decimal;


      // String types.
      //

      /**
       * @brief C++ type corresponding to the string XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::string< char, SimpleType > String;

      /**
       * @brief C++ type corresponding to the normalizedString XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

      /**
       * @brief C++ type corresponding to the token XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

      /**
       * @brief C++ type corresponding to the Name XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::name< char, Token > Name;

      /**
       * @brief C++ type corresponding to the NMTOKEN XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

      /**
       * @brief C++ type corresponding to the NMTOKENS XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

      /**
       * @brief C++ type corresponding to the NCName XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

      /**
       * @brief C++ type corresponding to the language XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::language< char, Token > Language;


      // ID/IDREF.
      //

      /**
       * @brief C++ type corresponding to the ID XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::id< char, Ncname > Id;

      /**
       * @brief C++ type corresponding to the IDREF XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

      /**
       * @brief C++ type corresponding to the IDREFS XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


      // URI.
      //

      /**
       * @brief C++ type corresponding to the anyURI XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


      // Qualified name.
      //

      /**
       * @brief C++ type corresponding to the QName XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


      // Binary.
      //

      /**
       * @brief Binary buffer type.
       */
      typedef ::xsd::cxx::tree::buffer< char > Buffer;

      /**
       * @brief C++ type corresponding to the base64Binary XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

      /**
       * @brief C++ type corresponding to the hexBinary XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


      // Date/time.
      //

      /**
       * @brief Time zone type.
       */
      typedef ::xsd::cxx::tree::time_zone TimeZone;

      /**
       * @brief C++ type corresponding to the date XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

      /**
       * @brief C++ type corresponding to the dateTime XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

      /**
       * @brief C++ type corresponding to the duration XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

      /**
       * @brief C++ type corresponding to the gDay XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

      /**
       * @brief C++ type corresponding to the gMonth XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

      /**
       * @brief C++ type corresponding to the gMonthDay XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

      /**
       * @brief C++ type corresponding to the gYear XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

      /**
       * @brief C++ type corresponding to the gYearMonth XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

      /**
       * @brief C++ type corresponding to the time XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


      // Entity.
      //

      /**
       * @brief C++ type corresponding to the ENTITY XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

      /**
       * @brief C++ type corresponding to the ENTITIES XML Schema
       * built-in type.
       */
      typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


      // Namespace information and list stream. Used in
      // serialization functions.
      //
      /**
       * @brief Namespace serialization information.
       */
      typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

      /**
       * @brief Namespace serialization information map.
       */
      typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

      /**
       * @brief List serialization stream.
       */
      typedef ::xsd::cxx::tree::list_stream< char > ListStream;

      /**
       * @brief Serialization wrapper for the %double type.
       */
      typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

      /**
       * @brief Serialization wrapper for the %decimal type.
       */
      typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

      /**
       * @brief Simple type facet.
       */
      typedef ::xsd::cxx::tree::facet Facet;

      // Flags and properties.
      //

      /**
       * @brief Parsing and serialization flags.
       */
      typedef ::xsd::cxx::tree::flags Flags;

      /**
       * @brief Parsing properties.
       */
      typedef ::xsd::cxx::tree::properties< char > Properties;

      // Parsing/serialization diagnostics.
      //

      /**
       * @brief Error severity.
       */
      typedef ::xsd::cxx::tree::severity Severity;

      /**
       * @brief Error condition.
       */
      typedef ::xsd::cxx::tree::error< char > Error;

      /**
       * @brief List of %error conditions.
       */
      typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

      // Exceptions.
      //

      /**
       * @brief Root of the C++/Tree %exception hierarchy.
       */
      typedef ::xsd::cxx::tree::exception< char > Exception;

      /**
       * @brief Exception indicating that the size argument exceeds
       * the capacity argument.
       */
      typedef ::xsd::cxx::tree::bounds< char > Bounds;

      /**
       * @brief Exception indicating that a duplicate ID value
       * was encountered in the object model.
       */
      typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

      /**
       * @brief Exception indicating a parsing failure.
       */
      typedef ::xsd::cxx::tree::parsing< char > Parsing;

      /**
       * @brief Exception indicating that an expected element
       * was not encountered.
       */
      typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

      /**
       * @brief Exception indicating that an unexpected element
       * was encountered.
       */
      typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

      /**
       * @brief Exception indicating that an expected attribute
       * was not encountered.
       */
      typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

      /**
       * @brief Exception indicating that an unexpected enumerator
       * was encountered.
       */
      typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

      /**
       * @brief Exception indicating that the text content was
       * expected for an element.
       */
      typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

      /**
       * @brief Exception indicating that a prefix-namespace
       * mapping was not provided.
       */
      typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

      /**
       * @brief Exception indicating a serialization failure.
       */
      typedef ::xsd::cxx::tree::serialization< char > Serialization;

      /**
       * @brief Error handler callback interface.
       */
      typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

      /**
       * @brief DOM interaction.
       */
      namespace dom
      {
        /**
         * @brief Automatic pointer for DOMDocument.
         */
        using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__CONFIGURATIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__CONFIGURATIONTYPES
        /**
         * @brief DOM user data key for back pointers to tree nodes.
         */
        const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      class TextConfiguration;
      class AlignType;
      class VoteChecksumType;
      class VoteEncodeModeType;
      class LayoutBallotOptiontType;
      class LayoutSuperBlankType;
      class LayoutContestType;
      class QRcodePosition;
      class CorrectionModeQRCode;
      class QRCodePrintingModeType;
      class LayoutContestConfiguration;
      class ConfigurationVote;
      class VoteQRCodeModeEnum;
      class VoteCodeConfig;
      class MultiLanguageConfiguration;
      class QRCodeVoteList;
      class QRCodeVoteConfig;
      class QRCodeConfig;
      class ConfigurationSmartcardRemoved;
      class ConfigurationTimeout;
      class ConfigurationInstallation;
      class ConfigurationContingency;
      class DocumentColumnLayout;
      class LogPrintDocumentConfiguration;
      class ConfigurationPrinter;
      class ConfigurationScreenPreview;
      class ConfigurationCard;
      class ConfigurationReportFile;
      class ConfigurationReportPrinting;
      class SaesConfiguration;
      class VoteDummyConfiguration;
      class TransmissionPackageConfiguration;
      class CodiFileConfiguration;
      class RegisterCodiConfig;
      class RegionNameCodiConfig;
      class RuleCodiFileNameConfiguration;
      class X7SSecurityType;
      class X7SSigned;
      class X7SCrypto;
      class StatisticConfiguration;
      class StatisticGroups;
      class StatisticItem;
      class StatisticElementType;
      class StatisticEditType;
      class PositionImage;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    /**
     * @brief C++ namespace for the %http://www.smartmatic.com/SaesConfiguration
     * schema namespace.
     */
    namespace Configuration
    {
      /**
       * @brief Class corresponding to the %TextConfiguration schema type.
       *
       * @nosubgrouping
       */
      class TextConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Size
         *
         * @brief Accessor and modifier functions for the %Size
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer SizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SizeType, char > SizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SizeType&
        getSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SizeType&
        getSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSize (const SizeType& x);

        //@}

        /**
         * @name FontFamily
         *
         * @brief Accessor and modifier functions for the %FontFamily
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String FontFamilyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FontFamilyType, char > FontFamilyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FontFamilyType&
        getFontFamily () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FontFamilyType&
        getFontFamily ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFontFamily (const FontFamilyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFontFamily (::std::auto_ptr< FontFamilyType > p);

        //@}

        /**
         * @name Bold
         *
         * @brief Accessor and modifier functions for the %Bold
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean BoldType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BoldType, char > BoldTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BoldType&
        getBold () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BoldType&
        getBold ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBold (const BoldType& x);

        //@}

        /**
         * @name Italic
         *
         * @brief Accessor and modifier functions for the %Italic
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean ItalicType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ItalicType, char > ItalicTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ItalicType&
        getItalic () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ItalicType&
        getItalic ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setItalic (const ItalicType& x);

        //@}

        /**
         * @name HPandding
         *
         * @brief Accessor and modifier functions for the %HPandding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer HPanddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< HPanddingType, char > HPanddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const HPanddingType&
        getHPandding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        HPanddingType&
        getHPandding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setHPandding (const HPanddingType& x);

        //@}

        /**
         * @name VPandding
         *
         * @brief Accessor and modifier functions for the %VPandding
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer VPanddingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VPanddingType, char > VPanddingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VPanddingType&
        getVPandding () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VPanddingType&
        getVPandding ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVPandding (const VPanddingType& x);

        //@}

        /**
         * @name Align
         *
         * @brief Accessor and modifier functions for the %Align
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::AlignType AlignType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AlignType, char > AlignTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AlignType&
        getAlign () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AlignType&
        getAlign ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAlign (const AlignType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setAlign (::std::auto_ptr< AlignType > p);

        //@}

        /**
         * @name LevelPaddingSpaceChar
         *
         * @brief Accessor and modifier functions for the %LevelPaddingSpaceChar
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer LevelPaddingSpaceCharType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LevelPaddingSpaceCharType, char > LevelPaddingSpaceCharTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LevelPaddingSpaceCharType&
        getLevelPaddingSpaceChar () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LevelPaddingSpaceCharType&
        getLevelPaddingSpaceChar ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLevelPaddingSpaceChar (const LevelPaddingSpaceCharType& x);

        //@}

        /**
         * @name Visible
         *
         * @brief Accessor and modifier functions for the %Visible
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean VisibleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VisibleType, char > VisibleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VisibleType&
        getVisible () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VisibleType&
        getVisible ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVisible (const VisibleType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        TextConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        TextConfiguration (const SizeType&,
                           const FontFamilyType&,
                           const BoldType&,
                           const ItalicType&,
                           const HPanddingType&,
                           const VPanddingType&,
                           const AlignType&,
                           const LevelPaddingSpaceCharType&,
                           const VisibleType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TextConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        TextConfiguration (const TextConfiguration& x,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual TextConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~TextConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SizeType > Size_;
        ::xsd::cxx::tree::one< FontFamilyType > FontFamily_;
        ::xsd::cxx::tree::one< BoldType > Bold_;
        ::xsd::cxx::tree::one< ItalicType > Italic_;
        ::xsd::cxx::tree::one< HPanddingType > HPandding_;
        ::xsd::cxx::tree::one< VPanddingType > VPandding_;
        ::xsd::cxx::tree::one< AlignType > Align_;
        ::xsd::cxx::tree::one< LevelPaddingSpaceCharType > LevelPaddingSpaceChar_;
        ::xsd::cxx::tree::one< VisibleType > Visible_;

        //@endcond
      };

      bool
      operator== (const TextConfiguration&, const TextConfiguration&);

      bool
      operator!= (const TextConfiguration&, const TextConfiguration&);


      /**
       * @brief Enumeration class corresponding to the %AlignType
       * schema type.
       */
      class AlignType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_LEFT,
          CONFIGURATION_CENTER,
          CONFIGURATION_RIGHT
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        AlignType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        AlignType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        AlignType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        AlignType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        AlignType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AlignType (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AlignType (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AlignType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        AlignType (const AlignType& x,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AlignType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        AlignType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_AlignType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_AlignType_convert () const;

        public:
        static const char* const _xsd_AlignType_literals_[3];
        static const Value _xsd_AlignType_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %VoteChecksumType
       * schema type.
       */
      class VoteChecksumType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_CRC32,
          CONFIGURATION_MD5
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        VoteChecksumType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        VoteChecksumType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        VoteChecksumType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        VoteChecksumType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        VoteChecksumType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteChecksumType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteChecksumType (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteChecksumType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteChecksumType (const VoteChecksumType& x,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteChecksumType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        VoteChecksumType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_VoteChecksumType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_VoteChecksumType_convert () const;

        public:
        static const char* const _xsd_VoteChecksumType_literals_[2];
        static const Value _xsd_VoteChecksumType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %VoteEncodeModeType
       * schema type.
       */
      class VoteEncodeModeType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_BITWISE,
          CONFIGURATION_OPTIMIZED
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        VoteEncodeModeType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        VoteEncodeModeType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        VoteEncodeModeType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        VoteEncodeModeType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        VoteEncodeModeType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteEncodeModeType (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteEncodeModeType (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteEncodeModeType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteEncodeModeType (const VoteEncodeModeType& x,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteEncodeModeType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        VoteEncodeModeType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_VoteEncodeModeType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_VoteEncodeModeType_convert () const;

        public:
        static const char* const _xsd_VoteEncodeModeType_literals_[2];
        static const Value _xsd_VoteEncodeModeType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %LayoutBallotOptiontType
       * schema type.
       */
      class LayoutBallotOptiontType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_SEPARATEPRINCIPALANDSTANDIN,
          CONFIGURATION_CONCATENATEPRINCIPALANDSTANDIN
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        LayoutBallotOptiontType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        LayoutBallotOptiontType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        LayoutBallotOptiontType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        LayoutBallotOptiontType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        LayoutBallotOptiontType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutBallotOptiontType (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutBallotOptiontType (const ::xercesc::DOMAttr& a,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutBallotOptiontType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LayoutBallotOptiontType (const LayoutBallotOptiontType& x,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LayoutBallotOptiontType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        LayoutBallotOptiontType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_LayoutBallotOptiontType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_LayoutBallotOptiontType_convert () const;

        public:
        static const char* const _xsd_LayoutBallotOptiontType_literals_[2];
        static const Value _xsd_LayoutBallotOptiontType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %LayoutSuperBlankType
       * schema type.
       */
      class LayoutSuperBlankType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_ALLCONTEST,
          CONFIGURATION_JUSTCONTESTCLASS
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        LayoutSuperBlankType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        LayoutSuperBlankType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        LayoutSuperBlankType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        LayoutSuperBlankType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        LayoutSuperBlankType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutSuperBlankType (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutSuperBlankType (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutSuperBlankType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LayoutSuperBlankType (const LayoutSuperBlankType& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LayoutSuperBlankType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        LayoutSuperBlankType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_LayoutSuperBlankType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_LayoutSuperBlankType_convert () const;

        public:
        static const char* const _xsd_LayoutSuperBlankType_literals_[2];
        static const Value _xsd_LayoutSuperBlankType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %LayoutContestType
       * schema type.
       */
      class LayoutContestType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_SIMPLE,
          CONFIGURATION_TRUNCATED,
          CONFIGURATION_SELECTED,
          CONFIGURATION_VERTICAL
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        LayoutContestType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        LayoutContestType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        LayoutContestType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        LayoutContestType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        LayoutContestType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutContestType (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutContestType (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutContestType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LayoutContestType (const LayoutContestType& x,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LayoutContestType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        LayoutContestType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_LayoutContestType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_LayoutContestType_convert () const;

        public:
        static const char* const _xsd_LayoutContestType_literals_[4];
        static const Value _xsd_LayoutContestType_indexes_[4];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %QRcodePosition
       * schema type.
       */
      class QRcodePosition: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_TOP_ALL,
          CONFIGURATION_BOTTOM_HEADER,
          CONFIGURATION_BOTTOM_ALL
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        QRcodePosition ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        QRcodePosition (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        QRcodePosition (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        QRcodePosition (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        QRcodePosition (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRcodePosition (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRcodePosition (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRcodePosition (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        QRcodePosition (const QRcodePosition& x,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual QRcodePosition*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        QRcodePosition&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_QRcodePosition_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_QRcodePosition_convert () const;

        public:
        static const char* const _xsd_QRcodePosition_literals_[3];
        static const Value _xsd_QRcodePosition_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %CorrectionModeQRCode
       * schema type.
       */
      class CorrectionModeQRCode: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_QR_ECLEVEL_L,
          CONFIGURATION_QR_ECLEVEL_M,
          CONFIGURATION_QR_ECLEVEL_Q,
          CONFIGURATION_QR_ECLEVEL_H
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        CorrectionModeQRCode ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        CorrectionModeQRCode (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        CorrectionModeQRCode (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        CorrectionModeQRCode (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        CorrectionModeQRCode (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CorrectionModeQRCode (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CorrectionModeQRCode (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CorrectionModeQRCode (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CorrectionModeQRCode (const CorrectionModeQRCode& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CorrectionModeQRCode*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        CorrectionModeQRCode&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_CorrectionModeQRCode_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_CorrectionModeQRCode_convert () const;

        public:
        static const char* const _xsd_CorrectionModeQRCode_literals_[4];
        static const Value _xsd_CorrectionModeQRCode_indexes_[4];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %QRCodePrintingModeType
       * schema type.
       */
      class QRCodePrintingModeType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_IMAGE_BASED,
          CONFIGURATION_COMMAND_BASED
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        QRCodePrintingModeType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        QRCodePrintingModeType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        QRCodePrintingModeType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        QRCodePrintingModeType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        QRCodePrintingModeType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRCodePrintingModeType (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRCodePrintingModeType (const ::xercesc::DOMAttr& a,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRCodePrintingModeType (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        QRCodePrintingModeType (const QRCodePrintingModeType& x,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual QRCodePrintingModeType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        QRCodePrintingModeType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_QRCodePrintingModeType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_QRCodePrintingModeType_convert () const;

        public:
        static const char* const _xsd_QRCodePrintingModeType_literals_[2];
        static const Value _xsd_QRCodePrintingModeType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %LayoutContestConfiguration schema type.
       *
       * @nosubgrouping
       */
      class LayoutContestConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name LayoutContestType
         *
         * @brief Accessor and modifier functions for the %LayoutContestType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LayoutContestType LayoutContestTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LayoutContestTypeType, char > LayoutContestTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LayoutContestTypeType&
        getLayoutContestType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LayoutContestTypeType&
        getLayoutContestType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLayoutContestType (const LayoutContestTypeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLayoutContestType (::std::auto_ptr< LayoutContestTypeType > p);

        //@}

        /**
         * @name TextBallotOption
         *
         * @brief Accessor and modifier functions for the %TextBallotOption
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextBallotOptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextBallotOptionType, char > TextBallotOptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextBallotOptionType&
        getTextBallotOption () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextBallotOptionType&
        getTextBallotOption ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextBallotOption (const TextBallotOptionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextBallotOption (::std::auto_ptr< TextBallotOptionType > p);

        //@}

        /**
         * @name CompleteWithSpaces
         *
         * @brief Accessor and modifier functions for the %CompleteWithSpaces
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean CompleteWithSpacesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CompleteWithSpacesType, char > CompleteWithSpacesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CompleteWithSpacesType&
        getCompleteWithSpaces () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CompleteWithSpacesType&
        getCompleteWithSpaces ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCompleteWithSpaces (const CompleteWithSpacesType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        LayoutContestConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        LayoutContestConfiguration (const LayoutContestTypeType&,
                                    const TextBallotOptionType&,
                                    const CompleteWithSpacesType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        LayoutContestConfiguration (const LayoutContestTypeType&,
                                    ::std::auto_ptr< TextBallotOptionType >&,
                                    const CompleteWithSpacesType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LayoutContestConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LayoutContestConfiguration (const LayoutContestConfiguration& x,
                                    ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LayoutContestConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~LayoutContestConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< LayoutContestTypeType > LayoutContestType_;
        ::xsd::cxx::tree::one< TextBallotOptionType > TextBallotOption_;
        ::xsd::cxx::tree::one< CompleteWithSpacesType > CompleteWithSpaces_;

        //@endcond
      };

      bool
      operator== (const LayoutContestConfiguration&, const LayoutContestConfiguration&);

      bool
      operator!= (const LayoutContestConfiguration&, const LayoutContestConfiguration&);


      /**
       * @brief Class corresponding to the %ConfigurationVote schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationVote: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name PaddingChar
         *
         * @brief Accessor and modifier functions for the %PaddingChar
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String PaddingCharType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PaddingCharType, char > PaddingCharTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PaddingCharType&
        getPaddingChar () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PaddingCharType&
        getPaddingChar ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPaddingChar (const PaddingCharType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPaddingChar (::std::auto_ptr< PaddingCharType > p);

        //@}

        /**
         * @name PrintToPdf
         *
         * @brief Accessor and modifier functions for the %PrintToPdf
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean PrintToPdfType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PrintToPdfType, char > PrintToPdfTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PrintToPdfType&
        getPrintToPdf () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PrintToPdfType&
        getPrintToPdf ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPrintToPdf (const PrintToPdfType& x);

        //@}

        /**
         * @name QRcodePosition
         *
         * @brief Accessor and modifier functions for the %QRcodePosition
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRcodePosition QRcodePositionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRcodePositionType, char > QRcodePositionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QRcodePositionType&
        getQRcodePosition () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QRcodePositionType&
        getQRcodePosition ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQRcodePosition (const QRcodePositionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQRcodePosition (::std::auto_ptr< QRcodePositionType > p);

        //@}

        /**
         * @name QRCodePrintingMode
         *
         * @brief Accessor and modifier functions for the %QRCodePrintingMode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRCodePrintingModeType QRCodePrintingModeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRCodePrintingModeType, char > QRCodePrintingModeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QRCodePrintingModeType&
        getQRCodePrintingMode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QRCodePrintingModeType&
        getQRCodePrintingMode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQRCodePrintingMode (const QRCodePrintingModeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQRCodePrintingMode (::std::auto_ptr< QRCodePrintingModeType > p);

        //@}

        /**
         * @name LevelPaddingSpaceCharSize
         *
         * @brief Accessor and modifier functions for the %LevelPaddingSpaceCharSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer LevelPaddingSpaceCharSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LevelPaddingSpaceCharSizeType, char > LevelPaddingSpaceCharSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LevelPaddingSpaceCharSizeType&
        getLevelPaddingSpaceCharSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LevelPaddingSpaceCharSizeType&
        getLevelPaddingSpaceCharSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLevelPaddingSpaceCharSize (const LevelPaddingSpaceCharSizeType& x);

        //@}

        /**
         * @name MaxBallotOptionLastNameChars
         *
         * @brief Accessor and modifier functions for the %MaxBallotOptionLastNameChars
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer MaxBallotOptionLastNameCharsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxBallotOptionLastNameCharsType, char > MaxBallotOptionLastNameCharsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxBallotOptionLastNameCharsType&
        getMaxBallotOptionLastNameChars () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxBallotOptionLastNameCharsType&
        getMaxBallotOptionLastNameChars ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxBallotOptionLastNameChars (const MaxBallotOptionLastNameCharsType& x);

        //@}

        /**
         * @name MaxBallotOptionNameChars
         *
         * @brief Accessor and modifier functions for the %MaxBallotOptionNameChars
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer MaxBallotOptionNameCharsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxBallotOptionNameCharsType, char > MaxBallotOptionNameCharsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxBallotOptionNameCharsType&
        getMaxBallotOptionNameChars () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxBallotOptionNameCharsType&
        getMaxBallotOptionNameChars ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxBallotOptionNameChars (const MaxBallotOptionNameCharsType& x);

        //@}

        /**
         * @name MaxBallotOptionCodeChars
         *
         * @brief Accessor and modifier functions for the %MaxBallotOptionCodeChars
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer MaxBallotOptionCodeCharsType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxBallotOptionCodeCharsType, char > MaxBallotOptionCodeCharsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxBallotOptionCodeCharsType&
        getMaxBallotOptionCodeChars () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxBallotOptionCodeCharsType&
        getMaxBallotOptionCodeChars ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxBallotOptionCodeChars (const MaxBallotOptionCodeCharsType& x);

        //@}

        /**
         * @name BallotOptionNameSeparator
         *
         * @brief Accessor and modifier functions for the %BallotOptionNameSeparator
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String BallotOptionNameSeparatorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionNameSeparatorType, char > BallotOptionNameSeparatorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BallotOptionNameSeparatorType&
        getBallotOptionNameSeparator () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BallotOptionNameSeparatorType&
        getBallotOptionNameSeparator ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBallotOptionNameSeparator (const BallotOptionNameSeparatorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionNameSeparator (::std::auto_ptr< BallotOptionNameSeparatorType > p);

        //@}

        /**
         * @name DirectPrinting
         *
         * @brief Accessor and modifier functions for the %DirectPrinting
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean DirectPrintingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< DirectPrintingType, char > DirectPrintingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const DirectPrintingType&
        getDirectPrinting () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        DirectPrintingType&
        getDirectPrinting ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setDirectPrinting (const DirectPrintingType& x);

        //@}

        /**
         * @name TextHeader1
         *
         * @brief Accessor and modifier functions for the %TextHeader1
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader1Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader1Type, char > TextHeader1Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader1Type&
        getTextHeader1 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader1Type&
        getTextHeader1 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader1 (const TextHeader1Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader1 (::std::auto_ptr< TextHeader1Type > p);

        //@}

        /**
         * @name TextHeader2
         *
         * @brief Accessor and modifier functions for the %TextHeader2
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader2Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader2Type, char > TextHeader2Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader2Type&
        getTextHeader2 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader2Type&
        getTextHeader2 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader2 (const TextHeader2Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader2 (::std::auto_ptr< TextHeader2Type > p);

        //@}

        /**
         * @name TextHeader3
         *
         * @brief Accessor and modifier functions for the %TextHeader3
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader3Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader3Type, char > TextHeader3Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader3Type&
        getTextHeader3 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader3Type&
        getTextHeader3 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader3 (const TextHeader3Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader3 (::std::auto_ptr< TextHeader3Type > p);

        //@}

        /**
         * @name TextHeader4
         *
         * @brief Accessor and modifier functions for the %TextHeader4
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader4Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader4Type, char > TextHeader4Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader4Type&
        getTextHeader4 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader4Type&
        getTextHeader4 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader4 (const TextHeader4Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader4 (::std::auto_ptr< TextHeader4Type > p);

        //@}

        /**
         * @name TextHeader5
         *
         * @brief Accessor and modifier functions for the %TextHeader5
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader5Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader5Type, char > TextHeader5Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader5Type&
        getTextHeader5 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader5Type&
        getTextHeader5 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader5 (const TextHeader5Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader5 (::std::auto_ptr< TextHeader5Type > p);

        //@}

        /**
         * @name TextHeader6
         *
         * @brief Accessor and modifier functions for the %TextHeader6
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader6Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader6Type, char > TextHeader6Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader6Type&
        getTextHeader6 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader6Type&
        getTextHeader6 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader6 (const TextHeader6Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader6 (::std::auto_ptr< TextHeader6Type > p);

        //@}

        /**
         * @name TextHeader7
         *
         * @brief Accessor and modifier functions for the %TextHeader7
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeader7Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeader7Type, char > TextHeader7Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeader7Type&
        getTextHeader7 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeader7Type&
        getTextHeader7 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeader7 (const TextHeader7Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeader7 (::std::auto_ptr< TextHeader7Type > p);

        //@}

        /**
         * @name TextHeaderCustomAttributes
         *
         * @brief Accessor and modifier functions for the %TextHeaderCustomAttributes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextHeaderCustomAttributesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextHeaderCustomAttributesType, char > TextHeaderCustomAttributesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextHeaderCustomAttributesType&
        getTextHeaderCustomAttributes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextHeaderCustomAttributesType&
        getTextHeaderCustomAttributes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextHeaderCustomAttributes (const TextHeaderCustomAttributesType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextHeaderCustomAttributes (::std::auto_ptr< TextHeaderCustomAttributesType > p);

        //@}

        /**
         * @name TextBallotName
         *
         * @brief Accessor and modifier functions for the %TextBallotName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextBallotNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextBallotNameType, char > TextBallotNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextBallotNameType&
        getTextBallotName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextBallotNameType&
        getTextBallotName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextBallotName (const TextBallotNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextBallotName (::std::auto_ptr< TextBallotNameType > p);

        //@}

        /**
         * @name TextRegionName
         *
         * @brief Accessor and modifier functions for the %TextRegionName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextRegionNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextRegionNameType, char > TextRegionNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextRegionNameType&
        getTextRegionName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextRegionNameType&
        getTextRegionName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextRegionName (const TextRegionNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextRegionName (::std::auto_ptr< TextRegionNameType > p);

        //@}

        /**
         * @name TextGeneric
         *
         * @brief Accessor and modifier functions for the %TextGeneric
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextGenericType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextGenericType, char > TextGenericTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextGenericType&
        getTextGeneric () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextGenericType&
        getTextGeneric ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextGeneric (const TextGenericType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextGeneric (::std::auto_ptr< TextGenericType > p);

        //@}

        /**
         * @name TextBlankVote
         *
         * @brief Accessor and modifier functions for the %TextBlankVote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextBlankVoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextBlankVoteType, char > TextBlankVoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextBlankVoteType&
        getTextBlankVote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextBlankVoteType&
        getTextBlankVote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextBlankVote (const TextBlankVoteType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextBlankVote (::std::auto_ptr< TextBlankVoteType > p);

        //@}

        /**
         * @name CompleteVoteWithSpaces
         *
         * @brief Accessor and modifier functions for the %CompleteVoteWithSpaces
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean CompleteVoteWithSpacesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CompleteVoteWithSpacesType, char > CompleteVoteWithSpacesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CompleteVoteWithSpacesType&
        getCompleteVoteWithSpaces () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CompleteVoteWithSpacesType&
        getCompleteVoteWithSpaces ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCompleteVoteWithSpaces (const CompleteVoteWithSpacesType& x);

        //@}

        /**
         * @name UseMaxSizeBlankVote
         *
         * @brief Accessor and modifier functions for the %UseMaxSizeBlankVote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean UseMaxSizeBlankVoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseMaxSizeBlankVoteType, char > UseMaxSizeBlankVoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseMaxSizeBlankVoteType&
        getUseMaxSizeBlankVote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseMaxSizeBlankVoteType&
        getUseMaxSizeBlankVote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseMaxSizeBlankVote (const UseMaxSizeBlankVoteType& x);

        //@}

        /**
         * @name ShowBallotLines
         *
         * @brief Accessor and modifier functions for the %ShowBallotLines
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean ShowBallotLinesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBallotLinesType, char > ShowBallotLinesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBallotLinesType&
        getShowBallotLines () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBallotLinesType&
        getShowBallotLines ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBallotLines (const ShowBallotLinesType& x);

        //@}

        /**
         * @name LayoutContestConfiguration
         *
         * @brief Accessor and modifier functions for the %LayoutContestConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LayoutContestConfiguration LayoutContestConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LayoutContestConfigurationType, char > LayoutContestConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LayoutContestConfigurationType&
        getLayoutContestConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LayoutContestConfigurationType&
        getLayoutContestConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLayoutContestConfiguration (const LayoutContestConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLayoutContestConfiguration (::std::auto_ptr< LayoutContestConfigurationType > p);

        //@}

        /**
         * @name TextContestName1
         *
         * @brief Accessor and modifier functions for the %TextContestName1
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContestName1Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContestName1Type, char > TextContestName1Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContestName1Type&
        getTextContestName1 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContestName1Type&
        getTextContestName1 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContestName1 (const TextContestName1Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContestName1 (::std::auto_ptr< TextContestName1Type > p);

        //@}

        /**
         * @name TextContestName2
         *
         * @brief Accessor and modifier functions for the %TextContestName2
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContestName2Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContestName2Type, char > TextContestName2Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContestName2Type&
        getTextContestName2 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContestName2Type&
        getTextContestName2 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContestName2 (const TextContestName2Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContestName2 (::std::auto_ptr< TextContestName2Type > p);

        //@}

        /**
         * @name TextContestName3
         *
         * @brief Accessor and modifier functions for the %TextContestName3
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContestName3Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContestName3Type, char > TextContestName3Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContestName3Type&
        getTextContestName3 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContestName3Type&
        getTextContestName3 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContestName3 (const TextContestName3Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContestName3 (::std::auto_ptr< TextContestName3Type > p);

        //@}

        /**
         * @name IsTextContestName1CustomAttribute
         *
         * @brief Accessor and modifier functions for the %IsTextContestName1CustomAttribute
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean IsTextContestName1CustomAttributeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IsTextContestName1CustomAttributeType, char > IsTextContestName1CustomAttributeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IsTextContestName1CustomAttributeType&
        getIsTextContestName1CustomAttribute () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IsTextContestName1CustomAttributeType&
        getIsTextContestName1CustomAttribute ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIsTextContestName1CustomAttribute (const IsTextContestName1CustomAttributeType& x);

        //@}

        /**
         * @name IsTextContestName2CustomAttribute
         *
         * @brief Accessor and modifier functions for the %IsTextContestName2CustomAttribute
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean IsTextContestName2CustomAttributeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IsTextContestName2CustomAttributeType, char > IsTextContestName2CustomAttributeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IsTextContestName2CustomAttributeType&
        getIsTextContestName2CustomAttribute () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IsTextContestName2CustomAttributeType&
        getIsTextContestName2CustomAttribute ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIsTextContestName2CustomAttribute (const IsTextContestName2CustomAttributeType& x);

        //@}

        /**
         * @name IsTextContestName3CustomAttribute
         *
         * @brief Accessor and modifier functions for the %IsTextContestName3CustomAttribute
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean IsTextContestName3CustomAttributeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IsTextContestName3CustomAttributeType, char > IsTextContestName3CustomAttributeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IsTextContestName3CustomAttributeType&
        getIsTextContestName3CustomAttribute () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IsTextContestName3CustomAttributeType&
        getIsTextContestName3CustomAttribute ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIsTextContestName3CustomAttribute (const IsTextContestName3CustomAttributeType& x);

        //@}

        /**
         * @name TextParentOptionSelected
         *
         * @brief Accessor and modifier functions for the %TextParentOptionSelected
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextParentOptionSelectedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextParentOptionSelectedType, char > TextParentOptionSelectedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextParentOptionSelectedType&
        getTextParentOptionSelected () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextParentOptionSelectedType&
        getTextParentOptionSelected ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextParentOptionSelected (const TextParentOptionSelectedType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextParentOptionSelected (::std::auto_ptr< TextParentOptionSelectedType > p);

        //@}

        /**
         * @name TextPrincipalsMessage
         *
         * @brief Accessor and modifier functions for the %TextPrincipalsMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextPrincipalsMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextPrincipalsMessageType, char > TextPrincipalsMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextPrincipalsMessageType&
        getTextPrincipalsMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextPrincipalsMessageType&
        getTextPrincipalsMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextPrincipalsMessage (const TextPrincipalsMessageType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextPrincipalsMessage (::std::auto_ptr< TextPrincipalsMessageType > p);

        //@}

        /**
         * @name TextStandInMessage
         *
         * @brief Accessor and modifier functions for the %TextStandInMessage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextStandInMessageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextStandInMessageType, char > TextStandInMessageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextStandInMessageType&
        getTextStandInMessage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextStandInMessageType&
        getTextStandInMessage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextStandInMessage (const TextStandInMessageType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextStandInMessage (::std::auto_ptr< TextStandInMessageType > p);

        //@}

        /**
         * @name LayoutBallotOptiontType
         *
         * @brief Accessor and modifier functions for the %LayoutBallotOptiontType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LayoutBallotOptiontType LayoutBallotOptiontTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LayoutBallotOptiontTypeType, char > LayoutBallotOptiontTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LayoutBallotOptiontTypeType&
        getLayoutBallotOptiontType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LayoutBallotOptiontTypeType&
        getLayoutBallotOptiontType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLayoutBallotOptiontType (const LayoutBallotOptiontTypeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLayoutBallotOptiontType (::std::auto_ptr< LayoutBallotOptiontTypeType > p);

        //@}

        /**
         * @name LayoutSuperBlankType
         *
         * @brief Accessor and modifier functions for the %LayoutSuperBlankType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LayoutSuperBlankType LayoutSuperBlankTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LayoutSuperBlankTypeType, char > LayoutSuperBlankTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LayoutSuperBlankTypeType&
        getLayoutSuperBlankType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LayoutSuperBlankTypeType&
        getLayoutSuperBlankType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLayoutSuperBlankType (const LayoutSuperBlankTypeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLayoutSuperBlankType (::std::auto_ptr< LayoutSuperBlankTypeType > p);

        //@}

        /**
         * @name VoteEncodeMode
         *
         * @brief Accessor and modifier functions for the %VoteEncodeMode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteEncodeModeType VoteEncodeModeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteEncodeModeType, char > VoteEncodeModeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteEncodeModeType&
        getVoteEncodeMode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteEncodeModeType&
        getVoteEncodeMode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteEncodeMode (const VoteEncodeModeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteEncodeMode (::std::auto_ptr< VoteEncodeModeType > p);

        //@}

        /**
         * @name VoteChecksum
         *
         * @brief Accessor and modifier functions for the %VoteChecksum
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteChecksumType VoteChecksumType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteChecksumType, char > VoteChecksumTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteChecksumType&
        getVoteChecksum () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteChecksumType&
        getVoteChecksum ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteChecksum (const VoteChecksumType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteChecksum (::std::auto_ptr< VoteChecksumType > p);

        //@}

        /**
         * @name QRCodeVoteList
         *
         * @brief Accessor and modifier functions for the %QRCodeVoteList
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRCodeVoteList QRCodeVoteListType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRCodeVoteListType, char > QRCodeVoteListTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QRCodeVoteListType&
        getQRCodeVoteList () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QRCodeVoteListType&
        getQRCodeVoteList ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQRCodeVoteList (const QRCodeVoteListType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQRCodeVoteList (::std::auto_ptr< QRCodeVoteListType > p);

        //@}

        /**
         * @name VoteQRCodeMode
         *
         * @brief Accessor and modifier functions for the %VoteQRCodeMode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteQRCodeModeEnum VoteQRCodeModeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteQRCodeModeType, char > VoteQRCodeModeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteQRCodeModeType&
        getVoteQRCodeMode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteQRCodeModeType&
        getVoteQRCodeMode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteQRCodeMode (const VoteQRCodeModeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteQRCodeMode (::std::auto_ptr< VoteQRCodeModeType > p);

        //@}

        /**
         * @name UseBackgroundImageForQR
         *
         * @brief Accessor and modifier functions for the %UseBackgroundImageForQR
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean UseBackgroundImageForQRType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseBackgroundImageForQRType, char > UseBackgroundImageForQRTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseBackgroundImageForQRType&
        getUseBackgroundImageForQR () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseBackgroundImageForQRType&
        getUseBackgroundImageForQR ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseBackgroundImageForQR (const UseBackgroundImageForQRType& x);

        //@}

        /**
         * @name PositionImageInBackgroundQR
         *
         * @brief Accessor and modifier functions for the %PositionImageInBackgroundQR
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::PositionImage PositionImageInBackgroundQRType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PositionImageInBackgroundQRType, char > PositionImageInBackgroundQRTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PositionImageInBackgroundQRType&
        getPositionImageInBackgroundQR () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PositionImageInBackgroundQRType&
        getPositionImageInBackgroundQR ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPositionImageInBackgroundQR (const PositionImageInBackgroundQRType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setPositionImageInBackgroundQR (::std::auto_ptr< PositionImageInBackgroundQRType > p);

        //@}

        /**
         * @name VoteCodeConfig
         *
         * @brief Accessor and modifier functions for the %VoteCodeConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteCodeConfig VoteCodeConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteCodeConfigType, char > VoteCodeConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteCodeConfigType&
        getVoteCodeConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteCodeConfigType&
        getVoteCodeConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteCodeConfig (const VoteCodeConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteCodeConfig (::std::auto_ptr< VoteCodeConfigType > p);

        //@}

        /**
         * @name AddBlankSpaceFullContest
         *
         * @brief Accessor and modifier functions for the %AddBlankSpaceFullContest
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger AddBlankSpaceFullContestType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddBlankSpaceFullContestType, char > AddBlankSpaceFullContestTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AddBlankSpaceFullContestType&
        getAddBlankSpaceFullContest () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AddBlankSpaceFullContestType&
        getAddBlankSpaceFullContest ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAddBlankSpaceFullContest (const AddBlankSpaceFullContestType& x);

        //@}

        /**
         * @name MultiLanguageConfiguration
         *
         * @brief Accessor and modifier functions for the %MultiLanguageConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::MultiLanguageConfiguration MultiLanguageConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MultiLanguageConfigurationType, char > MultiLanguageConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MultiLanguageConfigurationType&
        getMultiLanguageConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MultiLanguageConfigurationType&
        getMultiLanguageConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMultiLanguageConfiguration (const MultiLanguageConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setMultiLanguageConfiguration (::std::auto_ptr< MultiLanguageConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationVote ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationVote (const PaddingCharType&,
                           const PrintToPdfType&,
                           const QRcodePositionType&,
                           const QRCodePrintingModeType&,
                           const LevelPaddingSpaceCharSizeType&,
                           const MaxBallotOptionLastNameCharsType&,
                           const MaxBallotOptionNameCharsType&,
                           const MaxBallotOptionCodeCharsType&,
                           const BallotOptionNameSeparatorType&,
                           const DirectPrintingType&,
                           const TextHeader1Type&,
                           const TextHeader2Type&,
                           const TextHeader3Type&,
                           const TextHeader4Type&,
                           const TextHeader5Type&,
                           const TextHeader6Type&,
                           const TextHeader7Type&,
                           const TextHeaderCustomAttributesType&,
                           const TextBallotNameType&,
                           const TextRegionNameType&,
                           const TextGenericType&,
                           const TextBlankVoteType&,
                           const CompleteVoteWithSpacesType&,
                           const UseMaxSizeBlankVoteType&,
                           const ShowBallotLinesType&,
                           const LayoutContestConfigurationType&,
                           const TextContestName1Type&,
                           const TextContestName2Type&,
                           const TextContestName3Type&,
                           const IsTextContestName1CustomAttributeType&,
                           const IsTextContestName2CustomAttributeType&,
                           const IsTextContestName3CustomAttributeType&,
                           const TextParentOptionSelectedType&,
                           const TextPrincipalsMessageType&,
                           const TextStandInMessageType&,
                           const LayoutBallotOptiontTypeType&,
                           const LayoutSuperBlankTypeType&,
                           const VoteEncodeModeType&,
                           const VoteChecksumType&,
                           const QRCodeVoteListType&,
                           const VoteQRCodeModeType&,
                           const UseBackgroundImageForQRType&,
                           const PositionImageInBackgroundQRType&,
                           const VoteCodeConfigType&,
                           const AddBlankSpaceFullContestType&,
                           const MultiLanguageConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationVote (const PaddingCharType&,
                           const PrintToPdfType&,
                           const QRcodePositionType&,
                           const QRCodePrintingModeType&,
                           const LevelPaddingSpaceCharSizeType&,
                           const MaxBallotOptionLastNameCharsType&,
                           const MaxBallotOptionNameCharsType&,
                           const MaxBallotOptionCodeCharsType&,
                           const BallotOptionNameSeparatorType&,
                           const DirectPrintingType&,
                           ::std::auto_ptr< TextHeader1Type >&,
                           ::std::auto_ptr< TextHeader2Type >&,
                           ::std::auto_ptr< TextHeader3Type >&,
                           ::std::auto_ptr< TextHeader4Type >&,
                           ::std::auto_ptr< TextHeader5Type >&,
                           ::std::auto_ptr< TextHeader6Type >&,
                           ::std::auto_ptr< TextHeader7Type >&,
                           ::std::auto_ptr< TextHeaderCustomAttributesType >&,
                           ::std::auto_ptr< TextBallotNameType >&,
                           ::std::auto_ptr< TextRegionNameType >&,
                           ::std::auto_ptr< TextGenericType >&,
                           ::std::auto_ptr< TextBlankVoteType >&,
                           const CompleteVoteWithSpacesType&,
                           const UseMaxSizeBlankVoteType&,
                           const ShowBallotLinesType&,
                           ::std::auto_ptr< LayoutContestConfigurationType >&,
                           ::std::auto_ptr< TextContestName1Type >&,
                           ::std::auto_ptr< TextContestName2Type >&,
                           ::std::auto_ptr< TextContestName3Type >&,
                           const IsTextContestName1CustomAttributeType&,
                           const IsTextContestName2CustomAttributeType&,
                           const IsTextContestName3CustomAttributeType&,
                           ::std::auto_ptr< TextParentOptionSelectedType >&,
                           ::std::auto_ptr< TextPrincipalsMessageType >&,
                           ::std::auto_ptr< TextStandInMessageType >&,
                           const LayoutBallotOptiontTypeType&,
                           const LayoutSuperBlankTypeType&,
                           const VoteEncodeModeType&,
                           const VoteChecksumType&,
                           ::std::auto_ptr< QRCodeVoteListType >&,
                           const VoteQRCodeModeType&,
                           const UseBackgroundImageForQRType&,
                           const PositionImageInBackgroundQRType&,
                           ::std::auto_ptr< VoteCodeConfigType >&,
                           const AddBlankSpaceFullContestType&,
                           ::std::auto_ptr< MultiLanguageConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationVote (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationVote (const ConfigurationVote& x,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationVote*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationVote ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< PaddingCharType > PaddingChar_;
        ::xsd::cxx::tree::one< PrintToPdfType > PrintToPdf_;
        ::xsd::cxx::tree::one< QRcodePositionType > QRcodePosition_;
        ::xsd::cxx::tree::one< QRCodePrintingModeType > QRCodePrintingMode_;
        ::xsd::cxx::tree::one< LevelPaddingSpaceCharSizeType > LevelPaddingSpaceCharSize_;
        ::xsd::cxx::tree::one< MaxBallotOptionLastNameCharsType > MaxBallotOptionLastNameChars_;
        ::xsd::cxx::tree::one< MaxBallotOptionNameCharsType > MaxBallotOptionNameChars_;
        ::xsd::cxx::tree::one< MaxBallotOptionCodeCharsType > MaxBallotOptionCodeChars_;
        ::xsd::cxx::tree::one< BallotOptionNameSeparatorType > BallotOptionNameSeparator_;
        ::xsd::cxx::tree::one< DirectPrintingType > DirectPrinting_;
        ::xsd::cxx::tree::one< TextHeader1Type > TextHeader1_;
        ::xsd::cxx::tree::one< TextHeader2Type > TextHeader2_;
        ::xsd::cxx::tree::one< TextHeader3Type > TextHeader3_;
        ::xsd::cxx::tree::one< TextHeader4Type > TextHeader4_;
        ::xsd::cxx::tree::one< TextHeader5Type > TextHeader5_;
        ::xsd::cxx::tree::one< TextHeader6Type > TextHeader6_;
        ::xsd::cxx::tree::one< TextHeader7Type > TextHeader7_;
        ::xsd::cxx::tree::one< TextHeaderCustomAttributesType > TextHeaderCustomAttributes_;
        ::xsd::cxx::tree::one< TextBallotNameType > TextBallotName_;
        ::xsd::cxx::tree::one< TextRegionNameType > TextRegionName_;
        ::xsd::cxx::tree::one< TextGenericType > TextGeneric_;
        ::xsd::cxx::tree::one< TextBlankVoteType > TextBlankVote_;
        ::xsd::cxx::tree::one< CompleteVoteWithSpacesType > CompleteVoteWithSpaces_;
        ::xsd::cxx::tree::one< UseMaxSizeBlankVoteType > UseMaxSizeBlankVote_;
        ::xsd::cxx::tree::one< ShowBallotLinesType > ShowBallotLines_;
        ::xsd::cxx::tree::one< LayoutContestConfigurationType > LayoutContestConfiguration_;
        ::xsd::cxx::tree::one< TextContestName1Type > TextContestName1_;
        ::xsd::cxx::tree::one< TextContestName2Type > TextContestName2_;
        ::xsd::cxx::tree::one< TextContestName3Type > TextContestName3_;
        ::xsd::cxx::tree::one< IsTextContestName1CustomAttributeType > IsTextContestName1CustomAttribute_;
        ::xsd::cxx::tree::one< IsTextContestName2CustomAttributeType > IsTextContestName2CustomAttribute_;
        ::xsd::cxx::tree::one< IsTextContestName3CustomAttributeType > IsTextContestName3CustomAttribute_;
        ::xsd::cxx::tree::one< TextParentOptionSelectedType > TextParentOptionSelected_;
        ::xsd::cxx::tree::one< TextPrincipalsMessageType > TextPrincipalsMessage_;
        ::xsd::cxx::tree::one< TextStandInMessageType > TextStandInMessage_;
        ::xsd::cxx::tree::one< LayoutBallotOptiontTypeType > LayoutBallotOptiontType_;
        ::xsd::cxx::tree::one< LayoutSuperBlankTypeType > LayoutSuperBlankType_;
        ::xsd::cxx::tree::one< VoteEncodeModeType > VoteEncodeMode_;
        ::xsd::cxx::tree::one< VoteChecksumType > VoteChecksum_;
        ::xsd::cxx::tree::one< QRCodeVoteListType > QRCodeVoteList_;
        ::xsd::cxx::tree::one< VoteQRCodeModeType > VoteQRCodeMode_;
        ::xsd::cxx::tree::one< UseBackgroundImageForQRType > UseBackgroundImageForQR_;
        ::xsd::cxx::tree::one< PositionImageInBackgroundQRType > PositionImageInBackgroundQR_;
        ::xsd::cxx::tree::one< VoteCodeConfigType > VoteCodeConfig_;
        ::xsd::cxx::tree::one< AddBlankSpaceFullContestType > AddBlankSpaceFullContest_;
        ::xsd::cxx::tree::one< MultiLanguageConfigurationType > MultiLanguageConfiguration_;

        //@endcond
      };

      bool
      operator== (const ConfigurationVote&, const ConfigurationVote&);

      bool
      operator!= (const ConfigurationVote&, const ConfigurationVote&);


      /**
       * @brief Enumeration class corresponding to the %VoteQRCodeModeEnum
       * schema type.
       */
      class VoteQRCodeModeEnum: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_XMLFULL,
          CONFIGURATION_XMLREDUCED,
          CONFIGURATION_SIZEOPTIMIZED
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        VoteQRCodeModeEnum ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        VoteQRCodeModeEnum (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        VoteQRCodeModeEnum (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        VoteQRCodeModeEnum (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        VoteQRCodeModeEnum (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteQRCodeModeEnum (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteQRCodeModeEnum (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteQRCodeModeEnum (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteQRCodeModeEnum (const VoteQRCodeModeEnum& x,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteQRCodeModeEnum*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        VoteQRCodeModeEnum&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_VoteQRCodeModeEnum_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_VoteQRCodeModeEnum_convert () const;

        public:
        static const char* const _xsd_VoteQRCodeModeEnum_literals_[3];
        static const Value _xsd_VoteQRCodeModeEnum_indexes_[3];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %VoteCodeConfig schema type.
       *
       * @nosubgrouping
       */
      class VoteCodeConfig: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name UseShortVoteCode
         *
         * @brief Accessor and modifier functions for the %UseShortVoteCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean UseShortVoteCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UseShortVoteCodeType, char > UseShortVoteCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UseShortVoteCodeType&
        getUseShortVoteCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UseShortVoteCodeType&
        getUseShortVoteCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUseShortVoteCode (const UseShortVoteCodeType& x);

        //@}

        /**
         * @name CountGroupVoteCode
         *
         * @brief Accessor and modifier functions for the %CountGroupVoteCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger CountGroupVoteCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CountGroupVoteCodeType, char > CountGroupVoteCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CountGroupVoteCodeType&
        getCountGroupVoteCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CountGroupVoteCodeType&
        getCountGroupVoteCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCountGroupVoteCode (const CountGroupVoteCodeType& x);

        //@}

        /**
         * @name CharSeparatorVoteCode
         *
         * @brief Accessor and modifier functions for the %CharSeparatorVoteCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String CharSeparatorVoteCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CharSeparatorVoteCodeType, char > CharSeparatorVoteCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CharSeparatorVoteCodeType&
        getCharSeparatorVoteCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CharSeparatorVoteCodeType&
        getCharSeparatorVoteCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCharSeparatorVoteCode (const CharSeparatorVoteCodeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCharSeparatorVoteCode (::std::auto_ptr< CharSeparatorVoteCodeType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VoteCodeConfig ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VoteCodeConfig (const UseShortVoteCodeType&,
                        const CountGroupVoteCodeType&,
                        const CharSeparatorVoteCodeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteCodeConfig (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteCodeConfig (const VoteCodeConfig& x,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteCodeConfig*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VoteCodeConfig ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< UseShortVoteCodeType > UseShortVoteCode_;
        ::xsd::cxx::tree::one< CountGroupVoteCodeType > CountGroupVoteCode_;
        ::xsd::cxx::tree::one< CharSeparatorVoteCodeType > CharSeparatorVoteCode_;

        //@endcond
      };

      bool
      operator== (const VoteCodeConfig&, const VoteCodeConfig&);

      bool
      operator!= (const VoteCodeConfig&, const VoteCodeConfig&);


      /**
       * @brief Class corresponding to the %MultiLanguageConfiguration schema type.
       *
       * @nosubgrouping
       */
      class MultiLanguageConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name Enable
         *
         * @brief Accessor and modifier functions for the %Enable
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean EnableType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnableType, char > EnableTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnableType&
        getEnable () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnableType&
        getEnable ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnable (const EnableType& x);

        //@}

        /**
         * @name Separator
         *
         * @brief Accessor and modifier functions for the %Separator
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String SeparatorType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SeparatorType, char > SeparatorTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SeparatorType&
        getSeparator () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SeparatorType&
        getSeparator ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSeparator (const SeparatorType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSeparator (::std::auto_ptr< SeparatorType > p);

        //@}

        /**
         * @name MaxCharsByLanguage
         *
         * @brief Accessor and modifier functions for the %MaxCharsByLanguage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger MaxCharsByLanguageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxCharsByLanguageType, char > MaxCharsByLanguageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxCharsByLanguageType&
        getMaxCharsByLanguage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxCharsByLanguageType&
        getMaxCharsByLanguage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxCharsByLanguage (const MaxCharsByLanguageType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        MultiLanguageConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MultiLanguageConfiguration (const EnableType&,
                                    const SeparatorType&,
                                    const MaxCharsByLanguageType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MultiLanguageConfiguration (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        MultiLanguageConfiguration (const MultiLanguageConfiguration& x,
                                    ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MultiLanguageConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~MultiLanguageConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EnableType > Enable_;
        ::xsd::cxx::tree::one< SeparatorType > Separator_;
        ::xsd::cxx::tree::one< MaxCharsByLanguageType > MaxCharsByLanguage_;

        //@endcond
      };

      bool
      operator== (const MultiLanguageConfiguration&, const MultiLanguageConfiguration&);

      bool
      operator!= (const MultiLanguageConfiguration&, const MultiLanguageConfiguration&);


      /**
       * @brief Class corresponding to the %QRCodeVoteList schema type.
       *
       * @nosubgrouping
       */
      class QRCodeVoteList: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name QRCodeVoteConfig
         *
         * @brief Accessor and modifier functions for the %QRCodeVoteConfig
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRCodeVoteConfig QRCodeVoteConfigType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< QRCodeVoteConfigType > QRCodeVoteConfigSequence;

        /**
         * @brief Element iterator type.
         */
        typedef QRCodeVoteConfigSequence::iterator QRCodeVoteConfigIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef QRCodeVoteConfigSequence::const_iterator QRCodeVoteConfigConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRCodeVoteConfigType, char > QRCodeVoteConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const QRCodeVoteConfigSequence&
        getQRCodeVoteConfig () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        QRCodeVoteConfigSequence&
        getQRCodeVoteConfig ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setQRCodeVoteConfig (const QRCodeVoteConfigSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        QRCodeVoteList ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRCodeVoteList (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        QRCodeVoteList (const QRCodeVoteList& x,
                        ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                        ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual QRCodeVoteList*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~QRCodeVoteList ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        QRCodeVoteConfigSequence QRCodeVoteConfig_;

        //@endcond
      };

      bool
      operator== (const QRCodeVoteList&, const QRCodeVoteList&);

      bool
      operator!= (const QRCodeVoteList&, const QRCodeVoteList&);


      /**
       * @brief Class corresponding to the %QRCodeVoteConfig schema type.
       *
       * @nosubgrouping
       */
      class QRCodeVoteConfig: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name MaxSize
         *
         * @brief Accessor and modifier functions for the %MaxSize
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer MaxSizeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxSizeType, char > MaxSizeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MaxSizeType&
        getMaxSize () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MaxSizeType&
        getMaxSize ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMaxSize (const MaxSizeType& x);

        //@}

        /**
         * @name QRCodeConfig
         *
         * @brief Accessor and modifier functions for the %QRCodeConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRCodeConfig QRCodeConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRCodeConfigType, char > QRCodeConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QRCodeConfigType&
        getQRCodeConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QRCodeConfigType&
        getQRCodeConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQRCodeConfig (const QRCodeConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQRCodeConfig (::std::auto_ptr< QRCodeConfigType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        QRCodeVoteConfig ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        QRCodeVoteConfig (const MaxSizeType&,
                          const QRCodeConfigType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        QRCodeVoteConfig (const MaxSizeType&,
                          ::std::auto_ptr< QRCodeConfigType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRCodeVoteConfig (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        QRCodeVoteConfig (const QRCodeVoteConfig& x,
                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual QRCodeVoteConfig*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~QRCodeVoteConfig ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< MaxSizeType > MaxSize_;
        ::xsd::cxx::tree::one< QRCodeConfigType > QRCodeConfig_;

        //@endcond
      };

      bool
      operator== (const QRCodeVoteConfig&, const QRCodeVoteConfig&);

      bool
      operator!= (const QRCodeVoteConfig&, const QRCodeVoteConfig&);


      /**
       * @brief Class corresponding to the %QRCodeConfig schema type.
       *
       * @nosubgrouping
       */
      class QRCodeConfig: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name SizeQRCode
         *
         * @brief Accessor and modifier functions for the %SizeQRCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer SizeQRCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SizeQRCodeType, char > SizeQRCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SizeQRCodeType&
        getSizeQRCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SizeQRCodeType&
        getSizeQRCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSizeQRCode (const SizeQRCodeType& x);

        //@}

        /**
         * @name MarginQRCode
         *
         * @brief Accessor and modifier functions for the %MarginQRCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::UnsignedShort MarginQRCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< MarginQRCodeType, char > MarginQRCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const MarginQRCodeType&
        getMarginQRCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        MarginQRCodeType&
        getMarginQRCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setMarginQRCode (const MarginQRCodeType& x);

        //@}

        /**
         * @name CorrectionModeQRCode
         *
         * @brief Accessor and modifier functions for the %CorrectionModeQRCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CorrectionModeQRCode CorrectionModeQRCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CorrectionModeQRCodeType, char > CorrectionModeQRCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CorrectionModeQRCodeType&
        getCorrectionModeQRCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CorrectionModeQRCodeType&
        getCorrectionModeQRCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCorrectionModeQRCode (const CorrectionModeQRCodeType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCorrectionModeQRCode (::std::auto_ptr< CorrectionModeQRCodeType > p);

        //@}

        /**
         * @name VersionQRCode
         *
         * @brief Accessor and modifier functions for the %VersionQRCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::UnsignedShort VersionQRCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VersionQRCodeType, char > VersionQRCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VersionQRCodeType&
        getVersionQRCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VersionQRCodeType&
        getVersionQRCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVersionQRCode (const VersionQRCodeType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        QRCodeConfig ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        QRCodeConfig (const SizeQRCodeType&,
                      const MarginQRCodeType&,
                      const CorrectionModeQRCodeType&,
                      const VersionQRCodeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        QRCodeConfig (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        QRCodeConfig (const QRCodeConfig& x,
                      ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                      ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual QRCodeConfig*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~QRCodeConfig ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SizeQRCodeType > SizeQRCode_;
        ::xsd::cxx::tree::one< MarginQRCodeType > MarginQRCode_;
        ::xsd::cxx::tree::one< CorrectionModeQRCodeType > CorrectionModeQRCode_;
        ::xsd::cxx::tree::one< VersionQRCodeType > VersionQRCode_;

        //@endcond
      };

      bool
      operator== (const QRCodeConfig&, const QRCodeConfig&);

      bool
      operator!= (const QRCodeConfig&, const QRCodeConfig&);


      /**
       * @brief Class corresponding to the %ConfigurationSmartcardRemoved schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationSmartcardRemoved: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TextTitle
         *
         * @brief Accessor and modifier functions for the %TextTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextTitleType, char > TextTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextTitleType&
        getTextTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextTitleType&
        getTextTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextTitle (const TextTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextTitle (::std::auto_ptr< TextTitleType > p);

        //@}

        /**
         * @name TextElectionName
         *
         * @brief Accessor and modifier functions for the %TextElectionName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextElectionNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextElectionNameType, char > TextElectionNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextElectionNameType&
        getTextElectionName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextElectionNameType&
        getTextElectionName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextElectionName (const TextElectionNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextElectionName (::std::auto_ptr< TextElectionNameType > p);

        //@}

        /**
         * @name TextVotingBooth
         *
         * @brief Accessor and modifier functions for the %TextVotingBooth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextVotingBoothType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextVotingBoothType, char > TextVotingBoothTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextVotingBoothType&
        getTextVotingBooth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextVotingBoothType&
        getTextVotingBooth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextVotingBooth (const TextVotingBoothType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextVotingBooth (::std::auto_ptr< TextVotingBoothType > p);

        //@}

        /**
         * @name TextVoteID
         *
         * @brief Accessor and modifier functions for the %TextVoteID
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextVoteIDType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextVoteIDType, char > TextVoteIDTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextVoteIDType&
        getTextVoteID () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextVoteIDType&
        getTextVoteID ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextVoteID (const TextVoteIDType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextVoteID (::std::auto_ptr< TextVoteIDType > p);

        //@}

        /**
         * @name TextDescription
         *
         * @brief Accessor and modifier functions for the %TextDescription
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextDescriptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextDescriptionType, char > TextDescriptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextDescriptionType&
        getTextDescription () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextDescriptionType&
        getTextDescription ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextDescription (const TextDescriptionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextDescription (::std::auto_ptr< TextDescriptionType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationSmartcardRemoved ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationSmartcardRemoved (const TextTitleType&,
                                       const TextElectionNameType&,
                                       const TextVotingBoothType&,
                                       const TextVoteIDType&,
                                       const TextDescriptionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationSmartcardRemoved (::std::auto_ptr< TextTitleType >&,
                                       ::std::auto_ptr< TextElectionNameType >&,
                                       ::std::auto_ptr< TextVotingBoothType >&,
                                       ::std::auto_ptr< TextVoteIDType >&,
                                       ::std::auto_ptr< TextDescriptionType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationSmartcardRemoved (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationSmartcardRemoved (const ConfigurationSmartcardRemoved& x,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationSmartcardRemoved*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationSmartcardRemoved ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TextTitleType > TextTitle_;
        ::xsd::cxx::tree::one< TextElectionNameType > TextElectionName_;
        ::xsd::cxx::tree::one< TextVotingBoothType > TextVotingBooth_;
        ::xsd::cxx::tree::one< TextVoteIDType > TextVoteID_;
        ::xsd::cxx::tree::one< TextDescriptionType > TextDescription_;

        //@endcond
      };

      bool
      operator== (const ConfigurationSmartcardRemoved&, const ConfigurationSmartcardRemoved&);

      bool
      operator!= (const ConfigurationSmartcardRemoved&, const ConfigurationSmartcardRemoved&);


      /**
       * @brief Class corresponding to the %ConfigurationTimeout schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationTimeout: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TextTitle
         *
         * @brief Accessor and modifier functions for the %TextTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextTitleType, char > TextTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextTitleType&
        getTextTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextTitleType&
        getTextTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextTitle (const TextTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextTitle (::std::auto_ptr< TextTitleType > p);

        //@}

        /**
         * @name TextElectionName
         *
         * @brief Accessor and modifier functions for the %TextElectionName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextElectionNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextElectionNameType, char > TextElectionNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextElectionNameType&
        getTextElectionName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextElectionNameType&
        getTextElectionName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextElectionName (const TextElectionNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextElectionName (::std::auto_ptr< TextElectionNameType > p);

        //@}

        /**
         * @name TextVotingBooth
         *
         * @brief Accessor and modifier functions for the %TextVotingBooth
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextVotingBoothType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextVotingBoothType, char > TextVotingBoothTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextVotingBoothType&
        getTextVotingBooth () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextVotingBoothType&
        getTextVotingBooth ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextVotingBooth (const TextVotingBoothType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextVotingBooth (::std::auto_ptr< TextVotingBoothType > p);

        //@}

        /**
         * @name TextVoteID
         *
         * @brief Accessor and modifier functions for the %TextVoteID
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextVoteIDType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextVoteIDType, char > TextVoteIDTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextVoteIDType&
        getTextVoteID () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextVoteIDType&
        getTextVoteID ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextVoteID (const TextVoteIDType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextVoteID (::std::auto_ptr< TextVoteIDType > p);

        //@}

        /**
         * @name TextDescription
         *
         * @brief Accessor and modifier functions for the %TextDescription
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextDescriptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextDescriptionType, char > TextDescriptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextDescriptionType&
        getTextDescription () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextDescriptionType&
        getTextDescription ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextDescription (const TextDescriptionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextDescription (::std::auto_ptr< TextDescriptionType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationTimeout ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationTimeout (const TextTitleType&,
                              const TextElectionNameType&,
                              const TextVotingBoothType&,
                              const TextVoteIDType&,
                              const TextDescriptionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationTimeout (::std::auto_ptr< TextTitleType >&,
                              ::std::auto_ptr< TextElectionNameType >&,
                              ::std::auto_ptr< TextVotingBoothType >&,
                              ::std::auto_ptr< TextVoteIDType >&,
                              ::std::auto_ptr< TextDescriptionType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationTimeout (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationTimeout (const ConfigurationTimeout& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationTimeout*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationTimeout ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TextTitleType > TextTitle_;
        ::xsd::cxx::tree::one< TextElectionNameType > TextElectionName_;
        ::xsd::cxx::tree::one< TextVotingBoothType > TextVotingBooth_;
        ::xsd::cxx::tree::one< TextVoteIDType > TextVoteID_;
        ::xsd::cxx::tree::one< TextDescriptionType > TextDescription_;

        //@endcond
      };

      bool
      operator== (const ConfigurationTimeout&, const ConfigurationTimeout&);

      bool
      operator!= (const ConfigurationTimeout&, const ConfigurationTimeout&);


      /**
       * @brief Class corresponding to the %ConfigurationInstallation schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationInstallation: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TextInstallationTitleLevel1
         *
         * @brief Accessor and modifier functions for the %TextInstallationTitleLevel1
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextInstallationTitleLevel1Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextInstallationTitleLevel1Type, char > TextInstallationTitleLevel1Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextInstallationTitleLevel1Type&
        getTextInstallationTitleLevel1 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextInstallationTitleLevel1Type&
        getTextInstallationTitleLevel1 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextInstallationTitleLevel1 (const TextInstallationTitleLevel1Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextInstallationTitleLevel1 (::std::auto_ptr< TextInstallationTitleLevel1Type > p);

        //@}

        /**
         * @name TextInstallationTitleLevel2
         *
         * @brief Accessor and modifier functions for the %TextInstallationTitleLevel2
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextInstallationTitleLevel2Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextInstallationTitleLevel2Type, char > TextInstallationTitleLevel2Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextInstallationTitleLevel2Type&
        getTextInstallationTitleLevel2 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextInstallationTitleLevel2Type&
        getTextInstallationTitleLevel2 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextInstallationTitleLevel2 (const TextInstallationTitleLevel2Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextInstallationTitleLevel2 (::std::auto_ptr< TextInstallationTitleLevel2Type > p);

        //@}

        /**
         * @name TextInstallationTitleLevel3
         *
         * @brief Accessor and modifier functions for the %TextInstallationTitleLevel3
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextInstallationTitleLevel3Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextInstallationTitleLevel3Type, char > TextInstallationTitleLevel3Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextInstallationTitleLevel3Type&
        getTextInstallationTitleLevel3 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextInstallationTitleLevel3Type&
        getTextInstallationTitleLevel3 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextInstallationTitleLevel3 (const TextInstallationTitleLevel3Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextInstallationTitleLevel3 (::std::auto_ptr< TextInstallationTitleLevel3Type > p);

        //@}

        /**
         * @name TextInstallationInfo
         *
         * @brief Accessor and modifier functions for the %TextInstallationInfo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextInstallationInfoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextInstallationInfoType, char > TextInstallationInfoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextInstallationInfoType&
        getTextInstallationInfo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextInstallationInfoType&
        getTextInstallationInfo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextInstallationInfo (const TextInstallationInfoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextInstallationInfo (::std::auto_ptr< TextInstallationInfoType > p);

        //@}

        /**
         * @name ShowBarCode
         *
         * @brief Accessor and modifier functions for the %ShowBarCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean ShowBarCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ShowBarCodeType, char > ShowBarCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ShowBarCodeType&
        getShowBarCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ShowBarCodeType&
        getShowBarCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setShowBarCode (const ShowBarCodeType& x);

        //@}

        /**
         * @name QRCodeConfig
         *
         * @brief Accessor and modifier functions for the %QRCodeConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRCodeConfig QRCodeConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRCodeConfigType, char > QRCodeConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QRCodeConfigType&
        getQRCodeConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QRCodeConfigType&
        getQRCodeConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQRCodeConfig (const QRCodeConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQRCodeConfig (::std::auto_ptr< QRCodeConfigType > p);

        //@}

        /**
         * @name Base64QRCode
         *
         * @brief Accessor and modifier functions for the %Base64QRCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean Base64QRCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< Base64QRCodeType, char > Base64QRCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const Base64QRCodeType&
        getBase64QRCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        Base64QRCodeType&
        getBase64QRCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBase64QRCode (const Base64QRCodeType& x);

        //@}

        /**
         * @name QRcodePosition
         *
         * @brief Accessor and modifier functions for the %QRcodePosition
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRcodePosition QRcodePositionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< QRcodePositionType, char > QRcodePositionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const QRcodePositionType&
        getQRcodePosition () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        QRcodePositionType&
        getQRcodePosition ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setQRcodePosition (const QRcodePositionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setQRcodePosition (::std::auto_ptr< QRcodePositionType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationInstallation ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationInstallation (const TextInstallationTitleLevel1Type&,
                                   const TextInstallationTitleLevel2Type&,
                                   const TextInstallationTitleLevel3Type&,
                                   const TextInstallationInfoType&,
                                   const ShowBarCodeType&,
                                   const QRCodeConfigType&,
                                   const Base64QRCodeType&,
                                   const QRcodePositionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationInstallation (::std::auto_ptr< TextInstallationTitleLevel1Type >&,
                                   ::std::auto_ptr< TextInstallationTitleLevel2Type >&,
                                   ::std::auto_ptr< TextInstallationTitleLevel3Type >&,
                                   ::std::auto_ptr< TextInstallationInfoType >&,
                                   const ShowBarCodeType&,
                                   ::std::auto_ptr< QRCodeConfigType >&,
                                   const Base64QRCodeType&,
                                   const QRcodePositionType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationInstallation (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationInstallation (const ConfigurationInstallation& x,
                                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationInstallation*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationInstallation ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TextInstallationTitleLevel1Type > TextInstallationTitleLevel1_;
        ::xsd::cxx::tree::one< TextInstallationTitleLevel2Type > TextInstallationTitleLevel2_;
        ::xsd::cxx::tree::one< TextInstallationTitleLevel3Type > TextInstallationTitleLevel3_;
        ::xsd::cxx::tree::one< TextInstallationInfoType > TextInstallationInfo_;
        ::xsd::cxx::tree::one< ShowBarCodeType > ShowBarCode_;
        ::xsd::cxx::tree::one< QRCodeConfigType > QRCodeConfig_;
        ::xsd::cxx::tree::one< Base64QRCodeType > Base64QRCode_;
        ::xsd::cxx::tree::one< QRcodePositionType > QRcodePosition_;

        //@endcond
      };

      bool
      operator== (const ConfigurationInstallation&, const ConfigurationInstallation&);

      bool
      operator!= (const ConfigurationInstallation&, const ConfigurationInstallation&);


      /**
       * @brief Class corresponding to the %ConfigurationContingency schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationContingency: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TextContingencyTitleLevel1
         *
         * @brief Accessor and modifier functions for the %TextContingencyTitleLevel1
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContingencyTitleLevel1Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContingencyTitleLevel1Type, char > TextContingencyTitleLevel1Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContingencyTitleLevel1Type&
        getTextContingencyTitleLevel1 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContingencyTitleLevel1Type&
        getTextContingencyTitleLevel1 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContingencyTitleLevel1 (const TextContingencyTitleLevel1Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContingencyTitleLevel1 (::std::auto_ptr< TextContingencyTitleLevel1Type > p);

        //@}

        /**
         * @name TextContingencyTitleLevel2
         *
         * @brief Accessor and modifier functions for the %TextContingencyTitleLevel2
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContingencyTitleLevel2Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContingencyTitleLevel2Type, char > TextContingencyTitleLevel2Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContingencyTitleLevel2Type&
        getTextContingencyTitleLevel2 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContingencyTitleLevel2Type&
        getTextContingencyTitleLevel2 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContingencyTitleLevel2 (const TextContingencyTitleLevel2Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContingencyTitleLevel2 (::std::auto_ptr< TextContingencyTitleLevel2Type > p);

        //@}

        /**
         * @name TextContingencyTitleLevel3
         *
         * @brief Accessor and modifier functions for the %TextContingencyTitleLevel3
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContingencyTitleLevel3Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContingencyTitleLevel3Type, char > TextContingencyTitleLevel3Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContingencyTitleLevel3Type&
        getTextContingencyTitleLevel3 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContingencyTitleLevel3Type&
        getTextContingencyTitleLevel3 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContingencyTitleLevel3 (const TextContingencyTitleLevel3Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContingencyTitleLevel3 (::std::auto_ptr< TextContingencyTitleLevel3Type > p);

        //@}

        /**
         * @name TextContingencyInfo
         *
         * @brief Accessor and modifier functions for the %TextContingencyInfo
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextContingencyInfoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextContingencyInfoType, char > TextContingencyInfoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextContingencyInfoType&
        getTextContingencyInfo () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextContingencyInfoType&
        getTextContingencyInfo ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextContingencyInfo (const TextContingencyInfoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextContingencyInfo (::std::auto_ptr< TextContingencyInfoType > p);

        //@}

        /**
         * @name IncludeHelp
         *
         * @brief Accessor and modifier functions for the %IncludeHelp
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean IncludeHelpType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncludeHelpType, char > IncludeHelpTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncludeHelpType&
        getIncludeHelp () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncludeHelpType&
        getIncludeHelp ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncludeHelp (const IncludeHelpType& x);

        //@}

        /**
         * @name IncludeRegionSection
         *
         * @brief Accessor and modifier functions for the %IncludeRegionSection
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean IncludeRegionSectionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< IncludeRegionSectionType, char > IncludeRegionSectionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const IncludeRegionSectionType&
        getIncludeRegionSection () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        IncludeRegionSectionType&
        getIncludeRegionSection ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setIncludeRegionSection (const IncludeRegionSectionType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationContingency ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationContingency (const TextContingencyTitleLevel1Type&,
                                  const TextContingencyTitleLevel2Type&,
                                  const TextContingencyTitleLevel3Type&,
                                  const TextContingencyInfoType&,
                                  const IncludeHelpType&,
                                  const IncludeRegionSectionType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationContingency (::std::auto_ptr< TextContingencyTitleLevel1Type >&,
                                  ::std::auto_ptr< TextContingencyTitleLevel2Type >&,
                                  ::std::auto_ptr< TextContingencyTitleLevel3Type >&,
                                  ::std::auto_ptr< TextContingencyInfoType >&,
                                  const IncludeHelpType&,
                                  const IncludeRegionSectionType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationContingency (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationContingency (const ConfigurationContingency& x,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                  ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationContingency*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationContingency ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TextContingencyTitleLevel1Type > TextContingencyTitleLevel1_;
        ::xsd::cxx::tree::one< TextContingencyTitleLevel2Type > TextContingencyTitleLevel2_;
        ::xsd::cxx::tree::one< TextContingencyTitleLevel3Type > TextContingencyTitleLevel3_;
        ::xsd::cxx::tree::one< TextContingencyInfoType > TextContingencyInfo_;
        ::xsd::cxx::tree::one< IncludeHelpType > IncludeHelp_;
        ::xsd::cxx::tree::one< IncludeRegionSectionType > IncludeRegionSection_;

        //@endcond
      };

      bool
      operator== (const ConfigurationContingency&, const ConfigurationContingency&);

      bool
      operator!= (const ConfigurationContingency&, const ConfigurationContingency&);


      /**
       * @brief Enumeration class corresponding to the %DocumentColumnLayout
       * schema type.
       */
      class DocumentColumnLayout: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_SINGLECOLUMN,
          CONFIGURATION_DOUBLECOLUMN
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        DocumentColumnLayout ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        DocumentColumnLayout (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        DocumentColumnLayout (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        DocumentColumnLayout (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        DocumentColumnLayout (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DocumentColumnLayout (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DocumentColumnLayout (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        DocumentColumnLayout (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        DocumentColumnLayout (const DocumentColumnLayout& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual DocumentColumnLayout*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        DocumentColumnLayout&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_DocumentColumnLayout_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_DocumentColumnLayout_convert () const;

        public:
        static const char* const _xsd_DocumentColumnLayout_literals_[2];
        static const Value _xsd_DocumentColumnLayout_indexes_[2];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %LogPrintDocumentConfiguration schema type.
       *
       * @nosubgrouping
       */
      class LogPrintDocumentConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TextLogTitleLevel1
         *
         * @brief Accessor and modifier functions for the %TextLogTitleLevel1
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextLogTitleLevel1Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextLogTitleLevel1Type, char > TextLogTitleLevel1Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextLogTitleLevel1Type&
        getTextLogTitleLevel1 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextLogTitleLevel1Type&
        getTextLogTitleLevel1 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextLogTitleLevel1 (const TextLogTitleLevel1Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextLogTitleLevel1 (::std::auto_ptr< TextLogTitleLevel1Type > p);

        //@}

        /**
         * @name TextLogTitleLevel2
         *
         * @brief Accessor and modifier functions for the %TextLogTitleLevel2
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextLogTitleLevel2Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextLogTitleLevel2Type, char > TextLogTitleLevel2Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextLogTitleLevel2Type&
        getTextLogTitleLevel2 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextLogTitleLevel2Type&
        getTextLogTitleLevel2 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextLogTitleLevel2 (const TextLogTitleLevel2Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextLogTitleLevel2 (::std::auto_ptr< TextLogTitleLevel2Type > p);

        //@}

        /**
         * @name TextLogTitleLevel3
         *
         * @brief Accessor and modifier functions for the %TextLogTitleLevel3
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextLogTitleLevel3Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextLogTitleLevel3Type, char > TextLogTitleLevel3Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextLogTitleLevel3Type&
        getTextLogTitleLevel3 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextLogTitleLevel3Type&
        getTextLogTitleLevel3 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextLogTitleLevel3 (const TextLogTitleLevel3Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextLogTitleLevel3 (::std::auto_ptr< TextLogTitleLevel3Type > p);

        //@}

        /**
         * @name TextLogTitleLevel4
         *
         * @brief Accessor and modifier functions for the %TextLogTitleLevel4
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextLogTitleLevel4Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextLogTitleLevel4Type, char > TextLogTitleLevel4Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextLogTitleLevel4Type&
        getTextLogTitleLevel4 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextLogTitleLevel4Type&
        getTextLogTitleLevel4 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextLogTitleLevel4 (const TextLogTitleLevel4Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextLogTitleLevel4 (::std::auto_ptr< TextLogTitleLevel4Type > p);

        //@}

        /**
         * @name TextLogTitleLevel5
         *
         * @brief Accessor and modifier functions for the %TextLogTitleLevel5
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextLogTitleLevel5Type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextLogTitleLevel5Type, char > TextLogTitleLevel5Traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextLogTitleLevel5Type&
        getTextLogTitleLevel5 () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextLogTitleLevel5Type&
        getTextLogTitleLevel5 ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextLogTitleLevel5 (const TextLogTitleLevel5Type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextLogTitleLevel5 (::std::auto_ptr< TextLogTitleLevel5Type > p);

        //@}

        /**
         * @name TextLogEntry
         *
         * @brief Accessor and modifier functions for the %TextLogEntry
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TextConfiguration TextLogEntryType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TextLogEntryType, char > TextLogEntryTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TextLogEntryType&
        getTextLogEntry () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TextLogEntryType&
        getTextLogEntry ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTextLogEntry (const TextLogEntryType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTextLogEntry (::std::auto_ptr< TextLogEntryType > p);

        //@}

        /**
         * @name ColumnLayout
         *
         * @brief Accessor and modifier functions for the %ColumnLayout
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::DocumentColumnLayout ColumnLayoutType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ColumnLayoutType, char > ColumnLayoutTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ColumnLayoutType&
        getColumnLayout () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ColumnLayoutType&
        getColumnLayout ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setColumnLayout (const ColumnLayoutType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setColumnLayout (::std::auto_ptr< ColumnLayoutType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        LogPrintDocumentConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        LogPrintDocumentConfiguration (const TextLogTitleLevel1Type&,
                                       const TextLogTitleLevel2Type&,
                                       const TextLogTitleLevel3Type&,
                                       const TextLogTitleLevel4Type&,
                                       const TextLogTitleLevel5Type&,
                                       const TextLogEntryType&,
                                       const ColumnLayoutType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        LogPrintDocumentConfiguration (::std::auto_ptr< TextLogTitleLevel1Type >&,
                                       ::std::auto_ptr< TextLogTitleLevel2Type >&,
                                       ::std::auto_ptr< TextLogTitleLevel3Type >&,
                                       ::std::auto_ptr< TextLogTitleLevel4Type >&,
                                       ::std::auto_ptr< TextLogTitleLevel5Type >&,
                                       ::std::auto_ptr< TextLogEntryType >&,
                                       const ColumnLayoutType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        LogPrintDocumentConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        LogPrintDocumentConfiguration (const LogPrintDocumentConfiguration& x,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual LogPrintDocumentConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~LogPrintDocumentConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TextLogTitleLevel1Type > TextLogTitleLevel1_;
        ::xsd::cxx::tree::one< TextLogTitleLevel2Type > TextLogTitleLevel2_;
        ::xsd::cxx::tree::one< TextLogTitleLevel3Type > TextLogTitleLevel3_;
        ::xsd::cxx::tree::one< TextLogTitleLevel4Type > TextLogTitleLevel4_;
        ::xsd::cxx::tree::one< TextLogTitleLevel5Type > TextLogTitleLevel5_;
        ::xsd::cxx::tree::one< TextLogEntryType > TextLogEntry_;
        ::xsd::cxx::tree::one< ColumnLayoutType > ColumnLayout_;

        //@endcond
      };

      bool
      operator== (const LogPrintDocumentConfiguration&, const LogPrintDocumentConfiguration&);

      bool
      operator!= (const LogPrintDocumentConfiguration&, const LogPrintDocumentConfiguration&);


      /**
       * @brief Class corresponding to the %ConfigurationPrinter schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationPrinter: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ConfigurationVote
         *
         * @brief Accessor and modifier functions for the %ConfigurationVote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationVote ConfigurationVoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationVoteType, char > ConfigurationVoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationVoteType&
        getConfigurationVote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationVoteType&
        getConfigurationVote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationVote (const ConfigurationVoteType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationVote (::std::auto_ptr< ConfigurationVoteType > p);

        //@}

        /**
         * @name ConfigurationTimeout
         *
         * @brief Accessor and modifier functions for the %ConfigurationTimeout
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationTimeout ConfigurationTimeoutType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationTimeoutType, char > ConfigurationTimeoutTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationTimeoutType&
        getConfigurationTimeout () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationTimeoutType&
        getConfigurationTimeout ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationTimeout (const ConfigurationTimeoutType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationTimeout (::std::auto_ptr< ConfigurationTimeoutType > p);

        //@}

        /**
         * @name ConfigurationSmartcardRemoved
         *
         * @brief Accessor and modifier functions for the %ConfigurationSmartcardRemoved
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationSmartcardRemoved ConfigurationSmartcardRemovedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationSmartcardRemovedType, char > ConfigurationSmartcardRemovedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationSmartcardRemovedType&
        getConfigurationSmartcardRemoved () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationSmartcardRemovedType&
        getConfigurationSmartcardRemoved ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationSmartcardRemoved (const ConfigurationSmartcardRemovedType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationSmartcardRemoved (::std::auto_ptr< ConfigurationSmartcardRemovedType > p);

        //@}

        /**
         * @name ConfigurationInstallation
         *
         * @brief Accessor and modifier functions for the %ConfigurationInstallation
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationInstallation ConfigurationInstallationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationInstallationType, char > ConfigurationInstallationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationInstallationType&
        getConfigurationInstallation () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationInstallationType&
        getConfigurationInstallation ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationInstallation (const ConfigurationInstallationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationInstallation (::std::auto_ptr< ConfigurationInstallationType > p);

        //@}

        /**
         * @name ConfigurationContingency
         *
         * @brief Accessor and modifier functions for the %ConfigurationContingency
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationContingency ConfigurationContingencyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationContingencyType, char > ConfigurationContingencyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationContingencyType&
        getConfigurationContingency () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationContingencyType&
        getConfigurationContingency ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationContingency (const ConfigurationContingencyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationContingency (::std::auto_ptr< ConfigurationContingencyType > p);

        //@}

        /**
         * @name LogPrintDocConfiguration
         *
         * @brief Accessor and modifier functions for the %LogPrintDocConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::LogPrintDocumentConfiguration LogPrintDocConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< LogPrintDocConfigurationType, char > LogPrintDocConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const LogPrintDocConfigurationType&
        getLogPrintDocConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        LogPrintDocConfigurationType&
        getLogPrintDocConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setLogPrintDocConfiguration (const LogPrintDocConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLogPrintDocConfiguration (::std::auto_ptr< LogPrintDocConfigurationType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationPrinter ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationPrinter (const ConfigurationVoteType&,
                              const ConfigurationTimeoutType&,
                              const ConfigurationSmartcardRemovedType&,
                              const ConfigurationInstallationType&,
                              const ConfigurationContingencyType&,
                              const LogPrintDocConfigurationType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationPrinter (::std::auto_ptr< ConfigurationVoteType >&,
                              ::std::auto_ptr< ConfigurationTimeoutType >&,
                              ::std::auto_ptr< ConfigurationSmartcardRemovedType >&,
                              ::std::auto_ptr< ConfigurationInstallationType >&,
                              ::std::auto_ptr< ConfigurationContingencyType >&,
                              ::std::auto_ptr< LogPrintDocConfigurationType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationPrinter (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationPrinter (const ConfigurationPrinter& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationPrinter*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationPrinter ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ConfigurationVoteType > ConfigurationVote_;
        ::xsd::cxx::tree::one< ConfigurationTimeoutType > ConfigurationTimeout_;
        ::xsd::cxx::tree::one< ConfigurationSmartcardRemovedType > ConfigurationSmartcardRemoved_;
        ::xsd::cxx::tree::one< ConfigurationInstallationType > ConfigurationInstallation_;
        ::xsd::cxx::tree::one< ConfigurationContingencyType > ConfigurationContingency_;
        ::xsd::cxx::tree::one< LogPrintDocConfigurationType > LogPrintDocConfiguration_;

        //@endcond
      };

      bool
      operator== (const ConfigurationPrinter&, const ConfigurationPrinter&);

      bool
      operator!= (const ConfigurationPrinter&, const ConfigurationPrinter&);


      /**
       * @brief Class corresponding to the %ConfigurationScreenPreview schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationScreenPreview: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ConfigurationVote
         *
         * @brief Accessor and modifier functions for the %ConfigurationVote
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationVote ConfigurationVoteType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationVoteType, char > ConfigurationVoteTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationVoteType&
        getConfigurationVote () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationVoteType&
        getConfigurationVote ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationVote (const ConfigurationVoteType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationVote (::std::auto_ptr< ConfigurationVoteType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationScreenPreview ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationScreenPreview (const ConfigurationVoteType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        ConfigurationScreenPreview (::std::auto_ptr< ConfigurationVoteType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationScreenPreview (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationScreenPreview (const ConfigurationScreenPreview& x,
                                    ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                    ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationScreenPreview*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationScreenPreview ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ConfigurationVoteType > ConfigurationVote_;

        //@endcond
      };

      bool
      operator== (const ConfigurationScreenPreview&, const ConfigurationScreenPreview&);

      bool
      operator!= (const ConfigurationScreenPreview&, const ConfigurationScreenPreview&);


      /**
       * @brief Class corresponding to the %ConfigurationCard schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationCard: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name TimeOfValidity
         *
         * @brief Accessor and modifier functions for the %TimeOfValidity
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger TimeOfValidityType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TimeOfValidityType, char > TimeOfValidityTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TimeOfValidityType&
        getTimeOfValidity () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TimeOfValidityType&
        getTimeOfValidity ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTimeOfValidity (const TimeOfValidityType& x);

        //@}

        /**
         * @name AllowRecoveryCardGenerationOfConsolidatedVotes
         *
         * @brief Accessor and modifier functions for the %AllowRecoveryCardGenerationOfConsolidatedVotes
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean AllowRecoveryCardGenerationOfConsolidatedVotesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AllowRecoveryCardGenerationOfConsolidatedVotesType, char > AllowRecoveryCardGenerationOfConsolidatedVotesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const AllowRecoveryCardGenerationOfConsolidatedVotesType&
        getAllowRecoveryCardGenerationOfConsolidatedVotes () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        AllowRecoveryCardGenerationOfConsolidatedVotesType&
        getAllowRecoveryCardGenerationOfConsolidatedVotes ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setAllowRecoveryCardGenerationOfConsolidatedVotes (const AllowRecoveryCardGenerationOfConsolidatedVotesType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationCard ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationCard (const TimeOfValidityType&,
                           const AllowRecoveryCardGenerationOfConsolidatedVotesType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationCard (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationCard (const ConfigurationCard& x,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationCard*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationCard ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< TimeOfValidityType > TimeOfValidity_;
        ::xsd::cxx::tree::one< AllowRecoveryCardGenerationOfConsolidatedVotesType > AllowRecoveryCardGenerationOfConsolidatedVotes_;

        //@endcond
      };

      bool
      operator== (const ConfigurationCard&, const ConfigurationCard&);

      bool
      operator!= (const ConfigurationCard&, const ConfigurationCard&);


      /**
       * @brief Class corresponding to the %ConfigurationReportFile schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationReportFile: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name FileName
         *
         * @brief Accessor and modifier functions for the %FileName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String FileNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FileNameType, char > FileNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FileNameType&
        getFileName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FileNameType&
        getFileName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFileName (const FileNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFileName (::std::auto_ptr< FileNameType > p);

        //@}

        /**
         * @name ReportTitle
         *
         * @brief Accessor and modifier functions for the %ReportTitle
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String ReportTitleType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReportTitleType, char > ReportTitleTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ReportTitleType&
        getReportTitle () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ReportTitleType&
        getReportTitle ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setReportTitle (const ReportTitleType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setReportTitle (::std::auto_ptr< ReportTitleType > p);

        //@}

        /**
         * @name FileDescription
         *
         * @brief Accessor and modifier functions for the %FileDescription
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String FileDescriptionType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FileDescriptionType, char > FileDescriptionTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FileDescriptionType&
        getFileDescription () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FileDescriptionType&
        getFileDescription ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFileDescription (const FileDescriptionType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFileDescription (::std::auto_ptr< FileDescriptionType > p);

        //@}

        /**
         * @name NumCopies
         *
         * @brief Accessor and modifier functions for the %NumCopies
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Integer NumCopiesType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< NumCopiesType, char > NumCopiesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const NumCopiesType&
        getNumCopies () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        NumCopiesType&
        getNumCopies ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setNumCopies (const NumCopiesType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        ConfigurationReportFile ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationReportFile (const FileNameType&,
                                 const ReportTitleType&,
                                 const FileDescriptionType&,
                                 const NumCopiesType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationReportFile (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationReportFile (const ConfigurationReportFile& x,
                                 ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                 ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationReportFile*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationReportFile ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< FileNameType > FileName_;
        ::xsd::cxx::tree::one< ReportTitleType > ReportTitle_;
        ::xsd::cxx::tree::one< FileDescriptionType > FileDescription_;
        ::xsd::cxx::tree::one< NumCopiesType > NumCopies_;

        //@endcond
      };

      bool
      operator== (const ConfigurationReportFile&, const ConfigurationReportFile&);

      bool
      operator!= (const ConfigurationReportFile&, const ConfigurationReportFile&);


      /**
       * @brief Class corresponding to the %ConfigurationReportPrinting schema type.
       *
       * @nosubgrouping
       */
      class ConfigurationReportPrinting: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ReportFiles
         *
         * @brief Accessor and modifier functions for the %ReportFiles
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationReportFile ReportFilesType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< ReportFilesType > ReportFilesSequence;

        /**
         * @brief Element iterator type.
         */
        typedef ReportFilesSequence::iterator ReportFilesIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef ReportFilesSequence::const_iterator ReportFilesConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReportFilesType, char > ReportFilesTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const ReportFilesSequence&
        getReportFiles () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        ReportFilesSequence&
        getReportFiles ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setReportFiles (const ReportFilesSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        ConfigurationReportPrinting ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        ConfigurationReportPrinting (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        ConfigurationReportPrinting (const ConfigurationReportPrinting& x,
                                     ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                     ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual ConfigurationReportPrinting*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~ConfigurationReportPrinting ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ReportFilesSequence ReportFiles_;

        //@endcond
      };

      bool
      operator== (const ConfigurationReportPrinting&, const ConfigurationReportPrinting&);

      bool
      operator!= (const ConfigurationReportPrinting&, const ConfigurationReportPrinting&);


      /**
       * @brief Class corresponding to the %SaesConfiguration schema type.
       *
       * @nosubgrouping
       */
      class SaesConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name ConfigurationCard
         *
         * @brief Accessor and modifier functions for the %ConfigurationCard
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationCard ConfigurationCardType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationCardType, char > ConfigurationCardTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationCardType&
        getConfigurationCard () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationCardType&
        getConfigurationCard ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationCard (const ConfigurationCardType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationCard (::std::auto_ptr< ConfigurationCardType > p);

        //@}

        /**
         * @name ConfigurationPrinter
         *
         * @brief Accessor and modifier functions for the %ConfigurationPrinter
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationPrinter ConfigurationPrinterType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationPrinterType, char > ConfigurationPrinterTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationPrinterType&
        getConfigurationPrinter () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationPrinterType&
        getConfigurationPrinter ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationPrinter (const ConfigurationPrinterType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationPrinter (::std::auto_ptr< ConfigurationPrinterType > p);

        //@}

        /**
         * @name ConfigurationScreenPreview
         *
         * @brief Accessor and modifier functions for the %ConfigurationScreenPreview
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationScreenPreview ConfigurationScreenPreviewType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ConfigurationScreenPreviewType, char > ConfigurationScreenPreviewTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ConfigurationScreenPreviewType&
        getConfigurationScreenPreview () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ConfigurationScreenPreviewType&
        getConfigurationScreenPreview ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setConfigurationScreenPreview (const ConfigurationScreenPreviewType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setConfigurationScreenPreview (::std::auto_ptr< ConfigurationScreenPreviewType > p);

        //@}

        /**
         * @name VoteDummy
         *
         * @brief Accessor and modifier functions for the %VoteDummy
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::VoteDummyConfiguration VoteDummyType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< VoteDummyType, char > VoteDummyTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const VoteDummyType&
        getVoteDummy () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        VoteDummyType&
        getVoteDummy ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setVoteDummy (const VoteDummyType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setVoteDummy (::std::auto_ptr< VoteDummyType > p);

        //@}

        /**
         * @name ReportPrinting
         *
         * @brief Accessor and modifier functions for the %ReportPrinting
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::ConfigurationReportPrinting ReportPrintingType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< ReportPrintingType, char > ReportPrintingTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const ReportPrintingType&
        getReportPrinting () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        ReportPrintingType&
        getReportPrinting ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setReportPrinting (const ReportPrintingType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setReportPrinting (::std::auto_ptr< ReportPrintingType > p);

        //@}

        /**
         * @name StatisticConfiguration
         *
         * @brief Accessor and modifier functions for the %StatisticConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::StatisticConfiguration StatisticConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticConfigurationType, char > StatisticConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const StatisticConfigurationType&
        getStatisticConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        StatisticConfigurationType&
        getStatisticConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setStatisticConfiguration (const StatisticConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setStatisticConfiguration (::std::auto_ptr< StatisticConfigurationType > p);

        //@}

        /**
         * @name TransmissionPackageConfiguration
         *
         * @brief Accessor and modifier functions for the %TransmissionPackageConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::TransmissionPackageConfiguration TransmissionPackageConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< TransmissionPackageConfigurationType, char > TransmissionPackageConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const TransmissionPackageConfigurationType&
        getTransmissionPackageConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        TransmissionPackageConfigurationType&
        getTransmissionPackageConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setTransmissionPackageConfiguration (const TransmissionPackageConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setTransmissionPackageConfiguration (::std::auto_ptr< TransmissionPackageConfigurationType > p);

        //@}

        /**
         * @name CodiFileConfiguration
         *
         * @brief Accessor and modifier functions for the %CodiFileConfiguration
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::CodiFileConfiguration CodiFileConfigurationType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< CodiFileConfigurationType, char > CodiFileConfigurationTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const CodiFileConfigurationType&
        getCodiFileConfiguration () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        CodiFileConfigurationType&
        getCodiFileConfiguration ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setCodiFileConfiguration (const CodiFileConfigurationType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCodiFileConfiguration (::std::auto_ptr< CodiFileConfigurationType > p);

        //@}

        /**
         * @name BarcodeQRCodeConfig
         *
         * @brief Accessor and modifier functions for the %BarcodeQRCodeConfig
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::QRCodeConfig BarcodeQRCodeConfigType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< BarcodeQRCodeConfigType, char > BarcodeQRCodeConfigTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const BarcodeQRCodeConfigType&
        getBarcodeQRCodeConfig () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        BarcodeQRCodeConfigType&
        getBarcodeQRCodeConfig ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setBarcodeQRCodeConfig (const BarcodeQRCodeConfigType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBarcodeQRCodeConfig (::std::auto_ptr< BarcodeQRCodeConfigType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        SaesConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SaesConfiguration (const ConfigurationCardType&,
                           const ConfigurationPrinterType&,
                           const ConfigurationScreenPreviewType&,
                           const VoteDummyType&,
                           const ReportPrintingType&,
                           const StatisticConfigurationType&,
                           const TransmissionPackageConfigurationType&,
                           const CodiFileConfigurationType&,
                           const BarcodeQRCodeConfigType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        SaesConfiguration (::std::auto_ptr< ConfigurationCardType >&,
                           ::std::auto_ptr< ConfigurationPrinterType >&,
                           ::std::auto_ptr< ConfigurationScreenPreviewType >&,
                           ::std::auto_ptr< VoteDummyType >&,
                           ::std::auto_ptr< ReportPrintingType >&,
                           ::std::auto_ptr< StatisticConfigurationType >&,
                           ::std::auto_ptr< TransmissionPackageConfigurationType >&,
                           ::std::auto_ptr< CodiFileConfigurationType >&,
                           ::std::auto_ptr< BarcodeQRCodeConfigType >&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SaesConfiguration (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        SaesConfiguration (const SaesConfiguration& x,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SaesConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~SaesConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< ConfigurationCardType > ConfigurationCard_;
        ::xsd::cxx::tree::one< ConfigurationPrinterType > ConfigurationPrinter_;
        ::xsd::cxx::tree::one< ConfigurationScreenPreviewType > ConfigurationScreenPreview_;
        ::xsd::cxx::tree::one< VoteDummyType > VoteDummy_;
        ::xsd::cxx::tree::one< ReportPrintingType > ReportPrinting_;
        ::xsd::cxx::tree::one< StatisticConfigurationType > StatisticConfiguration_;
        ::xsd::cxx::tree::one< TransmissionPackageConfigurationType > TransmissionPackageConfiguration_;
        ::xsd::cxx::tree::one< CodiFileConfigurationType > CodiFileConfiguration_;
        ::xsd::cxx::tree::one< BarcodeQRCodeConfigType > BarcodeQRCodeConfig_;

        //@endcond
      };

      bool
      operator== (const SaesConfiguration&, const SaesConfiguration&);

      bool
      operator!= (const SaesConfiguration&, const SaesConfiguration&);


      /**
       * @brief Class corresponding to the %VoteDummyConfiguration schema type.
       *
       * @nosubgrouping
       */
      class VoteDummyConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name LogicalVoterGroupCode
         *
         * @brief Accessor and modifier functions for the %LogicalVoterGroupCode
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String LogicalVoterGroupCodeType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< LogicalVoterGroupCodeType, char > LogicalVoterGroupCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const LogicalVoterGroupCodeType&
        getLogicalVoterGroupCode () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        LogicalVoterGroupCodeType&
        getLogicalVoterGroupCode ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setLogicalVoterGroupCode (const LogicalVoterGroupCodeType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setLogicalVoterGroupCode (::std::auto_ptr< LogicalVoterGroupCodeType > p);

        //@}

        /**
         * @name ContestCode
         *
         * @brief Accessor and modifier functions for the %ContestCode
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String ContestCodeType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< ContestCodeType, char > ContestCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const ContestCodeType&
        getContestCode () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        ContestCodeType&
        getContestCode ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setContestCode (const ContestCodeType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setContestCode (::std::auto_ptr< ContestCodeType > p);

        //@}

        /**
         * @name BallotOptionCode
         *
         * @brief Accessor and modifier functions for the %BallotOptionCode
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String BallotOptionCodeType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< BallotOptionCodeType, char > BallotOptionCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const BallotOptionCodeType&
        getBallotOptionCode () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        BallotOptionCodeType&
        getBallotOptionCode ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setBallotOptionCode (const BallotOptionCodeType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBallotOptionCode (::std::auto_ptr< BallotOptionCodeType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        VoteDummyConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        VoteDummyConfiguration (const LogicalVoterGroupCodeType&,
                                const ContestCodeType&,
                                const BallotOptionCodeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        VoteDummyConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        VoteDummyConfiguration (const VoteDummyConfiguration& x,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual VoteDummyConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~VoteDummyConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< LogicalVoterGroupCodeType > LogicalVoterGroupCode_;
        ::xsd::cxx::tree::one< ContestCodeType > ContestCode_;
        ::xsd::cxx::tree::one< BallotOptionCodeType > BallotOptionCode_;

        //@endcond
      };

      bool
      operator== (const VoteDummyConfiguration&, const VoteDummyConfiguration&);

      bool
      operator!= (const VoteDummyConfiguration&, const VoteDummyConfiguration&);


      /**
       * @brief Class corresponding to the %TransmissionPackageConfiguration schema type.
       *
       * @nosubgrouping
       */
      class TransmissionPackageConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name SaveDemoVotesInTransmissionPackage
         *
         * @brief Accessor and modifier functions for the %SaveDemoVotesInTransmissionPackage
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean SaveDemoVotesInTransmissionPackageType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< SaveDemoVotesInTransmissionPackageType, char > SaveDemoVotesInTransmissionPackageTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const SaveDemoVotesInTransmissionPackageType&
        getSaveDemoVotesInTransmissionPackage () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        SaveDemoVotesInTransmissionPackageType&
        getSaveDemoVotesInTransmissionPackage ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setSaveDemoVotesInTransmissionPackage (const SaveDemoVotesInTransmissionPackageType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        TransmissionPackageConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        TransmissionPackageConfiguration (const SaveDemoVotesInTransmissionPackageType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TransmissionPackageConfiguration (const ::xercesc::DOMElement& e,
                                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        TransmissionPackageConfiguration (const TransmissionPackageConfiguration& x,
                                          ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                          ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual TransmissionPackageConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~TransmissionPackageConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< SaveDemoVotesInTransmissionPackageType > SaveDemoVotesInTransmissionPackage_;

        //@endcond
      };

      bool
      operator== (const TransmissionPackageConfiguration&, const TransmissionPackageConfiguration&);

      bool
      operator!= (const TransmissionPackageConfiguration&, const TransmissionPackageConfiguration&);


      /**
       * @brief Class corresponding to the %CodiFileConfiguration schema type.
       *
       * @nosubgrouping
       */
      class CodiFileConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name EnableCodi
         *
         * @brief Accessor and modifier functions for the %EnableCodi
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean EnableCodiType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< EnableCodiType, char > EnableCodiTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const EnableCodiType&
        getEnableCodi () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        EnableCodiType&
        getEnableCodi ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setEnableCodi (const EnableCodiType& x);

        //@}

        /**
         * @name PersistenceCodi
         *
         * @brief Accessor and modifier functions for the %PersistenceCodi
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean PersistenceCodiType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PersistenceCodiType, char > PersistenceCodiTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PersistenceCodiType&
        getPersistenceCodi () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PersistenceCodiType&
        getPersistenceCodi ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPersistenceCodi (const PersistenceCodiType& x);

        //@}

        /**
         * @name SeparatorVotingDevice
         *
         * @brief Accessor and modifier functions for the %SeparatorVotingDevice
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String SeparatorVotingDeviceType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SeparatorVotingDeviceType, char > SeparatorVotingDeviceTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SeparatorVotingDeviceType&
        getSeparatorVotingDevice () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SeparatorVotingDeviceType&
        getSeparatorVotingDevice ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSeparatorVotingDevice (const SeparatorVotingDeviceType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setSeparatorVotingDevice (::std::auto_ptr< SeparatorVotingDeviceType > p);

        //@}

        /**
         * @name FirstStringFileName
         *
         * @brief Accessor and modifier functions for the %FirstStringFileName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String FirstStringFileNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FirstStringFileNameType, char > FirstStringFileNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const FirstStringFileNameType&
        getFirstStringFileName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        FirstStringFileNameType&
        getFirstStringFileName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFirstStringFileName (const FirstStringFileNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setFirstStringFileName (::std::auto_ptr< FirstStringFileNameType > p);

        //@}

        /**
         * @name RuleCodiFileName
         *
         * @brief Accessor and modifier functions for the %RuleCodiFileName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RuleCodiFileNameConfiguration RuleCodiFileNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RuleCodiFileNameType, char > RuleCodiFileNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RuleCodiFileNameType&
        getRuleCodiFileName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RuleCodiFileNameType&
        getRuleCodiFileName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRuleCodiFileName (const RuleCodiFileNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRuleCodiFileName (::std::auto_ptr< RuleCodiFileNameType > p);

        //@}

        /**
         * @name RegisterS
         *
         * @brief Accessor and modifier functions for the %RegisterS
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterCodiConfig RegisterSType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterSType, char > RegisterSTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterSType&
        getRegisterS () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterSType&
        getRegisterS ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterS (const RegisterSType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterS (::std::auto_ptr< RegisterSType > p);

        //@}

        /**
         * @name RegisterL
         *
         * @brief Accessor and modifier functions for the %RegisterL
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterCodiConfig RegisterLType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterLType, char > RegisterLTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterLType&
        getRegisterL () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterLType&
        getRegisterL ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterL (const RegisterLType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterL (::std::auto_ptr< RegisterLType > p);

        //@}

        /**
         * @name RegisterC
         *
         * @brief Accessor and modifier functions for the %RegisterC
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegisterCodiConfig RegisterCType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegisterCType, char > RegisterCTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegisterCType&
        getRegisterC () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegisterCType&
        getRegisterC ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegisterC (const RegisterCType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegisterC (::std::auto_ptr< RegisterCType > p);

        //@}

        /**
         * @name RegionName
         *
         * @brief Accessor and modifier functions for the %RegionName
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::RegionNameCodiConfig RegionNameType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegionNameType, char > RegionNameTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const RegionNameType&
        getRegionName () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        RegionNameType&
        getRegionName ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setRegionName (const RegionNameType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setRegionName (::std::auto_ptr< RegionNameType > p);

        //@}

        /**
         * @name PersistenceX7SCodi
         *
         * @brief Accessor and modifier functions for the %PersistenceX7SCodi
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean PersistenceX7SCodiType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< PersistenceX7SCodiType, char > PersistenceX7SCodiTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const PersistenceX7SCodiType&
        getPersistenceX7SCodi () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        PersistenceX7SCodiType&
        getPersistenceX7SCodi ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setPersistenceX7SCodi (const PersistenceX7SCodiType& x);

        //@}

        /**
         * @name X7SAddPVReport
         *
         * @brief Accessor and modifier functions for the %X7SAddPVReport
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean X7SAddPVReportType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< X7SAddPVReportType, char > X7SAddPVReportTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const X7SAddPVReportType&
        getX7SAddPVReport () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        X7SAddPVReportType&
        getX7SAddPVReport ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setX7SAddPVReport (const X7SAddPVReportType& x);

        //@}

        /**
         * @name X7SSigned
         *
         * @brief Accessor and modifier functions for the %X7SSigned
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::X7SSigned X7SSignedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< X7SSignedType, char > X7SSignedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const X7SSignedType&
        getX7SSigned () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        X7SSignedType&
        getX7SSigned ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setX7SSigned (const X7SSignedType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setX7SSigned (::std::auto_ptr< X7SSignedType > p);

        //@}

        /**
         * @name X7SCrypto
         *
         * @brief Accessor and modifier functions for the %X7SCrypto
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::X7SCrypto X7SCryptoType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< X7SCryptoType, char > X7SCryptoTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const X7SCryptoType&
        getX7SCrypto () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        X7SCryptoType&
        getX7SCrypto ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setX7SCrypto (const X7SCryptoType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setX7SCrypto (::std::auto_ptr< X7SCryptoType > p);

        //@}

        /**
         * @name X7SSignedCertified
         *
         * @brief Accessor and modifier functions for the %X7SSignedCertified
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::X7SSecurityType X7SSignedCertifiedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< X7SSignedCertifiedType, char > X7SSignedCertifiedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const X7SSignedCertifiedType&
        getX7SSignedCertified () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        X7SSignedCertifiedType&
        getX7SSignedCertified ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setX7SSignedCertified (const X7SSignedCertifiedType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setX7SSignedCertified (::std::auto_ptr< X7SSignedCertifiedType > p);

        //@}

        /**
         * @name X7SCryptoCertified
         *
         * @brief Accessor and modifier functions for the %X7SCryptoCertified
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::X7SSecurityType X7SCryptoCertifiedType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< X7SCryptoCertifiedType, char > X7SCryptoCertifiedTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const X7SCryptoCertifiedType&
        getX7SCryptoCertified () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        X7SCryptoCertifiedType&
        getX7SCryptoCertified ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setX7SCryptoCertified (const X7SCryptoCertifiedType& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setX7SCryptoCertified (::std::auto_ptr< X7SCryptoCertifiedType > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        CodiFileConfiguration ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        CodiFileConfiguration (const EnableCodiType&,
                               const PersistenceCodiType&,
                               const SeparatorVotingDeviceType&,
                               const FirstStringFileNameType&,
                               const RuleCodiFileNameType&,
                               const RegisterSType&,
                               const RegisterLType&,
                               const RegisterCType&,
                               const RegionNameType&,
                               const PersistenceX7SCodiType&,
                               const X7SAddPVReportType&,
                               const X7SSignedType&,
                               const X7SCryptoType&,
                               const X7SSignedCertifiedType&,
                               const X7SCryptoCertifiedType&);

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes
         * (auto_ptr version).
         *
         * This constructor will try to use the passed values directly
         * instead of making copies.
         */
        CodiFileConfiguration (const EnableCodiType&,
                               const PersistenceCodiType&,
                               const SeparatorVotingDeviceType&,
                               const FirstStringFileNameType&,
                               const RuleCodiFileNameType&,
                               ::std::auto_ptr< RegisterSType >&,
                               ::std::auto_ptr< RegisterLType >&,
                               ::std::auto_ptr< RegisterCType >&,
                               const RegionNameType&,
                               const PersistenceX7SCodiType&,
                               const X7SAddPVReportType&,
                               const X7SSignedType&,
                               const X7SCryptoType&,
                               const X7SSignedCertifiedType&,
                               const X7SCryptoCertifiedType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CodiFileConfiguration (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        CodiFileConfiguration (const CodiFileConfiguration& x,
                               ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                               ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CodiFileConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~CodiFileConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< EnableCodiType > EnableCodi_;
        ::xsd::cxx::tree::one< PersistenceCodiType > PersistenceCodi_;
        ::xsd::cxx::tree::one< SeparatorVotingDeviceType > SeparatorVotingDevice_;
        ::xsd::cxx::tree::one< FirstStringFileNameType > FirstStringFileName_;
        ::xsd::cxx::tree::one< RuleCodiFileNameType > RuleCodiFileName_;
        ::xsd::cxx::tree::one< RegisterSType > RegisterS_;
        ::xsd::cxx::tree::one< RegisterLType > RegisterL_;
        ::xsd::cxx::tree::one< RegisterCType > RegisterC_;
        ::xsd::cxx::tree::one< RegionNameType > RegionName_;
        ::xsd::cxx::tree::one< PersistenceX7SCodiType > PersistenceX7SCodi_;
        ::xsd::cxx::tree::one< X7SAddPVReportType > X7SAddPVReport_;
        ::xsd::cxx::tree::one< X7SSignedType > X7SSigned_;
        ::xsd::cxx::tree::one< X7SCryptoType > X7SCrypto_;
        ::xsd::cxx::tree::one< X7SSignedCertifiedType > X7SSignedCertified_;
        ::xsd::cxx::tree::one< X7SCryptoCertifiedType > X7SCryptoCertified_;

        //@endcond
      };

      bool
      operator== (const CodiFileConfiguration&, const CodiFileConfiguration&);

      bool
      operator!= (const CodiFileConfiguration&, const CodiFileConfiguration&);


      /**
       * @brief Class corresponding to the %RegisterCodiConfig schema type.
       *
       * @nosubgrouping
       */
      class RegisterCodiConfig: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name UpdateNISCode
         *
         * @brief Accessor and modifier functions for the %UpdateNISCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean UpdateNISCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< UpdateNISCodeType, char > UpdateNISCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const UpdateNISCodeType&
        getUpdateNISCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        UpdateNISCodeType&
        getUpdateNISCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setUpdateNISCode (const UpdateNISCodeType& x);

        //@}

        /**
         * @name SetVotingType
         *
         * @brief Accessor and modifier functions for the %SetVotingType
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean SetVotingTypeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SetVotingTypeType, char > SetVotingTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SetVotingTypeType&
        getSetVotingType () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SetVotingTypeType&
        getSetVotingType ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSetVotingType (const SetVotingTypeType& x);

        //@}

        /**
         * @name SetLanguage
         *
         * @brief Accessor and modifier functions for the %SetLanguage
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean SetLanguageType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SetLanguageType, char > SetLanguageTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SetLanguageType&
        getSetLanguage () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SetLanguageType&
        getSetLanguage ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSetLanguage (const SetLanguageType& x);

        //@}

        /**
         * @name SetNISCode
         *
         * @brief Accessor and modifier functions for the %SetNISCode
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean SetNISCodeType;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< SetNISCodeType, char > SetNISCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const SetNISCodeType&
        getSetNISCode () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        SetNISCodeType&
        getSetNISCode ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setSetNISCode (const SetNISCodeType& x);

        //@}

        /**
         * @name FillLastFields
         *
         * @brief Accessor and modifier functions for the %FillLastFields
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean FillLastFieldsType;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< FillLastFieldsType > FillLastFieldsOptional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< FillLastFieldsType, char > FillLastFieldsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const FillLastFieldsOptional&
        getFillLastFields () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        FillLastFieldsOptional&
        getFillLastFields ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        setFillLastFields (const FillLastFieldsType& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        setFillLastFields (const FillLastFieldsOptional& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        RegisterCodiConfig ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        RegisterCodiConfig (const UpdateNISCodeType&,
                            const SetVotingTypeType&,
                            const SetLanguageType&,
                            const SetNISCodeType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RegisterCodiConfig (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        RegisterCodiConfig (const RegisterCodiConfig& x,
                            ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                            ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual RegisterCodiConfig*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~RegisterCodiConfig ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        ::xsd::cxx::tree::one< UpdateNISCodeType > UpdateNISCode_;
        ::xsd::cxx::tree::one< SetVotingTypeType > SetVotingType_;
        ::xsd::cxx::tree::one< SetLanguageType > SetLanguage_;
        ::xsd::cxx::tree::one< SetNISCodeType > SetNISCode_;
        FillLastFieldsOptional FillLastFields_;

        //@endcond
      };

      bool
      operator== (const RegisterCodiConfig&, const RegisterCodiConfig&);

      bool
      operator!= (const RegisterCodiConfig&, const RegisterCodiConfig&);


      /**
       * @brief Enumeration class corresponding to the %RegionNameCodiConfig
       * schema type.
       */
      class RegionNameCodiConfig: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_FIRST_REGION,
          CONFIGURATION_SECOND_REGION,
          CONFIGURATION_THIRD_REGION,
          CONFIGURATION_FOURTH_REGION,
          CONFIGURATION_FIFTH_REGION,
          CONFIGURATION_SIXTH_REGION,
          CONFIGURATION_SEVENTH_REGION,
          CONFIGURATION_EIGHTH_REGION,
          CONFIGURATION_VOTING_VOTE_CUSTOM_CODE,
          CONFIGURATION_LAST
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        RegionNameCodiConfig ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        RegionNameCodiConfig (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        RegionNameCodiConfig (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        RegionNameCodiConfig (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        RegionNameCodiConfig (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RegionNameCodiConfig (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RegionNameCodiConfig (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RegionNameCodiConfig (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        RegionNameCodiConfig (const RegionNameCodiConfig& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual RegionNameCodiConfig*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        RegionNameCodiConfig&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_RegionNameCodiConfig_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_RegionNameCodiConfig_convert () const;

        public:
        static const char* const _xsd_RegionNameCodiConfig_literals_[10];
        static const Value _xsd_RegionNameCodiConfig_indexes_[10];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %RuleCodiFileNameConfiguration
       * schema type.
       */
      class RuleCodiFileNameConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_CODE_MACHINE,
          CONFIGURATION_TOTALIZATION_TYPE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        RuleCodiFileNameConfiguration ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        RuleCodiFileNameConfiguration (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        RuleCodiFileNameConfiguration (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        RuleCodiFileNameConfiguration (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        RuleCodiFileNameConfiguration (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RuleCodiFileNameConfiguration (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RuleCodiFileNameConfiguration (const ::xercesc::DOMAttr& a,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        RuleCodiFileNameConfiguration (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        RuleCodiFileNameConfiguration (const RuleCodiFileNameConfiguration& x,
                                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual RuleCodiFileNameConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        RuleCodiFileNameConfiguration&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_RuleCodiFileNameConfiguration_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_RuleCodiFileNameConfiguration_convert () const;

        public:
        static const char* const _xsd_RuleCodiFileNameConfiguration_literals_[2];
        static const Value _xsd_RuleCodiFileNameConfiguration_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %X7SSecurityType
       * schema type.
       */
      class X7SSecurityType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_MACHINE_KEYS_FILE,
          CONFIGURATION_PEM_FILES
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        X7SSecurityType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        X7SSecurityType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        X7SSecurityType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        X7SSecurityType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        X7SSecurityType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SSecurityType (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SSecurityType (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SSecurityType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        X7SSecurityType (const X7SSecurityType& x,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual X7SSecurityType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        X7SSecurityType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_X7SSecurityType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_X7SSecurityType_convert () const;

        public:
        static const char* const _xsd_X7SSecurityType_literals_[2];
        static const Value _xsd_X7SSecurityType_indexes_[2];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %X7SSigned
       * schema type.
       */
      class X7SSigned: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_PKCS7_SIGNER,
          CONFIGURATION_CMS_SIGNER,
          CONFIGURATION_NONE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        X7SSigned ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        X7SSigned (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        X7SSigned (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        X7SSigned (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        X7SSigned (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SSigned (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SSigned (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SSigned (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        X7SSigned (const X7SSigned& x,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual X7SSigned*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        X7SSigned&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_X7SSigned_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_X7SSigned_convert () const;

        public:
        static const char* const _xsd_X7SSigned_literals_[3];
        static const Value _xsd_X7SSigned_indexes_[3];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %X7SCrypto
       * schema type.
       */
      class X7SCrypto: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_PKCS7_CRYPTO,
          CONFIGURATION_CMS_CRYPTO,
          CONFIGURATION_SYMMETRIC_KEY,
          CONFIGURATION_NONE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        X7SCrypto ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        X7SCrypto (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        X7SCrypto (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        X7SCrypto (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        X7SCrypto (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SCrypto (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SCrypto (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        X7SCrypto (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        X7SCrypto (const X7SCrypto& x,
                   ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                   ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual X7SCrypto*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        X7SCrypto&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_X7SCrypto_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_X7SCrypto_convert () const;

        public:
        static const char* const _xsd_X7SCrypto_literals_[4];
        static const Value _xsd_X7SCrypto_indexes_[4];

        //@endcond
      };

      /**
       * @brief Class corresponding to the %StatisticConfiguration schema type.
       *
       * @nosubgrouping
       */
      class StatisticConfiguration: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name StatisticGroups
         *
         * @brief Accessor and modifier functions for the %StatisticGroups
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::StatisticGroups StatisticGroupsType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< StatisticGroupsType > StatisticGroupsSequence;

        /**
         * @brief Element iterator type.
         */
        typedef StatisticGroupsSequence::iterator StatisticGroupsIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef StatisticGroupsSequence::const_iterator StatisticGroupsConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticGroupsType, char > StatisticGroupsTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const StatisticGroupsSequence&
        getStatisticGroups () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        StatisticGroupsSequence&
        getStatisticGroups ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setStatisticGroups (const StatisticGroupsSequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        StatisticConfiguration ();

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticConfiguration (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StatisticConfiguration (const StatisticConfiguration& x,
                                ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StatisticConfiguration*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~StatisticConfiguration ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        StatisticGroupsSequence StatisticGroups_;

        //@endcond
      };

      bool
      operator== (const StatisticConfiguration&, const StatisticConfiguration&);

      bool
      operator!= (const StatisticConfiguration&, const StatisticConfiguration&);


      /**
       * @brief Class corresponding to the %StatisticGroups schema type.
       *
       * @nosubgrouping
       */
      class StatisticGroups: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name StatisticItem
         *
         * @brief Accessor and modifier functions for the %StatisticItem
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::StatisticItem StatisticItemType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< StatisticItemType > StatisticItemSequence;

        /**
         * @brief Element iterator type.
         */
        typedef StatisticItemSequence::iterator StatisticItemIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef StatisticItemSequence::const_iterator StatisticItemConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticItemType, char > StatisticItemTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const StatisticItemSequence&
        getStatisticItem () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        StatisticItemSequence&
        getStatisticItem ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setStatisticItem (const StatisticItemSequence& s);

        //@}

        /**
         * @name StatisticEditType
         *
         * @brief Accessor and modifier functions for the %StatisticEditType
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::Configuration::StatisticEditType StatisticEditTypeType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< StatisticEditTypeType > StatisticEditTypeSequence;

        /**
         * @brief Element iterator type.
         */
        typedef StatisticEditTypeSequence::iterator StatisticEditTypeIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef StatisticEditTypeSequence::const_iterator StatisticEditTypeConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< StatisticEditTypeType, char > StatisticEditTypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const StatisticEditTypeSequence&
        getStatisticEditType () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        StatisticEditTypeSequence&
        getStatisticEditType ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setStatisticEditType (const StatisticEditTypeSequence& s);

        //@}

        /**
         * @name NameKey
         *
         * @brief Accessor and modifier functions for the %NameKey
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String NameKeyType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameKeyType, char > NameKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const NameKeyType&
        getNameKey () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        NameKeyType&
        getNameKey ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setNameKey (const NameKeyType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNameKey (::std::auto_ptr< NameKeyType > p);

        //@}

        /**
         * @name EditInfoKey
         *
         * @brief Accessor and modifier functions for the %EditInfoKey
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String EditInfoKeyType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< EditInfoKeyType, char > EditInfoKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const EditInfoKeyType&
        getEditInfoKey () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        EditInfoKeyType&
        getEditInfoKey ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setEditInfoKey (const EditInfoKeyType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setEditInfoKey (::std::auto_ptr< EditInfoKeyType > p);

        //@}

        /**
         * @name BlockerInfoKey
         *
         * @brief Accessor and modifier functions for the %BlockerInfoKey
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String BlockerInfoKeyType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< BlockerInfoKeyType, char > BlockerInfoKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const BlockerInfoKeyType&
        getBlockerInfoKey () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        BlockerInfoKeyType&
        getBlockerInfoKey ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setBlockerInfoKey (const BlockerInfoKeyType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setBlockerInfoKey (::std::auto_ptr< BlockerInfoKeyType > p);

        //@}

        /**
         * @name VerticalFilling
         *
         * @brief Accessor and modifier functions for the %VerticalFilling
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean VerticalFillingType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< VerticalFillingType, char > VerticalFillingTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const VerticalFillingType&
        getVerticalFilling () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        VerticalFillingType&
        getVerticalFilling ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setVerticalFilling (const VerticalFillingType& x);

        //@}

        /**
         * @name Pivot
         *
         * @brief Accessor and modifier functions for the %Pivot
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger PivotType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< PivotType, char > PivotTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const PivotType&
        getPivot () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        PivotType&
        getPivot ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setPivot (const PivotType& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        StatisticGroups ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        StatisticGroups (const NameKeyType&,
                         const EditInfoKeyType&,
                         const BlockerInfoKeyType&,
                         const VerticalFillingType&,
                         const PivotType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticGroups (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StatisticGroups (const StatisticGroups& x,
                         ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                         ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StatisticGroups*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~StatisticGroups ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        StatisticItemSequence StatisticItem_;
        StatisticEditTypeSequence StatisticEditType_;
        ::xsd::cxx::tree::one< NameKeyType > NameKey_;
        ::xsd::cxx::tree::one< EditInfoKeyType > EditInfoKey_;
        ::xsd::cxx::tree::one< BlockerInfoKeyType > BlockerInfoKey_;
        ::xsd::cxx::tree::one< VerticalFillingType > VerticalFilling_;
        ::xsd::cxx::tree::one< PivotType > Pivot_;

        //@endcond
      };

      bool
      operator== (const StatisticGroups&, const StatisticGroups&);

      bool
      operator!= (const StatisticGroups&, const StatisticGroups&);


      /**
       * @brief Class corresponding to the %StatisticItem schema type.
       *
       * @nosubgrouping
       */
      class StatisticItem: public ::Smartmatic::SAES::ConfigurationTypes::Type
      {
        public:
        /**
         * @name addStatisticCode
         *
         * @brief Accessor and modifier functions for the %addStatisticCode
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String AddStatisticCodeType;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< AddStatisticCodeType > AddStatisticCodeSequence;

        /**
         * @brief Element iterator type.
         */
        typedef AddStatisticCodeSequence::iterator AddStatisticCodeIterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef AddStatisticCodeSequence::const_iterator AddStatisticCodeConstIterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< AddStatisticCodeType, char > AddStatisticCodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const AddStatisticCodeSequence&
        getAddStatisticCode () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        AddStatisticCodeSequence&
        getAddStatisticCode ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        setAddStatisticCode (const AddStatisticCodeSequence& s);

        //@}

        /**
         * @name Type
         *
         * @brief Accessor and modifier functions for the %Type
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::Configuration::StatisticElementType TypeType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const TypeType&
        getType () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        TypeType&
        getType ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setType (const TypeType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setType (::std::auto_ptr< TypeType > p);

        //@}

        /**
         * @name Code
         *
         * @brief Accessor and modifier functions for the %Code
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String CodeType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const CodeType&
        getCode () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        CodeType&
        getCode ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setCode (const CodeType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setCode (::std::auto_ptr< CodeType > p);

        //@}

        /**
         * @name NameKey
         *
         * @brief Accessor and modifier functions for the %NameKey
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String NameKeyType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< NameKeyType, char > NameKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const NameKeyType&
        getNameKey () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        NameKeyType&
        getNameKey ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setNameKey (const NameKeyType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setNameKey (::std::auto_ptr< NameKeyType > p);

        //@}

        /**
         * @name DescriptionKey
         *
         * @brief Accessor and modifier functions for the %DescriptionKey
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String DescriptionKeyType;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< DescriptionKeyType, char > DescriptionKeyTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const DescriptionKeyType&
        getDescriptionKey () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        DescriptionKeyType&
        getDescriptionKey ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setDescriptionKey (const DescriptionKeyType& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly
         * instead of making a copy.
         */
        void
        setDescriptionKey (::std::auto_ptr< DescriptionKeyType > p);

        //@}

        /**
         * @name Max
         *
         * @brief Accessor and modifier functions for the %Max
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger MaxType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< MaxType > MaxOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaxType, char > MaxTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const MaxOptional&
        getMax () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        MaxOptional&
        getMax ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMax (const MaxType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setMax (const MaxOptional& x);

        //@}

        /**
         * @name Mask
         *
         * @brief Accessor and modifier functions for the %Mask
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String MaskType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< MaskType > MaskOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MaskType, char > MaskTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const MaskOptional&
        getMask () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        MaskOptional&
        getMask ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMask (const MaskType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setMask (const MaskOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setMask (::std::auto_ptr< MaskType > p);

        //@}

        /**
         * @name Regex
         *
         * @brief Accessor and modifier functions for the %Regex
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::String RegexType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< RegexType > RegexOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< RegexType, char > RegexTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const RegexOptional&
        getRegex () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        RegexOptional&
        getRegex ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setRegex (const RegexType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setRegex (const RegexOptional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        setRegex (::std::auto_ptr< RegexType > p);

        //@}

        /**
         * @name Mandatory
         *
         * @brief Accessor and modifier functions for the %Mandatory
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::Boolean MandatoryType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< MandatoryType > MandatoryOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< MandatoryType, char > MandatoryTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const MandatoryOptional&
        getMandatory () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        MandatoryOptional&
        getMandatory ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setMandatory (const MandatoryType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setMandatory (const MandatoryOptional& x);

        //@}

        /**
         * @name Width
         *
         * @brief Accessor and modifier functions for the %Width
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger WidthType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< WidthType > WidthOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< WidthType, char > WidthTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const WidthOptional&
        getWidth () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        WidthOptional&
        getWidth ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setWidth (const WidthType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setWidth (const WidthOptional& x);

        //@}

        /**
         * @name Height
         *
         * @brief Accessor and modifier functions for the %Height
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::Smartmatic::SAES::ConfigurationTypes::NonNegativeInteger HeightType;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< HeightType > HeightOptional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< HeightType, char > HeightTraits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const HeightOptional&
        getHeight () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        HeightOptional&
        getHeight ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        setHeight (const HeightType& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        setHeight (const HeightOptional& x);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Default constructor.
         *
         * Note that this constructor leaves required elements and
         * attributes uninitialized.
         */
        StatisticItem ();

        /**
         * @brief Create an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        StatisticItem (const TypeType&,
                       const CodeType&,
                       const NameKeyType&,
                       const DescriptionKeyType&);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticItem (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StatisticItem (const StatisticItem& x,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StatisticItem*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        //@}

        /**
         * @brief Destructor.
         */
        virtual 
        ~StatisticItem ();

        // Implementation.
        //

        //@cond

        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::Smartmatic::SAES::ConfigurationTypes::Flags);

        protected:
        AddStatisticCodeSequence addStatisticCode_;
        ::xsd::cxx::tree::one< TypeType > Type_;
        ::xsd::cxx::tree::one< CodeType > Code_;
        ::xsd::cxx::tree::one< NameKeyType > NameKey_;
        ::xsd::cxx::tree::one< DescriptionKeyType > DescriptionKey_;
        MaxOptional Max_;
        MaskOptional Mask_;
        RegexOptional Regex_;
        MandatoryOptional Mandatory_;
        WidthOptional Width_;
        HeightOptional Height_;

        //@endcond
      };

      bool
      operator== (const StatisticItem&, const StatisticItem&);

      bool
      operator!= (const StatisticItem&, const StatisticItem&);


      /**
       * @brief Enumeration class corresponding to the %StatisticElementType
       * schema type.
       */
      class StatisticElementType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_NUMERIC,
          CONFIGURATION_BOOLEAN,
          CONFIGURATION_STRING,
          CONFIGURATION_CUSTOM
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        StatisticElementType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        StatisticElementType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        StatisticElementType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        StatisticElementType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        StatisticElementType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticElementType (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticElementType (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticElementType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StatisticElementType (const StatisticElementType& x,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StatisticElementType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        StatisticElementType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_StatisticElementType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_StatisticElementType_convert () const;

        public:
        static const char* const _xsd_StatisticElementType_literals_[4];
        static const Value _xsd_StatisticElementType_indexes_[4];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %StatisticEditType
       * schema type.
       */
      class StatisticEditType: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_NOTINSTALLED,
          CONFIGURATION_NOTPOLLWORKERREGISTERED,
          CONFIGURATION_NOTDEMOSTRATIONVOTE,
          CONFIGURATION_NOTINITIATED,
          CONFIGURATION_INITIATED,
          CONFIGURATION_CLOSED,
          CONFIGURATION_RESULTSTRANSMITTED,
          CONFIGURATION_ALL,
          CONFIGURATION_NONE
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        StatisticEditType ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        StatisticEditType (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        StatisticEditType (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        StatisticEditType (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        StatisticEditType (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticEditType (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticEditType (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        StatisticEditType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        StatisticEditType (const StatisticEditType& x,
                           ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                           ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual StatisticEditType*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        StatisticEditType&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_StatisticEditType_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_StatisticEditType_convert () const;

        public:
        static const char* const _xsd_StatisticEditType_literals_[9];
        static const Value _xsd_StatisticEditType_indexes_[9];

        //@endcond
      };

      /**
       * @brief Enumeration class corresponding to the %PositionImage
       * schema type.
       */
      class PositionImage: public ::Smartmatic::SAES::ConfigurationTypes::String
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum Value
        {
          CONFIGURATION_TOP_LEFT,
          CONFIGURATION_TOP_CENTER,
          CONFIGURATION_TOP_RIGHT,
          CONFIGURATION_MIDDLE_LEFT,
          CONFIGURATION_MIDDLE_CENTER,
          CONFIGURATION_MIDDLE_RIGHT,
          CONFIGURATION_BOTTOM_LEFT,
          CONFIGURATION_BOTTOM_CENTER,
          CONFIGURATION_BOTTOM_RIGHT,
          CONFIGURATION_RANDOM
        };

        /**
         * @brief Default constructor.
         *
         * Note that this constructor may leave the instance in an
         * invalid state.
         */
        PositionImage ();

        /**
         * @brief Create an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        PositionImage (Value v);

        /**
         * @brief Create an instance from a C string.
         *
         * @param v A string value.
         */
        PositionImage (const char* v);

        /**
         * @brief Create an instance from a string.
         *
         * @param v A string value.
         */
        PositionImage (const ::std::string& v);

        /**
         * @brief Create an instance from the base value.
         *
         * @param v A base value.
         */
        PositionImage (const ::Smartmatic::SAES::ConfigurationTypes::String& v);

        /**
         * @brief Create an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PositionImage (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PositionImage (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Create an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A pointer to DOM element containing the string fragment.
         * @param f Flags to create the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        PositionImage (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the @c _clone function instead.
         */
        PositionImage (const PositionImage& x,
                       ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                       ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0);

        /**
         * @brief Copy the instance polymorphically.
         *
         * @param f Flags to create the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of the instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual PositionImage*
        _clone (::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                ::Smartmatic::SAES::ConfigurationTypes::Container* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        PositionImage&
        operator= (Value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator Value () const
        {
          return _xsd_PositionImage_convert ();
        }

        //@cond

        protected:
        Value
        _xsd_PositionImage_convert () const;

        public:
        static const char* const _xsd_PositionImage_literals_[10];
        static const Value _xsd_PositionImage_indexes_[10];

        //@endcond
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      /**
       * @name Parsing functions for the %SaesConfiguration document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::std::string& uri,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::std::string& uri,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              const ::std::string& id,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              const ::std::string& id,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source.
       *
       * @param is A Xerces-C++ input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::xercesc::InputSource& is,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with an error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::xercesc::InputSource& is,
                              ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (const ::xercesc::DOMDocument& d,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::auto_ptr< ::Smartmatic::SAES::Configuration::SaesConfiguration >
      parseSaesConfiguration (::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0,
                              const ::Smartmatic::SAES::ConfigurationTypes::Properties& p = ::Smartmatic::SAES::ConfigurationTypes::Properties ());

      //@}
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Configuration
    {
      void
      operator<< (::xercesc::DOMElement&, const TextConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const AlignType&);

      void
      operator<< (::xercesc::DOMAttr&, const AlignType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const AlignType&);

      void
      operator<< (::xercesc::DOMElement&, const VoteChecksumType&);

      void
      operator<< (::xercesc::DOMAttr&, const VoteChecksumType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const VoteChecksumType&);

      void
      operator<< (::xercesc::DOMElement&, const VoteEncodeModeType&);

      void
      operator<< (::xercesc::DOMAttr&, const VoteEncodeModeType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const VoteEncodeModeType&);

      void
      operator<< (::xercesc::DOMElement&, const LayoutBallotOptiontType&);

      void
      operator<< (::xercesc::DOMAttr&, const LayoutBallotOptiontType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const LayoutBallotOptiontType&);

      void
      operator<< (::xercesc::DOMElement&, const LayoutSuperBlankType&);

      void
      operator<< (::xercesc::DOMAttr&, const LayoutSuperBlankType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const LayoutSuperBlankType&);

      void
      operator<< (::xercesc::DOMElement&, const LayoutContestType&);

      void
      operator<< (::xercesc::DOMAttr&, const LayoutContestType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const LayoutContestType&);

      void
      operator<< (::xercesc::DOMElement&, const QRcodePosition&);

      void
      operator<< (::xercesc::DOMAttr&, const QRcodePosition&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const QRcodePosition&);

      void
      operator<< (::xercesc::DOMElement&, const CorrectionModeQRCode&);

      void
      operator<< (::xercesc::DOMAttr&, const CorrectionModeQRCode&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const CorrectionModeQRCode&);

      void
      operator<< (::xercesc::DOMElement&, const QRCodePrintingModeType&);

      void
      operator<< (::xercesc::DOMAttr&, const QRCodePrintingModeType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const QRCodePrintingModeType&);

      void
      operator<< (::xercesc::DOMElement&, const LayoutContestConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationVote&);

      void
      operator<< (::xercesc::DOMElement&, const VoteQRCodeModeEnum&);

      void
      operator<< (::xercesc::DOMAttr&, const VoteQRCodeModeEnum&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const VoteQRCodeModeEnum&);

      void
      operator<< (::xercesc::DOMElement&, const VoteCodeConfig&);

      void
      operator<< (::xercesc::DOMElement&, const MultiLanguageConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const QRCodeVoteList&);

      void
      operator<< (::xercesc::DOMElement&, const QRCodeVoteConfig&);

      void
      operator<< (::xercesc::DOMElement&, const QRCodeConfig&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationSmartcardRemoved&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationTimeout&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationInstallation&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationContingency&);

      void
      operator<< (::xercesc::DOMElement&, const DocumentColumnLayout&);

      void
      operator<< (::xercesc::DOMAttr&, const DocumentColumnLayout&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const DocumentColumnLayout&);

      void
      operator<< (::xercesc::DOMElement&, const LogPrintDocumentConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationPrinter&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationScreenPreview&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationCard&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationReportFile&);

      void
      operator<< (::xercesc::DOMElement&, const ConfigurationReportPrinting&);

      void
      operator<< (::xercesc::DOMElement&, const SaesConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const VoteDummyConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const TransmissionPackageConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const CodiFileConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const RegisterCodiConfig&);

      void
      operator<< (::xercesc::DOMElement&, const RegionNameCodiConfig&);

      void
      operator<< (::xercesc::DOMAttr&, const RegionNameCodiConfig&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const RegionNameCodiConfig&);

      void
      operator<< (::xercesc::DOMElement&, const RuleCodiFileNameConfiguration&);

      void
      operator<< (::xercesc::DOMAttr&, const RuleCodiFileNameConfiguration&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const RuleCodiFileNameConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const X7SSecurityType&);

      void
      operator<< (::xercesc::DOMAttr&, const X7SSecurityType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const X7SSecurityType&);

      void
      operator<< (::xercesc::DOMElement&, const X7SSigned&);

      void
      operator<< (::xercesc::DOMAttr&, const X7SSigned&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const X7SSigned&);

      void
      operator<< (::xercesc::DOMElement&, const X7SCrypto&);

      void
      operator<< (::xercesc::DOMAttr&, const X7SCrypto&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const X7SCrypto&);

      void
      operator<< (::xercesc::DOMElement&, const StatisticConfiguration&);

      void
      operator<< (::xercesc::DOMElement&, const StatisticGroups&);

      void
      operator<< (::xercesc::DOMElement&, const StatisticItem&);

      void
      operator<< (::xercesc::DOMElement&, const StatisticElementType&);

      void
      operator<< (::xercesc::DOMAttr&, const StatisticElementType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const StatisticElementType&);

      void
      operator<< (::xercesc::DOMElement&, const StatisticEditType&);

      void
      operator<< (::xercesc::DOMAttr&, const StatisticEditType&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const StatisticEditType&);

      void
      operator<< (::xercesc::DOMElement&, const PositionImage&);

      void
      operator<< (::xercesc::DOMAttr&, const PositionImage&);

      void
      operator<< (::Smartmatic::SAES::ConfigurationTypes::ListStream&,
                  const PositionImage&);

      /**
       * @name Serialization functions for the %SaesConfiguration document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeSaesConfiguration (::std::ostream& os,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesConfiguration (::std::ostream& os,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& eh,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesConfiguration (::std::ostream& os,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      serializeSaesConfiguration (::xercesc::XMLFormatTarget& ft,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh An error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesConfiguration (::xercesc::XMLFormatTarget& ft,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  ::Smartmatic::SAES::ConfigurationTypes::ErrorHandler& eh,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param eh A Xerces-C++ DOM error handler.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      serializeSaesConfiguration (::xercesc::XMLFormatTarget& ft,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  const ::std::string& e = "UTF-8",
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      serializeSaesConfiguration (::xercesc::DOMDocument& d,
                                  const ::Smartmatic::SAES::Configuration::SaesConfiguration& x,
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::Smartmatic::SAES::ConfigurationTypes::dom::auto_ptr< ::xercesc::DOMDocument >
      serializeSaesConfiguration (const ::Smartmatic::SAES::Configuration::SaesConfiguration& x, 
                                  const ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap& m = ::Smartmatic::SAES::ConfigurationTypes::NamespaceInfomap (),
                                  ::Smartmatic::SAES::ConfigurationTypes::Flags f = 0);

      //@}
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_SAES_CONFIGURATION_SCHEMA_HXX
