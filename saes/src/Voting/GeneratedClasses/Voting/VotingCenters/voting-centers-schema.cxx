// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "voting-centers-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingCenters
      {
        // VotingCenters
        // 

        const VotingCenters::VotingCenterSequence& VotingCenters::
        getVotingCenter () const
        {
          return this->VotingCenter_;
        }

        VotingCenters::VotingCenterSequence& VotingCenters::
        getVotingCenter ()
        {
          return this->VotingCenter_;
        }

        void VotingCenters::
        setVotingCenter (const VotingCenterSequence& s)
        {
          this->VotingCenter_ = s;
        }


        // VotingCenter
        // 

        const VotingCenter::CodeType& VotingCenter::
        getCode () const
        {
          return this->code_.get ();
        }

        VotingCenter::CodeType& VotingCenter::
        getCode ()
        {
          return this->code_.get ();
        }

        void VotingCenter::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void VotingCenter::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const VotingCenter::Folder_nameType& VotingCenter::
        getFolder_name () const
        {
          return this->folder_name_.get ();
        }

        VotingCenter::Folder_nameType& VotingCenter::
        getFolder_name ()
        {
          return this->folder_name_.get ();
        }

        void VotingCenter::
        setFolder_name (const Folder_nameType& x)
        {
          this->folder_name_.set (x);
        }

        void VotingCenter::
        setFolder_name (::std::auto_ptr< Folder_nameType > x)
        {
          this->folder_name_.set (x);
        }

        const VotingCenter::Image_file_nameType& VotingCenter::
        getImage_file_name () const
        {
          return this->image_file_name_.get ();
        }

        VotingCenter::Image_file_nameType& VotingCenter::
        getImage_file_name ()
        {
          return this->image_file_name_.get ();
        }

        void VotingCenter::
        setImage_file_name (const Image_file_nameType& x)
        {
          this->image_file_name_.set (x);
        }

        void VotingCenter::
        setImage_file_name (::std::auto_ptr< Image_file_nameType > x)
        {
          this->image_file_name_.set (x);
        }

        const VotingCenter::Program_unitOptional& VotingCenter::
        getProgram_unit () const
        {
          return this->program_unit_;
        }

        VotingCenter::Program_unitOptional& VotingCenter::
        getProgram_unit ()
        {
          return this->program_unit_;
        }

        void VotingCenter::
        setProgram_unit (const Program_unitType& x)
        {
          this->program_unit_.set (x);
        }

        void VotingCenter::
        setProgram_unit (const Program_unitOptional& x)
        {
          this->program_unit_ = x;
        }

        void VotingCenter::
        setProgram_unit (::std::auto_ptr< Program_unitType > x)
        {
          this->program_unit_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingCenters
      {
        // VotingCenters
        //

        VotingCenters::
        VotingCenters ()
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (),
          VotingCenter_ (::Smartmatic::SAES::Voting::VotingCenters::Flags (), this)
        {
        }

        VotingCenters::
        VotingCenters (const VotingCenters& x,
                       ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                       ::Smartmatic::SAES::Voting::VotingCenters::Container* c)
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (x, f, c),
          VotingCenter_ (x.VotingCenter_, f, this)
        {
        }

        VotingCenters::
        VotingCenters (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                       ::Smartmatic::SAES::Voting::VotingCenters::Container* c)
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (e, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::base, c),
          VotingCenter_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void VotingCenters::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // VotingCenter
            //
            if (n.name () == "VotingCenter" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingCenters")
            {
              ::std::auto_ptr< VotingCenterType > r (
                VotingCenterTraits::create (i, f, this));

              this->VotingCenter_.push_back (r);
              continue;
            }

            break;
          }
        }

        VotingCenters* VotingCenters::
        _clone (::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                ::Smartmatic::SAES::Voting::VotingCenters::Container* c) const
        {
          return new class VotingCenters (*this, f, c);
        }

        VotingCenters::
        ~VotingCenters ()
        {
        }

        bool
        operator== (const VotingCenters& x, const VotingCenters& y)
        {
          if (!(x.getVotingCenter () == y.getVotingCenter ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotingCenters& x, const VotingCenters& y)
        {
          return !(x == y);
        }

        // VotingCenter
        //

        VotingCenter::
        VotingCenter ()
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (),
          code_ (::Smartmatic::SAES::Voting::VotingCenters::Flags (), this),
          folder_name_ (::Smartmatic::SAES::Voting::VotingCenters::Flags (), this),
          image_file_name_ (::Smartmatic::SAES::Voting::VotingCenters::Flags (), this),
          program_unit_ (::Smartmatic::SAES::Voting::VotingCenters::Flags (), this)
        {
        }

        VotingCenter::
        VotingCenter (const CodeType& code,
                      const Folder_nameType& folder_name,
                      const Image_file_nameType& image_file_name)
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (),
          code_ (code, ::Smartmatic::SAES::Voting::VotingCenters::Flags (), this),
          folder_name_ (folder_name, ::Smartmatic::SAES::Voting::VotingCenters::Flags (), this),
          image_file_name_ (image_file_name, ::Smartmatic::SAES::Voting::VotingCenters::Flags (), this),
          program_unit_ (::Smartmatic::SAES::Voting::VotingCenters::Flags (), this)
        {
        }

        VotingCenter::
        VotingCenter (const VotingCenter& x,
                      ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                      ::Smartmatic::SAES::Voting::VotingCenters::Container* c)
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (x, f, c),
          code_ (x.code_, f, this),
          folder_name_ (x.folder_name_, f, this),
          image_file_name_ (x.image_file_name_, f, this),
          program_unit_ (x.program_unit_, f, this)
        {
        }

        VotingCenter::
        VotingCenter (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                      ::Smartmatic::SAES::Voting::VotingCenters::Container* c)
        : ::Smartmatic::SAES::Voting::VotingCenters::Type (e, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::base, c),
          code_ (f, this),
          folder_name_ (f, this),
          image_file_name_ (f, this),
          program_unit_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void VotingCenter::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "folder-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Folder_nameType > r (
                Folder_nameTraits::create (i, f, this));

              this->folder_name_.set (r);
              continue;
            }

            if (n.name () == "image-file-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Image_file_nameType > r (
                Image_file_nameTraits::create (i, f, this));

              this->image_file_name_.set (r);
              continue;
            }

            if (n.name () == "program-unit" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Program_unitType > r (
                Program_unitTraits::create (i, f, this));

              this->program_unit_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!folder_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "folder-name",
              "");
          }

          if (!image_file_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "image-file-name",
              "");
          }
        }

        VotingCenter* VotingCenter::
        _clone (::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                ::Smartmatic::SAES::Voting::VotingCenters::Container* c) const
        {
          return new class VotingCenter (*this, f, c);
        }

        VotingCenter::
        ~VotingCenter ()
        {
        }

        bool
        operator== (const VotingCenter& x, const VotingCenter& y)
        {
          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getFolder_name () == y.getFolder_name ()))
            return false;

          if (!(x.getImage_file_name () == y.getImage_file_name ()))
            return false;

          if (!(x.getProgram_unit () == y.getProgram_unit ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotingCenter& x, const VotingCenter& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingCenters
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (const ::std::string& u,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
            ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
              d, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (const ::std::string& u,
                            ::Smartmatic::SAES::Voting::VotingCenters::ErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
            ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
              d, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
            ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
              d, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::std::istream& is,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::std::istream& is,
                            ::Smartmatic::SAES::Voting::VotingCenters::ErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::std::istream& is,
                            const ::std::string& sid,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::std::istream& is,
                            const ::std::string& sid,
                            ::Smartmatic::SAES::Voting::VotingCenters::ErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::xercesc::InputSource& i,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
            ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
              d, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::xercesc::InputSource& i,
                            ::Smartmatic::SAES::Voting::VotingCenters::ErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
            ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
              d, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
            ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
              d, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (const ::xercesc::DOMDocument& d,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
              ::Smartmatic::SAES::Voting::VotingCenters::parseVotingCenters (
                c, f | ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VotingCenters" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingCenters")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VotingCenters",
            "http://www.smartmatic.com/Saes/Voting/VotingCenters");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters >
        parseVotingCenters (::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::Smartmatic::SAES::Voting::VotingCenters::Flags f,
                            const ::Smartmatic::SAES::Voting::VotingCenters::Properties&)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::VotingCenters::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "VotingCenters" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingCenters")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VotingCenters",
            "http://www.smartmatic.com/Saes/Voting/VotingCenters");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingCenters
      {
        void
        serializeVotingCenters (::std::ostream& o,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVotingCenters (::std::ostream& o,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                ::Smartmatic::SAES::Voting::VotingCenters::ErrorHandler& h,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingCenters::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingCenters (::std::ostream& o,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingCenters (::xercesc::XMLFormatTarget& t,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVotingCenters (::xercesc::XMLFormatTarget& t,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                ::Smartmatic::SAES::Voting::VotingCenters::ErrorHandler& h,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingCenters (::xercesc::XMLFormatTarget& t,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                const ::std::string& e,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingCenters (::xercesc::DOMDocument& d,
                                const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VotingCenters" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingCenters")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "VotingCenters",
              "http://www.smartmatic.com/Saes/Voting/VotingCenters");
          }
        }

        ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVotingCenters (const ::Smartmatic::SAES::Voting::VotingCenters::VotingCenters& s,
                                const ::Smartmatic::SAES::Voting::VotingCenters::NamespaceInfomap& m,
                                ::Smartmatic::SAES::Voting::VotingCenters::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingCenters::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "VotingCenters",
              "http://www.smartmatic.com/Saes/Voting/VotingCenters",
              m, f));

          ::Smartmatic::SAES::Voting::VotingCenters::serializeVotingCenters (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingCenters& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingCenters::Type& > (i);

          // VotingCenter
          //
          for (VotingCenters::VotingCenterConstIterator
               b (i.getVotingCenter ().begin ()), n (i.getVotingCenter ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingCenter",
                "http://www.smartmatic.com/Saes/Voting/VotingCenters",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingCenter& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingCenters::Type& > (i);

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // folder-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "folder-name",
                e));

            a << i.getFolder_name ();
          }

          // image-file-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "image-file-name",
                e));

            a << i.getImage_file_name ();
          }

          // program-unit
          //
          if (i.getProgram_unit ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "program-unit",
                e));

            a << *i.getProgram_unit ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

