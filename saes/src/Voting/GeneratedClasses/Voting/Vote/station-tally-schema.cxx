// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "station-tally-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        // StationTally
        // 

        const StationTally::RSequence& StationTally::
        getRegisters () const
        {
          return this->r_;
        }

        StationTally::RSequence& StationTally::
        getRegisters ()
        {
          return this->r_;
        }

        void StationTally::
        setRegisters (const RSequence& s)
        {
          this->r_ = s;
        }

        const StationTally::TypeOptional& StationTally::
        getType () const
        {
          return this->type_;
        }

        StationTally::TypeOptional& StationTally::
        getType ()
        {
          return this->type_;
        }

        void StationTally::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void StationTally::
        setType (const TypeOptional& x)
        {
          this->type_ = x;
        }

        void StationTally::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }

        const StationTally::NumberOptional& StationTally::
        getNumber () const
        {
          return this->number_;
        }

        StationTally::NumberOptional& StationTally::
        getNumber ()
        {
          return this->number_;
        }

        void StationTally::
        setNumber (const NumberType& x)
        {
          this->number_.set (x);
        }

        void StationTally::
        setNumber (const NumberOptional& x)
        {
          this->number_ = x;
        }

        void StationTally::
        setNumber (::std::auto_ptr< NumberType > x)
        {
          this->number_.set (x);
        }

        const StationTally::ContestOptional& StationTally::
        getContest () const
        {
          return this->contest_;
        }

        StationTally::ContestOptional& StationTally::
        getContest ()
        {
          return this->contest_;
        }

        void StationTally::
        setContest (const ContestType& x)
        {
          this->contest_.set (x);
        }

        void StationTally::
        setContest (const ContestOptional& x)
        {
          this->contest_ = x;
        }

        void StationTally::
        setContest (::std::auto_ptr< ContestType > x)
        {
          this->contest_.set (x);
        }

        const StationTally::Automatic_votesOptional& StationTally::
        getAutomatic_votes () const
        {
          return this->automatic_votes_;
        }

        StationTally::Automatic_votesOptional& StationTally::
        getAutomatic_votes ()
        {
          return this->automatic_votes_;
        }

        void StationTally::
        setAutomatic_votes (const Automatic_votesType& x)
        {
          this->automatic_votes_.set (x);
        }

        void StationTally::
        setAutomatic_votes (const Automatic_votesOptional& x)
        {
          this->automatic_votes_ = x;
        }

        void StationTally::
        setAutomatic_votes (::std::auto_ptr< Automatic_votesType > x)
        {
          this->automatic_votes_.set (x);
        }

        const StationTally::Complete_unconscious_void_votesOptional& StationTally::
        getComplete_unconscious_void_votes () const
        {
          return this->complete_unconscious_void_votes_;
        }

        StationTally::Complete_unconscious_void_votesOptional& StationTally::
        getComplete_unconscious_void_votes ()
        {
          return this->complete_unconscious_void_votes_;
        }

        void StationTally::
        setComplete_unconscious_void_votes (const Complete_unconscious_void_votesType& x)
        {
          this->complete_unconscious_void_votes_.set (x);
        }

        void StationTally::
        setComplete_unconscious_void_votes (const Complete_unconscious_void_votesOptional& x)
        {
          this->complete_unconscious_void_votes_ = x;
        }

        void StationTally::
        setComplete_unconscious_void_votes (::std::auto_ptr< Complete_unconscious_void_votesType > x)
        {
          this->complete_unconscious_void_votes_.set (x);
        }

        const StationTally::Specific_unconscious_void_votesOptional& StationTally::
        getSpecific_unconscious_void_votes () const
        {
          return this->specific_unconscious_void_votes_;
        }

        StationTally::Specific_unconscious_void_votesOptional& StationTally::
        getSpecific_unconscious_void_votes ()
        {
          return this->specific_unconscious_void_votes_;
        }

        void StationTally::
        setSpecific_unconscious_void_votes (const Specific_unconscious_void_votesType& x)
        {
          this->specific_unconscious_void_votes_.set (x);
        }

        void StationTally::
        setSpecific_unconscious_void_votes (const Specific_unconscious_void_votesOptional& x)
        {
          this->specific_unconscious_void_votes_ = x;
        }

        void StationTally::
        setSpecific_unconscious_void_votes (::std::auto_ptr< Specific_unconscious_void_votesType > x)
        {
          this->specific_unconscious_void_votes_.set (x);
        }

        const StationTally::Specific_total_void_votesOptional& StationTally::
        getSpecific_total_void_votes () const
        {
          return this->specific_total_void_votes_;
        }

        StationTally::Specific_total_void_votesOptional& StationTally::
        getSpecific_total_void_votes ()
        {
          return this->specific_total_void_votes_;
        }

        void StationTally::
        setSpecific_total_void_votes (const Specific_total_void_votesType& x)
        {
          this->specific_total_void_votes_.set (x);
        }

        void StationTally::
        setSpecific_total_void_votes (const Specific_total_void_votesOptional& x)
        {
          this->specific_total_void_votes_ = x;
        }

        void StationTally::
        setSpecific_total_void_votes (::std::auto_ptr< Specific_total_void_votesType > x)
        {
          this->specific_total_void_votes_.set (x);
        }

        const StationTally::Complete_total_void_votesOptional& StationTally::
        getComplete_total_void_votes () const
        {
          return this->complete_total_void_votes_;
        }

        StationTally::Complete_total_void_votesOptional& StationTally::
        getComplete_total_void_votes ()
        {
          return this->complete_total_void_votes_;
        }

        void StationTally::
        setComplete_total_void_votes (const Complete_total_void_votesType& x)
        {
          this->complete_total_void_votes_.set (x);
        }

        void StationTally::
        setComplete_total_void_votes (const Complete_total_void_votesOptional& x)
        {
          this->complete_total_void_votes_ = x;
        }

        void StationTally::
        setComplete_total_void_votes (::std::auto_ptr< Complete_total_void_votesType > x)
        {
          this->complete_total_void_votes_.set (x);
        }

        const StationTally::Empty_votesOptional& StationTally::
        getEmptyVotes () const
        {
          return this->empty_votes_;
        }

        StationTally::Empty_votesOptional& StationTally::
        getEmptyVotes ()
        {
          return this->empty_votes_;
        }

        void StationTally::
        setEmptyVotes (const Empty_votesType& x)
        {
          this->empty_votes_.set (x);
        }

        void StationTally::
        setEmptyVotes (const Empty_votesOptional& x)
        {
          this->empty_votes_ = x;
        }

        const StationTally::OvervotesOptional& StationTally::
        getOvervotes () const
        {
          return this->overvotes_;
        }

        StationTally::OvervotesOptional& StationTally::
        getOvervotes ()
        {
          return this->overvotes_;
        }

        void StationTally::
        setOvervotes (const OvervotesType& x)
        {
          this->overvotes_.set (x);
        }

        void StationTally::
        setOvervotes (const OvervotesOptional& x)
        {
          this->overvotes_ = x;
        }

        const StationTally::Processed_votesOptional& StationTally::
        getProcessedVotes () const
        {
          return this->processed_votes_;
        }

        StationTally::Processed_votesOptional& StationTally::
        getProcessedVotes ()
        {
          return this->processed_votes_;
        }

        void StationTally::
        setProcessedVotes (const Processed_votesType& x)
        {
          this->processed_votes_.set (x);
        }

        void StationTally::
        setProcessedVotes (const Processed_votesOptional& x)
        {
          this->processed_votes_ = x;
        }

        const StationTally::Logical_voter_group_codeOptional& StationTally::
        getLogical_voter_group_code () const
        {
          return this->logical_voter_group_code_;
        }

        StationTally::Logical_voter_group_codeOptional& StationTally::
        getLogical_voter_group_code ()
        {
          return this->logical_voter_group_code_;
        }

        void StationTally::
        setLogical_voter_group_code (const Logical_voter_group_codeType& x)
        {
          this->logical_voter_group_code_.set (x);
        }

        void StationTally::
        setLogical_voter_group_code (const Logical_voter_group_codeOptional& x)
        {
          this->logical_voter_group_code_ = x;
        }

        void StationTally::
        setLogical_voter_group_code (::std::auto_ptr< Logical_voter_group_codeType > x)
        {
          this->logical_voter_group_code_.set (x);
        }

        const StationTally::Reserved0Optional& StationTally::
        getReserved0 () const
        {
          return this->reserved0_;
        }

        StationTally::Reserved0Optional& StationTally::
        getReserved0 ()
        {
          return this->reserved0_;
        }

        void StationTally::
        setReserved0 (const Reserved0Type& x)
        {
          this->reserved0_.set (x);
        }

        void StationTally::
        setReserved0 (const Reserved0Optional& x)
        {
          this->reserved0_ = x;
        }

        void StationTally::
        setReserved0 (::std::auto_ptr< Reserved0Type > x)
        {
          this->reserved0_.set (x);
        }

        const StationTally::Reserved1Optional& StationTally::
        getReserved1 () const
        {
          return this->reserved1_;
        }

        StationTally::Reserved1Optional& StationTally::
        getReserved1 ()
        {
          return this->reserved1_;
        }

        void StationTally::
        setReserved1 (const Reserved1Type& x)
        {
          this->reserved1_.set (x);
        }

        void StationTally::
        setReserved1 (const Reserved1Optional& x)
        {
          this->reserved1_ = x;
        }

        void StationTally::
        setReserved1 (::std::auto_ptr< Reserved1Type > x)
        {
          this->reserved1_.set (x);
        }

        const StationTally::Selected_votesOptional& StationTally::
        getSelectedVotes () const
        {
          return this->selected_votes_;
        }

        StationTally::Selected_votesOptional& StationTally::
        getSelectedVotes ()
        {
          return this->selected_votes_;
        }

        void StationTally::
        setSelectedVotes (const Selected_votesType& x)
        {
          this->selected_votes_.set (x);
        }

        void StationTally::
        setSelectedVotes (const Selected_votesOptional& x)
        {
          this->selected_votes_ = x;
        }

        const StationTally::Codi_checksumOptional& StationTally::
        getCodiChecksum () const
        {
          return this->codi_checksum_;
        }

        StationTally::Codi_checksumOptional& StationTally::
        getCodiChecksum ()
        {
          return this->codi_checksum_;
        }

        void StationTally::
        setCodiChecksum (const Codi_checksumType& x)
        {
          this->codi_checksum_.set (x);
        }

        void StationTally::
        setCodiChecksum (const Codi_checksumOptional& x)
        {
          this->codi_checksum_ = x;
        }


        // Register
        // 

        const Register::BoOptional& Register::
        getBallotOption () const
        {
          return this->bo_;
        }

        Register::BoOptional& Register::
        getBallotOption ()
        {
          return this->bo_;
        }

        void Register::
        setBallotOption (const BoType& x)
        {
          this->bo_.set (x);
        }

        void Register::
        setBallotOption (const BoOptional& x)
        {
          this->bo_ = x;
        }

        void Register::
        setBallotOption (::std::auto_ptr< BoType > x)
        {
          this->bo_.set (x);
        }

        const Register::TOptional& Register::
        getTotal () const
        {
          return this->t_;
        }

        Register::TOptional& Register::
        getTotal ()
        {
          return this->t_;
        }

        void Register::
        setTotal (const TType& x)
        {
          this->t_.set (x);
        }

        void Register::
        setTotal (const TOptional& x)
        {
          this->t_ = x;
        }

        const Register::T2Optional& Register::
        getT2 () const
        {
          return this->t2_;
        }

        Register::T2Optional& Register::
        getT2 ()
        {
          return this->t2_;
        }

        void Register::
        setT2 (const T2Type& x)
        {
          this->t2_.set (x);
        }

        void Register::
        setT2 (const T2Optional& x)
        {
          this->t2_ = x;
        }

        const Register::L1Optional& Register::
        getCountList () const
        {
          return this->l1_;
        }

        Register::L1Optional& Register::
        getCountList ()
        {
          return this->l1_;
        }

        void Register::
        setCountList (const L1Type& x)
        {
          this->l1_.set (x);
        }

        void Register::
        setCountList (const L1Optional& x)
        {
          this->l1_ = x;
        }

        const Register::L2Optional& Register::
        getCountListP () const
        {
          return this->l2_;
        }

        Register::L2Optional& Register::
        getCountListP ()
        {
          return this->l2_;
        }

        void Register::
        setCountListP (const L2Type& x)
        {
          this->l2_.set (x);
        }

        void Register::
        setCountListP (const L2Optional& x)
        {
          this->l2_ = x;
        }

        const Register::L3Optional& Register::
        getCountListPS () const
        {
          return this->l3_;
        }

        Register::L3Optional& Register::
        getCountListPS ()
        {
          return this->l3_;
        }

        void Register::
        setCountListPS (const L3Type& x)
        {
          this->l3_.set (x);
        }

        void Register::
        setCountListPS (const L3Optional& x)
        {
          this->l3_ = x;
        }

        const Register::L4Optional& Register::
        getCountListS () const
        {
          return this->l4_;
        }

        Register::L4Optional& Register::
        getCountListS ()
        {
          return this->l4_;
        }

        void Register::
        setCountListS (const L4Type& x)
        {
          this->l4_.set (x);
        }

        void Register::
        setCountListS (const L4Optional& x)
        {
          this->l4_ = x;
        }

        const Register::C_sumOptional& Register::
        getCheckSum () const
        {
          return this->c_sum_;
        }

        Register::C_sumOptional& Register::
        getCheckSum ()
        {
          return this->c_sum_;
        }

        void Register::
        setCheckSum (const C_sumType& x)
        {
          this->c_sum_.set (x);
        }

        void Register::
        setCheckSum (const C_sumOptional& x)
        {
          this->c_sum_ = x;
        }


        // Type
        // 

        Type::
        Type ()
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String ()
        {
        }

        Type::
        Type (Value v)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (_xsd_Type_literals_[v])
        {
        }

        Type::
        Type (const char* v)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (v)
        {
        }

        Type::
        Type (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (v)
        {
        }

        Type::
        Type (const ::Smartmatic::SAES::Voting::StationTallyTypes::String& v)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (v)
        {
        }

        Type::
        Type (const Type& v,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (v, f, c)
        {
        }

        Type& Type::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::StationTallyTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::StationTallyTypes::String (_xsd_Type_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        // StationTally
        //

        StationTally::
        StationTally ()
        : ::Smartmatic::SAES::Voting::StationTallyTypes::Type (),
          r_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          number_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          contest_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          automatic_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          complete_unconscious_void_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          specific_unconscious_void_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          specific_total_void_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          complete_total_void_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          empty_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          overvotes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          processed_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          logical_voter_group_code_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          reserved0_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          reserved1_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          selected_votes_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          codi_checksum_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this)
        {
        }

        StationTally::
        StationTally (const StationTally& x,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::Type (x, f, c),
          r_ (x.r_, f, this),
          type_ (x.type_, f, this),
          number_ (x.number_, f, this),
          contest_ (x.contest_, f, this),
          automatic_votes_ (x.automatic_votes_, f, this),
          complete_unconscious_void_votes_ (x.complete_unconscious_void_votes_, f, this),
          specific_unconscious_void_votes_ (x.specific_unconscious_void_votes_, f, this),
          specific_total_void_votes_ (x.specific_total_void_votes_, f, this),
          complete_total_void_votes_ (x.complete_total_void_votes_, f, this),
          empty_votes_ (x.empty_votes_, f, this),
          overvotes_ (x.overvotes_, f, this),
          processed_votes_ (x.processed_votes_, f, this),
          logical_voter_group_code_ (x.logical_voter_group_code_, f, this),
          reserved0_ (x.reserved0_, f, this),
          reserved1_ (x.reserved1_, f, this),
          selected_votes_ (x.selected_votes_, f, this),
          codi_checksum_ (x.codi_checksum_, f, this)
        {
        }

        StationTally::
        StationTally (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::Type (e, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::base, c),
          r_ (f, this),
          type_ (f, this),
          number_ (f, this),
          contest_ (f, this),
          automatic_votes_ (f, this),
          complete_unconscious_void_votes_ (f, this),
          specific_unconscious_void_votes_ (f, this),
          specific_total_void_votes_ (f, this),
          complete_total_void_votes_ (f, this),
          empty_votes_ (f, this),
          overvotes_ (f, this),
          processed_votes_ (f, this),
          logical_voter_group_code_ (f, this),
          reserved0_ (f, this),
          reserved1_ (f, this),
          selected_votes_ (f, this),
          codi_checksum_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void StationTally::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // r
            //
            if (n.name () == "r" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< RType > r (
                RTraits::create (i, f, this));

              this->r_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }

            if (n.name () == "number" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NumberType > r (
                NumberTraits::create (i, f, this));

              this->number_.set (r);
              continue;
            }

            if (n.name () == "contest" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ContestType > r (
                ContestTraits::create (i, f, this));

              this->contest_.set (r);
              continue;
            }

            if (n.name () == "automatic-votes" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Automatic_votesType > r (
                Automatic_votesTraits::create (i, f, this));

              this->automatic_votes_.set (r);
              continue;
            }

            if (n.name () == "complete-unconscious-void-votes" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Complete_unconscious_void_votesType > r (
                Complete_unconscious_void_votesTraits::create (i, f, this));

              this->complete_unconscious_void_votes_.set (r);
              continue;
            }

            if (n.name () == "specific-unconscious-void-votes" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Specific_unconscious_void_votesType > r (
                Specific_unconscious_void_votesTraits::create (i, f, this));

              this->specific_unconscious_void_votes_.set (r);
              continue;
            }

            if (n.name () == "specific-total-void-votes" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Specific_total_void_votesType > r (
                Specific_total_void_votesTraits::create (i, f, this));

              this->specific_total_void_votes_.set (r);
              continue;
            }

            if (n.name () == "complete-total-void-votes" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Complete_total_void_votesType > r (
                Complete_total_void_votesTraits::create (i, f, this));

              this->complete_total_void_votes_.set (r);
              continue;
            }

            if (n.name () == "empty-votes" && n.namespace_ ().empty ())
            {
              this->empty_votes_.set (Empty_votesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "overvotes" && n.namespace_ ().empty ())
            {
              this->overvotes_.set (OvervotesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "processed-votes" && n.namespace_ ().empty ())
            {
              this->processed_votes_.set (Processed_votesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "logical-voter-group-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Logical_voter_group_codeType > r (
                Logical_voter_group_codeTraits::create (i, f, this));

              this->logical_voter_group_code_.set (r);
              continue;
            }

            if (n.name () == "reserved0" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Reserved0Type > r (
                Reserved0Traits::create (i, f, this));

              this->reserved0_.set (r);
              continue;
            }

            if (n.name () == "reserved1" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Reserved1Type > r (
                Reserved1Traits::create (i, f, this));

              this->reserved1_.set (r);
              continue;
            }

            if (n.name () == "selected-votes" && n.namespace_ ().empty ())
            {
              this->selected_votes_.set (Selected_votesTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "codi-checksum" && n.namespace_ ().empty ())
            {
              this->codi_checksum_.set (Codi_checksumTraits::create (i, f, this));
              continue;
            }
          }
        }

        StationTally* StationTally::
        _clone (::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c) const
        {
          return new class StationTally (*this, f, c);
        }

        StationTally::
        ~StationTally ()
        {
        }

        bool
        operator== (const StationTally& x, const StationTally& y)
        {
          if (!(x.getRegisters () == y.getRegisters ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          if (!(x.getNumber () == y.getNumber ()))
            return false;

          if (!(x.getContest () == y.getContest ()))
            return false;

          if (!(x.getAutomatic_votes () == y.getAutomatic_votes ()))
            return false;

          if (!(x.getComplete_unconscious_void_votes () == y.getComplete_unconscious_void_votes ()))
            return false;

          if (!(x.getSpecific_unconscious_void_votes () == y.getSpecific_unconscious_void_votes ()))
            return false;

          if (!(x.getSpecific_total_void_votes () == y.getSpecific_total_void_votes ()))
            return false;

          if (!(x.getComplete_total_void_votes () == y.getComplete_total_void_votes ()))
            return false;

          if (!(x.getEmptyVotes () == y.getEmptyVotes ()))
            return false;

          if (!(x.getOvervotes () == y.getOvervotes ()))
            return false;

          if (!(x.getProcessedVotes () == y.getProcessedVotes ()))
            return false;

          if (!(x.getLogical_voter_group_code () == y.getLogical_voter_group_code ()))
            return false;

          if (!(x.getReserved0 () == y.getReserved0 ()))
            return false;

          if (!(x.getReserved1 () == y.getReserved1 ()))
            return false;

          if (!(x.getSelectedVotes () == y.getSelectedVotes ()))
            return false;

          if (!(x.getCodiChecksum () == y.getCodiChecksum ()))
            return false;

          return true;
        }

        bool
        operator!= (const StationTally& x, const StationTally& y)
        {
          return !(x == y);
        }

        // Register
        //

        Register::
        Register ()
        : ::Smartmatic::SAES::Voting::StationTallyTypes::Type (),
          bo_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          t_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          t2_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          l1_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          l2_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          l3_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          l4_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this),
          c_sum_ (::Smartmatic::SAES::Voting::StationTallyTypes::Flags (), this)
        {
        }

        Register::
        Register (const Register& x,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::Type (x, f, c),
          bo_ (x.bo_, f, this),
          t_ (x.t_, f, this),
          t2_ (x.t2_, f, this),
          l1_ (x.l1_, f, this),
          l2_ (x.l2_, f, this),
          l3_ (x.l3_, f, this),
          l4_ (x.l4_, f, this),
          c_sum_ (x.c_sum_, f, this)
        {
        }

        Register::
        Register (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::Type (e, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::base, c),
          bo_ (f, this),
          t_ (f, this),
          t2_ (f, this),
          l1_ (f, this),
          l2_ (f, this),
          l3_ (f, this),
          l4_ (f, this),
          c_sum_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Register::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "bo" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< BoType > r (
                BoTraits::create (i, f, this));

              this->bo_.set (r);
              continue;
            }

            if (n.name () == "t" && n.namespace_ ().empty ())
            {
              this->t_.set (TTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "t2" && n.namespace_ ().empty ())
            {
              this->t2_.set (T2Traits::create (i, f, this));
              continue;
            }

            if (n.name () == "l1" && n.namespace_ ().empty ())
            {
              this->l1_.set (L1Traits::create (i, f, this));
              continue;
            }

            if (n.name () == "l2" && n.namespace_ ().empty ())
            {
              this->l2_.set (L2Traits::create (i, f, this));
              continue;
            }

            if (n.name () == "l3" && n.namespace_ ().empty ())
            {
              this->l3_.set (L3Traits::create (i, f, this));
              continue;
            }

            if (n.name () == "l4" && n.namespace_ ().empty ())
            {
              this->l4_.set (L4Traits::create (i, f, this));
              continue;
            }

            if (n.name () == "c-sum" && n.namespace_ ().empty ())
            {
              this->c_sum_.set (C_sumTraits::create (i, f, this));
              continue;
            }
          }
        }

        Register* Register::
        _clone (::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c) const
        {
          return new class Register (*this, f, c);
        }

        Register::
        ~Register ()
        {
        }

        bool
        operator== (const Register& x, const Register& y)
        {
          if (!(x.getBallotOption () == y.getBallotOption ()))
            return false;

          if (!(x.getTotal () == y.getTotal ()))
            return false;

          if (!(x.getT2 () == y.getT2 ()))
            return false;

          if (!(x.getCountList () == y.getCountList ()))
            return false;

          if (!(x.getCountListP () == y.getCountListP ()))
            return false;

          if (!(x.getCountListPS () == y.getCountListPS ()))
            return false;

          if (!(x.getCountListS () == y.getCountListS ()))
            return false;

          if (!(x.getCheckSum () == y.getCheckSum ()))
            return false;

          return true;
        }

        bool
        operator!= (const Register& x, const Register& y)
        {
          return !(x == y);
        }

        // Type
        //

        Type::
        Type (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (e, f, c)
        {
          _xsd_Type_convert ();
        }

        Type::
        Type (const ::xercesc::DOMAttr& a,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (a, f, c)
        {
          _xsd_Type_convert ();
        }

        Type::
        Type (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
              ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c)
        : ::Smartmatic::SAES::Voting::StationTallyTypes::String (s, e, f, c)
        {
          _xsd_Type_convert ();
        }

        Type* Type::
        _clone (::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c) const
        {
          return new class Type (*this, f, c);
        }

        Type::Value Type::
        _xsd_Type_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Type_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Type_indexes_,
                            _xsd_Type_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_Type_indexes_ + 3 || _xsd_Type_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Type::
        _xsd_Type_literals_[3] =
        {
          "AUTOMATED",
          "MANUAL",
          "OMR"
        };

        const Type::Value Type::
        _xsd_Type_indexes_[3] =
        {
          ::Smartmatic::SAES::Voting::Vote::Type::STATION_TALLY_AUTOMATED,
          ::Smartmatic::SAES::Voting::Vote::Type::STATION_TALLY_MANUAL,
          ::Smartmatic::SAES::Voting::Vote::Type::STATION_TALLY_OMR
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::std::string& u,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
            ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
              d, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::std::string& u,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
            ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
              d, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
            ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
              d, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseStn_tly (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseStn_tly (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseStn_tly (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      const ::std::string& sid,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseStn_tly (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      const ::std::string& sid,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseStn_tly (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseStn_tly (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::xercesc::InputSource& i,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
            ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
              d, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::xercesc::InputSource& i,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
            ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
              d, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
            ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
              d, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::xercesc::DOMDocument& d,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
              ::Smartmatic::SAES::Voting::Vote::parseStn_tly (
                c, f | ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "stn-tly" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Vote::StationTally, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "stn-tly",
            "http://www.smartmatic.com/Saes/Voting/Vote");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::StationTallyTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "stn-tly" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Vote::StationTally, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "stn-tly",
            "http://www.smartmatic.com/Saes/Voting/Vote");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        void
        serializeStn_tly (::std::ostream& o,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeStn_tly (::std::ostream& o,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& h,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::StationTallyTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeStn_tly (::std::ostream& o,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeStn_tly (::xercesc::XMLFormatTarget& t,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeStn_tly (::xercesc::XMLFormatTarget& t,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& h,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeStn_tly (::xercesc::XMLFormatTarget& t,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          const ::std::string& e,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeStn_tly (::xercesc::DOMDocument& d,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "stn-tly" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "stn-tly",
              "http://www.smartmatic.com/Saes/Voting/Vote");
          }
        }

        ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeStn_tly (const ::Smartmatic::SAES::Voting::Vote::StationTally& s,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "stn-tly",
              "http://www.smartmatic.com/Saes/Voting/Vote",
              m, f));

          ::Smartmatic::SAES::Voting::Vote::serializeStn_tly (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const StationTally& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::StationTallyTypes::Type& > (i);

          // r
          //
          for (StationTally::RConstIterator
               b (i.getRegisters ().begin ()), n (i.getRegisters ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "r",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }

          // type
          //
          if (i.getType ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << *i.getType ();
          }

          // number
          //
          if (i.getNumber ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "number",
                e));

            a << *i.getNumber ();
          }

          // contest
          //
          if (i.getContest ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest",
                e));

            a << *i.getContest ();
          }

          // automatic-votes
          //
          if (i.getAutomatic_votes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "automatic-votes",
                e));

            a << *i.getAutomatic_votes ();
          }

          // complete-unconscious-void-votes
          //
          if (i.getComplete_unconscious_void_votes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "complete-unconscious-void-votes",
                e));

            a << *i.getComplete_unconscious_void_votes ();
          }

          // specific-unconscious-void-votes
          //
          if (i.getSpecific_unconscious_void_votes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "specific-unconscious-void-votes",
                e));

            a << *i.getSpecific_unconscious_void_votes ();
          }

          // specific-total-void-votes
          //
          if (i.getSpecific_total_void_votes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "specific-total-void-votes",
                e));

            a << *i.getSpecific_total_void_votes ();
          }

          // complete-total-void-votes
          //
          if (i.getComplete_total_void_votes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "complete-total-void-votes",
                e));

            a << *i.getComplete_total_void_votes ();
          }

          // empty-votes
          //
          if (i.getEmptyVotes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "empty-votes",
                e));

            a << *i.getEmptyVotes ();
          }

          // overvotes
          //
          if (i.getOvervotes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "overvotes",
                e));

            a << *i.getOvervotes ();
          }

          // processed-votes
          //
          if (i.getProcessedVotes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "processed-votes",
                e));

            a << *i.getProcessedVotes ();
          }

          // logical-voter-group-code
          //
          if (i.getLogical_voter_group_code ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "logical-voter-group-code",
                e));

            a << *i.getLogical_voter_group_code ();
          }

          // reserved0
          //
          if (i.getReserved0 ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "reserved0",
                e));

            a << *i.getReserved0 ();
          }

          // reserved1
          //
          if (i.getReserved1 ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "reserved1",
                e));

            a << *i.getReserved1 ();
          }

          // selected-votes
          //
          if (i.getSelectedVotes ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "selected-votes",
                e));

            a << *i.getSelectedVotes ();
          }

          // codi-checksum
          //
          if (i.getCodiChecksum ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "codi-checksum",
                e));

            a << *i.getCodiChecksum ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Register& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::StationTallyTypes::Type& > (i);

          // bo
          //
          if (i.getBallotOption ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "bo",
                e));

            a << *i.getBallotOption ();
          }

          // t
          //
          if (i.getTotal ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "t",
                e));

            a << *i.getTotal ();
          }

          // t2
          //
          if (i.getT2 ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "t2",
                e));

            a << *i.getT2 ();
          }

          // l1
          //
          if (i.getCountList ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "l1",
                e));

            a << *i.getCountList ();
          }

          // l2
          //
          if (i.getCountListP ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "l2",
                e));

            a << *i.getCountListP ();
          }

          // l3
          //
          if (i.getCountListPS ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "l3",
                e));

            a << *i.getCountListPS ();
          }

          // l4
          //
          if (i.getCountListS ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "l4",
                e));

            a << *i.getCountListS ();
          }

          // c-sum
          //
          if (i.getCheckSum ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "c-sum",
                e));

            a << *i.getCheckSum ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Type& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::StationTallyTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Type& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::StationTallyTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::StationTallyTypes::ListStream& l,
                    const Type& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::StationTallyTypes::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

