// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from station-tally-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_STATION_TALLY_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_STATION_TALLY_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace StationTallyTypes
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__STATIONTALLYTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__STATIONTALLYTYPES
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        class StationTally;
        class Register;
        class Type;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/Vote
       * schema namespace.
       */
      namespace Vote
      {
        /**
         * @brief Class corresponding to the %StationTally schema type.
         *
         * @nosubgrouping
         */
        class StationTally: public ::Smartmatic::SAES::Voting::StationTallyTypes::Type
        {
          public:
          /**
           * @name r
           *
           * @brief Accessor and modifier functions for the %r
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Vote::Register RType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< RType > RSequence;

          /**
           * @brief Element iterator type.
           */
          typedef RSequence::iterator RIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef RSequence::const_iterator RConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RType, char > RTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const RSequence&
          getRegisters () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          RSequence&
          getRegisters ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setRegisters (const RSequence& s);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Vote::Type TypeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TypeOptional&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          TypeOptional&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setType (const TypeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name number
           *
           * @brief Accessor and modifier functions for the %number
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String NumberType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NumberType > NumberOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NumberOptional&
          getNumber () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          NumberOptional&
          getNumber ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNumber (const NumberType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setNumber (const NumberOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setNumber (::std::auto_ptr< NumberType > p);

          //@}

          /**
           * @name contest
           *
           * @brief Accessor and modifier functions for the %contest
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String ContestType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ContestType > ContestOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ContestType, char > ContestTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ContestOptional&
          getContest () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          ContestOptional&
          getContest ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest (const ContestType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setContest (const ContestOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setContest (::std::auto_ptr< ContestType > p);

          //@}

          /**
           * @name automatic-votes
           *
           * @brief Accessor and modifier functions for the %automatic-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Automatic_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Automatic_votesType > Automatic_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Automatic_votesType, char > Automatic_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Automatic_votesOptional&
          getAutomatic_votes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Automatic_votesOptional&
          getAutomatic_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAutomatic_votes (const Automatic_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setAutomatic_votes (const Automatic_votesOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setAutomatic_votes (::std::auto_ptr< Automatic_votesType > p);

          //@}

          /**
           * @name complete-unconscious-void-votes
           *
           * @brief Accessor and modifier functions for the %complete-unconscious-void-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Complete_unconscious_void_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Complete_unconscious_void_votesType > Complete_unconscious_void_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Complete_unconscious_void_votesType, char > Complete_unconscious_void_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Complete_unconscious_void_votesOptional&
          getComplete_unconscious_void_votes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Complete_unconscious_void_votesOptional&
          getComplete_unconscious_void_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setComplete_unconscious_void_votes (const Complete_unconscious_void_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setComplete_unconscious_void_votes (const Complete_unconscious_void_votesOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setComplete_unconscious_void_votes (::std::auto_ptr< Complete_unconscious_void_votesType > p);

          //@}

          /**
           * @name specific-unconscious-void-votes
           *
           * @brief Accessor and modifier functions for the %specific-unconscious-void-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Specific_unconscious_void_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Specific_unconscious_void_votesType > Specific_unconscious_void_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Specific_unconscious_void_votesType, char > Specific_unconscious_void_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Specific_unconscious_void_votesOptional&
          getSpecific_unconscious_void_votes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Specific_unconscious_void_votesOptional&
          getSpecific_unconscious_void_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSpecific_unconscious_void_votes (const Specific_unconscious_void_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setSpecific_unconscious_void_votes (const Specific_unconscious_void_votesOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setSpecific_unconscious_void_votes (::std::auto_ptr< Specific_unconscious_void_votesType > p);

          //@}

          /**
           * @name specific-total-void-votes
           *
           * @brief Accessor and modifier functions for the %specific-total-void-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Specific_total_void_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Specific_total_void_votesType > Specific_total_void_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Specific_total_void_votesType, char > Specific_total_void_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Specific_total_void_votesOptional&
          getSpecific_total_void_votes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Specific_total_void_votesOptional&
          getSpecific_total_void_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSpecific_total_void_votes (const Specific_total_void_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setSpecific_total_void_votes (const Specific_total_void_votesOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setSpecific_total_void_votes (::std::auto_ptr< Specific_total_void_votesType > p);

          //@}

          /**
           * @name complete-total-void-votes
           *
           * @brief Accessor and modifier functions for the %complete-total-void-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Complete_total_void_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Complete_total_void_votesType > Complete_total_void_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Complete_total_void_votesType, char > Complete_total_void_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Complete_total_void_votesOptional&
          getComplete_total_void_votes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Complete_total_void_votesOptional&
          getComplete_total_void_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setComplete_total_void_votes (const Complete_total_void_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setComplete_total_void_votes (const Complete_total_void_votesOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setComplete_total_void_votes (::std::auto_ptr< Complete_total_void_votesType > p);

          //@}

          /**
           * @name empty-votes
           *
           * @brief Accessor and modifier functions for the %empty-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger Empty_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Empty_votesType > Empty_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Empty_votesType, char > Empty_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Empty_votesOptional&
          getEmptyVotes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Empty_votesOptional&
          getEmptyVotes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setEmptyVotes (const Empty_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setEmptyVotes (const Empty_votesOptional& x);

          //@}

          /**
           * @name overvotes
           *
           * @brief Accessor and modifier functions for the %overvotes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger OvervotesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< OvervotesType > OvervotesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< OvervotesType, char > OvervotesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const OvervotesOptional&
          getOvervotes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          OvervotesOptional&
          getOvervotes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setOvervotes (const OvervotesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setOvervotes (const OvervotesOptional& x);

          //@}

          /**
           * @name processed-votes
           *
           * @brief Accessor and modifier functions for the %processed-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger Processed_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Processed_votesType > Processed_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Processed_votesType, char > Processed_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Processed_votesOptional&
          getProcessedVotes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Processed_votesOptional&
          getProcessedVotes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setProcessedVotes (const Processed_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setProcessedVotes (const Processed_votesOptional& x);

          //@}

          /**
           * @name logical-voter-group-code
           *
           * @brief Accessor and modifier functions for the %logical-voter-group-code
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Logical_voter_group_codeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Logical_voter_group_codeType > Logical_voter_group_codeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_group_codeType, char > Logical_voter_group_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Logical_voter_group_codeOptional&
          getLogical_voter_group_code () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Logical_voter_group_codeOptional&
          getLogical_voter_group_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setLogical_voter_group_code (const Logical_voter_group_codeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setLogical_voter_group_code (const Logical_voter_group_codeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setLogical_voter_group_code (::std::auto_ptr< Logical_voter_group_codeType > p);

          //@}

          /**
           * @name reserved0
           *
           * @brief Accessor and modifier functions for the %reserved0
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Reserved0Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Reserved0Type > Reserved0Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Reserved0Type, char > Reserved0Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Reserved0Optional&
          getReserved0 () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Reserved0Optional&
          getReserved0 ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setReserved0 (const Reserved0Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setReserved0 (const Reserved0Optional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setReserved0 (::std::auto_ptr< Reserved0Type > p);

          //@}

          /**
           * @name reserved1
           *
           * @brief Accessor and modifier functions for the %reserved1
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String Reserved1Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Reserved1Type > Reserved1Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Reserved1Type, char > Reserved1Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Reserved1Optional&
          getReserved1 () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Reserved1Optional&
          getReserved1 ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setReserved1 (const Reserved1Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setReserved1 (const Reserved1Optional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setReserved1 (::std::auto_ptr< Reserved1Type > p);

          //@}

          /**
           * @name selected-votes
           *
           * @brief Accessor and modifier functions for the %selected-votes
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger Selected_votesType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Selected_votesType > Selected_votesOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Selected_votesType, char > Selected_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Selected_votesOptional&
          getSelectedVotes () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Selected_votesOptional&
          getSelectedVotes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSelectedVotes (const Selected_votesType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setSelectedVotes (const Selected_votesOptional& x);

          //@}

          /**
           * @name codi-checksum
           *
           * @brief Accessor and modifier functions for the %codi-checksum
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger Codi_checksumType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Codi_checksumType > Codi_checksumOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Codi_checksumType, char > Codi_checksumTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Codi_checksumOptional&
          getCodiChecksum () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Codi_checksumOptional&
          getCodiChecksum ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCodiChecksum (const Codi_checksumType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCodiChecksum (const Codi_checksumOptional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          StationTally ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StationTally (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          StationTally (const StationTally& x,
                        ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StationTally*
          _clone (::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~StationTally ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::StationTallyTypes::Flags);

          protected:
          RSequence r_;
          TypeOptional type_;
          NumberOptional number_;
          ContestOptional contest_;
          Automatic_votesOptional automatic_votes_;
          Complete_unconscious_void_votesOptional complete_unconscious_void_votes_;
          Specific_unconscious_void_votesOptional specific_unconscious_void_votes_;
          Specific_total_void_votesOptional specific_total_void_votes_;
          Complete_total_void_votesOptional complete_total_void_votes_;
          Empty_votesOptional empty_votes_;
          OvervotesOptional overvotes_;
          Processed_votesOptional processed_votes_;
          Logical_voter_group_codeOptional logical_voter_group_code_;
          Reserved0Optional reserved0_;
          Reserved1Optional reserved1_;
          Selected_votesOptional selected_votes_;
          Codi_checksumOptional codi_checksum_;

          //@endcond
        };

        bool
        operator== (const StationTally&, const StationTally&);

        bool
        operator!= (const StationTally&, const StationTally&);


        /**
         * @brief Class corresponding to the %Register schema type.
         *
         * @nosubgrouping
         */
        class Register: public ::Smartmatic::SAES::Voting::StationTallyTypes::Type
        {
          public:
          /**
           * @name bo
           *
           * @brief Accessor and modifier functions for the %bo
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::String BoType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< BoType > BoOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< BoType, char > BoTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const BoOptional&
          getBallotOption () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          BoOptional&
          getBallotOption ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBallotOption (const BoType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setBallotOption (const BoOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setBallotOption (::std::auto_ptr< BoType > p);

          //@}

          /**
           * @name t
           *
           * @brief Accessor and modifier functions for the %t
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger TType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TType > TOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TType, char > TTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TOptional&
          getTotal () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          TOptional&
          getTotal ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTotal (const TType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setTotal (const TOptional& x);

          //@}

          /**
           * @name t2
           *
           * @brief Accessor and modifier functions for the %t2
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger T2Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< T2Type > T2Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< T2Type, char > T2Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const T2Optional&
          getT2 () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          T2Optional&
          getT2 ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setT2 (const T2Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setT2 (const T2Optional& x);

          //@}

          /**
           * @name l1
           *
           * @brief Accessor and modifier functions for the %l1
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger L1Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< L1Type > L1Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< L1Type, char > L1Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const L1Optional&
          getCountList () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          L1Optional&
          getCountList ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCountList (const L1Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCountList (const L1Optional& x);

          //@}

          /**
           * @name l2
           *
           * @brief Accessor and modifier functions for the %l2
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger L2Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< L2Type > L2Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< L2Type, char > L2Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const L2Optional&
          getCountListP () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          L2Optional&
          getCountListP ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCountListP (const L2Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCountListP (const L2Optional& x);

          //@}

          /**
           * @name l3
           *
           * @brief Accessor and modifier functions for the %l3
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger L3Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< L3Type > L3Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< L3Type, char > L3Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const L3Optional&
          getCountListPS () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          L3Optional&
          getCountListPS ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCountListPS (const L3Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCountListPS (const L3Optional& x);

          //@}

          /**
           * @name l4
           *
           * @brief Accessor and modifier functions for the %l4
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger L4Type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< L4Type > L4Optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< L4Type, char > L4Traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const L4Optional&
          getCountListS () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          L4Optional&
          getCountListS ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCountListS (const L4Type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCountListS (const L4Optional& x);

          //@}

          /**
           * @name c-sum
           *
           * @brief Accessor and modifier functions for the %c-sum
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::StationTallyTypes::NonNegativeInteger C_sumType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< C_sumType > C_sumOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< C_sumType, char > C_sumTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const C_sumOptional&
          getCheckSum () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          C_sumOptional&
          getCheckSum ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCheckSum (const C_sumType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCheckSum (const C_sumOptional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Register ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Register (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Register (const Register& x,
                    ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Register*
          _clone (::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Register ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::StationTallyTypes::Flags);

          protected:
          BoOptional bo_;
          TOptional t_;
          T2Optional t2_;
          L1Optional l1_;
          L2Optional l2_;
          L3Optional l3_;
          L4Optional l4_;
          C_sumOptional c_sum_;

          //@endcond
        };

        bool
        operator== (const Register&, const Register&);

        bool
        operator!= (const Register&, const Register&);


        /**
         * @brief Enumeration class corresponding to the %type
         * schema type.
         */
        class Type: public ::Smartmatic::SAES::Voting::StationTallyTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            STATION_TALLY_AUTOMATED,
            STATION_TALLY_MANUAL,
            STATION_TALLY_OMR
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Type ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Type (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Type (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Type (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Type (const ::Smartmatic::SAES::Voting::StationTallyTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type (const ::xercesc::DOMAttr& a,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Type (const Type& x,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Type*
          _clone (::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::StationTallyTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Type&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Type_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Type_convert () const;

          public:
          static const char* const _xsd_Type_literals_[3];
          static const Value _xsd_Type_indexes_[3];

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        /**
         * @name Parsing functions for the %stn-tly document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::std::string& uri,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::std::string& uri,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      const ::std::string& id,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      const ::std::string& id,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::xercesc::InputSource& is,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::xercesc::InputSource& is,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (const ::xercesc::DOMDocument& d,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::StationTally >
        parseStn_tly (::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0,
                      const ::Smartmatic::SAES::Voting::StationTallyTypes::Properties& p = ::Smartmatic::SAES::Voting::StationTallyTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        /**
         * @name Serialization functions for the %stn-tly document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeStn_tly (::std::ostream& os,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeStn_tly (::std::ostream& os,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& eh,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeStn_tly (::std::ostream& os,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeStn_tly (::xercesc::XMLFormatTarget& ft,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeStn_tly (::xercesc::XMLFormatTarget& ft,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          ::Smartmatic::SAES::Voting::StationTallyTypes::ErrorHandler& eh,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeStn_tly (::xercesc::XMLFormatTarget& ft,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          const ::std::string& e = "UTF-8",
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeStn_tly (::xercesc::DOMDocument& d,
                          const ::Smartmatic::SAES::Voting::Vote::StationTally& x,
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::StationTallyTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeStn_tly (const ::Smartmatic::SAES::Voting::Vote::StationTally& x, 
                          const ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::StationTallyTypes::NamespaceInfomap (),
                          ::Smartmatic::SAES::Voting::StationTallyTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const StationTally&);

        void
        operator<< (::xercesc::DOMElement&, const Register&);

        void
        operator<< (::xercesc::DOMElement&, const Type&);

        void
        operator<< (::xercesc::DOMAttr&, const Type&);

        void
        operator<< (::Smartmatic::SAES::Voting::StationTallyTypes::ListStream&,
                    const Type&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_STATION_TALLY_SCHEMA_HXX
