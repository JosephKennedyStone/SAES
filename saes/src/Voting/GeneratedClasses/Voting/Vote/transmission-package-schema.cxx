// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "transmission-package-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        // Transmission
        // 

        const Transmission::Transmission_packageType& Transmission::
        getTransmissionPackage () const
        {
          return this->transmission_package_.get ();
        }

        Transmission::Transmission_packageType& Transmission::
        getTransmissionPackage ()
        {
          return this->transmission_package_.get ();
        }

        void Transmission::
        setTransmissionPackage (const Transmission_packageType& x)
        {
          this->transmission_package_.set (x);
        }

        void Transmission::
        setTransmissionPackage (::std::auto_ptr< Transmission_packageType > x)
        {
          this->transmission_package_.set (x);
        }


        // TransmissionPackage
        // 

        const TransmissionPackage::Stn_tly_pcksOptional& TransmissionPackage::
        getStationTallyPackages () const
        {
          return this->stn_tly_pcks_;
        }

        TransmissionPackage::Stn_tly_pcksOptional& TransmissionPackage::
        getStationTallyPackages ()
        {
          return this->stn_tly_pcks_;
        }

        void TransmissionPackage::
        setStationTallyPackages (const Stn_tly_pcksType& x)
        {
          this->stn_tly_pcks_.set (x);
        }

        void TransmissionPackage::
        setStationTallyPackages (const Stn_tly_pcksOptional& x)
        {
          this->stn_tly_pcks_ = x;
        }

        void TransmissionPackage::
        setStationTallyPackages (::std::auto_ptr< Stn_tly_pcksType > x)
        {
          this->stn_tly_pcks_.set (x);
        }


        // StationTallyPackages
        // 

        const StationTallyPackages::Stn_tly_pckSequence& StationTallyPackages::
        getStationTallyPackage () const
        {
          return this->stn_tly_pck_;
        }

        StationTallyPackages::Stn_tly_pckSequence& StationTallyPackages::
        getStationTallyPackage ()
        {
          return this->stn_tly_pck_;
        }

        void StationTallyPackages::
        setStationTallyPackage (const Stn_tly_pckSequence& s)
        {
          this->stn_tly_pck_ = s;
        }


        // StationTallyPackage
        // 

        const StationTallyPackage::Stn_tlySequence& StationTallyPackage::
        getStationTally () const
        {
          return this->stn_tly_;
        }

        StationTallyPackage::Stn_tlySequence& StationTallyPackage::
        getStationTally ()
        {
          return this->stn_tly_;
        }

        void StationTallyPackage::
        setStationTally (const Stn_tlySequence& s)
        {
          this->stn_tly_ = s;
        }

        const StationTallyPackage::Valid_votesOptional& StationTallyPackage::
        getValidVotes () const
        {
          return this->valid_votes_;
        }

        StationTallyPackage::Valid_votesOptional& StationTallyPackage::
        getValidVotes ()
        {
          return this->valid_votes_;
        }

        void StationTallyPackage::
        setValidVotes (const Valid_votesType& x)
        {
          this->valid_votes_.set (x);
        }

        void StationTallyPackage::
        setValidVotes (const Valid_votesOptional& x)
        {
          this->valid_votes_ = x;
        }

        void StationTallyPackage::
        setValidVotes (::std::auto_ptr< Valid_votesType > x)
        {
          this->valid_votes_.set (x);
        }

        const StationTallyPackage::Spoiled_votesOptional& StationTallyPackage::
        getSpoiledVotes () const
        {
          return this->spoiled_votes_;
        }

        StationTallyPackage::Spoiled_votesOptional& StationTallyPackage::
        getSpoiledVotes ()
        {
          return this->spoiled_votes_;
        }

        void StationTallyPackage::
        setSpoiledVotes (const Spoiled_votesType& x)
        {
          this->spoiled_votes_.set (x);
        }

        void StationTallyPackage::
        setSpoiledVotes (const Spoiled_votesOptional& x)
        {
          this->spoiled_votes_ = x;
        }

        void StationTallyPackage::
        setSpoiledVotes (::std::auto_ptr< Spoiled_votesType > x)
        {
          this->spoiled_votes_.set (x);
        }

        const StationTallyPackage::Voting_device_codeType& StationTallyPackage::
        getVoting_device_code () const
        {
          return this->voting_device_code_.get ();
        }

        StationTallyPackage::Voting_device_codeType& StationTallyPackage::
        getVoting_device_code ()
        {
          return this->voting_device_code_.get ();
        }

        void StationTallyPackage::
        setVoting_device_code (const Voting_device_codeType& x)
        {
          this->voting_device_code_.set (x);
        }

        void StationTallyPackage::
        setVoting_device_code (::std::auto_ptr< Voting_device_codeType > x)
        {
          this->voting_device_code_.set (x);
        }


        // ValidVotes
        // 

        const ValidVotes::VSequence& ValidVotes::
        getVotes () const
        {
          return this->v_;
        }

        ValidVotes::VSequence& ValidVotes::
        getVotes ()
        {
          return this->v_;
        }

        void ValidVotes::
        setVotes (const VSequence& s)
        {
          this->v_ = s;
        }


        // SpoiledVotes
        // 

        const SpoiledVotes::S_vSequence& SpoiledVotes::
        getSVotes () const
        {
          return this->s_v_;
        }

        SpoiledVotes::S_vSequence& SpoiledVotes::
        getSVotes ()
        {
          return this->s_v_;
        }

        void SpoiledVotes::
        setSVotes (const S_vSequence& s)
        {
          this->s_v_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        // Transmission
        //

        Transmission::
        Transmission ()
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          transmission_package_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        Transmission::
        Transmission (const Transmission_packageType& transmission_package)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          transmission_package_ (transmission_package, ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        Transmission::
        Transmission (::std::auto_ptr< Transmission_packageType >& transmission_package)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          transmission_package_ (transmission_package, ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        Transmission::
        Transmission (const Transmission& x,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (x, f, c),
          transmission_package_ (x.transmission_package_, f, this)
        {
        }

        Transmission::
        Transmission (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (e, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base, c),
          transmission_package_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Transmission::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // transmission-package
            //
            if (n.name () == "transmission-package" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< Transmission_packageType > r (
                Transmission_packageTraits::create (i, f, this));

              if (!transmission_package_.present ())
              {
                this->transmission_package_.set (r);
                continue;
              }
            }

            break;
          }

          if (!transmission_package_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "transmission-package",
              "http://www.smartmatic.com/Saes/Voting/Vote");
          }
        }

        Transmission* Transmission::
        _clone (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c) const
        {
          return new class Transmission (*this, f, c);
        }

        Transmission::
        ~Transmission ()
        {
        }

        bool
        operator== (const Transmission& x, const Transmission& y)
        {
          if (!(x.getTransmissionPackage () == y.getTransmissionPackage ()))
            return false;

          return true;
        }

        bool
        operator!= (const Transmission& x, const Transmission& y)
        {
          return !(x == y);
        }

        // TransmissionPackage
        //

        TransmissionPackage::
        TransmissionPackage ()
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          stn_tly_pcks_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        TransmissionPackage::
        TransmissionPackage (const TransmissionPackage& x,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (x, f, c),
          stn_tly_pcks_ (x.stn_tly_pcks_, f, this)
        {
        }

        TransmissionPackage::
        TransmissionPackage (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (e, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base, c),
          stn_tly_pcks_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void TransmissionPackage::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // stn-tly-pcks
            //
            if (n.name () == "stn-tly-pcks" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< Stn_tly_pcksType > r (
                Stn_tly_pcksTraits::create (i, f, this));

              if (!this->stn_tly_pcks_)
              {
                this->stn_tly_pcks_.set (r);
                continue;
              }
            }

            break;
          }
        }

        TransmissionPackage* TransmissionPackage::
        _clone (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c) const
        {
          return new class TransmissionPackage (*this, f, c);
        }

        TransmissionPackage::
        ~TransmissionPackage ()
        {
        }

        bool
        operator== (const TransmissionPackage& x, const TransmissionPackage& y)
        {
          if (!(x.getStationTallyPackages () == y.getStationTallyPackages ()))
            return false;

          return true;
        }

        bool
        operator!= (const TransmissionPackage& x, const TransmissionPackage& y)
        {
          return !(x == y);
        }

        // StationTallyPackages
        //

        StationTallyPackages::
        StationTallyPackages ()
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          stn_tly_pck_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        StationTallyPackages::
        StationTallyPackages (const StationTallyPackages& x,
                              ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                              ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (x, f, c),
          stn_tly_pck_ (x.stn_tly_pck_, f, this)
        {
        }

        StationTallyPackages::
        StationTallyPackages (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                              ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (e, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base, c),
          stn_tly_pck_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void StationTallyPackages::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // stn-tly-pck
            //
            if (n.name () == "stn-tly-pck" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< Stn_tly_pckType > r (
                Stn_tly_pckTraits::create (i, f, this));

              this->stn_tly_pck_.push_back (r);
              continue;
            }

            break;
          }
        }

        StationTallyPackages* StationTallyPackages::
        _clone (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c) const
        {
          return new class StationTallyPackages (*this, f, c);
        }

        StationTallyPackages::
        ~StationTallyPackages ()
        {
        }

        bool
        operator== (const StationTallyPackages& x, const StationTallyPackages& y)
        {
          if (!(x.getStationTallyPackage () == y.getStationTallyPackage ()))
            return false;

          return true;
        }

        bool
        operator!= (const StationTallyPackages& x, const StationTallyPackages& y)
        {
          return !(x == y);
        }

        // StationTallyPackage
        //

        StationTallyPackage::
        StationTallyPackage ()
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          stn_tly_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this),
          valid_votes_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this),
          spoiled_votes_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this),
          voting_device_code_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        StationTallyPackage::
        StationTallyPackage (const Voting_device_codeType& voting_device_code)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          stn_tly_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this),
          valid_votes_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this),
          spoiled_votes_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this),
          voting_device_code_ (voting_device_code, ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        StationTallyPackage::
        StationTallyPackage (const StationTallyPackage& x,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (x, f, c),
          stn_tly_ (x.stn_tly_, f, this),
          valid_votes_ (x.valid_votes_, f, this),
          spoiled_votes_ (x.spoiled_votes_, f, this),
          voting_device_code_ (x.voting_device_code_, f, this)
        {
        }

        StationTallyPackage::
        StationTallyPackage (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                             ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (e, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base, c),
          stn_tly_ (f, this),
          valid_votes_ (f, this),
          spoiled_votes_ (f, this),
          voting_device_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void StationTallyPackage::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // stn-tly
            //
            if (n.name () == "stn-tly" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< Stn_tlyType > r (
                Stn_tlyTraits::create (i, f, this));

              this->stn_tly_.push_back (r);
              continue;
            }

            // valid-votes
            //
            if (n.name () == "valid-votes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< Valid_votesType > r (
                Valid_votesTraits::create (i, f, this));

              if (!this->valid_votes_)
              {
                this->valid_votes_.set (r);
                continue;
              }
            }

            // spoiled-votes
            //
            if (n.name () == "spoiled-votes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< Spoiled_votesType > r (
                Spoiled_votesTraits::create (i, f, this));

              if (!this->spoiled_votes_)
              {
                this->spoiled_votes_.set (r);
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "voting-device-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Voting_device_codeType > r (
                Voting_device_codeTraits::create (i, f, this));

              this->voting_device_code_.set (r);
              continue;
            }
          }

          if (!voting_device_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "voting-device-code",
              "");
          }
        }

        StationTallyPackage* StationTallyPackage::
        _clone (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c) const
        {
          return new class StationTallyPackage (*this, f, c);
        }

        StationTallyPackage::
        ~StationTallyPackage ()
        {
        }

        bool
        operator== (const StationTallyPackage& x, const StationTallyPackage& y)
        {
          if (!(x.getStationTally () == y.getStationTally ()))
            return false;

          if (!(x.getValidVotes () == y.getValidVotes ()))
            return false;

          if (!(x.getSpoiledVotes () == y.getSpoiledVotes ()))
            return false;

          if (!(x.getVoting_device_code () == y.getVoting_device_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const StationTallyPackage& x, const StationTallyPackage& y)
        {
          return !(x == y);
        }

        // ValidVotes
        //

        ValidVotes::
        ValidVotes ()
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          v_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        ValidVotes::
        ValidVotes (const ValidVotes& x,
                    ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                    ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (x, f, c),
          v_ (x.v_, f, this)
        {
        }

        ValidVotes::
        ValidVotes (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                    ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (e, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base, c),
          v_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ValidVotes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // v
            //
            if (n.name () == "v" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< VType > r (
                VTraits::create (i, f, this));

              this->v_.push_back (r);
              continue;
            }

            break;
          }
        }

        ValidVotes* ValidVotes::
        _clone (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c) const
        {
          return new class ValidVotes (*this, f, c);
        }

        ValidVotes::
        ~ValidVotes ()
        {
        }

        bool
        operator== (const ValidVotes& x, const ValidVotes& y)
        {
          if (!(x.getVotes () == y.getVotes ()))
            return false;

          return true;
        }

        bool
        operator!= (const ValidVotes& x, const ValidVotes& y)
        {
          return !(x == y);
        }

        // SpoiledVotes
        //

        SpoiledVotes::
        SpoiledVotes ()
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (),
          s_v_ (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags (), this)
        {
        }

        SpoiledVotes::
        SpoiledVotes (const SpoiledVotes& x,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (x, f, c),
          s_v_ (x.s_v_, f, this)
        {
        }

        SpoiledVotes::
        SpoiledVotes (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                      ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c)
        : ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type (e, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base, c),
          s_v_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void SpoiledVotes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // s-v
            //
            if (n.name () == "s-v" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< S_vType > r (
                S_vTraits::create (i, f, this));

              this->s_v_.push_back (r);
              continue;
            }

            break;
          }
        }

        SpoiledVotes* SpoiledVotes::
        _clone (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Container* c) const
        {
          return new class SpoiledVotes (*this, f, c);
        }

        SpoiledVotes::
        ~SpoiledVotes ()
        {
        }

        bool
        operator== (const SpoiledVotes& x, const SpoiledVotes& y)
        {
          if (!(x.getSVotes () == y.getSVotes ()))
            return false;

          return true;
        }

        bool
        operator!= (const SpoiledVotes& x, const SpoiledVotes& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (const ::std::string& u,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
            ::Smartmatic::SAES::Voting::Vote::parseTransmission (
              d, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (const ::std::string& u,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::ErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
            ::Smartmatic::SAES::Voting::Vote::parseTransmission (
              d, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
            ::Smartmatic::SAES::Voting::Vote::parseTransmission (
              d, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::std::istream& is,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseTransmission (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::std::istream& is,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::ErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseTransmission (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseTransmission (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::std::istream& is,
                           const ::std::string& sid,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseTransmission (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::std::istream& is,
                           const ::std::string& sid,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::ErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseTransmission (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseTransmission (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::xercesc::InputSource& i,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
            ::Smartmatic::SAES::Voting::Vote::parseTransmission (
              d, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::xercesc::InputSource& i,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::ErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
            ::Smartmatic::SAES::Voting::Vote::parseTransmission (
              d, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
            ::Smartmatic::SAES::Voting::Vote::parseTransmission (
              d, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (const ::xercesc::DOMDocument& d,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
              ::Smartmatic::SAES::Voting::Vote::parseTransmission (
                c, f | ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "transmission" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Vote::Transmission, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "transmission",
            "http://www.smartmatic.com/Saes/Voting/Vote");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission >
        parseTransmission (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f,
                           const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "transmission" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Transmission > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Vote::Transmission, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "transmission",
            "http://www.smartmatic.com/Saes/Voting/Vote");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        void
        serializeTransmission (::std::ostream& o,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeTransmission (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeTransmission (::std::ostream& o,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::ErrorHandler& h,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeTransmission (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeTransmission (::std::ostream& o,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeTransmission (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeTransmission (::xercesc::XMLFormatTarget& t,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeTransmission (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeTransmission (::xercesc::XMLFormatTarget& t,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::ErrorHandler& h,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeTransmission (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeTransmission (::xercesc::XMLFormatTarget& t,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeTransmission (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeTransmission (::xercesc::DOMDocument& d,
                               const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "transmission" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "transmission",
              "http://www.smartmatic.com/Saes/Voting/Vote");
          }
        }

        ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeTransmission (const ::Smartmatic::SAES::Voting::Vote::Transmission& s,
                               const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::NamespaceInfomap& m,
                               ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "transmission",
              "http://www.smartmatic.com/Saes/Voting/Vote",
              m, f));

          ::Smartmatic::SAES::Voting::Vote::serializeTransmission (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const Transmission& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type& > (i);

          // transmission-package
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "transmission-package",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << i.getTransmissionPackage ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const TransmissionPackage& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type& > (i);

          // stn-tly-pcks
          //
          if (i.getStationTallyPackages ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "stn-tly-pcks",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *i.getStationTallyPackages ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const StationTallyPackages& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type& > (i);

          // stn-tly-pck
          //
          for (StationTallyPackages::Stn_tly_pckConstIterator
               b (i.getStationTallyPackage ().begin ()), n (i.getStationTallyPackage ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "stn-tly-pck",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const StationTallyPackage& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type& > (i);

          // stn-tly
          //
          for (StationTallyPackage::Stn_tlyConstIterator
               b (i.getStationTally ().begin ()), n (i.getStationTally ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "stn-tly",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }

          // valid-votes
          //
          if (i.getValidVotes ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "valid-votes",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *i.getValidVotes ();
          }

          // spoiled-votes
          //
          if (i.getSpoiledVotes ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "spoiled-votes",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *i.getSpoiledVotes ();
          }

          // voting-device-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "voting-device-code",
                e));

            a << i.getVoting_device_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ValidVotes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type& > (i);

          // v
          //
          for (ValidVotes::VConstIterator
               b (i.getVotes ().begin ()), n (i.getVotes ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "v",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const SpoiledVotes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::TransmissionPackagesTypes::Type& > (i);

          // s-v
          //
          for (SpoiledVotes::S_vConstIterator
               b (i.getSVotes ().begin ()), n (i.getSVotes ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "s-v",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

