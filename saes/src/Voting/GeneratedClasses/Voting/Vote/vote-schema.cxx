// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "vote-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        // VoteMode
        // 

        VoteMode::
        VoteMode ()
        : ::Smartmatic::SAES::Voting::VoteTypes::String ()
        {
        }

        VoteMode::
        VoteMode (Value v)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (_xsd_VoteMode_literals_[v])
        {
        }

        VoteMode::
        VoteMode (const char* v)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (v)
        {
        }

        VoteMode::
        VoteMode (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (v)
        {
        }

        VoteMode::
        VoteMode (const ::Smartmatic::SAES::Voting::VoteTypes::String& v)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (v)
        {
        }

        VoteMode::
        VoteMode (const VoteMode& v,
                  ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (v, f, c)
        {
        }

        VoteMode& VoteMode::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VoteTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VoteTypes::String (_xsd_VoteMode_literals_[v]);

          return *this;
        }


        // Vote
        // 

        const Vote::SSequence& Vote::
        getSelections () const
        {
          return this->s_;
        }

        Vote::SSequence& Vote::
        getSelections ()
        {
          return this->s_;
        }

        void Vote::
        setSelections (const SSequence& s)
        {
          this->s_ = s;
        }

        const Vote::CodeType& Vote::
        getCode () const
        {
          return this->code_.get ();
        }

        Vote::CodeType& Vote::
        getCode ()
        {
          return this->code_.get ();
        }

        void Vote::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Vote::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Vote::VType& Vote::
        getVotingDeviceCode () const
        {
          return this->v_.get ();
        }

        Vote::VType& Vote::
        getVotingDeviceCode ()
        {
          return this->v_.get ();
        }

        void Vote::
        setVotingDeviceCode (const VType& x)
        {
          this->v_.set (x);
        }

        void Vote::
        setVotingDeviceCode (::std::auto_ptr< VType > x)
        {
          this->v_.set (x);
        }

        const Vote::LType& Vote::
        getLogicalVoterGroup () const
        {
          return this->l_.get ();
        }

        Vote::LType& Vote::
        getLogicalVoterGroup ()
        {
          return this->l_.get ();
        }

        void Vote::
        setLogicalVoterGroup (const LType& x)
        {
          this->l_.set (x);
        }

        void Vote::
        setLogicalVoterGroup (::std::auto_ptr< LType > x)
        {
          this->l_.set (x);
        }

        const Vote::MType& Vote::
        getMode () const
        {
          return this->m_.get ();
        }

        Vote::MType& Vote::
        getMode ()
        {
          return this->m_.get ();
        }

        void Vote::
        setMode (const MType& x)
        {
          this->m_.set (x);
        }

        void Vote::
        setMode (::std::auto_ptr< MType > x)
        {
          this->m_.set (x);
        }

        const Vote::Lan_codeType& Vote::
        getLan_code () const
        {
          return this->lan_code_.get ();
        }

        Vote::Lan_codeType& Vote::
        getLan_code ()
        {
          return this->lan_code_.get ();
        }

        void Vote::
        setLan_code (const Lan_codeType& x)
        {
          this->lan_code_.set (x);
        }

        void Vote::
        setLan_code (::std::auto_ptr< Lan_codeType > x)
        {
          this->lan_code_.set (x);
        }


        // Selection
        // 

        const Selection::BSequence& Selection::
        getBallotOptions () const
        {
          return this->b_;
        }

        Selection::BSequence& Selection::
        getBallotOptions ()
        {
          return this->b_;
        }

        void Selection::
        setBallotOptions (const BSequence& s)
        {
          this->b_ = s;
        }

        const Selection::CType& Selection::
        getContest () const
        {
          return this->c_.get ();
        }

        Selection::CType& Selection::
        getContest ()
        {
          return this->c_.get ();
        }

        void Selection::
        setContest (const CType& x)
        {
          this->c_.set (x);
        }

        void Selection::
        setContest (::std::auto_ptr< CType > x)
        {
          this->c_.set (x);
        }

        const Selection::CsOptional& Selection::
        getContestCodedSelections () const
        {
          return this->cs_;
        }

        Selection::CsOptional& Selection::
        getContestCodedSelections ()
        {
          return this->cs_;
        }

        void Selection::
        setContestCodedSelections (const CsType& x)
        {
          this->cs_.set (x);
        }

        void Selection::
        setContestCodedSelections (const CsOptional& x)
        {
          this->cs_ = x;
        }

        void Selection::
        setContestCodedSelections (::std::auto_ptr< CsType > x)
        {
          this->cs_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        // VoteMode
        //

        VoteMode::
        VoteMode (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (e, f, c)
        {
          _xsd_VoteMode_convert ();
        }

        VoteMode::
        VoteMode (const ::xercesc::DOMAttr& a,
                  ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (a, f, c)
        {
          _xsd_VoteMode_convert ();
        }

        VoteMode::
        VoteMode (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                  ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::String (s, e, f, c)
        {
          _xsd_VoteMode_convert ();
        }

        VoteMode* VoteMode::
        _clone (::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                ::Smartmatic::SAES::Voting::VoteTypes::Container* c) const
        {
          return new class VoteMode (*this, f, c);
        }

        VoteMode::Value VoteMode::
        _xsd_VoteMode_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VoteMode_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VoteMode_indexes_,
                            _xsd_VoteMode_indexes_ + 4,
                            *this,
                            c));

          if (i == _xsd_VoteMode_indexes_ + 4 || _xsd_VoteMode_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VoteMode::
        _xsd_VoteMode_literals_[4] =
        {
          "O",
          "D",
          "R",
          "S"
        };

        const VoteMode::Value VoteMode::
        _xsd_VoteMode_indexes_[4] =
        {
          ::Smartmatic::SAES::Voting::Vote::VoteMode::VOTE_D,
          ::Smartmatic::SAES::Voting::Vote::VoteMode::VOTE_O,
          ::Smartmatic::SAES::Voting::Vote::VoteMode::VOTE_R,
          ::Smartmatic::SAES::Voting::Vote::VoteMode::VOTE_S
        };

        // Vote
        //

        Vote::
        Vote ()
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (),
          s_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          v_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          l_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          m_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          lan_code_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this)
        {
        }

        Vote::
        Vote (const CodeType& code,
              const VType& v,
              const LType& l,
              const MType& m,
              const Lan_codeType& lan_code)
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (),
          s_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          v_ (v, ::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          l_ (l, ::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          m_ (m, ::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          lan_code_ (lan_code, ::Smartmatic::SAES::Voting::VoteTypes::Flags (), this)
        {
        }

        Vote::
        Vote (const Vote& x,
              ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
              ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (x, f, c),
          s_ (x.s_, f, this),
          code_ (x.code_, f, this),
          v_ (x.v_, f, this),
          l_ (x.l_, f, this),
          m_ (x.m_, f, this),
          lan_code_ (x.lan_code_, f, this)
        {
        }

        Vote::
        Vote (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
              ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (e, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::base, c),
          s_ (f, this),
          code_ (f, this),
          v_ (f, this),
          l_ (f, this),
          m_ (f, this),
          lan_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Vote::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // s
            //
            if (n.name () == "s" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< SType > r (
                STraits::create (i, f, this));

              this->s_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "v" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< VType > r (
                VTraits::create (i, f, this));

              this->v_.set (r);
              continue;
            }

            if (n.name () == "l" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< LType > r (
                LTraits::create (i, f, this));

              this->l_.set (r);
              continue;
            }

            if (n.name () == "m" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< MType > r (
                MTraits::create (i, f, this));

              this->m_.set (r);
              continue;
            }

            if (n.name () == "lan-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Lan_codeType > r (
                Lan_codeTraits::create (i, f, this));

              this->lan_code_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!v_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "v",
              "");
          }

          if (!l_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "l",
              "");
          }

          if (!m_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "m",
              "");
          }

          if (!lan_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "lan-code",
              "");
          }
        }

        Vote* Vote::
        _clone (::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                ::Smartmatic::SAES::Voting::VoteTypes::Container* c) const
        {
          return new class Vote (*this, f, c);
        }

        Vote::
        ~Vote ()
        {
        }

        bool
        operator== (const Vote& x, const Vote& y)
        {
          if (!(x.getSelections () == y.getSelections ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getVotingDeviceCode () == y.getVotingDeviceCode ()))
            return false;

          if (!(x.getLogicalVoterGroup () == y.getLogicalVoterGroup ()))
            return false;

          if (!(x.getMode () == y.getMode ()))
            return false;

          if (!(x.getLan_code () == y.getLan_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Vote& x, const Vote& y)
        {
          return !(x == y);
        }

        // Selection
        //

        Selection::
        Selection ()
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (),
          b_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          c_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          cs_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this)
        {
        }

        Selection::
        Selection (const CType& c)
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (),
          b_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          c_ (c, ::Smartmatic::SAES::Voting::VoteTypes::Flags (), this),
          cs_ (::Smartmatic::SAES::Voting::VoteTypes::Flags (), this)
        {
        }

        Selection::
        Selection (const Selection& x,
                   ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                   ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (x, f, c),
          b_ (x.b_, f, this),
          c_ (x.c_, f, this),
          cs_ (x.cs_, f, this)
        {
        }

        Selection::
        Selection (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                   ::Smartmatic::SAES::Voting::VoteTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VoteTypes::Type (e, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::base, c),
          b_ (f, this),
          c_ (f, this),
          cs_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Selection::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // b
            //
            if (n.name () == "b" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
            {
              ::std::auto_ptr< BType > r (
                BTraits::create (i, f, this));

              this->b_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "c" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CType > r (
                CTraits::create (i, f, this));

              this->c_.set (r);
              continue;
            }

            if (n.name () == "cs" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CsType > r (
                CsTraits::create (i, f, this));

              this->cs_.set (r);
              continue;
            }
          }

          if (!c_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "c",
              "");
          }
        }

        Selection* Selection::
        _clone (::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                ::Smartmatic::SAES::Voting::VoteTypes::Container* c) const
        {
          return new class Selection (*this, f, c);
        }

        Selection::
        ~Selection ()
        {
        }

        bool
        operator== (const Selection& x, const Selection& y)
        {
          if (!(x.getBallotOptions () == y.getBallotOptions ()))
            return false;

          if (!(x.getContest () == y.getContest ()))
            return false;

          if (!(x.getContestCodedSelections () == y.getContestCodedSelections ()))
            return false;

          return true;
        }

        bool
        operator!= (const Selection& x, const Selection& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (const ::std::string& u,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
            ::Smartmatic::SAES::Voting::Vote::parseV (
              d, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (const ::std::string& u,
                ::Smartmatic::SAES::Voting::VoteTypes::ErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
            ::Smartmatic::SAES::Voting::Vote::parseV (
              d, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
            ::Smartmatic::SAES::Voting::Vote::parseV (
              d, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::std::istream& is,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseV (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::std::istream& is,
                ::Smartmatic::SAES::Voting::VoteTypes::ErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseV (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Vote::parseV (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::std::istream& is,
                const ::std::string& sid,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseV (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::std::istream& is,
                const ::std::string& sid,
                ::Smartmatic::SAES::Voting::VoteTypes::ErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseV (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Vote::parseV (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::xercesc::InputSource& i,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
            ::Smartmatic::SAES::Voting::Vote::parseV (
              d, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::xercesc::InputSource& i,
                ::Smartmatic::SAES::Voting::VoteTypes::ErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
            ::Smartmatic::SAES::Voting::Vote::parseV (
              d, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
            ::Smartmatic::SAES::Voting::Vote::parseV (
              d, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (const ::xercesc::DOMDocument& d,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
              ::Smartmatic::SAES::Voting::Vote::parseV (
                c, f | ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "v" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Vote::Vote, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "v",
            "http://www.smartmatic.com/Saes/Voting/Vote");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote >
        parseV (::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::Smartmatic::SAES::Voting::VoteTypes::Flags f,
                const ::Smartmatic::SAES::Voting::VoteTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::VoteTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "v" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Vote::Vote > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Vote::Vote, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "v",
            "http://www.smartmatic.com/Saes/Voting/Vote");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Vote
      {
        void
        serializeV (::std::ostream& o,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeV (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeV (::std::ostream& o,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    ::Smartmatic::SAES::Voting::VoteTypes::ErrorHandler& h,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VoteTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeV (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeV (::std::ostream& o,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeV (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeV (::xercesc::XMLFormatTarget& t,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeV (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeV (::xercesc::XMLFormatTarget& t,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    ::Smartmatic::SAES::Voting::VoteTypes::ErrorHandler& h,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeV (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeV (::xercesc::XMLFormatTarget& t,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Vote::serializeV (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeV (::xercesc::DOMDocument& d,
                    const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "v" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Vote")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "v",
              "http://www.smartmatic.com/Saes/Voting/Vote");
          }
        }

        ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeV (const ::Smartmatic::SAES::Voting::Vote::Vote& s,
                    const ::Smartmatic::SAES::Voting::VoteTypes::NamespaceInfomap& m,
                    ::Smartmatic::SAES::Voting::VoteTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VoteTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "v",
              "http://www.smartmatic.com/Saes/Voting/Vote",
              m, f));

          ::Smartmatic::SAES::Voting::Vote::serializeV (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const VoteMode& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VoteTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VoteMode& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VoteTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VoteTypes::ListStream& l,
                    const VoteMode& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VoteTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Vote& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VoteTypes::Type& > (i);

          // s
          //
          for (Vote::SConstIterator
               b (i.getSelections ().begin ()), n (i.getSelections ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "s",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // v
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "v",
                e));

            a << i.getVotingDeviceCode ();
          }

          // l
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "l",
                e));

            a << i.getLogicalVoterGroup ();
          }

          // m
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "m",
                e));

            a << i.getMode ();
          }

          // lan-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "lan-code",
                e));

            a << i.getLan_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Selection& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VoteTypes::Type& > (i);

          // b
          //
          for (Selection::BConstIterator
               b (i.getBallotOptions ().begin ()), n (i.getBallotOptions ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "b",
                "http://www.smartmatic.com/Saes/Voting/Vote",
                e));

            s << *b;
          }

          // c
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "c",
                e));

            a << i.getContest ();
          }

          // cs
          //
          if (i.getContestCodedSelections ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "cs",
                e));

            a << *i.getContestCodedSelections ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

