// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "x7s-codi-file-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Codi
      {
        // X7SCodiFile
        // 

        const X7SCodiFile::SignedPVType& X7SCodiFile::
        getPVFile () const
        {
          return this->SignedPV_.get ();
        }

        X7SCodiFile::SignedPVType& X7SCodiFile::
        getPVFile ()
        {
          return this->SignedPV_.get ();
        }

        void X7SCodiFile::
        setPVFile (const SignedPVType& x)
        {
          this->SignedPV_.set (x);
        }

        void X7SCodiFile::
        setPVFile (::std::auto_ptr< SignedPVType > x)
        {
          this->SignedPV_.set (x);
        }

        const X7SCodiFile::FormatFType& X7SCodiFile::
        getFormatF () const
        {
          return this->FormatF_.get ();
        }

        X7SCodiFile::FormatFType& X7SCodiFile::
        getFormatF ()
        {
          return this->FormatF_.get ();
        }

        void X7SCodiFile::
        setFormatF (const FormatFType& x)
        {
          this->FormatF_.set (x);
        }

        void X7SCodiFile::
        setFormatF (::std::auto_ptr< FormatFType > x)
        {
          this->FormatF_.set (x);
        }


        // PVFile
        // 

        const PVFile::OriginialFileNameType& PVFile::
        getOriginialFileName () const
        {
          return this->OriginialFileName_.get ();
        }

        PVFile::OriginialFileNameType& PVFile::
        getOriginialFileName ()
        {
          return this->OriginialFileName_.get ();
        }

        void PVFile::
        setOriginialFileName (const OriginialFileNameType& x)
        {
          this->OriginialFileName_.set (x);
        }

        void PVFile::
        setOriginialFileName (::std::auto_ptr< OriginialFileNameType > x)
        {
          this->OriginialFileName_.set (x);
        }

        const PVFile::DocTypeType& PVFile::
        getPVType () const
        {
          return this->DocType_.get ();
        }

        PVFile::DocTypeType& PVFile::
        getPVType ()
        {
          return this->DocType_.get ();
        }

        void PVFile::
        setPVType (const DocTypeType& x)
        {
          this->DocType_.set (x);
        }

        void PVFile::
        setPVType (::std::auto_ptr< DocTypeType > x)
        {
          this->DocType_.set (x);
        }

        const PVFile::DataType& PVFile::
        getData () const
        {
          return this->Data_.get ();
        }

        PVFile::DataType& PVFile::
        getData ()
        {
          return this->Data_.get ();
        }

        void PVFile::
        setData (const DataType& x)
        {
          this->Data_.set (x);
        }

        void PVFile::
        setData (::std::auto_ptr< DataType > x)
        {
          this->Data_.set (x);
        }


        // FormatF
        // 

        const FormatF::OriginialFileNameType& FormatF::
        getOriginialFileName () const
        {
          return this->OriginialFileName_.get ();
        }

        FormatF::OriginialFileNameType& FormatF::
        getOriginialFileName ()
        {
          return this->OriginialFileName_.get ();
        }

        void FormatF::
        setOriginialFileName (const OriginialFileNameType& x)
        {
          this->OriginialFileName_.set (x);
        }

        void FormatF::
        setOriginialFileName (::std::auto_ptr< OriginialFileNameType > x)
        {
          this->OriginialFileName_.set (x);
        }

        const FormatF::DataType& FormatF::
        getData () const
        {
          return this->Data_.get ();
        }

        FormatF::DataType& FormatF::
        getData ()
        {
          return this->Data_.get ();
        }

        void FormatF::
        setData (const DataType& x)
        {
          this->Data_.set (x);
        }

        void FormatF::
        setData (::std::auto_ptr< DataType > x)
        {
          this->Data_.set (x);
        }


        // PVType
        // 

        PVType::
        PVType ()
        : ::Smartmatic::SAES::Voting::Codi::String ()
        {
        }

        PVType::
        PVType (Value v)
        : ::Smartmatic::SAES::Voting::Codi::String (_xsd_PVType_literals_[v])
        {
        }

        PVType::
        PVType (const char* v)
        : ::Smartmatic::SAES::Voting::Codi::String (v)
        {
        }

        PVType::
        PVType (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::Codi::String (v)
        {
        }

        PVType::
        PVType (const ::Smartmatic::SAES::Voting::Codi::String& v)
        : ::Smartmatic::SAES::Voting::Codi::String (v)
        {
        }

        PVType::
        PVType (const PVType& v,
                ::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::String (v, f, c)
        {
        }

        PVType& PVType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::Codi::String& > (*this) = 
          ::Smartmatic::SAES::Voting::Codi::String (_xsd_PVType_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Codi
      {
        // X7SCodiFile
        //

        X7SCodiFile::
        X7SCodiFile ()
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          SignedPV_ (::Smartmatic::SAES::Voting::Codi::Flags (), this),
          FormatF_ (::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        X7SCodiFile::
        X7SCodiFile (const SignedPVType& SignedPV,
                     const FormatFType& FormatF)
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          SignedPV_ (SignedPV, ::Smartmatic::SAES::Voting::Codi::Flags (), this),
          FormatF_ (FormatF, ::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        X7SCodiFile::
        X7SCodiFile (::std::auto_ptr< SignedPVType >& SignedPV,
                     ::std::auto_ptr< FormatFType >& FormatF)
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          SignedPV_ (SignedPV, ::Smartmatic::SAES::Voting::Codi::Flags (), this),
          FormatF_ (FormatF, ::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        X7SCodiFile::
        X7SCodiFile (const X7SCodiFile& x,
                     ::Smartmatic::SAES::Voting::Codi::Flags f,
                     ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::Type (x, f, c),
          SignedPV_ (x.SignedPV_, f, this),
          FormatF_ (x.FormatF_, f, this)
        {
        }

        X7SCodiFile::
        X7SCodiFile (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::Codi::Flags f,
                     ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::Type (e, f | ::Smartmatic::SAES::Voting::Codi::Flags::base, c),
          SignedPV_ (f, this),
          FormatF_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Codi::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void X7SCodiFile::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // SignedPV
            //
            if (n.name () == "SignedPV" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< SignedPVType > r (
                SignedPVTraits::create (i, f, this));

              if (!SignedPV_.present ())
              {
                this->SignedPV_.set (r);
                continue;
              }
            }

            // FormatF
            //
            if (n.name () == "FormatF" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< FormatFType > r (
                FormatFTraits::create (i, f, this));

              if (!FormatF_.present ())
              {
                this->FormatF_.set (r);
                continue;
              }
            }

            break;
          }

          if (!SignedPV_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "SignedPV",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }

          if (!FormatF_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FormatF",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }
        }

        X7SCodiFile* X7SCodiFile::
        _clone (::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c) const
        {
          return new class X7SCodiFile (*this, f, c);
        }

        X7SCodiFile::
        ~X7SCodiFile ()
        {
        }

        bool
        operator== (const X7SCodiFile& x, const X7SCodiFile& y)
        {
          if (!(x.getPVFile () == y.getPVFile ()))
            return false;

          if (!(x.getFormatF () == y.getFormatF ()))
            return false;

          return true;
        }

        bool
        operator!= (const X7SCodiFile& x, const X7SCodiFile& y)
        {
          return !(x == y);
        }

        // PVFile
        //

        PVFile::
        PVFile ()
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          OriginialFileName_ (::Smartmatic::SAES::Voting::Codi::Flags (), this),
          DocType_ (::Smartmatic::SAES::Voting::Codi::Flags (), this),
          Data_ (::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        PVFile::
        PVFile (const OriginialFileNameType& OriginialFileName,
                const DocTypeType& DocType,
                const DataType& Data)
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          OriginialFileName_ (OriginialFileName, ::Smartmatic::SAES::Voting::Codi::Flags (), this),
          DocType_ (DocType, ::Smartmatic::SAES::Voting::Codi::Flags (), this),
          Data_ (Data, ::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        PVFile::
        PVFile (const PVFile& x,
                ::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::Type (x, f, c),
          OriginialFileName_ (x.OriginialFileName_, f, this),
          DocType_ (x.DocType_, f, this),
          Data_ (x.Data_, f, this)
        {
        }

        PVFile::
        PVFile (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::Type (e, f | ::Smartmatic::SAES::Voting::Codi::Flags::base, c),
          OriginialFileName_ (f, this),
          DocType_ (f, this),
          Data_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Codi::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void PVFile::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // OriginialFileName
            //
            if (n.name () == "OriginialFileName" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< OriginialFileNameType > r (
                OriginialFileNameTraits::create (i, f, this));

              if (!OriginialFileName_.present ())
              {
                this->OriginialFileName_.set (r);
                continue;
              }
            }

            // DocType
            //
            if (n.name () == "DocType" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< DocTypeType > r (
                DocTypeTraits::create (i, f, this));

              if (!DocType_.present ())
              {
                this->DocType_.set (r);
                continue;
              }
            }

            // Data
            //
            if (n.name () == "Data" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< DataType > r (
                DataTraits::create (i, f, this));

              if (!Data_.present ())
              {
                this->Data_.set (r);
                continue;
              }
            }

            break;
          }

          if (!OriginialFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OriginialFileName",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }

          if (!DocType_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "DocType",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }

          if (!Data_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Data",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }
        }

        PVFile* PVFile::
        _clone (::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c) const
        {
          return new class PVFile (*this, f, c);
        }

        PVFile::
        ~PVFile ()
        {
        }

        bool
        operator== (const PVFile& x, const PVFile& y)
        {
          if (!(x.getOriginialFileName () == y.getOriginialFileName ()))
            return false;

          if (!(x.getPVType () == y.getPVType ()))
            return false;

          if (!(x.getData () == y.getData ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVFile& x, const PVFile& y)
        {
          return !(x == y);
        }

        // FormatF
        //

        FormatF::
        FormatF ()
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          OriginialFileName_ (::Smartmatic::SAES::Voting::Codi::Flags (), this),
          Data_ (::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        FormatF::
        FormatF (const OriginialFileNameType& OriginialFileName,
                 const DataType& Data)
        : ::Smartmatic::SAES::Voting::Codi::Type (),
          OriginialFileName_ (OriginialFileName, ::Smartmatic::SAES::Voting::Codi::Flags (), this),
          Data_ (Data, ::Smartmatic::SAES::Voting::Codi::Flags (), this)
        {
        }

        FormatF::
        FormatF (const FormatF& x,
                 ::Smartmatic::SAES::Voting::Codi::Flags f,
                 ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::Type (x, f, c),
          OriginialFileName_ (x.OriginialFileName_, f, this),
          Data_ (x.Data_, f, this)
        {
        }

        FormatF::
        FormatF (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::Codi::Flags f,
                 ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::Type (e, f | ::Smartmatic::SAES::Voting::Codi::Flags::base, c),
          OriginialFileName_ (f, this),
          Data_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::Codi::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void FormatF::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // OriginialFileName
            //
            if (n.name () == "OriginialFileName" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< OriginialFileNameType > r (
                OriginialFileNameTraits::create (i, f, this));

              if (!OriginialFileName_.present ())
              {
                this->OriginialFileName_.set (r);
                continue;
              }
            }

            // Data
            //
            if (n.name () == "Data" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
            {
              ::std::auto_ptr< DataType > r (
                DataTraits::create (i, f, this));

              if (!Data_.present ())
              {
                this->Data_.set (r);
                continue;
              }
            }

            break;
          }

          if (!OriginialFileName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OriginialFileName",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }

          if (!Data_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Data",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }
        }

        FormatF* FormatF::
        _clone (::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c) const
        {
          return new class FormatF (*this, f, c);
        }

        FormatF::
        ~FormatF ()
        {
        }

        bool
        operator== (const FormatF& x, const FormatF& y)
        {
          if (!(x.getOriginialFileName () == y.getOriginialFileName ()))
            return false;

          if (!(x.getData () == y.getData ()))
            return false;

          return true;
        }

        bool
        operator!= (const FormatF& x, const FormatF& y)
        {
          return !(x == y);
        }

        // PVType
        //

        PVType::
        PVType (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::String (e, f, c)
        {
          _xsd_PVType_convert ();
        }

        PVType::
        PVType (const ::xercesc::DOMAttr& a,
                ::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::String (a, f, c)
        {
          _xsd_PVType_convert ();
        }

        PVType::
        PVType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c)
        : ::Smartmatic::SAES::Voting::Codi::String (s, e, f, c)
        {
          _xsd_PVType_convert ();
        }

        PVType* PVType::
        _clone (::Smartmatic::SAES::Voting::Codi::Flags f,
                ::Smartmatic::SAES::Voting::Codi::Container* c) const
        {
          return new class PVType (*this, f, c);
        }

        PVType::Value PVType::
        _xsd_PVType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_PVType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_PVType_indexes_,
                            _xsd_PVType_indexes_ + 1,
                            *this,
                            c));

          if (i == _xsd_PVType_indexes_ + 1 || _xsd_PVType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const PVType::
        _xsd_PVType_literals_[1] =
        {
          "PDF"
        };

        const PVType::Value PVType::
        _xsd_PVType_indexes_[1] =
        {
          ::Smartmatic::SAES::Voting::Codi::PVType::PDF
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Codi
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (const ::std::string& u,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
            ::Smartmatic::SAES::Voting::Codi::parseFinalData (
              d, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (const ::std::string& u,
                        ::Smartmatic::SAES::Voting::Codi::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
            ::Smartmatic::SAES::Voting::Codi::parseFinalData (
              d, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
            ::Smartmatic::SAES::Voting::Codi::parseFinalData (
              d, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::std::istream& is,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Codi::parseFinalData (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::std::istream& is,
                        ::Smartmatic::SAES::Voting::Codi::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Codi::parseFinalData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Codi::parseFinalData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::std::istream& is,
                        const ::std::string& sid,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Codi::parseFinalData (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::std::istream& is,
                        const ::std::string& sid,
                        ::Smartmatic::SAES::Voting::Codi::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Codi::parseFinalData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Codi::parseFinalData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::xercesc::InputSource& i,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
            ::Smartmatic::SAES::Voting::Codi::parseFinalData (
              d, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::xercesc::InputSource& i,
                        ::Smartmatic::SAES::Voting::Codi::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
            ::Smartmatic::SAES::Voting::Codi::parseFinalData (
              d, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
            ::Smartmatic::SAES::Voting::Codi::parseFinalData (
              d, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (const ::xercesc::DOMDocument& d,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
              ::Smartmatic::SAES::Voting::Codi::parseFinalData (
                c, f | ::Smartmatic::SAES::Voting::Codi::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "FinalData" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FinalData",
            "http://www.smartmatic.com/Saes/Voting/Codi");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile >
        parseFinalData (::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::Smartmatic::SAES::Voting::Codi::Flags f,
                        const ::Smartmatic::SAES::Voting::Codi::Properties&)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::Codi::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::Codi::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::Codi::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "FinalData" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Codi::X7SCodiFile, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "FinalData",
            "http://www.smartmatic.com/Saes/Voting/Codi");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Codi
      {
        void
        serializeFinalData (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Codi::serializeFinalData (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeFinalData (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            ::Smartmatic::SAES::Voting::Codi::ErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::Codi::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Codi::serializeFinalData (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeFinalData (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Codi::serializeFinalData (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeFinalData (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Codi::serializeFinalData (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeFinalData (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            ::Smartmatic::SAES::Voting::Codi::ErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Codi::serializeFinalData (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeFinalData (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Codi::serializeFinalData (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeFinalData (::xercesc::DOMDocument& d,
                            const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            ::Smartmatic::SAES::Voting::Codi::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "FinalData" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Codi")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "FinalData",
              "http://www.smartmatic.com/Saes/Voting/Codi");
          }
        }

        ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeFinalData (const ::Smartmatic::SAES::Voting::Codi::X7SCodiFile& s,
                            const ::Smartmatic::SAES::Voting::Codi::NamespaceInfomap& m,
                            ::Smartmatic::SAES::Voting::Codi::Flags f)
        {
          ::Smartmatic::SAES::Voting::Codi::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "FinalData",
              "http://www.smartmatic.com/Saes/Voting/Codi",
              m, f));

          ::Smartmatic::SAES::Voting::Codi::serializeFinalData (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const X7SCodiFile& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Codi::Type& > (i);

          // SignedPV
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SignedPV",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getPVFile ();
          }

          // FormatF
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FormatF",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getFormatF ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVFile& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Codi::Type& > (i);

          // OriginialFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OriginialFileName",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getOriginialFileName ();
          }

          // DocType
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DocType",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getPVType ();
          }

          // Data
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Data",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getData ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const FormatF& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Codi::Type& > (i);

          // OriginialFileName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OriginialFileName",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getOriginialFileName ();
          }

          // Data
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Data",
                "http://www.smartmatic.com/Saes/Voting/Codi",
                e));

            s << i.getData ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVType& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::Codi::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const PVType& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::Codi::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::Codi::ListStream& l,
                    const PVType& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::Codi::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

