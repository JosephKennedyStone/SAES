// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from voting-disabled-information-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_VOTING_DISABLED_INFORMATION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_VOTING_DISABLED_INFORMATION_SCHEMA_HXX

// Begin prologue.
//
#include "id-card-info-schema.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace PBReports
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__PBREPORTS
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__PBREPORTS
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        class VotingDisabled;
        class IDCardInfo;
        class VotingDisabledType;
        class VotingDisabledInformation;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/PBReports
       * schema namespace.
       */
      namespace PBReports
      {
        /**
         * @brief Class corresponding to the %VotingDisabled schema type.
         *
         * @nosubgrouping
         */
        class VotingDisabled: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name Voter
           *
           * @brief Accessor and modifier functions for the %Voter
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::IDCardInfo VoterType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VoterType, char > VoterTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VoterType&
          getVoter () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VoterType&
          getVoter ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVoter (const VoterType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoter (::std::auto_ptr< VoterType > p);

          //@}

          /**
           * @name Helper
           *
           * @brief Accessor and modifier functions for the %Helper
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::IDCardInfo HelperType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HelperType, char > HelperTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HelperType&
          getHelper () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HelperType&
          getHelper ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setHelper (const HelperType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setHelper (::std::auto_ptr< HelperType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name create-date
           *
           * @brief Accessor and modifier functions for the %create-date
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Create_dateType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Create_dateType, char > Create_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Create_dateType&
          getCreate_date () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Create_dateType&
          getCreate_date ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCreate_date (const Create_dateType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCreate_date (::std::auto_ptr< Create_dateType > p);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::VotingDisabledType TypeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeType&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeType&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name disabled
           *
           * @brief Accessor and modifier functions for the %disabled
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String DisabledType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DisabledType, char > DisabledTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DisabledType&
          getDisabled () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DisabledType&
          getDisabled ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDisabled (const DisabledType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDisabled (::std::auto_ptr< DisabledType > p);

          //@}

          /**
           * @name approved
           *
           * @brief Accessor and modifier functions for the %approved
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String ApprovedType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ApprovedType, char > ApprovedTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ApprovedType&
          getApproved () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ApprovedType&
          getApproved ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setApproved (const ApprovedType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setApproved (::std::auto_ptr< ApprovedType > p);

          //@}

          /**
           * @name description
           *
           * @brief Accessor and modifier functions for the %description
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String DescriptionType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DescriptionType, char > DescriptionTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DescriptionType&
          getDescription () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DescriptionType&
          getDescription ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription (const DescriptionType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription (::std::auto_ptr< DescriptionType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          VotingDisabled ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          VotingDisabled (const VoterType&,
                          const HelperType&,
                          const Custom_codeType&,
                          const Create_dateType&,
                          const TypeType&,
                          const DisabledType&,
                          const ApprovedType&,
                          const DescriptionType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          VotingDisabled (::std::auto_ptr< VoterType >&,
                          ::std::auto_ptr< HelperType >&,
                          const Custom_codeType&,
                          const Create_dateType&,
                          const TypeType&,
                          const DisabledType&,
                          const ApprovedType&,
                          const DescriptionType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingDisabled (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VotingDisabled (const VotingDisabled& x,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VotingDisabled*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~VotingDisabled ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          ::xsd::cxx::tree::one< VoterType > Voter_;
          ::xsd::cxx::tree::one< HelperType > Helper_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< Create_dateType > create_date_;
          ::xsd::cxx::tree::one< TypeType > type_;
          ::xsd::cxx::tree::one< DisabledType > disabled_;
          ::xsd::cxx::tree::one< ApprovedType > approved_;
          ::xsd::cxx::tree::one< DescriptionType > description_;

          //@endcond
        };

        bool
        operator== (const VotingDisabled&, const VotingDisabled&);

        bool
        operator!= (const VotingDisabled&, const VotingDisabled&);


        /**
         * @brief Enumeration class corresponding to the %VotingDisabledType
         * schema type.
         */
        class VotingDisabledType: public ::Smartmatic::SAES::Voting::PBReports::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            VOTING_DISABLED_ASSISTED,
            VOTING_DISABLED_ACCOMPANIED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          VotingDisabledType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          VotingDisabledType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          VotingDisabledType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          VotingDisabledType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          VotingDisabledType (const ::Smartmatic::SAES::Voting::PBReports::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingDisabledType (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingDisabledType (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingDisabledType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VotingDisabledType (const VotingDisabledType& x,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VotingDisabledType*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          VotingDisabledType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_VotingDisabledType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_VotingDisabledType_convert () const;

          public:
          static const char* const _xsd_VotingDisabledType_literals_[2];
          static const Value _xsd_VotingDisabledType_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %VotingDisabledInformation schema type.
         *
         * @nosubgrouping
         */
        class VotingDisabledInformation: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name VotingDisabled
           *
           * @brief Accessor and modifier functions for the %VotingDisabled
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::VotingDisabled VotingDisabledType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< VotingDisabledType > VotingDisabledSequence;

          /**
           * @brief Element iterator type.
           */
          typedef VotingDisabledSequence::iterator VotingDisabledIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef VotingDisabledSequence::const_iterator VotingDisabledConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingDisabledType, char > VotingDisabledTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const VotingDisabledSequence&
          getVotingDisabled () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          VotingDisabledSequence&
          getVotingDisabled ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setVotingDisabled (const VotingDisabledSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          VotingDisabledInformation ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          VotingDisabledInformation (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                     ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          VotingDisabledInformation (const VotingDisabledInformation& x,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                     ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual VotingDisabledInformation*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~VotingDisabledInformation ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          VotingDisabledSequence VotingDisabled_;

          //@endcond
        };

        bool
        operator== (const VotingDisabledInformation&, const VotingDisabledInformation&);

        bool
        operator!= (const VotingDisabledInformation&, const VotingDisabledInformation&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        /**
         * @name Parsing functions for the %VotingDisabledInformation document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::std::string& uri,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::std::string& uri,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::std::string& uri,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        const ::std::string& id,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        const ::std::string& id,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        const ::std::string& id,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::xercesc::InputSource& is,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::xercesc::InputSource& is,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::xercesc::InputSource& is,
                                        ::xercesc::DOMErrorHandler& eh,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::xercesc::DOMDocument& d,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        /**
         * @name Serialization functions for the %VotingDisabledInformation document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeVotingDisabledInformation (::std::ostream& os,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVotingDisabledInformation (::std::ostream& os,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVotingDisabledInformation (::std::ostream& os,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeVotingDisabledInformation (::xercesc::XMLFormatTarget& ft,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVotingDisabledInformation (::xercesc::XMLFormatTarget& ft,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVotingDisabledInformation (::xercesc::XMLFormatTarget& ft,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            ::xercesc::DOMErrorHandler& eh,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            const ::std::string& e = "UTF-8",
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeVotingDisabledInformation (::xercesc::DOMDocument& d,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVotingDisabledInformation (const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& x, 
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const VotingDisabled&);

        void
        operator<< (::xercesc::DOMElement&, const VotingDisabledType&);

        void
        operator<< (::xercesc::DOMAttr&, const VotingDisabledType&);

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream&,
                    const VotingDisabledType&);

        void
        operator<< (::xercesc::DOMElement&, const VotingDisabledInformation&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_VOTING_DISABLED_INFORMATION_SCHEMA_HXX
