// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from pvform-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_PVFORM_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_PVFORM_SCHEMA_HXX

// Begin prologue.
//
#include "activated-card-statistics-schema.hxx"
#include "assisted-activation-schema.hxx"
#include "id-card-info-schema.hxx"
#include "incident-report-schema.hxx"
#include "pollworkers-schema.hxx"
#include "statistics-schema.hxx"
#include "vote-statistics-schema.hxx"
#include "close-election-notes-schema.hxx"
#include "id-card-members-schema.hxx"
#include "voting-disabled-information-schema.hxx"
#include "police-notes-schema.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace PBReports
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__PBREPORTS
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__PBREPORTS
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        class PVInfoElection;
        class Statistics;
        class StatisticType;
        class StatisticElementType;
        class Pollworkers;
        class Worker;
        class WorkerMemberType;
        class Note;
        class NoteWorkerMemberType;
        class VoteStatistics;
        class IncidentReports;
        class IDCardMembers;
        class IDCardInfo;
        class IDCardInfoType;
        class ActivatedCardStatistics;
        class ActivatedCardByCA;
        class AssistedActivations;
        class PVContest;
        class PVVote;
        class PVCandidate;
        class PVVotes;
        class CloseElectionNotes;
        class RegionLevel;
        class VotingDisabledInformation;
        class VotingDisabled;
        class VotingDisabledType;
        class PoliceNotes;
        class PoliceNote;
        class PVForm;
        class Workers;
        class Notes;
        class VotesByCA;
        class Reports;
        class ActivatedOfficialNonAudioByCA;
        class ActivatedDemoNonAudioByCA;
        class ActivatedOfficialAudioByCA;
        class ActivatedDemoAudioByCA;
        class Activations;
        class CloseNotes;
        class VoteByCA;
        class Report;
        class Activation;
        class CloseNote;
        class ActivationMode;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/PBReports
       * schema namespace.
       */
      namespace PBReports
      {
        /**
         * @brief Class corresponding to the %PVInfoElection schema type.
         *
         * @nosubgrouping
         */
        class PVInfoElection: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name RegionLevel
           *
           * @brief Accessor and modifier functions for the %RegionLevel
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::RegionLevel RegionLevelType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< RegionLevelType > RegionLevelSequence;

          /**
           * @brief Element iterator type.
           */
          typedef RegionLevelSequence::iterator RegionLevelIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef RegionLevelSequence::const_iterator RegionLevelConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RegionLevelType, char > RegionLevelTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const RegionLevelSequence&
          getRegionLevel () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          RegionLevelSequence&
          getRegionLevel ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setRegionLevel (const RegionLevelSequence& s);

          //@}

          /**
           * @name election-name
           *
           * @brief Accessor and modifier functions for the %election-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Election_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Election_nameType, char > Election_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Election_nameType&
          getElection_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Election_nameType&
          getElection_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setElection_name (const Election_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElection_name (::std::auto_ptr< Election_nameType > p);

          //@}

          /**
           * @name electoral-organization
           *
           * @brief Accessor and modifier functions for the %electoral-organization
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Electoral_organizationType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Electoral_organizationType, char > Electoral_organizationTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Electoral_organizationType&
          getElectoral_organization () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Electoral_organizationType&
          getElectoral_organization ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setElectoral_organization (const Electoral_organizationType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElectoral_organization (::std::auto_ptr< Electoral_organizationType > p);

          //@}

          /**
           * @name creation-time
           *
           * @brief Accessor and modifier functions for the %creation-time
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Creation_timeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Creation_timeType, char > Creation_timeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Creation_timeType&
          getCreation_time () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Creation_timeType&
          getCreation_time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCreation_time (const Creation_timeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCreation_time (::std::auto_ptr< Creation_timeType > p);

          //@}

          /**
           * @name voting-device-code
           *
           * @brief Accessor and modifier functions for the %voting-device-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Voting_device_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_device_codeType, char > Voting_device_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Voting_device_codeType&
          getVoting_device_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Voting_device_codeType&
          getVoting_device_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVoting_device_code (const Voting_device_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoting_device_code (::std::auto_ptr< Voting_device_codeType > p);

          //@}

          /**
           * @name polling-station-code
           *
           * @brief Accessor and modifier functions for the %polling-station-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Polling_station_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_station_codeType, char > Polling_station_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_station_codeType&
          getPolling_station_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_station_codeType&
          getPolling_station_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_station_code (const Polling_station_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_station_code (::std::auto_ptr< Polling_station_codeType > p);

          //@}

          /**
           * @name polling-station-number
           *
           * @brief Accessor and modifier functions for the %polling-station-number
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PositiveInteger Polling_station_numberType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_station_numberType, char > Polling_station_numberTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_station_numberType&
          getPolling_station_number () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_station_numberType&
          getPolling_station_number ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_station_number (const Polling_station_numberType& x);

          //@}

          /**
           * @name polling-station-criteria
           *
           * @brief Accessor and modifier functions for the %polling-station-criteria
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Polling_station_criteriaType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_station_criteriaType, char > Polling_station_criteriaTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_station_criteriaType&
          getPolling_station_criteria () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_station_criteriaType&
          getPolling_station_criteria ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_station_criteria (const Polling_station_criteriaType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_station_criteria (::std::auto_ptr< Polling_station_criteriaType > p);

          //@}

          /**
           * @name polling-place-code
           *
           * @brief Accessor and modifier functions for the %polling-place-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Polling_place_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_codeType, char > Polling_place_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_codeType&
          getPolling_place_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_codeType&
          getPolling_place_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_code (const Polling_place_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_place_code (::std::auto_ptr< Polling_place_codeType > p);

          //@}

          /**
           * @name polling-place-registered-electors
           *
           * @brief Accessor and modifier functions for the %polling-place-registered-electors
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::Integer Polling_place_registered_electorsType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_registered_electorsType, char > Polling_place_registered_electorsTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_registered_electorsType&
          getPolling_place_registered_electors () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_registered_electorsType&
          getPolling_place_registered_electors ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_registered_electors (const Polling_place_registered_electorsType& x);

          //@}

          /**
           * @name polling-place-address
           *
           * @brief Accessor and modifier functions for the %polling-place-address
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Polling_place_addressType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_addressType, char > Polling_place_addressTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_addressType&
          getPolling_place_address () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_addressType&
          getPolling_place_address ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_address (const Polling_place_addressType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_place_address (::std::auto_ptr< Polling_place_addressType > p);

          //@}

          /**
           * @name polling-place-name
           *
           * @brief Accessor and modifier functions for the %polling-place-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Polling_place_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_nameType, char > Polling_place_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_nameType&
          getPolling_place_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_nameType&
          getPolling_place_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_name (const Polling_place_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_place_name (::std::auto_ptr< Polling_place_nameType > p);

          //@}

          /**
           * @name number-senators
           *
           * @brief Accessor and modifier functions for the %number-senators
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::Integer Number_senatorsType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Number_senatorsType, char > Number_senatorsTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Number_senatorsType&
          getNumber_senators () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Number_senatorsType&
          getNumber_senators ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNumber_senators (const Number_senatorsType& x);

          //@}

          /**
           * @name number-members
           *
           * @brief Accessor and modifier functions for the %number-members
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::Integer Number_membersType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Number_membersType, char > Number_membersTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Number_membersType&
          getNumber_members () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Number_membersType&
          getNumber_members ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNumber_members (const Number_membersType& x);

          //@}

          /**
           * @name opening-date
           *
           * @brief Accessor and modifier functions for the %opening-date
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Opening_dateType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Opening_dateType, char > Opening_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Opening_dateType&
          getOpening_date () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Opening_dateType&
          getOpening_date ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setOpening_date (const Opening_dateType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOpening_date (::std::auto_ptr< Opening_dateType > p);

          //@}

          /**
           * @name close-voting-date
           *
           * @brief Accessor and modifier functions for the %close-voting-date
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Close_voting_dateType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Close_voting_dateType, char > Close_voting_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Close_voting_dateType&
          getClose_voting_date () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Close_voting_dateType&
          getClose_voting_date ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setClose_voting_date (const Close_voting_dateType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setClose_voting_date (::std::auto_ptr< Close_voting_dateType > p);

          //@}

          /**
           * @name close-election-date
           *
           * @brief Accessor and modifier functions for the %close-election-date
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Close_election_dateType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Close_election_dateType, char > Close_election_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Close_election_dateType&
          getClose_election_date () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Close_election_dateType&
          getClose_election_date ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setClose_election_date (const Close_election_dateType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setClose_election_date (::std::auto_ptr< Close_election_dateType > p);

          //@}

          /**
           * @name duration-election-date
           *
           * @brief Accessor and modifier functions for the %duration-election-date
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Duration_election_dateType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Duration_election_dateType, char > Duration_election_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Duration_election_dateType&
          getDuration_election_date () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Duration_election_dateType&
          getDuration_election_date ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDuration_election_date (const Duration_election_dateType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDuration_election_date (::std::auto_ptr< Duration_election_dateType > p);

          //@}

          /**
           * @name niscode
           *
           * @brief Accessor and modifier functions for the %niscode
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String NiscodeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NiscodeType > NiscodeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NiscodeType, char > NiscodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NiscodeOptional&
          getNiscode () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          NiscodeOptional&
          getNiscode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNiscode (const NiscodeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setNiscode (const NiscodeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setNiscode (::std::auto_ptr< NiscodeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVInfoElection ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVInfoElection (const Election_nameType&,
                          const Electoral_organizationType&,
                          const Creation_timeType&,
                          const Voting_device_codeType&,
                          const Polling_station_codeType&,
                          const Polling_station_numberType&,
                          const Polling_station_criteriaType&,
                          const Polling_place_codeType&,
                          const Polling_place_registered_electorsType&,
                          const Polling_place_addressType&,
                          const Polling_place_nameType&,
                          const Number_senatorsType&,
                          const Number_membersType&,
                          const Opening_dateType&,
                          const Close_voting_dateType&,
                          const Close_election_dateType&,
                          const Duration_election_dateType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVInfoElection (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVInfoElection (const PVInfoElection& x,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVInfoElection*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVInfoElection ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          RegionLevelSequence RegionLevel_;
          ::xsd::cxx::tree::one< Election_nameType > election_name_;
          ::xsd::cxx::tree::one< Electoral_organizationType > electoral_organization_;
          ::xsd::cxx::tree::one< Creation_timeType > creation_time_;
          ::xsd::cxx::tree::one< Voting_device_codeType > voting_device_code_;
          ::xsd::cxx::tree::one< Polling_station_codeType > polling_station_code_;
          ::xsd::cxx::tree::one< Polling_station_numberType > polling_station_number_;
          ::xsd::cxx::tree::one< Polling_station_criteriaType > polling_station_criteria_;
          ::xsd::cxx::tree::one< Polling_place_codeType > polling_place_code_;
          ::xsd::cxx::tree::one< Polling_place_registered_electorsType > polling_place_registered_electors_;
          ::xsd::cxx::tree::one< Polling_place_addressType > polling_place_address_;
          ::xsd::cxx::tree::one< Polling_place_nameType > polling_place_name_;
          ::xsd::cxx::tree::one< Number_senatorsType > number_senators_;
          ::xsd::cxx::tree::one< Number_membersType > number_members_;
          ::xsd::cxx::tree::one< Opening_dateType > opening_date_;
          ::xsd::cxx::tree::one< Close_voting_dateType > close_voting_date_;
          ::xsd::cxx::tree::one< Close_election_dateType > close_election_date_;
          ::xsd::cxx::tree::one< Duration_election_dateType > duration_election_date_;
          NiscodeOptional niscode_;

          //@endcond
        };

        bool
        operator== (const PVInfoElection&, const PVInfoElection&);

        bool
        operator!= (const PVInfoElection&, const PVInfoElection&);


        /**
         * @brief Class corresponding to the %PVContest schema type.
         *
         * @nosubgrouping
         */
        class PVContest: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name PrincipalsSelected
           *
           * @brief Accessor and modifier functions for the %PrincipalsSelected
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PVCandidate PrincipalsSelectedType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< PrincipalsSelectedType > PrincipalsSelectedSequence;

          /**
           * @brief Element iterator type.
           */
          typedef PrincipalsSelectedSequence::iterator PrincipalsSelectedIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef PrincipalsSelectedSequence::const_iterator PrincipalsSelectedConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PrincipalsSelectedType, char > PrincipalsSelectedTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const PrincipalsSelectedSequence&
          getPrincipalsSelected () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          PrincipalsSelectedSequence&
          getPrincipalsSelected ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setPrincipalsSelected (const PrincipalsSelectedSequence& s);

          //@}

          /**
           * @name StandInSelected
           *
           * @brief Accessor and modifier functions for the %StandInSelected
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PVCandidate StandInSelectedType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< StandInSelectedType > StandInSelectedSequence;

          /**
           * @brief Element iterator type.
           */
          typedef StandInSelectedSequence::iterator StandInSelectedIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef StandInSelectedSequence::const_iterator StandInSelectedConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StandInSelectedType, char > StandInSelectedTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const StandInSelectedSequence&
          getStandInSelected () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          StandInSelectedSequence&
          getStandInSelected ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setStandInSelected (const StandInSelectedSequence& s);

          //@}

          /**
           * @name pv-report-name
           *
           * @brief Accessor and modifier functions for the %pv-report-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Pv_report_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pv_report_nameType, char > Pv_report_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Pv_report_nameType&
          getPv_report_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Pv_report_nameType&
          getPv_report_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPv_report_name (const Pv_report_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPv_report_name (::std::auto_ptr< Pv_report_nameType > p);

          //@}

          /**
           * @name pv-party-name
           *
           * @brief Accessor and modifier functions for the %pv-party-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Pv_party_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pv_party_nameType, char > Pv_party_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Pv_party_nameType&
          getPv_party_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Pv_party_nameType&
          getPv_party_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPv_party_name (const Pv_party_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPv_party_name (::std::auto_ptr< Pv_party_nameType > p);

          //@}

          /**
           * @name null-info
           *
           * @brief Accessor and modifier functions for the %null-info
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Null_infoType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Null_infoType, char > Null_infoTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Null_infoType&
          getNull_info () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Null_infoType&
          getNull_info ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNull_info (const Null_infoType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setNull_info (::std::auto_ptr< Null_infoType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVContest ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVContest (const Pv_report_nameType&,
                     const Pv_party_nameType&,
                     const Null_infoType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVContest (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVContest (const PVContest& x,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVContest*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVContest ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          PrincipalsSelectedSequence PrincipalsSelected_;
          StandInSelectedSequence StandInSelected_;
          ::xsd::cxx::tree::one< Pv_report_nameType > pv_report_name_;
          ::xsd::cxx::tree::one< Pv_party_nameType > pv_party_name_;
          ::xsd::cxx::tree::one< Null_infoType > null_info_;

          //@endcond
        };

        bool
        operator== (const PVContest&, const PVContest&);

        bool
        operator!= (const PVContest&, const PVContest&);


        /**
         * @brief Class corresponding to the %PVVote schema type.
         *
         * @nosubgrouping
         */
        class PVVote: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name Contest
           *
           * @brief Accessor and modifier functions for the %Contest
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PVContest ContestType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ContestType > ContestSequence;

          /**
           * @brief Element iterator type.
           */
          typedef ContestSequence::iterator ContestIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ContestSequence::const_iterator ContestConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ContestType, char > ContestTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ContestSequence&
          getContest () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ContestSequence&
          getContest ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setContest (const ContestSequence& s);

          //@}

          /**
           * @name logical-voter-group
           *
           * @brief Accessor and modifier functions for the %logical-voter-group
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Logical_voter_groupType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_groupType, char > Logical_voter_groupTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Logical_voter_groupType&
          getLogical_voter_group () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Logical_voter_groupType&
          getLogical_voter_group ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setLogical_voter_group (const Logical_voter_groupType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogical_voter_group (::std::auto_ptr< Logical_voter_groupType > p);

          //@}

          /**
           * @name vote-code
           *
           * @brief Accessor and modifier functions for the %vote-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Vote_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Vote_codeType, char > Vote_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Vote_codeType&
          getVote_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Vote_codeType&
          getVote_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVote_code (const Vote_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVote_code (::std::auto_ptr< Vote_codeType > p);

          //@}

          /**
           * @name voting-device-code
           *
           * @brief Accessor and modifier functions for the %voting-device-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Voting_device_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_device_codeType, char > Voting_device_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Voting_device_codeType&
          getVoting_device_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Voting_device_codeType&
          getVoting_device_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVoting_device_code (const Voting_device_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoting_device_code (::std::auto_ptr< Voting_device_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVVote ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVVote (const Logical_voter_groupType&,
                  const Vote_codeType&,
                  const Voting_device_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVVote (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVVote (const PVVote& x,
                  ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVVote*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVVote ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          ContestSequence Contest_;
          ::xsd::cxx::tree::one< Logical_voter_groupType > logical_voter_group_;
          ::xsd::cxx::tree::one< Vote_codeType > vote_code_;
          ::xsd::cxx::tree::one< Voting_device_codeType > voting_device_code_;

          //@endcond
        };

        bool
        operator== (const PVVote&, const PVVote&);

        bool
        operator!= (const PVVote&, const PVVote&);


        /**
         * @brief Class corresponding to the %PVCandidate schema type.
         *
         * @nosubgrouping
         */
        class PVCandidate: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name info
           *
           * @brief Accessor and modifier functions for the %info
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String InfoType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< InfoType, char > InfoTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const InfoType&
          getInfo () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          InfoType&
          getInfo ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setInfo (const InfoType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setInfo (::std::auto_ptr< InfoType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVCandidate ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVCandidate (const InfoType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVCandidate (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                       ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVCandidate (const PVCandidate& x,
                       ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                       ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVCandidate*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVCandidate ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          ::xsd::cxx::tree::one< InfoType > info_;

          //@endcond
        };

        bool
        operator== (const PVCandidate&, const PVCandidate&);

        bool
        operator!= (const PVCandidate&, const PVCandidate&);


        /**
         * @brief Class corresponding to the %PVVotes schema type.
         *
         * @nosubgrouping
         */
        class PVVotes: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name Vote
           *
           * @brief Accessor and modifier functions for the %Vote
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PVVote VoteType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< VoteType > VoteSequence;

          /**
           * @brief Element iterator type.
           */
          typedef VoteSequence::iterator VoteIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef VoteSequence::const_iterator VoteConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VoteType, char > VoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const VoteSequence&
          getVote () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          VoteSequence&
          getVote ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setVote (const VoteSequence& s);

          //@}

          /**
           * @name total-votes
           *
           * @brief Accessor and modifier functions for the %total-votes
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::NonNegativeInteger Total_votesType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Total_votesType, char > Total_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Total_votesType&
          getTotal_votes () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Total_votesType&
          getTotal_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTotal_votes (const Total_votesType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVVotes ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVVotes (const Total_votesType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVVotes (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVVotes (const PVVotes& x,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVVotes*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVVotes ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          VoteSequence Vote_;
          ::xsd::cxx::tree::one< Total_votesType > total_votes_;

          //@endcond
        };

        bool
        operator== (const PVVotes&, const PVVotes&);

        bool
        operator!= (const PVVotes&, const PVVotes&);


        /**
         * @brief Class corresponding to the %RegionLevel schema type.
         *
         * @nosubgrouping
         */
        class RegionLevel: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name category-level
           *
           * @brief Accessor and modifier functions for the %category-level
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String Category_levelType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Category_levelType, char > Category_levelTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Category_levelType&
          getCategory_level () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Category_levelType&
          getCategory_level ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCategory_level (const Category_levelType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCategory_level (::std::auto_ptr< Category_levelType > p);

          //@}

          /**
           * @name category
           *
           * @brief Accessor and modifier functions for the %category
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String CategoryType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CategoryType, char > CategoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CategoryType&
          getCategory () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CategoryType&
          getCategory ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCategory (const CategoryType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCategory (::std::auto_ptr< CategoryType > p);

          //@}

          /**
           * @name name
           *
           * @brief Accessor and modifier functions for the %name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String NameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const NameType&
          getName () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          NameType&
          getName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName (const NameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName (::std::auto_ptr< NameType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          RegionLevel ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RegionLevel (const Category_levelType&,
                       const CategoryType&,
                       const NameType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RegionLevel (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                       ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RegionLevel (const RegionLevel& x,
                       ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                       ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RegionLevel*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RegionLevel ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          ::xsd::cxx::tree::one< Category_levelType > category_level_;
          ::xsd::cxx::tree::one< CategoryType > category_;
          ::xsd::cxx::tree::one< NameType > name_;

          //@endcond
        };

        bool
        operator== (const RegionLevel&, const RegionLevel&);

        bool
        operator!= (const RegionLevel&, const RegionLevel&);


        /**
         * @brief Class corresponding to the %PVForm schema type.
         *
         * @nosubgrouping
         */
        class PVForm: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name InfoElection
           *
           * @brief Accessor and modifier functions for the %InfoElection
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PVInfoElection InfoElectionType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< InfoElectionType, char > InfoElectionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const InfoElectionType&
          getInfoElection () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          InfoElectionType&
          getInfoElection ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setInfoElection (const InfoElectionType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setInfoElection (::std::auto_ptr< InfoElectionType > p);

          //@}

          /**
           * @name Pollworkers
           *
           * @brief Accessor and modifier functions for the %Pollworkers
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::Pollworkers PollworkersType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PollworkersType, char > PollworkersTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PollworkersType&
          getPollworkers () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PollworkersType&
          getPollworkers ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPollworkers (const PollworkersType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPollworkers (::std::auto_ptr< PollworkersType > p);

          //@}

          /**
           * @name Statistics
           *
           * @brief Accessor and modifier functions for the %Statistics
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::Statistics StatisticsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StatisticsType, char > StatisticsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const StatisticsType&
          getStatistics () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          StatisticsType&
          getStatistics ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStatistics (const StatisticsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setStatistics (::std::auto_ptr< StatisticsType > p);

          //@}

          /**
           * @name VoteStatistics
           *
           * @brief Accessor and modifier functions for the %VoteStatistics
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::VoteStatistics VoteStatisticsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VoteStatisticsType, char > VoteStatisticsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VoteStatisticsType&
          getVoteStatistics () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VoteStatisticsType&
          getVoteStatistics ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVoteStatistics (const VoteStatisticsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoteStatistics (::std::auto_ptr< VoteStatisticsType > p);

          //@}

          /**
           * @name ActivatedCardStatistics
           *
           * @brief Accessor and modifier functions for the %ActivatedCardStatistics
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics ActivatedCardStatisticsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ActivatedCardStatisticsType, char > ActivatedCardStatisticsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ActivatedCardStatisticsType&
          getActivatedCardStatistics () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ActivatedCardStatisticsType&
          getActivatedCardStatistics ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setActivatedCardStatistics (const ActivatedCardStatisticsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setActivatedCardStatistics (::std::auto_ptr< ActivatedCardStatisticsType > p);

          //@}

          /**
           * @name AssistedActivations
           *
           * @brief Accessor and modifier functions for the %AssistedActivations
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::AssistedActivations AssistedActivationsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AssistedActivationsType, char > AssistedActivationsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const AssistedActivationsType&
          getAssistedActivations () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          AssistedActivationsType&
          getAssistedActivations ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAssistedActivations (const AssistedActivationsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAssistedActivations (::std::auto_ptr< AssistedActivationsType > p);

          //@}

          /**
           * @name VotingDisabledInformation
           *
           * @brief Accessor and modifier functions for the %VotingDisabledInformation
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation VotingDisabledInformationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VotingDisabledInformationType, char > VotingDisabledInformationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const VotingDisabledInformationType&
          getVotingDisabledInformation () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          VotingDisabledInformationType&
          getVotingDisabledInformation ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVotingDisabledInformation (const VotingDisabledInformationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVotingDisabledInformation (::std::auto_ptr< VotingDisabledInformationType > p);

          //@}

          /**
           * @name IncidentReports
           *
           * @brief Accessor and modifier functions for the %IncidentReports
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::IncidentReports IncidentReportsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IncidentReportsType, char > IncidentReportsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IncidentReportsType&
          getIncidentReports () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IncidentReportsType&
          getIncidentReports ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIncidentReports (const IncidentReportsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setIncidentReports (::std::auto_ptr< IncidentReportsType > p);

          //@}

          /**
           * @name CloseElectionNotes
           *
           * @brief Accessor and modifier functions for the %CloseElectionNotes
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes CloseElectionNotesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CloseElectionNotesType, char > CloseElectionNotesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CloseElectionNotesType&
          getCloseElectionNotes () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CloseElectionNotesType&
          getCloseElectionNotes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCloseElectionNotes (const CloseElectionNotesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCloseElectionNotes (::std::auto_ptr< CloseElectionNotesType > p);

          //@}

          /**
           * @name ReferenceVotes
           *
           * @brief Accessor and modifier functions for the %ReferenceVotes
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PVVotes ReferenceVotesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ReferenceVotesType, char > ReferenceVotesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ReferenceVotesType&
          getReferenceVotes () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ReferenceVotesType&
          getReferenceVotes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setReferenceVotes (const ReferenceVotesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setReferenceVotes (::std::auto_ptr< ReferenceVotesType > p);

          //@}

          /**
           * @name HashOfTheResults
           *
           * @brief Accessor and modifier functions for the %HashOfTheResults
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String HashOfTheResultsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< HashOfTheResultsType, char > HashOfTheResultsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const HashOfTheResultsType&
          getHashOfTheResults () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          HashOfTheResultsType&
          getHashOfTheResults ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setHashOfTheResults (const HashOfTheResultsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setHashOfTheResults (::std::auto_ptr< HashOfTheResultsType > p);

          //@}

          /**
           * @name IDCardMembers
           *
           * @brief Accessor and modifier functions for the %IDCardMembers
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::IDCardMembers IDCardMembersType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< IDCardMembersType, char > IDCardMembersTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const IDCardMembersType&
          getIDCardMembers () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          IDCardMembersType&
          getIDCardMembers ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIDCardMembers (const IDCardMembersType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setIDCardMembers (::std::auto_ptr< IDCardMembersType > p);

          //@}

          /**
           * @name PoliceNotes
           *
           * @brief Accessor and modifier functions for the %PoliceNotes
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::PoliceNotes PoliceNotesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PoliceNotesType, char > PoliceNotesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PoliceNotesType&
          getPoliceNotes () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PoliceNotesType&
          getPoliceNotes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPoliceNotes (const PoliceNotesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPoliceNotes (::std::auto_ptr< PoliceNotesType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          PVForm ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          PVForm (const InfoElectionType&,
                  const PollworkersType&,
                  const StatisticsType&,
                  const VoteStatisticsType&,
                  const ActivatedCardStatisticsType&,
                  const AssistedActivationsType&,
                  const VotingDisabledInformationType&,
                  const IncidentReportsType&,
                  const CloseElectionNotesType&,
                  const ReferenceVotesType&,
                  const HashOfTheResultsType&,
                  const IDCardMembersType&,
                  const PoliceNotesType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          PVForm (::std::auto_ptr< InfoElectionType >&,
                  ::std::auto_ptr< PollworkersType >&,
                  ::std::auto_ptr< StatisticsType >&,
                  ::std::auto_ptr< VoteStatisticsType >&,
                  ::std::auto_ptr< ActivatedCardStatisticsType >&,
                  ::std::auto_ptr< AssistedActivationsType >&,
                  ::std::auto_ptr< VotingDisabledInformationType >&,
                  ::std::auto_ptr< IncidentReportsType >&,
                  ::std::auto_ptr< CloseElectionNotesType >&,
                  ::std::auto_ptr< ReferenceVotesType >&,
                  const HashOfTheResultsType&,
                  ::std::auto_ptr< IDCardMembersType >&,
                  ::std::auto_ptr< PoliceNotesType >&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          PVForm (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          PVForm (const PVForm& x,
                  ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual PVForm*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~PVForm ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          ::xsd::cxx::tree::one< InfoElectionType > InfoElection_;
          ::xsd::cxx::tree::one< PollworkersType > Pollworkers_;
          ::xsd::cxx::tree::one< StatisticsType > Statistics_;
          ::xsd::cxx::tree::one< VoteStatisticsType > VoteStatistics_;
          ::xsd::cxx::tree::one< ActivatedCardStatisticsType > ActivatedCardStatistics_;
          ::xsd::cxx::tree::one< AssistedActivationsType > AssistedActivations_;
          ::xsd::cxx::tree::one< VotingDisabledInformationType > VotingDisabledInformation_;
          ::xsd::cxx::tree::one< IncidentReportsType > IncidentReports_;
          ::xsd::cxx::tree::one< CloseElectionNotesType > CloseElectionNotes_;
          ::xsd::cxx::tree::one< ReferenceVotesType > ReferenceVotes_;
          ::xsd::cxx::tree::one< HashOfTheResultsType > HashOfTheResults_;
          ::xsd::cxx::tree::one< IDCardMembersType > IDCardMembers_;
          ::xsd::cxx::tree::one< PoliceNotesType > PoliceNotes_;

          //@endcond
        };

        bool
        operator== (const PVForm&, const PVForm&);

        bool
        operator!= (const PVForm&, const PVForm&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        /**
         * @name Parsing functions for the %PVForm document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::std::string& uri,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::std::string& uri,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     const ::std::string& id,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     const ::std::string& id,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::xercesc::InputSource& is,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::xercesc::InputSource& is,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::xercesc::DOMDocument& d,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        /**
         * @name Serialization functions for the %PVForm document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializePVForm (::std::ostream& os,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializePVForm (::std::ostream& os,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializePVForm (::std::ostream& os,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializePVForm (::xercesc::XMLFormatTarget& ft,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializePVForm (::xercesc::XMLFormatTarget& ft,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializePVForm (::xercesc::XMLFormatTarget& ft,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         const ::std::string& e = "UTF-8",
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializePVForm (::xercesc::DOMDocument& d,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& x,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializePVForm (const ::Smartmatic::SAES::Voting::PBReports::PVForm& x, 
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const PVInfoElection&);

        void
        operator<< (::xercesc::DOMElement&, const PVContest&);

        void
        operator<< (::xercesc::DOMElement&, const PVVote&);

        void
        operator<< (::xercesc::DOMElement&, const PVCandidate&);

        void
        operator<< (::xercesc::DOMElement&, const PVVotes&);

        void
        operator<< (::xercesc::DOMElement&, const RegionLevel&);

        void
        operator<< (::xercesc::DOMElement&, const PVForm&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_PVFORM_SCHEMA_HXX
