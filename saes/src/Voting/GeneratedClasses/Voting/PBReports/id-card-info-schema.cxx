// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "id-card-info-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // IDCardInfoType
        // 

        IDCardInfoType::
        IDCardInfoType ()
        : ::Smartmatic::SAES::Voting::PBReports::String ()
        {
        }

        IDCardInfoType::
        IDCardInfoType (Value v)
        : ::Smartmatic::SAES::Voting::PBReports::String (_xsd_IDCardInfoType_literals_[v])
        {
        }

        IDCardInfoType::
        IDCardInfoType (const char* v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        IDCardInfoType::
        IDCardInfoType (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        IDCardInfoType::
        IDCardInfoType (const ::Smartmatic::SAES::Voting::PBReports::String& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        IDCardInfoType::
        IDCardInfoType (const IDCardInfoType& v,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (v, f, c)
        {
        }

        IDCardInfoType& IDCardInfoType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::PBReports::String& > (*this) = 
          ::Smartmatic::SAES::Voting::PBReports::String (_xsd_IDCardInfoType_literals_[v]);

          return *this;
        }


        // IDCardInfo
        // 

        const IDCardInfo::FirstNameType& IDCardInfo::
        getFirstName () const
        {
          return this->FirstName_.get ();
        }

        IDCardInfo::FirstNameType& IDCardInfo::
        getFirstName ()
        {
          return this->FirstName_.get ();
        }

        void IDCardInfo::
        setFirstName (const FirstNameType& x)
        {
          this->FirstName_.set (x);
        }

        void IDCardInfo::
        setFirstName (::std::auto_ptr< FirstNameType > x)
        {
          this->FirstName_.set (x);
        }

        const IDCardInfo::SurnameType& IDCardInfo::
        getSurname () const
        {
          return this->Surname_.get ();
        }

        IDCardInfo::SurnameType& IDCardInfo::
        getSurname ()
        {
          return this->Surname_.get ();
        }

        void IDCardInfo::
        setSurname (const SurnameType& x)
        {
          this->Surname_.set (x);
        }

        void IDCardInfo::
        setSurname (::std::auto_ptr< SurnameType > x)
        {
          this->Surname_.set (x);
        }

        const IDCardInfo::GenderOptional& IDCardInfo::
        getGender () const
        {
          return this->Gender_;
        }

        IDCardInfo::GenderOptional& IDCardInfo::
        getGender ()
        {
          return this->Gender_;
        }

        void IDCardInfo::
        setGender (const GenderType& x)
        {
          this->Gender_.set (x);
        }

        void IDCardInfo::
        setGender (const GenderOptional& x)
        {
          this->Gender_ = x;
        }

        void IDCardInfo::
        setGender (::std::auto_ptr< GenderType > x)
        {
          this->Gender_.set (x);
        }

        const IDCardInfo::DateOfBirthOptional& IDCardInfo::
        getDateOfBirth () const
        {
          return this->DateOfBirth_;
        }

        IDCardInfo::DateOfBirthOptional& IDCardInfo::
        getDateOfBirth ()
        {
          return this->DateOfBirth_;
        }

        void IDCardInfo::
        setDateOfBirth (const DateOfBirthType& x)
        {
          this->DateOfBirth_.set (x);
        }

        void IDCardInfo::
        setDateOfBirth (const DateOfBirthOptional& x)
        {
          this->DateOfBirth_ = x;
        }

        void IDCardInfo::
        setDateOfBirth (::std::auto_ptr< DateOfBirthType > x)
        {
          this->DateOfBirth_.set (x);
        }

        const IDCardInfo::LocationOfBirthOptional& IDCardInfo::
        getLocationOfBirth () const
        {
          return this->LocationOfBirth_;
        }

        IDCardInfo::LocationOfBirthOptional& IDCardInfo::
        getLocationOfBirth ()
        {
          return this->LocationOfBirth_;
        }

        void IDCardInfo::
        setLocationOfBirth (const LocationOfBirthType& x)
        {
          this->LocationOfBirth_.set (x);
        }

        void IDCardInfo::
        setLocationOfBirth (const LocationOfBirthOptional& x)
        {
          this->LocationOfBirth_ = x;
        }

        void IDCardInfo::
        setLocationOfBirth (::std::auto_ptr< LocationOfBirthType > x)
        {
          this->LocationOfBirth_.set (x);
        }

        const IDCardInfo::NationalityOptional& IDCardInfo::
        getNationality () const
        {
          return this->Nationality_;
        }

        IDCardInfo::NationalityOptional& IDCardInfo::
        getNationality ()
        {
          return this->Nationality_;
        }

        void IDCardInfo::
        setNationality (const NationalityType& x)
        {
          this->Nationality_.set (x);
        }

        void IDCardInfo::
        setNationality (const NationalityOptional& x)
        {
          this->Nationality_ = x;
        }

        void IDCardInfo::
        setNationality (::std::auto_ptr< NationalityType > x)
        {
          this->Nationality_.set (x);
        }

        const IDCardInfo::NationalNumberOptional& IDCardInfo::
        getNationalNumber () const
        {
          return this->NationalNumber_;
        }

        IDCardInfo::NationalNumberOptional& IDCardInfo::
        getNationalNumber ()
        {
          return this->NationalNumber_;
        }

        void IDCardInfo::
        setNationalNumber (const NationalNumberType& x)
        {
          this->NationalNumber_.set (x);
        }

        void IDCardInfo::
        setNationalNumber (const NationalNumberOptional& x)
        {
          this->NationalNumber_ = x;
        }

        void IDCardInfo::
        setNationalNumber (::std::auto_ptr< NationalNumberType > x)
        {
          this->NationalNumber_.set (x);
        }

        const IDCardInfo::SpecialOrganizationOptional& IDCardInfo::
        getSpecialOrganization () const
        {
          return this->SpecialOrganization_;
        }

        IDCardInfo::SpecialOrganizationOptional& IDCardInfo::
        getSpecialOrganization ()
        {
          return this->SpecialOrganization_;
        }

        void IDCardInfo::
        setSpecialOrganization (const SpecialOrganizationType& x)
        {
          this->SpecialOrganization_.set (x);
        }

        void IDCardInfo::
        setSpecialOrganization (const SpecialOrganizationOptional& x)
        {
          this->SpecialOrganization_ = x;
        }

        void IDCardInfo::
        setSpecialOrganization (::std::auto_ptr< SpecialOrganizationType > x)
        {
          this->SpecialOrganization_.set (x);
        }

        const IDCardInfo::MemberOfFamilyOptional& IDCardInfo::
        getMemberOfFamily () const
        {
          return this->MemberOfFamily_;
        }

        IDCardInfo::MemberOfFamilyOptional& IDCardInfo::
        getMemberOfFamily ()
        {
          return this->MemberOfFamily_;
        }

        void IDCardInfo::
        setMemberOfFamily (const MemberOfFamilyType& x)
        {
          this->MemberOfFamily_.set (x);
        }

        void IDCardInfo::
        setMemberOfFamily (const MemberOfFamilyOptional& x)
        {
          this->MemberOfFamily_ = x;
        }

        void IDCardInfo::
        setMemberOfFamily (::std::auto_ptr< MemberOfFamilyType > x)
        {
          this->MemberOfFamily_.set (x);
        }

        const IDCardInfo::AddressVersionOptional& IDCardInfo::
        getAddressVersion () const
        {
          return this->AddressVersion_;
        }

        IDCardInfo::AddressVersionOptional& IDCardInfo::
        getAddressVersion ()
        {
          return this->AddressVersion_;
        }

        void IDCardInfo::
        setAddressVersion (const AddressVersionType& x)
        {
          this->AddressVersion_.set (x);
        }

        void IDCardInfo::
        setAddressVersion (const AddressVersionOptional& x)
        {
          this->AddressVersion_ = x;
        }

        void IDCardInfo::
        setAddressVersion (::std::auto_ptr< AddressVersionType > x)
        {
          this->AddressVersion_.set (x);
        }

        const IDCardInfo::StreetOptional& IDCardInfo::
        getStreet () const
        {
          return this->Street_;
        }

        IDCardInfo::StreetOptional& IDCardInfo::
        getStreet ()
        {
          return this->Street_;
        }

        void IDCardInfo::
        setStreet (const StreetType& x)
        {
          this->Street_.set (x);
        }

        void IDCardInfo::
        setStreet (const StreetOptional& x)
        {
          this->Street_ = x;
        }

        void IDCardInfo::
        setStreet (::std::auto_ptr< StreetType > x)
        {
          this->Street_.set (x);
        }

        const IDCardInfo::ZipCodeOptional& IDCardInfo::
        getZipCode () const
        {
          return this->ZipCode_;
        }

        IDCardInfo::ZipCodeOptional& IDCardInfo::
        getZipCode ()
        {
          return this->ZipCode_;
        }

        void IDCardInfo::
        setZipCode (const ZipCodeType& x)
        {
          this->ZipCode_.set (x);
        }

        void IDCardInfo::
        setZipCode (const ZipCodeOptional& x)
        {
          this->ZipCode_ = x;
        }

        void IDCardInfo::
        setZipCode (::std::auto_ptr< ZipCodeType > x)
        {
          this->ZipCode_.set (x);
        }

        const IDCardInfo::MunicipalityOptional& IDCardInfo::
        getMunicipality () const
        {
          return this->Municipality_;
        }

        IDCardInfo::MunicipalityOptional& IDCardInfo::
        getMunicipality ()
        {
          return this->Municipality_;
        }

        void IDCardInfo::
        setMunicipality (const MunicipalityType& x)
        {
          this->Municipality_.set (x);
        }

        void IDCardInfo::
        setMunicipality (const MunicipalityOptional& x)
        {
          this->Municipality_ = x;
        }

        void IDCardInfo::
        setMunicipality (::std::auto_ptr< MunicipalityType > x)
        {
          this->Municipality_.set (x);
        }

        const IDCardInfo::CountryOptional& IDCardInfo::
        getCountry () const
        {
          return this->Country_;
        }

        IDCardInfo::CountryOptional& IDCardInfo::
        getCountry ()
        {
          return this->Country_;
        }

        void IDCardInfo::
        setCountry (const CountryType& x)
        {
          this->Country_.set (x);
        }

        void IDCardInfo::
        setCountry (const CountryOptional& x)
        {
          this->Country_ = x;
        }

        void IDCardInfo::
        setCountry (::std::auto_ptr< CountryType > x)
        {
          this->Country_.set (x);
        }

        const IDCardInfo::SpecialStatusOptional& IDCardInfo::
        getSpecialStatus () const
        {
          return this->SpecialStatus_;
        }

        IDCardInfo::SpecialStatusOptional& IDCardInfo::
        getSpecialStatus ()
        {
          return this->SpecialStatus_;
        }

        void IDCardInfo::
        setSpecialStatus (const SpecialStatusType& x)
        {
          this->SpecialStatus_.set (x);
        }

        void IDCardInfo::
        setSpecialStatus (const SpecialStatusOptional& x)
        {
          this->SpecialStatus_ = x;
        }

        void IDCardInfo::
        setSpecialStatus (::std::auto_ptr< SpecialStatusType > x)
        {
          this->SpecialStatus_.set (x);
        }

        const IDCardInfo::TypeOptional& IDCardInfo::
        getType () const
        {
          return this->Type_;
        }

        IDCardInfo::TypeOptional& IDCardInfo::
        getType ()
        {
          return this->Type_;
        }

        void IDCardInfo::
        setType (const TypeType& x)
        {
          this->Type_.set (x);
        }

        void IDCardInfo::
        setType (const TypeOptional& x)
        {
          this->Type_ = x;
        }

        void IDCardInfo::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->Type_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // IDCardInfoType
        //

        IDCardInfoType::
        IDCardInfoType (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (e, f, c)
        {
          _xsd_IDCardInfoType_convert ();
        }

        IDCardInfoType::
        IDCardInfoType (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (a, f, c)
        {
          _xsd_IDCardInfoType_convert ();
        }

        IDCardInfoType::
        IDCardInfoType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (s, e, f, c)
        {
          _xsd_IDCardInfoType_convert ();
        }

        IDCardInfoType* IDCardInfoType::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class IDCardInfoType (*this, f, c);
        }

        IDCardInfoType::Value IDCardInfoType::
        _xsd_IDCardInfoType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_IDCardInfoType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_IDCardInfoType_indexes_,
                            _xsd_IDCardInfoType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_IDCardInfoType_indexes_ + 5 || _xsd_IDCardInfoType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const IDCardInfoType::
        _xsd_IDCardInfoType_literals_[5] =
        {
          "InstallPM",
          "InstallVM",
          "OpenElection",
          "CloseVoting",
          "CloseElection"
        };

        const IDCardInfoType::Value IDCardInfoType::
        _xsd_IDCardInfoType_indexes_[5] =
        {
          ::Smartmatic::SAES::Voting::PBReports::IDCardInfoType::IDCARDINFO_CLOSEELECTION,
          ::Smartmatic::SAES::Voting::PBReports::IDCardInfoType::IDCARDINFO_CLOSEVOTING,
          ::Smartmatic::SAES::Voting::PBReports::IDCardInfoType::IDCARDINFO_INSTALLPM,
          ::Smartmatic::SAES::Voting::PBReports::IDCardInfoType::IDCARDINFO_INSTALLVM,
          ::Smartmatic::SAES::Voting::PBReports::IDCardInfoType::IDCARDINFO_OPENELECTION
        };

        // IDCardInfo
        //

        IDCardInfo::
        IDCardInfo ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          FirstName_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Surname_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Gender_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          DateOfBirth_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          LocationOfBirth_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Nationality_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NationalNumber_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          SpecialOrganization_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          MemberOfFamily_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AddressVersion_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Street_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ZipCode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Municipality_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Country_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          SpecialStatus_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Type_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        IDCardInfo::
        IDCardInfo (const FirstNameType& FirstName,
                    const SurnameType& Surname)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          FirstName_ (FirstName, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Surname_ (Surname, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Gender_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          DateOfBirth_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          LocationOfBirth_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Nationality_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NationalNumber_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          SpecialOrganization_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          MemberOfFamily_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AddressVersion_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Street_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ZipCode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Municipality_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Country_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          SpecialStatus_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Type_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        IDCardInfo::
        IDCardInfo (const IDCardInfo& x,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          FirstName_ (x.FirstName_, f, this),
          Surname_ (x.Surname_, f, this),
          Gender_ (x.Gender_, f, this),
          DateOfBirth_ (x.DateOfBirth_, f, this),
          LocationOfBirth_ (x.LocationOfBirth_, f, this),
          Nationality_ (x.Nationality_, f, this),
          NationalNumber_ (x.NationalNumber_, f, this),
          SpecialOrganization_ (x.SpecialOrganization_, f, this),
          MemberOfFamily_ (x.MemberOfFamily_, f, this),
          AddressVersion_ (x.AddressVersion_, f, this),
          Street_ (x.Street_, f, this),
          ZipCode_ (x.ZipCode_, f, this),
          Municipality_ (x.Municipality_, f, this),
          Country_ (x.Country_, f, this),
          SpecialStatus_ (x.SpecialStatus_, f, this),
          Type_ (x.Type_, f, this)
        {
        }

        IDCardInfo::
        IDCardInfo (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          FirstName_ (f, this),
          Surname_ (f, this),
          Gender_ (f, this),
          DateOfBirth_ (f, this),
          LocationOfBirth_ (f, this),
          Nationality_ (f, this),
          NationalNumber_ (f, this),
          SpecialOrganization_ (f, this),
          MemberOfFamily_ (f, this),
          AddressVersion_ (f, this),
          Street_ (f, this),
          ZipCode_ (f, this),
          Municipality_ (f, this),
          Country_ (f, this),
          SpecialStatus_ (f, this),
          Type_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void IDCardInfo::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // FirstName
            //
            if (n.name () == "FirstName" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< FirstNameType > r (
                FirstNameTraits::create (i, f, this));

              if (!FirstName_.present ())
              {
                this->FirstName_.set (r);
                continue;
              }
            }

            // Surname
            //
            if (n.name () == "Surname" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< SurnameType > r (
                SurnameTraits::create (i, f, this));

              if (!Surname_.present ())
              {
                this->Surname_.set (r);
                continue;
              }
            }

            // Gender
            //
            if (n.name () == "Gender" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< GenderType > r (
                GenderTraits::create (i, f, this));

              if (!this->Gender_)
              {
                this->Gender_.set (r);
                continue;
              }
            }

            // DateOfBirth
            //
            if (n.name () == "DateOfBirth" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< DateOfBirthType > r (
                DateOfBirthTraits::create (i, f, this));

              if (!this->DateOfBirth_)
              {
                this->DateOfBirth_.set (r);
                continue;
              }
            }

            // LocationOfBirth
            //
            if (n.name () == "LocationOfBirth" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< LocationOfBirthType > r (
                LocationOfBirthTraits::create (i, f, this));

              if (!this->LocationOfBirth_)
              {
                this->LocationOfBirth_.set (r);
                continue;
              }
            }

            // Nationality
            //
            if (n.name () == "Nationality" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< NationalityType > r (
                NationalityTraits::create (i, f, this));

              if (!this->Nationality_)
              {
                this->Nationality_.set (r);
                continue;
              }
            }

            // NationalNumber
            //
            if (n.name () == "NationalNumber" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< NationalNumberType > r (
                NationalNumberTraits::create (i, f, this));

              if (!this->NationalNumber_)
              {
                this->NationalNumber_.set (r);
                continue;
              }
            }

            // SpecialOrganization
            //
            if (n.name () == "SpecialOrganization" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< SpecialOrganizationType > r (
                SpecialOrganizationTraits::create (i, f, this));

              if (!this->SpecialOrganization_)
              {
                this->SpecialOrganization_.set (r);
                continue;
              }
            }

            // MemberOfFamily
            //
            if (n.name () == "MemberOfFamily" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< MemberOfFamilyType > r (
                MemberOfFamilyTraits::create (i, f, this));

              if (!this->MemberOfFamily_)
              {
                this->MemberOfFamily_.set (r);
                continue;
              }
            }

            // AddressVersion
            //
            if (n.name () == "AddressVersion" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< AddressVersionType > r (
                AddressVersionTraits::create (i, f, this));

              if (!this->AddressVersion_)
              {
                this->AddressVersion_.set (r);
                continue;
              }
            }

            // Street
            //
            if (n.name () == "Street" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< StreetType > r (
                StreetTraits::create (i, f, this));

              if (!this->Street_)
              {
                this->Street_.set (r);
                continue;
              }
            }

            // ZipCode
            //
            if (n.name () == "ZipCode" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ZipCodeType > r (
                ZipCodeTraits::create (i, f, this));

              if (!this->ZipCode_)
              {
                this->ZipCode_.set (r);
                continue;
              }
            }

            // Municipality
            //
            if (n.name () == "Municipality" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< MunicipalityType > r (
                MunicipalityTraits::create (i, f, this));

              if (!this->Municipality_)
              {
                this->Municipality_.set (r);
                continue;
              }
            }

            // Country
            //
            if (n.name () == "Country" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CountryType > r (
                CountryTraits::create (i, f, this));

              if (!this->Country_)
              {
                this->Country_.set (r);
                continue;
              }
            }

            // SpecialStatus
            //
            if (n.name () == "SpecialStatus" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< SpecialStatusType > r (
                SpecialStatusTraits::create (i, f, this));

              if (!this->SpecialStatus_)
              {
                this->SpecialStatus_.set (r);
                continue;
              }
            }

            break;
          }

          if (!FirstName_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "FirstName",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!Surname_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Surname",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->Type_.set (r);
              continue;
            }
          }
        }

        IDCardInfo* IDCardInfo::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class IDCardInfo (*this, f, c);
        }

        IDCardInfo::
        ~IDCardInfo ()
        {
        }

        bool
        operator== (const IDCardInfo& x, const IDCardInfo& y)
        {
          if (!(x.getFirstName () == y.getFirstName ()))
            return false;

          if (!(x.getSurname () == y.getSurname ()))
            return false;

          if (!(x.getGender () == y.getGender ()))
            return false;

          if (!(x.getDateOfBirth () == y.getDateOfBirth ()))
            return false;

          if (!(x.getLocationOfBirth () == y.getLocationOfBirth ()))
            return false;

          if (!(x.getNationality () == y.getNationality ()))
            return false;

          if (!(x.getNationalNumber () == y.getNationalNumber ()))
            return false;

          if (!(x.getSpecialOrganization () == y.getSpecialOrganization ()))
            return false;

          if (!(x.getMemberOfFamily () == y.getMemberOfFamily ()))
            return false;

          if (!(x.getAddressVersion () == y.getAddressVersion ()))
            return false;

          if (!(x.getStreet () == y.getStreet ()))
            return false;

          if (!(x.getZipCode () == y.getZipCode ()))
            return false;

          if (!(x.getMunicipality () == y.getMunicipality ()))
            return false;

          if (!(x.getCountry () == y.getCountry ()))
            return false;

          if (!(x.getSpecialStatus () == y.getSpecialStatus ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          return true;
        }

        bool
        operator!= (const IDCardInfo& x, const IDCardInfo& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::std::string& u,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::std::string& u,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         const ::std::string& sid,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         const ::std::string& sid,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::xercesc::InputSource& i,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::xercesc::InputSource& i,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::xercesc::DOMDocument& d,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
              ::Smartmatic::SAES::Voting::PBReports::parseIDCardInfo (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "IDCardInfo" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "IDCardInfo",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "IDCardInfo" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "IDCardInfo",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeIDCardInfo (::std::ostream& o,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeIDCardInfo (::std::ostream& o,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIDCardInfo (::std::ostream& o,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIDCardInfo (::xercesc::XMLFormatTarget& t,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeIDCardInfo (::xercesc::XMLFormatTarget& t,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIDCardInfo (::xercesc::XMLFormatTarget& t,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             const ::std::string& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIDCardInfo (::xercesc::DOMDocument& d,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "IDCardInfo" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "IDCardInfo",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeIDCardInfo (const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& s,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "IDCardInfo",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeIDCardInfo (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const IDCardInfoType& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const IDCardInfoType& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream& l,
                    const IDCardInfoType& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const IDCardInfo& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // FirstName
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "FirstName",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getFirstName ();
          }

          // Surname
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Surname",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getSurname ();
          }

          // Gender
          //
          if (i.getGender ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Gender",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getGender ();
          }

          // DateOfBirth
          //
          if (i.getDateOfBirth ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DateOfBirth",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getDateOfBirth ();
          }

          // LocationOfBirth
          //
          if (i.getLocationOfBirth ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "LocationOfBirth",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getLocationOfBirth ();
          }

          // Nationality
          //
          if (i.getNationality ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Nationality",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getNationality ();
          }

          // NationalNumber
          //
          if (i.getNationalNumber ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NationalNumber",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getNationalNumber ();
          }

          // SpecialOrganization
          //
          if (i.getSpecialOrganization ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SpecialOrganization",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getSpecialOrganization ();
          }

          // MemberOfFamily
          //
          if (i.getMemberOfFamily ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "MemberOfFamily",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getMemberOfFamily ();
          }

          // AddressVersion
          //
          if (i.getAddressVersion ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AddressVersion",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getAddressVersion ();
          }

          // Street
          //
          if (i.getStreet ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Street",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getStreet ();
          }

          // ZipCode
          //
          if (i.getZipCode ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ZipCode",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getZipCode ();
          }

          // Municipality
          //
          if (i.getMunicipality ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Municipality",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getMunicipality ();
          }

          // Country
          //
          if (i.getCountry ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Country",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getCountry ();
          }

          // SpecialStatus
          //
          if (i.getSpecialStatus ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "SpecialStatus",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getSpecialStatus ();
          }

          // Type
          //
          if (i.getType ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Type",
                e));

            a << *i.getType ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

