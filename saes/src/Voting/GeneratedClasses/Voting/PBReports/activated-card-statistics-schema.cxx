// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "activated-card-statistics-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // ActivatedCardByCA
        // 

        const ActivatedCardByCA::CounterType& ActivatedCardByCA::
        getCounter () const
        {
          return this->Counter_.get ();
        }

        ActivatedCardByCA::CounterType& ActivatedCardByCA::
        getCounter ()
        {
          return this->Counter_.get ();
        }

        void ActivatedCardByCA::
        setCounter (const CounterType& x)
        {
          this->Counter_.set (x);
        }

        const ActivatedCardByCA::CACodeType& ActivatedCardByCA::
        getCACode () const
        {
          return this->CACode_.get ();
        }

        ActivatedCardByCA::CACodeType& ActivatedCardByCA::
        getCACode ()
        {
          return this->CACode_.get ();
        }

        void ActivatedCardByCA::
        setCACode (const CACodeType& x)
        {
          this->CACode_.set (x);
        }

        void ActivatedCardByCA::
        setCACode (::std::auto_ptr< CACodeType > x)
        {
          this->CACode_.set (x);
        }

        const ActivatedCardByCA::CAValueType& ActivatedCardByCA::
        getCAValue () const
        {
          return this->CAValue_.get ();
        }

        ActivatedCardByCA::CAValueType& ActivatedCardByCA::
        getCAValue ()
        {
          return this->CAValue_.get ();
        }

        void ActivatedCardByCA::
        setCAValue (const CAValueType& x)
        {
          this->CAValue_.set (x);
        }

        void ActivatedCardByCA::
        setCAValue (::std::auto_ptr< CAValueType > x)
        {
          this->CAValue_.set (x);
        }


        // ActivatedCardStatistics
        // 

        const ActivatedCardStatistics::TotalActivatedType& ActivatedCardStatistics::
        getTotalActivated () const
        {
          return this->TotalActivated_.get ();
        }

        ActivatedCardStatistics::TotalActivatedType& ActivatedCardStatistics::
        getTotalActivated ()
        {
          return this->TotalActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalActivated (const TotalActivatedType& x)
        {
          this->TotalActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalNonAudioActivatedType& ActivatedCardStatistics::
        getTotalNonAudioActivated () const
        {
          return this->TotalNonAudioActivated_.get ();
        }

        ActivatedCardStatistics::TotalNonAudioActivatedType& ActivatedCardStatistics::
        getTotalNonAudioActivated ()
        {
          return this->TotalNonAudioActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalNonAudioActivated (const TotalNonAudioActivatedType& x)
        {
          this->TotalNonAudioActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalAudioActivatedType& ActivatedCardStatistics::
        getTotalAudioActivated () const
        {
          return this->TotalAudioActivated_.get ();
        }

        ActivatedCardStatistics::TotalAudioActivatedType& ActivatedCardStatistics::
        getTotalAudioActivated ()
        {
          return this->TotalAudioActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalAudioActivated (const TotalAudioActivatedType& x)
        {
          this->TotalAudioActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalOfficialActivatedType& ActivatedCardStatistics::
        getTotalOfficialActivated () const
        {
          return this->TotalOfficialActivated_.get ();
        }

        ActivatedCardStatistics::TotalOfficialActivatedType& ActivatedCardStatistics::
        getTotalOfficialActivated ()
        {
          return this->TotalOfficialActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalOfficialActivated (const TotalOfficialActivatedType& x)
        {
          this->TotalOfficialActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalDemoActivatedType& ActivatedCardStatistics::
        getTotalDemoActivated () const
        {
          return this->TotalDemoActivated_.get ();
        }

        ActivatedCardStatistics::TotalDemoActivatedType& ActivatedCardStatistics::
        getTotalDemoActivated ()
        {
          return this->TotalDemoActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalDemoActivated (const TotalDemoActivatedType& x)
        {
          this->TotalDemoActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalRecoveryActivatedType& ActivatedCardStatistics::
        getTotalRecoveryActivated () const
        {
          return this->TotalRecoveryActivated_.get ();
        }

        ActivatedCardStatistics::TotalRecoveryActivatedType& ActivatedCardStatistics::
        getTotalRecoveryActivated ()
        {
          return this->TotalRecoveryActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalRecoveryActivated (const TotalRecoveryActivatedType& x)
        {
          this->TotalRecoveryActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalAudioOfficialActivatedType& ActivatedCardStatistics::
        getTotalAudioOfficialActivated () const
        {
          return this->TotalAudioOfficialActivated_.get ();
        }

        ActivatedCardStatistics::TotalAudioOfficialActivatedType& ActivatedCardStatistics::
        getTotalAudioOfficialActivated ()
        {
          return this->TotalAudioOfficialActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalAudioOfficialActivated (const TotalAudioOfficialActivatedType& x)
        {
          this->TotalAudioOfficialActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalAudioDemoActivatedType& ActivatedCardStatistics::
        getTotalAudioDemoActivated () const
        {
          return this->TotalAudioDemoActivated_.get ();
        }

        ActivatedCardStatistics::TotalAudioDemoActivatedType& ActivatedCardStatistics::
        getTotalAudioDemoActivated ()
        {
          return this->TotalAudioDemoActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalAudioDemoActivated (const TotalAudioDemoActivatedType& x)
        {
          this->TotalAudioDemoActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalAudioRecoveryActivatedType& ActivatedCardStatistics::
        getTotalAudioRecoveryActivated () const
        {
          return this->TotalAudioRecoveryActivated_.get ();
        }

        ActivatedCardStatistics::TotalAudioRecoveryActivatedType& ActivatedCardStatistics::
        getTotalAudioRecoveryActivated ()
        {
          return this->TotalAudioRecoveryActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalAudioRecoveryActivated (const TotalAudioRecoveryActivatedType& x)
        {
          this->TotalAudioRecoveryActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalNonAudioOfficialActivatedType& ActivatedCardStatistics::
        getTotalNonAudioOfficialActivated () const
        {
          return this->TotalNonAudioOfficialActivated_.get ();
        }

        ActivatedCardStatistics::TotalNonAudioOfficialActivatedType& ActivatedCardStatistics::
        getTotalNonAudioOfficialActivated ()
        {
          return this->TotalNonAudioOfficialActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalNonAudioOfficialActivated (const TotalNonAudioOfficialActivatedType& x)
        {
          this->TotalNonAudioOfficialActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalNonAudioDemoActivatedType& ActivatedCardStatistics::
        getTotalNonAudioDemoActivated () const
        {
          return this->TotalNonAudioDemoActivated_.get ();
        }

        ActivatedCardStatistics::TotalNonAudioDemoActivatedType& ActivatedCardStatistics::
        getTotalNonAudioDemoActivated ()
        {
          return this->TotalNonAudioDemoActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalNonAudioDemoActivated (const TotalNonAudioDemoActivatedType& x)
        {
          this->TotalNonAudioDemoActivated_.set (x);
        }

        const ActivatedCardStatistics::TotalNonAudioRecoveryActivatedType& ActivatedCardStatistics::
        getTotalNonAudioRecoveryActivated () const
        {
          return this->TotalNonAudioRecoveryActivated_.get ();
        }

        ActivatedCardStatistics::TotalNonAudioRecoveryActivatedType& ActivatedCardStatistics::
        getTotalNonAudioRecoveryActivated ()
        {
          return this->TotalNonAudioRecoveryActivated_.get ();
        }

        void ActivatedCardStatistics::
        setTotalNonAudioRecoveryActivated (const TotalNonAudioRecoveryActivatedType& x)
        {
          this->TotalNonAudioRecoveryActivated_.set (x);
        }

        const ActivatedCardStatistics::ActivatedOfficialNonAudioByCAType& ActivatedCardStatistics::
        getActivatedOfficialNonAudioByCA () const
        {
          return this->ActivatedOfficialNonAudioByCA_.get ();
        }

        ActivatedCardStatistics::ActivatedOfficialNonAudioByCAType& ActivatedCardStatistics::
        getActivatedOfficialNonAudioByCA ()
        {
          return this->ActivatedOfficialNonAudioByCA_.get ();
        }

        void ActivatedCardStatistics::
        setActivatedOfficialNonAudioByCA (const ActivatedOfficialNonAudioByCAType& x)
        {
          this->ActivatedOfficialNonAudioByCA_.set (x);
        }

        void ActivatedCardStatistics::
        setActivatedOfficialNonAudioByCA (::std::auto_ptr< ActivatedOfficialNonAudioByCAType > x)
        {
          this->ActivatedOfficialNonAudioByCA_.set (x);
        }

        const ActivatedCardStatistics::ActivatedDemoNonAudioByCAType& ActivatedCardStatistics::
        getActivatedDemoNonAudioByCA () const
        {
          return this->ActivatedDemoNonAudioByCA_.get ();
        }

        ActivatedCardStatistics::ActivatedDemoNonAudioByCAType& ActivatedCardStatistics::
        getActivatedDemoNonAudioByCA ()
        {
          return this->ActivatedDemoNonAudioByCA_.get ();
        }

        void ActivatedCardStatistics::
        setActivatedDemoNonAudioByCA (const ActivatedDemoNonAudioByCAType& x)
        {
          this->ActivatedDemoNonAudioByCA_.set (x);
        }

        void ActivatedCardStatistics::
        setActivatedDemoNonAudioByCA (::std::auto_ptr< ActivatedDemoNonAudioByCAType > x)
        {
          this->ActivatedDemoNonAudioByCA_.set (x);
        }

        const ActivatedCardStatistics::ActivatedOfficialAudioByCAType& ActivatedCardStatistics::
        getActivatedOfficialAudioByCA () const
        {
          return this->ActivatedOfficialAudioByCA_.get ();
        }

        ActivatedCardStatistics::ActivatedOfficialAudioByCAType& ActivatedCardStatistics::
        getActivatedOfficialAudioByCA ()
        {
          return this->ActivatedOfficialAudioByCA_.get ();
        }

        void ActivatedCardStatistics::
        setActivatedOfficialAudioByCA (const ActivatedOfficialAudioByCAType& x)
        {
          this->ActivatedOfficialAudioByCA_.set (x);
        }

        void ActivatedCardStatistics::
        setActivatedOfficialAudioByCA (::std::auto_ptr< ActivatedOfficialAudioByCAType > x)
        {
          this->ActivatedOfficialAudioByCA_.set (x);
        }

        const ActivatedCardStatistics::ActivatedDemoAudioByCAType& ActivatedCardStatistics::
        getActivatedDemoAudioByCA () const
        {
          return this->ActivatedDemoAudioByCA_.get ();
        }

        ActivatedCardStatistics::ActivatedDemoAudioByCAType& ActivatedCardStatistics::
        getActivatedDemoAudioByCA ()
        {
          return this->ActivatedDemoAudioByCA_.get ();
        }

        void ActivatedCardStatistics::
        setActivatedDemoAudioByCA (const ActivatedDemoAudioByCAType& x)
        {
          this->ActivatedDemoAudioByCA_.set (x);
        }

        void ActivatedCardStatistics::
        setActivatedDemoAudioByCA (::std::auto_ptr< ActivatedDemoAudioByCAType > x)
        {
          this->ActivatedDemoAudioByCA_.set (x);
        }


        // ActivatedOfficialNonAudioByCA
        // 

        const ActivatedOfficialNonAudioByCA::CardByCASequence& ActivatedOfficialNonAudioByCA::
        getCardByCA () const
        {
          return this->CardByCA_;
        }

        ActivatedOfficialNonAudioByCA::CardByCASequence& ActivatedOfficialNonAudioByCA::
        getCardByCA ()
        {
          return this->CardByCA_;
        }

        void ActivatedOfficialNonAudioByCA::
        setCardByCA (const CardByCASequence& s)
        {
          this->CardByCA_ = s;
        }


        // ActivatedDemoNonAudioByCA
        // 

        const ActivatedDemoNonAudioByCA::CardByCASequence& ActivatedDemoNonAudioByCA::
        getCardByCA () const
        {
          return this->CardByCA_;
        }

        ActivatedDemoNonAudioByCA::CardByCASequence& ActivatedDemoNonAudioByCA::
        getCardByCA ()
        {
          return this->CardByCA_;
        }

        void ActivatedDemoNonAudioByCA::
        setCardByCA (const CardByCASequence& s)
        {
          this->CardByCA_ = s;
        }


        // ActivatedOfficialAudioByCA
        // 

        const ActivatedOfficialAudioByCA::CardByCASequence& ActivatedOfficialAudioByCA::
        getCardByCA () const
        {
          return this->CardByCA_;
        }

        ActivatedOfficialAudioByCA::CardByCASequence& ActivatedOfficialAudioByCA::
        getCardByCA ()
        {
          return this->CardByCA_;
        }

        void ActivatedOfficialAudioByCA::
        setCardByCA (const CardByCASequence& s)
        {
          this->CardByCA_ = s;
        }


        // ActivatedDemoAudioByCA
        // 

        const ActivatedDemoAudioByCA::CardByCASequence& ActivatedDemoAudioByCA::
        getCardByCA () const
        {
          return this->CardByCA_;
        }

        ActivatedDemoAudioByCA::CardByCASequence& ActivatedDemoAudioByCA::
        getCardByCA ()
        {
          return this->CardByCA_;
        }

        void ActivatedDemoAudioByCA::
        setCardByCA (const CardByCASequence& s)
        {
          this->CardByCA_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // ActivatedCardByCA
        //

        ActivatedCardByCA::
        ActivatedCardByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Counter_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CACode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CAValue_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedCardByCA::
        ActivatedCardByCA (const CounterType& Counter,
                           const CACodeType& CACode,
                           const CAValueType& CAValue)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Counter_ (Counter, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CACode_ (CACode, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CAValue_ (CAValue, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedCardByCA::
        ActivatedCardByCA (const ActivatedCardByCA& x,
                           ::Smartmatic::SAES::Voting::PBReports::Flags f,
                           ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Counter_ (x.Counter_, f, this),
          CACode_ (x.CACode_, f, this),
          CAValue_ (x.CAValue_, f, this)
        {
        }

        ActivatedCardByCA::
        ActivatedCardByCA (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::PBReports::Flags f,
                           ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Counter_ (f, this),
          CACode_ (f, this),
          CAValue_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void ActivatedCardByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "Counter" && n.namespace_ ().empty ())
            {
              this->Counter_.set (CounterTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "CACode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CACodeType > r (
                CACodeTraits::create (i, f, this));

              this->CACode_.set (r);
              continue;
            }

            if (n.name () == "CAValue" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CAValueType > r (
                CAValueTraits::create (i, f, this));

              this->CAValue_.set (r);
              continue;
            }
          }

          if (!Counter_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "Counter",
              "");
          }

          if (!CACode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CACode",
              "");
          }

          if (!CAValue_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CAValue",
              "");
          }
        }

        ActivatedCardByCA* ActivatedCardByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivatedCardByCA (*this, f, c);
        }

        ActivatedCardByCA::
        ~ActivatedCardByCA ()
        {
        }

        bool
        operator== (const ActivatedCardByCA& x, const ActivatedCardByCA& y)
        {
          if (!(x.getCounter () == y.getCounter ()))
            return false;

          if (!(x.getCACode () == y.getCACode ()))
            return false;

          if (!(x.getCAValue () == y.getCAValue ()))
            return false;

          return true;
        }

        bool
        operator!= (const ActivatedCardByCA& x, const ActivatedCardByCA& y)
        {
          return !(x == y);
        }

        // ActivatedCardStatistics
        //

        ActivatedCardStatistics::
        ActivatedCardStatistics ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          TotalActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalOfficialActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDemoActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalRecoveryActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioOfficialActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioDemoActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioRecoveryActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioOfficialActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioDemoActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioRecoveryActivated_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedOfficialNonAudioByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedDemoNonAudioByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedOfficialAudioByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedDemoAudioByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedCardStatistics::
        ActivatedCardStatistics (const TotalActivatedType& TotalActivated,
                                 const TotalNonAudioActivatedType& TotalNonAudioActivated,
                                 const TotalAudioActivatedType& TotalAudioActivated,
                                 const TotalOfficialActivatedType& TotalOfficialActivated,
                                 const TotalDemoActivatedType& TotalDemoActivated,
                                 const TotalRecoveryActivatedType& TotalRecoveryActivated,
                                 const TotalAudioOfficialActivatedType& TotalAudioOfficialActivated,
                                 const TotalAudioDemoActivatedType& TotalAudioDemoActivated,
                                 const TotalAudioRecoveryActivatedType& TotalAudioRecoveryActivated,
                                 const TotalNonAudioOfficialActivatedType& TotalNonAudioOfficialActivated,
                                 const TotalNonAudioDemoActivatedType& TotalNonAudioDemoActivated,
                                 const TotalNonAudioRecoveryActivatedType& TotalNonAudioRecoveryActivated,
                                 const ActivatedOfficialNonAudioByCAType& ActivatedOfficialNonAudioByCA,
                                 const ActivatedDemoNonAudioByCAType& ActivatedDemoNonAudioByCA,
                                 const ActivatedOfficialAudioByCAType& ActivatedOfficialAudioByCA,
                                 const ActivatedDemoAudioByCAType& ActivatedDemoAudioByCA)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          TotalActivated_ (TotalActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioActivated_ (TotalNonAudioActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioActivated_ (TotalAudioActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalOfficialActivated_ (TotalOfficialActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDemoActivated_ (TotalDemoActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalRecoveryActivated_ (TotalRecoveryActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioOfficialActivated_ (TotalAudioOfficialActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioDemoActivated_ (TotalAudioDemoActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioRecoveryActivated_ (TotalAudioRecoveryActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioOfficialActivated_ (TotalNonAudioOfficialActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioDemoActivated_ (TotalNonAudioDemoActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioRecoveryActivated_ (TotalNonAudioRecoveryActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedOfficialNonAudioByCA_ (ActivatedOfficialNonAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedDemoNonAudioByCA_ (ActivatedDemoNonAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedOfficialAudioByCA_ (ActivatedOfficialAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedDemoAudioByCA_ (ActivatedDemoAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedCardStatistics::
        ActivatedCardStatistics (const TotalActivatedType& TotalActivated,
                                 const TotalNonAudioActivatedType& TotalNonAudioActivated,
                                 const TotalAudioActivatedType& TotalAudioActivated,
                                 const TotalOfficialActivatedType& TotalOfficialActivated,
                                 const TotalDemoActivatedType& TotalDemoActivated,
                                 const TotalRecoveryActivatedType& TotalRecoveryActivated,
                                 const TotalAudioOfficialActivatedType& TotalAudioOfficialActivated,
                                 const TotalAudioDemoActivatedType& TotalAudioDemoActivated,
                                 const TotalAudioRecoveryActivatedType& TotalAudioRecoveryActivated,
                                 const TotalNonAudioOfficialActivatedType& TotalNonAudioOfficialActivated,
                                 const TotalNonAudioDemoActivatedType& TotalNonAudioDemoActivated,
                                 const TotalNonAudioRecoveryActivatedType& TotalNonAudioRecoveryActivated,
                                 ::std::auto_ptr< ActivatedOfficialNonAudioByCAType >& ActivatedOfficialNonAudioByCA,
                                 ::std::auto_ptr< ActivatedDemoNonAudioByCAType >& ActivatedDemoNonAudioByCA,
                                 ::std::auto_ptr< ActivatedOfficialAudioByCAType >& ActivatedOfficialAudioByCA,
                                 ::std::auto_ptr< ActivatedDemoAudioByCAType >& ActivatedDemoAudioByCA)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          TotalActivated_ (TotalActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioActivated_ (TotalNonAudioActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioActivated_ (TotalAudioActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalOfficialActivated_ (TotalOfficialActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDemoActivated_ (TotalDemoActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalRecoveryActivated_ (TotalRecoveryActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioOfficialActivated_ (TotalAudioOfficialActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioDemoActivated_ (TotalAudioDemoActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalAudioRecoveryActivated_ (TotalAudioRecoveryActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioOfficialActivated_ (TotalNonAudioOfficialActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioDemoActivated_ (TotalNonAudioDemoActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalNonAudioRecoveryActivated_ (TotalNonAudioRecoveryActivated, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedOfficialNonAudioByCA_ (ActivatedOfficialNonAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedDemoNonAudioByCA_ (ActivatedDemoNonAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedOfficialAudioByCA_ (ActivatedOfficialAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedDemoAudioByCA_ (ActivatedDemoAudioByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedCardStatistics::
        ActivatedCardStatistics (const ActivatedCardStatistics& x,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          TotalActivated_ (x.TotalActivated_, f, this),
          TotalNonAudioActivated_ (x.TotalNonAudioActivated_, f, this),
          TotalAudioActivated_ (x.TotalAudioActivated_, f, this),
          TotalOfficialActivated_ (x.TotalOfficialActivated_, f, this),
          TotalDemoActivated_ (x.TotalDemoActivated_, f, this),
          TotalRecoveryActivated_ (x.TotalRecoveryActivated_, f, this),
          TotalAudioOfficialActivated_ (x.TotalAudioOfficialActivated_, f, this),
          TotalAudioDemoActivated_ (x.TotalAudioDemoActivated_, f, this),
          TotalAudioRecoveryActivated_ (x.TotalAudioRecoveryActivated_, f, this),
          TotalNonAudioOfficialActivated_ (x.TotalNonAudioOfficialActivated_, f, this),
          TotalNonAudioDemoActivated_ (x.TotalNonAudioDemoActivated_, f, this),
          TotalNonAudioRecoveryActivated_ (x.TotalNonAudioRecoveryActivated_, f, this),
          ActivatedOfficialNonAudioByCA_ (x.ActivatedOfficialNonAudioByCA_, f, this),
          ActivatedDemoNonAudioByCA_ (x.ActivatedDemoNonAudioByCA_, f, this),
          ActivatedOfficialAudioByCA_ (x.ActivatedOfficialAudioByCA_, f, this),
          ActivatedDemoAudioByCA_ (x.ActivatedDemoAudioByCA_, f, this)
        {
        }

        ActivatedCardStatistics::
        ActivatedCardStatistics (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          TotalActivated_ (f, this),
          TotalNonAudioActivated_ (f, this),
          TotalAudioActivated_ (f, this),
          TotalOfficialActivated_ (f, this),
          TotalDemoActivated_ (f, this),
          TotalRecoveryActivated_ (f, this),
          TotalAudioOfficialActivated_ (f, this),
          TotalAudioDemoActivated_ (f, this),
          TotalAudioRecoveryActivated_ (f, this),
          TotalNonAudioOfficialActivated_ (f, this),
          TotalNonAudioDemoActivated_ (f, this),
          TotalNonAudioRecoveryActivated_ (f, this),
          ActivatedOfficialNonAudioByCA_ (f, this),
          ActivatedDemoNonAudioByCA_ (f, this),
          ActivatedOfficialAudioByCA_ (f, this),
          ActivatedDemoAudioByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ActivatedCardStatistics::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // TotalActivated
            //
            if (n.name () == "TotalActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalActivated_.present ())
              {
                this->TotalActivated_.set (TotalActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalNonAudioActivated
            //
            if (n.name () == "TotalNonAudioActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalNonAudioActivated_.present ())
              {
                this->TotalNonAudioActivated_.set (TotalNonAudioActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalAudioActivated
            //
            if (n.name () == "TotalAudioActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalAudioActivated_.present ())
              {
                this->TotalAudioActivated_.set (TotalAudioActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalOfficialActivated
            //
            if (n.name () == "TotalOfficialActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalOfficialActivated_.present ())
              {
                this->TotalOfficialActivated_.set (TotalOfficialActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalDemoActivated
            //
            if (n.name () == "TotalDemoActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalDemoActivated_.present ())
              {
                this->TotalDemoActivated_.set (TotalDemoActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalRecoveryActivated
            //
            if (n.name () == "TotalRecoveryActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalRecoveryActivated_.present ())
              {
                this->TotalRecoveryActivated_.set (TotalRecoveryActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalAudioOfficialActivated
            //
            if (n.name () == "TotalAudioOfficialActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalAudioOfficialActivated_.present ())
              {
                this->TotalAudioOfficialActivated_.set (TotalAudioOfficialActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalAudioDemoActivated
            //
            if (n.name () == "TotalAudioDemoActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalAudioDemoActivated_.present ())
              {
                this->TotalAudioDemoActivated_.set (TotalAudioDemoActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalAudioRecoveryActivated
            //
            if (n.name () == "TotalAudioRecoveryActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalAudioRecoveryActivated_.present ())
              {
                this->TotalAudioRecoveryActivated_.set (TotalAudioRecoveryActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalNonAudioOfficialActivated
            //
            if (n.name () == "TotalNonAudioOfficialActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalNonAudioOfficialActivated_.present ())
              {
                this->TotalNonAudioOfficialActivated_.set (TotalNonAudioOfficialActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalNonAudioDemoActivated
            //
            if (n.name () == "TotalNonAudioDemoActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalNonAudioDemoActivated_.present ())
              {
                this->TotalNonAudioDemoActivated_.set (TotalNonAudioDemoActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // TotalNonAudioRecoveryActivated
            //
            if (n.name () == "TotalNonAudioRecoveryActivated" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalNonAudioRecoveryActivated_.present ())
              {
                this->TotalNonAudioRecoveryActivated_.set (TotalNonAudioRecoveryActivatedTraits::create (i, f, this));
                continue;
              }
            }

            // ActivatedOfficialNonAudioByCA
            //
            if (n.name () == "ActivatedOfficialNonAudioByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivatedOfficialNonAudioByCAType > r (
                ActivatedOfficialNonAudioByCATraits::create (i, f, this));

              if (!ActivatedOfficialNonAudioByCA_.present ())
              {
                this->ActivatedOfficialNonAudioByCA_.set (r);
                continue;
              }
            }

            // ActivatedDemoNonAudioByCA
            //
            if (n.name () == "ActivatedDemoNonAudioByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivatedDemoNonAudioByCAType > r (
                ActivatedDemoNonAudioByCATraits::create (i, f, this));

              if (!ActivatedDemoNonAudioByCA_.present ())
              {
                this->ActivatedDemoNonAudioByCA_.set (r);
                continue;
              }
            }

            // ActivatedOfficialAudioByCA
            //
            if (n.name () == "ActivatedOfficialAudioByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivatedOfficialAudioByCAType > r (
                ActivatedOfficialAudioByCATraits::create (i, f, this));

              if (!ActivatedOfficialAudioByCA_.present ())
              {
                this->ActivatedOfficialAudioByCA_.set (r);
                continue;
              }
            }

            // ActivatedDemoAudioByCA
            //
            if (n.name () == "ActivatedDemoAudioByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivatedDemoAudioByCAType > r (
                ActivatedDemoAudioByCATraits::create (i, f, this));

              if (!ActivatedDemoAudioByCA_.present ())
              {
                this->ActivatedDemoAudioByCA_.set (r);
                continue;
              }
            }

            break;
          }

          if (!TotalActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalNonAudioActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalNonAudioActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalAudioActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalAudioActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalOfficialActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalOfficialActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalDemoActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalDemoActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalRecoveryActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalRecoveryActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalAudioOfficialActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalAudioOfficialActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalAudioDemoActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalAudioDemoActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalAudioRecoveryActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalAudioRecoveryActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalNonAudioOfficialActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalNonAudioOfficialActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalNonAudioDemoActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalNonAudioDemoActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalNonAudioRecoveryActivated_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalNonAudioRecoveryActivated",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ActivatedOfficialNonAudioByCA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivatedOfficialNonAudioByCA",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ActivatedDemoNonAudioByCA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivatedDemoNonAudioByCA",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ActivatedOfficialAudioByCA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivatedOfficialAudioByCA",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ActivatedDemoAudioByCA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivatedDemoAudioByCA",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ActivatedCardStatistics* ActivatedCardStatistics::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivatedCardStatistics (*this, f, c);
        }

        ActivatedCardStatistics::
        ~ActivatedCardStatistics ()
        {
        }

        bool
        operator== (const ActivatedCardStatistics& x, const ActivatedCardStatistics& y)
        {
          if (!(x.getTotalActivated () == y.getTotalActivated ()))
            return false;

          if (!(x.getTotalNonAudioActivated () == y.getTotalNonAudioActivated ()))
            return false;

          if (!(x.getTotalAudioActivated () == y.getTotalAudioActivated ()))
            return false;

          if (!(x.getTotalOfficialActivated () == y.getTotalOfficialActivated ()))
            return false;

          if (!(x.getTotalDemoActivated () == y.getTotalDemoActivated ()))
            return false;

          if (!(x.getTotalRecoveryActivated () == y.getTotalRecoveryActivated ()))
            return false;

          if (!(x.getTotalAudioOfficialActivated () == y.getTotalAudioOfficialActivated ()))
            return false;

          if (!(x.getTotalAudioDemoActivated () == y.getTotalAudioDemoActivated ()))
            return false;

          if (!(x.getTotalAudioRecoveryActivated () == y.getTotalAudioRecoveryActivated ()))
            return false;

          if (!(x.getTotalNonAudioOfficialActivated () == y.getTotalNonAudioOfficialActivated ()))
            return false;

          if (!(x.getTotalNonAudioDemoActivated () == y.getTotalNonAudioDemoActivated ()))
            return false;

          if (!(x.getTotalNonAudioRecoveryActivated () == y.getTotalNonAudioRecoveryActivated ()))
            return false;

          if (!(x.getActivatedOfficialNonAudioByCA () == y.getActivatedOfficialNonAudioByCA ()))
            return false;

          if (!(x.getActivatedDemoNonAudioByCA () == y.getActivatedDemoNonAudioByCA ()))
            return false;

          if (!(x.getActivatedOfficialAudioByCA () == y.getActivatedOfficialAudioByCA ()))
            return false;

          if (!(x.getActivatedDemoAudioByCA () == y.getActivatedDemoAudioByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const ActivatedCardStatistics& x, const ActivatedCardStatistics& y)
        {
          return !(x == y);
        }

        // ActivatedOfficialNonAudioByCA
        //

        ActivatedOfficialNonAudioByCA::
        ActivatedOfficialNonAudioByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CardByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedOfficialNonAudioByCA::
        ActivatedOfficialNonAudioByCA (const ActivatedOfficialNonAudioByCA& x,
                                       ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                       ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          CardByCA_ (x.CardByCA_, f, this)
        {
        }

        ActivatedOfficialNonAudioByCA::
        ActivatedOfficialNonAudioByCA (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                       ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          CardByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ActivatedOfficialNonAudioByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CardByCA
            //
            if (n.name () == "CardByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CardByCAType > r (
                CardByCATraits::create (i, f, this));

              this->CardByCA_.push_back (r);
              continue;
            }

            break;
          }
        }

        ActivatedOfficialNonAudioByCA* ActivatedOfficialNonAudioByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivatedOfficialNonAudioByCA (*this, f, c);
        }

        ActivatedOfficialNonAudioByCA::
        ~ActivatedOfficialNonAudioByCA ()
        {
        }

        bool
        operator== (const ActivatedOfficialNonAudioByCA& x, const ActivatedOfficialNonAudioByCA& y)
        {
          if (!(x.getCardByCA () == y.getCardByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const ActivatedOfficialNonAudioByCA& x, const ActivatedOfficialNonAudioByCA& y)
        {
          return !(x == y);
        }

        // ActivatedDemoNonAudioByCA
        //

        ActivatedDemoNonAudioByCA::
        ActivatedDemoNonAudioByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CardByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedDemoNonAudioByCA::
        ActivatedDemoNonAudioByCA (const ActivatedDemoNonAudioByCA& x,
                                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          CardByCA_ (x.CardByCA_, f, this)
        {
        }

        ActivatedDemoNonAudioByCA::
        ActivatedDemoNonAudioByCA (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          CardByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ActivatedDemoNonAudioByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CardByCA
            //
            if (n.name () == "CardByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CardByCAType > r (
                CardByCATraits::create (i, f, this));

              this->CardByCA_.push_back (r);
              continue;
            }

            break;
          }
        }

        ActivatedDemoNonAudioByCA* ActivatedDemoNonAudioByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivatedDemoNonAudioByCA (*this, f, c);
        }

        ActivatedDemoNonAudioByCA::
        ~ActivatedDemoNonAudioByCA ()
        {
        }

        bool
        operator== (const ActivatedDemoNonAudioByCA& x, const ActivatedDemoNonAudioByCA& y)
        {
          if (!(x.getCardByCA () == y.getCardByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const ActivatedDemoNonAudioByCA& x, const ActivatedDemoNonAudioByCA& y)
        {
          return !(x == y);
        }

        // ActivatedOfficialAudioByCA
        //

        ActivatedOfficialAudioByCA::
        ActivatedOfficialAudioByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CardByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedOfficialAudioByCA::
        ActivatedOfficialAudioByCA (const ActivatedOfficialAudioByCA& x,
                                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          CardByCA_ (x.CardByCA_, f, this)
        {
        }

        ActivatedOfficialAudioByCA::
        ActivatedOfficialAudioByCA (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          CardByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ActivatedOfficialAudioByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CardByCA
            //
            if (n.name () == "CardByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CardByCAType > r (
                CardByCATraits::create (i, f, this));

              this->CardByCA_.push_back (r);
              continue;
            }

            break;
          }
        }

        ActivatedOfficialAudioByCA* ActivatedOfficialAudioByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivatedOfficialAudioByCA (*this, f, c);
        }

        ActivatedOfficialAudioByCA::
        ~ActivatedOfficialAudioByCA ()
        {
        }

        bool
        operator== (const ActivatedOfficialAudioByCA& x, const ActivatedOfficialAudioByCA& y)
        {
          if (!(x.getCardByCA () == y.getCardByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const ActivatedOfficialAudioByCA& x, const ActivatedOfficialAudioByCA& y)
        {
          return !(x == y);
        }

        // ActivatedDemoAudioByCA
        //

        ActivatedDemoAudioByCA::
        ActivatedDemoAudioByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CardByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        ActivatedDemoAudioByCA::
        ActivatedDemoAudioByCA (const ActivatedDemoAudioByCA& x,
                                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          CardByCA_ (x.CardByCA_, f, this)
        {
        }

        ActivatedDemoAudioByCA::
        ActivatedDemoAudioByCA (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          CardByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ActivatedDemoAudioByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CardByCA
            //
            if (n.name () == "CardByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CardByCAType > r (
                CardByCATraits::create (i, f, this));

              this->CardByCA_.push_back (r);
              continue;
            }

            break;
          }
        }

        ActivatedDemoAudioByCA* ActivatedDemoAudioByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivatedDemoAudioByCA (*this, f, c);
        }

        ActivatedDemoAudioByCA::
        ~ActivatedDemoAudioByCA ()
        {
        }

        bool
        operator== (const ActivatedDemoAudioByCA& x, const ActivatedDemoAudioByCA& y)
        {
          if (!(x.getCardByCA () == y.getCardByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const ActivatedDemoAudioByCA& x, const ActivatedDemoAudioByCA& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (const ::std::string& u,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (const ::std::string& u,
                                      ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (const ::std::string& u,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::std::istream& is,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::std::istream& is,
                                      ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::std::istream& is,
                                      const ::std::string& sid,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::std::istream& is,
                                      const ::std::string& sid,
                                      ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::std::istream& is,
                                      const ::std::string& sid,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::xercesc::InputSource& i,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::xercesc::InputSource& i,
                                      ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::xercesc::InputSource& i,
                                      ::xercesc::DOMErrorHandler& h,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (const ::xercesc::DOMDocument& d,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
              ::Smartmatic::SAES::Voting::PBReports::parseActivatedCardStatistics (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "ActivatedCardStatistics" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ActivatedCardStatistics",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics >
        parseActivatedCardStatistics (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                      const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "ActivatedCardStatistics" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ActivatedCardStatistics",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeActivatedCardStatistics (::std::ostream& o,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeActivatedCardStatistics (::std::ostream& o,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeActivatedCardStatistics (::std::ostream& o,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          ::xercesc::DOMErrorHandler& h,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeActivatedCardStatistics (::xercesc::XMLFormatTarget& t,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeActivatedCardStatistics (::xercesc::XMLFormatTarget& t,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeActivatedCardStatistics (::xercesc::XMLFormatTarget& t,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          ::xercesc::DOMErrorHandler& h,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          const ::std::string& e,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeActivatedCardStatistics (::xercesc::DOMDocument& d,
                                          const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "ActivatedCardStatistics" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "ActivatedCardStatistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeActivatedCardStatistics (const ::Smartmatic::SAES::Voting::PBReports::ActivatedCardStatistics& s,
                                          const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                          ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "ActivatedCardStatistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeActivatedCardStatistics (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivatedCardByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Counter
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "Counter",
                e));

            a << i.getCounter ();
          }

          // CACode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CACode",
                e));

            a << i.getCACode ();
          }

          // CAValue
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CAValue",
                e));

            a << i.getCAValue ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivatedCardStatistics& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // TotalActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalActivated ();
          }

          // TotalNonAudioActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalNonAudioActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalNonAudioActivated ();
          }

          // TotalAudioActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalAudioActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalAudioActivated ();
          }

          // TotalOfficialActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalOfficialActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalOfficialActivated ();
          }

          // TotalDemoActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalDemoActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalDemoActivated ();
          }

          // TotalRecoveryActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalRecoveryActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalRecoveryActivated ();
          }

          // TotalAudioOfficialActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalAudioOfficialActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalAudioOfficialActivated ();
          }

          // TotalAudioDemoActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalAudioDemoActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalAudioDemoActivated ();
          }

          // TotalAudioRecoveryActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalAudioRecoveryActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalAudioRecoveryActivated ();
          }

          // TotalNonAudioOfficialActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalNonAudioOfficialActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalNonAudioOfficialActivated ();
          }

          // TotalNonAudioDemoActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalNonAudioDemoActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalNonAudioDemoActivated ();
          }

          // TotalNonAudioRecoveryActivated
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalNonAudioRecoveryActivated",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalNonAudioRecoveryActivated ();
          }

          // ActivatedOfficialNonAudioByCA
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivatedOfficialNonAudioByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivatedOfficialNonAudioByCA ();
          }

          // ActivatedDemoNonAudioByCA
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivatedDemoNonAudioByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivatedDemoNonAudioByCA ();
          }

          // ActivatedOfficialAudioByCA
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivatedOfficialAudioByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivatedOfficialAudioByCA ();
          }

          // ActivatedDemoAudioByCA
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivatedDemoAudioByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivatedDemoAudioByCA ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivatedOfficialNonAudioByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // CardByCA
          //
          for (ActivatedOfficialNonAudioByCA::CardByCAConstIterator
               b (i.getCardByCA ().begin ()), n (i.getCardByCA ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivatedDemoNonAudioByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // CardByCA
          //
          for (ActivatedDemoNonAudioByCA::CardByCAConstIterator
               b (i.getCardByCA ().begin ()), n (i.getCardByCA ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivatedOfficialAudioByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // CardByCA
          //
          for (ActivatedOfficialAudioByCA::CardByCAConstIterator
               b (i.getCardByCA ().begin ()), n (i.getCardByCA ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivatedDemoAudioByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // CardByCA
          //
          for (ActivatedDemoAudioByCA::CardByCAConstIterator
               b (i.getCardByCA ().begin ()), n (i.getCardByCA ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CardByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

