// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "police-notes-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // PoliceNote
        // 

        const PoliceNote::Personal_infoType& PoliceNote::
        getPersonal_info () const
        {
          return this->personal_info_.get ();
        }

        PoliceNote::Personal_infoType& PoliceNote::
        getPersonal_info ()
        {
          return this->personal_info_.get ();
        }

        void PoliceNote::
        setPersonal_info (const Personal_infoType& x)
        {
          this->personal_info_.set (x);
        }

        void PoliceNote::
        setPersonal_info (::std::auto_ptr< Personal_infoType > x)
        {
          this->personal_info_.set (x);
        }

        const PoliceNote::Custom_codeType& PoliceNote::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        PoliceNote::Custom_codeType& PoliceNote::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void PoliceNote::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void PoliceNote::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const PoliceNote::Create_dateType& PoliceNote::
        getCreate_date () const
        {
          return this->create_date_.get ();
        }

        PoliceNote::Create_dateType& PoliceNote::
        getCreate_date ()
        {
          return this->create_date_.get ();
        }

        void PoliceNote::
        setCreate_date (const Create_dateType& x)
        {
          this->create_date_.set (x);
        }

        void PoliceNote::
        setCreate_date (::std::auto_ptr< Create_dateType > x)
        {
          this->create_date_.set (x);
        }

        const PoliceNote::Action_oneType& PoliceNote::
        getAction_one () const
        {
          return this->action_one_.get ();
        }

        PoliceNote::Action_oneType& PoliceNote::
        getAction_one ()
        {
          return this->action_one_.get ();
        }

        void PoliceNote::
        setAction_one (const Action_oneType& x)
        {
          this->action_one_.set (x);
        }

        const PoliceNote::Action_twoType& PoliceNote::
        getAction_two () const
        {
          return this->action_two_.get ();
        }

        PoliceNote::Action_twoType& PoliceNote::
        getAction_two ()
        {
          return this->action_two_.get ();
        }

        void PoliceNote::
        setAction_two (const Action_twoType& x)
        {
          this->action_two_.set (x);
        }

        const PoliceNote::Action_threeType& PoliceNote::
        getAction_three () const
        {
          return this->action_three_.get ();
        }

        PoliceNote::Action_threeType& PoliceNote::
        getAction_three ()
        {
          return this->action_three_.get ();
        }

        void PoliceNote::
        setAction_three (const Action_threeType& x)
        {
          this->action_three_.set (x);
        }

        const PoliceNote::CommentType& PoliceNote::
        getComment () const
        {
          return this->comment_.get ();
        }

        PoliceNote::CommentType& PoliceNote::
        getComment ()
        {
          return this->comment_.get ();
        }

        void PoliceNote::
        setComment (const CommentType& x)
        {
          this->comment_.set (x);
        }

        void PoliceNote::
        setComment (::std::auto_ptr< CommentType > x)
        {
          this->comment_.set (x);
        }


        // PoliceNotes
        // 

        const PoliceNotes::PoliceNoteSequence& PoliceNotes::
        getPoliceNote () const
        {
          return this->PoliceNote_;
        }

        PoliceNotes::PoliceNoteSequence& PoliceNotes::
        getPoliceNote ()
        {
          return this->PoliceNote_;
        }

        void PoliceNotes::
        setPoliceNote (const PoliceNoteSequence& s)
        {
          this->PoliceNote_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // PoliceNote
        //

        PoliceNote::
        PoliceNote ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          personal_info_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_one_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_two_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_three_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          comment_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PoliceNote::
        PoliceNote (const Personal_infoType& personal_info,
                    const Custom_codeType& custom_code,
                    const Create_dateType& create_date,
                    const Action_oneType& action_one,
                    const Action_twoType& action_two,
                    const Action_threeType& action_three,
                    const CommentType& comment)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          personal_info_ (personal_info, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_one_ (action_one, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_two_ (action_two, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_three_ (action_three, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          comment_ (comment, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PoliceNote::
        PoliceNote (::std::auto_ptr< Personal_infoType >& personal_info,
                    const Custom_codeType& custom_code,
                    const Create_dateType& create_date,
                    const Action_oneType& action_one,
                    const Action_twoType& action_two,
                    const Action_threeType& action_three,
                    const CommentType& comment)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          personal_info_ (personal_info, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_one_ (action_one, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_two_ (action_two, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          action_three_ (action_three, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          comment_ (comment, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PoliceNote::
        PoliceNote (const PoliceNote& x,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          personal_info_ (x.personal_info_, f, this),
          custom_code_ (x.custom_code_, f, this),
          create_date_ (x.create_date_, f, this),
          action_one_ (x.action_one_, f, this),
          action_two_ (x.action_two_, f, this),
          action_three_ (x.action_three_, f, this),
          comment_ (x.comment_, f, this)
        {
        }

        PoliceNote::
        PoliceNote (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          personal_info_ (f, this),
          custom_code_ (f, this),
          create_date_ (f, this),
          action_one_ (f, this),
          action_two_ (f, this),
          action_three_ (f, this),
          comment_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void PoliceNote::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // personal-info
            //
            if (n.name () == "personal-info" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< Personal_infoType > r (
                Personal_infoTraits::create (i, f, this));

              if (!personal_info_.present ())
              {
                this->personal_info_.set (r);
                continue;
              }
            }

            break;
          }

          if (!personal_info_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "personal-info",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "create-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Create_dateType > r (
                Create_dateTraits::create (i, f, this));

              this->create_date_.set (r);
              continue;
            }

            if (n.name () == "action-one" && n.namespace_ ().empty ())
            {
              this->action_one_.set (Action_oneTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "action-two" && n.namespace_ ().empty ())
            {
              this->action_two_.set (Action_twoTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "action-three" && n.namespace_ ().empty ())
            {
              this->action_three_.set (Action_threeTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "comment" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CommentType > r (
                CommentTraits::create (i, f, this));

              this->comment_.set (r);
              continue;
            }
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!create_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "create-date",
              "");
          }

          if (!action_one_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "action-one",
              "");
          }

          if (!action_two_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "action-two",
              "");
          }

          if (!action_three_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "action-three",
              "");
          }

          if (!comment_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "comment",
              "");
          }
        }

        PoliceNote* PoliceNote::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PoliceNote (*this, f, c);
        }

        PoliceNote::
        ~PoliceNote ()
        {
        }

        bool
        operator== (const PoliceNote& x, const PoliceNote& y)
        {
          if (!(x.getPersonal_info () == y.getPersonal_info ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getCreate_date () == y.getCreate_date ()))
            return false;

          if (!(x.getAction_one () == y.getAction_one ()))
            return false;

          if (!(x.getAction_two () == y.getAction_two ()))
            return false;

          if (!(x.getAction_three () == y.getAction_three ()))
            return false;

          if (!(x.getComment () == y.getComment ()))
            return false;

          return true;
        }

        bool
        operator!= (const PoliceNote& x, const PoliceNote& y)
        {
          return !(x == y);
        }

        // PoliceNotes
        //

        PoliceNotes::
        PoliceNotes ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          PoliceNote_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PoliceNotes::
        PoliceNotes (const PoliceNotes& x,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          PoliceNote_ (x.PoliceNote_, f, this)
        {
        }

        PoliceNotes::
        PoliceNotes (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          PoliceNote_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void PoliceNotes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PoliceNote
            //
            if (n.name () == "PoliceNote" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< PoliceNoteType > r (
                PoliceNoteTraits::create (i, f, this));

              this->PoliceNote_.push_back (r);
              continue;
            }

            break;
          }
        }

        PoliceNotes* PoliceNotes::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PoliceNotes (*this, f, c);
        }

        PoliceNotes::
        ~PoliceNotes ()
        {
        }

        bool
        operator== (const PoliceNotes& x, const PoliceNotes& y)
        {
          if (!(x.getPoliceNote () == y.getPoliceNote ()))
            return false;

          return true;
        }

        bool
        operator!= (const PoliceNotes& x, const PoliceNotes& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (const ::std::string& u,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (const ::std::string& u,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::std::istream& is,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::std::istream& is,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::std::istream& is,
                          const ::std::string& sid,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::std::istream& is,
                          const ::std::string& sid,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::xercesc::InputSource& i,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::xercesc::InputSource& i,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (const ::xercesc::DOMDocument& d,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
              ::Smartmatic::SAES::Voting::PBReports::parsePoliceNotes (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "PoliceNotes" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PoliceNotes",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes >
        parsePoliceNotes (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "PoliceNotes" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::PoliceNotes, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PoliceNotes",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializePoliceNotes (::std::ostream& o,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializePoliceNotes (::std::ostream& o,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePoliceNotes (::std::ostream& o,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePoliceNotes (::xercesc::XMLFormatTarget& t,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializePoliceNotes (::xercesc::XMLFormatTarget& t,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePoliceNotes (::xercesc::XMLFormatTarget& t,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePoliceNotes (::xercesc::DOMDocument& d,
                              const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "PoliceNotes" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "PoliceNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializePoliceNotes (const ::Smartmatic::SAES::Voting::PBReports::PoliceNotes& s,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "PoliceNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializePoliceNotes (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const PoliceNote& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // personal-info
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "personal-info",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getPersonal_info ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // create-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "create-date",
                e));

            a << i.getCreate_date ();
          }

          // action-one
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "action-one",
                e));

            a << i.getAction_one ();
          }

          // action-two
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "action-two",
                e));

            a << i.getAction_two ();
          }

          // action-three
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "action-three",
                e));

            a << i.getAction_three ();
          }

          // comment
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "comment",
                e));

            a << i.getComment ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PoliceNotes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // PoliceNote
          //
          for (PoliceNotes::PoliceNoteConstIterator
               b (i.getPoliceNote ().begin ()), n (i.getPoliceNote ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PoliceNote",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

