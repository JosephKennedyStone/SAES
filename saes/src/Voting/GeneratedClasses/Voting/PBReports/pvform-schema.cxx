// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "pvform-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // PVInfoElection
        // 

        const PVInfoElection::RegionLevelSequence& PVInfoElection::
        getRegionLevel () const
        {
          return this->RegionLevel_;
        }

        PVInfoElection::RegionLevelSequence& PVInfoElection::
        getRegionLevel ()
        {
          return this->RegionLevel_;
        }

        void PVInfoElection::
        setRegionLevel (const RegionLevelSequence& s)
        {
          this->RegionLevel_ = s;
        }

        const PVInfoElection::Election_nameType& PVInfoElection::
        getElection_name () const
        {
          return this->election_name_.get ();
        }

        PVInfoElection::Election_nameType& PVInfoElection::
        getElection_name ()
        {
          return this->election_name_.get ();
        }

        void PVInfoElection::
        setElection_name (const Election_nameType& x)
        {
          this->election_name_.set (x);
        }

        void PVInfoElection::
        setElection_name (::std::auto_ptr< Election_nameType > x)
        {
          this->election_name_.set (x);
        }

        const PVInfoElection::Electoral_organizationType& PVInfoElection::
        getElectoral_organization () const
        {
          return this->electoral_organization_.get ();
        }

        PVInfoElection::Electoral_organizationType& PVInfoElection::
        getElectoral_organization ()
        {
          return this->electoral_organization_.get ();
        }

        void PVInfoElection::
        setElectoral_organization (const Electoral_organizationType& x)
        {
          this->electoral_organization_.set (x);
        }

        void PVInfoElection::
        setElectoral_organization (::std::auto_ptr< Electoral_organizationType > x)
        {
          this->electoral_organization_.set (x);
        }

        const PVInfoElection::Creation_timeType& PVInfoElection::
        getCreation_time () const
        {
          return this->creation_time_.get ();
        }

        PVInfoElection::Creation_timeType& PVInfoElection::
        getCreation_time ()
        {
          return this->creation_time_.get ();
        }

        void PVInfoElection::
        setCreation_time (const Creation_timeType& x)
        {
          this->creation_time_.set (x);
        }

        void PVInfoElection::
        setCreation_time (::std::auto_ptr< Creation_timeType > x)
        {
          this->creation_time_.set (x);
        }

        const PVInfoElection::Voting_device_codeType& PVInfoElection::
        getVoting_device_code () const
        {
          return this->voting_device_code_.get ();
        }

        PVInfoElection::Voting_device_codeType& PVInfoElection::
        getVoting_device_code ()
        {
          return this->voting_device_code_.get ();
        }

        void PVInfoElection::
        setVoting_device_code (const Voting_device_codeType& x)
        {
          this->voting_device_code_.set (x);
        }

        void PVInfoElection::
        setVoting_device_code (::std::auto_ptr< Voting_device_codeType > x)
        {
          this->voting_device_code_.set (x);
        }

        const PVInfoElection::Polling_station_codeType& PVInfoElection::
        getPolling_station_code () const
        {
          return this->polling_station_code_.get ();
        }

        PVInfoElection::Polling_station_codeType& PVInfoElection::
        getPolling_station_code ()
        {
          return this->polling_station_code_.get ();
        }

        void PVInfoElection::
        setPolling_station_code (const Polling_station_codeType& x)
        {
          this->polling_station_code_.set (x);
        }

        void PVInfoElection::
        setPolling_station_code (::std::auto_ptr< Polling_station_codeType > x)
        {
          this->polling_station_code_.set (x);
        }

        const PVInfoElection::Polling_station_numberType& PVInfoElection::
        getPolling_station_number () const
        {
          return this->polling_station_number_.get ();
        }

        PVInfoElection::Polling_station_numberType& PVInfoElection::
        getPolling_station_number ()
        {
          return this->polling_station_number_.get ();
        }

        void PVInfoElection::
        setPolling_station_number (const Polling_station_numberType& x)
        {
          this->polling_station_number_.set (x);
        }

        const PVInfoElection::Polling_station_criteriaType& PVInfoElection::
        getPolling_station_criteria () const
        {
          return this->polling_station_criteria_.get ();
        }

        PVInfoElection::Polling_station_criteriaType& PVInfoElection::
        getPolling_station_criteria ()
        {
          return this->polling_station_criteria_.get ();
        }

        void PVInfoElection::
        setPolling_station_criteria (const Polling_station_criteriaType& x)
        {
          this->polling_station_criteria_.set (x);
        }

        void PVInfoElection::
        setPolling_station_criteria (::std::auto_ptr< Polling_station_criteriaType > x)
        {
          this->polling_station_criteria_.set (x);
        }

        const PVInfoElection::Polling_place_codeType& PVInfoElection::
        getPolling_place_code () const
        {
          return this->polling_place_code_.get ();
        }

        PVInfoElection::Polling_place_codeType& PVInfoElection::
        getPolling_place_code ()
        {
          return this->polling_place_code_.get ();
        }

        void PVInfoElection::
        setPolling_place_code (const Polling_place_codeType& x)
        {
          this->polling_place_code_.set (x);
        }

        void PVInfoElection::
        setPolling_place_code (::std::auto_ptr< Polling_place_codeType > x)
        {
          this->polling_place_code_.set (x);
        }

        const PVInfoElection::Polling_place_registered_electorsType& PVInfoElection::
        getPolling_place_registered_electors () const
        {
          return this->polling_place_registered_electors_.get ();
        }

        PVInfoElection::Polling_place_registered_electorsType& PVInfoElection::
        getPolling_place_registered_electors ()
        {
          return this->polling_place_registered_electors_.get ();
        }

        void PVInfoElection::
        setPolling_place_registered_electors (const Polling_place_registered_electorsType& x)
        {
          this->polling_place_registered_electors_.set (x);
        }

        const PVInfoElection::Polling_place_addressType& PVInfoElection::
        getPolling_place_address () const
        {
          return this->polling_place_address_.get ();
        }

        PVInfoElection::Polling_place_addressType& PVInfoElection::
        getPolling_place_address ()
        {
          return this->polling_place_address_.get ();
        }

        void PVInfoElection::
        setPolling_place_address (const Polling_place_addressType& x)
        {
          this->polling_place_address_.set (x);
        }

        void PVInfoElection::
        setPolling_place_address (::std::auto_ptr< Polling_place_addressType > x)
        {
          this->polling_place_address_.set (x);
        }

        const PVInfoElection::Polling_place_nameType& PVInfoElection::
        getPolling_place_name () const
        {
          return this->polling_place_name_.get ();
        }

        PVInfoElection::Polling_place_nameType& PVInfoElection::
        getPolling_place_name ()
        {
          return this->polling_place_name_.get ();
        }

        void PVInfoElection::
        setPolling_place_name (const Polling_place_nameType& x)
        {
          this->polling_place_name_.set (x);
        }

        void PVInfoElection::
        setPolling_place_name (::std::auto_ptr< Polling_place_nameType > x)
        {
          this->polling_place_name_.set (x);
        }

        const PVInfoElection::Number_senatorsType& PVInfoElection::
        getNumber_senators () const
        {
          return this->number_senators_.get ();
        }

        PVInfoElection::Number_senatorsType& PVInfoElection::
        getNumber_senators ()
        {
          return this->number_senators_.get ();
        }

        void PVInfoElection::
        setNumber_senators (const Number_senatorsType& x)
        {
          this->number_senators_.set (x);
        }

        const PVInfoElection::Number_membersType& PVInfoElection::
        getNumber_members () const
        {
          return this->number_members_.get ();
        }

        PVInfoElection::Number_membersType& PVInfoElection::
        getNumber_members ()
        {
          return this->number_members_.get ();
        }

        void PVInfoElection::
        setNumber_members (const Number_membersType& x)
        {
          this->number_members_.set (x);
        }

        const PVInfoElection::Opening_dateType& PVInfoElection::
        getOpening_date () const
        {
          return this->opening_date_.get ();
        }

        PVInfoElection::Opening_dateType& PVInfoElection::
        getOpening_date ()
        {
          return this->opening_date_.get ();
        }

        void PVInfoElection::
        setOpening_date (const Opening_dateType& x)
        {
          this->opening_date_.set (x);
        }

        void PVInfoElection::
        setOpening_date (::std::auto_ptr< Opening_dateType > x)
        {
          this->opening_date_.set (x);
        }

        const PVInfoElection::Close_voting_dateType& PVInfoElection::
        getClose_voting_date () const
        {
          return this->close_voting_date_.get ();
        }

        PVInfoElection::Close_voting_dateType& PVInfoElection::
        getClose_voting_date ()
        {
          return this->close_voting_date_.get ();
        }

        void PVInfoElection::
        setClose_voting_date (const Close_voting_dateType& x)
        {
          this->close_voting_date_.set (x);
        }

        void PVInfoElection::
        setClose_voting_date (::std::auto_ptr< Close_voting_dateType > x)
        {
          this->close_voting_date_.set (x);
        }

        const PVInfoElection::Close_election_dateType& PVInfoElection::
        getClose_election_date () const
        {
          return this->close_election_date_.get ();
        }

        PVInfoElection::Close_election_dateType& PVInfoElection::
        getClose_election_date ()
        {
          return this->close_election_date_.get ();
        }

        void PVInfoElection::
        setClose_election_date (const Close_election_dateType& x)
        {
          this->close_election_date_.set (x);
        }

        void PVInfoElection::
        setClose_election_date (::std::auto_ptr< Close_election_dateType > x)
        {
          this->close_election_date_.set (x);
        }

        const PVInfoElection::Duration_election_dateType& PVInfoElection::
        getDuration_election_date () const
        {
          return this->duration_election_date_.get ();
        }

        PVInfoElection::Duration_election_dateType& PVInfoElection::
        getDuration_election_date ()
        {
          return this->duration_election_date_.get ();
        }

        void PVInfoElection::
        setDuration_election_date (const Duration_election_dateType& x)
        {
          this->duration_election_date_.set (x);
        }

        void PVInfoElection::
        setDuration_election_date (::std::auto_ptr< Duration_election_dateType > x)
        {
          this->duration_election_date_.set (x);
        }

        const PVInfoElection::NiscodeOptional& PVInfoElection::
        getNiscode () const
        {
          return this->niscode_;
        }

        PVInfoElection::NiscodeOptional& PVInfoElection::
        getNiscode ()
        {
          return this->niscode_;
        }

        void PVInfoElection::
        setNiscode (const NiscodeType& x)
        {
          this->niscode_.set (x);
        }

        void PVInfoElection::
        setNiscode (const NiscodeOptional& x)
        {
          this->niscode_ = x;
        }

        void PVInfoElection::
        setNiscode (::std::auto_ptr< NiscodeType > x)
        {
          this->niscode_.set (x);
        }


        // PVContest
        // 

        const PVContest::PrincipalsSelectedSequence& PVContest::
        getPrincipalsSelected () const
        {
          return this->PrincipalsSelected_;
        }

        PVContest::PrincipalsSelectedSequence& PVContest::
        getPrincipalsSelected ()
        {
          return this->PrincipalsSelected_;
        }

        void PVContest::
        setPrincipalsSelected (const PrincipalsSelectedSequence& s)
        {
          this->PrincipalsSelected_ = s;
        }

        const PVContest::StandInSelectedSequence& PVContest::
        getStandInSelected () const
        {
          return this->StandInSelected_;
        }

        PVContest::StandInSelectedSequence& PVContest::
        getStandInSelected ()
        {
          return this->StandInSelected_;
        }

        void PVContest::
        setStandInSelected (const StandInSelectedSequence& s)
        {
          this->StandInSelected_ = s;
        }

        const PVContest::Pv_report_nameType& PVContest::
        getPv_report_name () const
        {
          return this->pv_report_name_.get ();
        }

        PVContest::Pv_report_nameType& PVContest::
        getPv_report_name ()
        {
          return this->pv_report_name_.get ();
        }

        void PVContest::
        setPv_report_name (const Pv_report_nameType& x)
        {
          this->pv_report_name_.set (x);
        }

        void PVContest::
        setPv_report_name (::std::auto_ptr< Pv_report_nameType > x)
        {
          this->pv_report_name_.set (x);
        }

        const PVContest::Pv_party_nameType& PVContest::
        getPv_party_name () const
        {
          return this->pv_party_name_.get ();
        }

        PVContest::Pv_party_nameType& PVContest::
        getPv_party_name ()
        {
          return this->pv_party_name_.get ();
        }

        void PVContest::
        setPv_party_name (const Pv_party_nameType& x)
        {
          this->pv_party_name_.set (x);
        }

        void PVContest::
        setPv_party_name (::std::auto_ptr< Pv_party_nameType > x)
        {
          this->pv_party_name_.set (x);
        }

        const PVContest::Null_infoType& PVContest::
        getNull_info () const
        {
          return this->null_info_.get ();
        }

        PVContest::Null_infoType& PVContest::
        getNull_info ()
        {
          return this->null_info_.get ();
        }

        void PVContest::
        setNull_info (const Null_infoType& x)
        {
          this->null_info_.set (x);
        }

        void PVContest::
        setNull_info (::std::auto_ptr< Null_infoType > x)
        {
          this->null_info_.set (x);
        }


        // PVVote
        // 

        const PVVote::ContestSequence& PVVote::
        getContest () const
        {
          return this->Contest_;
        }

        PVVote::ContestSequence& PVVote::
        getContest ()
        {
          return this->Contest_;
        }

        void PVVote::
        setContest (const ContestSequence& s)
        {
          this->Contest_ = s;
        }

        const PVVote::Logical_voter_groupType& PVVote::
        getLogical_voter_group () const
        {
          return this->logical_voter_group_.get ();
        }

        PVVote::Logical_voter_groupType& PVVote::
        getLogical_voter_group ()
        {
          return this->logical_voter_group_.get ();
        }

        void PVVote::
        setLogical_voter_group (const Logical_voter_groupType& x)
        {
          this->logical_voter_group_.set (x);
        }

        void PVVote::
        setLogical_voter_group (::std::auto_ptr< Logical_voter_groupType > x)
        {
          this->logical_voter_group_.set (x);
        }

        const PVVote::Vote_codeType& PVVote::
        getVote_code () const
        {
          return this->vote_code_.get ();
        }

        PVVote::Vote_codeType& PVVote::
        getVote_code ()
        {
          return this->vote_code_.get ();
        }

        void PVVote::
        setVote_code (const Vote_codeType& x)
        {
          this->vote_code_.set (x);
        }

        void PVVote::
        setVote_code (::std::auto_ptr< Vote_codeType > x)
        {
          this->vote_code_.set (x);
        }

        const PVVote::Voting_device_codeType& PVVote::
        getVoting_device_code () const
        {
          return this->voting_device_code_.get ();
        }

        PVVote::Voting_device_codeType& PVVote::
        getVoting_device_code ()
        {
          return this->voting_device_code_.get ();
        }

        void PVVote::
        setVoting_device_code (const Voting_device_codeType& x)
        {
          this->voting_device_code_.set (x);
        }

        void PVVote::
        setVoting_device_code (::std::auto_ptr< Voting_device_codeType > x)
        {
          this->voting_device_code_.set (x);
        }


        // PVCandidate
        // 

        const PVCandidate::InfoType& PVCandidate::
        getInfo () const
        {
          return this->info_.get ();
        }

        PVCandidate::InfoType& PVCandidate::
        getInfo ()
        {
          return this->info_.get ();
        }

        void PVCandidate::
        setInfo (const InfoType& x)
        {
          this->info_.set (x);
        }

        void PVCandidate::
        setInfo (::std::auto_ptr< InfoType > x)
        {
          this->info_.set (x);
        }


        // PVVotes
        // 

        const PVVotes::VoteSequence& PVVotes::
        getVote () const
        {
          return this->Vote_;
        }

        PVVotes::VoteSequence& PVVotes::
        getVote ()
        {
          return this->Vote_;
        }

        void PVVotes::
        setVote (const VoteSequence& s)
        {
          this->Vote_ = s;
        }

        const PVVotes::Total_votesType& PVVotes::
        getTotal_votes () const
        {
          return this->total_votes_.get ();
        }

        PVVotes::Total_votesType& PVVotes::
        getTotal_votes ()
        {
          return this->total_votes_.get ();
        }

        void PVVotes::
        setTotal_votes (const Total_votesType& x)
        {
          this->total_votes_.set (x);
        }


        // RegionLevel
        // 

        const RegionLevel::Category_levelType& RegionLevel::
        getCategory_level () const
        {
          return this->category_level_.get ();
        }

        RegionLevel::Category_levelType& RegionLevel::
        getCategory_level ()
        {
          return this->category_level_.get ();
        }

        void RegionLevel::
        setCategory_level (const Category_levelType& x)
        {
          this->category_level_.set (x);
        }

        void RegionLevel::
        setCategory_level (::std::auto_ptr< Category_levelType > x)
        {
          this->category_level_.set (x);
        }

        const RegionLevel::CategoryType& RegionLevel::
        getCategory () const
        {
          return this->category_.get ();
        }

        RegionLevel::CategoryType& RegionLevel::
        getCategory ()
        {
          return this->category_.get ();
        }

        void RegionLevel::
        setCategory (const CategoryType& x)
        {
          this->category_.set (x);
        }

        void RegionLevel::
        setCategory (::std::auto_ptr< CategoryType > x)
        {
          this->category_.set (x);
        }

        const RegionLevel::NameType& RegionLevel::
        getName () const
        {
          return this->name_.get ();
        }

        RegionLevel::NameType& RegionLevel::
        getName ()
        {
          return this->name_.get ();
        }

        void RegionLevel::
        setName (const NameType& x)
        {
          this->name_.set (x);
        }

        void RegionLevel::
        setName (::std::auto_ptr< NameType > x)
        {
          this->name_.set (x);
        }


        // PVForm
        // 

        const PVForm::InfoElectionType& PVForm::
        getInfoElection () const
        {
          return this->InfoElection_.get ();
        }

        PVForm::InfoElectionType& PVForm::
        getInfoElection ()
        {
          return this->InfoElection_.get ();
        }

        void PVForm::
        setInfoElection (const InfoElectionType& x)
        {
          this->InfoElection_.set (x);
        }

        void PVForm::
        setInfoElection (::std::auto_ptr< InfoElectionType > x)
        {
          this->InfoElection_.set (x);
        }

        const PVForm::PollworkersType& PVForm::
        getPollworkers () const
        {
          return this->Pollworkers_.get ();
        }

        PVForm::PollworkersType& PVForm::
        getPollworkers ()
        {
          return this->Pollworkers_.get ();
        }

        void PVForm::
        setPollworkers (const PollworkersType& x)
        {
          this->Pollworkers_.set (x);
        }

        void PVForm::
        setPollworkers (::std::auto_ptr< PollworkersType > x)
        {
          this->Pollworkers_.set (x);
        }

        const PVForm::StatisticsType& PVForm::
        getStatistics () const
        {
          return this->Statistics_.get ();
        }

        PVForm::StatisticsType& PVForm::
        getStatistics ()
        {
          return this->Statistics_.get ();
        }

        void PVForm::
        setStatistics (const StatisticsType& x)
        {
          this->Statistics_.set (x);
        }

        void PVForm::
        setStatistics (::std::auto_ptr< StatisticsType > x)
        {
          this->Statistics_.set (x);
        }

        const PVForm::VoteStatisticsType& PVForm::
        getVoteStatistics () const
        {
          return this->VoteStatistics_.get ();
        }

        PVForm::VoteStatisticsType& PVForm::
        getVoteStatistics ()
        {
          return this->VoteStatistics_.get ();
        }

        void PVForm::
        setVoteStatistics (const VoteStatisticsType& x)
        {
          this->VoteStatistics_.set (x);
        }

        void PVForm::
        setVoteStatistics (::std::auto_ptr< VoteStatisticsType > x)
        {
          this->VoteStatistics_.set (x);
        }

        const PVForm::ActivatedCardStatisticsType& PVForm::
        getActivatedCardStatistics () const
        {
          return this->ActivatedCardStatistics_.get ();
        }

        PVForm::ActivatedCardStatisticsType& PVForm::
        getActivatedCardStatistics ()
        {
          return this->ActivatedCardStatistics_.get ();
        }

        void PVForm::
        setActivatedCardStatistics (const ActivatedCardStatisticsType& x)
        {
          this->ActivatedCardStatistics_.set (x);
        }

        void PVForm::
        setActivatedCardStatistics (::std::auto_ptr< ActivatedCardStatisticsType > x)
        {
          this->ActivatedCardStatistics_.set (x);
        }

        const PVForm::AssistedActivationsType& PVForm::
        getAssistedActivations () const
        {
          return this->AssistedActivations_.get ();
        }

        PVForm::AssistedActivationsType& PVForm::
        getAssistedActivations ()
        {
          return this->AssistedActivations_.get ();
        }

        void PVForm::
        setAssistedActivations (const AssistedActivationsType& x)
        {
          this->AssistedActivations_.set (x);
        }

        void PVForm::
        setAssistedActivations (::std::auto_ptr< AssistedActivationsType > x)
        {
          this->AssistedActivations_.set (x);
        }

        const PVForm::VotingDisabledInformationType& PVForm::
        getVotingDisabledInformation () const
        {
          return this->VotingDisabledInformation_.get ();
        }

        PVForm::VotingDisabledInformationType& PVForm::
        getVotingDisabledInformation ()
        {
          return this->VotingDisabledInformation_.get ();
        }

        void PVForm::
        setVotingDisabledInformation (const VotingDisabledInformationType& x)
        {
          this->VotingDisabledInformation_.set (x);
        }

        void PVForm::
        setVotingDisabledInformation (::std::auto_ptr< VotingDisabledInformationType > x)
        {
          this->VotingDisabledInformation_.set (x);
        }

        const PVForm::IncidentReportsType& PVForm::
        getIncidentReports () const
        {
          return this->IncidentReports_.get ();
        }

        PVForm::IncidentReportsType& PVForm::
        getIncidentReports ()
        {
          return this->IncidentReports_.get ();
        }

        void PVForm::
        setIncidentReports (const IncidentReportsType& x)
        {
          this->IncidentReports_.set (x);
        }

        void PVForm::
        setIncidentReports (::std::auto_ptr< IncidentReportsType > x)
        {
          this->IncidentReports_.set (x);
        }

        const PVForm::CloseElectionNotesType& PVForm::
        getCloseElectionNotes () const
        {
          return this->CloseElectionNotes_.get ();
        }

        PVForm::CloseElectionNotesType& PVForm::
        getCloseElectionNotes ()
        {
          return this->CloseElectionNotes_.get ();
        }

        void PVForm::
        setCloseElectionNotes (const CloseElectionNotesType& x)
        {
          this->CloseElectionNotes_.set (x);
        }

        void PVForm::
        setCloseElectionNotes (::std::auto_ptr< CloseElectionNotesType > x)
        {
          this->CloseElectionNotes_.set (x);
        }

        const PVForm::ReferenceVotesType& PVForm::
        getReferenceVotes () const
        {
          return this->ReferenceVotes_.get ();
        }

        PVForm::ReferenceVotesType& PVForm::
        getReferenceVotes ()
        {
          return this->ReferenceVotes_.get ();
        }

        void PVForm::
        setReferenceVotes (const ReferenceVotesType& x)
        {
          this->ReferenceVotes_.set (x);
        }

        void PVForm::
        setReferenceVotes (::std::auto_ptr< ReferenceVotesType > x)
        {
          this->ReferenceVotes_.set (x);
        }

        const PVForm::HashOfTheResultsType& PVForm::
        getHashOfTheResults () const
        {
          return this->HashOfTheResults_.get ();
        }

        PVForm::HashOfTheResultsType& PVForm::
        getHashOfTheResults ()
        {
          return this->HashOfTheResults_.get ();
        }

        void PVForm::
        setHashOfTheResults (const HashOfTheResultsType& x)
        {
          this->HashOfTheResults_.set (x);
        }

        void PVForm::
        setHashOfTheResults (::std::auto_ptr< HashOfTheResultsType > x)
        {
          this->HashOfTheResults_.set (x);
        }

        const PVForm::IDCardMembersType& PVForm::
        getIDCardMembers () const
        {
          return this->IDCardMembers_.get ();
        }

        PVForm::IDCardMembersType& PVForm::
        getIDCardMembers ()
        {
          return this->IDCardMembers_.get ();
        }

        void PVForm::
        setIDCardMembers (const IDCardMembersType& x)
        {
          this->IDCardMembers_.set (x);
        }

        void PVForm::
        setIDCardMembers (::std::auto_ptr< IDCardMembersType > x)
        {
          this->IDCardMembers_.set (x);
        }

        const PVForm::PoliceNotesType& PVForm::
        getPoliceNotes () const
        {
          return this->PoliceNotes_.get ();
        }

        PVForm::PoliceNotesType& PVForm::
        getPoliceNotes ()
        {
          return this->PoliceNotes_.get ();
        }

        void PVForm::
        setPoliceNotes (const PoliceNotesType& x)
        {
          this->PoliceNotes_.set (x);
        }

        void PVForm::
        setPoliceNotes (::std::auto_ptr< PoliceNotesType > x)
        {
          this->PoliceNotes_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // PVInfoElection
        //

        PVInfoElection::
        PVInfoElection ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          RegionLevel_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          election_name_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          electoral_organization_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          creation_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          voting_device_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_station_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_station_number_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_station_criteria_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_registered_electors_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_address_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_name_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          number_senators_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          number_members_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          opening_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          close_voting_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          close_election_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          duration_election_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          niscode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVInfoElection::
        PVInfoElection (const Election_nameType& election_name,
                        const Electoral_organizationType& electoral_organization,
                        const Creation_timeType& creation_time,
                        const Voting_device_codeType& voting_device_code,
                        const Polling_station_codeType& polling_station_code,
                        const Polling_station_numberType& polling_station_number,
                        const Polling_station_criteriaType& polling_station_criteria,
                        const Polling_place_codeType& polling_place_code,
                        const Polling_place_registered_electorsType& polling_place_registered_electors,
                        const Polling_place_addressType& polling_place_address,
                        const Polling_place_nameType& polling_place_name,
                        const Number_senatorsType& number_senators,
                        const Number_membersType& number_members,
                        const Opening_dateType& opening_date,
                        const Close_voting_dateType& close_voting_date,
                        const Close_election_dateType& close_election_date,
                        const Duration_election_dateType& duration_election_date)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          RegionLevel_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          election_name_ (election_name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          electoral_organization_ (electoral_organization, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          creation_time_ (creation_time, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          voting_device_code_ (voting_device_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_station_code_ (polling_station_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_station_number_ (polling_station_number, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_station_criteria_ (polling_station_criteria, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_code_ (polling_place_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_registered_electors_ (polling_place_registered_electors, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_address_ (polling_place_address, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          polling_place_name_ (polling_place_name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          number_senators_ (number_senators, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          number_members_ (number_members, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          opening_date_ (opening_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          close_voting_date_ (close_voting_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          close_election_date_ (close_election_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          duration_election_date_ (duration_election_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          niscode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVInfoElection::
        PVInfoElection (const PVInfoElection& x,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          RegionLevel_ (x.RegionLevel_, f, this),
          election_name_ (x.election_name_, f, this),
          electoral_organization_ (x.electoral_organization_, f, this),
          creation_time_ (x.creation_time_, f, this),
          voting_device_code_ (x.voting_device_code_, f, this),
          polling_station_code_ (x.polling_station_code_, f, this),
          polling_station_number_ (x.polling_station_number_, f, this),
          polling_station_criteria_ (x.polling_station_criteria_, f, this),
          polling_place_code_ (x.polling_place_code_, f, this),
          polling_place_registered_electors_ (x.polling_place_registered_electors_, f, this),
          polling_place_address_ (x.polling_place_address_, f, this),
          polling_place_name_ (x.polling_place_name_, f, this),
          number_senators_ (x.number_senators_, f, this),
          number_members_ (x.number_members_, f, this),
          opening_date_ (x.opening_date_, f, this),
          close_voting_date_ (x.close_voting_date_, f, this),
          close_election_date_ (x.close_election_date_, f, this),
          duration_election_date_ (x.duration_election_date_, f, this),
          niscode_ (x.niscode_, f, this)
        {
        }

        PVInfoElection::
        PVInfoElection (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          RegionLevel_ (f, this),
          election_name_ (f, this),
          electoral_organization_ (f, this),
          creation_time_ (f, this),
          voting_device_code_ (f, this),
          polling_station_code_ (f, this),
          polling_station_number_ (f, this),
          polling_station_criteria_ (f, this),
          polling_place_code_ (f, this),
          polling_place_registered_electors_ (f, this),
          polling_place_address_ (f, this),
          polling_place_name_ (f, this),
          number_senators_ (f, this),
          number_members_ (f, this),
          opening_date_ (f, this),
          close_voting_date_ (f, this),
          close_election_date_ (f, this),
          duration_election_date_ (f, this),
          niscode_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void PVInfoElection::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // RegionLevel
            //
            if (n.name () == "RegionLevel" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< RegionLevelType > r (
                RegionLevelTraits::create (i, f, this));

              this->RegionLevel_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "election-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Election_nameType > r (
                Election_nameTraits::create (i, f, this));

              this->election_name_.set (r);
              continue;
            }

            if (n.name () == "electoral-organization" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Electoral_organizationType > r (
                Electoral_organizationTraits::create (i, f, this));

              this->electoral_organization_.set (r);
              continue;
            }

            if (n.name () == "creation-time" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Creation_timeType > r (
                Creation_timeTraits::create (i, f, this));

              this->creation_time_.set (r);
              continue;
            }

            if (n.name () == "voting-device-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Voting_device_codeType > r (
                Voting_device_codeTraits::create (i, f, this));

              this->voting_device_code_.set (r);
              continue;
            }

            if (n.name () == "polling-station-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_station_codeType > r (
                Polling_station_codeTraits::create (i, f, this));

              this->polling_station_code_.set (r);
              continue;
            }

            if (n.name () == "polling-station-number" && n.namespace_ ().empty ())
            {
              this->polling_station_number_.set (Polling_station_numberTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "polling-station-criteria" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_station_criteriaType > r (
                Polling_station_criteriaTraits::create (i, f, this));

              this->polling_station_criteria_.set (r);
              continue;
            }

            if (n.name () == "polling-place-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_place_codeType > r (
                Polling_place_codeTraits::create (i, f, this));

              this->polling_place_code_.set (r);
              continue;
            }

            if (n.name () == "polling-place-registered-electors" && n.namespace_ ().empty ())
            {
              this->polling_place_registered_electors_.set (Polling_place_registered_electorsTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "polling-place-address" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_place_addressType > r (
                Polling_place_addressTraits::create (i, f, this));

              this->polling_place_address_.set (r);
              continue;
            }

            if (n.name () == "polling-place-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_place_nameType > r (
                Polling_place_nameTraits::create (i, f, this));

              this->polling_place_name_.set (r);
              continue;
            }

            if (n.name () == "number-senators" && n.namespace_ ().empty ())
            {
              this->number_senators_.set (Number_senatorsTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "number-members" && n.namespace_ ().empty ())
            {
              this->number_members_.set (Number_membersTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "opening-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Opening_dateType > r (
                Opening_dateTraits::create (i, f, this));

              this->opening_date_.set (r);
              continue;
            }

            if (n.name () == "close-voting-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Close_voting_dateType > r (
                Close_voting_dateTraits::create (i, f, this));

              this->close_voting_date_.set (r);
              continue;
            }

            if (n.name () == "close-election-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Close_election_dateType > r (
                Close_election_dateTraits::create (i, f, this));

              this->close_election_date_.set (r);
              continue;
            }

            if (n.name () == "duration-election-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Duration_election_dateType > r (
                Duration_election_dateTraits::create (i, f, this));

              this->duration_election_date_.set (r);
              continue;
            }

            if (n.name () == "niscode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NiscodeType > r (
                NiscodeTraits::create (i, f, this));

              this->niscode_.set (r);
              continue;
            }
          }

          if (!election_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "election-name",
              "");
          }

          if (!electoral_organization_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "electoral-organization",
              "");
          }

          if (!creation_time_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "creation-time",
              "");
          }

          if (!voting_device_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "voting-device-code",
              "");
          }

          if (!polling_station_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-station-code",
              "");
          }

          if (!polling_station_number_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-station-number",
              "");
          }

          if (!polling_station_criteria_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-station-criteria",
              "");
          }

          if (!polling_place_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-code",
              "");
          }

          if (!polling_place_registered_electors_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-registered-electors",
              "");
          }

          if (!polling_place_address_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-address",
              "");
          }

          if (!polling_place_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-name",
              "");
          }

          if (!number_senators_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "number-senators",
              "");
          }

          if (!number_members_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "number-members",
              "");
          }

          if (!opening_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "opening-date",
              "");
          }

          if (!close_voting_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "close-voting-date",
              "");
          }

          if (!close_election_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "close-election-date",
              "");
          }

          if (!duration_election_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "duration-election-date",
              "");
          }
        }

        PVInfoElection* PVInfoElection::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PVInfoElection (*this, f, c);
        }

        PVInfoElection::
        ~PVInfoElection ()
        {
        }

        bool
        operator== (const PVInfoElection& x, const PVInfoElection& y)
        {
          if (!(x.getRegionLevel () == y.getRegionLevel ()))
            return false;

          if (!(x.getElection_name () == y.getElection_name ()))
            return false;

          if (!(x.getElectoral_organization () == y.getElectoral_organization ()))
            return false;

          if (!(x.getCreation_time () == y.getCreation_time ()))
            return false;

          if (!(x.getVoting_device_code () == y.getVoting_device_code ()))
            return false;

          if (!(x.getPolling_station_code () == y.getPolling_station_code ()))
            return false;

          if (!(x.getPolling_station_number () == y.getPolling_station_number ()))
            return false;

          if (!(x.getPolling_station_criteria () == y.getPolling_station_criteria ()))
            return false;

          if (!(x.getPolling_place_code () == y.getPolling_place_code ()))
            return false;

          if (!(x.getPolling_place_registered_electors () == y.getPolling_place_registered_electors ()))
            return false;

          if (!(x.getPolling_place_address () == y.getPolling_place_address ()))
            return false;

          if (!(x.getPolling_place_name () == y.getPolling_place_name ()))
            return false;

          if (!(x.getNumber_senators () == y.getNumber_senators ()))
            return false;

          if (!(x.getNumber_members () == y.getNumber_members ()))
            return false;

          if (!(x.getOpening_date () == y.getOpening_date ()))
            return false;

          if (!(x.getClose_voting_date () == y.getClose_voting_date ()))
            return false;

          if (!(x.getClose_election_date () == y.getClose_election_date ()))
            return false;

          if (!(x.getDuration_election_date () == y.getDuration_election_date ()))
            return false;

          if (!(x.getNiscode () == y.getNiscode ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVInfoElection& x, const PVInfoElection& y)
        {
          return !(x == y);
        }

        // PVContest
        //

        PVContest::
        PVContest ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          PrincipalsSelected_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          StandInSelected_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          pv_report_name_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          pv_party_name_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          null_info_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVContest::
        PVContest (const Pv_report_nameType& pv_report_name,
                   const Pv_party_nameType& pv_party_name,
                   const Null_infoType& null_info)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          PrincipalsSelected_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          StandInSelected_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          pv_report_name_ (pv_report_name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          pv_party_name_ (pv_party_name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          null_info_ (null_info, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVContest::
        PVContest (const PVContest& x,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          PrincipalsSelected_ (x.PrincipalsSelected_, f, this),
          StandInSelected_ (x.StandInSelected_, f, this),
          pv_report_name_ (x.pv_report_name_, f, this),
          pv_party_name_ (x.pv_party_name_, f, this),
          null_info_ (x.null_info_, f, this)
        {
        }

        PVContest::
        PVContest (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          PrincipalsSelected_ (f, this),
          StandInSelected_ (f, this),
          pv_report_name_ (f, this),
          pv_party_name_ (f, this),
          null_info_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void PVContest::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PrincipalsSelected
            //
            if (n.name () == "PrincipalsSelected" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< PrincipalsSelectedType > r (
                PrincipalsSelectedTraits::create (i, f, this));

              this->PrincipalsSelected_.push_back (r);
              continue;
            }

            // StandInSelected
            //
            if (n.name () == "StandInSelected" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< StandInSelectedType > r (
                StandInSelectedTraits::create (i, f, this));

              this->StandInSelected_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "pv-report-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Pv_report_nameType > r (
                Pv_report_nameTraits::create (i, f, this));

              this->pv_report_name_.set (r);
              continue;
            }

            if (n.name () == "pv-party-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Pv_party_nameType > r (
                Pv_party_nameTraits::create (i, f, this));

              this->pv_party_name_.set (r);
              continue;
            }

            if (n.name () == "null-info" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Null_infoType > r (
                Null_infoTraits::create (i, f, this));

              this->null_info_.set (r);
              continue;
            }
          }

          if (!pv_report_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "pv-report-name",
              "");
          }

          if (!pv_party_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "pv-party-name",
              "");
          }

          if (!null_info_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "null-info",
              "");
          }
        }

        PVContest* PVContest::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PVContest (*this, f, c);
        }

        PVContest::
        ~PVContest ()
        {
        }

        bool
        operator== (const PVContest& x, const PVContest& y)
        {
          if (!(x.getPrincipalsSelected () == y.getPrincipalsSelected ()))
            return false;

          if (!(x.getStandInSelected () == y.getStandInSelected ()))
            return false;

          if (!(x.getPv_report_name () == y.getPv_report_name ()))
            return false;

          if (!(x.getPv_party_name () == y.getPv_party_name ()))
            return false;

          if (!(x.getNull_info () == y.getNull_info ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVContest& x, const PVContest& y)
        {
          return !(x == y);
        }

        // PVVote
        //

        PVVote::
        PVVote ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Contest_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          logical_voter_group_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          vote_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          voting_device_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVVote::
        PVVote (const Logical_voter_groupType& logical_voter_group,
                const Vote_codeType& vote_code,
                const Voting_device_codeType& voting_device_code)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Contest_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          logical_voter_group_ (logical_voter_group, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          vote_code_ (vote_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          voting_device_code_ (voting_device_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVVote::
        PVVote (const PVVote& x,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Contest_ (x.Contest_, f, this),
          logical_voter_group_ (x.logical_voter_group_, f, this),
          vote_code_ (x.vote_code_, f, this),
          voting_device_code_ (x.voting_device_code_, f, this)
        {
        }

        PVVote::
        PVVote (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Contest_ (f, this),
          logical_voter_group_ (f, this),
          vote_code_ (f, this),
          voting_device_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void PVVote::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Contest
            //
            if (n.name () == "Contest" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ContestType > r (
                ContestTraits::create (i, f, this));

              this->Contest_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "logical-voter-group" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Logical_voter_groupType > r (
                Logical_voter_groupTraits::create (i, f, this));

              this->logical_voter_group_.set (r);
              continue;
            }

            if (n.name () == "vote-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Vote_codeType > r (
                Vote_codeTraits::create (i, f, this));

              this->vote_code_.set (r);
              continue;
            }

            if (n.name () == "voting-device-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Voting_device_codeType > r (
                Voting_device_codeTraits::create (i, f, this));

              this->voting_device_code_.set (r);
              continue;
            }
          }

          if (!logical_voter_group_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "logical-voter-group",
              "");
          }

          if (!vote_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "vote-code",
              "");
          }

          if (!voting_device_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "voting-device-code",
              "");
          }
        }

        PVVote* PVVote::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PVVote (*this, f, c);
        }

        PVVote::
        ~PVVote ()
        {
        }

        bool
        operator== (const PVVote& x, const PVVote& y)
        {
          if (!(x.getContest () == y.getContest ()))
            return false;

          if (!(x.getLogical_voter_group () == y.getLogical_voter_group ()))
            return false;

          if (!(x.getVote_code () == y.getVote_code ()))
            return false;

          if (!(x.getVoting_device_code () == y.getVoting_device_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVVote& x, const PVVote& y)
        {
          return !(x == y);
        }

        // PVCandidate
        //

        PVCandidate::
        PVCandidate ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          info_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVCandidate::
        PVCandidate (const InfoType& info)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          info_ (info, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVCandidate::
        PVCandidate (const PVCandidate& x,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          info_ (x.info_, f, this)
        {
        }

        PVCandidate::
        PVCandidate (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          info_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void PVCandidate::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "info" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< InfoType > r (
                InfoTraits::create (i, f, this));

              this->info_.set (r);
              continue;
            }
          }

          if (!info_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "info",
              "");
          }
        }

        PVCandidate* PVCandidate::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PVCandidate (*this, f, c);
        }

        PVCandidate::
        ~PVCandidate ()
        {
        }

        bool
        operator== (const PVCandidate& x, const PVCandidate& y)
        {
          if (!(x.getInfo () == y.getInfo ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVCandidate& x, const PVCandidate& y)
        {
          return !(x == y);
        }

        // PVVotes
        //

        PVVotes::
        PVVotes ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Vote_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          total_votes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVVotes::
        PVVotes (const Total_votesType& total_votes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Vote_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          total_votes_ (total_votes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVVotes::
        PVVotes (const PVVotes& x,
                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Vote_ (x.Vote_, f, this),
          total_votes_ (x.total_votes_, f, this)
        {
        }

        PVVotes::
        PVVotes (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Vote_ (f, this),
          total_votes_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void PVVotes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Vote
            //
            if (n.name () == "Vote" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VoteType > r (
                VoteTraits::create (i, f, this));

              this->Vote_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "total-votes" && n.namespace_ ().empty ())
            {
              this->total_votes_.set (Total_votesTraits::create (i, f, this));
              continue;
            }
          }

          if (!total_votes_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "total-votes",
              "");
          }
        }

        PVVotes* PVVotes::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PVVotes (*this, f, c);
        }

        PVVotes::
        ~PVVotes ()
        {
        }

        bool
        operator== (const PVVotes& x, const PVVotes& y)
        {
          if (!(x.getVote () == y.getVote ()))
            return false;

          if (!(x.getTotal_votes () == y.getTotal_votes ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVVotes& x, const PVVotes& y)
        {
          return !(x == y);
        }

        // RegionLevel
        //

        RegionLevel::
        RegionLevel ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          category_level_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          category_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          name_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        RegionLevel::
        RegionLevel (const Category_levelType& category_level,
                     const CategoryType& category,
                     const NameType& name)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          category_level_ (category_level, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          category_ (category, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          name_ (name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        RegionLevel::
        RegionLevel (const RegionLevel& x,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          category_level_ (x.category_level_, f, this),
          category_ (x.category_, f, this),
          name_ (x.name_, f, this)
        {
        }

        RegionLevel::
        RegionLevel (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          category_level_ (f, this),
          category_ (f, this),
          name_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void RegionLevel::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "category-level" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Category_levelType > r (
                Category_levelTraits::create (i, f, this));

              this->category_level_.set (r);
              continue;
            }

            if (n.name () == "category" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CategoryType > r (
                CategoryTraits::create (i, f, this));

              this->category_.set (r);
              continue;
            }

            if (n.name () == "name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NameType > r (
                NameTraits::create (i, f, this));

              this->name_.set (r);
              continue;
            }
          }

          if (!category_level_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "category-level",
              "");
          }

          if (!category_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "category",
              "");
          }

          if (!name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name",
              "");
          }
        }

        RegionLevel* RegionLevel::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class RegionLevel (*this, f, c);
        }

        RegionLevel::
        ~RegionLevel ()
        {
        }

        bool
        operator== (const RegionLevel& x, const RegionLevel& y)
        {
          if (!(x.getCategory_level () == y.getCategory_level ()))
            return false;

          if (!(x.getCategory () == y.getCategory ()))
            return false;

          if (!(x.getName () == y.getName ()))
            return false;

          return true;
        }

        bool
        operator!= (const RegionLevel& x, const RegionLevel& y)
        {
          return !(x == y);
        }

        // PVForm
        //

        PVForm::
        PVForm ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          InfoElection_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Pollworkers_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Statistics_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VoteStatistics_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedCardStatistics_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AssistedActivations_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VotingDisabledInformation_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IncidentReports_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CloseElectionNotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ReferenceVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          HashOfTheResults_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IDCardMembers_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PoliceNotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVForm::
        PVForm (const InfoElectionType& InfoElection,
                const PollworkersType& Pollworkers,
                const StatisticsType& Statistics,
                const VoteStatisticsType& VoteStatistics,
                const ActivatedCardStatisticsType& ActivatedCardStatistics,
                const AssistedActivationsType& AssistedActivations,
                const VotingDisabledInformationType& VotingDisabledInformation,
                const IncidentReportsType& IncidentReports,
                const CloseElectionNotesType& CloseElectionNotes,
                const ReferenceVotesType& ReferenceVotes,
                const HashOfTheResultsType& HashOfTheResults,
                const IDCardMembersType& IDCardMembers,
                const PoliceNotesType& PoliceNotes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          InfoElection_ (InfoElection, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Pollworkers_ (Pollworkers, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Statistics_ (Statistics, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VoteStatistics_ (VoteStatistics, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedCardStatistics_ (ActivatedCardStatistics, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AssistedActivations_ (AssistedActivations, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VotingDisabledInformation_ (VotingDisabledInformation, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IncidentReports_ (IncidentReports, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CloseElectionNotes_ (CloseElectionNotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ReferenceVotes_ (ReferenceVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          HashOfTheResults_ (HashOfTheResults, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IDCardMembers_ (IDCardMembers, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PoliceNotes_ (PoliceNotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVForm::
        PVForm (::std::auto_ptr< InfoElectionType >& InfoElection,
                ::std::auto_ptr< PollworkersType >& Pollworkers,
                ::std::auto_ptr< StatisticsType >& Statistics,
                ::std::auto_ptr< VoteStatisticsType >& VoteStatistics,
                ::std::auto_ptr< ActivatedCardStatisticsType >& ActivatedCardStatistics,
                ::std::auto_ptr< AssistedActivationsType >& AssistedActivations,
                ::std::auto_ptr< VotingDisabledInformationType >& VotingDisabledInformation,
                ::std::auto_ptr< IncidentReportsType >& IncidentReports,
                ::std::auto_ptr< CloseElectionNotesType >& CloseElectionNotes,
                ::std::auto_ptr< ReferenceVotesType >& ReferenceVotes,
                const HashOfTheResultsType& HashOfTheResults,
                ::std::auto_ptr< IDCardMembersType >& IDCardMembers,
                ::std::auto_ptr< PoliceNotesType >& PoliceNotes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          InfoElection_ (InfoElection, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Pollworkers_ (Pollworkers, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Statistics_ (Statistics, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VoteStatistics_ (VoteStatistics, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivatedCardStatistics_ (ActivatedCardStatistics, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AssistedActivations_ (AssistedActivations, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VotingDisabledInformation_ (VotingDisabledInformation, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IncidentReports_ (IncidentReports, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CloseElectionNotes_ (CloseElectionNotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ReferenceVotes_ (ReferenceVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          HashOfTheResults_ (HashOfTheResults, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IDCardMembers_ (IDCardMembers, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PoliceNotes_ (PoliceNotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        PVForm::
        PVForm (const PVForm& x,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          InfoElection_ (x.InfoElection_, f, this),
          Pollworkers_ (x.Pollworkers_, f, this),
          Statistics_ (x.Statistics_, f, this),
          VoteStatistics_ (x.VoteStatistics_, f, this),
          ActivatedCardStatistics_ (x.ActivatedCardStatistics_, f, this),
          AssistedActivations_ (x.AssistedActivations_, f, this),
          VotingDisabledInformation_ (x.VotingDisabledInformation_, f, this),
          IncidentReports_ (x.IncidentReports_, f, this),
          CloseElectionNotes_ (x.CloseElectionNotes_, f, this),
          ReferenceVotes_ (x.ReferenceVotes_, f, this),
          HashOfTheResults_ (x.HashOfTheResults_, f, this),
          IDCardMembers_ (x.IDCardMembers_, f, this),
          PoliceNotes_ (x.PoliceNotes_, f, this)
        {
        }

        PVForm::
        PVForm (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          InfoElection_ (f, this),
          Pollworkers_ (f, this),
          Statistics_ (f, this),
          VoteStatistics_ (f, this),
          ActivatedCardStatistics_ (f, this),
          AssistedActivations_ (f, this),
          VotingDisabledInformation_ (f, this),
          IncidentReports_ (f, this),
          CloseElectionNotes_ (f, this),
          ReferenceVotes_ (f, this),
          HashOfTheResults_ (f, this),
          IDCardMembers_ (f, this),
          PoliceNotes_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void PVForm::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // InfoElection
            //
            if (n.name () == "InfoElection" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< InfoElectionType > r (
                InfoElectionTraits::create (i, f, this));

              if (!InfoElection_.present ())
              {
                this->InfoElection_.set (r);
                continue;
              }
            }

            // Pollworkers
            //
            if (n.name () == "Pollworkers" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< PollworkersType > r (
                PollworkersTraits::create (i, f, this));

              if (!Pollworkers_.present ())
              {
                this->Pollworkers_.set (r);
                continue;
              }
            }

            // Statistics
            //
            if (n.name () == "Statistics" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< StatisticsType > r (
                StatisticsTraits::create (i, f, this));

              if (!Statistics_.present ())
              {
                this->Statistics_.set (r);
                continue;
              }
            }

            // VoteStatistics
            //
            if (n.name () == "VoteStatistics" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VoteStatisticsType > r (
                VoteStatisticsTraits::create (i, f, this));

              if (!VoteStatistics_.present ())
              {
                this->VoteStatistics_.set (r);
                continue;
              }
            }

            // ActivatedCardStatistics
            //
            if (n.name () == "ActivatedCardStatistics" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivatedCardStatisticsType > r (
                ActivatedCardStatisticsTraits::create (i, f, this));

              if (!ActivatedCardStatistics_.present ())
              {
                this->ActivatedCardStatistics_.set (r);
                continue;
              }
            }

            // AssistedActivations
            //
            if (n.name () == "AssistedActivations" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< AssistedActivationsType > r (
                AssistedActivationsTraits::create (i, f, this));

              if (!AssistedActivations_.present ())
              {
                this->AssistedActivations_.set (r);
                continue;
              }
            }

            // VotingDisabledInformation
            //
            if (n.name () == "VotingDisabledInformation" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VotingDisabledInformationType > r (
                VotingDisabledInformationTraits::create (i, f, this));

              if (!VotingDisabledInformation_.present ())
              {
                this->VotingDisabledInformation_.set (r);
                continue;
              }
            }

            // IncidentReports
            //
            if (n.name () == "IncidentReports" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< IncidentReportsType > r (
                IncidentReportsTraits::create (i, f, this));

              if (!IncidentReports_.present ())
              {
                this->IncidentReports_.set (r);
                continue;
              }
            }

            // CloseElectionNotes
            //
            if (n.name () == "CloseElectionNotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CloseElectionNotesType > r (
                CloseElectionNotesTraits::create (i, f, this));

              if (!CloseElectionNotes_.present ())
              {
                this->CloseElectionNotes_.set (r);
                continue;
              }
            }

            // ReferenceVotes
            //
            if (n.name () == "ReferenceVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ReferenceVotesType > r (
                ReferenceVotesTraits::create (i, f, this));

              if (!ReferenceVotes_.present ())
              {
                this->ReferenceVotes_.set (r);
                continue;
              }
            }

            // HashOfTheResults
            //
            if (n.name () == "HashOfTheResults" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< HashOfTheResultsType > r (
                HashOfTheResultsTraits::create (i, f, this));

              if (!HashOfTheResults_.present ())
              {
                this->HashOfTheResults_.set (r);
                continue;
              }
            }

            // IDCardMembers
            //
            if (n.name () == "IDCardMembers" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< IDCardMembersType > r (
                IDCardMembersTraits::create (i, f, this));

              if (!IDCardMembers_.present ())
              {
                this->IDCardMembers_.set (r);
                continue;
              }
            }

            // PoliceNotes
            //
            if (n.name () == "PoliceNotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< PoliceNotesType > r (
                PoliceNotesTraits::create (i, f, this));

              if (!PoliceNotes_.present ())
              {
                this->PoliceNotes_.set (r);
                continue;
              }
            }

            break;
          }

          if (!InfoElection_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "InfoElection",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!Pollworkers_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Pollworkers",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!Statistics_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Statistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!VoteStatistics_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VoteStatistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ActivatedCardStatistics_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivatedCardStatistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!AssistedActivations_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "AssistedActivations",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!VotingDisabledInformation_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotingDisabledInformation",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!IncidentReports_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IncidentReports",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!CloseElectionNotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CloseElectionNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ReferenceVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ReferenceVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!HashOfTheResults_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "HashOfTheResults",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!IDCardMembers_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "IDCardMembers",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!PoliceNotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PoliceNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        PVForm* PVForm::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class PVForm (*this, f, c);
        }

        PVForm::
        ~PVForm ()
        {
        }

        bool
        operator== (const PVForm& x, const PVForm& y)
        {
          if (!(x.getInfoElection () == y.getInfoElection ()))
            return false;

          if (!(x.getPollworkers () == y.getPollworkers ()))
            return false;

          if (!(x.getStatistics () == y.getStatistics ()))
            return false;

          if (!(x.getVoteStatistics () == y.getVoteStatistics ()))
            return false;

          if (!(x.getActivatedCardStatistics () == y.getActivatedCardStatistics ()))
            return false;

          if (!(x.getAssistedActivations () == y.getAssistedActivations ()))
            return false;

          if (!(x.getVotingDisabledInformation () == y.getVotingDisabledInformation ()))
            return false;

          if (!(x.getIncidentReports () == y.getIncidentReports ()))
            return false;

          if (!(x.getCloseElectionNotes () == y.getCloseElectionNotes ()))
            return false;

          if (!(x.getReferenceVotes () == y.getReferenceVotes ()))
            return false;

          if (!(x.getHashOfTheResults () == y.getHashOfTheResults ()))
            return false;

          if (!(x.getIDCardMembers () == y.getIDCardMembers ()))
            return false;

          if (!(x.getPoliceNotes () == y.getPoliceNotes ()))
            return false;

          return true;
        }

        bool
        operator!= (const PVForm& x, const PVForm& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::std::string& u,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::std::string& u,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePVForm (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePVForm (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePVForm (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     const ::std::string& sid,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePVForm (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     const ::std::string& sid,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePVForm (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePVForm (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::xercesc::InputSource& i,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::xercesc::InputSource& i,
                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (const ::xercesc::DOMDocument& d,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
              ::Smartmatic::SAES::Voting::PBReports::parsePVForm (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "PVForm" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::PVForm, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PVForm",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm >
        parsePVForm (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "PVForm" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::PVForm > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::PVForm, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PVForm",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializePVForm (::std::ostream& o,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePVForm (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializePVForm (::std::ostream& o,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePVForm (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePVForm (::std::ostream& o,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePVForm (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePVForm (::xercesc::XMLFormatTarget& t,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePVForm (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializePVForm (::xercesc::XMLFormatTarget& t,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePVForm (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePVForm (::xercesc::XMLFormatTarget& t,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         const ::std::string& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePVForm (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePVForm (::xercesc::DOMDocument& d,
                         const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "PVForm" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "PVForm",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializePVForm (const ::Smartmatic::SAES::Voting::PBReports::PVForm& s,
                         const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "PVForm",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializePVForm (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVInfoElection& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // RegionLevel
          //
          for (PVInfoElection::RegionLevelConstIterator
               b (i.getRegionLevel ().begin ()), n (i.getRegionLevel ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "RegionLevel",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }

          // election-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "election-name",
                e));

            a << i.getElection_name ();
          }

          // electoral-organization
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "electoral-organization",
                e));

            a << i.getElectoral_organization ();
          }

          // creation-time
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "creation-time",
                e));

            a << i.getCreation_time ();
          }

          // voting-device-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "voting-device-code",
                e));

            a << i.getVoting_device_code ();
          }

          // polling-station-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-station-code",
                e));

            a << i.getPolling_station_code ();
          }

          // polling-station-number
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-station-number",
                e));

            a << i.getPolling_station_number ();
          }

          // polling-station-criteria
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-station-criteria",
                e));

            a << i.getPolling_station_criteria ();
          }

          // polling-place-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-code",
                e));

            a << i.getPolling_place_code ();
          }

          // polling-place-registered-electors
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-registered-electors",
                e));

            a << i.getPolling_place_registered_electors ();
          }

          // polling-place-address
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-address",
                e));

            a << i.getPolling_place_address ();
          }

          // polling-place-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-name",
                e));

            a << i.getPolling_place_name ();
          }

          // number-senators
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "number-senators",
                e));

            a << i.getNumber_senators ();
          }

          // number-members
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "number-members",
                e));

            a << i.getNumber_members ();
          }

          // opening-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "opening-date",
                e));

            a << i.getOpening_date ();
          }

          // close-voting-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "close-voting-date",
                e));

            a << i.getClose_voting_date ();
          }

          // close-election-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "close-election-date",
                e));

            a << i.getClose_election_date ();
          }

          // duration-election-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "duration-election-date",
                e));

            a << i.getDuration_election_date ();
          }

          // niscode
          //
          if (i.getNiscode ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "niscode",
                e));

            a << *i.getNiscode ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVContest& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // PrincipalsSelected
          //
          for (PVContest::PrincipalsSelectedConstIterator
               b (i.getPrincipalsSelected ().begin ()), n (i.getPrincipalsSelected ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PrincipalsSelected",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }

          // StandInSelected
          //
          for (PVContest::StandInSelectedConstIterator
               b (i.getStandInSelected ().begin ()), n (i.getStandInSelected ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "StandInSelected",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }

          // pv-report-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "pv-report-name",
                e));

            a << i.getPv_report_name ();
          }

          // pv-party-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "pv-party-name",
                e));

            a << i.getPv_party_name ();
          }

          // null-info
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "null-info",
                e));

            a << i.getNull_info ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVVote& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Contest
          //
          for (PVVote::ContestConstIterator
               b (i.getContest ().begin ()), n (i.getContest ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Contest",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }

          // logical-voter-group
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "logical-voter-group",
                e));

            a << i.getLogical_voter_group ();
          }

          // vote-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "vote-code",
                e));

            a << i.getVote_code ();
          }

          // voting-device-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "voting-device-code",
                e));

            a << i.getVoting_device_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVCandidate& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // info
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "info",
                e));

            a << i.getInfo ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVVotes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Vote
          //
          for (PVVotes::VoteConstIterator
               b (i.getVote ().begin ()), n (i.getVote ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Vote",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }

          // total-votes
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "total-votes",
                e));

            a << i.getTotal_votes ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const RegionLevel& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // category-level
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "category-level",
                e));

            a << i.getCategory_level ();
          }

          // category
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "category",
                e));

            a << i.getCategory ();
          }

          // name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name",
                e));

            a << i.getName ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const PVForm& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // InfoElection
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "InfoElection",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getInfoElection ();
          }

          // Pollworkers
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Pollworkers",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getPollworkers ();
          }

          // Statistics
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Statistics",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getStatistics ();
          }

          // VoteStatistics
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VoteStatistics",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getVoteStatistics ();
          }

          // ActivatedCardStatistics
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivatedCardStatistics",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivatedCardStatistics ();
          }

          // AssistedActivations
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AssistedActivations",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getAssistedActivations ();
          }

          // VotingDisabledInformation
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingDisabledInformation",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getVotingDisabledInformation ();
          }

          // IncidentReports
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IncidentReports",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getIncidentReports ();
          }

          // CloseElectionNotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CloseElectionNotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getCloseElectionNotes ();
          }

          // ReferenceVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ReferenceVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getReferenceVotes ();
          }

          // HashOfTheResults
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "HashOfTheResults",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getHashOfTheResults ();
          }

          // IDCardMembers
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "IDCardMembers",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getIDCardMembers ();
          }

          // PoliceNotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PoliceNotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getPoliceNotes ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

