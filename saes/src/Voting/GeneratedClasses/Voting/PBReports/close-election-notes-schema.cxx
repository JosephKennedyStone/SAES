// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "close-election-notes-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // CloseElectionNotes
        // 

        const CloseElectionNotes::CloseNotesType& CloseElectionNotes::
        getCloseNotes () const
        {
          return this->CloseNotes_.get ();
        }

        CloseElectionNotes::CloseNotesType& CloseElectionNotes::
        getCloseNotes ()
        {
          return this->CloseNotes_.get ();
        }

        void CloseElectionNotes::
        setCloseNotes (const CloseNotesType& x)
        {
          this->CloseNotes_.set (x);
        }

        void CloseElectionNotes::
        setCloseNotes (::std::auto_ptr< CloseNotesType > x)
        {
          this->CloseNotes_.set (x);
        }


        // CloseNotes
        // 

        const CloseNotes::CloseNoteSequence& CloseNotes::
        getCloseNote () const
        {
          return this->CloseNote_;
        }

        CloseNotes::CloseNoteSequence& CloseNotes::
        getCloseNote ()
        {
          return this->CloseNote_;
        }

        void CloseNotes::
        setCloseNote (const CloseNoteSequence& s)
        {
          this->CloseNote_ = s;
        }


        // CloseNote
        // 

        const CloseNote::ContentType& CloseNote::
        getContent () const
        {
          return this->Content_.get ();
        }

        CloseNote::ContentType& CloseNote::
        getContent ()
        {
          return this->Content_.get ();
        }

        void CloseNote::
        setContent (const ContentType& x)
        {
          this->Content_.set (x);
        }

        void CloseNote::
        setContent (::std::auto_ptr< ContentType > x)
        {
          this->Content_.set (x);
        }

        const CloseNote::Writer_nameType& CloseNote::
        getWriter_name () const
        {
          return this->writer_name_.get ();
        }

        CloseNote::Writer_nameType& CloseNote::
        getWriter_name ()
        {
          return this->writer_name_.get ();
        }

        void CloseNote::
        setWriter_name (const Writer_nameType& x)
        {
          this->writer_name_.set (x);
        }

        void CloseNote::
        setWriter_name (::std::auto_ptr< Writer_nameType > x)
        {
          this->writer_name_.set (x);
        }

        const CloseNote::President_noteType& CloseNote::
        getPresident_note () const
        {
          return this->president_note_.get ();
        }

        CloseNote::President_noteType& CloseNote::
        getPresident_note ()
        {
          return this->president_note_.get ();
        }

        void CloseNote::
        setPresident_note (const President_noteType& x)
        {
          this->president_note_.set (x);
        }

        const CloseNote::Custom_codeType& CloseNote::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        CloseNote::Custom_codeType& CloseNote::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void CloseNote::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void CloseNote::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const CloseNote::Create_dateType& CloseNote::
        getCreate_date () const
        {
          return this->create_date_.get ();
        }

        CloseNote::Create_dateType& CloseNote::
        getCreate_date ()
        {
          return this->create_date_.get ();
        }

        void CloseNote::
        setCreate_date (const Create_dateType& x)
        {
          this->create_date_.set (x);
        }

        void CloseNote::
        setCreate_date (::std::auto_ptr< Create_dateType > x)
        {
          this->create_date_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // CloseElectionNotes
        //

        CloseElectionNotes::
        CloseElectionNotes ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CloseNotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseElectionNotes::
        CloseElectionNotes (const CloseNotesType& CloseNotes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CloseNotes_ (CloseNotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseElectionNotes::
        CloseElectionNotes (::std::auto_ptr< CloseNotesType >& CloseNotes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CloseNotes_ (CloseNotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseElectionNotes::
        CloseElectionNotes (const CloseElectionNotes& x,
                            ::Smartmatic::SAES::Voting::PBReports::Flags f,
                            ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          CloseNotes_ (x.CloseNotes_, f, this)
        {
        }

        CloseElectionNotes::
        CloseElectionNotes (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::PBReports::Flags f,
                            ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          CloseNotes_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void CloseElectionNotes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CloseNotes
            //
            if (n.name () == "CloseNotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CloseNotesType > r (
                CloseNotesTraits::create (i, f, this));

              if (!CloseNotes_.present ())
              {
                this->CloseNotes_.set (r);
                continue;
              }
            }

            break;
          }

          if (!CloseNotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "CloseNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        CloseElectionNotes* CloseElectionNotes::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class CloseElectionNotes (*this, f, c);
        }

        CloseElectionNotes::
        ~CloseElectionNotes ()
        {
        }

        bool
        operator== (const CloseElectionNotes& x, const CloseElectionNotes& y)
        {
          if (!(x.getCloseNotes () == y.getCloseNotes ()))
            return false;

          return true;
        }

        bool
        operator!= (const CloseElectionNotes& x, const CloseElectionNotes& y)
        {
          return !(x == y);
        }

        // CloseNotes
        //

        CloseNotes::
        CloseNotes ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          CloseNote_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseNotes::
        CloseNotes (const CloseNotes& x,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          CloseNote_ (x.CloseNote_, f, this)
        {
        }

        CloseNotes::
        CloseNotes (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          CloseNote_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void CloseNotes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // CloseNote
            //
            if (n.name () == "CloseNote" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< CloseNoteType > r (
                CloseNoteTraits::create (i, f, this));

              this->CloseNote_.push_back (r);
              continue;
            }

            break;
          }
        }

        CloseNotes* CloseNotes::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class CloseNotes (*this, f, c);
        }

        CloseNotes::
        ~CloseNotes ()
        {
        }

        bool
        operator== (const CloseNotes& x, const CloseNotes& y)
        {
          if (!(x.getCloseNote () == y.getCloseNote ()))
            return false;

          return true;
        }

        bool
        operator!= (const CloseNotes& x, const CloseNotes& y)
        {
          return !(x == y);
        }

        // CloseNote
        //

        CloseNote::
        CloseNote ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Content_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          writer_name_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          president_note_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseNote::
        CloseNote (const ContentType& Content,
                   const Writer_nameType& writer_name,
                   const President_noteType& president_note,
                   const Custom_codeType& custom_code,
                   const Create_dateType& create_date)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Content_ (Content, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          writer_name_ (writer_name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          president_note_ (president_note, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseNote::
        CloseNote (const ContentType& Content,
                   ::std::auto_ptr< Writer_nameType >& writer_name,
                   const President_noteType& president_note,
                   const Custom_codeType& custom_code,
                   const Create_dateType& create_date)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Content_ (Content, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          writer_name_ (writer_name, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          president_note_ (president_note, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        CloseNote::
        CloseNote (const CloseNote& x,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Content_ (x.Content_, f, this),
          writer_name_ (x.writer_name_, f, this),
          president_note_ (x.president_note_, f, this),
          custom_code_ (x.custom_code_, f, this),
          create_date_ (x.create_date_, f, this)
        {
        }

        CloseNote::
        CloseNote (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Content_ (f, this),
          writer_name_ (f, this),
          president_note_ (f, this),
          custom_code_ (f, this),
          create_date_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void CloseNote::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Content
            //
            if (n.name () == "Content" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ContentType > r (
                ContentTraits::create (i, f, this));

              if (!Content_.present ())
              {
                this->Content_.set (r);
                continue;
              }
            }

            // writer-name
            //
            if (n.name () == "writer-name" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< Writer_nameType > r (
                Writer_nameTraits::create (i, f, this));

              if (!writer_name_.present ())
              {
                this->writer_name_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Content_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Content",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!writer_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "writer-name",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "president-note" && n.namespace_ ().empty ())
            {
              this->president_note_.set (President_noteTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "create-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Create_dateType > r (
                Create_dateTraits::create (i, f, this));

              this->create_date_.set (r);
              continue;
            }
          }

          if (!president_note_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "president-note",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!create_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "create-date",
              "");
          }
        }

        CloseNote* CloseNote::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class CloseNote (*this, f, c);
        }

        CloseNote::
        ~CloseNote ()
        {
        }

        bool
        operator== (const CloseNote& x, const CloseNote& y)
        {
          if (!(x.getContent () == y.getContent ()))
            return false;

          if (!(x.getWriter_name () == y.getWriter_name ()))
            return false;

          if (!(x.getPresident_note () == y.getPresident_note ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getCreate_date () == y.getCreate_date ()))
            return false;

          return true;
        }

        bool
        operator!= (const CloseNote& x, const CloseNote& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (const ::std::string& u,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (const ::std::string& u,
                                 ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::std::istream& is,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::std::istream& is,
                                 ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::std::istream& is,
                                 const ::std::string& sid,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::std::istream& is,
                                 const ::std::string& sid,
                                 ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::xercesc::InputSource& i,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::xercesc::InputSource& i,
                                 ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
            ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (const ::xercesc::DOMDocument& d,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
              ::Smartmatic::SAES::Voting::PBReports::parseCloseElectionNotes (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "CloseElectionNotes" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CloseElectionNotes",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes >
        parseCloseElectionNotes (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                 const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "CloseElectionNotes" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "CloseElectionNotes",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeCloseElectionNotes (::std::ostream& o,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeCloseElectionNotes (::std::ostream& o,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCloseElectionNotes (::std::ostream& o,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     ::xercesc::DOMErrorHandler& h,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCloseElectionNotes (::xercesc::XMLFormatTarget& t,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeCloseElectionNotes (::xercesc::XMLFormatTarget& t,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCloseElectionNotes (::xercesc::XMLFormatTarget& t,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     ::xercesc::DOMErrorHandler& h,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     const ::std::string& e,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCloseElectionNotes (::xercesc::DOMDocument& d,
                                     const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "CloseElectionNotes" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "CloseElectionNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeCloseElectionNotes (const ::Smartmatic::SAES::Voting::PBReports::CloseElectionNotes& s,
                                     const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                     ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "CloseElectionNotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeCloseElectionNotes (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const CloseElectionNotes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // CloseNotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CloseNotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getCloseNotes ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const CloseNotes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // CloseNote
          //
          for (CloseNotes::CloseNoteConstIterator
               b (i.getCloseNote ().begin ()), n (i.getCloseNote ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "CloseNote",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const CloseNote& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Content
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Content",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getContent ();
          }

          // writer-name
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "writer-name",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getWriter_name ();
          }

          // president-note
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "president-note",
                e));

            a << i.getPresident_note ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // create-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "create-date",
                e));

            a << i.getCreate_date ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

