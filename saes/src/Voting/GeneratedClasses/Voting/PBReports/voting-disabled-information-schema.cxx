// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "voting-disabled-information-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // VotingDisabled
        // 

        const VotingDisabled::VoterType& VotingDisabled::
        getVoter () const
        {
          return this->Voter_.get ();
        }

        VotingDisabled::VoterType& VotingDisabled::
        getVoter ()
        {
          return this->Voter_.get ();
        }

        void VotingDisabled::
        setVoter (const VoterType& x)
        {
          this->Voter_.set (x);
        }

        void VotingDisabled::
        setVoter (::std::auto_ptr< VoterType > x)
        {
          this->Voter_.set (x);
        }

        const VotingDisabled::HelperType& VotingDisabled::
        getHelper () const
        {
          return this->Helper_.get ();
        }

        VotingDisabled::HelperType& VotingDisabled::
        getHelper ()
        {
          return this->Helper_.get ();
        }

        void VotingDisabled::
        setHelper (const HelperType& x)
        {
          this->Helper_.set (x);
        }

        void VotingDisabled::
        setHelper (::std::auto_ptr< HelperType > x)
        {
          this->Helper_.set (x);
        }

        const VotingDisabled::Custom_codeType& VotingDisabled::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        VotingDisabled::Custom_codeType& VotingDisabled::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void VotingDisabled::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void VotingDisabled::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const VotingDisabled::Create_dateType& VotingDisabled::
        getCreate_date () const
        {
          return this->create_date_.get ();
        }

        VotingDisabled::Create_dateType& VotingDisabled::
        getCreate_date ()
        {
          return this->create_date_.get ();
        }

        void VotingDisabled::
        setCreate_date (const Create_dateType& x)
        {
          this->create_date_.set (x);
        }

        void VotingDisabled::
        setCreate_date (::std::auto_ptr< Create_dateType > x)
        {
          this->create_date_.set (x);
        }

        const VotingDisabled::TypeType& VotingDisabled::
        getType () const
        {
          return this->type_.get ();
        }

        VotingDisabled::TypeType& VotingDisabled::
        getType ()
        {
          return this->type_.get ();
        }

        void VotingDisabled::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void VotingDisabled::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }

        const VotingDisabled::DisabledType& VotingDisabled::
        getDisabled () const
        {
          return this->disabled_.get ();
        }

        VotingDisabled::DisabledType& VotingDisabled::
        getDisabled ()
        {
          return this->disabled_.get ();
        }

        void VotingDisabled::
        setDisabled (const DisabledType& x)
        {
          this->disabled_.set (x);
        }

        void VotingDisabled::
        setDisabled (::std::auto_ptr< DisabledType > x)
        {
          this->disabled_.set (x);
        }

        const VotingDisabled::ApprovedType& VotingDisabled::
        getApproved () const
        {
          return this->approved_.get ();
        }

        VotingDisabled::ApprovedType& VotingDisabled::
        getApproved ()
        {
          return this->approved_.get ();
        }

        void VotingDisabled::
        setApproved (const ApprovedType& x)
        {
          this->approved_.set (x);
        }

        void VotingDisabled::
        setApproved (::std::auto_ptr< ApprovedType > x)
        {
          this->approved_.set (x);
        }

        const VotingDisabled::DescriptionType& VotingDisabled::
        getDescription () const
        {
          return this->description_.get ();
        }

        VotingDisabled::DescriptionType& VotingDisabled::
        getDescription ()
        {
          return this->description_.get ();
        }

        void VotingDisabled::
        setDescription (const DescriptionType& x)
        {
          this->description_.set (x);
        }

        void VotingDisabled::
        setDescription (::std::auto_ptr< DescriptionType > x)
        {
          this->description_.set (x);
        }


        // VotingDisabledType
        // 

        VotingDisabledType::
        VotingDisabledType ()
        : ::Smartmatic::SAES::Voting::PBReports::String ()
        {
        }

        VotingDisabledType::
        VotingDisabledType (Value v)
        : ::Smartmatic::SAES::Voting::PBReports::String (_xsd_VotingDisabledType_literals_[v])
        {
        }

        VotingDisabledType::
        VotingDisabledType (const char* v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        VotingDisabledType::
        VotingDisabledType (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        VotingDisabledType::
        VotingDisabledType (const ::Smartmatic::SAES::Voting::PBReports::String& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        VotingDisabledType::
        VotingDisabledType (const VotingDisabledType& v,
                            ::Smartmatic::SAES::Voting::PBReports::Flags f,
                            ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (v, f, c)
        {
        }

        VotingDisabledType& VotingDisabledType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::PBReports::String& > (*this) = 
          ::Smartmatic::SAES::Voting::PBReports::String (_xsd_VotingDisabledType_literals_[v]);

          return *this;
        }


        // VotingDisabledInformation
        // 

        const VotingDisabledInformation::VotingDisabledSequence& VotingDisabledInformation::
        getVotingDisabled () const
        {
          return this->VotingDisabled_;
        }

        VotingDisabledInformation::VotingDisabledSequence& VotingDisabledInformation::
        getVotingDisabled ()
        {
          return this->VotingDisabled_;
        }

        void VotingDisabledInformation::
        setVotingDisabled (const VotingDisabledSequence& s)
        {
          this->VotingDisabled_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // VotingDisabled
        //

        VotingDisabled::
        VotingDisabled ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Voter_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Helper_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          disabled_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          approved_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          description_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VotingDisabled::
        VotingDisabled (const VoterType& Voter,
                        const HelperType& Helper,
                        const Custom_codeType& custom_code,
                        const Create_dateType& create_date,
                        const TypeType& type,
                        const DisabledType& disabled,
                        const ApprovedType& approved,
                        const DescriptionType& description)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Voter_ (Voter, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Helper_ (Helper, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          type_ (type, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          disabled_ (disabled, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          approved_ (approved, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          description_ (description, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VotingDisabled::
        VotingDisabled (::std::auto_ptr< VoterType >& Voter,
                        ::std::auto_ptr< HelperType >& Helper,
                        const Custom_codeType& custom_code,
                        const Create_dateType& create_date,
                        const TypeType& type,
                        const DisabledType& disabled,
                        const ApprovedType& approved,
                        const DescriptionType& description)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Voter_ (Voter, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Helper_ (Helper, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          type_ (type, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          disabled_ (disabled, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          approved_ (approved, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          description_ (description, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VotingDisabled::
        VotingDisabled (const VotingDisabled& x,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Voter_ (x.Voter_, f, this),
          Helper_ (x.Helper_, f, this),
          custom_code_ (x.custom_code_, f, this),
          create_date_ (x.create_date_, f, this),
          type_ (x.type_, f, this),
          disabled_ (x.disabled_, f, this),
          approved_ (x.approved_, f, this),
          description_ (x.description_, f, this)
        {
        }

        VotingDisabled::
        VotingDisabled (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Voter_ (f, this),
          Helper_ (f, this),
          custom_code_ (f, this),
          create_date_ (f, this),
          type_ (f, this),
          disabled_ (f, this),
          approved_ (f, this),
          description_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void VotingDisabled::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Voter
            //
            if (n.name () == "Voter" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VoterType > r (
                VoterTraits::create (i, f, this));

              if (!Voter_.present ())
              {
                this->Voter_.set (r);
                continue;
              }
            }

            // Helper
            //
            if (n.name () == "Helper" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< HelperType > r (
                HelperTraits::create (i, f, this));

              if (!Helper_.present ())
              {
                this->Helper_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Voter_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Voter",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!Helper_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Helper",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "create-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Create_dateType > r (
                Create_dateTraits::create (i, f, this));

              this->create_date_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }

            if (n.name () == "disabled" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< DisabledType > r (
                DisabledTraits::create (i, f, this));

              this->disabled_.set (r);
              continue;
            }

            if (n.name () == "approved" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ApprovedType > r (
                ApprovedTraits::create (i, f, this));

              this->approved_.set (r);
              continue;
            }

            if (n.name () == "description" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< DescriptionType > r (
                DescriptionTraits::create (i, f, this));

              this->description_.set (r);
              continue;
            }
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!create_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "create-date",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }

          if (!disabled_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "disabled",
              "");
          }

          if (!approved_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "approved",
              "");
          }

          if (!description_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description",
              "");
          }
        }

        VotingDisabled* VotingDisabled::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class VotingDisabled (*this, f, c);
        }

        VotingDisabled::
        ~VotingDisabled ()
        {
        }

        bool
        operator== (const VotingDisabled& x, const VotingDisabled& y)
        {
          if (!(x.getVoter () == y.getVoter ()))
            return false;

          if (!(x.getHelper () == y.getHelper ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getCreate_date () == y.getCreate_date ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          if (!(x.getDisabled () == y.getDisabled ()))
            return false;

          if (!(x.getApproved () == y.getApproved ()))
            return false;

          if (!(x.getDescription () == y.getDescription ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotingDisabled& x, const VotingDisabled& y)
        {
          return !(x == y);
        }

        // VotingDisabledType
        //

        VotingDisabledType::
        VotingDisabledType (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::PBReports::Flags f,
                            ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (e, f, c)
        {
          _xsd_VotingDisabledType_convert ();
        }

        VotingDisabledType::
        VotingDisabledType (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::Voting::PBReports::Flags f,
                            ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (a, f, c)
        {
          _xsd_VotingDisabledType_convert ();
        }

        VotingDisabledType::
        VotingDisabledType (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::Voting::PBReports::Flags f,
                            ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (s, e, f, c)
        {
          _xsd_VotingDisabledType_convert ();
        }

        VotingDisabledType* VotingDisabledType::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class VotingDisabledType (*this, f, c);
        }

        VotingDisabledType::Value VotingDisabledType::
        _xsd_VotingDisabledType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VotingDisabledType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_VotingDisabledType_indexes_,
                            _xsd_VotingDisabledType_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_VotingDisabledType_indexes_ + 2 || _xsd_VotingDisabledType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const VotingDisabledType::
        _xsd_VotingDisabledType_literals_[2] =
        {
          "ASSISTED",
          "ACCOMPANIED"
        };

        const VotingDisabledType::Value VotingDisabledType::
        _xsd_VotingDisabledType_indexes_[2] =
        {
          ::Smartmatic::SAES::Voting::PBReports::VotingDisabledType::VOTING_DISABLED_ACCOMPANIED,
          ::Smartmatic::SAES::Voting::PBReports::VotingDisabledType::VOTING_DISABLED_ASSISTED
        };

        // VotingDisabledInformation
        //

        VotingDisabledInformation::
        VotingDisabledInformation ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          VotingDisabled_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VotingDisabledInformation::
        VotingDisabledInformation (const VotingDisabledInformation& x,
                                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          VotingDisabled_ (x.VotingDisabled_, f, this)
        {
        }

        VotingDisabledInformation::
        VotingDisabledInformation (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          VotingDisabled_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void VotingDisabledInformation::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // VotingDisabled
            //
            if (n.name () == "VotingDisabled" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VotingDisabledType > r (
                VotingDisabledTraits::create (i, f, this));

              this->VotingDisabled_.push_back (r);
              continue;
            }

            break;
          }
        }

        VotingDisabledInformation* VotingDisabledInformation::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class VotingDisabledInformation (*this, f, c);
        }

        VotingDisabledInformation::
        ~VotingDisabledInformation ()
        {
        }

        bool
        operator== (const VotingDisabledInformation& x, const VotingDisabledInformation& y)
        {
          if (!(x.getVotingDisabled () == y.getVotingDisabled ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotingDisabledInformation& x, const VotingDisabledInformation& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::std::string& u,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::std::string& u,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::std::string& u,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        const ::std::string& sid,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        const ::std::string& sid,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::std::istream& is,
                                        const ::std::string& sid,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::xercesc::InputSource& i,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::xercesc::InputSource& i,
                                        ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::xercesc::InputSource& i,
                                        ::xercesc::DOMErrorHandler& h,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (const ::xercesc::DOMDocument& d,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
              ::Smartmatic::SAES::Voting::PBReports::parseVotingDisabledInformation (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VotingDisabledInformation" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VotingDisabledInformation",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation >
        parseVotingDisabledInformation (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                        const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "VotingDisabledInformation" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VotingDisabledInformation",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeVotingDisabledInformation (::std::ostream& o,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVotingDisabledInformation (::std::ostream& o,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingDisabledInformation (::std::ostream& o,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            ::xercesc::DOMErrorHandler& h,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingDisabledInformation (::xercesc::XMLFormatTarget& t,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVotingDisabledInformation (::xercesc::XMLFormatTarget& t,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingDisabledInformation (::xercesc::XMLFormatTarget& t,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            ::xercesc::DOMErrorHandler& h,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            const ::std::string& e,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVotingDisabledInformation (::xercesc::DOMDocument& d,
                                            const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VotingDisabledInformation" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "VotingDisabledInformation",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVotingDisabledInformation (const ::Smartmatic::SAES::Voting::PBReports::VotingDisabledInformation& s,
                                            const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                            ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "VotingDisabledInformation",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeVotingDisabledInformation (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingDisabled& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Voter
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Voter",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getVoter ();
          }

          // Helper
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Helper",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getHelper ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // create-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "create-date",
                e));

            a << i.getCreate_date ();
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.getType ();
          }

          // disabled
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "disabled",
                e));

            a << i.getDisabled ();
          }

          // approved
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "approved",
                e));

            a << i.getApproved ();
          }

          // description
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description",
                e));

            a << i.getDescription ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingDisabledType& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const VotingDisabledType& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream& l,
                    const VotingDisabledType& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotingDisabledInformation& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // VotingDisabled
          //
          for (VotingDisabledInformation::VotingDisabledConstIterator
               b (i.getVotingDisabled ().begin ()), n (i.getVotingDisabled ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotingDisabled",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

