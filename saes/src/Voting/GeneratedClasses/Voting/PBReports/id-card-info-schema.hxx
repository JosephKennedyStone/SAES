// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from id-card-info-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_ID_CARD_INFO_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_ID_CARD_INFO_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace PBReports
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__PBREPORTS
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__PBREPORTS
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        class IDCardInfoType;
        class IDCardInfo;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/PBReports
       * schema namespace.
       */
      namespace PBReports
      {
        /**
         * @brief Enumeration class corresponding to the %IDCardInfoType
         * schema type.
         */
        class IDCardInfoType: public ::Smartmatic::SAES::Voting::PBReports::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            IDCARDINFO_INSTALLPM,
            IDCARDINFO_INSTALLVM,
            IDCARDINFO_OPENELECTION,
            IDCARDINFO_CLOSEVOTING,
            IDCARDINFO_CLOSEELECTION
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          IDCardInfoType ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          IDCardInfoType (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          IDCardInfoType (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          IDCardInfoType (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          IDCardInfoType (const ::Smartmatic::SAES::Voting::PBReports::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          IDCardInfoType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          IDCardInfoType (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          IDCardInfoType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          IDCardInfoType (const IDCardInfoType& x,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual IDCardInfoType*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          IDCardInfoType&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_IDCardInfoType_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_IDCardInfoType_convert () const;

          public:
          static const char* const _xsd_IDCardInfoType_literals_[5];
          static const Value _xsd_IDCardInfoType_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %IDCardInfo schema type.
         *
         * @nosubgrouping
         */
        class IDCardInfo: public ::Smartmatic::SAES::Voting::PBReports::Type
        {
          public:
          /**
           * @name FirstName
           *
           * @brief Accessor and modifier functions for the %FirstName
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String FirstNameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FirstNameType, char > FirstNameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const FirstNameType&
          getFirstName () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          FirstNameType&
          getFirstName ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setFirstName (const FirstNameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFirstName (::std::auto_ptr< FirstNameType > p);

          //@}

          /**
           * @name Surname
           *
           * @brief Accessor and modifier functions for the %Surname
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String SurnameType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SurnameType, char > SurnameTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const SurnameType&
          getSurname () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          SurnameType&
          getSurname ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSurname (const SurnameType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSurname (::std::auto_ptr< SurnameType > p);

          //@}

          /**
           * @name Gender
           *
           * @brief Accessor and modifier functions for the %Gender
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String GenderType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< GenderType > GenderOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< GenderType, char > GenderTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const GenderOptional&
          getGender () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          GenderOptional&
          getGender ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setGender (const GenderType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setGender (const GenderOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setGender (::std::auto_ptr< GenderType > p);

          //@}

          /**
           * @name DateOfBirth
           *
           * @brief Accessor and modifier functions for the %DateOfBirth
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String DateOfBirthType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< DateOfBirthType > DateOfBirthOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DateOfBirthType, char > DateOfBirthTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const DateOfBirthOptional&
          getDateOfBirth () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          DateOfBirthOptional&
          getDateOfBirth ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDateOfBirth (const DateOfBirthType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setDateOfBirth (const DateOfBirthOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setDateOfBirth (::std::auto_ptr< DateOfBirthType > p);

          //@}

          /**
           * @name LocationOfBirth
           *
           * @brief Accessor and modifier functions for the %LocationOfBirth
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String LocationOfBirthType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LocationOfBirthType > LocationOfBirthOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LocationOfBirthType, char > LocationOfBirthTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LocationOfBirthOptional&
          getLocationOfBirth () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LocationOfBirthOptional&
          getLocationOfBirth ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLocationOfBirth (const LocationOfBirthType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setLocationOfBirth (const LocationOfBirthOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setLocationOfBirth (::std::auto_ptr< LocationOfBirthType > p);

          //@}

          /**
           * @name Nationality
           *
           * @brief Accessor and modifier functions for the %Nationality
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String NationalityType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NationalityType > NationalityOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NationalityType, char > NationalityTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NationalityOptional&
          getNationality () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NationalityOptional&
          getNationality ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setNationality (const NationalityType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setNationality (const NationalityOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setNationality (::std::auto_ptr< NationalityType > p);

          //@}

          /**
           * @name NationalNumber
           *
           * @brief Accessor and modifier functions for the %NationalNumber
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String NationalNumberType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NationalNumberType > NationalNumberOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< NationalNumberType, char > NationalNumberTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NationalNumberOptional&
          getNationalNumber () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          NationalNumberOptional&
          getNationalNumber ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setNationalNumber (const NationalNumberType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setNationalNumber (const NationalNumberOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setNationalNumber (::std::auto_ptr< NationalNumberType > p);

          //@}

          /**
           * @name SpecialOrganization
           *
           * @brief Accessor and modifier functions for the %SpecialOrganization
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String SpecialOrganizationType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SpecialOrganizationType > SpecialOrganizationOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SpecialOrganizationType, char > SpecialOrganizationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SpecialOrganizationOptional&
          getSpecialOrganization () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SpecialOrganizationOptional&
          getSpecialOrganization ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSpecialOrganization (const SpecialOrganizationType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setSpecialOrganization (const SpecialOrganizationOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setSpecialOrganization (::std::auto_ptr< SpecialOrganizationType > p);

          //@}

          /**
           * @name MemberOfFamily
           *
           * @brief Accessor and modifier functions for the %MemberOfFamily
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String MemberOfFamilyType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MemberOfFamilyType > MemberOfFamilyOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MemberOfFamilyType, char > MemberOfFamilyTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MemberOfFamilyOptional&
          getMemberOfFamily () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MemberOfFamilyOptional&
          getMemberOfFamily ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMemberOfFamily (const MemberOfFamilyType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setMemberOfFamily (const MemberOfFamilyOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setMemberOfFamily (::std::auto_ptr< MemberOfFamilyType > p);

          //@}

          /**
           * @name AddressVersion
           *
           * @brief Accessor and modifier functions for the %AddressVersion
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String AddressVersionType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AddressVersionType > AddressVersionOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< AddressVersionType, char > AddressVersionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AddressVersionOptional&
          getAddressVersion () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          AddressVersionOptional&
          getAddressVersion ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAddressVersion (const AddressVersionType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setAddressVersion (const AddressVersionOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setAddressVersion (::std::auto_ptr< AddressVersionType > p);

          //@}

          /**
           * @name Street
           *
           * @brief Accessor and modifier functions for the %Street
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String StreetType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< StreetType > StreetOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< StreetType, char > StreetTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const StreetOptional&
          getStreet () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          StreetOptional&
          getStreet ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStreet (const StreetType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setStreet (const StreetOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setStreet (::std::auto_ptr< StreetType > p);

          //@}

          /**
           * @name ZipCode
           *
           * @brief Accessor and modifier functions for the %ZipCode
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String ZipCodeType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ZipCodeType > ZipCodeOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ZipCodeType, char > ZipCodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ZipCodeOptional&
          getZipCode () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ZipCodeOptional&
          getZipCode ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setZipCode (const ZipCodeType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setZipCode (const ZipCodeOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setZipCode (::std::auto_ptr< ZipCodeType > p);

          //@}

          /**
           * @name Municipality
           *
           * @brief Accessor and modifier functions for the %Municipality
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String MunicipalityType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< MunicipalityType > MunicipalityOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< MunicipalityType, char > MunicipalityTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const MunicipalityOptional&
          getMunicipality () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          MunicipalityOptional&
          getMunicipality ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setMunicipality (const MunicipalityType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setMunicipality (const MunicipalityOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setMunicipality (::std::auto_ptr< MunicipalityType > p);

          //@}

          /**
           * @name Country
           *
           * @brief Accessor and modifier functions for the %Country
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String CountryType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CountryType > CountryOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CountryType, char > CountryTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CountryOptional&
          getCountry () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CountryOptional&
          getCountry ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCountry (const CountryType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setCountry (const CountryOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCountry (::std::auto_ptr< CountryType > p);

          //@}

          /**
           * @name SpecialStatus
           *
           * @brief Accessor and modifier functions for the %SpecialStatus
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::String SpecialStatusType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< SpecialStatusType > SpecialStatusOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< SpecialStatusType, char > SpecialStatusTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const SpecialStatusOptional&
          getSpecialStatus () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          SpecialStatusOptional&
          getSpecialStatus ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setSpecialStatus (const SpecialStatusType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setSpecialStatus (const SpecialStatusOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setSpecialStatus (::std::auto_ptr< SpecialStatusType > p);

          //@}

          /**
           * @name Type
           *
           * @brief Accessor and modifier functions for the %Type
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::PBReports::IDCardInfoType TypeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TypeOptional&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          TypeOptional&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setType (const TypeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          IDCardInfo ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          IDCardInfo (const FirstNameType&,
                      const SurnameType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          IDCardInfo (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                      ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          IDCardInfo (const IDCardInfo& x,
                      ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                      ::Smartmatic::SAES::Voting::PBReports::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual IDCardInfo*
          _clone (::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~IDCardInfo ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::PBReports::Flags);

          protected:
          ::xsd::cxx::tree::one< FirstNameType > FirstName_;
          ::xsd::cxx::tree::one< SurnameType > Surname_;
          GenderOptional Gender_;
          DateOfBirthOptional DateOfBirth_;
          LocationOfBirthOptional LocationOfBirth_;
          NationalityOptional Nationality_;
          NationalNumberOptional NationalNumber_;
          SpecialOrganizationOptional SpecialOrganization_;
          MemberOfFamilyOptional MemberOfFamily_;
          AddressVersionOptional AddressVersion_;
          StreetOptional Street_;
          ZipCodeOptional ZipCode_;
          MunicipalityOptional Municipality_;
          CountryOptional Country_;
          SpecialStatusOptional SpecialStatus_;
          TypeOptional Type_;

          //@endcond
        };

        bool
        operator== (const IDCardInfo&, const IDCardInfo&);

        bool
        operator!= (const IDCardInfo&, const IDCardInfo&);
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        /**
         * @name Parsing functions for the %IDCardInfo document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::std::string& uri,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::std::string& uri,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         const ::std::string& id,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         const ::std::string& id,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::xercesc::InputSource& is,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::xercesc::InputSource& is,
                         ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (const ::xercesc::DOMDocument& d,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IDCardInfo >
        parseIDCardInfo (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f = 0,
                         const ::Smartmatic::SAES::Voting::PBReports::Properties& p = ::Smartmatic::SAES::Voting::PBReports::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        /**
         * @name Serialization functions for the %IDCardInfo document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeIDCardInfo (::std::ostream& os,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeIDCardInfo (::std::ostream& os,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeIDCardInfo (::std::ostream& os,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeIDCardInfo (::xercesc::XMLFormatTarget& ft,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeIDCardInfo (::xercesc::XMLFormatTarget& ft,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& eh,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeIDCardInfo (::xercesc::XMLFormatTarget& ft,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             const ::std::string& e = "UTF-8",
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeIDCardInfo (::xercesc::DOMDocument& d,
                             const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeIDCardInfo (const ::Smartmatic::SAES::Voting::PBReports::IDCardInfo& x, 
                             const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap (),
                             ::Smartmatic::SAES::Voting::PBReports::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const IDCardInfoType&);

        void
        operator<< (::xercesc::DOMAttr&, const IDCardInfoType&);

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream&,
                    const IDCardInfoType&);

        void
        operator<< (::xercesc::DOMElement&, const IDCardInfo&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_ID_CARD_INFO_SCHEMA_HXX
