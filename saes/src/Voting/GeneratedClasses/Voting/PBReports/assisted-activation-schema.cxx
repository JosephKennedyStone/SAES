// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "assisted-activation-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // AssistedActivations
        // 

        const AssistedActivations::ActivationsType& AssistedActivations::
        getActivations () const
        {
          return this->Activations_.get ();
        }

        AssistedActivations::ActivationsType& AssistedActivations::
        getActivations ()
        {
          return this->Activations_.get ();
        }

        void AssistedActivations::
        setActivations (const ActivationsType& x)
        {
          this->Activations_.set (x);
        }

        void AssistedActivations::
        setActivations (::std::auto_ptr< ActivationsType > x)
        {
          this->Activations_.set (x);
        }


        // Activations
        // 

        const Activations::ActivationSequence& Activations::
        getActivation () const
        {
          return this->Activation_;
        }

        Activations::ActivationSequence& Activations::
        getActivation ()
        {
          return this->Activation_;
        }

        void Activations::
        setActivation (const ActivationSequence& s)
        {
          this->Activation_ = s;
        }


        // Activation
        // 

        const Activation::PollworkerType& Activation::
        getPollworker () const
        {
          return this->Pollworker_.get ();
        }

        Activation::PollworkerType& Activation::
        getPollworker ()
        {
          return this->Pollworker_.get ();
        }

        void Activation::
        setPollworker (const PollworkerType& x)
        {
          this->Pollworker_.set (x);
        }

        void Activation::
        setPollworker (::std::auto_ptr< PollworkerType > x)
        {
          this->Pollworker_.set (x);
        }

        const Activation::VoterType& Activation::
        getVoter () const
        {
          return this->Voter_.get ();
        }

        Activation::VoterType& Activation::
        getVoter ()
        {
          return this->Voter_.get ();
        }

        void Activation::
        setVoter (const VoterType& x)
        {
          this->Voter_.set (x);
        }

        void Activation::
        setVoter (::std::auto_ptr< VoterType > x)
        {
          this->Voter_.set (x);
        }

        const Activation::PropossedPersonType& Activation::
        getPropossedPerson () const
        {
          return this->PropossedPerson_.get ();
        }

        Activation::PropossedPersonType& Activation::
        getPropossedPerson ()
        {
          return this->PropossedPerson_.get ();
        }

        void Activation::
        setPropossedPerson (const PropossedPersonType& x)
        {
          this->PropossedPerson_.set (x);
        }

        void Activation::
        setPropossedPerson (::std::auto_ptr< PropossedPersonType > x)
        {
          this->PropossedPerson_.set (x);
        }

        const Activation::ImpugnatorOptional& Activation::
        getImpugnator () const
        {
          return this->Impugnator_;
        }

        Activation::ImpugnatorOptional& Activation::
        getImpugnator ()
        {
          return this->Impugnator_;
        }

        void Activation::
        setImpugnator (const ImpugnatorType& x)
        {
          this->Impugnator_.set (x);
        }

        void Activation::
        setImpugnator (const ImpugnatorOptional& x)
        {
          this->Impugnator_ = x;
        }

        void Activation::
        setImpugnator (::std::auto_ptr< ImpugnatorType > x)
        {
          this->Impugnator_.set (x);
        }

        const Activation::DesignatedPersonOptional& Activation::
        getDesignatedPerson () const
        {
          return this->DesignatedPerson_;
        }

        Activation::DesignatedPersonOptional& Activation::
        getDesignatedPerson ()
        {
          return this->DesignatedPerson_;
        }

        void Activation::
        setDesignatedPerson (const DesignatedPersonType& x)
        {
          this->DesignatedPerson_.set (x);
        }

        void Activation::
        setDesignatedPerson (const DesignatedPersonOptional& x)
        {
          this->DesignatedPerson_ = x;
        }

        void Activation::
        setDesignatedPerson (::std::auto_ptr< DesignatedPersonType > x)
        {
          this->DesignatedPerson_.set (x);
        }

        const Activation::ImpugnationReasonOptional& Activation::
        getImpugnationReason () const
        {
          return this->ImpugnationReason_;
        }

        Activation::ImpugnationReasonOptional& Activation::
        getImpugnationReason ()
        {
          return this->ImpugnationReason_;
        }

        void Activation::
        setImpugnationReason (const ImpugnationReasonType& x)
        {
          this->ImpugnationReason_.set (x);
        }

        void Activation::
        setImpugnationReason (const ImpugnationReasonOptional& x)
        {
          this->ImpugnationReason_ = x;
        }

        void Activation::
        setImpugnationReason (::std::auto_ptr< ImpugnationReasonType > x)
        {
          this->ImpugnationReason_.set (x);
        }

        const Activation::Custom_codeType& Activation::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Activation::Custom_codeType& Activation::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Activation::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Activation::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Activation::WasImpugnedType& Activation::
        getWasImpugned () const
        {
          return this->WasImpugned_.get ();
        }

        Activation::WasImpugnedType& Activation::
        getWasImpugned ()
        {
          return this->WasImpugned_.get ();
        }

        void Activation::
        setWasImpugned (const WasImpugnedType& x)
        {
          this->WasImpugned_.set (x);
        }

        const Activation::ActivationModeType& Activation::
        getActivationMode () const
        {
          return this->activationMode_.get ();
        }

        Activation::ActivationModeType& Activation::
        getActivationMode ()
        {
          return this->activationMode_.get ();
        }

        void Activation::
        setActivationMode (const ActivationModeType& x)
        {
          this->activationMode_.set (x);
        }

        void Activation::
        setActivationMode (::std::auto_ptr< ActivationModeType > x)
        {
          this->activationMode_.set (x);
        }


        // ActivationMode
        // 

        ActivationMode::
        ActivationMode ()
        : ::Smartmatic::SAES::Voting::PBReports::String ()
        {
        }

        ActivationMode::
        ActivationMode (Value v)
        : ::Smartmatic::SAES::Voting::PBReports::String (_xsd_ActivationMode_literals_[v])
        {
        }

        ActivationMode::
        ActivationMode (const char* v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        ActivationMode::
        ActivationMode (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        ActivationMode::
        ActivationMode (const ::Smartmatic::SAES::Voting::PBReports::String& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        ActivationMode::
        ActivationMode (const ActivationMode& v,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (v, f, c)
        {
        }

        ActivationMode& ActivationMode::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::PBReports::String& > (*this) = 
          ::Smartmatic::SAES::Voting::PBReports::String (_xsd_ActivationMode_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // AssistedActivations
        //

        AssistedActivations::
        AssistedActivations ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Activations_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        AssistedActivations::
        AssistedActivations (const ActivationsType& Activations)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Activations_ (Activations, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        AssistedActivations::
        AssistedActivations (::std::auto_ptr< ActivationsType >& Activations)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Activations_ (Activations, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        AssistedActivations::
        AssistedActivations (const AssistedActivations& x,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Activations_ (x.Activations_, f, this)
        {
        }

        AssistedActivations::
        AssistedActivations (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Activations_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void AssistedActivations::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Activations
            //
            if (n.name () == "Activations" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivationsType > r (
                ActivationsTraits::create (i, f, this));

              if (!Activations_.present ())
              {
                this->Activations_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Activations_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Activations",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        AssistedActivations* AssistedActivations::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class AssistedActivations (*this, f, c);
        }

        AssistedActivations::
        ~AssistedActivations ()
        {
        }

        bool
        operator== (const AssistedActivations& x, const AssistedActivations& y)
        {
          if (!(x.getActivations () == y.getActivations ()))
            return false;

          return true;
        }

        bool
        operator!= (const AssistedActivations& x, const AssistedActivations& y)
        {
          return !(x == y);
        }

        // Activations
        //

        Activations::
        Activations ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Activation_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Activations::
        Activations (const Activations& x,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Activation_ (x.Activation_, f, this)
        {
        }

        Activations::
        Activations (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Activation_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Activations::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Activation
            //
            if (n.name () == "Activation" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivationType > r (
                ActivationTraits::create (i, f, this));

              this->Activation_.push_back (r);
              continue;
            }

            break;
          }
        }

        Activations* Activations::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Activations (*this, f, c);
        }

        Activations::
        ~Activations ()
        {
        }

        bool
        operator== (const Activations& x, const Activations& y)
        {
          if (!(x.getActivation () == y.getActivation ()))
            return false;

          return true;
        }

        bool
        operator!= (const Activations& x, const Activations& y)
        {
          return !(x == y);
        }

        // Activation
        //

        Activation::
        Activation ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Pollworker_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Voter_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PropossedPerson_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Impugnator_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          DesignatedPerson_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ImpugnationReason_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          WasImpugned_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          activationMode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Activation::
        Activation (const PollworkerType& Pollworker,
                    const VoterType& Voter,
                    const PropossedPersonType& PropossedPerson,
                    const Custom_codeType& custom_code,
                    const WasImpugnedType& WasImpugned,
                    const ActivationModeType& activationMode)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Pollworker_ (Pollworker, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Voter_ (Voter, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PropossedPerson_ (PropossedPerson, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Impugnator_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          DesignatedPerson_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ImpugnationReason_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          WasImpugned_ (WasImpugned, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          activationMode_ (activationMode, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Activation::
        Activation (::std::auto_ptr< PollworkerType >& Pollworker,
                    ::std::auto_ptr< VoterType >& Voter,
                    ::std::auto_ptr< PropossedPersonType >& PropossedPerson,
                    const Custom_codeType& custom_code,
                    const WasImpugnedType& WasImpugned,
                    const ActivationModeType& activationMode)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Pollworker_ (Pollworker, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Voter_ (Voter, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PropossedPerson_ (PropossedPerson, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Impugnator_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          DesignatedPerson_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ImpugnationReason_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          WasImpugned_ (WasImpugned, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          activationMode_ (activationMode, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Activation::
        Activation (const Activation& x,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Pollworker_ (x.Pollworker_, f, this),
          Voter_ (x.Voter_, f, this),
          PropossedPerson_ (x.PropossedPerson_, f, this),
          Impugnator_ (x.Impugnator_, f, this),
          DesignatedPerson_ (x.DesignatedPerson_, f, this),
          ImpugnationReason_ (x.ImpugnationReason_, f, this),
          custom_code_ (x.custom_code_, f, this),
          WasImpugned_ (x.WasImpugned_, f, this),
          activationMode_ (x.activationMode_, f, this)
        {
        }

        Activation::
        Activation (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::PBReports::Flags f,
                    ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Pollworker_ (f, this),
          Voter_ (f, this),
          PropossedPerson_ (f, this),
          Impugnator_ (f, this),
          DesignatedPerson_ (f, this),
          ImpugnationReason_ (f, this),
          custom_code_ (f, this),
          WasImpugned_ (f, this),
          activationMode_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Activation::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Pollworker
            //
            if (n.name () == "Pollworker" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< PollworkerType > r (
                PollworkerTraits::create (i, f, this));

              if (!Pollworker_.present ())
              {
                this->Pollworker_.set (r);
                continue;
              }
            }

            // Voter
            //
            if (n.name () == "Voter" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VoterType > r (
                VoterTraits::create (i, f, this));

              if (!Voter_.present ())
              {
                this->Voter_.set (r);
                continue;
              }
            }

            // PropossedPerson
            //
            if (n.name () == "PropossedPerson" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< PropossedPersonType > r (
                PropossedPersonTraits::create (i, f, this));

              if (!PropossedPerson_.present ())
              {
                this->PropossedPerson_.set (r);
                continue;
              }
            }

            // Impugnator
            //
            if (n.name () == "Impugnator" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ImpugnatorType > r (
                ImpugnatorTraits::create (i, f, this));

              if (!this->Impugnator_)
              {
                this->Impugnator_.set (r);
                continue;
              }
            }

            // DesignatedPerson
            //
            if (n.name () == "DesignatedPerson" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< DesignatedPersonType > r (
                DesignatedPersonTraits::create (i, f, this));

              if (!this->DesignatedPerson_)
              {
                this->DesignatedPerson_.set (r);
                continue;
              }
            }

            // ImpugnationReason
            //
            if (n.name () == "ImpugnationReason" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ImpugnationReasonType > r (
                ImpugnationReasonTraits::create (i, f, this));

              if (!this->ImpugnationReason_)
              {
                this->ImpugnationReason_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Pollworker_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Pollworker",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!Voter_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Voter",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!PropossedPerson_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PropossedPerson",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "WasImpugned" && n.namespace_ ().empty ())
            {
              this->WasImpugned_.set (WasImpugnedTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "activationMode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ActivationModeType > r (
                ActivationModeTraits::create (i, f, this));

              this->activationMode_.set (r);
              continue;
            }
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!WasImpugned_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "WasImpugned",
              "");
          }

          if (!activationMode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "activationMode",
              "");
          }
        }

        Activation* Activation::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Activation (*this, f, c);
        }

        Activation::
        ~Activation ()
        {
        }

        bool
        operator== (const Activation& x, const Activation& y)
        {
          if (!(x.getPollworker () == y.getPollworker ()))
            return false;

          if (!(x.getVoter () == y.getVoter ()))
            return false;

          if (!(x.getPropossedPerson () == y.getPropossedPerson ()))
            return false;

          if (!(x.getImpugnator () == y.getImpugnator ()))
            return false;

          if (!(x.getDesignatedPerson () == y.getDesignatedPerson ()))
            return false;

          if (!(x.getImpugnationReason () == y.getImpugnationReason ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getWasImpugned () == y.getWasImpugned ()))
            return false;

          if (!(x.getActivationMode () == y.getActivationMode ()))
            return false;

          return true;
        }

        bool
        operator!= (const Activation& x, const Activation& y)
        {
          return !(x == y);
        }

        // ActivationMode
        //

        ActivationMode::
        ActivationMode (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (e, f, c)
        {
          _xsd_ActivationMode_convert ();
        }

        ActivationMode::
        ActivationMode (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (a, f, c)
        {
          _xsd_ActivationMode_convert ();
        }

        ActivationMode::
        ActivationMode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (s, e, f, c)
        {
          _xsd_ActivationMode_convert ();
        }

        ActivationMode* ActivationMode::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class ActivationMode (*this, f, c);
        }

        ActivationMode::Value ActivationMode::
        _xsd_ActivationMode_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ActivationMode_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_ActivationMode_indexes_,
                            _xsd_ActivationMode_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_ActivationMode_indexes_ + 2 || _xsd_ActivationMode_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const ActivationMode::
        _xsd_ActivationMode_literals_[2] =
        {
          "PROXY",
          "PRESENTIAL"
        };

        const ActivationMode::Value ActivationMode::
        _xsd_ActivationMode_indexes_[2] =
        {
          ::Smartmatic::SAES::Voting::PBReports::ActivationMode::ASSISTED_ACTIVATION_PRESENTIAL,
          ::Smartmatic::SAES::Voting::PBReports::ActivationMode::ASSISTED_ACTIVATION_PROXY
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (const ::std::string& u,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
            ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (const ::std::string& u,
                                  ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
            ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
            ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::std::istream& is,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::std::istream& is,
                                  ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::xercesc::InputSource& i,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
            ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::xercesc::InputSource& i,
                                  ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
            ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
            ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
              ::Smartmatic::SAES::Voting::PBReports::parseAssistedActivations (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "AssistedActivations" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "AssistedActivations",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations >
        parseAssistedActivations (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                                  const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "AssistedActivations" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::AssistedActivations, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "AssistedActivations",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeAssistedActivations (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeAssistedActivations (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeAssistedActivations (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeAssistedActivations (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeAssistedActivations (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeAssistedActivations (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeAssistedActivations (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "AssistedActivations" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "AssistedActivations",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeAssistedActivations (const ::Smartmatic::SAES::Voting::PBReports::AssistedActivations& s,
                                      const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                      ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "AssistedActivations",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeAssistedActivations (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const AssistedActivations& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Activations
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Activations",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivations ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Activations& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Activation
          //
          for (Activations::ActivationConstIterator
               b (i.getActivation ().begin ()), n (i.getActivation ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Activation",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Activation& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Pollworker
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Pollworker",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getPollworker ();
          }

          // Voter
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Voter",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getVoter ();
          }

          // PropossedPerson
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PropossedPerson",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getPropossedPerson ();
          }

          // Impugnator
          //
          if (i.getImpugnator ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Impugnator",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getImpugnator ();
          }

          // DesignatedPerson
          //
          if (i.getDesignatedPerson ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "DesignatedPerson",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getDesignatedPerson ();
          }

          // ImpugnationReason
          //
          if (i.getImpugnationReason ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ImpugnationReason",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getImpugnationReason ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // WasImpugned
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "WasImpugned",
                e));

            a << i.getWasImpugned ();
          }

          // activationMode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "activationMode",
                e));

            a << i.getActivationMode ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const ActivationMode& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const ActivationMode& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream& l,
                    const ActivationMode& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

