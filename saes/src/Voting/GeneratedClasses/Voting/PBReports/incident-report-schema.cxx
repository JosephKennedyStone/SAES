// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "incident-report-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // IncidentReports
        // 

        const IncidentReports::ReportsType& IncidentReports::
        getReports () const
        {
          return this->Reports_.get ();
        }

        IncidentReports::ReportsType& IncidentReports::
        getReports ()
        {
          return this->Reports_.get ();
        }

        void IncidentReports::
        setReports (const ReportsType& x)
        {
          this->Reports_.set (x);
        }

        void IncidentReports::
        setReports (::std::auto_ptr< ReportsType > x)
        {
          this->Reports_.set (x);
        }


        // Reports
        // 

        const Reports::ReportSequence& Reports::
        getReport () const
        {
          return this->Report_;
        }

        Reports::ReportSequence& Reports::
        getReport ()
        {
          return this->Report_;
        }

        void Reports::
        setReport (const ReportSequence& s)
        {
          this->Report_ = s;
        }


        // Report
        // 

        const Report::DescriptionType& Report::
        getDescription () const
        {
          return this->Description_.get ();
        }

        Report::DescriptionType& Report::
        getDescription ()
        {
          return this->Description_.get ();
        }

        void Report::
        setDescription (const DescriptionType& x)
        {
          this->Description_.set (x);
        }

        void Report::
        setDescription (::std::auto_ptr< DescriptionType > x)
        {
          this->Description_.set (x);
        }

        const Report::NamesOfTechniciansType& Report::
        getNamesOfTechnicians () const
        {
          return this->NamesOfTechnicians_.get ();
        }

        Report::NamesOfTechniciansType& Report::
        getNamesOfTechnicians ()
        {
          return this->NamesOfTechnicians_.get ();
        }

        void Report::
        setNamesOfTechnicians (const NamesOfTechniciansType& x)
        {
          this->NamesOfTechnicians_.set (x);
        }

        void Report::
        setNamesOfTechnicians (::std::auto_ptr< NamesOfTechniciansType > x)
        {
          this->NamesOfTechnicians_.set (x);
        }

        const Report::ActivityOfTechniciansType& Report::
        getActivityOfTechnicians () const
        {
          return this->ActivityOfTechnicians_.get ();
        }

        Report::ActivityOfTechniciansType& Report::
        getActivityOfTechnicians ()
        {
          return this->ActivityOfTechnicians_.get ();
        }

        void Report::
        setActivityOfTechnicians (const ActivityOfTechniciansType& x)
        {
          this->ActivityOfTechnicians_.set (x);
        }

        void Report::
        setActivityOfTechnicians (::std::auto_ptr< ActivityOfTechniciansType > x)
        {
          this->ActivityOfTechnicians_.set (x);
        }

        const Report::AdditionalObservationsOptional& Report::
        getAdditionalObservations () const
        {
          return this->AdditionalObservations_;
        }

        Report::AdditionalObservationsOptional& Report::
        getAdditionalObservations ()
        {
          return this->AdditionalObservations_;
        }

        void Report::
        setAdditionalObservations (const AdditionalObservationsType& x)
        {
          this->AdditionalObservations_.set (x);
        }

        void Report::
        setAdditionalObservations (const AdditionalObservationsOptional& x)
        {
          this->AdditionalObservations_ = x;
        }

        void Report::
        setAdditionalObservations (::std::auto_ptr< AdditionalObservationsType > x)
        {
          this->AdditionalObservations_.set (x);
        }

        const Report::NotificationDateType& Report::
        getNotificationDate () const
        {
          return this->NotificationDate_.get ();
        }

        Report::NotificationDateType& Report::
        getNotificationDate ()
        {
          return this->NotificationDate_.get ();
        }

        void Report::
        setNotificationDate (const NotificationDateType& x)
        {
          this->NotificationDate_.set (x);
        }

        void Report::
        setNotificationDate (::std::auto_ptr< NotificationDateType > x)
        {
          this->NotificationDate_.set (x);
        }

        const Report::PersonalArrivalDateType& Report::
        getPersonalArrivalDate () const
        {
          return this->PersonalArrivalDate_.get ();
        }

        Report::PersonalArrivalDateType& Report::
        getPersonalArrivalDate ()
        {
          return this->PersonalArrivalDate_.get ();
        }

        void Report::
        setPersonalArrivalDate (const PersonalArrivalDateType& x)
        {
          this->PersonalArrivalDate_.set (x);
        }

        void Report::
        setPersonalArrivalDate (::std::auto_ptr< PersonalArrivalDateType > x)
        {
          this->PersonalArrivalDate_.set (x);
        }

        const Report::IncidentSolutionDateType& Report::
        getIncidentSolutionDate () const
        {
          return this->IncidentSolutionDate_.get ();
        }

        Report::IncidentSolutionDateType& Report::
        getIncidentSolutionDate ()
        {
          return this->IncidentSolutionDate_.get ();
        }

        void Report::
        setIncidentSolutionDate (const IncidentSolutionDateType& x)
        {
          this->IncidentSolutionDate_.set (x);
        }

        void Report::
        setIncidentSolutionDate (::std::auto_ptr< IncidentSolutionDateType > x)
        {
          this->IncidentSolutionDate_.set (x);
        }

        const Report::Custom_codeType& Report::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Report::Custom_codeType& Report::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Report::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Report::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Report::IsCompleteType& Report::
        getIsComplete () const
        {
          return this->IsComplete_.get ();
        }

        Report::IsCompleteType& Report::
        getIsComplete ()
        {
          return this->IsComplete_.get ();
        }

        void Report::
        setIsComplete (const IsCompleteType& x)
        {
          this->IsComplete_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // IncidentReports
        //

        IncidentReports::
        IncidentReports ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Reports_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        IncidentReports::
        IncidentReports (const ReportsType& Reports)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Reports_ (Reports, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        IncidentReports::
        IncidentReports (::std::auto_ptr< ReportsType >& Reports)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Reports_ (Reports, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        IncidentReports::
        IncidentReports (const IncidentReports& x,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Reports_ (x.Reports_, f, this)
        {
        }

        IncidentReports::
        IncidentReports (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::PBReports::Flags f,
                         ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Reports_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void IncidentReports::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Reports
            //
            if (n.name () == "Reports" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ReportsType > r (
                ReportsTraits::create (i, f, this));

              if (!Reports_.present ())
              {
                this->Reports_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Reports_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Reports",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        IncidentReports* IncidentReports::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class IncidentReports (*this, f, c);
        }

        IncidentReports::
        ~IncidentReports ()
        {
        }

        bool
        operator== (const IncidentReports& x, const IncidentReports& y)
        {
          if (!(x.getReports () == y.getReports ()))
            return false;

          return true;
        }

        bool
        operator!= (const IncidentReports& x, const IncidentReports& y)
        {
          return !(x == y);
        }

        // Reports
        //

        Reports::
        Reports ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Report_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Reports::
        Reports (const Reports& x,
                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Report_ (x.Report_, f, this)
        {
        }

        Reports::
        Reports (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Report_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Reports::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Report
            //
            if (n.name () == "Report" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ReportType > r (
                ReportTraits::create (i, f, this));

              this->Report_.push_back (r);
              continue;
            }

            break;
          }
        }

        Reports* Reports::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Reports (*this, f, c);
        }

        Reports::
        ~Reports ()
        {
        }

        bool
        operator== (const Reports& x, const Reports& y)
        {
          if (!(x.getReport () == y.getReport ()))
            return false;

          return true;
        }

        bool
        operator!= (const Reports& x, const Reports& y)
        {
          return !(x == y);
        }

        // Report
        //

        Report::
        Report ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Description_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NamesOfTechnicians_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivityOfTechnicians_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AdditionalObservations_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NotificationDate_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PersonalArrivalDate_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IncidentSolutionDate_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IsComplete_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Report::
        Report (const DescriptionType& Description,
                const NamesOfTechniciansType& NamesOfTechnicians,
                const ActivityOfTechniciansType& ActivityOfTechnicians,
                const NotificationDateType& NotificationDate,
                const PersonalArrivalDateType& PersonalArrivalDate,
                const IncidentSolutionDateType& IncidentSolutionDate,
                const Custom_codeType& custom_code,
                const IsCompleteType& IsComplete)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Description_ (Description, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NamesOfTechnicians_ (NamesOfTechnicians, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivityOfTechnicians_ (ActivityOfTechnicians, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AdditionalObservations_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NotificationDate_ (NotificationDate, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PersonalArrivalDate_ (PersonalArrivalDate, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IncidentSolutionDate_ (IncidentSolutionDate, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IsComplete_ (IsComplete, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Report::
        Report (const DescriptionType& Description,
                ::std::auto_ptr< NamesOfTechniciansType >& NamesOfTechnicians,
                const ActivityOfTechniciansType& ActivityOfTechnicians,
                const NotificationDateType& NotificationDate,
                const PersonalArrivalDateType& PersonalArrivalDate,
                const IncidentSolutionDateType& IncidentSolutionDate,
                const Custom_codeType& custom_code,
                const IsCompleteType& IsComplete)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Description_ (Description, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NamesOfTechnicians_ (NamesOfTechnicians, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          ActivityOfTechnicians_ (ActivityOfTechnicians, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          AdditionalObservations_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          NotificationDate_ (NotificationDate, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          PersonalArrivalDate_ (PersonalArrivalDate, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IncidentSolutionDate_ (IncidentSolutionDate, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          IsComplete_ (IsComplete, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Report::
        Report (const Report& x,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Description_ (x.Description_, f, this),
          NamesOfTechnicians_ (x.NamesOfTechnicians_, f, this),
          ActivityOfTechnicians_ (x.ActivityOfTechnicians_, f, this),
          AdditionalObservations_ (x.AdditionalObservations_, f, this),
          NotificationDate_ (x.NotificationDate_, f, this),
          PersonalArrivalDate_ (x.PersonalArrivalDate_, f, this),
          IncidentSolutionDate_ (x.IncidentSolutionDate_, f, this),
          custom_code_ (x.custom_code_, f, this),
          IsComplete_ (x.IsComplete_, f, this)
        {
        }

        Report::
        Report (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Description_ (f, this),
          NamesOfTechnicians_ (f, this),
          ActivityOfTechnicians_ (f, this),
          AdditionalObservations_ (f, this),
          NotificationDate_ (f, this),
          PersonalArrivalDate_ (f, this),
          IncidentSolutionDate_ (f, this),
          custom_code_ (f, this),
          IsComplete_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Report::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Description
            //
            if (n.name () == "Description" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< DescriptionType > r (
                DescriptionTraits::create (i, f, this));

              if (!Description_.present ())
              {
                this->Description_.set (r);
                continue;
              }
            }

            // NamesOfTechnicians
            //
            if (n.name () == "NamesOfTechnicians" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< NamesOfTechniciansType > r (
                NamesOfTechniciansTraits::create (i, f, this));

              if (!NamesOfTechnicians_.present ())
              {
                this->NamesOfTechnicians_.set (r);
                continue;
              }
            }

            // ActivityOfTechnicians
            //
            if (n.name () == "ActivityOfTechnicians" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ActivityOfTechniciansType > r (
                ActivityOfTechniciansTraits::create (i, f, this));

              if (!ActivityOfTechnicians_.present ())
              {
                this->ActivityOfTechnicians_.set (r);
                continue;
              }
            }

            // AdditionalObservations
            //
            if (n.name () == "AdditionalObservations" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< AdditionalObservationsType > r (
                AdditionalObservationsTraits::create (i, f, this));

              if (!this->AdditionalObservations_)
              {
                this->AdditionalObservations_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Description_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Description",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!NamesOfTechnicians_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "NamesOfTechnicians",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!ActivityOfTechnicians_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "ActivityOfTechnicians",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "NotificationDate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NotificationDateType > r (
                NotificationDateTraits::create (i, f, this));

              this->NotificationDate_.set (r);
              continue;
            }

            if (n.name () == "PersonalArrivalDate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< PersonalArrivalDateType > r (
                PersonalArrivalDateTraits::create (i, f, this));

              this->PersonalArrivalDate_.set (r);
              continue;
            }

            if (n.name () == "IncidentSolutionDate" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< IncidentSolutionDateType > r (
                IncidentSolutionDateTraits::create (i, f, this));

              this->IncidentSolutionDate_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "IsComplete" && n.namespace_ ().empty ())
            {
              this->IsComplete_.set (IsCompleteTraits::create (i, f, this));
              continue;
            }
          }

          if (!NotificationDate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "NotificationDate",
              "");
          }

          if (!PersonalArrivalDate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "PersonalArrivalDate",
              "");
          }

          if (!IncidentSolutionDate_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "IncidentSolutionDate",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!IsComplete_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "IsComplete",
              "");
          }
        }

        Report* Report::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Report (*this, f, c);
        }

        Report::
        ~Report ()
        {
        }

        bool
        operator== (const Report& x, const Report& y)
        {
          if (!(x.getDescription () == y.getDescription ()))
            return false;

          if (!(x.getNamesOfTechnicians () == y.getNamesOfTechnicians ()))
            return false;

          if (!(x.getActivityOfTechnicians () == y.getActivityOfTechnicians ()))
            return false;

          if (!(x.getAdditionalObservations () == y.getAdditionalObservations ()))
            return false;

          if (!(x.getNotificationDate () == y.getNotificationDate ()))
            return false;

          if (!(x.getPersonalArrivalDate () == y.getPersonalArrivalDate ()))
            return false;

          if (!(x.getIncidentSolutionDate () == y.getIncidentSolutionDate ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getIsComplete () == y.getIsComplete ()))
            return false;

          return true;
        }

        bool
        operator!= (const Report& x, const Report& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (const ::std::string& u,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (const ::std::string& u,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::std::istream& is,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::std::istream& is,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::std::istream& is,
                              const ::std::string& sid,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::xercesc::InputSource& i,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::xercesc::InputSource& i,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
            ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (const ::xercesc::DOMDocument& d,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
              ::Smartmatic::SAES::Voting::PBReports::parseIncidentReports (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "IncidentReports" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::IncidentReports, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "IncidentReports",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports >
        parseIncidentReports (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "IncidentReports" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::IncidentReports > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::IncidentReports, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "IncidentReports",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeIncidentReports (::std::ostream& o,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeIncidentReports (::std::ostream& o,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIncidentReports (::std::ostream& o,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIncidentReports (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeIncidentReports (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIncidentReports (::xercesc::XMLFormatTarget& t,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  const ::std::string& e,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeIncidentReports (::xercesc::DOMDocument& d,
                                  const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "IncidentReports" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "IncidentReports",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeIncidentReports (const ::Smartmatic::SAES::Voting::PBReports::IncidentReports& s,
                                  const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                  ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "IncidentReports",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeIncidentReports (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const IncidentReports& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Reports
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Reports",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getReports ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Reports& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Report
          //
          for (Reports::ReportConstIterator
               b (i.getReport ().begin ()), n (i.getReport ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Report",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Report& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Description
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Description",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getDescription ();
          }

          // NamesOfTechnicians
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "NamesOfTechnicians",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getNamesOfTechnicians ();
          }

          // ActivityOfTechnicians
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "ActivityOfTechnicians",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getActivityOfTechnicians ();
          }

          // AdditionalObservations
          //
          if (i.getAdditionalObservations ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "AdditionalObservations",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getAdditionalObservations ();
          }

          // NotificationDate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "NotificationDate",
                e));

            a << i.getNotificationDate ();
          }

          // PersonalArrivalDate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "PersonalArrivalDate",
                e));

            a << i.getPersonalArrivalDate ();
          }

          // IncidentSolutionDate
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "IncidentSolutionDate",
                e));

            a << i.getIncidentSolutionDate ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // IsComplete
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "IsComplete",
                e));

            a << i.getIsComplete ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

