// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "pollworkers-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // Worker
        // 

        const Worker::Personal_infoType& Worker::
        getPersonal_info () const
        {
          return this->personal_info_.get ();
        }

        Worker::Personal_infoType& Worker::
        getPersonal_info ()
        {
          return this->personal_info_.get ();
        }

        void Worker::
        setPersonal_info (const Personal_infoType& x)
        {
          this->personal_info_.set (x);
        }

        void Worker::
        setPersonal_info (::std::auto_ptr< Personal_infoType > x)
        {
          this->personal_info_.set (x);
        }

        const Worker::OposserSequence& Worker::
        getOposser () const
        {
          return this->oposser_;
        }

        Worker::OposserSequence& Worker::
        getOposser ()
        {
          return this->oposser_;
        }

        void Worker::
        setOposser (const OposserSequence& s)
        {
          this->oposser_ = s;
        }

        const Worker::Member_typeType& Worker::
        getMember_type () const
        {
          return this->member_type_.get ();
        }

        Worker::Member_typeType& Worker::
        getMember_type ()
        {
          return this->member_type_.get ();
        }

        void Worker::
        setMember_type (const Member_typeType& x)
        {
          this->member_type_.set (x);
        }

        void Worker::
        setMember_type (::std::auto_ptr< Member_typeType > x)
        {
          this->member_type_.set (x);
        }

        const Worker::PartyType& Worker::
        getParty () const
        {
          return this->party_.get ();
        }

        Worker::PartyType& Worker::
        getParty ()
        {
          return this->party_.get ();
        }

        void Worker::
        setParty (const PartyType& x)
        {
          this->party_.set (x);
        }

        void Worker::
        setParty (::std::auto_ptr< PartyType > x)
        {
          this->party_.set (x);
        }

        const Worker::Account_numberType& Worker::
        getAccount_number () const
        {
          return this->account_number_.get ();
        }

        Worker::Account_numberType& Worker::
        getAccount_number ()
        {
          return this->account_number_.get ();
        }

        void Worker::
        setAccount_number (const Account_numberType& x)
        {
          this->account_number_.set (x);
        }

        void Worker::
        setAccount_number (::std::auto_ptr< Account_numberType > x)
        {
          this->account_number_.set (x);
        }

        const Worker::PhoneType& Worker::
        getPhone () const
        {
          return this->phone_.get ();
        }

        Worker::PhoneType& Worker::
        getPhone ()
        {
          return this->phone_.get ();
        }

        void Worker::
        setPhone (const PhoneType& x)
        {
          this->phone_.set (x);
        }

        void Worker::
        setPhone (::std::auto_ptr< PhoneType > x)
        {
          this->phone_.set (x);
        }

        const Worker::Custom_codeType& Worker::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Worker::Custom_codeType& Worker::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Worker::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Worker::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Worker::Create_dateType& Worker::
        getCreate_date () const
        {
          return this->create_date_.get ();
        }

        Worker::Create_dateType& Worker::
        getCreate_date ()
        {
          return this->create_date_.get ();
        }

        void Worker::
        setCreate_date (const Create_dateType& x)
        {
          this->create_date_.set (x);
        }

        void Worker::
        setCreate_date (::std::auto_ptr< Create_dateType > x)
        {
          this->create_date_.set (x);
        }

        const Worker::All_dayOptional& Worker::
        getAll_day () const
        {
          return this->all_day_;
        }

        Worker::All_dayOptional& Worker::
        getAll_day ()
        {
          return this->all_day_;
        }

        void Worker::
        setAll_day (const All_dayType& x)
        {
          this->all_day_.set (x);
        }

        void Worker::
        setAll_day (const All_dayOptional& x)
        {
          this->all_day_ = x;
        }

        const Worker::Start_timeOptional& Worker::
        getStart_time () const
        {
          return this->start_time_;
        }

        Worker::Start_timeOptional& Worker::
        getStart_time ()
        {
          return this->start_time_;
        }

        void Worker::
        setStart_time (const Start_timeType& x)
        {
          this->start_time_.set (x);
        }

        void Worker::
        setStart_time (const Start_timeOptional& x)
        {
          this->start_time_ = x;
        }

        void Worker::
        setStart_time (::std::auto_ptr< Start_timeType > x)
        {
          this->start_time_.set (x);
        }

        const Worker::End_timeOptional& Worker::
        getEnd_time () const
        {
          return this->end_time_;
        }

        Worker::End_timeOptional& Worker::
        getEnd_time ()
        {
          return this->end_time_;
        }

        void Worker::
        setEnd_time (const End_timeType& x)
        {
          this->end_time_.set (x);
        }

        void Worker::
        setEnd_time (const End_timeOptional& x)
        {
          this->end_time_ = x;
        }

        void Worker::
        setEnd_time (::std::auto_ptr< End_timeType > x)
        {
          this->end_time_.set (x);
        }

        const Worker::Accept_designationOptional& Worker::
        getAccept_designation () const
        {
          return this->accept_designation_;
        }

        Worker::Accept_designationOptional& Worker::
        getAccept_designation ()
        {
          return this->accept_designation_;
        }

        void Worker::
        setAccept_designation (const Accept_designationType& x)
        {
          this->accept_designation_.set (x);
        }

        void Worker::
        setAccept_designation (const Accept_designationOptional& x)
        {
          this->accept_designation_ = x;
        }

        const Worker::Impugnation_reasonOptional& Worker::
        getImpugnation_reason () const
        {
          return this->impugnation_reason_;
        }

        Worker::Impugnation_reasonOptional& Worker::
        getImpugnation_reason ()
        {
          return this->impugnation_reason_;
        }

        void Worker::
        setImpugnation_reason (const Impugnation_reasonType& x)
        {
          this->impugnation_reason_.set (x);
        }

        void Worker::
        setImpugnation_reason (const Impugnation_reasonOptional& x)
        {
          this->impugnation_reason_ = x;
        }

        void Worker::
        setImpugnation_reason (::std::auto_ptr< Impugnation_reasonType > x)
        {
          this->impugnation_reason_.set (x);
        }

        const Worker::Bureau_assignedOptional& Worker::
        getBureau_assigned () const
        {
          return this->bureau_assigned_;
        }

        Worker::Bureau_assignedOptional& Worker::
        getBureau_assigned ()
        {
          return this->bureau_assigned_;
        }

        void Worker::
        setBureau_assigned (const Bureau_assignedType& x)
        {
          this->bureau_assigned_.set (x);
        }

        void Worker::
        setBureau_assigned (const Bureau_assignedOptional& x)
        {
          this->bureau_assigned_ = x;
        }


        // WorkerMemberType
        // 

        WorkerMemberType::
        WorkerMemberType ()
        : ::Smartmatic::SAES::Voting::PBReports::String ()
        {
        }

        WorkerMemberType::
        WorkerMemberType (Value v)
        : ::Smartmatic::SAES::Voting::PBReports::String (_xsd_WorkerMemberType_literals_[v])
        {
        }

        WorkerMemberType::
        WorkerMemberType (const char* v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        WorkerMemberType::
        WorkerMemberType (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        WorkerMemberType::
        WorkerMemberType (const ::Smartmatic::SAES::Voting::PBReports::String& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        WorkerMemberType::
        WorkerMemberType (const WorkerMemberType& v,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (v, f, c)
        {
        }

        WorkerMemberType& WorkerMemberType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::PBReports::String& > (*this) = 
          ::Smartmatic::SAES::Voting::PBReports::String (_xsd_WorkerMemberType_literals_[v]);

          return *this;
        }


        // Note
        // 

        const Note::ContentType& Note::
        getContent () const
        {
          return this->Content_.get ();
        }

        Note::ContentType& Note::
        getContent ()
        {
          return this->Content_.get ();
        }

        void Note::
        setContent (const ContentType& x)
        {
          this->Content_.set (x);
        }

        void Note::
        setContent (::std::auto_ptr< ContentType > x)
        {
          this->Content_.set (x);
        }

        const Note::TitleOptional& Note::
        getTitle () const
        {
          return this->title_;
        }

        Note::TitleOptional& Note::
        getTitle ()
        {
          return this->title_;
        }

        void Note::
        setTitle (const TitleType& x)
        {
          this->title_.set (x);
        }

        void Note::
        setTitle (const TitleOptional& x)
        {
          this->title_ = x;
        }

        void Note::
        setTitle (::std::auto_ptr< TitleType > x)
        {
          this->title_.set (x);
        }

        const Note::Custom_codeType& Note::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Note::Custom_codeType& Note::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Note::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Note::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Note::Create_dateType& Note::
        getCreate_date () const
        {
          return this->create_date_.get ();
        }

        Note::Create_dateType& Note::
        getCreate_date ()
        {
          return this->create_date_.get ();
        }

        void Note::
        setCreate_date (const Create_dateType& x)
        {
          this->create_date_.set (x);
        }

        void Note::
        setCreate_date (::std::auto_ptr< Create_dateType > x)
        {
          this->create_date_.set (x);
        }

        const Note::TypeType& Note::
        getType () const
        {
          return this->type_.get ();
        }

        Note::TypeType& Note::
        getType ()
        {
          return this->type_.get ();
        }

        void Note::
        setType (const TypeType& x)
        {
          this->type_.set (x);
        }

        void Note::
        setType (::std::auto_ptr< TypeType > x)
        {
          this->type_.set (x);
        }


        // NoteWorkerMemberType
        // 

        NoteWorkerMemberType::
        NoteWorkerMemberType ()
        : ::Smartmatic::SAES::Voting::PBReports::String ()
        {
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (Value v)
        : ::Smartmatic::SAES::Voting::PBReports::String (_xsd_NoteWorkerMemberType_literals_[v])
        {
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (const char* v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (const ::Smartmatic::SAES::Voting::PBReports::String& v)
        : ::Smartmatic::SAES::Voting::PBReports::String (v)
        {
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (const NoteWorkerMemberType& v,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (v, f, c)
        {
        }

        NoteWorkerMemberType& NoteWorkerMemberType::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::PBReports::String& > (*this) = 
          ::Smartmatic::SAES::Voting::PBReports::String (_xsd_NoteWorkerMemberType_literals_[v]);

          return *this;
        }


        // Pollworkers
        // 

        const Pollworkers::WorkersType& Pollworkers::
        getWorkers () const
        {
          return this->Workers_.get ();
        }

        Pollworkers::WorkersType& Pollworkers::
        getWorkers ()
        {
          return this->Workers_.get ();
        }

        void Pollworkers::
        setWorkers (const WorkersType& x)
        {
          this->Workers_.set (x);
        }

        void Pollworkers::
        setWorkers (::std::auto_ptr< WorkersType > x)
        {
          this->Workers_.set (x);
        }

        const Pollworkers::NotesType& Pollworkers::
        getNotes () const
        {
          return this->Notes_.get ();
        }

        Pollworkers::NotesType& Pollworkers::
        getNotes ()
        {
          return this->Notes_.get ();
        }

        void Pollworkers::
        setNotes (const NotesType& x)
        {
          this->Notes_.set (x);
        }

        void Pollworkers::
        setNotes (::std::auto_ptr< NotesType > x)
        {
          this->Notes_.set (x);
        }


        // Workers
        // 

        const Workers::WorkerSequence& Workers::
        getWorker () const
        {
          return this->Worker_;
        }

        Workers::WorkerSequence& Workers::
        getWorker ()
        {
          return this->Worker_;
        }

        void Workers::
        setWorker (const WorkerSequence& s)
        {
          this->Worker_ = s;
        }


        // Notes
        // 

        const Notes::NoteSequence& Notes::
        getNote () const
        {
          return this->Note_;
        }

        Notes::NoteSequence& Notes::
        getNote ()
        {
          return this->Note_;
        }

        void Notes::
        setNote (const NoteSequence& s)
        {
          this->Note_ = s;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // Worker
        //

        Worker::
        Worker ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          personal_info_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          oposser_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          member_type_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          party_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          account_number_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          phone_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          all_day_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          start_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          end_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          accept_designation_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          impugnation_reason_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          bureau_assigned_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Worker::
        Worker (const Personal_infoType& personal_info,
                const Member_typeType& member_type,
                const PartyType& party,
                const Account_numberType& account_number,
                const PhoneType& phone,
                const Custom_codeType& custom_code,
                const Create_dateType& create_date)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          personal_info_ (personal_info, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          oposser_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          member_type_ (member_type, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          party_ (party, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          account_number_ (account_number, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          phone_ (phone, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          all_day_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          start_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          end_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          accept_designation_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          impugnation_reason_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          bureau_assigned_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Worker::
        Worker (::std::auto_ptr< Personal_infoType >& personal_info,
                const Member_typeType& member_type,
                const PartyType& party,
                const Account_numberType& account_number,
                const PhoneType& phone,
                const Custom_codeType& custom_code,
                const Create_dateType& create_date)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          personal_info_ (personal_info, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          oposser_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          member_type_ (member_type, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          party_ (party, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          account_number_ (account_number, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          phone_ (phone, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          all_day_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          start_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          end_time_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          accept_designation_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          impugnation_reason_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          bureau_assigned_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Worker::
        Worker (const Worker& x,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          personal_info_ (x.personal_info_, f, this),
          oposser_ (x.oposser_, f, this),
          member_type_ (x.member_type_, f, this),
          party_ (x.party_, f, this),
          account_number_ (x.account_number_, f, this),
          phone_ (x.phone_, f, this),
          custom_code_ (x.custom_code_, f, this),
          create_date_ (x.create_date_, f, this),
          all_day_ (x.all_day_, f, this),
          start_time_ (x.start_time_, f, this),
          end_time_ (x.end_time_, f, this),
          accept_designation_ (x.accept_designation_, f, this),
          impugnation_reason_ (x.impugnation_reason_, f, this),
          bureau_assigned_ (x.bureau_assigned_, f, this)
        {
        }

        Worker::
        Worker (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          personal_info_ (f, this),
          oposser_ (f, this),
          member_type_ (f, this),
          party_ (f, this),
          account_number_ (f, this),
          phone_ (f, this),
          custom_code_ (f, this),
          create_date_ (f, this),
          all_day_ (f, this),
          start_time_ (f, this),
          end_time_ (f, this),
          accept_designation_ (f, this),
          impugnation_reason_ (f, this),
          bureau_assigned_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Worker::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // personal-info
            //
            if (n.name () == "personal-info" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< Personal_infoType > r (
                Personal_infoTraits::create (i, f, this));

              if (!personal_info_.present ())
              {
                this->personal_info_.set (r);
                continue;
              }
            }

            // oposser
            //
            if (n.name () == "oposser" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< OposserType > r (
                OposserTraits::create (i, f, this));

              this->oposser_.push_back (r);
              continue;
            }

            break;
          }

          if (!personal_info_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "personal-info",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "member-type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Member_typeType > r (
                Member_typeTraits::create (i, f, this));

              this->member_type_.set (r);
              continue;
            }

            if (n.name () == "party" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< PartyType > r (
                PartyTraits::create (i, f, this));

              this->party_.set (r);
              continue;
            }

            if (n.name () == "account-number" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Account_numberType > r (
                Account_numberTraits::create (i, f, this));

              this->account_number_.set (r);
              continue;
            }

            if (n.name () == "phone" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< PhoneType > r (
                PhoneTraits::create (i, f, this));

              this->phone_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "create-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Create_dateType > r (
                Create_dateTraits::create (i, f, this));

              this->create_date_.set (r);
              continue;
            }

            if (n.name () == "all-day" && n.namespace_ ().empty ())
            {
              this->all_day_.set (All_dayTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "start-time" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Start_timeType > r (
                Start_timeTraits::create (i, f, this));

              this->start_time_.set (r);
              continue;
            }

            if (n.name () == "end-time" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< End_timeType > r (
                End_timeTraits::create (i, f, this));

              this->end_time_.set (r);
              continue;
            }

            if (n.name () == "accept-designation" && n.namespace_ ().empty ())
            {
              this->accept_designation_.set (Accept_designationTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "impugnation-reason" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Impugnation_reasonType > r (
                Impugnation_reasonTraits::create (i, f, this));

              this->impugnation_reason_.set (r);
              continue;
            }

            if (n.name () == "bureau-assigned" && n.namespace_ ().empty ())
            {
              this->bureau_assigned_.set (Bureau_assignedTraits::create (i, f, this));
              continue;
            }
          }

          if (!member_type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "member-type",
              "");
          }

          if (!party_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "party",
              "");
          }

          if (!account_number_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "account-number",
              "");
          }

          if (!phone_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "phone",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!create_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "create-date",
              "");
          }
        }

        Worker* Worker::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Worker (*this, f, c);
        }

        Worker::
        ~Worker ()
        {
        }

        bool
        operator== (const Worker& x, const Worker& y)
        {
          if (!(x.getPersonal_info () == y.getPersonal_info ()))
            return false;

          if (!(x.getOposser () == y.getOposser ()))
            return false;

          if (!(x.getMember_type () == y.getMember_type ()))
            return false;

          if (!(x.getParty () == y.getParty ()))
            return false;

          if (!(x.getAccount_number () == y.getAccount_number ()))
            return false;

          if (!(x.getPhone () == y.getPhone ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getCreate_date () == y.getCreate_date ()))
            return false;

          if (!(x.getAll_day () == y.getAll_day ()))
            return false;

          if (!(x.getStart_time () == y.getStart_time ()))
            return false;

          if (!(x.getEnd_time () == y.getEnd_time ()))
            return false;

          if (!(x.getAccept_designation () == y.getAccept_designation ()))
            return false;

          if (!(x.getImpugnation_reason () == y.getImpugnation_reason ()))
            return false;

          if (!(x.getBureau_assigned () == y.getBureau_assigned ()))
            return false;

          return true;
        }

        bool
        operator!= (const Worker& x, const Worker& y)
        {
          return !(x == y);
        }

        // WorkerMemberType
        //

        WorkerMemberType::
        WorkerMemberType (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (e, f, c)
        {
          _xsd_WorkerMemberType_convert ();
        }

        WorkerMemberType::
        WorkerMemberType (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (a, f, c)
        {
          _xsd_WorkerMemberType_convert ();
        }

        WorkerMemberType::
        WorkerMemberType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (s, e, f, c)
        {
          _xsd_WorkerMemberType_convert ();
        }

        WorkerMemberType* WorkerMemberType::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class WorkerMemberType (*this, f, c);
        }

        WorkerMemberType::Value WorkerMemberType::
        _xsd_WorkerMemberType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WorkerMemberType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_WorkerMemberType_indexes_,
                            _xsd_WorkerMemberType_indexes_ + 13,
                            *this,
                            c));

          if (i == _xsd_WorkerMemberType_indexes_ + 13 || _xsd_WorkerMemberType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const WorkerMemberType::
        _xsd_WorkerMemberType_literals_[13] =
        {
          "PRESIDENT",
          "SECRETARY",
          "ASSISTENT",
          "WITNESS",
          "POLICE",
          "ASSISTANT_SECRETARY",
          "DEPUTY_PRESIDENT",
          "DEPUTY_SECRETARY",
          "DEPUTY_ASSISTENT",
          "DEPUTY_WITNESS",
          "DEPUTY_POLICE",
          "DEPUTY_ASSISTANT_SECRETARY",
          "DEPUTY"
        };

        const WorkerMemberType::Value WorkerMemberType::
        _xsd_WorkerMemberType_indexes_[13] =
        {
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_ASSISTANT_SECRETARY,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_ASSISTENT,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY_ASSISTANT_SECRETARY,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY_ASSISTENT,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY_POLICE,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY_PRESIDENT,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY_SECRETARY,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_DEPUTY_WITNESS,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_POLICE,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_PRESIDENT,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_SECRETARY,
          ::Smartmatic::SAES::Voting::PBReports::WorkerMemberType::POLLWORKERS_WITNESS
        };

        // Note
        //

        Note::
        Note ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Content_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          title_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          type_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Note::
        Note (const ContentType& Content,
              const Custom_codeType& custom_code,
              const Create_dateType& create_date,
              const TypeType& type)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Content_ (Content, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          title_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          create_date_ (create_date, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          type_ (type, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Note::
        Note (const Note& x,
              ::Smartmatic::SAES::Voting::PBReports::Flags f,
              ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Content_ (x.Content_, f, this),
          title_ (x.title_, f, this),
          custom_code_ (x.custom_code_, f, this),
          create_date_ (x.create_date_, f, this),
          type_ (x.type_, f, this)
        {
        }

        Note::
        Note (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::PBReports::Flags f,
              ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Content_ (f, this),
          title_ (f, this),
          custom_code_ (f, this),
          create_date_ (f, this),
          type_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Note::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Content
            //
            if (n.name () == "Content" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< ContentType > r (
                ContentTraits::create (i, f, this));

              if (!Content_.present ())
              {
                this->Content_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Content_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Content",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "title" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TitleType > r (
                TitleTraits::create (i, f, this));

              this->title_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "create-date" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Create_dateType > r (
                Create_dateTraits::create (i, f, this));

              this->create_date_.set (r);
              continue;
            }

            if (n.name () == "type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< TypeType > r (
                TypeTraits::create (i, f, this));

              this->type_.set (r);
              continue;
            }
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!create_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "create-date",
              "");
          }

          if (!type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "type",
              "");
          }
        }

        Note* Note::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Note (*this, f, c);
        }

        Note::
        ~Note ()
        {
        }

        bool
        operator== (const Note& x, const Note& y)
        {
          if (!(x.getContent () == y.getContent ()))
            return false;

          if (!(x.getTitle () == y.getTitle ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getCreate_date () == y.getCreate_date ()))
            return false;

          if (!(x.getType () == y.getType ()))
            return false;

          return true;
        }

        bool
        operator!= (const Note& x, const Note& y)
        {
          return !(x == y);
        }

        // NoteWorkerMemberType
        //

        NoteWorkerMemberType::
        NoteWorkerMemberType (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (e, f, c)
        {
          _xsd_NoteWorkerMemberType_convert ();
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (a, f, c)
        {
          _xsd_NoteWorkerMemberType_convert ();
        }

        NoteWorkerMemberType::
        NoteWorkerMemberType (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f,
                              ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::String (s, e, f, c)
        {
          _xsd_NoteWorkerMemberType_convert ();
        }

        NoteWorkerMemberType* NoteWorkerMemberType::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class NoteWorkerMemberType (*this, f, c);
        }

        NoteWorkerMemberType::Value NoteWorkerMemberType::
        _xsd_NoteWorkerMemberType_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_NoteWorkerMemberType_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_NoteWorkerMemberType_indexes_,
                            _xsd_NoteWorkerMemberType_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_NoteWorkerMemberType_indexes_ + 5 || _xsd_NoteWorkerMemberType_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const NoteWorkerMemberType::
        _xsd_NoteWorkerMemberType_literals_[5] =
        {
          "OPEN_ELECTION",
          "OPEN_VOTING",
          "CLOSE_VOTING",
          "CLOSE_ELECTION",
          "POLLWORKERS"
        };

        const NoteWorkerMemberType::Value NoteWorkerMemberType::
        _xsd_NoteWorkerMemberType_indexes_[5] =
        {
          ::Smartmatic::SAES::Voting::PBReports::NoteWorkerMemberType::POLLWORKERS_CLOSE_ELECTION,
          ::Smartmatic::SAES::Voting::PBReports::NoteWorkerMemberType::POLLWORKERS_CLOSE_VOTING,
          ::Smartmatic::SAES::Voting::PBReports::NoteWorkerMemberType::POLLWORKERS_OPEN_ELECTION,
          ::Smartmatic::SAES::Voting::PBReports::NoteWorkerMemberType::POLLWORKERS_OPEN_VOTING,
          ::Smartmatic::SAES::Voting::PBReports::NoteWorkerMemberType::POLLWORKERS_POLLWORKERS
        };

        // Pollworkers
        //

        Pollworkers::
        Pollworkers ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Workers_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Notes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Pollworkers::
        Pollworkers (const WorkersType& Workers,
                     const NotesType& Notes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Workers_ (Workers, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Notes_ (Notes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Pollworkers::
        Pollworkers (::std::auto_ptr< WorkersType >& Workers,
                     ::std::auto_ptr< NotesType >& Notes)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Workers_ (Workers, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          Notes_ (Notes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Pollworkers::
        Pollworkers (const Pollworkers& x,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Workers_ (x.Workers_, f, this),
          Notes_ (x.Notes_, f, this)
        {
        }

        Pollworkers::
        Pollworkers (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::PBReports::Flags f,
                     ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Workers_ (f, this),
          Notes_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Pollworkers::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Workers
            //
            if (n.name () == "Workers" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< WorkersType > r (
                WorkersTraits::create (i, f, this));

              if (!Workers_.present ())
              {
                this->Workers_.set (r);
                continue;
              }
            }

            // Notes
            //
            if (n.name () == "Notes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< NotesType > r (
                NotesTraits::create (i, f, this));

              if (!Notes_.present ())
              {
                this->Notes_.set (r);
                continue;
              }
            }

            break;
          }

          if (!Workers_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Workers",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!Notes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Notes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        Pollworkers* Pollworkers::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Pollworkers (*this, f, c);
        }

        Pollworkers::
        ~Pollworkers ()
        {
        }

        bool
        operator== (const Pollworkers& x, const Pollworkers& y)
        {
          if (!(x.getWorkers () == y.getWorkers ()))
            return false;

          if (!(x.getNotes () == y.getNotes ()))
            return false;

          return true;
        }

        bool
        operator!= (const Pollworkers& x, const Pollworkers& y)
        {
          return !(x == y);
        }

        // Workers
        //

        Workers::
        Workers ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Worker_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Workers::
        Workers (const Workers& x,
                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Worker_ (x.Worker_, f, this)
        {
        }

        Workers::
        Workers (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::PBReports::Flags f,
                 ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Worker_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Workers::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Worker
            //
            if (n.name () == "Worker" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< WorkerType > r (
                WorkerTraits::create (i, f, this));

              this->Worker_.push_back (r);
              continue;
            }

            break;
          }
        }

        Workers* Workers::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Workers (*this, f, c);
        }

        Workers::
        ~Workers ()
        {
        }

        bool
        operator== (const Workers& x, const Workers& y)
        {
          if (!(x.getWorker () == y.getWorker ()))
            return false;

          return true;
        }

        bool
        operator!= (const Workers& x, const Workers& y)
        {
          return !(x == y);
        }

        // Notes
        //

        Notes::
        Notes ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          Note_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        Notes::
        Notes (const Notes& x,
               ::Smartmatic::SAES::Voting::PBReports::Flags f,
               ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          Note_ (x.Note_, f, this)
        {
        }

        Notes::
        Notes (const ::xercesc::DOMElement& e,
               ::Smartmatic::SAES::Voting::PBReports::Flags f,
               ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          Note_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Notes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // Note
            //
            if (n.name () == "Note" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< NoteType > r (
                NoteTraits::create (i, f, this));

              this->Note_.push_back (r);
              continue;
            }

            break;
          }
        }

        Notes* Notes::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class Notes (*this, f, c);
        }

        Notes::
        ~Notes ()
        {
        }

        bool
        operator== (const Notes& x, const Notes& y)
        {
          if (!(x.getNote () == y.getNote ()))
            return false;

          return true;
        }

        bool
        operator!= (const Notes& x, const Notes& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (const ::std::string& u,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (const ::std::string& u,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::std::istream& is,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::std::istream& is,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::std::istream& is,
                          const ::std::string& sid,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::std::istream& is,
                          const ::std::string& sid,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::xercesc::InputSource& i,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::xercesc::InputSource& i,
                          ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
            ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (const ::xercesc::DOMDocument& d,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
              ::Smartmatic::SAES::Voting::PBReports::parsePollworkers (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "Pollworkers" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::Pollworkers, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Pollworkers",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers >
        parsePollworkers (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::Smartmatic::SAES::Voting::PBReports::Flags f,
                          const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "Pollworkers" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::Pollworkers > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::Pollworkers, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Pollworkers",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializePollworkers (::std::ostream& o,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializePollworkers (::std::ostream& o,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePollworkers (::std::ostream& o,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePollworkers (::xercesc::XMLFormatTarget& t,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializePollworkers (::xercesc::XMLFormatTarget& t,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePollworkers (::xercesc::XMLFormatTarget& t,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializePollworkers (::xercesc::DOMDocument& d,
                              const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "Pollworkers" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "Pollworkers",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializePollworkers (const ::Smartmatic::SAES::Voting::PBReports::Pollworkers& s,
                              const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                              ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "Pollworkers",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializePollworkers (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const Worker& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // personal-info
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "personal-info",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getPersonal_info ();
          }

          // oposser
          //
          for (Worker::OposserConstIterator
               b (i.getOposser ().begin ()), n (i.getOposser ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "oposser",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }

          // member-type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "member-type",
                e));

            a << i.getMember_type ();
          }

          // party
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "party",
                e));

            a << i.getParty ();
          }

          // account-number
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "account-number",
                e));

            a << i.getAccount_number ();
          }

          // phone
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "phone",
                e));

            a << i.getPhone ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // create-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "create-date",
                e));

            a << i.getCreate_date ();
          }

          // all-day
          //
          if (i.getAll_day ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "all-day",
                e));

            a << *i.getAll_day ();
          }

          // start-time
          //
          if (i.getStart_time ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "start-time",
                e));

            a << *i.getStart_time ();
          }

          // end-time
          //
          if (i.getEnd_time ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "end-time",
                e));

            a << *i.getEnd_time ();
          }

          // accept-designation
          //
          if (i.getAccept_designation ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "accept-designation",
                e));

            a << *i.getAccept_designation ();
          }

          // impugnation-reason
          //
          if (i.getImpugnation_reason ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "impugnation-reason",
                e));

            a << *i.getImpugnation_reason ();
          }

          // bureau-assigned
          //
          if (i.getBureau_assigned ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "bureau-assigned",
                e));

            a << *i.getBureau_assigned ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const WorkerMemberType& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const WorkerMemberType& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream& l,
                    const WorkerMemberType& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Note& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Content
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Content",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getContent ();
          }

          // title
          //
          if (i.getTitle ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "title",
                e));

            a << *i.getTitle ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // create-date
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "create-date",
                e));

            a << i.getCreate_date ();
          }

          // type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "type",
                e));

            a << i.getType ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const NoteWorkerMemberType& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const NoteWorkerMemberType& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::PBReports::ListStream& l,
                    const NoteWorkerMemberType& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::PBReports::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Pollworkers& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Workers
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Workers",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getWorkers ();
          }

          // Notes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Notes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getNotes ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Workers& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Worker
          //
          for (Workers::WorkerConstIterator
               b (i.getWorker ().begin ()), n (i.getWorker ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Worker",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Notes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // Note
          //
          for (Notes::NoteConstIterator
               b (i.getNote ().begin ()), n (i.getNote ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Note",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

