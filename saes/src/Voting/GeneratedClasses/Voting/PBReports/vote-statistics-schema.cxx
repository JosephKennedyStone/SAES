// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "vote-statistics-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // VoteStatistics
        // 

        const VoteStatistics::TotalVotesType& VoteStatistics::
        getTotalVotes () const
        {
          return this->TotalVotes_.get ();
        }

        VoteStatistics::TotalVotesType& VoteStatistics::
        getTotalVotes ()
        {
          return this->TotalVotes_.get ();
        }

        void VoteStatistics::
        setTotalVotes (const TotalVotesType& x)
        {
          this->TotalVotes_.set (x);
        }

        const VoteStatistics::TotalSecurityVotesType& VoteStatistics::
        getTotalSecurityVotes () const
        {
          return this->TotalSecurityVotes_.get ();
        }

        VoteStatistics::TotalSecurityVotesType& VoteStatistics::
        getTotalSecurityVotes ()
        {
          return this->TotalSecurityVotes_.get ();
        }

        void VoteStatistics::
        setTotalSecurityVotes (const TotalSecurityVotesType& x)
        {
          this->TotalSecurityVotes_.set (x);
        }

        const VoteStatistics::TotalOfficialVotesType& VoteStatistics::
        getTotalOfficialVotes () const
        {
          return this->TotalOfficialVotes_.get ();
        }

        VoteStatistics::TotalOfficialVotesType& VoteStatistics::
        getTotalOfficialVotes ()
        {
          return this->TotalOfficialVotes_.get ();
        }

        void VoteStatistics::
        setTotalOfficialVotes (const TotalOfficialVotesType& x)
        {
          this->TotalOfficialVotes_.set (x);
        }

        const VoteStatistics::TotalDemoVotesType& VoteStatistics::
        getTotalDemoVotes () const
        {
          return this->TotalDemoVotes_.get ();
        }

        VoteStatistics::TotalDemoVotesType& VoteStatistics::
        getTotalDemoVotes ()
        {
          return this->TotalDemoVotes_.get ();
        }

        void VoteStatistics::
        setTotalDemoVotes (const TotalDemoVotesType& x)
        {
          this->TotalDemoVotes_.set (x);
        }

        const VoteStatistics::TotalSuperNullVotesType& VoteStatistics::
        getTotalSuperNullVotes () const
        {
          return this->TotalSuperNullVotes_.get ();
        }

        VoteStatistics::TotalSuperNullVotesType& VoteStatistics::
        getTotalSuperNullVotes ()
        {
          return this->TotalSuperNullVotes_.get ();
        }

        void VoteStatistics::
        setTotalSuperNullVotes (const TotalSuperNullVotesType& x)
        {
          this->TotalSuperNullVotes_.set (x);
        }

        const VoteStatistics::TotalDuplicatedVotesType& VoteStatistics::
        getTotalDuplicatedVotes () const
        {
          return this->TotalDuplicatedVotes_.get ();
        }

        VoteStatistics::TotalDuplicatedVotesType& VoteStatistics::
        getTotalDuplicatedVotes ()
        {
          return this->TotalDuplicatedVotes_.get ();
        }

        void VoteStatistics::
        setTotalDuplicatedVotes (const TotalDuplicatedVotesType& x)
        {
          this->TotalDuplicatedVotes_.set (x);
        }

        const VoteStatistics::TotalSimulatedVotesOptional& VoteStatistics::
        getTotalSimulatedVotes () const
        {
          return this->TotalSimulatedVotes_;
        }

        VoteStatistics::TotalSimulatedVotesOptional& VoteStatistics::
        getTotalSimulatedVotes ()
        {
          return this->TotalSimulatedVotes_;
        }

        void VoteStatistics::
        setTotalSimulatedVotes (const TotalSimulatedVotesType& x)
        {
          this->TotalSimulatedVotes_.set (x);
        }

        void VoteStatistics::
        setTotalSimulatedVotes (const TotalSimulatedVotesOptional& x)
        {
          this->TotalSimulatedVotes_ = x;
        }

        const VoteStatistics::VotesByCAType& VoteStatistics::
        getVotesByCA () const
        {
          return this->VotesByCA_.get ();
        }

        VoteStatistics::VotesByCAType& VoteStatistics::
        getVotesByCA ()
        {
          return this->VotesByCA_.get ();
        }

        void VoteStatistics::
        setVotesByCA (const VotesByCAType& x)
        {
          this->VotesByCA_.set (x);
        }

        void VoteStatistics::
        setVotesByCA (::std::auto_ptr< VotesByCAType > x)
        {
          this->VotesByCA_.set (x);
        }


        // VotesByCA
        // 

        const VotesByCA::VoteByCASequence& VotesByCA::
        getVoteByCA () const
        {
          return this->VoteByCA_;
        }

        VotesByCA::VoteByCASequence& VotesByCA::
        getVoteByCA ()
        {
          return this->VoteByCA_;
        }

        void VotesByCA::
        setVoteByCA (const VoteByCASequence& s)
        {
          this->VoteByCA_ = s;
        }


        // VoteByCA
        // 

        const VoteByCA::VotesCounterType& VoteByCA::
        getVotesCounter () const
        {
          return this->VotesCounter_.get ();
        }

        VoteByCA::VotesCounterType& VoteByCA::
        getVotesCounter ()
        {
          return this->VotesCounter_.get ();
        }

        void VoteByCA::
        setVotesCounter (const VotesCounterType& x)
        {
          this->VotesCounter_.set (x);
        }

        const VoteByCA::CACodeType& VoteByCA::
        getCACode () const
        {
          return this->CACode_.get ();
        }

        VoteByCA::CACodeType& VoteByCA::
        getCACode ()
        {
          return this->CACode_.get ();
        }

        void VoteByCA::
        setCACode (const CACodeType& x)
        {
          this->CACode_.set (x);
        }

        void VoteByCA::
        setCACode (::std::auto_ptr< CACodeType > x)
        {
          this->CACode_.set (x);
        }

        const VoteByCA::CAValueType& VoteByCA::
        getCAValue () const
        {
          return this->CAValue_.get ();
        }

        VoteByCA::CAValueType& VoteByCA::
        getCAValue ()
        {
          return this->CAValue_.get ();
        }

        void VoteByCA::
        setCAValue (const CAValueType& x)
        {
          this->CAValue_.set (x);
        }

        void VoteByCA::
        setCAValue (::std::auto_ptr< CAValueType > x)
        {
          this->CAValue_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        // VoteStatistics
        //

        VoteStatistics::
        VoteStatistics ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          TotalVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSecurityVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalOfficialVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDemoVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSuperNullVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDuplicatedVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSimulatedVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VotesByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VoteStatistics::
        VoteStatistics (const TotalVotesType& TotalVotes,
                        const TotalSecurityVotesType& TotalSecurityVotes,
                        const TotalOfficialVotesType& TotalOfficialVotes,
                        const TotalDemoVotesType& TotalDemoVotes,
                        const TotalSuperNullVotesType& TotalSuperNullVotes,
                        const TotalDuplicatedVotesType& TotalDuplicatedVotes,
                        const VotesByCAType& VotesByCA)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          TotalVotes_ (TotalVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSecurityVotes_ (TotalSecurityVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalOfficialVotes_ (TotalOfficialVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDemoVotes_ (TotalDemoVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSuperNullVotes_ (TotalSuperNullVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDuplicatedVotes_ (TotalDuplicatedVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSimulatedVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VotesByCA_ (VotesByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VoteStatistics::
        VoteStatistics (const TotalVotesType& TotalVotes,
                        const TotalSecurityVotesType& TotalSecurityVotes,
                        const TotalOfficialVotesType& TotalOfficialVotes,
                        const TotalDemoVotesType& TotalDemoVotes,
                        const TotalSuperNullVotesType& TotalSuperNullVotes,
                        const TotalDuplicatedVotesType& TotalDuplicatedVotes,
                        ::std::auto_ptr< VotesByCAType >& VotesByCA)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          TotalVotes_ (TotalVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSecurityVotes_ (TotalSecurityVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalOfficialVotes_ (TotalOfficialVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDemoVotes_ (TotalDemoVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSuperNullVotes_ (TotalSuperNullVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalDuplicatedVotes_ (TotalDuplicatedVotes, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          TotalSimulatedVotes_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          VotesByCA_ (VotesByCA, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VoteStatistics::
        VoteStatistics (const VoteStatistics& x,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          TotalVotes_ (x.TotalVotes_, f, this),
          TotalSecurityVotes_ (x.TotalSecurityVotes_, f, this),
          TotalOfficialVotes_ (x.TotalOfficialVotes_, f, this),
          TotalDemoVotes_ (x.TotalDemoVotes_, f, this),
          TotalSuperNullVotes_ (x.TotalSuperNullVotes_, f, this),
          TotalDuplicatedVotes_ (x.TotalDuplicatedVotes_, f, this),
          TotalSimulatedVotes_ (x.TotalSimulatedVotes_, f, this),
          VotesByCA_ (x.VotesByCA_, f, this)
        {
        }

        VoteStatistics::
        VoteStatistics (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::PBReports::Flags f,
                        ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          TotalVotes_ (f, this),
          TotalSecurityVotes_ (f, this),
          TotalOfficialVotes_ (f, this),
          TotalDemoVotes_ (f, this),
          TotalSuperNullVotes_ (f, this),
          TotalDuplicatedVotes_ (f, this),
          TotalSimulatedVotes_ (f, this),
          VotesByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void VoteStatistics::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // TotalVotes
            //
            if (n.name () == "TotalVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalVotes_.present ())
              {
                this->TotalVotes_.set (TotalVotesTraits::create (i, f, this));
                continue;
              }
            }

            // TotalSecurityVotes
            //
            if (n.name () == "TotalSecurityVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalSecurityVotes_.present ())
              {
                this->TotalSecurityVotes_.set (TotalSecurityVotesTraits::create (i, f, this));
                continue;
              }
            }

            // TotalOfficialVotes
            //
            if (n.name () == "TotalOfficialVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalOfficialVotes_.present ())
              {
                this->TotalOfficialVotes_.set (TotalOfficialVotesTraits::create (i, f, this));
                continue;
              }
            }

            // TotalDemoVotes
            //
            if (n.name () == "TotalDemoVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalDemoVotes_.present ())
              {
                this->TotalDemoVotes_.set (TotalDemoVotesTraits::create (i, f, this));
                continue;
              }
            }

            // TotalSuperNullVotes
            //
            if (n.name () == "TotalSuperNullVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalSuperNullVotes_.present ())
              {
                this->TotalSuperNullVotes_.set (TotalSuperNullVotesTraits::create (i, f, this));
                continue;
              }
            }

            // TotalDuplicatedVotes
            //
            if (n.name () == "TotalDuplicatedVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!TotalDuplicatedVotes_.present ())
              {
                this->TotalDuplicatedVotes_.set (TotalDuplicatedVotesTraits::create (i, f, this));
                continue;
              }
            }

            // TotalSimulatedVotes
            //
            if (n.name () == "TotalSimulatedVotes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              if (!this->TotalSimulatedVotes_)
              {
                this->TotalSimulatedVotes_.set (TotalSimulatedVotesTraits::create (i, f, this));
                continue;
              }
            }

            // VotesByCA
            //
            if (n.name () == "VotesByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VotesByCAType > r (
                VotesByCATraits::create (i, f, this));

              if (!VotesByCA_.present ())
              {
                this->VotesByCA_.set (r);
                continue;
              }
            }

            break;
          }

          if (!TotalVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalSecurityVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalSecurityVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalOfficialVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalOfficialVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalDemoVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalDemoVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalSuperNullVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalSuperNullVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!TotalDuplicatedVotes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "TotalDuplicatedVotes",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }

          if (!VotesByCA_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "VotesByCA",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        VoteStatistics* VoteStatistics::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class VoteStatistics (*this, f, c);
        }

        VoteStatistics::
        ~VoteStatistics ()
        {
        }

        bool
        operator== (const VoteStatistics& x, const VoteStatistics& y)
        {
          if (!(x.getTotalVotes () == y.getTotalVotes ()))
            return false;

          if (!(x.getTotalSecurityVotes () == y.getTotalSecurityVotes ()))
            return false;

          if (!(x.getTotalOfficialVotes () == y.getTotalOfficialVotes ()))
            return false;

          if (!(x.getTotalDemoVotes () == y.getTotalDemoVotes ()))
            return false;

          if (!(x.getTotalSuperNullVotes () == y.getTotalSuperNullVotes ()))
            return false;

          if (!(x.getTotalDuplicatedVotes () == y.getTotalDuplicatedVotes ()))
            return false;

          if (!(x.getTotalSimulatedVotes () == y.getTotalSimulatedVotes ()))
            return false;

          if (!(x.getVotesByCA () == y.getVotesByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const VoteStatistics& x, const VoteStatistics& y)
        {
          return !(x == y);
        }

        // VotesByCA
        //

        VotesByCA::
        VotesByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          VoteByCA_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VotesByCA::
        VotesByCA (const VotesByCA& x,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          VoteByCA_ (x.VoteByCA_, f, this)
        {
        }

        VotesByCA::
        VotesByCA (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::PBReports::Flags f,
                   ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          VoteByCA_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void VotesByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // VoteByCA
            //
            if (n.name () == "VoteByCA" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
            {
              ::std::auto_ptr< VoteByCAType > r (
                VoteByCATraits::create (i, f, this));

              this->VoteByCA_.push_back (r);
              continue;
            }

            break;
          }
        }

        VotesByCA* VotesByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class VotesByCA (*this, f, c);
        }

        VotesByCA::
        ~VotesByCA ()
        {
        }

        bool
        operator== (const VotesByCA& x, const VotesByCA& y)
        {
          if (!(x.getVoteByCA () == y.getVoteByCA ()))
            return false;

          return true;
        }

        bool
        operator!= (const VotesByCA& x, const VotesByCA& y)
        {
          return !(x == y);
        }

        // VoteByCA
        //

        VoteByCA::
        VoteByCA ()
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          VotesCounter_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CACode_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CAValue_ (::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VoteByCA::
        VoteByCA (const VotesCounterType& VotesCounter,
                  const CACodeType& CACode,
                  const CAValueType& CAValue)
        : ::Smartmatic::SAES::Voting::PBReports::Type (),
          VotesCounter_ (VotesCounter, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CACode_ (CACode, ::Smartmatic::SAES::Voting::PBReports::Flags (), this),
          CAValue_ (CAValue, ::Smartmatic::SAES::Voting::PBReports::Flags (), this)
        {
        }

        VoteByCA::
        VoteByCA (const VoteByCA& x,
                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (x, f, c),
          VotesCounter_ (x.VotesCounter_, f, this),
          CACode_ (x.CACode_, f, this),
          CAValue_ (x.CAValue_, f, this)
        {
        }

        VoteByCA::
        VoteByCA (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::PBReports::Flags f,
                  ::Smartmatic::SAES::Voting::PBReports::Container* c)
        : ::Smartmatic::SAES::Voting::PBReports::Type (e, f | ::Smartmatic::SAES::Voting::PBReports::Flags::base, c),
          VotesCounter_ (f, this),
          CACode_ (f, this),
          CAValue_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void VoteByCA::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "VotesCounter" && n.namespace_ ().empty ())
            {
              this->VotesCounter_.set (VotesCounterTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "CACode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CACodeType > r (
                CACodeTraits::create (i, f, this));

              this->CACode_.set (r);
              continue;
            }

            if (n.name () == "CAValue" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CAValueType > r (
                CAValueTraits::create (i, f, this));

              this->CAValue_.set (r);
              continue;
            }
          }

          if (!VotesCounter_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "VotesCounter",
              "");
          }

          if (!CACode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CACode",
              "");
          }

          if (!CAValue_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "CAValue",
              "");
          }
        }

        VoteByCA* VoteByCA::
        _clone (::Smartmatic::SAES::Voting::PBReports::Flags f,
                ::Smartmatic::SAES::Voting::PBReports::Container* c) const
        {
          return new class VoteByCA (*this, f, c);
        }

        VoteByCA::
        ~VoteByCA ()
        {
        }

        bool
        operator== (const VoteByCA& x, const VoteByCA& y)
        {
          if (!(x.getVotesCounter () == y.getVotesCounter ()))
            return false;

          if (!(x.getCACode () == y.getCACode ()))
            return false;

          if (!(x.getCAValue () == y.getCAValue ()))
            return false;

          return true;
        }

        bool
        operator!= (const VoteByCA& x, const VoteByCA& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (const ::std::string& u,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (const ::std::string& u,
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::std::istream& is,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::std::istream& is,
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::std::istream& is,
                             const ::std::string& sid,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::std::istream& is,
                             const ::std::string& sid,
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::xercesc::InputSource& i,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::xercesc::InputSource& i,
                             ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
            ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
              d, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (const ::xercesc::DOMDocument& d,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
              ::Smartmatic::SAES::Voting::PBReports::parseVoteStatistics (
                c, f | ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VoteStatistics" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VoteStatistics",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics >
        parseVoteStatistics (::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::Smartmatic::SAES::Voting::PBReports::Flags f,
                             const ::Smartmatic::SAES::Voting::PBReports::Properties&)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::PBReports::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::PBReports::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::PBReports::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "VoteStatistics" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::PBReports::VoteStatistics, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "VoteStatistics",
            "http://www.smartmatic.com/Saes/Voting/PBReports");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace PBReports
      {
        void
        serializeVoteStatistics (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVoteStatistics (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::PBReports::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoteStatistics (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoteStatistics (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVoteStatistics (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 ::Smartmatic::SAES::Voting::PBReports::ErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoteStatistics (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoteStatistics (::xercesc::DOMDocument& d,
                                 const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "VoteStatistics" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/PBReports")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "VoteStatistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports");
          }
        }

        ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVoteStatistics (const ::Smartmatic::SAES::Voting::PBReports::VoteStatistics& s,
                                 const ::Smartmatic::SAES::Voting::PBReports::NamespaceInfomap& m,
                                 ::Smartmatic::SAES::Voting::PBReports::Flags f)
        {
          ::Smartmatic::SAES::Voting::PBReports::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "VoteStatistics",
              "http://www.smartmatic.com/Saes/Voting/PBReports",
              m, f));

          ::Smartmatic::SAES::Voting::PBReports::serializeVoteStatistics (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const VoteStatistics& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // TotalVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalVotes ();
          }

          // TotalSecurityVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalSecurityVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalSecurityVotes ();
          }

          // TotalOfficialVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalOfficialVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalOfficialVotes ();
          }

          // TotalDemoVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalDemoVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalDemoVotes ();
          }

          // TotalSuperNullVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalSuperNullVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalSuperNullVotes ();
          }

          // TotalDuplicatedVotes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalDuplicatedVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getTotalDuplicatedVotes ();
          }

          // TotalSimulatedVotes
          //
          if (i.getTotalSimulatedVotes ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "TotalSimulatedVotes",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *i.getTotalSimulatedVotes ();
          }

          // VotesByCA
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VotesByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << i.getVotesByCA ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VotesByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // VoteByCA
          //
          for (VotesByCA::VoteByCAConstIterator
               b (i.getVoteByCA ().begin ()), n (i.getVoteByCA ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "VoteByCA",
                "http://www.smartmatic.com/Saes/Voting/PBReports",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const VoteByCA& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::PBReports::Type& > (i);

          // VotesCounter
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "VotesCounter",
                e));

            a << i.getVotesCounter ();
          }

          // CACode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CACode",
                e));

            a << i.getCACode ();
          }

          // CAValue
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "CAValue",
                e));

            a << i.getCAValue ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

