// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "contingency-card-data-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        // ContingencyCardData
        // 

        const ContingencyCardData::PollingPlaceType& ContingencyCardData::
        getPollingPlace () const
        {
          return this->PollingPlace_.get ();
        }

        ContingencyCardData::PollingPlaceType& ContingencyCardData::
        getPollingPlace ()
        {
          return this->PollingPlace_.get ();
        }

        void ContingencyCardData::
        setPollingPlace (const PollingPlaceType& x)
        {
          this->PollingPlace_.set (x);
        }

        void ContingencyCardData::
        setPollingPlace (::std::auto_ptr< PollingPlaceType > x)
        {
          this->PollingPlace_.set (x);
        }

        const ContingencyCardData::PassphraseType& ContingencyCardData::
        getPassphrase () const
        {
          return this->Passphrase_.get ();
        }

        ContingencyCardData::PassphraseType& ContingencyCardData::
        getPassphrase ()
        {
          return this->Passphrase_.get ();
        }

        void ContingencyCardData::
        setPassphrase (const PassphraseType& x)
        {
          this->Passphrase_.set (x);
        }

        void ContingencyCardData::
        setPassphrase (::std::auto_ptr< PassphraseType > x)
        {
          this->Passphrase_.set (x);
        }

        const ContingencyCardData::OpeningCodeType& ContingencyCardData::
        getOpeningCode () const
        {
          return this->OpeningCode_.get ();
        }

        ContingencyCardData::OpeningCodeType& ContingencyCardData::
        getOpeningCode ()
        {
          return this->OpeningCode_.get ();
        }

        void ContingencyCardData::
        setOpeningCode (const OpeningCodeType& x)
        {
          this->OpeningCode_.set (x);
        }

        void ContingencyCardData::
        setOpeningCode (::std::auto_ptr< OpeningCodeType > x)
        {
          this->OpeningCode_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        // ContingencyCardData
        //

        ContingencyCardData::
        ContingencyCardData ()
        : ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Type (),
          PollingPlace_ (::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags (), this),
          Passphrase_ (::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags (), this),
          OpeningCode_ (::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags (), this)
        {
        }

        ContingencyCardData::
        ContingencyCardData (const PollingPlaceType& PollingPlace,
                             const PassphraseType& Passphrase,
                             const OpeningCodeType& OpeningCode)
        : ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Type (),
          PollingPlace_ (PollingPlace, ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags (), this),
          Passphrase_ (Passphrase, ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags (), this),
          OpeningCode_ (OpeningCode, ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags (), this)
        {
        }

        ContingencyCardData::
        ContingencyCardData (const ContingencyCardData& x,
                             ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                             ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Type (x, f, c),
          PollingPlace_ (x.PollingPlace_, f, this),
          Passphrase_ (x.Passphrase_, f, this),
          OpeningCode_ (x.OpeningCode_, f, this)
        {
        }

        ContingencyCardData::
        ContingencyCardData (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                             ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Type (e, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::base, c),
          PollingPlace_ (f, this),
          Passphrase_ (f, this),
          OpeningCode_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void ContingencyCardData::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // PollingPlace
            //
            if (n.name () == "PollingPlace" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< PollingPlaceType > r (
                PollingPlaceTraits::create (i, f, this));

              if (!PollingPlace_.present ())
              {
                this->PollingPlace_.set (r);
                continue;
              }
            }

            // Passphrase
            //
            if (n.name () == "Passphrase" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< PassphraseType > r (
                PassphraseTraits::create (i, f, this));

              if (!Passphrase_.present ())
              {
                this->Passphrase_.set (r);
                continue;
              }
            }

            // OpeningCode
            //
            if (n.name () == "OpeningCode" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< OpeningCodeType > r (
                OpeningCodeTraits::create (i, f, this));

              if (!OpeningCode_.present ())
              {
                this->OpeningCode_.set (r);
                continue;
              }
            }

            break;
          }

          if (!PollingPlace_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "PollingPlace",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!Passphrase_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "Passphrase",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!OpeningCode_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "OpeningCode",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }
        }

        ContingencyCardData* ContingencyCardData::
        _clone (::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Container* c) const
        {
          return new class ContingencyCardData (*this, f, c);
        }

        ContingencyCardData::
        ~ContingencyCardData ()
        {
        }

        bool
        operator== (const ContingencyCardData& x, const ContingencyCardData& y)
        {
          if (!(x.getPollingPlace () == y.getPollingPlace ()))
            return false;

          if (!(x.getPassphrase () == y.getPassphrase ()))
            return false;

          if (!(x.getOpeningCode () == y.getOpeningCode ()))
            return false;

          return true;
        }

        bool
        operator!= (const ContingencyCardData& x, const ContingencyCardData& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (const ::std::string& u,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
              d, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (const ::std::string& u,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
              d, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
              d, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::std::istream& is,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::std::istream& is,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::std::istream& is,
                                  const ::std::string& sid,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::xercesc::InputSource& i,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
              d, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::xercesc::InputSource& i,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::ErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
              d, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
              d, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (const ::xercesc::DOMDocument& d,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
              ::Smartmatic::SAES::Voting::VotingDevice::parseContingencyCardData (
                c, f | ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "ContingencyCardData" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ContingencyCardData",
            "http://www.smartmatic.com/Saes/Voting/VotingDevice");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData >
        parseContingencyCardData (::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f,
                                  const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "ContingencyCardData" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ContingencyCardData",
            "http://www.smartmatic.com/Saes/Voting/VotingDevice");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        void
        serializeContingencyCardData (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeContingencyCardData (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::ErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeContingencyCardData (::std::ostream& o,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeContingencyCardData (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeContingencyCardData (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::ErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeContingencyCardData (::xercesc::XMLFormatTarget& t,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      ::xercesc::DOMErrorHandler& h,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      const ::std::string& e,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeContingencyCardData (::xercesc::DOMDocument& d,
                                      const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "ContingencyCardData" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "ContingencyCardData",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }
        }

        ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeContingencyCardData (const ::Smartmatic::SAES::Voting::VotingDevice::ContingencyCardData& s,
                                      const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::NamespaceInfomap& m,
                                      ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "ContingencyCardData",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice",
              m, f));

          ::Smartmatic::SAES::Voting::VotingDevice::serializeContingencyCardData (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const ContingencyCardData& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ContingencyCardDataTypes::Type& > (i);

          // PollingPlace
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PollingPlace",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getPollingPlace ();
          }

          // Passphrase
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Passphrase",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getPassphrase ();
          }

          // OpeningCode
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "OpeningCode",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getOpeningCode ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

