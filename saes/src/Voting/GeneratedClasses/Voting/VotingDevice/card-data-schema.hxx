// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from card-data-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_CARD_DATA_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_CARD_DATA_SCHEMA_HXX

// Begin prologue.
//
#include "voting-devices-schema.hxx"
#include <Voting/Vote/vote-schema.hxx>
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace CardDataTypes
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__CARDDATATYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__CARDDATATYPES
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        typedef Smartmatic::SAES::Voting::Vote::Vote Vote;
        typedef Smartmatic::SAES::Voting::Vote::VoteMode VoteMode;
        class Card_data;
        typedef Smartmatic::SAES::Voting::Vote::Selection S;
        class Logical_voter_group;
        class Card_type;
        class Card_status;
        class Custom_attributes;
        class Custom_attribute;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/VotingDevice
       * schema namespace.
       */
      namespace VotingDevice
      {
        /**
         * @brief Class corresponding to the %card-data schema type.
         *
         * @nosubgrouping
         */
        class Card_data: public ::Smartmatic::SAES::Voting::CardDataTypes::Type
        {
          public:
          /**
           * @name logical-voter-group
           *
           * @brief Accessor and modifier functions for the %logical-voter-group
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Logical_voter_group Logical_voter_groupType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_groupType, char > Logical_voter_groupTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Logical_voter_groupType&
          getLogical_voter_group () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Logical_voter_groupType&
          getLogical_voter_group ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogical_voter_group (const Logical_voter_groupType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogical_voter_group (::std::auto_ptr< Logical_voter_groupType > p);

          //@}

          /**
           * @name vote
           *
           * @brief Accessor and modifier functions for the %vote
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Vote VoteType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< VoteType > VoteOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< VoteType, char > VoteTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const VoteOptional&
          getVote () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          VoteOptional&
          getVote ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVote (const VoteType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setVote (const VoteOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setVote (::std::auto_ptr< VoteType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::CardDataTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name IsAudio
           *
           * @brief Accessor and modifier functions for the %IsAudio
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::CardDataTypes::Boolean IsAudioType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< IsAudioType, char > IsAudioTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const IsAudioType&
          getIsAudio () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          IsAudioType&
          getIsAudio ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setIsAudio (const IsAudioType& x);

          //@}

          /**
           * @name card-type
           *
           * @brief Accessor and modifier functions for the %card-type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Card_type Card_typeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Card_typeType, char > Card_typeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Card_typeType&
          getCard_type () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Card_typeType&
          getCard_type ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCard_type (const Card_typeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCard_type (::std::auto_ptr< Card_typeType > p);

          //@}

          /**
           * @name card-status
           *
           * @brief Accessor and modifier functions for the %card-status
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Card_status Card_statusType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Card_statusType, char > Card_statusTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Card_statusType&
          getCard_status () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Card_statusType&
          getCard_status ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCard_status (const Card_statusType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCard_status (::std::auto_ptr< Card_statusType > p);

          //@}

          /**
           * @name activation-code
           *
           * @brief Accessor and modifier functions for the %activation-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::CardDataTypes::String Activation_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Activation_codeType, char > Activation_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Activation_codeType&
          getActivation_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Activation_codeType&
          getActivation_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setActivation_code (const Activation_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setActivation_code (::std::auto_ptr< Activation_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Card_data ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Card_data (const Logical_voter_groupType&,
                     const CodeType&,
                     const IsAudioType&,
                     const Card_typeType&,
                     const Card_statusType&,
                     const Activation_codeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Card_data (::std::auto_ptr< Logical_voter_groupType >&,
                     const CodeType&,
                     const IsAudioType&,
                     const Card_typeType&,
                     const Card_statusType&,
                     const Activation_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_data (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Card_data (const Card_data& x,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Card_data*
          _clone (::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Card_data ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::CardDataTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Logical_voter_groupType > logical_voter_group_;
          VoteOptional vote_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< IsAudioType > IsAudio_;
          ::xsd::cxx::tree::one< Card_typeType > card_type_;
          ::xsd::cxx::tree::one< Card_statusType > card_status_;
          ::xsd::cxx::tree::one< Activation_codeType > activation_code_;

          //@endcond
        };

        bool
        operator== (const Card_data&, const Card_data&);

        bool
        operator!= (const Card_data&, const Card_data&);


        /**
         * @brief Enumeration class corresponding to the %card-type
         * schema type.
         */
        class Card_type: public ::Smartmatic::SAES::Voting::CardDataTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CARD_DATA_OFFICIAL_VOTE_CARD,
            CARD_DATA_DEMOSTRATION_VOTE_CARD,
            CARD_DATA_RECOVERY_VOTE_CARD
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Card_type ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Card_type (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Card_type (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Card_type (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Card_type (const ::Smartmatic::SAES::Voting::CardDataTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_type (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_type (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_type (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Card_type (const Card_type& x,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Card_type*
          _clone (::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Card_type&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Card_type_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Card_type_convert () const;

          public:
          static const char* const _xsd_Card_type_literals_[3];
          static const Value _xsd_Card_type_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %card-status
         * schema type.
         */
        class Card_status: public ::Smartmatic::SAES::Voting::CardDataTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            CARD_DATA_USED,
            CARD_DATA_NOT_USED,
            CARD_DATA_SIMULATED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Card_status ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Card_status (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Card_status (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Card_status (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Card_status (const ::Smartmatic::SAES::Voting::CardDataTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_status (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_status (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Card_status (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Card_status (const Card_status& x,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                       ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Card_status*
          _clone (::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::CardDataTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Card_status&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Card_status_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Card_status_convert () const;

          public:
          static const char* const _xsd_Card_status_literals_[3];
          static const Value _xsd_Card_status_indexes_[3];

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        /**
         * @name Parsing functions for the %card-data document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::std::string& uri,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::std::string& uri,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        const ::std::string& id,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        const ::std::string& id,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::xercesc::InputSource& is,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::xercesc::InputSource& is,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::xercesc::DOMDocument& d,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p = ::Smartmatic::SAES::Voting::CardDataTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        /**
         * @name Serialization functions for the %card-data document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeCard_data (::std::ostream& os,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeCard_data (::std::ostream& os,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& eh,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeCard_data (::std::ostream& os,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeCard_data (::xercesc::XMLFormatTarget& ft,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeCard_data (::xercesc::XMLFormatTarget& ft,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& eh,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeCard_data (::xercesc::XMLFormatTarget& ft,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            const ::std::string& e = "UTF-8",
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeCard_data (::xercesc::DOMDocument& d,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeCard_data (const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& x, 
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap (),
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const Card_data&);

        void
        operator<< (::xercesc::DOMElement&, const Card_type&);

        void
        operator<< (::xercesc::DOMAttr&, const Card_type&);

        void
        operator<< (::Smartmatic::SAES::Voting::CardDataTypes::ListStream&,
                    const Card_type&);

        void
        operator<< (::xercesc::DOMElement&, const Card_status&);

        void
        operator<< (::xercesc::DOMAttr&, const Card_status&);

        void
        operator<< (::Smartmatic::SAES::Voting::CardDataTypes::ListStream&,
                    const Card_status&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_CARD_DATA_SCHEMA_HXX
