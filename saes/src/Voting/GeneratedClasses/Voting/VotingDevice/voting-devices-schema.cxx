// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "voting-devices-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        // Region_category
        // 

        const Region_category::RegionType& Region_category::
        getRegion () const
        {
          return this->region_.get ();
        }

        Region_category::RegionType& Region_category::
        getRegion ()
        {
          return this->region_.get ();
        }

        void Region_category::
        setRegion (const RegionType& x)
        {
          this->region_.set (x);
        }

        void Region_category::
        setRegion (::std::auto_ptr< RegionType > x)
        {
          this->region_.set (x);
        }

        const Region_category::CategoryOptional& Region_category::
        getCategory () const
        {
          return this->category_;
        }

        Region_category::CategoryOptional& Region_category::
        getCategory ()
        {
          return this->category_;
        }

        void Region_category::
        setCategory (const CategoryType& x)
        {
          this->category_.set (x);
        }

        void Region_category::
        setCategory (const CategoryOptional& x)
        {
          this->category_ = x;
        }

        void Region_category::
        setCategory (::std::auto_ptr< CategoryType > x)
        {
          this->category_.set (x);
        }

        const Region_category::CodeType& Region_category::
        getCode () const
        {
          return this->code_.get ();
        }

        Region_category::CodeType& Region_category::
        getCode ()
        {
          return this->code_.get ();
        }

        void Region_category::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Region_category::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Region_category::Name_keyType& Region_category::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Region_category::Name_keyType& Region_category::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Region_category::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Region_category::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Region_category::Category_levelOptional& Region_category::
        getCategory_level () const
        {
          return this->category_level_;
        }

        Region_category::Category_levelOptional& Region_category::
        getCategory_level ()
        {
          return this->category_level_;
        }

        void Region_category::
        setCategory_level (const Category_levelType& x)
        {
          this->category_level_.set (x);
        }

        void Region_category::
        setCategory_level (const Category_levelOptional& x)
        {
          this->category_level_ = x;
        }

        void Region_category::
        setCategory_level (::std::auto_ptr< Category_levelType > x)
        {
          this->category_level_.set (x);
        }


        // Custom_date_time
        // 


        // Time_zone_date
        // 

        const Time_zone_date::MonthType& Time_zone_date::
        getMonth () const
        {
          return this->month_.get ();
        }

        Time_zone_date::MonthType& Time_zone_date::
        getMonth ()
        {
          return this->month_.get ();
        }

        void Time_zone_date::
        setMonth (const MonthType& x)
        {
          this->month_.set (x);
        }

        const Time_zone_date::DayType& Time_zone_date::
        getDay () const
        {
          return this->day_.get ();
        }

        Time_zone_date::DayType& Time_zone_date::
        getDay ()
        {
          return this->day_.get ();
        }

        void Time_zone_date::
        setDay (const DayType& x)
        {
          this->day_.set (x);
        }

        const Time_zone_date::HourType& Time_zone_date::
        getHour () const
        {
          return this->hour_.get ();
        }

        Time_zone_date::HourType& Time_zone_date::
        getHour ()
        {
          return this->hour_.get ();
        }

        void Time_zone_date::
        setHour (const HourType& x)
        {
          this->hour_.set (x);
        }

        const Time_zone_date::MinuteType& Time_zone_date::
        getMinute () const
        {
          return this->minute_.get ();
        }

        Time_zone_date::MinuteType& Time_zone_date::
        getMinute ()
        {
          return this->minute_.get ();
        }

        void Time_zone_date::
        setMinute (const MinuteType& x)
        {
          this->minute_.set (x);
        }

        const Time_zone_date::SecondType& Time_zone_date::
        getSecond () const
        {
          return this->second_.get ();
        }

        Time_zone_date::SecondType& Time_zone_date::
        getSecond ()
        {
          return this->second_.get ();
        }

        void Time_zone_date::
        setSecond (const SecondType& x)
        {
          this->second_.set (x);
        }


        // Functionality
        // 

        Functionality::
        Functionality ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ()
        {
        }

        Functionality::
        Functionality (Value v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Functionality_literals_[v])
        {
        }

        Functionality::
        Functionality (const char* v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Functionality::
        Functionality (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Functionality::
        Functionality (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Functionality::
        Functionality (const Functionality& v,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v, f, c)
        {
        }

        Functionality& Functionality::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Functionality_literals_[v]);

          return *this;
        }


        // CategoryLevel
        // 

        CategoryLevel::
        CategoryLevel ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ()
        {
        }

        CategoryLevel::
        CategoryLevel (Value v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_CategoryLevel_literals_[v])
        {
        }

        CategoryLevel::
        CategoryLevel (const char* v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        CategoryLevel::
        CategoryLevel (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        CategoryLevel::
        CategoryLevel (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        CategoryLevel::
        CategoryLevel (const CategoryLevel& v,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v, f, c)
        {
        }

        CategoryLevel& CategoryLevel::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_CategoryLevel_literals_[v]);

          return *this;
        }


        // Voting_devices
        // 

        const Voting_devices::Voting_deviceSequence& Voting_devices::
        getVoting_device () const
        {
          return this->voting_device_;
        }

        Voting_devices::Voting_deviceSequence& Voting_devices::
        getVoting_device ()
        {
          return this->voting_device_;
        }

        void Voting_devices::
        setVoting_device (const Voting_deviceSequence& s)
        {
          this->voting_device_ = s;
        }

        const Voting_devices::LanguagesOptional& Voting_devices::
        getLanguages () const
        {
          return this->languages_;
        }

        Voting_devices::LanguagesOptional& Voting_devices::
        getLanguages ()
        {
          return this->languages_;
        }

        void Voting_devices::
        setLanguages (const LanguagesType& x)
        {
          this->languages_.set (x);
        }

        void Voting_devices::
        setLanguages (const LanguagesOptional& x)
        {
          this->languages_ = x;
        }

        void Voting_devices::
        setLanguages (::std::auto_ptr< LanguagesType > x)
        {
          this->languages_.set (x);
        }


        // Region
        // 

        const Region::CodeType& Region::
        getCode () const
        {
          return this->code_.get ();
        }

        Region::CodeType& Region::
        getCode ()
        {
          return this->code_.get ();
        }

        void Region::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Region::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Region::Name_keyType& Region::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Region::Name_keyType& Region::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Region::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Region::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }


        // Voting_device
        // 

        const Voting_device::KeysType& Voting_device::
        getKeys () const
        {
          return this->keys_.get ();
        }

        Voting_device::KeysType& Voting_device::
        getKeys ()
        {
          return this->keys_.get ();
        }

        void Voting_device::
        setKeys (const KeysType& x)
        {
          this->keys_.set (x);
        }

        void Voting_device::
        setKeys (::std::auto_ptr< KeysType > x)
        {
          this->keys_.set (x);
        }

        const Voting_device::Operation_modesType& Voting_device::
        getOperation_modes () const
        {
          return this->operation_modes_.get ();
        }

        Voting_device::Operation_modesType& Voting_device::
        getOperation_modes ()
        {
          return this->operation_modes_.get ();
        }

        void Voting_device::
        setOperation_modes (const Operation_modesType& x)
        {
          this->operation_modes_.set (x);
        }

        void Voting_device::
        setOperation_modes (::std::auto_ptr< Operation_modesType > x)
        {
          this->operation_modes_.set (x);
        }

        const Voting_device::Voting_boothsType& Voting_device::
        getVoting_booths () const
        {
          return this->voting_booths_.get ();
        }

        Voting_device::Voting_boothsType& Voting_device::
        getVoting_booths ()
        {
          return this->voting_booths_.get ();
        }

        void Voting_device::
        setVoting_booths (const Voting_boothsType& x)
        {
          this->voting_booths_.set (x);
        }

        void Voting_device::
        setVoting_booths (::std::auto_ptr< Voting_boothsType > x)
        {
          this->voting_booths_.set (x);
        }

        const Voting_device::Logical_voter_groupsType& Voting_device::
        getLogical_voter_groups () const
        {
          return this->logical_voter_groups_.get ();
        }

        Voting_device::Logical_voter_groupsType& Voting_device::
        getLogical_voter_groups ()
        {
          return this->logical_voter_groups_.get ();
        }

        void Voting_device::
        setLogical_voter_groups (const Logical_voter_groupsType& x)
        {
          this->logical_voter_groups_.set (x);
        }

        void Voting_device::
        setLogical_voter_groups (::std::auto_ptr< Logical_voter_groupsType > x)
        {
          this->logical_voter_groups_.set (x);
        }

        const Voting_device::Tally_reportsType& Voting_device::
        getTally_reports () const
        {
          return this->tally_reports_.get ();
        }

        Voting_device::Tally_reportsType& Voting_device::
        getTally_reports ()
        {
          return this->tally_reports_.get ();
        }

        void Voting_device::
        setTally_reports (const Tally_reportsType& x)
        {
          this->tally_reports_.set (x);
        }

        void Voting_device::
        setTally_reports (::std::auto_ptr< Tally_reportsType > x)
        {
          this->tally_reports_.set (x);
        }

        const Voting_device::CodeType& Voting_device::
        getCode () const
        {
          return this->code_.get ();
        }

        Voting_device::CodeType& Voting_device::
        getCode ()
        {
          return this->code_.get ();
        }

        void Voting_device::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Voting_device::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Voting_device::Custom_codeType& Voting_device::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Voting_device::Custom_codeType& Voting_device::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Voting_device::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Voting_device::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }


        // Keys
        // 

        const Keys::Transmission_keyType& Keys::
        getTransmission_key () const
        {
          return this->transmission_key_.get ();
        }

        Keys::Transmission_keyType& Keys::
        getTransmission_key ()
        {
          return this->transmission_key_.get ();
        }

        void Keys::
        setTransmission_key (const Transmission_keyType& x)
        {
          this->transmission_key_.set (x);
        }

        void Keys::
        setTransmission_key (::std::auto_ptr< Transmission_keyType > x)
        {
          this->transmission_key_.set (x);
        }

        const Keys::Protection_keyType& Keys::
        getProtection_key () const
        {
          return this->protection_key_.get ();
        }

        Keys::Protection_keyType& Keys::
        getProtection_key ()
        {
          return this->protection_key_.get ();
        }

        void Keys::
        setProtection_key (const Protection_keyType& x)
        {
          this->protection_key_.set (x);
        }

        void Keys::
        setProtection_key (::std::auto_ptr< Protection_keyType > x)
        {
          this->protection_key_.set (x);
        }

        const Keys::Backup_zip_file_passwordType& Keys::
        getBackup_zip_file_password () const
        {
          return this->backup_zip_file_password_.get ();
        }

        Keys::Backup_zip_file_passwordType& Keys::
        getBackup_zip_file_password ()
        {
          return this->backup_zip_file_password_.get ();
        }

        void Keys::
        setBackup_zip_file_password (const Backup_zip_file_passwordType& x)
        {
          this->backup_zip_file_password_.set (x);
        }

        void Keys::
        setBackup_zip_file_password (::std::auto_ptr< Backup_zip_file_passwordType > x)
        {
          this->backup_zip_file_password_.set (x);
        }


        // Operation_modes
        // 

        const Operation_modes::Operation_modeSequence& Operation_modes::
        getOperation_mode () const
        {
          return this->operation_mode_;
        }

        Operation_modes::Operation_modeSequence& Operation_modes::
        getOperation_mode ()
        {
          return this->operation_mode_;
        }

        void Operation_modes::
        setOperation_mode (const Operation_modeSequence& s)
        {
          this->operation_mode_ = s;
        }


        // Voting_booths
        // 

        const Voting_booths::Voting_boothSequence& Voting_booths::
        getVoting_booth () const
        {
          return this->voting_booth_;
        }

        Voting_booths::Voting_boothSequence& Voting_booths::
        getVoting_booth ()
        {
          return this->voting_booth_;
        }

        void Voting_booths::
        setVoting_booth (const Voting_boothSequence& s)
        {
          this->voting_booth_ = s;
        }


        // Logical_voter_groups
        // 

        const Logical_voter_groups::Logical_voter_groupSequence& Logical_voter_groups::
        getLogical_voter_group () const
        {
          return this->logical_voter_group_;
        }

        Logical_voter_groups::Logical_voter_groupSequence& Logical_voter_groups::
        getLogical_voter_group ()
        {
          return this->logical_voter_group_;
        }

        void Logical_voter_groups::
        setLogical_voter_group (const Logical_voter_groupSequence& s)
        {
          this->logical_voter_group_ = s;
        }

        const Logical_voter_groups::Custom_attribute_definitionsOptional& Logical_voter_groups::
        getCustom_attribute_definitions () const
        {
          return this->custom_attribute_definitions_;
        }

        Logical_voter_groups::Custom_attribute_definitionsOptional& Logical_voter_groups::
        getCustom_attribute_definitions ()
        {
          return this->custom_attribute_definitions_;
        }

        void Logical_voter_groups::
        setCustom_attribute_definitions (const Custom_attribute_definitionsType& x)
        {
          this->custom_attribute_definitions_.set (x);
        }

        void Logical_voter_groups::
        setCustom_attribute_definitions (const Custom_attribute_definitionsOptional& x)
        {
          this->custom_attribute_definitions_ = x;
        }

        void Logical_voter_groups::
        setCustom_attribute_definitions (::std::auto_ptr< Custom_attribute_definitionsType > x)
        {
          this->custom_attribute_definitions_.set (x);
        }


        // Tally_reports
        // 

        const Tally_reports::Tally_reportSequence& Tally_reports::
        getTally_report () const
        {
          return this->tally_report_;
        }

        Tally_reports::Tally_reportSequence& Tally_reports::
        getTally_report ()
        {
          return this->tally_report_;
        }

        void Tally_reports::
        setTally_report (const Tally_reportSequence& s)
        {
          this->tally_report_ = s;
        }


        // Operation_mode
        // 

        const Operation_mode::RolesType& Operation_mode::
        getRoles () const
        {
          return this->roles_.get ();
        }

        Operation_mode::RolesType& Operation_mode::
        getRoles ()
        {
          return this->roles_.get ();
        }

        void Operation_mode::
        setRoles (const RolesType& x)
        {
          this->roles_.set (x);
        }

        void Operation_mode::
        setRoles (::std::auto_ptr< RolesType > x)
        {
          this->roles_.set (x);
        }

        const Operation_mode::Operation_mode_transitionsOptional& Operation_mode::
        getOperation_mode_transitions () const
        {
          return this->operation_mode_transitions_;
        }

        Operation_mode::Operation_mode_transitionsOptional& Operation_mode::
        getOperation_mode_transitions ()
        {
          return this->operation_mode_transitions_;
        }

        void Operation_mode::
        setOperation_mode_transitions (const Operation_mode_transitionsType& x)
        {
          this->operation_mode_transitions_.set (x);
        }

        void Operation_mode::
        setOperation_mode_transitions (const Operation_mode_transitionsOptional& x)
        {
          this->operation_mode_transitions_ = x;
        }

        void Operation_mode::
        setOperation_mode_transitions (::std::auto_ptr< Operation_mode_transitionsType > x)
        {
          this->operation_mode_transitions_.set (x);
        }

        const Operation_mode::Operation_mode_behaviorsType& Operation_mode::
        getOperation_mode_behaviors () const
        {
          return this->operation_mode_behaviors_.get ();
        }

        Operation_mode::Operation_mode_behaviorsType& Operation_mode::
        getOperation_mode_behaviors ()
        {
          return this->operation_mode_behaviors_.get ();
        }

        void Operation_mode::
        setOperation_mode_behaviors (const Operation_mode_behaviorsType& x)
        {
          this->operation_mode_behaviors_.set (x);
        }

        void Operation_mode::
        setOperation_mode_behaviors (::std::auto_ptr< Operation_mode_behaviorsType > x)
        {
          this->operation_mode_behaviors_.set (x);
        }

        const Operation_mode::CodeType& Operation_mode::
        getCode () const
        {
          return this->code_.get ();
        }

        Operation_mode::CodeType& Operation_mode::
        getCode ()
        {
          return this->code_.get ();
        }

        void Operation_mode::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Operation_mode::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Operation_mode::Custom_codeType& Operation_mode::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Operation_mode::Custom_codeType& Operation_mode::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Operation_mode::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Operation_mode::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Operation_mode::Name_keyType& Operation_mode::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Operation_mode::Name_keyType& Operation_mode::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Operation_mode::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Operation_mode::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Operation_mode::Description_keyType& Operation_mode::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        Operation_mode::Description_keyType& Operation_mode::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void Operation_mode::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void Operation_mode::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }

        const Operation_mode::Folder_nameType& Operation_mode::
        getFolder_name () const
        {
          return this->folder_name_.get ();
        }

        Operation_mode::Folder_nameType& Operation_mode::
        getFolder_name ()
        {
          return this->folder_name_.get ();
        }

        void Operation_mode::
        setFolder_name (const Folder_nameType& x)
        {
          this->folder_name_.set (x);
        }

        void Operation_mode::
        setFolder_name (::std::auto_ptr< Folder_nameType > x)
        {
          this->folder_name_.set (x);
        }

        const Operation_mode::DefaultType& Operation_mode::
        getDefault () const
        {
          return this->default__.get ();
        }

        Operation_mode::DefaultType& Operation_mode::
        getDefault ()
        {
          return this->default__.get ();
        }

        void Operation_mode::
        setDefault (const DefaultType& x)
        {
          this->default__.set (x);
        }

        const Operation_mode::Unblocking_keyType& Operation_mode::
        getUnblocking_key () const
        {
          return this->unblocking_key_.get ();
        }

        Operation_mode::Unblocking_keyType& Operation_mode::
        getUnblocking_key ()
        {
          return this->unblocking_key_.get ();
        }

        void Operation_mode::
        setUnblocking_key (const Unblocking_keyType& x)
        {
          this->unblocking_key_.set (x);
        }

        void Operation_mode::
        setUnblocking_key (::std::auto_ptr< Unblocking_keyType > x)
        {
          this->unblocking_key_.set (x);
        }

        const Operation_mode::Audio_unblocking_keyType& Operation_mode::
        getAudio_unblocking_key () const
        {
          return this->audio_unblocking_key_.get ();
        }

        Operation_mode::Audio_unblocking_keyType& Operation_mode::
        getAudio_unblocking_key ()
        {
          return this->audio_unblocking_key_.get ();
        }

        void Operation_mode::
        setAudio_unblocking_key (const Audio_unblocking_keyType& x)
        {
          this->audio_unblocking_key_.set (x);
        }

        void Operation_mode::
        setAudio_unblocking_key (::std::auto_ptr< Audio_unblocking_keyType > x)
        {
          this->audio_unblocking_key_.set (x);
        }

        const Operation_mode::Scanner_unblocking_keyType& Operation_mode::
        getScanner_unblocking_key () const
        {
          return this->scanner_unblocking_key_.get ();
        }

        Operation_mode::Scanner_unblocking_keyType& Operation_mode::
        getScanner_unblocking_key ()
        {
          return this->scanner_unblocking_key_.get ();
        }

        void Operation_mode::
        setScanner_unblocking_key (const Scanner_unblocking_keyType& x)
        {
          this->scanner_unblocking_key_.set (x);
        }

        void Operation_mode::
        setScanner_unblocking_key (::std::auto_ptr< Scanner_unblocking_keyType > x)
        {
          this->scanner_unblocking_key_.set (x);
        }

        const Operation_mode::Synchronization_unblocking_keyType& Operation_mode::
        getSynchronization_unblocking_key () const
        {
          return this->synchronization_unblocking_key_.get ();
        }

        Operation_mode::Synchronization_unblocking_keyType& Operation_mode::
        getSynchronization_unblocking_key ()
        {
          return this->synchronization_unblocking_key_.get ();
        }

        void Operation_mode::
        setSynchronization_unblocking_key (const Synchronization_unblocking_keyType& x)
        {
          this->synchronization_unblocking_key_.set (x);
        }

        void Operation_mode::
        setSynchronization_unblocking_key (::std::auto_ptr< Synchronization_unblocking_keyType > x)
        {
          this->synchronization_unblocking_key_.set (x);
        }

        const Operation_mode::Opening_date_timeType& Operation_mode::
        getOpening_date_time () const
        {
          return this->opening_date_time_.get ();
        }

        Operation_mode::Opening_date_timeType& Operation_mode::
        getOpening_date_time ()
        {
          return this->opening_date_time_.get ();
        }

        void Operation_mode::
        setOpening_date_time (const Opening_date_timeType& x)
        {
          this->opening_date_time_.set (x);
        }

        void Operation_mode::
        setOpening_date_time (::std::auto_ptr< Opening_date_timeType > x)
        {
          this->opening_date_time_.set (x);
        }

        const Operation_mode::Closing_date_timeType& Operation_mode::
        getClosing_date_time () const
        {
          return this->closing_date_time_.get ();
        }

        Operation_mode::Closing_date_timeType& Operation_mode::
        getClosing_date_time ()
        {
          return this->closing_date_time_.get ();
        }

        void Operation_mode::
        setClosing_date_time (const Closing_date_timeType& x)
        {
          this->closing_date_time_.set (x);
        }

        void Operation_mode::
        setClosing_date_time (::std::auto_ptr< Closing_date_timeType > x)
        {
          this->closing_date_time_.set (x);
        }


        // Voting_booth
        // 

        const Voting_booth::Region_hierarchiesType& Voting_booth::
        getRegion_hierarchies () const
        {
          return this->region_hierarchies_.get ();
        }

        Voting_booth::Region_hierarchiesType& Voting_booth::
        getRegion_hierarchies ()
        {
          return this->region_hierarchies_.get ();
        }

        void Voting_booth::
        setRegion_hierarchies (const Region_hierarchiesType& x)
        {
          this->region_hierarchies_.set (x);
        }

        void Voting_booth::
        setRegion_hierarchies (::std::auto_ptr< Region_hierarchiesType > x)
        {
          this->region_hierarchies_.set (x);
        }

        const Voting_booth::Time_zone_informationType& Voting_booth::
        getTime_zone_information () const
        {
          return this->time_zone_information_.get ();
        }

        Voting_booth::Time_zone_informationType& Voting_booth::
        getTime_zone_information ()
        {
          return this->time_zone_information_.get ();
        }

        void Voting_booth::
        setTime_zone_information (const Time_zone_informationType& x)
        {
          this->time_zone_information_.set (x);
        }

        void Voting_booth::
        setTime_zone_information (::std::auto_ptr< Time_zone_informationType > x)
        {
          this->time_zone_information_.set (x);
        }

        const Voting_booth::Custom_codeType& Voting_booth::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Voting_booth::Custom_codeType& Voting_booth::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Voting_booth::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Voting_booth::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Voting_booth::CodeType& Voting_booth::
        getCode () const
        {
          return this->code_.get ();
        }

        Voting_booth::CodeType& Voting_booth::
        getCode ()
        {
          return this->code_.get ();
        }

        void Voting_booth::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Voting_booth::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Voting_booth::NumberType& Voting_booth::
        getNumber () const
        {
          return this->number_.get ();
        }

        Voting_booth::NumberType& Voting_booth::
        getNumber ()
        {
          return this->number_.get ();
        }

        void Voting_booth::
        setNumber (const NumberType& x)
        {
          this->number_.set (x);
        }

        void Voting_booth::
        setNumber (::std::auto_ptr< NumberType > x)
        {
          this->number_.set (x);
        }

        const Voting_booth::Registered_electorsType& Voting_booth::
        getRegistered_electors () const
        {
          return this->registered_electors_.get ();
        }

        Voting_booth::Registered_electorsType& Voting_booth::
        getRegistered_electors ()
        {
          return this->registered_electors_.get ();
        }

        void Voting_booth::
        setRegistered_electors (const Registered_electorsType& x)
        {
          this->registered_electors_.set (x);
        }

        const Voting_booth::Polling_station_codeType& Voting_booth::
        getPolling_station_code () const
        {
          return this->polling_station_code_.get ();
        }

        Voting_booth::Polling_station_codeType& Voting_booth::
        getPolling_station_code ()
        {
          return this->polling_station_code_.get ();
        }

        void Voting_booth::
        setPolling_station_code (const Polling_station_codeType& x)
        {
          this->polling_station_code_.set (x);
        }

        void Voting_booth::
        setPolling_station_code (::std::auto_ptr< Polling_station_codeType > x)
        {
          this->polling_station_code_.set (x);
        }

        const Voting_booth::Polling_station_numberType& Voting_booth::
        getPolling_station_number () const
        {
          return this->polling_station_number_.get ();
        }

        Voting_booth::Polling_station_numberType& Voting_booth::
        getPolling_station_number ()
        {
          return this->polling_station_number_.get ();
        }

        void Voting_booth::
        setPolling_station_number (const Polling_station_numberType& x)
        {
          this->polling_station_number_.set (x);
        }

        const Voting_booth::Polling_station_criteriaType& Voting_booth::
        getPolling_station_criteria () const
        {
          return this->polling_station_criteria_.get ();
        }

        Voting_booth::Polling_station_criteriaType& Voting_booth::
        getPolling_station_criteria ()
        {
          return this->polling_station_criteria_.get ();
        }

        void Voting_booth::
        setPolling_station_criteria (const Polling_station_criteriaType& x)
        {
          this->polling_station_criteria_.set (x);
        }

        void Voting_booth::
        setPolling_station_criteria (::std::auto_ptr< Polling_station_criteriaType > x)
        {
          this->polling_station_criteria_.set (x);
        }

        const Voting_booth::Polling_place_codeType& Voting_booth::
        getPolling_place_code () const
        {
          return this->polling_place_code_.get ();
        }

        Voting_booth::Polling_place_codeType& Voting_booth::
        getPolling_place_code ()
        {
          return this->polling_place_code_.get ();
        }

        void Voting_booth::
        setPolling_place_code (const Polling_place_codeType& x)
        {
          this->polling_place_code_.set (x);
        }

        void Voting_booth::
        setPolling_place_code (::std::auto_ptr< Polling_place_codeType > x)
        {
          this->polling_place_code_.set (x);
        }

        const Voting_booth::Polling_place_registered_electorsType& Voting_booth::
        getPolling_place_registered_electors () const
        {
          return this->polling_place_registered_electors_.get ();
        }

        Voting_booth::Polling_place_registered_electorsType& Voting_booth::
        getPolling_place_registered_electors ()
        {
          return this->polling_place_registered_electors_.get ();
        }

        void Voting_booth::
        setPolling_place_registered_electors (const Polling_place_registered_electorsType& x)
        {
          this->polling_place_registered_electors_.set (x);
        }

        const Voting_booth::Polling_place_addressType& Voting_booth::
        getPolling_place_address () const
        {
          return this->polling_place_address_.get ();
        }

        Voting_booth::Polling_place_addressType& Voting_booth::
        getPolling_place_address ()
        {
          return this->polling_place_address_.get ();
        }

        void Voting_booth::
        setPolling_place_address (const Polling_place_addressType& x)
        {
          this->polling_place_address_.set (x);
        }

        void Voting_booth::
        setPolling_place_address (::std::auto_ptr< Polling_place_addressType > x)
        {
          this->polling_place_address_.set (x);
        }

        const Voting_booth::Polling_place_nameType& Voting_booth::
        getPolling_place_name () const
        {
          return this->polling_place_name_.get ();
        }

        Voting_booth::Polling_place_nameType& Voting_booth::
        getPolling_place_name ()
        {
          return this->polling_place_name_.get ();
        }

        void Voting_booth::
        setPolling_place_name (const Polling_place_nameType& x)
        {
          this->polling_place_name_.set (x);
        }

        void Voting_booth::
        setPolling_place_name (::std::auto_ptr< Polling_place_nameType > x)
        {
          this->polling_place_name_.set (x);
        }

        const Voting_booth::DefaultType& Voting_booth::
        getDefault () const
        {
          return this->default__.get ();
        }

        Voting_booth::DefaultType& Voting_booth::
        getDefault ()
        {
          return this->default__.get ();
        }

        void Voting_booth::
        setDefault (const DefaultType& x)
        {
          this->default__.set (x);
        }


        // Logical_voter_group
        // 

        const Logical_voter_group::Custom_attributesOptional& Logical_voter_group::
        getCustom_attributes () const
        {
          return this->custom_attributes_;
        }

        Logical_voter_group::Custom_attributesOptional& Logical_voter_group::
        getCustom_attributes ()
        {
          return this->custom_attributes_;
        }

        void Logical_voter_group::
        setCustom_attributes (const Custom_attributesType& x)
        {
          this->custom_attributes_.set (x);
        }

        void Logical_voter_group::
        setCustom_attributes (const Custom_attributesOptional& x)
        {
          this->custom_attributes_ = x;
        }

        void Logical_voter_group::
        setCustom_attributes (::std::auto_ptr< Custom_attributesType > x)
        {
          this->custom_attributes_.set (x);
        }

        const Logical_voter_group::Contest_group_codeType& Logical_voter_group::
        getContest_group_code () const
        {
          return this->contest_group_code_.get ();
        }

        Logical_voter_group::Contest_group_codeType& Logical_voter_group::
        getContest_group_code ()
        {
          return this->contest_group_code_.get ();
        }

        void Logical_voter_group::
        setContest_group_code (const Contest_group_codeType& x)
        {
          this->contest_group_code_.set (x);
        }

        void Logical_voter_group::
        setContest_group_code (::std::auto_ptr< Contest_group_codeType > x)
        {
          this->contest_group_code_.set (x);
        }

        const Logical_voter_group::Operation_mode_codeType& Logical_voter_group::
        getOperation_mode_code () const
        {
          return this->operation_mode_code_.get ();
        }

        Logical_voter_group::Operation_mode_codeType& Logical_voter_group::
        getOperation_mode_code ()
        {
          return this->operation_mode_code_.get ();
        }

        void Logical_voter_group::
        setOperation_mode_code (const Operation_mode_codeType& x)
        {
          this->operation_mode_code_.set (x);
        }

        void Logical_voter_group::
        setOperation_mode_code (::std::auto_ptr< Operation_mode_codeType > x)
        {
          this->operation_mode_code_.set (x);
        }

        const Logical_voter_group::Voting_booth_codeType& Logical_voter_group::
        getVoting_booth_code () const
        {
          return this->voting_booth_code_.get ();
        }

        Logical_voter_group::Voting_booth_codeType& Logical_voter_group::
        getVoting_booth_code ()
        {
          return this->voting_booth_code_.get ();
        }

        void Logical_voter_group::
        setVoting_booth_code (const Voting_booth_codeType& x)
        {
          this->voting_booth_code_.set (x);
        }

        void Logical_voter_group::
        setVoting_booth_code (::std::auto_ptr< Voting_booth_codeType > x)
        {
          this->voting_booth_code_.set (x);
        }

        const Logical_voter_group::Region_codeType& Logical_voter_group::
        getRegion_code () const
        {
          return this->region_code_.get ();
        }

        Logical_voter_group::Region_codeType& Logical_voter_group::
        getRegion_code ()
        {
          return this->region_code_.get ();
        }

        void Logical_voter_group::
        setRegion_code (const Region_codeType& x)
        {
          this->region_code_.set (x);
        }

        void Logical_voter_group::
        setRegion_code (::std::auto_ptr< Region_codeType > x)
        {
          this->region_code_.set (x);
        }

        const Logical_voter_group::Name_keyType& Logical_voter_group::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Logical_voter_group::Name_keyType& Logical_voter_group::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Logical_voter_group::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Logical_voter_group::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Logical_voter_group::CodeType& Logical_voter_group::
        getCode () const
        {
          return this->code_.get ();
        }

        Logical_voter_group::CodeType& Logical_voter_group::
        getCode ()
        {
          return this->code_.get ();
        }

        void Logical_voter_group::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Logical_voter_group::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Logical_voter_group::Custom_codeType& Logical_voter_group::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Logical_voter_group::Custom_codeType& Logical_voter_group::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Logical_voter_group::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Logical_voter_group::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Logical_voter_group::HiddenType& Logical_voter_group::
        getHidden () const
        {
          return this->hidden_.get ();
        }

        Logical_voter_group::HiddenType& Logical_voter_group::
        getHidden ()
        {
          return this->hidden_.get ();
        }

        void Logical_voter_group::
        setHidden (const HiddenType& x)
        {
          this->hidden_.set (x);
        }

        Logical_voter_group::HiddenType Logical_voter_group::
        getHiddenDefaultValue ()
        {
          return HiddenType (false);
        }


        // Custom_attribute_definitions
        // 

        const Custom_attribute_definitions::Custom_attribute_definitionSequence& Custom_attribute_definitions::
        getCustom_attribute_definition () const
        {
          return this->custom_attribute_definition_;
        }

        Custom_attribute_definitions::Custom_attribute_definitionSequence& Custom_attribute_definitions::
        getCustom_attribute_definition ()
        {
          return this->custom_attribute_definition_;
        }

        void Custom_attribute_definitions::
        setCustom_attribute_definition (const Custom_attribute_definitionSequence& s)
        {
          this->custom_attribute_definition_ = s;
        }


        // Tally_report
        // 

        const Tally_report::Logical_voter_group_codesType& Tally_report::
        getLogical_voter_group_codes () const
        {
          return this->logical_voter_group_codes_.get ();
        }

        Tally_report::Logical_voter_group_codesType& Tally_report::
        getLogical_voter_group_codes ()
        {
          return this->logical_voter_group_codes_.get ();
        }

        void Tally_report::
        setLogical_voter_group_codes (const Logical_voter_group_codesType& x)
        {
          this->logical_voter_group_codes_.set (x);
        }

        void Tally_report::
        setLogical_voter_group_codes (::std::auto_ptr< Logical_voter_group_codesType > x)
        {
          this->logical_voter_group_codes_.set (x);
        }

        const Tally_report::CodeType& Tally_report::
        getCode () const
        {
          return this->code_.get ();
        }

        Tally_report::CodeType& Tally_report::
        getCode ()
        {
          return this->code_.get ();
        }

        void Tally_report::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Tally_report::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Tally_report::Description_keyType& Tally_report::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        Tally_report::Description_keyType& Tally_report::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void Tally_report::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void Tally_report::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }


        // Roles
        // 

        const Roles::RoleSequence& Roles::
        getRole () const
        {
          return this->role_;
        }

        Roles::RoleSequence& Roles::
        getRole ()
        {
          return this->role_;
        }

        void Roles::
        setRole (const RoleSequence& s)
        {
          this->role_ = s;
        }


        // Operation_mode_transitions
        // 

        const Operation_mode_transitions::Operation_mode_transitionSequence& Operation_mode_transitions::
        getOperation_mode_transition () const
        {
          return this->operation_mode_transition_;
        }

        Operation_mode_transitions::Operation_mode_transitionSequence& Operation_mode_transitions::
        getOperation_mode_transition ()
        {
          return this->operation_mode_transition_;
        }

        void Operation_mode_transitions::
        setOperation_mode_transition (const Operation_mode_transitionSequence& s)
        {
          this->operation_mode_transition_ = s;
        }


        // Operation_mode_behaviors
        // 

        const Operation_mode_behaviors::Activate_voters_as_demoType& Operation_mode_behaviors::
        getActivate_voters_as_demo () const
        {
          return this->activate_voters_as_demo_.get ();
        }

        Operation_mode_behaviors::Activate_voters_as_demoType& Operation_mode_behaviors::
        getActivate_voters_as_demo ()
        {
          return this->activate_voters_as_demo_.get ();
        }

        void Operation_mode_behaviors::
        setActivate_voters_as_demo (const Activate_voters_as_demoType& x)
        {
          this->activate_voters_as_demo_.set (x);
        }

        Operation_mode_behaviors::Activate_voters_as_demoType Operation_mode_behaviors::
        getActivate_voters_as_demoDefaultValue ()
        {
          return Activate_voters_as_demoType (false);
        }

        const Operation_mode_behaviors::Reset_machine_status_at_startupType& Operation_mode_behaviors::
        getReset_machine_status_at_startup () const
        {
          return this->reset_machine_status_at_startup_.get ();
        }

        Operation_mode_behaviors::Reset_machine_status_at_startupType& Operation_mode_behaviors::
        getReset_machine_status_at_startup ()
        {
          return this->reset_machine_status_at_startup_.get ();
        }

        void Operation_mode_behaviors::
        setReset_machine_status_at_startup (const Reset_machine_status_at_startupType& x)
        {
          this->reset_machine_status_at_startup_.set (x);
        }

        Operation_mode_behaviors::Reset_machine_status_at_startupType Operation_mode_behaviors::
        getReset_machine_status_at_startupDefaultValue ()
        {
          return Reset_machine_status_at_startupType (false);
        }

        const Operation_mode_behaviors::Set_process_to_initiated_at_startupType& Operation_mode_behaviors::
        getSet_process_to_initiated_at_startup () const
        {
          return this->set_process_to_initiated_at_startup_.get ();
        }

        Operation_mode_behaviors::Set_process_to_initiated_at_startupType& Operation_mode_behaviors::
        getSet_process_to_initiated_at_startup ()
        {
          return this->set_process_to_initiated_at_startup_.get ();
        }

        void Operation_mode_behaviors::
        setSet_process_to_initiated_at_startup (const Set_process_to_initiated_at_startupType& x)
        {
          this->set_process_to_initiated_at_startup_.set (x);
        }

        Operation_mode_behaviors::Set_process_to_initiated_at_startupType Operation_mode_behaviors::
        getSet_process_to_initiated_at_startupDefaultValue ()
        {
          return Set_process_to_initiated_at_startupType (false);
        }

        const Operation_mode_behaviors::Pass_device_diagnostic_at_startupType& Operation_mode_behaviors::
        getPass_device_diagnostic_at_startup () const
        {
          return this->pass_device_diagnostic_at_startup_.get ();
        }

        Operation_mode_behaviors::Pass_device_diagnostic_at_startupType& Operation_mode_behaviors::
        getPass_device_diagnostic_at_startup ()
        {
          return this->pass_device_diagnostic_at_startup_.get ();
        }

        void Operation_mode_behaviors::
        setPass_device_diagnostic_at_startup (const Pass_device_diagnostic_at_startupType& x)
        {
          this->pass_device_diagnostic_at_startup_.set (x);
        }

        Operation_mode_behaviors::Pass_device_diagnostic_at_startupType Operation_mode_behaviors::
        getPass_device_diagnostic_at_startupDefaultValue ()
        {
          return Pass_device_diagnostic_at_startupType (false);
        }


        // Region_hierarchies
        // 

        const Region_hierarchies::Region_hierarchySequence& Region_hierarchies::
        getRegion_hierarchy () const
        {
          return this->region_hierarchy_;
        }

        Region_hierarchies::Region_hierarchySequence& Region_hierarchies::
        getRegion_hierarchy ()
        {
          return this->region_hierarchy_;
        }

        void Region_hierarchies::
        setRegion_hierarchy (const Region_hierarchySequence& s)
        {
          this->region_hierarchy_ = s;
        }


        // Time_zone_information
        // 

        const Time_zone_information::BiasType& Time_zone_information::
        getBias () const
        {
          return this->bias_.get ();
        }

        Time_zone_information::BiasType& Time_zone_information::
        getBias ()
        {
          return this->bias_.get ();
        }

        void Time_zone_information::
        setBias (const BiasType& x)
        {
          this->bias_.set (x);
        }

        const Time_zone_information::Standard_dateType& Time_zone_information::
        getStandard_date () const
        {
          return this->standard_date_.get ();
        }

        Time_zone_information::Standard_dateType& Time_zone_information::
        getStandard_date ()
        {
          return this->standard_date_.get ();
        }

        void Time_zone_information::
        setStandard_date (const Standard_dateType& x)
        {
          this->standard_date_.set (x);
        }

        void Time_zone_information::
        setStandard_date (::std::auto_ptr< Standard_dateType > x)
        {
          this->standard_date_.set (x);
        }

        const Time_zone_information::Standard_biasType& Time_zone_information::
        getStandard_bias () const
        {
          return this->standard_bias_.get ();
        }

        Time_zone_information::Standard_biasType& Time_zone_information::
        getStandard_bias ()
        {
          return this->standard_bias_.get ();
        }

        void Time_zone_information::
        setStandard_bias (const Standard_biasType& x)
        {
          this->standard_bias_.set (x);
        }

        const Time_zone_information::Daylight_dateType& Time_zone_information::
        getDaylight_date () const
        {
          return this->daylight_date_.get ();
        }

        Time_zone_information::Daylight_dateType& Time_zone_information::
        getDaylight_date ()
        {
          return this->daylight_date_.get ();
        }

        void Time_zone_information::
        setDaylight_date (const Daylight_dateType& x)
        {
          this->daylight_date_.set (x);
        }

        void Time_zone_information::
        setDaylight_date (::std::auto_ptr< Daylight_dateType > x)
        {
          this->daylight_date_.set (x);
        }

        const Time_zone_information::Daylight_biasType& Time_zone_information::
        getDaylight_bias () const
        {
          return this->daylight_bias_.get ();
        }

        Time_zone_information::Daylight_biasType& Time_zone_information::
        getDaylight_bias ()
        {
          return this->daylight_bias_.get ();
        }

        void Time_zone_information::
        setDaylight_bias (const Daylight_biasType& x)
        {
          this->daylight_bias_.set (x);
        }

        const Time_zone_information::NameType& Time_zone_information::
        getName () const
        {
          return this->name_.get ();
        }

        Time_zone_information::NameType& Time_zone_information::
        getName ()
        {
          return this->name_.get ();
        }

        void Time_zone_information::
        setName (const NameType& x)
        {
          this->name_.set (x);
        }

        void Time_zone_information::
        setName (::std::auto_ptr< NameType > x)
        {
          this->name_.set (x);
        }


        // Custom_attributes
        // 

        const Custom_attributes::Custom_attributeSequence& Custom_attributes::
        getCustom_attribute () const
        {
          return this->custom_attribute_;
        }

        Custom_attributes::Custom_attributeSequence& Custom_attributes::
        getCustom_attribute ()
        {
          return this->custom_attribute_;
        }

        void Custom_attributes::
        setCustom_attribute (const Custom_attributeSequence& s)
        {
          this->custom_attribute_ = s;
        }


        // Custom_attribute_definition
        // 

        const Custom_attribute_definition::ValueSequence& Custom_attribute_definition::
        getValue () const
        {
          return this->value_;
        }

        Custom_attribute_definition::ValueSequence& Custom_attribute_definition::
        getValue ()
        {
          return this->value_;
        }

        void Custom_attribute_definition::
        setValue (const ValueSequence& s)
        {
          this->value_ = s;
        }

        const Custom_attribute_definition::CodeType& Custom_attribute_definition::
        getCode () const
        {
          return this->code_.get ();
        }

        Custom_attribute_definition::CodeType& Custom_attribute_definition::
        getCode ()
        {
          return this->code_.get ();
        }

        void Custom_attribute_definition::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Custom_attribute_definition::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Custom_attribute_definition::Name_keyType& Custom_attribute_definition::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Custom_attribute_definition::Name_keyType& Custom_attribute_definition::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Custom_attribute_definition::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Custom_attribute_definition::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Custom_attribute_definition::Description_keyType& Custom_attribute_definition::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        Custom_attribute_definition::Description_keyType& Custom_attribute_definition::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void Custom_attribute_definition::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void Custom_attribute_definition::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }

        const Custom_attribute_definition::Machine_typeType& Custom_attribute_definition::
        getMachine_type () const
        {
          return this->machine_type_.get ();
        }

        Custom_attribute_definition::Machine_typeType& Custom_attribute_definition::
        getMachine_type ()
        {
          return this->machine_type_.get ();
        }

        void Custom_attribute_definition::
        setMachine_type (const Machine_typeType& x)
        {
          this->machine_type_.set (x);
        }

        void Custom_attribute_definition::
        setMachine_type (::std::auto_ptr< Machine_typeType > x)
        {
          this->machine_type_.set (x);
        }


        // Logical_voter_group_codes
        // 

        const Logical_voter_group_codes::Logical_voter_group_codeSequence& Logical_voter_group_codes::
        getLogical_voter_group_code () const
        {
          return this->logical_voter_group_code_;
        }

        Logical_voter_group_codes::Logical_voter_group_codeSequence& Logical_voter_group_codes::
        getLogical_voter_group_code ()
        {
          return this->logical_voter_group_code_;
        }

        void Logical_voter_group_codes::
        setLogical_voter_group_code (const Logical_voter_group_codeSequence& s)
        {
          this->logical_voter_group_code_ = s;
        }


        // Role
        // 

        const Role::FunctionalitySequence& Role::
        getFunctionality () const
        {
          return this->functionality_;
        }

        Role::FunctionalitySequence& Role::
        getFunctionality ()
        {
          return this->functionality_;
        }

        void Role::
        setFunctionality (const FunctionalitySequence& s)
        {
          this->functionality_ = s;
        }

        const Role::KeyType& Role::
        getKey () const
        {
          return this->key_.get ();
        }

        Role::KeyType& Role::
        getKey ()
        {
          return this->key_.get ();
        }

        void Role::
        setKey (const KeyType& x)
        {
          this->key_.set (x);
        }

        void Role::
        setKey (::std::auto_ptr< KeyType > x)
        {
          this->key_.set (x);
        }

        const Role::Name_keyType& Role::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Role::Name_keyType& Role::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Role::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Role::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Role::Description_keyType& Role::
        getDescription_key () const
        {
          return this->description_key_.get ();
        }

        Role::Description_keyType& Role::
        getDescription_key ()
        {
          return this->description_key_.get ();
        }

        void Role::
        setDescription_key (const Description_keyType& x)
        {
          this->description_key_.set (x);
        }

        void Role::
        setDescription_key (::std::auto_ptr< Description_keyType > x)
        {
          this->description_key_.set (x);
        }

        const Role::System_roleType& Role::
        getSystem_role () const
        {
          return this->system_role_.get ();
        }

        Role::System_roleType& Role::
        getSystem_role ()
        {
          return this->system_role_.get ();
        }

        void Role::
        setSystem_role (const System_roleType& x)
        {
          this->system_role_.set (x);
        }

        const Role::Extra_authentication_requiredType& Role::
        getExtra_authentication_required () const
        {
          return this->extra_authentication_required_.get ();
        }

        Role::Extra_authentication_requiredType& Role::
        getExtra_authentication_required ()
        {
          return this->extra_authentication_required_.get ();
        }

        void Role::
        setExtra_authentication_required (const Extra_authentication_requiredType& x)
        {
          this->extra_authentication_required_.set (x);
        }

        Role::Extra_authentication_requiredType Role::
        getExtra_authentication_requiredDefaultValue ()
        {
          return Extra_authentication_requiredType (false);
        }


        // Operation_mode_transition
        // 

        const Operation_mode_transition::Allowed_process_status_groupType& Operation_mode_transition::
        getAllowed_process_status_group () const
        {
          return this->allowed_process_status_group_.get ();
        }

        Operation_mode_transition::Allowed_process_status_groupType& Operation_mode_transition::
        getAllowed_process_status_group ()
        {
          return this->allowed_process_status_group_.get ();
        }

        void Operation_mode_transition::
        setAllowed_process_status_group (const Allowed_process_status_groupType& x)
        {
          this->allowed_process_status_group_.set (x);
        }

        void Operation_mode_transition::
        setAllowed_process_status_group (::std::auto_ptr< Allowed_process_status_groupType > x)
        {
          this->allowed_process_status_group_.set (x);
        }

        const Operation_mode_transition::Operation_modeType& Operation_mode_transition::
        getOperation_mode () const
        {
          return this->operation_mode_.get ();
        }

        Operation_mode_transition::Operation_modeType& Operation_mode_transition::
        getOperation_mode ()
        {
          return this->operation_mode_.get ();
        }

        void Operation_mode_transition::
        setOperation_mode (const Operation_modeType& x)
        {
          this->operation_mode_.set (x);
        }

        void Operation_mode_transition::
        setOperation_mode (::std::auto_ptr< Operation_modeType > x)
        {
          this->operation_mode_.set (x);
        }

        const Operation_mode_transition::Date_timeType& Operation_mode_transition::
        getDate_time () const
        {
          return this->date_time_.get ();
        }

        Operation_mode_transition::Date_timeType& Operation_mode_transition::
        getDate_time ()
        {
          return this->date_time_.get ();
        }

        void Operation_mode_transition::
        setDate_time (const Date_timeType& x)
        {
          this->date_time_.set (x);
        }

        void Operation_mode_transition::
        setDate_time (::std::auto_ptr< Date_timeType > x)
        {
          this->date_time_.set (x);
        }

        const Operation_mode_transition::Diagnostics_okType& Operation_mode_transition::
        getDiagnostics_ok () const
        {
          return this->diagnostics_ok_.get ();
        }

        Operation_mode_transition::Diagnostics_okType& Operation_mode_transition::
        getDiagnostics_ok ()
        {
          return this->diagnostics_ok_.get ();
        }

        void Operation_mode_transition::
        setDiagnostics_ok (const Diagnostics_okType& x)
        {
          this->diagnostics_ok_.set (x);
        }

        const Operation_mode_transition::Diagnostics_statusType& Operation_mode_transition::
        getDiagnostics_status () const
        {
          return this->diagnostics_status_.get ();
        }

        Operation_mode_transition::Diagnostics_statusType& Operation_mode_transition::
        getDiagnostics_status ()
        {
          return this->diagnostics_status_.get ();
        }

        void Operation_mode_transition::
        setDiagnostics_status (const Diagnostics_statusType& x)
        {
          this->diagnostics_status_.set (x);
        }

        void Operation_mode_transition::
        setDiagnostics_status (::std::auto_ptr< Diagnostics_statusType > x)
        {
          this->diagnostics_status_.set (x);
        }


        // Region_hierarchy
        // 

        const Region_hierarchy::CategoryType& Region_hierarchy::
        getCategory () const
        {
          return this->category_.get ();
        }

        Region_hierarchy::CategoryType& Region_hierarchy::
        getCategory ()
        {
          return this->category_.get ();
        }

        void Region_hierarchy::
        setCategory (const CategoryType& x)
        {
          this->category_.set (x);
        }

        void Region_hierarchy::
        setCategory (::std::auto_ptr< CategoryType > x)
        {
          this->category_.set (x);
        }

        const Region_hierarchy::CodeType& Region_hierarchy::
        getCode () const
        {
          return this->code_.get ();
        }

        Region_hierarchy::CodeType& Region_hierarchy::
        getCode ()
        {
          return this->code_.get ();
        }

        void Region_hierarchy::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Region_hierarchy::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Region_hierarchy::NameType& Region_hierarchy::
        getName () const
        {
          return this->name_.get ();
        }

        Region_hierarchy::NameType& Region_hierarchy::
        getName ()
        {
          return this->name_.get ();
        }

        void Region_hierarchy::
        setName (const NameType& x)
        {
          this->name_.set (x);
        }

        void Region_hierarchy::
        setName (::std::auto_ptr< NameType > x)
        {
          this->name_.set (x);
        }

        const Region_hierarchy::Is_defaultType& Region_hierarchy::
        getIs_default () const
        {
          return this->is_default_.get ();
        }

        Region_hierarchy::Is_defaultType& Region_hierarchy::
        getIs_default ()
        {
          return this->is_default_.get ();
        }

        void Region_hierarchy::
        setIs_default (const Is_defaultType& x)
        {
          this->is_default_.set (x);
        }


        // Custom_attribute
        // 

        const Custom_attribute::CodeType& Custom_attribute::
        getCode () const
        {
          return this->code_.get ();
        }

        Custom_attribute::CodeType& Custom_attribute::
        getCode ()
        {
          return this->code_.get ();
        }

        void Custom_attribute::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Custom_attribute::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Custom_attribute::ValueType& Custom_attribute::
        getValue () const
        {
          return this->value_.get ();
        }

        Custom_attribute::ValueType& Custom_attribute::
        getValue ()
        {
          return this->value_.get ();
        }

        void Custom_attribute::
        setValue (const ValueType& x)
        {
          this->value_.set (x);
        }

        void Custom_attribute::
        setValue (::std::auto_ptr< ValueType > x)
        {
          this->value_.set (x);
        }


        // Machine_type
        // 

        Machine_type::
        Machine_type ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ()
        {
        }

        Machine_type::
        Machine_type (Value v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Machine_type_literals_[v])
        {
        }

        Machine_type::
        Machine_type (const char* v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Machine_type::
        Machine_type (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Machine_type::
        Machine_type (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Machine_type::
        Machine_type (const Machine_type& v,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v, f, c)
        {
        }

        Machine_type& Machine_type::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Machine_type_literals_[v]);

          return *this;
        }


        // Allowed_process_status_group
        // 

        const Allowed_process_status_group::Allowed_process_statusSequence& Allowed_process_status_group::
        getAllowed_process_status () const
        {
          return this->allowed_process_status_;
        }

        Allowed_process_status_group::Allowed_process_statusSequence& Allowed_process_status_group::
        getAllowed_process_status ()
        {
          return this->allowed_process_status_;
        }

        void Allowed_process_status_group::
        setAllowed_process_status (const Allowed_process_statusSequence& s)
        {
          this->allowed_process_status_ = s;
        }


        // Diagnostics_status
        // 

        Diagnostics_status::
        Diagnostics_status ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ()
        {
        }

        Diagnostics_status::
        Diagnostics_status (Value v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Diagnostics_status_literals_[v])
        {
        }

        Diagnostics_status::
        Diagnostics_status (const char* v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Diagnostics_status::
        Diagnostics_status (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Diagnostics_status::
        Diagnostics_status (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Diagnostics_status::
        Diagnostics_status (const Diagnostics_status& v,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v, f, c)
        {
        }

        Diagnostics_status& Diagnostics_status::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Diagnostics_status_literals_[v]);

          return *this;
        }


        // Allowed_process_status
        // 

        Allowed_process_status::
        Allowed_process_status ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ()
        {
        }

        Allowed_process_status::
        Allowed_process_status (Value v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Allowed_process_status_literals_[v])
        {
        }

        Allowed_process_status::
        Allowed_process_status (const char* v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Allowed_process_status::
        Allowed_process_status (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Allowed_process_status::
        Allowed_process_status (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v)
        {
        }

        Allowed_process_status::
        Allowed_process_status (const Allowed_process_status& v,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (v, f, c)
        {
        }

        Allowed_process_status& Allowed_process_status::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_Allowed_process_status_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        // Region_category
        //

        Region_category::
        Region_category ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          category_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          category_level_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_category::
        Region_category (const RegionType& region,
                         const CodeType& code,
                         const Name_keyType& name_key)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_ (region, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          category_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          category_level_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_category::
        Region_category (::std::auto_ptr< RegionType >& region,
                         const CodeType& code,
                         const Name_keyType& name_key)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_ (region, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          category_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          category_level_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_category::
        Region_category (const Region_category& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          region_ (x.region_, f, this),
          category_ (x.category_, f, this),
          code_ (x.code_, f, this),
          name_key_ (x.name_key_, f, this),
          category_level_ (x.category_level_, f, this)
        {
        }

        Region_category::
        Region_category (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          region_ (f, this),
          category_ (f, this),
          code_ (f, this),
          name_key_ (f, this),
          category_level_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Region_category::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // region
            //
            if (n.name () == "region" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< RegionType > r (
                RegionTraits::create (i, f, this));

              if (!region_.present ())
              {
                this->region_.set (r);
                continue;
              }
            }

            // category
            //
            if (n.name () == "category" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< CategoryType > r (
                CategoryTraits::create (i, f, this));

              if (!this->category_)
              {
                this->category_.set (r);
                continue;
              }
            }

            break;
          }

          if (!region_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "region",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "category-level" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Category_levelType > r (
                Category_levelTraits::create (i, f, this));

              this->category_level_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }
        }

        Region_category* Region_category::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Region_category (*this, f, c);
        }

        Region_category::
        ~Region_category ()
        {
        }

        bool
        operator== (const Region_category& x, const Region_category& y)
        {
          if (!(x.getRegion () == y.getRegion ()))
            return false;

          if (!(x.getCategory () == y.getCategory ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getCategory_level () == y.getCategory_level ()))
            return false;

          return true;
        }

        bool
        operator!= (const Region_category& x, const Region_category& y)
        {
          return !(x == y);
        }

        // Custom_date_time
        //

        Custom_date_time::
        Custom_date_time ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ()
        {
        }

        Custom_date_time::
        Custom_date_time (const char* _xsd_String_base)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_String_base)
        {
        }

        Custom_date_time::
        Custom_date_time (const ::std::string& _xsd_String_base)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_String_base)
        {
        }

        Custom_date_time::
        Custom_date_time (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& _xsd_String_base)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (_xsd_String_base)
        {
        }

        Custom_date_time::
        Custom_date_time (const Custom_date_time& x,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (x, f, c)
        {
        }

        Custom_date_time::
        Custom_date_time (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (e, f, c)
        {
        }

        Custom_date_time::
        Custom_date_time (const ::xercesc::DOMAttr& a,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (a, f, c)
        {
        }

        Custom_date_time::
        Custom_date_time (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (s, e, f, c)
        {
        }

        Custom_date_time* Custom_date_time::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Custom_date_time (*this, f, c);
        }

        Custom_date_time::
        ~Custom_date_time ()
        {
        }

        // Time_zone_date
        //

        Time_zone_date::
        Time_zone_date ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          month_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          day_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          hour_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          minute_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          second_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Time_zone_date::
        Time_zone_date (const MonthType& month,
                        const DayType& day,
                        const HourType& hour,
                        const MinuteType& minute,
                        const SecondType& second)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          month_ (month, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          day_ (day, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          hour_ (hour, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          minute_ (minute, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          second_ (second, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Time_zone_date::
        Time_zone_date (const Time_zone_date& x,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          month_ (x.month_, f, this),
          day_ (x.day_, f, this),
          hour_ (x.hour_, f, this),
          minute_ (x.minute_, f, this),
          second_ (x.second_, f, this)
        {
        }

        Time_zone_date::
        Time_zone_date (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          month_ (f, this),
          day_ (f, this),
          hour_ (f, this),
          minute_ (f, this),
          second_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Time_zone_date::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "month" && n.namespace_ ().empty ())
            {
              this->month_.set (MonthTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "day" && n.namespace_ ().empty ())
            {
              this->day_.set (DayTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "hour" && n.namespace_ ().empty ())
            {
              this->hour_.set (HourTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "minute" && n.namespace_ ().empty ())
            {
              this->minute_.set (MinuteTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "second" && n.namespace_ ().empty ())
            {
              this->second_.set (SecondTraits::create (i, f, this));
              continue;
            }
          }

          if (!month_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "month",
              "");
          }

          if (!day_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "day",
              "");
          }

          if (!hour_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "hour",
              "");
          }

          if (!minute_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "minute",
              "");
          }

          if (!second_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "second",
              "");
          }
        }

        Time_zone_date* Time_zone_date::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Time_zone_date (*this, f, c);
        }

        Time_zone_date::
        ~Time_zone_date ()
        {
        }

        bool
        operator== (const Time_zone_date& x, const Time_zone_date& y)
        {
          if (!(x.getMonth () == y.getMonth ()))
            return false;

          if (!(x.getDay () == y.getDay ()))
            return false;

          if (!(x.getHour () == y.getHour ()))
            return false;

          if (!(x.getMinute () == y.getMinute ()))
            return false;

          if (!(x.getSecond () == y.getSecond ()))
            return false;

          return true;
        }

        bool
        operator!= (const Time_zone_date& x, const Time_zone_date& y)
        {
          return !(x == y);
        }

        // Functionality
        //

        Functionality::
        Functionality (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (e, f, c)
        {
          _xsd_Functionality_convert ();
        }

        Functionality::
        Functionality (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (a, f, c)
        {
          _xsd_Functionality_convert ();
        }

        Functionality::
        Functionality (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (s, e, f, c)
        {
          _xsd_Functionality_convert ();
        }

        Functionality* Functionality::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Functionality (*this, f, c);
        }

        Functionality::Value Functionality::
        _xsd_Functionality_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Functionality_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Functionality_indexes_,
                            _xsd_Functionality_indexes_ + 60,
                            *this,
                            c));

          if (i == _xsd_Functionality_indexes_ + 60 || _xsd_Functionality_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Functionality::
        _xsd_Functionality_literals_[60] =
        {
          "AuditVotes",
          "ChangeOperationMode",
          "CloseAplication",
          "ClosePolls",
          "Consolidate",
          "ConsolidateMultipleMemories",
          "DiagnoseAble",
          "DiagnoseAcquisition",
          "DiagnoseAllDevices",
          "DiagnoseAudioVotingExperience",
          "DiagnoseBallot",
          "DiagnoseCardReader",
          "DiagnoseFingerprintReader",
          "DiagnoseFlash",
          "DiagnoseModem",
          "DiagnosePenAcquisition",
          "DiagnosePenRecognition",
          "DiagnosePrinter",
          "DiagnoseRecognition",
          "DiagnoseScreenContrast",
          "DiagnoseSound",
          "DiagnoseToken",
          "DiagnoseTouchScreen",
          "DiagnoseVotingExperience",
          "MakeUSBStickBackup",
          "MakeUSBWORMBackup",
          "Menu",
          "OpenPolls",
          "PenLinking",
          "PrintAuditLog",
          "PrintConsolidationResults",
          "PrintElectionResults",
          "PrintEnvironmentManagerLog",
          "PrintErrorLog",
          "PrintPreviewConsolidationResults",
          "PrintPreviewElectionResults",
          "PrintTransmissionLog",
          "PrintVotesCopy",
          "ResetMachine",
          "RestartVoteCount",
          "ScanningServicesReset",
          "SetDateTime",
          "SetPollWorkersInfo",
          "ShowAndPrintLogs",
          "ShutDown",
          "TransmitAllElectionResultsAutomatic",
          "TransmitAllElectionResultsSelective",
          "TransmitConfigurationAndStatusAutomatic",
          "TransmitConfigurationAndStatusSelective",
          "TransmitLogsAutomatic",
          "TransmitLogsSelective",
          "TransmitMachineElectionResultsAutomatic",
          "TransmitMachineElectionResultsSelective",
          "TransmitNoTransmittedElectionResultsAutomatic",
          "TransmitNoTransmittedElectionResultsSelective",
          "ViewConsolidationInformation",
          "ViewMachineInformation",
          "ViewTransmissionInformation",
          "ViewVoteResults",
          "VoteSimulation"
        };

        const Functionality::Value Functionality::
        _xsd_Functionality_indexes_[60] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_AUDITVOTES,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_CHANGEOPERATIONMODE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_CLOSEAPLICATION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_CLOSEPOLLS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_CONSOLIDATE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_CONSOLIDATEMULTIPLEMEMORIES,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEABLE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEACQUISITION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEALLDEVICES,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEAUDIOVOTINGEXPERIENCE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEBALLOT,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSECARDREADER,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEFINGERPRINTREADER,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEFLASH,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEMODEM,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEPENACQUISITION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEPENRECOGNITION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEPRINTER,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSERECOGNITION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSESCREENCONTRAST,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSESOUND,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSETOKEN,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSETOUCHSCREEN,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_DIAGNOSEVOTINGEXPERIENCE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_MAKEUSBSTICKBACKUP,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_MAKEUSBWORMBACKUP,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_MENU,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_OPENPOLLS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PENLINKING,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTAUDITLOG,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTCONSOLIDATIONRESULTS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTELECTIONRESULTS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTENVIRONMENTMANAGERLOG,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTERRORLOG,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTPREVIEWCONSOLIDATIONRESULTS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTPREVIEWELECTIONRESULTS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTTRANSMISSIONLOG,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_PRINTVOTESCOPY,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_RESETMACHINE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_RESTARTVOTECOUNT,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_SCANNINGSERVICESRESET,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_SETDATETIME,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_SETPOLLWORKERSINFO,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_SHOWANDPRINTLOGS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_SHUTDOWN,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITALLELECTIONRESULTSAUTOMATIC,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITALLELECTIONRESULTSSELECTIVE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITCONFIGURATIONANDSTATUSAUTOMATIC,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITCONFIGURATIONANDSTATUSSELECTIVE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITLOGSAUTOMATIC,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITLOGSSELECTIVE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITMACHINEELECTIONRESULTSAUTOMATIC,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITMACHINEELECTIONRESULTSSELECTIVE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITNOTRANSMITTEDELECTIONRESULTSAUTOMATIC,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_TRANSMITNOTRANSMITTEDELECTIONRESULTSSELECTIVE,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_VIEWCONSOLIDATIONINFORMATION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_VIEWMACHINEINFORMATION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_VIEWTRANSMISSIONINFORMATION,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_VIEWVOTERESULTS,
          ::Smartmatic::SAES::Voting::VotingDevice::Functionality::VOTING_DEVICES_VOTESIMULATION
        };

        // CategoryLevel
        //

        CategoryLevel::
        CategoryLevel (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (e, f, c)
        {
          _xsd_CategoryLevel_convert ();
        }

        CategoryLevel::
        CategoryLevel (const ::xercesc::DOMAttr& a,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (a, f, c)
        {
          _xsd_CategoryLevel_convert ();
        }

        CategoryLevel::
        CategoryLevel (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (s, e, f, c)
        {
          _xsd_CategoryLevel_convert ();
        }

        CategoryLevel* CategoryLevel::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class CategoryLevel (*this, f, c);
        }

        CategoryLevel::Value CategoryLevel::
        _xsd_CategoryLevel_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CategoryLevel_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_CategoryLevel_indexes_,
                            _xsd_CategoryLevel_indexes_ + 8,
                            *this,
                            c));

          if (i == _xsd_CategoryLevel_indexes_ + 8 || _xsd_CategoryLevel_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const CategoryLevel::
        _xsd_CategoryLevel_literals_[8] =
        {
          "FIRST_LEVEL",
          "SECOND_LEVEL",
          "THIRD_LEVEL",
          "FOURTH_LEVEL",
          "FIFTH_LEVEL",
          "SIXTH_LEVEL",
          "SEVENTH_LEVEL",
          "EIGHTH_LEVEL"
        };

        const CategoryLevel::Value CategoryLevel::
        _xsd_CategoryLevel_indexes_[8] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_EIGHTH_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_FIFTH_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_FIRST_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_FOURTH_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_SECOND_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_SEVENTH_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_SIXTH_LEVEL,
          ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel::VOTING_DEVICES_THIRD_LEVEL
        };

        // Voting_devices
        //

        Voting_devices::
        Voting_devices ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          voting_device_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          languages_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_devices::
        Voting_devices (const Voting_devices& x,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          voting_device_ (x.voting_device_, f, this),
          languages_ (x.languages_, f, this)
        {
        }

        Voting_devices::
        Voting_devices (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          voting_device_ (f, this),
          languages_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Voting_devices::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // voting-device
            //
            if (n.name () == "voting-device" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Voting_deviceType > r (
                Voting_deviceTraits::create (i, f, this));

              this->voting_device_.push_back (r);
              continue;
            }

            // languages
            //
            if (n.name () == "languages" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< LanguagesType > r (
                LanguagesTraits::create (i, f, this));

              if (!this->languages_)
              {
                this->languages_.set (r);
                continue;
              }
            }

            break;
          }
        }

        Voting_devices* Voting_devices::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Voting_devices (*this, f, c);
        }

        Voting_devices::
        ~Voting_devices ()
        {
        }

        bool
        operator== (const Voting_devices& x, const Voting_devices& y)
        {
          if (!(x.getVoting_device () == y.getVoting_device ()))
            return false;

          if (!(x.getLanguages () == y.getLanguages ()))
            return false;

          return true;
        }

        bool
        operator!= (const Voting_devices& x, const Voting_devices& y)
        {
          return !(x == y);
        }

        // Region
        //

        Region::
        Region ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region::
        Region (const CodeType& code,
                const Name_keyType& name_key)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region::
        Region (const Region& x,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          code_ (x.code_, f, this),
          name_key_ (x.name_key_, f, this)
        {
        }

        Region::
        Region (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          code_ (f, this),
          name_key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Region::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }
        }

        Region* Region::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Region (*this, f, c);
        }

        Region::
        ~Region ()
        {
        }

        bool
        operator== (const Region& x, const Region& y)
        {
          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          return true;
        }

        bool
        operator!= (const Region& x, const Region& y)
        {
          return !(x == y);
        }

        // Voting_device
        //

        Voting_device::
        Voting_device ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          keys_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_modes_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          voting_booths_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          logical_voter_groups_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          tally_reports_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_device::
        Voting_device (const KeysType& keys,
                       const Operation_modesType& operation_modes,
                       const Voting_boothsType& voting_booths,
                       const Logical_voter_groupsType& logical_voter_groups,
                       const Tally_reportsType& tally_reports,
                       const CodeType& code,
                       const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          keys_ (keys, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_modes_ (operation_modes, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          voting_booths_ (voting_booths, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          logical_voter_groups_ (logical_voter_groups, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          tally_reports_ (tally_reports, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_device::
        Voting_device (::std::auto_ptr< KeysType >& keys,
                       ::std::auto_ptr< Operation_modesType >& operation_modes,
                       ::std::auto_ptr< Voting_boothsType >& voting_booths,
                       ::std::auto_ptr< Logical_voter_groupsType >& logical_voter_groups,
                       ::std::auto_ptr< Tally_reportsType >& tally_reports,
                       const CodeType& code,
                       const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          keys_ (keys, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_modes_ (operation_modes, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          voting_booths_ (voting_booths, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          logical_voter_groups_ (logical_voter_groups, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          tally_reports_ (tally_reports, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_device::
        Voting_device (const Voting_device& x,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          keys_ (x.keys_, f, this),
          operation_modes_ (x.operation_modes_, f, this),
          voting_booths_ (x.voting_booths_, f, this),
          logical_voter_groups_ (x.logical_voter_groups_, f, this),
          tally_reports_ (x.tally_reports_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this)
        {
        }

        Voting_device::
        Voting_device (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          keys_ (f, this),
          operation_modes_ (f, this),
          voting_booths_ (f, this),
          logical_voter_groups_ (f, this),
          tally_reports_ (f, this),
          code_ (f, this),
          custom_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Voting_device::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // keys
            //
            if (n.name () == "keys" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< KeysType > r (
                KeysTraits::create (i, f, this));

              if (!keys_.present ())
              {
                this->keys_.set (r);
                continue;
              }
            }

            // operation-modes
            //
            if (n.name () == "operation-modes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Operation_modesType > r (
                Operation_modesTraits::create (i, f, this));

              if (!operation_modes_.present ())
              {
                this->operation_modes_.set (r);
                continue;
              }
            }

            // voting-booths
            //
            if (n.name () == "voting-booths" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Voting_boothsType > r (
                Voting_boothsTraits::create (i, f, this));

              if (!voting_booths_.present ())
              {
                this->voting_booths_.set (r);
                continue;
              }
            }

            // logical-voter-groups
            //
            if (n.name () == "logical-voter-groups" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Logical_voter_groupsType > r (
                Logical_voter_groupsTraits::create (i, f, this));

              if (!logical_voter_groups_.present ())
              {
                this->logical_voter_groups_.set (r);
                continue;
              }
            }

            // tally-reports
            //
            if (n.name () == "tally-reports" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Tally_reportsType > r (
                Tally_reportsTraits::create (i, f, this));

              if (!tally_reports_.present ())
              {
                this->tally_reports_.set (r);
                continue;
              }
            }

            break;
          }

          if (!keys_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "keys",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!operation_modes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "operation-modes",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!voting_booths_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "voting-booths",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!logical_voter_groups_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "logical-voter-groups",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!tally_reports_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "tally-reports",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }
        }

        Voting_device* Voting_device::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Voting_device (*this, f, c);
        }

        Voting_device::
        ~Voting_device ()
        {
        }

        bool
        operator== (const Voting_device& x, const Voting_device& y)
        {
          if (!(x.getKeys () == y.getKeys ()))
            return false;

          if (!(x.getOperation_modes () == y.getOperation_modes ()))
            return false;

          if (!(x.getVoting_booths () == y.getVoting_booths ()))
            return false;

          if (!(x.getLogical_voter_groups () == y.getLogical_voter_groups ()))
            return false;

          if (!(x.getTally_reports () == y.getTally_reports ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Voting_device& x, const Voting_device& y)
        {
          return !(x == y);
        }

        // Keys
        //

        Keys::
        Keys ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          transmission_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          protection_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          backup_zip_file_password_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Keys::
        Keys (const Transmission_keyType& transmission_key,
              const Protection_keyType& protection_key,
              const Backup_zip_file_passwordType& backup_zip_file_password)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          transmission_key_ (transmission_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          protection_key_ (protection_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          backup_zip_file_password_ (backup_zip_file_password, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Keys::
        Keys (const Keys& x,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          transmission_key_ (x.transmission_key_, f, this),
          protection_key_ (x.protection_key_, f, this),
          backup_zip_file_password_ (x.backup_zip_file_password_, f, this)
        {
        }

        Keys::
        Keys (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          transmission_key_ (f, this),
          protection_key_ (f, this),
          backup_zip_file_password_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Keys::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "transmission-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Transmission_keyType > r (
                Transmission_keyTraits::create (i, f, this));

              this->transmission_key_.set (r);
              continue;
            }

            if (n.name () == "protection-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Protection_keyType > r (
                Protection_keyTraits::create (i, f, this));

              this->protection_key_.set (r);
              continue;
            }

            if (n.name () == "backup-zip-file-password" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Backup_zip_file_passwordType > r (
                Backup_zip_file_passwordTraits::create (i, f, this));

              this->backup_zip_file_password_.set (r);
              continue;
            }
          }

          if (!transmission_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "transmission-key",
              "");
          }

          if (!protection_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "protection-key",
              "");
          }

          if (!backup_zip_file_password_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "backup-zip-file-password",
              "");
          }
        }

        Keys* Keys::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Keys (*this, f, c);
        }

        Keys::
        ~Keys ()
        {
        }

        bool
        operator== (const Keys& x, const Keys& y)
        {
          if (!(x.getTransmission_key () == y.getTransmission_key ()))
            return false;

          if (!(x.getProtection_key () == y.getProtection_key ()))
            return false;

          if (!(x.getBackup_zip_file_password () == y.getBackup_zip_file_password ()))
            return false;

          return true;
        }

        bool
        operator!= (const Keys& x, const Keys& y)
        {
          return !(x == y);
        }

        // Operation_modes
        //

        Operation_modes::
        Operation_modes ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          operation_mode_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_modes::
        Operation_modes (const Operation_modes& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          operation_mode_ (x.operation_mode_, f, this)
        {
        }

        Operation_modes::
        Operation_modes (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          operation_mode_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Operation_modes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // operation-mode
            //
            if (n.name () == "operation-mode" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Operation_modeType > r (
                Operation_modeTraits::create (i, f, this));

              this->operation_mode_.push_back (r);
              continue;
            }

            break;
          }
        }

        Operation_modes* Operation_modes::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Operation_modes (*this, f, c);
        }

        Operation_modes::
        ~Operation_modes ()
        {
        }

        bool
        operator== (const Operation_modes& x, const Operation_modes& y)
        {
          if (!(x.getOperation_mode () == y.getOperation_mode ()))
            return false;

          return true;
        }

        bool
        operator!= (const Operation_modes& x, const Operation_modes& y)
        {
          return !(x == y);
        }

        // Voting_booths
        //

        Voting_booths::
        Voting_booths ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          voting_booth_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_booths::
        Voting_booths (const Voting_booths& x,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          voting_booth_ (x.voting_booth_, f, this)
        {
        }

        Voting_booths::
        Voting_booths (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          voting_booth_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Voting_booths::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // voting-booth
            //
            if (n.name () == "voting-booth" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Voting_boothType > r (
                Voting_boothTraits::create (i, f, this));

              this->voting_booth_.push_back (r);
              continue;
            }

            break;
          }
        }

        Voting_booths* Voting_booths::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Voting_booths (*this, f, c);
        }

        Voting_booths::
        ~Voting_booths ()
        {
        }

        bool
        operator== (const Voting_booths& x, const Voting_booths& y)
        {
          if (!(x.getVoting_booth () == y.getVoting_booth ()))
            return false;

          return true;
        }

        bool
        operator!= (const Voting_booths& x, const Voting_booths& y)
        {
          return !(x == y);
        }

        // Logical_voter_groups
        //

        Logical_voter_groups::
        Logical_voter_groups ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          logical_voter_group_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_attribute_definitions_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Logical_voter_groups::
        Logical_voter_groups (const Logical_voter_groups& x,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          logical_voter_group_ (x.logical_voter_group_, f, this),
          custom_attribute_definitions_ (x.custom_attribute_definitions_, f, this)
        {
        }

        Logical_voter_groups::
        Logical_voter_groups (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          logical_voter_group_ (f, this),
          custom_attribute_definitions_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Logical_voter_groups::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // logical-voter-group
            //
            if (n.name () == "logical-voter-group" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Logical_voter_groupType > r (
                Logical_voter_groupTraits::create (i, f, this));

              this->logical_voter_group_.push_back (r);
              continue;
            }

            // custom-attribute-definitions
            //
            if (n.name () == "custom-attribute-definitions" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Custom_attribute_definitionsType > r (
                Custom_attribute_definitionsTraits::create (i, f, this));

              if (!this->custom_attribute_definitions_)
              {
                this->custom_attribute_definitions_.set (r);
                continue;
              }
            }

            break;
          }
        }

        Logical_voter_groups* Logical_voter_groups::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Logical_voter_groups (*this, f, c);
        }

        Logical_voter_groups::
        ~Logical_voter_groups ()
        {
        }

        bool
        operator== (const Logical_voter_groups& x, const Logical_voter_groups& y)
        {
          if (!(x.getLogical_voter_group () == y.getLogical_voter_group ()))
            return false;

          if (!(x.getCustom_attribute_definitions () == y.getCustom_attribute_definitions ()))
            return false;

          return true;
        }

        bool
        operator!= (const Logical_voter_groups& x, const Logical_voter_groups& y)
        {
          return !(x == y);
        }

        // Tally_reports
        //

        Tally_reports::
        Tally_reports ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          tally_report_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Tally_reports::
        Tally_reports (const Tally_reports& x,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          tally_report_ (x.tally_report_, f, this)
        {
        }

        Tally_reports::
        Tally_reports (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          tally_report_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Tally_reports::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // tally-report
            //
            if (n.name () == "tally-report" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Tally_reportType > r (
                Tally_reportTraits::create (i, f, this));

              this->tally_report_.push_back (r);
              continue;
            }

            break;
          }
        }

        Tally_reports* Tally_reports::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Tally_reports (*this, f, c);
        }

        Tally_reports::
        ~Tally_reports ()
        {
        }

        bool
        operator== (const Tally_reports& x, const Tally_reports& y)
        {
          if (!(x.getTally_report () == y.getTally_report ()))
            return false;

          return true;
        }

        bool
        operator!= (const Tally_reports& x, const Tally_reports& y)
        {
          return !(x == y);
        }

        // Operation_mode
        //

        Operation_mode::
        Operation_mode ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          roles_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_transitions_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_behaviors_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          folder_name_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          default__ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          unblocking_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          audio_unblocking_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          scanner_unblocking_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          synchronization_unblocking_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          opening_date_time_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          closing_date_time_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode::
        Operation_mode (const RolesType& roles,
                        const Operation_mode_behaviorsType& operation_mode_behaviors,
                        const CodeType& code,
                        const Custom_codeType& custom_code,
                        const Name_keyType& name_key,
                        const Description_keyType& description_key,
                        const Folder_nameType& folder_name,
                        const DefaultType& default_,
                        const Unblocking_keyType& unblocking_key,
                        const Audio_unblocking_keyType& audio_unblocking_key,
                        const Scanner_unblocking_keyType& scanner_unblocking_key,
                        const Synchronization_unblocking_keyType& synchronization_unblocking_key,
                        const Opening_date_timeType& opening_date_time,
                        const Closing_date_timeType& closing_date_time)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          roles_ (roles, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_transitions_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_behaviors_ (operation_mode_behaviors, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          folder_name_ (folder_name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          default__ (default_, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          unblocking_key_ (unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          audio_unblocking_key_ (audio_unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          scanner_unblocking_key_ (scanner_unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          synchronization_unblocking_key_ (synchronization_unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          opening_date_time_ (opening_date_time, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          closing_date_time_ (closing_date_time, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode::
        Operation_mode (::std::auto_ptr< RolesType >& roles,
                        ::std::auto_ptr< Operation_mode_behaviorsType >& operation_mode_behaviors,
                        const CodeType& code,
                        const Custom_codeType& custom_code,
                        const Name_keyType& name_key,
                        const Description_keyType& description_key,
                        const Folder_nameType& folder_name,
                        const DefaultType& default_,
                        const Unblocking_keyType& unblocking_key,
                        const Audio_unblocking_keyType& audio_unblocking_key,
                        const Scanner_unblocking_keyType& scanner_unblocking_key,
                        const Synchronization_unblocking_keyType& synchronization_unblocking_key,
                        const Opening_date_timeType& opening_date_time,
                        const Closing_date_timeType& closing_date_time)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          roles_ (roles, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_transitions_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_behaviors_ (operation_mode_behaviors, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          folder_name_ (folder_name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          default__ (default_, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          unblocking_key_ (unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          audio_unblocking_key_ (audio_unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          scanner_unblocking_key_ (scanner_unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          synchronization_unblocking_key_ (synchronization_unblocking_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          opening_date_time_ (opening_date_time, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          closing_date_time_ (closing_date_time, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode::
        Operation_mode (const Operation_mode& x,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          roles_ (x.roles_, f, this),
          operation_mode_transitions_ (x.operation_mode_transitions_, f, this),
          operation_mode_behaviors_ (x.operation_mode_behaviors_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          name_key_ (x.name_key_, f, this),
          description_key_ (x.description_key_, f, this),
          folder_name_ (x.folder_name_, f, this),
          default__ (x.default__, f, this),
          unblocking_key_ (x.unblocking_key_, f, this),
          audio_unblocking_key_ (x.audio_unblocking_key_, f, this),
          scanner_unblocking_key_ (x.scanner_unblocking_key_, f, this),
          synchronization_unblocking_key_ (x.synchronization_unblocking_key_, f, this),
          opening_date_time_ (x.opening_date_time_, f, this),
          closing_date_time_ (x.closing_date_time_, f, this)
        {
        }

        Operation_mode::
        Operation_mode (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          roles_ (f, this),
          operation_mode_transitions_ (f, this),
          operation_mode_behaviors_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          name_key_ (f, this),
          description_key_ (f, this),
          folder_name_ (f, this),
          default__ (f, this),
          unblocking_key_ (f, this),
          audio_unblocking_key_ (f, this),
          scanner_unblocking_key_ (f, this),
          synchronization_unblocking_key_ (f, this),
          opening_date_time_ (f, this),
          closing_date_time_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Operation_mode::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // roles
            //
            if (n.name () == "roles" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< RolesType > r (
                RolesTraits::create (i, f, this));

              if (!roles_.present ())
              {
                this->roles_.set (r);
                continue;
              }
            }

            // operation-mode-transitions
            //
            if (n.name () == "operation-mode-transitions" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Operation_mode_transitionsType > r (
                Operation_mode_transitionsTraits::create (i, f, this));

              if (!this->operation_mode_transitions_)
              {
                this->operation_mode_transitions_.set (r);
                continue;
              }
            }

            // operation-mode-behaviors
            //
            if (n.name () == "operation-mode-behaviors" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Operation_mode_behaviorsType > r (
                Operation_mode_behaviorsTraits::create (i, f, this));

              if (!operation_mode_behaviors_.present ())
              {
                this->operation_mode_behaviors_.set (r);
                continue;
              }
            }

            break;
          }

          if (!roles_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "roles",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!operation_mode_behaviors_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "operation-mode-behaviors",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }

            if (n.name () == "folder-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Folder_nameType > r (
                Folder_nameTraits::create (i, f, this));

              this->folder_name_.set (r);
              continue;
            }

            if (n.name () == "default" && n.namespace_ ().empty ())
            {
              this->default__.set (DefaultTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "unblocking-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Unblocking_keyType > r (
                Unblocking_keyTraits::create (i, f, this));

              this->unblocking_key_.set (r);
              continue;
            }

            if (n.name () == "audio-unblocking-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Audio_unblocking_keyType > r (
                Audio_unblocking_keyTraits::create (i, f, this));

              this->audio_unblocking_key_.set (r);
              continue;
            }

            if (n.name () == "scanner-unblocking-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Scanner_unblocking_keyType > r (
                Scanner_unblocking_keyTraits::create (i, f, this));

              this->scanner_unblocking_key_.set (r);
              continue;
            }

            if (n.name () == "synchronization-unblocking-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Synchronization_unblocking_keyType > r (
                Synchronization_unblocking_keyTraits::create (i, f, this));

              this->synchronization_unblocking_key_.set (r);
              continue;
            }

            if (n.name () == "opening-date-time" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Opening_date_timeType > r (
                Opening_date_timeTraits::create (i, f, this));

              this->opening_date_time_.set (r);
              continue;
            }

            if (n.name () == "closing-date-time" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Closing_date_timeType > r (
                Closing_date_timeTraits::create (i, f, this));

              this->closing_date_time_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }

          if (!folder_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "folder-name",
              "");
          }

          if (!default__.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "default",
              "");
          }

          if (!unblocking_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "unblocking-key",
              "");
          }

          if (!audio_unblocking_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "audio-unblocking-key",
              "");
          }

          if (!scanner_unblocking_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "scanner-unblocking-key",
              "");
          }

          if (!synchronization_unblocking_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "synchronization-unblocking-key",
              "");
          }

          if (!opening_date_time_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "opening-date-time",
              "");
          }

          if (!closing_date_time_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "closing-date-time",
              "");
          }
        }

        Operation_mode* Operation_mode::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Operation_mode (*this, f, c);
        }

        Operation_mode::
        ~Operation_mode ()
        {
        }

        bool
        operator== (const Operation_mode& x, const Operation_mode& y)
        {
          if (!(x.getRoles () == y.getRoles ()))
            return false;

          if (!(x.getOperation_mode_transitions () == y.getOperation_mode_transitions ()))
            return false;

          if (!(x.getOperation_mode_behaviors () == y.getOperation_mode_behaviors ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          if (!(x.getFolder_name () == y.getFolder_name ()))
            return false;

          if (!(x.getDefault () == y.getDefault ()))
            return false;

          if (!(x.getUnblocking_key () == y.getUnblocking_key ()))
            return false;

          if (!(x.getAudio_unblocking_key () == y.getAudio_unblocking_key ()))
            return false;

          if (!(x.getScanner_unblocking_key () == y.getScanner_unblocking_key ()))
            return false;

          if (!(x.getSynchronization_unblocking_key () == y.getSynchronization_unblocking_key ()))
            return false;

          if (!(x.getOpening_date_time () == y.getOpening_date_time ()))
            return false;

          if (!(x.getClosing_date_time () == y.getClosing_date_time ()))
            return false;

          return true;
        }

        bool
        operator!= (const Operation_mode& x, const Operation_mode& y)
        {
          return !(x == y);
        }

        // Voting_booth
        //

        Voting_booth::
        Voting_booth ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_hierarchies_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          time_zone_information_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          number_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          registered_electors_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_number_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_criteria_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_registered_electors_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_address_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_name_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          default__ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_booth::
        Voting_booth (const Region_hierarchiesType& region_hierarchies,
                      const Time_zone_informationType& time_zone_information,
                      const Custom_codeType& custom_code,
                      const CodeType& code,
                      const NumberType& number,
                      const Registered_electorsType& registered_electors,
                      const Polling_station_codeType& polling_station_code,
                      const Polling_station_numberType& polling_station_number,
                      const Polling_station_criteriaType& polling_station_criteria,
                      const Polling_place_codeType& polling_place_code,
                      const Polling_place_registered_electorsType& polling_place_registered_electors,
                      const Polling_place_addressType& polling_place_address,
                      const Polling_place_nameType& polling_place_name,
                      const DefaultType& default_)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_hierarchies_ (region_hierarchies, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          time_zone_information_ (time_zone_information, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          number_ (number, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          registered_electors_ (registered_electors, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_code_ (polling_station_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_number_ (polling_station_number, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_criteria_ (polling_station_criteria, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_code_ (polling_place_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_registered_electors_ (polling_place_registered_electors, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_address_ (polling_place_address, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_name_ (polling_place_name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          default__ (default_, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_booth::
        Voting_booth (::std::auto_ptr< Region_hierarchiesType >& region_hierarchies,
                      ::std::auto_ptr< Time_zone_informationType >& time_zone_information,
                      const Custom_codeType& custom_code,
                      const CodeType& code,
                      const NumberType& number,
                      const Registered_electorsType& registered_electors,
                      const Polling_station_codeType& polling_station_code,
                      const Polling_station_numberType& polling_station_number,
                      const Polling_station_criteriaType& polling_station_criteria,
                      const Polling_place_codeType& polling_place_code,
                      const Polling_place_registered_electorsType& polling_place_registered_electors,
                      const Polling_place_addressType& polling_place_address,
                      const Polling_place_nameType& polling_place_name,
                      const DefaultType& default_)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_hierarchies_ (region_hierarchies, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          time_zone_information_ (time_zone_information, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          number_ (number, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          registered_electors_ (registered_electors, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_code_ (polling_station_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_number_ (polling_station_number, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_station_criteria_ (polling_station_criteria, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_code_ (polling_place_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_registered_electors_ (polling_place_registered_electors, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_address_ (polling_place_address, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          polling_place_name_ (polling_place_name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          default__ (default_, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Voting_booth::
        Voting_booth (const Voting_booth& x,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          region_hierarchies_ (x.region_hierarchies_, f, this),
          time_zone_information_ (x.time_zone_information_, f, this),
          custom_code_ (x.custom_code_, f, this),
          code_ (x.code_, f, this),
          number_ (x.number_, f, this),
          registered_electors_ (x.registered_electors_, f, this),
          polling_station_code_ (x.polling_station_code_, f, this),
          polling_station_number_ (x.polling_station_number_, f, this),
          polling_station_criteria_ (x.polling_station_criteria_, f, this),
          polling_place_code_ (x.polling_place_code_, f, this),
          polling_place_registered_electors_ (x.polling_place_registered_electors_, f, this),
          polling_place_address_ (x.polling_place_address_, f, this),
          polling_place_name_ (x.polling_place_name_, f, this),
          default__ (x.default__, f, this)
        {
        }

        Voting_booth::
        Voting_booth (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          region_hierarchies_ (f, this),
          time_zone_information_ (f, this),
          custom_code_ (f, this),
          code_ (f, this),
          number_ (f, this),
          registered_electors_ (f, this),
          polling_station_code_ (f, this),
          polling_station_number_ (f, this),
          polling_station_criteria_ (f, this),
          polling_place_code_ (f, this),
          polling_place_registered_electors_ (f, this),
          polling_place_address_ (f, this),
          polling_place_name_ (f, this),
          default__ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Voting_booth::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // region-hierarchies
            //
            if (n.name () == "region-hierarchies" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Region_hierarchiesType > r (
                Region_hierarchiesTraits::create (i, f, this));

              if (!region_hierarchies_.present ())
              {
                this->region_hierarchies_.set (r);
                continue;
              }
            }

            // time-zone-information
            //
            if (n.name () == "time-zone-information" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Time_zone_informationType > r (
                Time_zone_informationTraits::create (i, f, this));

              if (!time_zone_information_.present ())
              {
                this->time_zone_information_.set (r);
                continue;
              }
            }

            break;
          }

          if (!region_hierarchies_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "region-hierarchies",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!time_zone_information_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "time-zone-information",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "number" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NumberType > r (
                NumberTraits::create (i, f, this));

              this->number_.set (r);
              continue;
            }

            if (n.name () == "registered-electors" && n.namespace_ ().empty ())
            {
              this->registered_electors_.set (Registered_electorsTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "polling-station-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_station_codeType > r (
                Polling_station_codeTraits::create (i, f, this));

              this->polling_station_code_.set (r);
              continue;
            }

            if (n.name () == "polling-station-number" && n.namespace_ ().empty ())
            {
              this->polling_station_number_.set (Polling_station_numberTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "polling-station-criteria" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_station_criteriaType > r (
                Polling_station_criteriaTraits::create (i, f, this));

              this->polling_station_criteria_.set (r);
              continue;
            }

            if (n.name () == "polling-place-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_place_codeType > r (
                Polling_place_codeTraits::create (i, f, this));

              this->polling_place_code_.set (r);
              continue;
            }

            if (n.name () == "polling-place-registered-electors" && n.namespace_ ().empty ())
            {
              this->polling_place_registered_electors_.set (Polling_place_registered_electorsTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "polling-place-address" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_place_addressType > r (
                Polling_place_addressTraits::create (i, f, this));

              this->polling_place_address_.set (r);
              continue;
            }

            if (n.name () == "polling-place-name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Polling_place_nameType > r (
                Polling_place_nameTraits::create (i, f, this));

              this->polling_place_name_.set (r);
              continue;
            }

            if (n.name () == "default" && n.namespace_ ().empty ())
            {
              this->default__.set (DefaultTraits::create (i, f, this));
              continue;
            }
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!number_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "number",
              "");
          }

          if (!registered_electors_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "registered-electors",
              "");
          }

          if (!polling_station_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-station-code",
              "");
          }

          if (!polling_station_number_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-station-number",
              "");
          }

          if (!polling_station_criteria_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-station-criteria",
              "");
          }

          if (!polling_place_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-code",
              "");
          }

          if (!polling_place_registered_electors_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-registered-electors",
              "");
          }

          if (!polling_place_address_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-address",
              "");
          }

          if (!polling_place_name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "polling-place-name",
              "");
          }

          if (!default__.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "default",
              "");
          }
        }

        Voting_booth* Voting_booth::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Voting_booth (*this, f, c);
        }

        Voting_booth::
        ~Voting_booth ()
        {
        }

        bool
        operator== (const Voting_booth& x, const Voting_booth& y)
        {
          if (!(x.getRegion_hierarchies () == y.getRegion_hierarchies ()))
            return false;

          if (!(x.getTime_zone_information () == y.getTime_zone_information ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getNumber () == y.getNumber ()))
            return false;

          if (!(x.getRegistered_electors () == y.getRegistered_electors ()))
            return false;

          if (!(x.getPolling_station_code () == y.getPolling_station_code ()))
            return false;

          if (!(x.getPolling_station_number () == y.getPolling_station_number ()))
            return false;

          if (!(x.getPolling_station_criteria () == y.getPolling_station_criteria ()))
            return false;

          if (!(x.getPolling_place_code () == y.getPolling_place_code ()))
            return false;

          if (!(x.getPolling_place_registered_electors () == y.getPolling_place_registered_electors ()))
            return false;

          if (!(x.getPolling_place_address () == y.getPolling_place_address ()))
            return false;

          if (!(x.getPolling_place_name () == y.getPolling_place_name ()))
            return false;

          if (!(x.getDefault () == y.getDefault ()))
            return false;

          return true;
        }

        bool
        operator!= (const Voting_booth& x, const Voting_booth& y)
        {
          return !(x == y);
        }

        // Logical_voter_group
        //

        Logical_voter_group::
        Logical_voter_group ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          custom_attributes_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          contest_group_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          voting_booth_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          region_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          hidden_ (getHiddenDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Logical_voter_group::
        Logical_voter_group (const Contest_group_codeType& contest_group_code,
                             const Operation_mode_codeType& operation_mode_code,
                             const Voting_booth_codeType& voting_booth_code,
                             const Region_codeType& region_code,
                             const Name_keyType& name_key,
                             const CodeType& code,
                             const Custom_codeType& custom_code)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          custom_attributes_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          contest_group_code_ (contest_group_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_code_ (operation_mode_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          voting_booth_code_ (voting_booth_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          region_code_ (region_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          hidden_ (getHiddenDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Logical_voter_group::
        Logical_voter_group (const Logical_voter_group& x,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          custom_attributes_ (x.custom_attributes_, f, this),
          contest_group_code_ (x.contest_group_code_, f, this),
          operation_mode_code_ (x.operation_mode_code_, f, this),
          voting_booth_code_ (x.voting_booth_code_, f, this),
          region_code_ (x.region_code_, f, this),
          name_key_ (x.name_key_, f, this),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          hidden_ (x.hidden_, f, this)
        {
        }

        Logical_voter_group::
        Logical_voter_group (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          custom_attributes_ (f, this),
          contest_group_code_ (f, this),
          operation_mode_code_ (f, this),
          voting_booth_code_ (f, this),
          region_code_ (f, this),
          name_key_ (f, this),
          code_ (f, this),
          custom_code_ (f, this),
          hidden_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Logical_voter_group::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // custom-attributes
            //
            if (n.name () == "custom-attributes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Custom_attributesType > r (
                Custom_attributesTraits::create (i, f, this));

              if (!this->custom_attributes_)
              {
                this->custom_attributes_.set (r);
                continue;
              }
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "contest-group-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Contest_group_codeType > r (
                Contest_group_codeTraits::create (i, f, this));

              this->contest_group_code_.set (r);
              continue;
            }

            if (n.name () == "operation-mode-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Operation_mode_codeType > r (
                Operation_mode_codeTraits::create (i, f, this));

              this->operation_mode_code_.set (r);
              continue;
            }

            if (n.name () == "voting-booth-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Voting_booth_codeType > r (
                Voting_booth_codeTraits::create (i, f, this));

              this->voting_booth_code_.set (r);
              continue;
            }

            if (n.name () == "region-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Region_codeType > r (
                Region_codeTraits::create (i, f, this));

              this->region_code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "hidden" && n.namespace_ ().empty ())
            {
              this->hidden_.set (HiddenTraits::create (i, f, this));
              continue;
            }
          }

          if (!contest_group_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "contest-group-code",
              "");
          }

          if (!operation_mode_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "operation-mode-code",
              "");
          }

          if (!voting_booth_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "voting-booth-code",
              "");
          }

          if (!region_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "region-code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!hidden_.present ())
          {
            this->hidden_.set (getHiddenDefaultValue ());
          }
        }

        Logical_voter_group* Logical_voter_group::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Logical_voter_group (*this, f, c);
        }

        Logical_voter_group::
        ~Logical_voter_group ()
        {
        }

        bool
        operator== (const Logical_voter_group& x, const Logical_voter_group& y)
        {
          if (!(x.getCustom_attributes () == y.getCustom_attributes ()))
            return false;

          if (!(x.getContest_group_code () == y.getContest_group_code ()))
            return false;

          if (!(x.getOperation_mode_code () == y.getOperation_mode_code ()))
            return false;

          if (!(x.getVoting_booth_code () == y.getVoting_booth_code ()))
            return false;

          if (!(x.getRegion_code () == y.getRegion_code ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getHidden () == y.getHidden ()))
            return false;

          return true;
        }

        bool
        operator!= (const Logical_voter_group& x, const Logical_voter_group& y)
        {
          return !(x == y);
        }

        // Custom_attribute_definitions
        //

        Custom_attribute_definitions::
        Custom_attribute_definitions ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          custom_attribute_definition_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Custom_attribute_definitions::
        Custom_attribute_definitions (const Custom_attribute_definitions& x,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          custom_attribute_definition_ (x.custom_attribute_definition_, f, this)
        {
        }

        Custom_attribute_definitions::
        Custom_attribute_definitions (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          custom_attribute_definition_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Custom_attribute_definitions::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // custom-attribute-definition
            //
            if (n.name () == "custom-attribute-definition" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Custom_attribute_definitionType > r (
                Custom_attribute_definitionTraits::create (i, f, this));

              this->custom_attribute_definition_.push_back (r);
              continue;
            }

            break;
          }
        }

        Custom_attribute_definitions* Custom_attribute_definitions::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Custom_attribute_definitions (*this, f, c);
        }

        Custom_attribute_definitions::
        ~Custom_attribute_definitions ()
        {
        }

        bool
        operator== (const Custom_attribute_definitions& x, const Custom_attribute_definitions& y)
        {
          if (!(x.getCustom_attribute_definition () == y.getCustom_attribute_definition ()))
            return false;

          return true;
        }

        bool
        operator!= (const Custom_attribute_definitions& x, const Custom_attribute_definitions& y)
        {
          return !(x == y);
        }

        // Tally_report
        //

        Tally_report::
        Tally_report ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          logical_voter_group_codes_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Tally_report::
        Tally_report (const Logical_voter_group_codesType& logical_voter_group_codes,
                      const CodeType& code,
                      const Description_keyType& description_key)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          logical_voter_group_codes_ (logical_voter_group_codes, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Tally_report::
        Tally_report (::std::auto_ptr< Logical_voter_group_codesType >& logical_voter_group_codes,
                      const CodeType& code,
                      const Description_keyType& description_key)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          logical_voter_group_codes_ (logical_voter_group_codes, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Tally_report::
        Tally_report (const Tally_report& x,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          logical_voter_group_codes_ (x.logical_voter_group_codes_, f, this),
          code_ (x.code_, f, this),
          description_key_ (x.description_key_, f, this)
        {
        }

        Tally_report::
        Tally_report (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          logical_voter_group_codes_ (f, this),
          code_ (f, this),
          description_key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Tally_report::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // logical-voter-group-codes
            //
            if (n.name () == "logical-voter-group-codes" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Logical_voter_group_codesType > r (
                Logical_voter_group_codesTraits::create (i, f, this));

              if (!logical_voter_group_codes_.present ())
              {
                this->logical_voter_group_codes_.set (r);
                continue;
              }
            }

            break;
          }

          if (!logical_voter_group_codes_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "logical-voter-group-codes",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }
        }

        Tally_report* Tally_report::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Tally_report (*this, f, c);
        }

        Tally_report::
        ~Tally_report ()
        {
        }

        bool
        operator== (const Tally_report& x, const Tally_report& y)
        {
          if (!(x.getLogical_voter_group_codes () == y.getLogical_voter_group_codes ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          return true;
        }

        bool
        operator!= (const Tally_report& x, const Tally_report& y)
        {
          return !(x == y);
        }

        // Roles
        //

        Roles::
        Roles ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          role_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Roles::
        Roles (const Roles& x,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          role_ (x.role_, f, this)
        {
        }

        Roles::
        Roles (const ::xercesc::DOMElement& e,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          role_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Roles::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // role
            //
            if (n.name () == "role" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< RoleType > r (
                RoleTraits::create (i, f, this));

              this->role_.push_back (r);
              continue;
            }

            break;
          }
        }

        Roles* Roles::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Roles (*this, f, c);
        }

        Roles::
        ~Roles ()
        {
        }

        bool
        operator== (const Roles& x, const Roles& y)
        {
          if (!(x.getRole () == y.getRole ()))
            return false;

          return true;
        }

        bool
        operator!= (const Roles& x, const Roles& y)
        {
          return !(x == y);
        }

        // Operation_mode_transitions
        //

        Operation_mode_transitions::
        Operation_mode_transitions ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          operation_mode_transition_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode_transitions::
        Operation_mode_transitions (const Operation_mode_transitions& x,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          operation_mode_transition_ (x.operation_mode_transition_, f, this)
        {
        }

        Operation_mode_transitions::
        Operation_mode_transitions (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          operation_mode_transition_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Operation_mode_transitions::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // operation-mode-transition
            //
            if (n.name () == "operation-mode-transition" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Operation_mode_transitionType > r (
                Operation_mode_transitionTraits::create (i, f, this));

              this->operation_mode_transition_.push_back (r);
              continue;
            }

            break;
          }
        }

        Operation_mode_transitions* Operation_mode_transitions::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Operation_mode_transitions (*this, f, c);
        }

        Operation_mode_transitions::
        ~Operation_mode_transitions ()
        {
        }

        bool
        operator== (const Operation_mode_transitions& x, const Operation_mode_transitions& y)
        {
          if (!(x.getOperation_mode_transition () == y.getOperation_mode_transition ()))
            return false;

          return true;
        }

        bool
        operator!= (const Operation_mode_transitions& x, const Operation_mode_transitions& y)
        {
          return !(x == y);
        }

        // Operation_mode_behaviors
        //

        Operation_mode_behaviors::
        Operation_mode_behaviors ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          activate_voters_as_demo_ (getActivate_voters_as_demoDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          reset_machine_status_at_startup_ (getReset_machine_status_at_startupDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          set_process_to_initiated_at_startup_ (getSet_process_to_initiated_at_startupDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          pass_device_diagnostic_at_startup_ (getPass_device_diagnostic_at_startupDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode_behaviors::
        Operation_mode_behaviors (const Operation_mode_behaviors& x,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          activate_voters_as_demo_ (x.activate_voters_as_demo_, f, this),
          reset_machine_status_at_startup_ (x.reset_machine_status_at_startup_, f, this),
          set_process_to_initiated_at_startup_ (x.set_process_to_initiated_at_startup_, f, this),
          pass_device_diagnostic_at_startup_ (x.pass_device_diagnostic_at_startup_, f, this)
        {
        }

        Operation_mode_behaviors::
        Operation_mode_behaviors (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          activate_voters_as_demo_ (f, this),
          reset_machine_status_at_startup_ (f, this),
          set_process_to_initiated_at_startup_ (f, this),
          pass_device_diagnostic_at_startup_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Operation_mode_behaviors::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "activate-voters-as-demo" && n.namespace_ ().empty ())
            {
              this->activate_voters_as_demo_.set (Activate_voters_as_demoTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "reset-machine-status-at-startup" && n.namespace_ ().empty ())
            {
              this->reset_machine_status_at_startup_.set (Reset_machine_status_at_startupTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "set-process-to-initiated-at-startup" && n.namespace_ ().empty ())
            {
              this->set_process_to_initiated_at_startup_.set (Set_process_to_initiated_at_startupTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "pass-device-diagnostic-at-startup" && n.namespace_ ().empty ())
            {
              this->pass_device_diagnostic_at_startup_.set (Pass_device_diagnostic_at_startupTraits::create (i, f, this));
              continue;
            }
          }

          if (!activate_voters_as_demo_.present ())
          {
            this->activate_voters_as_demo_.set (getActivate_voters_as_demoDefaultValue ());
          }

          if (!reset_machine_status_at_startup_.present ())
          {
            this->reset_machine_status_at_startup_.set (getReset_machine_status_at_startupDefaultValue ());
          }

          if (!set_process_to_initiated_at_startup_.present ())
          {
            this->set_process_to_initiated_at_startup_.set (getSet_process_to_initiated_at_startupDefaultValue ());
          }

          if (!pass_device_diagnostic_at_startup_.present ())
          {
            this->pass_device_diagnostic_at_startup_.set (getPass_device_diagnostic_at_startupDefaultValue ());
          }
        }

        Operation_mode_behaviors* Operation_mode_behaviors::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Operation_mode_behaviors (*this, f, c);
        }

        Operation_mode_behaviors::
        ~Operation_mode_behaviors ()
        {
        }

        bool
        operator== (const Operation_mode_behaviors& x, const Operation_mode_behaviors& y)
        {
          if (!(x.getActivate_voters_as_demo () == y.getActivate_voters_as_demo ()))
            return false;

          if (!(x.getReset_machine_status_at_startup () == y.getReset_machine_status_at_startup ()))
            return false;

          if (!(x.getSet_process_to_initiated_at_startup () == y.getSet_process_to_initiated_at_startup ()))
            return false;

          if (!(x.getPass_device_diagnostic_at_startup () == y.getPass_device_diagnostic_at_startup ()))
            return false;

          return true;
        }

        bool
        operator!= (const Operation_mode_behaviors& x, const Operation_mode_behaviors& y)
        {
          return !(x == y);
        }

        // Region_hierarchies
        //

        Region_hierarchies::
        Region_hierarchies ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          region_hierarchy_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_hierarchies::
        Region_hierarchies (const Region_hierarchies& x,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          region_hierarchy_ (x.region_hierarchy_, f, this)
        {
        }

        Region_hierarchies::
        Region_hierarchies (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          region_hierarchy_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Region_hierarchies::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // region-hierarchy
            //
            if (n.name () == "region-hierarchy" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Region_hierarchyType > r (
                Region_hierarchyTraits::create (i, f, this));

              this->region_hierarchy_.push_back (r);
              continue;
            }

            break;
          }
        }

        Region_hierarchies* Region_hierarchies::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Region_hierarchies (*this, f, c);
        }

        Region_hierarchies::
        ~Region_hierarchies ()
        {
        }

        bool
        operator== (const Region_hierarchies& x, const Region_hierarchies& y)
        {
          if (!(x.getRegion_hierarchy () == y.getRegion_hierarchy ()))
            return false;

          return true;
        }

        bool
        operator!= (const Region_hierarchies& x, const Region_hierarchies& y)
        {
          return !(x == y);
        }

        // Time_zone_information
        //

        Time_zone_information::
        Time_zone_information ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          bias_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          standard_date_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          standard_bias_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          daylight_date_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          daylight_bias_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Time_zone_information::
        Time_zone_information (const BiasType& bias,
                               const Standard_dateType& standard_date,
                               const Standard_biasType& standard_bias,
                               const Daylight_dateType& daylight_date,
                               const Daylight_biasType& daylight_bias,
                               const NameType& name)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          bias_ (bias, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          standard_date_ (standard_date, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          standard_bias_ (standard_bias, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          daylight_date_ (daylight_date, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          daylight_bias_ (daylight_bias, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_ (name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Time_zone_information::
        Time_zone_information (const BiasType& bias,
                               ::std::auto_ptr< Standard_dateType >& standard_date,
                               const Standard_biasType& standard_bias,
                               ::std::auto_ptr< Daylight_dateType >& daylight_date,
                               const Daylight_biasType& daylight_bias,
                               const NameType& name)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          bias_ (bias, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          standard_date_ (standard_date, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          standard_bias_ (standard_bias, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          daylight_date_ (daylight_date, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          daylight_bias_ (daylight_bias, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_ (name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Time_zone_information::
        Time_zone_information (const Time_zone_information& x,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          bias_ (x.bias_, f, this),
          standard_date_ (x.standard_date_, f, this),
          standard_bias_ (x.standard_bias_, f, this),
          daylight_date_ (x.daylight_date_, f, this),
          daylight_bias_ (x.daylight_bias_, f, this),
          name_ (x.name_, f, this)
        {
        }

        Time_zone_information::
        Time_zone_information (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          bias_ (f, this),
          standard_date_ (f, this),
          standard_bias_ (f, this),
          daylight_date_ (f, this),
          daylight_bias_ (f, this),
          name_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Time_zone_information::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // bias
            //
            if (n.name () == "bias" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              if (!bias_.present ())
              {
                this->bias_.set (BiasTraits::create (i, f, this));
                continue;
              }
            }

            // standard-date
            //
            if (n.name () == "standard-date" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Standard_dateType > r (
                Standard_dateTraits::create (i, f, this));

              if (!standard_date_.present ())
              {
                this->standard_date_.set (r);
                continue;
              }
            }

            // standard-bias
            //
            if (n.name () == "standard-bias" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              if (!standard_bias_.present ())
              {
                this->standard_bias_.set (Standard_biasTraits::create (i, f, this));
                continue;
              }
            }

            // daylight-date
            //
            if (n.name () == "daylight-date" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Daylight_dateType > r (
                Daylight_dateTraits::create (i, f, this));

              if (!daylight_date_.present ())
              {
                this->daylight_date_.set (r);
                continue;
              }
            }

            // daylight-bias
            //
            if (n.name () == "daylight-bias" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              if (!daylight_bias_.present ())
              {
                this->daylight_bias_.set (Daylight_biasTraits::create (i, f, this));
                continue;
              }
            }

            break;
          }

          if (!bias_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "bias",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!standard_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "standard-date",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!standard_bias_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "standard-bias",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!daylight_date_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "daylight-date",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          if (!daylight_bias_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "daylight-bias",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NameType > r (
                NameTraits::create (i, f, this));

              this->name_.set (r);
              continue;
            }
          }

          if (!name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name",
              "");
          }
        }

        Time_zone_information* Time_zone_information::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Time_zone_information (*this, f, c);
        }

        Time_zone_information::
        ~Time_zone_information ()
        {
        }

        bool
        operator== (const Time_zone_information& x, const Time_zone_information& y)
        {
          if (!(x.getBias () == y.getBias ()))
            return false;

          if (!(x.getStandard_date () == y.getStandard_date ()))
            return false;

          if (!(x.getStandard_bias () == y.getStandard_bias ()))
            return false;

          if (!(x.getDaylight_date () == y.getDaylight_date ()))
            return false;

          if (!(x.getDaylight_bias () == y.getDaylight_bias ()))
            return false;

          if (!(x.getName () == y.getName ()))
            return false;

          return true;
        }

        bool
        operator!= (const Time_zone_information& x, const Time_zone_information& y)
        {
          return !(x == y);
        }

        // Custom_attributes
        //

        Custom_attributes::
        Custom_attributes ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          custom_attribute_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Custom_attributes::
        Custom_attributes (const Custom_attributes& x,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          custom_attribute_ (x.custom_attribute_, f, this)
        {
        }

        Custom_attributes::
        Custom_attributes (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          custom_attribute_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Custom_attributes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // custom-attribute
            //
            if (n.name () == "custom-attribute" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Custom_attributeType > r (
                Custom_attributeTraits::create (i, f, this));

              this->custom_attribute_.push_back (r);
              continue;
            }

            break;
          }
        }

        Custom_attributes* Custom_attributes::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Custom_attributes (*this, f, c);
        }

        Custom_attributes::
        ~Custom_attributes ()
        {
        }

        bool
        operator== (const Custom_attributes& x, const Custom_attributes& y)
        {
          if (!(x.getCustom_attribute () == y.getCustom_attribute ()))
            return false;

          return true;
        }

        bool
        operator!= (const Custom_attributes& x, const Custom_attributes& y)
        {
          return !(x == y);
        }

        // Custom_attribute_definition
        //

        Custom_attribute_definition::
        Custom_attribute_definition ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          value_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          machine_type_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Custom_attribute_definition::
        Custom_attribute_definition (const CodeType& code,
                                     const Name_keyType& name_key,
                                     const Description_keyType& description_key,
                                     const Machine_typeType& machine_type)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          value_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          machine_type_ (machine_type, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Custom_attribute_definition::
        Custom_attribute_definition (const Custom_attribute_definition& x,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          value_ (x.value_, f, this),
          code_ (x.code_, f, this),
          name_key_ (x.name_key_, f, this),
          description_key_ (x.description_key_, f, this),
          machine_type_ (x.machine_type_, f, this)
        {
        }

        Custom_attribute_definition::
        Custom_attribute_definition (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          value_ (f, this),
          code_ (f, this),
          name_key_ (f, this),
          description_key_ (f, this),
          machine_type_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Custom_attribute_definition::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // value
            //
            if (n.name () == "value" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< ValueType > r (
                ValueTraits::create (i, f, this));

              this->value_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }

            if (n.name () == "machine-type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Machine_typeType > r (
                Machine_typeTraits::create (i, f, this));

              this->machine_type_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }

          if (!machine_type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "machine-type",
              "");
          }
        }

        Custom_attribute_definition* Custom_attribute_definition::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Custom_attribute_definition (*this, f, c);
        }

        Custom_attribute_definition::
        ~Custom_attribute_definition ()
        {
        }

        bool
        operator== (const Custom_attribute_definition& x, const Custom_attribute_definition& y)
        {
          if (!(x.getValue () == y.getValue ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          if (!(x.getMachine_type () == y.getMachine_type ()))
            return false;

          return true;
        }

        bool
        operator!= (const Custom_attribute_definition& x, const Custom_attribute_definition& y)
        {
          return !(x == y);
        }

        // Logical_voter_group_codes
        //

        Logical_voter_group_codes::
        Logical_voter_group_codes ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          logical_voter_group_code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Logical_voter_group_codes::
        Logical_voter_group_codes (const Logical_voter_group_codes& x,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          logical_voter_group_code_ (x.logical_voter_group_code_, f, this)
        {
        }

        Logical_voter_group_codes::
        Logical_voter_group_codes (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          logical_voter_group_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Logical_voter_group_codes::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // logical-voter-group-code
            //
            if (n.name () == "logical-voter-group-code" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Logical_voter_group_codeType > r (
                Logical_voter_group_codeTraits::create (i, f, this));

              this->logical_voter_group_code_.push_back (r);
              continue;
            }

            break;
          }
        }

        Logical_voter_group_codes* Logical_voter_group_codes::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Logical_voter_group_codes (*this, f, c);
        }

        Logical_voter_group_codes::
        ~Logical_voter_group_codes ()
        {
        }

        bool
        operator== (const Logical_voter_group_codes& x, const Logical_voter_group_codes& y)
        {
          if (!(x.getLogical_voter_group_code () == y.getLogical_voter_group_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Logical_voter_group_codes& x, const Logical_voter_group_codes& y)
        {
          return !(x == y);
        }

        // Role
        //

        Role::
        Role ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          functionality_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          system_role_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          extra_authentication_required_ (getExtra_authentication_requiredDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Role::
        Role (const KeyType& key,
              const Name_keyType& name_key,
              const Description_keyType& description_key,
              const System_roleType& system_role)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          functionality_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          key_ (key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          description_key_ (description_key, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          system_role_ (system_role, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          extra_authentication_required_ (getExtra_authentication_requiredDefaultValue (), ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Role::
        Role (const Role& x,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          functionality_ (x.functionality_, f, this),
          key_ (x.key_, f, this),
          name_key_ (x.name_key_, f, this),
          description_key_ (x.description_key_, f, this),
          system_role_ (x.system_role_, f, this),
          extra_authentication_required_ (x.extra_authentication_required_, f, this)
        {
        }

        Role::
        Role (const ::xercesc::DOMElement& e,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          functionality_ (f, this),
          key_ (f, this),
          name_key_ (f, this),
          description_key_ (f, this),
          system_role_ (f, this),
          extra_authentication_required_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Role::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // functionality
            //
            if (n.name () == "functionality" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< FunctionalityType > r (
                FunctionalityTraits::create (i, f, this));

              this->functionality_.push_back (r);
              continue;
            }

            break;
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< KeyType > r (
                KeyTraits::create (i, f, this));

              this->key_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "description-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Description_keyType > r (
                Description_keyTraits::create (i, f, this));

              this->description_key_.set (r);
              continue;
            }

            if (n.name () == "system-role" && n.namespace_ ().empty ())
            {
              this->system_role_.set (System_roleTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "extra-authentication-required" && n.namespace_ ().empty ())
            {
              this->extra_authentication_required_.set (Extra_authentication_requiredTraits::create (i, f, this));
              continue;
            }
          }

          if (!key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "key",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!description_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "description-key",
              "");
          }

          if (!system_role_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "system-role",
              "");
          }

          if (!extra_authentication_required_.present ())
          {
            this->extra_authentication_required_.set (getExtra_authentication_requiredDefaultValue ());
          }
        }

        Role* Role::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Role (*this, f, c);
        }

        Role::
        ~Role ()
        {
        }

        bool
        operator== (const Role& x, const Role& y)
        {
          if (!(x.getFunctionality () == y.getFunctionality ()))
            return false;

          if (!(x.getKey () == y.getKey ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getDescription_key () == y.getDescription_key ()))
            return false;

          if (!(x.getSystem_role () == y.getSystem_role ()))
            return false;

          if (!(x.getExtra_authentication_required () == y.getExtra_authentication_required ()))
            return false;

          return true;
        }

        bool
        operator!= (const Role& x, const Role& y)
        {
          return !(x == y);
        }

        // Operation_mode_transition
        //

        Operation_mode_transition::
        Operation_mode_transition ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          allowed_process_status_group_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          date_time_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          diagnostics_ok_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          diagnostics_status_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode_transition::
        Operation_mode_transition (const Allowed_process_status_groupType& allowed_process_status_group,
                                   const Operation_modeType& operation_mode,
                                   const Date_timeType& date_time,
                                   const Diagnostics_okType& diagnostics_ok,
                                   const Diagnostics_statusType& diagnostics_status)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          allowed_process_status_group_ (allowed_process_status_group, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_ (operation_mode, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          date_time_ (date_time, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          diagnostics_ok_ (diagnostics_ok, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          diagnostics_status_ (diagnostics_status, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode_transition::
        Operation_mode_transition (::std::auto_ptr< Allowed_process_status_groupType >& allowed_process_status_group,
                                   const Operation_modeType& operation_mode,
                                   const Date_timeType& date_time,
                                   const Diagnostics_okType& diagnostics_ok,
                                   const Diagnostics_statusType& diagnostics_status)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          allowed_process_status_group_ (allowed_process_status_group, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          operation_mode_ (operation_mode, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          date_time_ (date_time, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          diagnostics_ok_ (diagnostics_ok, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          diagnostics_status_ (diagnostics_status, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Operation_mode_transition::
        Operation_mode_transition (const Operation_mode_transition& x,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          allowed_process_status_group_ (x.allowed_process_status_group_, f, this),
          operation_mode_ (x.operation_mode_, f, this),
          date_time_ (x.date_time_, f, this),
          diagnostics_ok_ (x.diagnostics_ok_, f, this),
          diagnostics_status_ (x.diagnostics_status_, f, this)
        {
        }

        Operation_mode_transition::
        Operation_mode_transition (const ::xercesc::DOMElement& e,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                   ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          allowed_process_status_group_ (f, this),
          operation_mode_ (f, this),
          date_time_ (f, this),
          diagnostics_ok_ (f, this),
          diagnostics_status_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Operation_mode_transition::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // allowed-process-status-group
            //
            if (n.name () == "allowed-process-status-group" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Allowed_process_status_groupType > r (
                Allowed_process_status_groupTraits::create (i, f, this));

              if (!allowed_process_status_group_.present ())
              {
                this->allowed_process_status_group_.set (r);
                continue;
              }
            }

            break;
          }

          if (!allowed_process_status_group_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "allowed-process-status-group",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "operation-mode" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Operation_modeType > r (
                Operation_modeTraits::create (i, f, this));

              this->operation_mode_.set (r);
              continue;
            }

            if (n.name () == "date-time" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Date_timeType > r (
                Date_timeTraits::create (i, f, this));

              this->date_time_.set (r);
              continue;
            }

            if (n.name () == "diagnostics-ok" && n.namespace_ ().empty ())
            {
              this->diagnostics_ok_.set (Diagnostics_okTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "diagnostics-status" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Diagnostics_statusType > r (
                Diagnostics_statusTraits::create (i, f, this));

              this->diagnostics_status_.set (r);
              continue;
            }
          }

          if (!operation_mode_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "operation-mode",
              "");
          }

          if (!date_time_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "date-time",
              "");
          }

          if (!diagnostics_ok_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "diagnostics-ok",
              "");
          }

          if (!diagnostics_status_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "diagnostics-status",
              "");
          }
        }

        Operation_mode_transition* Operation_mode_transition::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Operation_mode_transition (*this, f, c);
        }

        Operation_mode_transition::
        ~Operation_mode_transition ()
        {
        }

        bool
        operator== (const Operation_mode_transition& x, const Operation_mode_transition& y)
        {
          if (!(x.getAllowed_process_status_group () == y.getAllowed_process_status_group ()))
            return false;

          if (!(x.getOperation_mode () == y.getOperation_mode ()))
            return false;

          if (!(x.getDate_time () == y.getDate_time ()))
            return false;

          if (!(x.getDiagnostics_ok () == y.getDiagnostics_ok ()))
            return false;

          if (!(x.getDiagnostics_status () == y.getDiagnostics_status ()))
            return false;

          return true;
        }

        bool
        operator!= (const Operation_mode_transition& x, const Operation_mode_transition& y)
        {
          return !(x == y);
        }

        // Region_hierarchy
        //

        Region_hierarchy::
        Region_hierarchy ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          category_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          is_default_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_hierarchy::
        Region_hierarchy (const CategoryType& category,
                          const CodeType& code,
                          const NameType& name,
                          const Is_defaultType& is_default)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          category_ (category, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_ (name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          is_default_ (is_default, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_hierarchy::
        Region_hierarchy (::std::auto_ptr< CategoryType >& category,
                          const CodeType& code,
                          const NameType& name,
                          const Is_defaultType& is_default)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          category_ (category, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          name_ (name, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          is_default_ (is_default, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Region_hierarchy::
        Region_hierarchy (const Region_hierarchy& x,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          category_ (x.category_, f, this),
          code_ (x.code_, f, this),
          name_ (x.name_, f, this),
          is_default_ (x.is_default_, f, this)
        {
        }

        Region_hierarchy::
        Region_hierarchy (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          category_ (f, this),
          code_ (f, this),
          name_ (f, this),
          is_default_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Region_hierarchy::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // category
            //
            if (n.name () == "category" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< CategoryType > r (
                CategoryTraits::create (i, f, this));

              if (!category_.present ())
              {
                this->category_.set (r);
                continue;
              }
            }

            break;
          }

          if (!category_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "category",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "name" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< NameType > r (
                NameTraits::create (i, f, this));

              this->name_.set (r);
              continue;
            }

            if (n.name () == "is-default" && n.namespace_ ().empty ())
            {
              this->is_default_.set (Is_defaultTraits::create (i, f, this));
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!name_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name",
              "");
          }

          if (!is_default_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "is-default",
              "");
          }
        }

        Region_hierarchy* Region_hierarchy::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Region_hierarchy (*this, f, c);
        }

        Region_hierarchy::
        ~Region_hierarchy ()
        {
        }

        bool
        operator== (const Region_hierarchy& x, const Region_hierarchy& y)
        {
          if (!(x.getCategory () == y.getCategory ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getName () == y.getName ()))
            return false;

          if (!(x.getIs_default () == y.getIs_default ()))
            return false;

          return true;
        }

        bool
        operator!= (const Region_hierarchy& x, const Region_hierarchy& y)
        {
          return !(x == y);
        }

        // Custom_attribute
        //

        Custom_attribute::
        Custom_attribute ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          code_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          value_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Custom_attribute::
        Custom_attribute (const CodeType& code,
                          const ValueType& value)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          code_ (code, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this),
          value_ (value, ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Custom_attribute::
        Custom_attribute (const Custom_attribute& x,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          code_ (x.code_, f, this),
          value_ (x.value_, f, this)
        {
        }

        Custom_attribute::
        Custom_attribute (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          code_ (f, this),
          value_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Custom_attribute::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "value" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< ValueType > r (
                ValueTraits::create (i, f, this));

              this->value_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!value_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "value",
              "");
          }
        }

        Custom_attribute* Custom_attribute::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Custom_attribute (*this, f, c);
        }

        Custom_attribute::
        ~Custom_attribute ()
        {
        }

        bool
        operator== (const Custom_attribute& x, const Custom_attribute& y)
        {
          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getValue () == y.getValue ()))
            return false;

          return true;
        }

        bool
        operator!= (const Custom_attribute& x, const Custom_attribute& y)
        {
          return !(x == y);
        }

        // Machine_type
        //

        Machine_type::
        Machine_type (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (e, f, c)
        {
          _xsd_Machine_type_convert ();
        }

        Machine_type::
        Machine_type (const ::xercesc::DOMAttr& a,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (a, f, c)
        {
          _xsd_Machine_type_convert ();
        }

        Machine_type::
        Machine_type (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (s, e, f, c)
        {
          _xsd_Machine_type_convert ();
        }

        Machine_type* Machine_type::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Machine_type (*this, f, c);
        }

        Machine_type::Value Machine_type::
        _xsd_Machine_type_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Machine_type_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Machine_type_indexes_,
                            _xsd_Machine_type_indexes_ + 2,
                            *this,
                            c));

          if (i == _xsd_Machine_type_indexes_ + 2 || _xsd_Machine_type_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Machine_type::
        _xsd_Machine_type_literals_[2] =
        {
          "VM",
          "PM"
        };

        const Machine_type::Value Machine_type::
        _xsd_Machine_type_indexes_[2] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::Machine_type::VOTING_DEVICES_PM,
          ::Smartmatic::SAES::Voting::VotingDevice::Machine_type::VOTING_DEVICES_VM
        };

        // Allowed_process_status_group
        //

        Allowed_process_status_group::
        Allowed_process_status_group ()
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (),
          allowed_process_status_ (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags (), this)
        {
        }

        Allowed_process_status_group::
        Allowed_process_status_group (const Allowed_process_status_group& x,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (x, f, c),
          allowed_process_status_ (x.allowed_process_status_, f, this)
        {
        }

        Allowed_process_status_group::
        Allowed_process_status_group (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type (e, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base, c),
          allowed_process_status_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Allowed_process_status_group::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // allowed-process-status
            //
            if (n.name () == "allowed-process-status" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Allowed_process_statusType > r (
                Allowed_process_statusTraits::create (i, f, this));

              this->allowed_process_status_.push_back (r);
              continue;
            }

            break;
          }
        }

        Allowed_process_status_group* Allowed_process_status_group::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Allowed_process_status_group (*this, f, c);
        }

        Allowed_process_status_group::
        ~Allowed_process_status_group ()
        {
        }

        bool
        operator== (const Allowed_process_status_group& x, const Allowed_process_status_group& y)
        {
          if (!(x.getAllowed_process_status () == y.getAllowed_process_status ()))
            return false;

          return true;
        }

        bool
        operator!= (const Allowed_process_status_group& x, const Allowed_process_status_group& y)
        {
          return !(x == y);
        }

        // Diagnostics_status
        //

        Diagnostics_status::
        Diagnostics_status (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (e, f, c)
        {
          _xsd_Diagnostics_status_convert ();
        }

        Diagnostics_status::
        Diagnostics_status (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (a, f, c)
        {
          _xsd_Diagnostics_status_convert ();
        }

        Diagnostics_status::
        Diagnostics_status (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (s, e, f, c)
        {
          _xsd_Diagnostics_status_convert ();
        }

        Diagnostics_status* Diagnostics_status::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Diagnostics_status (*this, f, c);
        }

        Diagnostics_status::Value Diagnostics_status::
        _xsd_Diagnostics_status_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Diagnostics_status_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Diagnostics_status_indexes_,
                            _xsd_Diagnostics_status_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_Diagnostics_status_indexes_ + 3 || _xsd_Diagnostics_status_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Diagnostics_status::
        _xsd_Diagnostics_status_literals_[3] =
        {
          "NoInherit",
          "AlwaysInherit",
          "InheritOnlyWhenNextModeIsNotInitialized"
        };

        const Diagnostics_status::Value Diagnostics_status::
        _xsd_Diagnostics_status_indexes_[3] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::Diagnostics_status::VOTING_DEVICES_ALWAYSINHERIT,
          ::Smartmatic::SAES::Voting::VotingDevice::Diagnostics_status::VOTING_DEVICES_INHERITONLYWHENNEXTMODEISNOTINITIALIZED,
          ::Smartmatic::SAES::Voting::VotingDevice::Diagnostics_status::VOTING_DEVICES_NOINHERIT
        };

        // Allowed_process_status
        //

        Allowed_process_status::
        Allowed_process_status (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (e, f, c)
        {
          _xsd_Allowed_process_status_convert ();
        }

        Allowed_process_status::
        Allowed_process_status (const ::xercesc::DOMAttr& a,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (a, f, c)
        {
          _xsd_Allowed_process_status_convert ();
        }

        Allowed_process_status::
        Allowed_process_status (const ::std::string& s,
                                const ::xercesc::DOMElement* e,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c)
        : ::Smartmatic::SAES::Voting::VotingDeviceTypes::String (s, e, f, c)
        {
          _xsd_Allowed_process_status_convert ();
        }

        Allowed_process_status* Allowed_process_status::
        _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c) const
        {
          return new class Allowed_process_status (*this, f, c);
        }

        Allowed_process_status::Value Allowed_process_status::
        _xsd_Allowed_process_status_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Allowed_process_status_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Allowed_process_status_indexes_,
                            _xsd_Allowed_process_status_indexes_ + 5,
                            *this,
                            c));

          if (i == _xsd_Allowed_process_status_indexes_ + 5 || _xsd_Allowed_process_status_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Allowed_process_status::
        _xsd_Allowed_process_status_literals_[5] =
        {
          "Always",
          "NotInitiated",
          "Initiated",
          "Closed",
          "ResultsTransmitted"
        };

        const Allowed_process_status::Value Allowed_process_status::
        _xsd_Allowed_process_status_indexes_[5] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status::VOTING_DEVICES_ALWAYS,
          ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status::VOTING_DEVICES_CLOSED,
          ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status::VOTING_DEVICES_INITIATED,
          ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status::VOTING_DEVICES_NOTINITIATED,
          ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status::VOTING_DEVICES_RESULTSTRANSMITTED
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::std::string& u,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
              d, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::std::string& u,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
              d, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
              d, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             const ::std::string& sid,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             const ::std::string& sid,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::xercesc::InputSource& i,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
              d, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::xercesc::InputSource& i,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
              d, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
              d, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::xercesc::DOMDocument& d,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
              ::Smartmatic::SAES::Voting::VotingDevice::parseVoting_devices (
                c, f | ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "voting-devices" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "voting-devices",
            "http://www.smartmatic.com/Saes/Voting/VotingDevice");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "voting-devices" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "voting-devices",
            "http://www.smartmatic.com/Saes/Voting/VotingDevice");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        void
        serializeVoting_devices (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVoting_devices (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoting_devices (::std::ostream& o,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoting_devices (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeVoting_devices (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoting_devices (::xercesc::XMLFormatTarget& t,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 const ::std::string& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeVoting_devices (::xercesc::DOMDocument& d,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "voting-devices" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "voting-devices",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }
        }

        ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVoting_devices (const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& s,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "voting-devices",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice",
              m, f));

          ::Smartmatic::SAES::Voting::VotingDevice::serializeVoting_devices (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const Region_category& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // region
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "region",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getRegion ();
          }

          // category
          //
          if (i.getCategory ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "category",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *i.getCategory ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // category-level
          //
          if (i.getCategory_level ())
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "category-level",
                e));

            a << *i.getCategory_level ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Custom_date_time& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Custom_date_time& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream& l,
                    const Custom_date_time& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Time_zone_date& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // month
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "month",
                e));

            a << i.getMonth ();
          }

          // day
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "day",
                e));

            a << i.getDay ();
          }

          // hour
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "hour",
                e));

            a << i.getHour ();
          }

          // minute
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "minute",
                e));

            a << i.getMinute ();
          }

          // second
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "second",
                e));

            a << i.getSecond ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Functionality& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Functionality& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream& l,
                    const Functionality& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const CategoryLevel& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const CategoryLevel& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream& l,
                    const CategoryLevel& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Voting_devices& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // voting-device
          //
          for (Voting_devices::Voting_deviceConstIterator
               b (i.getVoting_device ().begin ()), n (i.getVoting_device ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "voting-device",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }

          // languages
          //
          if (i.getLanguages ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "languages",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *i.getLanguages ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Region& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Voting_device& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // keys
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "keys",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getKeys ();
          }

          // operation-modes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "operation-modes",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getOperation_modes ();
          }

          // voting-booths
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "voting-booths",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getVoting_booths ();
          }

          // logical-voter-groups
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "logical-voter-groups",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getLogical_voter_groups ();
          }

          // tally-reports
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "tally-reports",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getTally_reports ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Keys& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // transmission-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "transmission-key",
                e));

            a << i.getTransmission_key ();
          }

          // protection-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "protection-key",
                e));

            a << i.getProtection_key ();
          }

          // backup-zip-file-password
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "backup-zip-file-password",
                e));

            a << i.getBackup_zip_file_password ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Operation_modes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // operation-mode
          //
          for (Operation_modes::Operation_modeConstIterator
               b (i.getOperation_mode ().begin ()), n (i.getOperation_mode ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "operation-mode",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Voting_booths& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // voting-booth
          //
          for (Voting_booths::Voting_boothConstIterator
               b (i.getVoting_booth ().begin ()), n (i.getVoting_booth ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "voting-booth",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Logical_voter_groups& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // logical-voter-group
          //
          for (Logical_voter_groups::Logical_voter_groupConstIterator
               b (i.getLogical_voter_group ().begin ()), n (i.getLogical_voter_group ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "logical-voter-group",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }

          // custom-attribute-definitions
          //
          if (i.getCustom_attribute_definitions ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "custom-attribute-definitions",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *i.getCustom_attribute_definitions ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Tally_reports& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // tally-report
          //
          for (Tally_reports::Tally_reportConstIterator
               b (i.getTally_report ().begin ()), n (i.getTally_report ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "tally-report",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Operation_mode& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // roles
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "roles",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getRoles ();
          }

          // operation-mode-transitions
          //
          if (i.getOperation_mode_transitions ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "operation-mode-transitions",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *i.getOperation_mode_transitions ();
          }

          // operation-mode-behaviors
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "operation-mode-behaviors",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getOperation_mode_behaviors ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }

          // folder-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "folder-name",
                e));

            a << i.getFolder_name ();
          }

          // default
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "default",
                e));

            a << i.getDefault ();
          }

          // unblocking-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "unblocking-key",
                e));

            a << i.getUnblocking_key ();
          }

          // audio-unblocking-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "audio-unblocking-key",
                e));

            a << i.getAudio_unblocking_key ();
          }

          // scanner-unblocking-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "scanner-unblocking-key",
                e));

            a << i.getScanner_unblocking_key ();
          }

          // synchronization-unblocking-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "synchronization-unblocking-key",
                e));

            a << i.getSynchronization_unblocking_key ();
          }

          // opening-date-time
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "opening-date-time",
                e));

            a << i.getOpening_date_time ();
          }

          // closing-date-time
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "closing-date-time",
                e));

            a << i.getClosing_date_time ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Voting_booth& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // region-hierarchies
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "region-hierarchies",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getRegion_hierarchies ();
          }

          // time-zone-information
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "time-zone-information",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getTime_zone_information ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // number
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "number",
                e));

            a << i.getNumber ();
          }

          // registered-electors
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "registered-electors",
                e));

            a << i.getRegistered_electors ();
          }

          // polling-station-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-station-code",
                e));

            a << i.getPolling_station_code ();
          }

          // polling-station-number
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-station-number",
                e));

            a << i.getPolling_station_number ();
          }

          // polling-station-criteria
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-station-criteria",
                e));

            a << i.getPolling_station_criteria ();
          }

          // polling-place-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-code",
                e));

            a << i.getPolling_place_code ();
          }

          // polling-place-registered-electors
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-registered-electors",
                e));

            a << i.getPolling_place_registered_electors ();
          }

          // polling-place-address
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-address",
                e));

            a << i.getPolling_place_address ();
          }

          // polling-place-name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "polling-place-name",
                e));

            a << i.getPolling_place_name ();
          }

          // default
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "default",
                e));

            a << i.getDefault ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Logical_voter_group& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // custom-attributes
          //
          if (i.getCustom_attributes ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "custom-attributes",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *i.getCustom_attributes ();
          }

          // contest-group-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "contest-group-code",
                e));

            a << i.getContest_group_code ();
          }

          // operation-mode-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "operation-mode-code",
                e));

            a << i.getOperation_mode_code ();
          }

          // voting-booth-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "voting-booth-code",
                e));

            a << i.getVoting_booth_code ();
          }

          // region-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "region-code",
                e));

            a << i.getRegion_code ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // hidden
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "hidden",
                e));

            a << i.getHidden ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Custom_attribute_definitions& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // custom-attribute-definition
          //
          for (Custom_attribute_definitions::Custom_attribute_definitionConstIterator
               b (i.getCustom_attribute_definition ().begin ()), n (i.getCustom_attribute_definition ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "custom-attribute-definition",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Tally_report& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // logical-voter-group-codes
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "logical-voter-group-codes",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getLogical_voter_group_codes ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Roles& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // role
          //
          for (Roles::RoleConstIterator
               b (i.getRole ().begin ()), n (i.getRole ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "role",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Operation_mode_transitions& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // operation-mode-transition
          //
          for (Operation_mode_transitions::Operation_mode_transitionConstIterator
               b (i.getOperation_mode_transition ().begin ()), n (i.getOperation_mode_transition ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "operation-mode-transition",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Operation_mode_behaviors& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // activate-voters-as-demo
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "activate-voters-as-demo",
                e));

            a << i.getActivate_voters_as_demo ();
          }

          // reset-machine-status-at-startup
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "reset-machine-status-at-startup",
                e));

            a << i.getReset_machine_status_at_startup ();
          }

          // set-process-to-initiated-at-startup
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "set-process-to-initiated-at-startup",
                e));

            a << i.getSet_process_to_initiated_at_startup ();
          }

          // pass-device-diagnostic-at-startup
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "pass-device-diagnostic-at-startup",
                e));

            a << i.getPass_device_diagnostic_at_startup ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Region_hierarchies& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // region-hierarchy
          //
          for (Region_hierarchies::Region_hierarchyConstIterator
               b (i.getRegion_hierarchy ().begin ()), n (i.getRegion_hierarchy ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "region-hierarchy",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Time_zone_information& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // bias
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "bias",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getBias ();
          }

          // standard-date
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "standard-date",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getStandard_date ();
          }

          // standard-bias
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "standard-bias",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getStandard_bias ();
          }

          // daylight-date
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "daylight-date",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getDaylight_date ();
          }

          // daylight-bias
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "daylight-bias",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getDaylight_bias ();
          }

          // name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name",
                e));

            a << i.getName ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Custom_attributes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // custom-attribute
          //
          for (Custom_attributes::Custom_attributeConstIterator
               b (i.getCustom_attribute ().begin ()), n (i.getCustom_attribute ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "custom-attribute",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Custom_attribute_definition& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // value
          //
          for (Custom_attribute_definition::ValueConstIterator
               b (i.getValue ().begin ()), n (i.getValue ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "value",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }

          // machine-type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "machine-type",
                e));

            a << i.getMachine_type ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Logical_voter_group_codes& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // logical-voter-group-code
          //
          for (Logical_voter_group_codes::Logical_voter_group_codeConstIterator
               b (i.getLogical_voter_group_code ().begin ()), n (i.getLogical_voter_group_code ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "logical-voter-group-code",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Role& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // functionality
          //
          for (Role::FunctionalityConstIterator
               b (i.getFunctionality ().begin ()), n (i.getFunctionality ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "functionality",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }

          // key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "key",
                e));

            a << i.getKey ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // description-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "description-key",
                e));

            a << i.getDescription_key ();
          }

          // system-role
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "system-role",
                e));

            a << i.getSystem_role ();
          }

          // extra-authentication-required
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "extra-authentication-required",
                e));

            a << i.getExtra_authentication_required ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Operation_mode_transition& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // allowed-process-status-group
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "allowed-process-status-group",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getAllowed_process_status_group ();
          }

          // operation-mode
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "operation-mode",
                e));

            a << i.getOperation_mode ();
          }

          // date-time
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "date-time",
                e));

            a << i.getDate_time ();
          }

          // diagnostics-ok
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "diagnostics-ok",
                e));

            a << i.getDiagnostics_ok ();
          }

          // diagnostics-status
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "diagnostics-status",
                e));

            a << i.getDiagnostics_status ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Region_hierarchy& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // category
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "category",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getCategory ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // name
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name",
                e));

            a << i.getName ();
          }

          // is-default
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "is-default",
                e));

            a << i.getIs_default ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Custom_attribute& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // value
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "value",
                e));

            a << i.getValue ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Machine_type& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Machine_type& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream& l,
                    const Machine_type& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Allowed_process_status_group& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type& > (i);

          // allowed-process-status
          //
          for (Allowed_process_status_group::Allowed_process_statusConstIterator
               b (i.getAllowed_process_status ().begin ()), n (i.getAllowed_process_status ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "allowed-process-status",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Diagnostics_status& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Diagnostics_status& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream& l,
                    const Diagnostics_status& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Allowed_process_status& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Allowed_process_status& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream& l,
                    const Allowed_process_status& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

