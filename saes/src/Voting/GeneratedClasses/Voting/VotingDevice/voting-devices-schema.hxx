// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from voting-devices-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_VOTING_DEVICES_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_VOTING_DEVICES_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace VotingDeviceTypes
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__VOTINGDEVICETYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__VOTINGDEVICETYPES
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        class Region_category;
        class Custom_date_time;
        class Time_zone_date;
        class Functionality;
        class CategoryLevel;
        class Voting_devices;
        class Region;
        class Voting_device;
        class Keys;
        class Operation_modes;
        class Voting_booths;
        class Logical_voter_groups;
        class Tally_reports;
        class Operation_mode;
        class Voting_booth;
        class Logical_voter_group;
        class Custom_attribute_definitions;
        class Tally_report;
        class Roles;
        class Operation_mode_transitions;
        class Operation_mode_behaviors;
        class Region_hierarchies;
        class Time_zone_information;
        class Custom_attributes;
        class Custom_attribute_definition;
        class Logical_voter_group_codes;
        class Role;
        class Operation_mode_transition;
        class Region_hierarchy;
        class Custom_attribute;
        class Machine_type;
        class Allowed_process_status_group;
        class Diagnostics_status;
        class Allowed_process_status;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "Voting/Election/election-language-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/VotingDevice
       * schema namespace.
       */
      namespace VotingDevice
      {
        /**
         * @brief Class corresponding to the %region-category schema type.
         *
         * @nosubgrouping
         */
        class Region_category: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name region
           *
           * @brief Accessor and modifier functions for the %region
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Region RegionType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RegionType, char > RegionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RegionType&
          getRegion () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RegionType&
          getRegion ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setRegion (const RegionType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRegion (::std::auto_ptr< RegionType > p);

          //@}

          /**
           * @name category
           *
           * @brief Accessor and modifier functions for the %category
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Region_category CategoryType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< CategoryType > CategoryOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CategoryType, char > CategoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const CategoryOptional&
          getCategory () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          CategoryOptional&
          getCategory ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCategory (const CategoryType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setCategory (const CategoryOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCategory (::std::auto_ptr< CategoryType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name category-level
           *
           * @brief Accessor and modifier functions for the %category-level
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::CategoryLevel Category_levelType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Category_levelType > Category_levelOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Category_levelType, char > Category_levelTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Category_levelOptional&
          getCategory_level () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Category_levelOptional&
          getCategory_level ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCategory_level (const Category_levelType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCategory_level (const Category_levelOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCategory_level (::std::auto_ptr< Category_levelType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Region_category ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Region_category (const RegionType&,
                           const CodeType&,
                           const Name_keyType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Region_category (::std::auto_ptr< RegionType >&,
                           const CodeType&,
                           const Name_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Region_category (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Region_category (const Region_category& x,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Region_category*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Region_category ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< RegionType > region_;
          CategoryOptional category_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          Category_levelOptional category_level_;

          //@endcond
        };

        bool
        operator== (const Region_category&, const Region_category&);

        bool
        operator!= (const Region_category&, const Region_category&);


        /**
         * @brief Class corresponding to the %custom-date-time schema type.
         *
         * Type that defines the format used for representing date-time fields.
         *
         * @nosubgrouping
         */
        class Custom_date_time: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::String
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from initializers for required 
           * elements and attributes.
           */
          Custom_date_time ();

          /**
           * @brief Create an instance from a C string and initializers
           * for required elements and attributes.
           */
          Custom_date_time (const char*);

          /**
           * @brief Create an instance from a string andinitializers
           * for required elements and attributes.
           */
          Custom_date_time (const ::std::string&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Custom_date_time (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_date_time (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_date_time (const ::xercesc::DOMAttr& a,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_date_time (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Custom_date_time (const Custom_date_time& x,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Custom_date_time*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Custom_date_time ();
        };

        /**
         * @brief Class corresponding to the %time-zone-date schema type.
         *
         * @nosubgrouping
         */
        class Time_zone_date: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name month
           *
           * @brief Accessor and modifier functions for the %month
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Short MonthType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< MonthType, char > MonthTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const MonthType&
          getMonth () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          MonthType&
          getMonth ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMonth (const MonthType& x);

          //@}

          /**
           * @name day
           *
           * @brief Accessor and modifier functions for the %day
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Short DayType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DayType, char > DayTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DayType&
          getDay () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DayType&
          getDay ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDay (const DayType& x);

          //@}

          /**
           * @name hour
           *
           * @brief Accessor and modifier functions for the %hour
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Short HourType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< HourType, char > HourTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const HourType&
          getHour () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          HourType&
          getHour ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHour (const HourType& x);

          //@}

          /**
           * @name minute
           *
           * @brief Accessor and modifier functions for the %minute
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Short MinuteType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< MinuteType, char > MinuteTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const MinuteType&
          getMinute () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          MinuteType&
          getMinute ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMinute (const MinuteType& x);

          //@}

          /**
           * @name second
           *
           * @brief Accessor and modifier functions for the %second
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Short SecondType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< SecondType, char > SecondTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const SecondType&
          getSecond () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          SecondType&
          getSecond ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSecond (const SecondType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Time_zone_date ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Time_zone_date (const MonthType&,
                          const DayType&,
                          const HourType&,
                          const MinuteType&,
                          const SecondType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Time_zone_date (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Time_zone_date (const Time_zone_date& x,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Time_zone_date*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Time_zone_date ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< MonthType > month_;
          ::xsd::cxx::tree::one< DayType > day_;
          ::xsd::cxx::tree::one< HourType > hour_;
          ::xsd::cxx::tree::one< MinuteType > minute_;
          ::xsd::cxx::tree::one< SecondType > second_;

          //@endcond
        };

        bool
        operator== (const Time_zone_date&, const Time_zone_date&);

        bool
        operator!= (const Time_zone_date&, const Time_zone_date&);


        /**
         * @brief Enumeration class corresponding to the %functionality
         * schema type.
         */
        class Functionality: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            VOTING_DEVICES_AUDITVOTES,
            VOTING_DEVICES_CHANGEOPERATIONMODE,
            VOTING_DEVICES_CLOSEAPLICATION,
            VOTING_DEVICES_CLOSEPOLLS,
            VOTING_DEVICES_CONSOLIDATE,
            VOTING_DEVICES_CONSOLIDATEMULTIPLEMEMORIES,
            VOTING_DEVICES_DIAGNOSEABLE,
            VOTING_DEVICES_DIAGNOSEACQUISITION,
            VOTING_DEVICES_DIAGNOSEALLDEVICES,
            VOTING_DEVICES_DIAGNOSEAUDIOVOTINGEXPERIENCE,
            VOTING_DEVICES_DIAGNOSEBALLOT,
            VOTING_DEVICES_DIAGNOSECARDREADER,
            VOTING_DEVICES_DIAGNOSEFINGERPRINTREADER,
            VOTING_DEVICES_DIAGNOSEFLASH,
            VOTING_DEVICES_DIAGNOSEMODEM,
            VOTING_DEVICES_DIAGNOSEPENACQUISITION,
            VOTING_DEVICES_DIAGNOSEPENRECOGNITION,
            VOTING_DEVICES_DIAGNOSEPRINTER,
            VOTING_DEVICES_DIAGNOSERECOGNITION,
            VOTING_DEVICES_DIAGNOSESCREENCONTRAST,
            VOTING_DEVICES_DIAGNOSESOUND,
            VOTING_DEVICES_DIAGNOSETOKEN,
            VOTING_DEVICES_DIAGNOSETOUCHSCREEN,
            VOTING_DEVICES_DIAGNOSEVOTINGEXPERIENCE,
            VOTING_DEVICES_MAKEUSBSTICKBACKUP,
            VOTING_DEVICES_MAKEUSBWORMBACKUP,
            VOTING_DEVICES_MENU,
            VOTING_DEVICES_OPENPOLLS,
            VOTING_DEVICES_PENLINKING,
            VOTING_DEVICES_PRINTAUDITLOG,
            VOTING_DEVICES_PRINTCONSOLIDATIONRESULTS,
            VOTING_DEVICES_PRINTELECTIONRESULTS,
            VOTING_DEVICES_PRINTENVIRONMENTMANAGERLOG,
            VOTING_DEVICES_PRINTERRORLOG,
            VOTING_DEVICES_PRINTPREVIEWCONSOLIDATIONRESULTS,
            VOTING_DEVICES_PRINTPREVIEWELECTIONRESULTS,
            VOTING_DEVICES_PRINTTRANSMISSIONLOG,
            VOTING_DEVICES_PRINTVOTESCOPY,
            VOTING_DEVICES_RESETMACHINE,
            VOTING_DEVICES_RESTARTVOTECOUNT,
            VOTING_DEVICES_SCANNINGSERVICESRESET,
            VOTING_DEVICES_SETDATETIME,
            VOTING_DEVICES_SETPOLLWORKERSINFO,
            VOTING_DEVICES_SHOWANDPRINTLOGS,
            VOTING_DEVICES_SHUTDOWN,
            VOTING_DEVICES_TRANSMITALLELECTIONRESULTSAUTOMATIC,
            VOTING_DEVICES_TRANSMITALLELECTIONRESULTSSELECTIVE,
            VOTING_DEVICES_TRANSMITCONFIGURATIONANDSTATUSAUTOMATIC,
            VOTING_DEVICES_TRANSMITCONFIGURATIONANDSTATUSSELECTIVE,
            VOTING_DEVICES_TRANSMITLOGSAUTOMATIC,
            VOTING_DEVICES_TRANSMITLOGSSELECTIVE,
            VOTING_DEVICES_TRANSMITMACHINEELECTIONRESULTSAUTOMATIC,
            VOTING_DEVICES_TRANSMITMACHINEELECTIONRESULTSSELECTIVE,
            VOTING_DEVICES_TRANSMITNOTRANSMITTEDELECTIONRESULTSAUTOMATIC,
            VOTING_DEVICES_TRANSMITNOTRANSMITTEDELECTIONRESULTSSELECTIVE,
            VOTING_DEVICES_VIEWCONSOLIDATIONINFORMATION,
            VOTING_DEVICES_VIEWMACHINEINFORMATION,
            VOTING_DEVICES_VIEWTRANSMISSIONINFORMATION,
            VOTING_DEVICES_VIEWVOTERESULTS,
            VOTING_DEVICES_VOTESIMULATION
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Functionality ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Functionality (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Functionality (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Functionality (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Functionality (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Functionality (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Functionality (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Functionality (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Functionality (const Functionality& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Functionality*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Functionality&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Functionality_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Functionality_convert () const;

          public:
          static const char* const _xsd_Functionality_literals_[60];
          static const Value _xsd_Functionality_indexes_[60];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %CategoryLevel
         * schema type.
         */
        class CategoryLevel: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            VOTING_DEVICES_FIRST_LEVEL,
            VOTING_DEVICES_SECOND_LEVEL,
            VOTING_DEVICES_THIRD_LEVEL,
            VOTING_DEVICES_FOURTH_LEVEL,
            VOTING_DEVICES_FIFTH_LEVEL,
            VOTING_DEVICES_SIXTH_LEVEL,
            VOTING_DEVICES_SEVENTH_LEVEL,
            VOTING_DEVICES_EIGHTH_LEVEL
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          CategoryLevel ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          CategoryLevel (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          CategoryLevel (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          CategoryLevel (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          CategoryLevel (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CategoryLevel (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CategoryLevel (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CategoryLevel (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          CategoryLevel (const CategoryLevel& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CategoryLevel*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          CategoryLevel&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_CategoryLevel_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_CategoryLevel_convert () const;

          public:
          static const char* const _xsd_CategoryLevel_literals_[8];
          static const Value _xsd_CategoryLevel_indexes_[8];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %voting-devices schema type.
         *
         * @nosubgrouping
         */
        class Voting_devices: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name voting-device
           *
           * @brief Accessor and modifier functions for the %voting-device
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Voting_device Voting_deviceType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Voting_deviceType > Voting_deviceSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Voting_deviceSequence::iterator Voting_deviceIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Voting_deviceSequence::const_iterator Voting_deviceConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_deviceType, char > Voting_deviceTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Voting_deviceSequence&
          getVoting_device () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Voting_deviceSequence&
          getVoting_device ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setVoting_device (const Voting_deviceSequence& s);

          //@}

          /**
           * @name languages
           *
           * @brief Accessor and modifier functions for the %languages
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Languages LanguagesType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LanguagesType > LanguagesOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LanguagesType, char > LanguagesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LanguagesOptional&
          getLanguages () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LanguagesOptional&
          getLanguages ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLanguages (const LanguagesType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setLanguages (const LanguagesOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setLanguages (::std::auto_ptr< LanguagesType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Voting_devices ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_devices (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Voting_devices (const Voting_devices& x,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Voting_devices*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Voting_devices ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Voting_deviceSequence voting_device_;
          LanguagesOptional languages_;

          //@endcond
        };

        bool
        operator== (const Voting_devices&, const Voting_devices&);

        bool
        operator!= (const Voting_devices&, const Voting_devices&);


        /**
         * @brief Class corresponding to the %region schema type.
         *
         * @nosubgrouping
         */
        class Region: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Region ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Region (const CodeType&,
                  const Name_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Region (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Region (const Region& x,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Region*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Region ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;

          //@endcond
        };

        bool
        operator== (const Region&, const Region&);

        bool
        operator!= (const Region&, const Region&);


        /**
         * @brief Class corresponding to the %voting-device schema type.
         *
         * @nosubgrouping
         */
        class Voting_device: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name keys
           *
           * @brief Accessor and modifier functions for the %keys
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Keys KeysType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< KeysType, char > KeysTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const KeysType&
          getKeys () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          KeysType&
          getKeys ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setKeys (const KeysType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setKeys (::std::auto_ptr< KeysType > p);

          //@}

          /**
           * @name operation-modes
           *
           * @brief Accessor and modifier functions for the %operation-modes
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Operation_modes Operation_modesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_modesType, char > Operation_modesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Operation_modesType&
          getOperation_modes () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Operation_modesType&
          getOperation_modes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setOperation_modes (const Operation_modesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOperation_modes (::std::auto_ptr< Operation_modesType > p);

          //@}

          /**
           * @name voting-booths
           *
           * @brief Accessor and modifier functions for the %voting-booths
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Voting_booths Voting_boothsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_boothsType, char > Voting_boothsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Voting_boothsType&
          getVoting_booths () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Voting_boothsType&
          getVoting_booths ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setVoting_booths (const Voting_boothsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoting_booths (::std::auto_ptr< Voting_boothsType > p);

          //@}

          /**
           * @name logical-voter-groups
           *
           * @brief Accessor and modifier functions for the %logical-voter-groups
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Logical_voter_groups Logical_voter_groupsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_groupsType, char > Logical_voter_groupsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Logical_voter_groupsType&
          getLogical_voter_groups () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Logical_voter_groupsType&
          getLogical_voter_groups ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogical_voter_groups (const Logical_voter_groupsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogical_voter_groups (::std::auto_ptr< Logical_voter_groupsType > p);

          //@}

          /**
           * @name tally-reports
           *
           * @brief Accessor and modifier functions for the %tally-reports
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Tally_reports Tally_reportsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Tally_reportsType, char > Tally_reportsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Tally_reportsType&
          getTally_reports () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Tally_reportsType&
          getTally_reports ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTally_reports (const Tally_reportsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTally_reports (::std::auto_ptr< Tally_reportsType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Voting_device ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Voting_device (const KeysType&,
                         const Operation_modesType&,
                         const Voting_boothsType&,
                         const Logical_voter_groupsType&,
                         const Tally_reportsType&,
                         const CodeType&,
                         const Custom_codeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Voting_device (::std::auto_ptr< KeysType >&,
                         ::std::auto_ptr< Operation_modesType >&,
                         ::std::auto_ptr< Voting_boothsType >&,
                         ::std::auto_ptr< Logical_voter_groupsType >&,
                         ::std::auto_ptr< Tally_reportsType >&,
                         const CodeType&,
                         const Custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_device (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Voting_device (const Voting_device& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Voting_device*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Voting_device ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< KeysType > keys_;
          ::xsd::cxx::tree::one< Operation_modesType > operation_modes_;
          ::xsd::cxx::tree::one< Voting_boothsType > voting_booths_;
          ::xsd::cxx::tree::one< Logical_voter_groupsType > logical_voter_groups_;
          ::xsd::cxx::tree::one< Tally_reportsType > tally_reports_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;

          //@endcond
        };

        bool
        operator== (const Voting_device&, const Voting_device&);

        bool
        operator!= (const Voting_device&, const Voting_device&);


        /**
         * @brief Class corresponding to the %keys schema type.
         *
         * @nosubgrouping
         */
        class Keys: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name transmission-key
           *
           * @brief Accessor and modifier functions for the %transmission-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Transmission_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Transmission_keyType, char > Transmission_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Transmission_keyType&
          getTransmission_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Transmission_keyType&
          getTransmission_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTransmission_key (const Transmission_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmission_key (::std::auto_ptr< Transmission_keyType > p);

          //@}

          /**
           * @name protection-key
           *
           * @brief Accessor and modifier functions for the %protection-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Protection_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Protection_keyType, char > Protection_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Protection_keyType&
          getProtection_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Protection_keyType&
          getProtection_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setProtection_key (const Protection_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setProtection_key (::std::auto_ptr< Protection_keyType > p);

          //@}

          /**
           * @name backup-zip-file-password
           *
           * @brief Accessor and modifier functions for the %backup-zip-file-password
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Backup_zip_file_passwordType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Backup_zip_file_passwordType, char > Backup_zip_file_passwordTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Backup_zip_file_passwordType&
          getBackup_zip_file_password () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Backup_zip_file_passwordType&
          getBackup_zip_file_password ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBackup_zip_file_password (const Backup_zip_file_passwordType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBackup_zip_file_password (::std::auto_ptr< Backup_zip_file_passwordType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Keys ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Keys (const Transmission_keyType&,
                const Protection_keyType&,
                const Backup_zip_file_passwordType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Keys (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Keys (const Keys& x,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Keys*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Keys ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Transmission_keyType > transmission_key_;
          ::xsd::cxx::tree::one< Protection_keyType > protection_key_;
          ::xsd::cxx::tree::one< Backup_zip_file_passwordType > backup_zip_file_password_;

          //@endcond
        };

        bool
        operator== (const Keys&, const Keys&);

        bool
        operator!= (const Keys&, const Keys&);


        /**
         * @brief Class corresponding to the %operation-modes schema type.
         *
         * @nosubgrouping
         */
        class Operation_modes: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name operation-mode
           *
           * @brief Accessor and modifier functions for the %operation-mode
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Operation_mode Operation_modeType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Operation_modeType > Operation_modeSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Operation_modeSequence::iterator Operation_modeIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Operation_modeSequence::const_iterator Operation_modeConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_modeType, char > Operation_modeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Operation_modeSequence&
          getOperation_mode () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Operation_modeSequence&
          getOperation_mode ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setOperation_mode (const Operation_modeSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Operation_modes ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Operation_modes (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Operation_modes (const Operation_modes& x,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Operation_modes*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Operation_modes ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Operation_modeSequence operation_mode_;

          //@endcond
        };

        bool
        operator== (const Operation_modes&, const Operation_modes&);

        bool
        operator!= (const Operation_modes&, const Operation_modes&);


        /**
         * @brief Class corresponding to the %voting-booths schema type.
         *
         * @nosubgrouping
         */
        class Voting_booths: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name voting-booth
           *
           * @brief Accessor and modifier functions for the %voting-booth
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Voting_booth Voting_boothType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Voting_boothType > Voting_boothSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Voting_boothSequence::iterator Voting_boothIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Voting_boothSequence::const_iterator Voting_boothConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_boothType, char > Voting_boothTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Voting_boothSequence&
          getVoting_booth () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Voting_boothSequence&
          getVoting_booth ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setVoting_booth (const Voting_boothSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Voting_booths ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_booths (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Voting_booths (const Voting_booths& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Voting_booths*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Voting_booths ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Voting_boothSequence voting_booth_;

          //@endcond
        };

        bool
        operator== (const Voting_booths&, const Voting_booths&);

        bool
        operator!= (const Voting_booths&, const Voting_booths&);


        /**
         * @brief Class corresponding to the %logical-voter-groups schema type.
         *
         * @nosubgrouping
         */
        class Logical_voter_groups: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name logical-voter-group
           *
           * @brief Accessor and modifier functions for the %logical-voter-group
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Logical_voter_group Logical_voter_groupType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Logical_voter_groupType > Logical_voter_groupSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Logical_voter_groupSequence::iterator Logical_voter_groupIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Logical_voter_groupSequence::const_iterator Logical_voter_groupConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_groupType, char > Logical_voter_groupTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Logical_voter_groupSequence&
          getLogical_voter_group () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Logical_voter_groupSequence&
          getLogical_voter_group ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setLogical_voter_group (const Logical_voter_groupSequence& s);

          //@}

          /**
           * @name custom-attribute-definitions
           *
           * @brief Accessor and modifier functions for the %custom-attribute-definitions
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_attribute_definitions Custom_attribute_definitionsType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Custom_attribute_definitionsType > Custom_attribute_definitionsOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_definitionsType, char > Custom_attribute_definitionsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Custom_attribute_definitionsOptional&
          getCustom_attribute_definitions () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Custom_attribute_definitionsOptional&
          getCustom_attribute_definitions ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCustom_attribute_definitions (const Custom_attribute_definitionsType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setCustom_attribute_definitions (const Custom_attribute_definitionsOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCustom_attribute_definitions (::std::auto_ptr< Custom_attribute_definitionsType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Logical_voter_groups ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Logical_voter_groups (const ::xercesc::DOMElement& e,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Logical_voter_groups (const Logical_voter_groups& x,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Logical_voter_groups*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Logical_voter_groups ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Logical_voter_groupSequence logical_voter_group_;
          Custom_attribute_definitionsOptional custom_attribute_definitions_;

          //@endcond
        };

        bool
        operator== (const Logical_voter_groups&, const Logical_voter_groups&);

        bool
        operator!= (const Logical_voter_groups&, const Logical_voter_groups&);


        /**
         * @brief Class corresponding to the %tally-reports schema type.
         *
         * @nosubgrouping
         */
        class Tally_reports: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name tally-report
           *
           * @brief Accessor and modifier functions for the %tally-report
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Tally_report Tally_reportType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Tally_reportType > Tally_reportSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Tally_reportSequence::iterator Tally_reportIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Tally_reportSequence::const_iterator Tally_reportConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Tally_reportType, char > Tally_reportTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Tally_reportSequence&
          getTally_report () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Tally_reportSequence&
          getTally_report ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setTally_report (const Tally_reportSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Tally_reports ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Tally_reports (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Tally_reports (const Tally_reports& x,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Tally_reports*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Tally_reports ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Tally_reportSequence tally_report_;

          //@endcond
        };

        bool
        operator== (const Tally_reports&, const Tally_reports&);

        bool
        operator!= (const Tally_reports&, const Tally_reports&);


        /**
         * @brief Class corresponding to the %operation-mode schema type.
         *
         * @nosubgrouping
         */
        class Operation_mode: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name roles
           *
           * @brief Accessor and modifier functions for the %roles
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Roles RolesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RolesType, char > RolesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RolesType&
          getRoles () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RolesType&
          getRoles ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setRoles (const RolesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRoles (::std::auto_ptr< RolesType > p);

          //@}

          /**
           * @name operation-mode-transitions
           *
           * @brief Accessor and modifier functions for the %operation-mode-transitions
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Operation_mode_transitions Operation_mode_transitionsType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Operation_mode_transitionsType > Operation_mode_transitionsOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_mode_transitionsType, char > Operation_mode_transitionsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Operation_mode_transitionsOptional&
          getOperation_mode_transitions () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Operation_mode_transitionsOptional&
          getOperation_mode_transitions ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setOperation_mode_transitions (const Operation_mode_transitionsType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setOperation_mode_transitions (const Operation_mode_transitionsOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setOperation_mode_transitions (::std::auto_ptr< Operation_mode_transitionsType > p);

          //@}

          /**
           * @name operation-mode-behaviors
           *
           * @brief Accessor and modifier functions for the %operation-mode-behaviors
           * required element.
           *
           * The these settings helps to configure Voters Training Mode and
           * Operators training mode.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Operation_mode_behaviors Operation_mode_behaviorsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_mode_behaviorsType, char > Operation_mode_behaviorsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Operation_mode_behaviorsType&
          getOperation_mode_behaviors () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Operation_mode_behaviorsType&
          getOperation_mode_behaviors ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setOperation_mode_behaviors (const Operation_mode_behaviorsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOperation_mode_behaviors (::std::auto_ptr< Operation_mode_behaviorsType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name folder-name
           *
           * @brief Accessor and modifier functions for the %folder-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Folder_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Folder_nameType, char > Folder_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Folder_nameType&
          getFolder_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Folder_nameType&
          getFolder_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setFolder_name (const Folder_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setFolder_name (::std::auto_ptr< Folder_nameType > p);

          //@}

          /**
           * @name default
           *
           * @brief Accessor and modifier functions for the %default
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean DefaultType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultType, char > DefaultTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DefaultType&
          getDefault () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DefaultType&
          getDefault ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDefault (const DefaultType& x);

          //@}

          /**
           * @name unblocking-key
           *
           * @brief Accessor and modifier functions for the %unblocking-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Unblocking_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Unblocking_keyType, char > Unblocking_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Unblocking_keyType&
          getUnblocking_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Unblocking_keyType&
          getUnblocking_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setUnblocking_key (const Unblocking_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setUnblocking_key (::std::auto_ptr< Unblocking_keyType > p);

          //@}

          /**
           * @name audio-unblocking-key
           *
           * @brief Accessor and modifier functions for the %audio-unblocking-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Audio_unblocking_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Audio_unblocking_keyType, char > Audio_unblocking_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Audio_unblocking_keyType&
          getAudio_unblocking_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Audio_unblocking_keyType&
          getAudio_unblocking_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAudio_unblocking_key (const Audio_unblocking_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAudio_unblocking_key (::std::auto_ptr< Audio_unblocking_keyType > p);

          //@}

          /**
           * @name scanner-unblocking-key
           *
           * @brief Accessor and modifier functions for the %scanner-unblocking-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Scanner_unblocking_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Scanner_unblocking_keyType, char > Scanner_unblocking_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Scanner_unblocking_keyType&
          getScanner_unblocking_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Scanner_unblocking_keyType&
          getScanner_unblocking_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setScanner_unblocking_key (const Scanner_unblocking_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setScanner_unblocking_key (::std::auto_ptr< Scanner_unblocking_keyType > p);

          //@}

          /**
           * @name synchronization-unblocking-key
           *
           * @brief Accessor and modifier functions for the %synchronization-unblocking-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Synchronization_unblocking_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Synchronization_unblocking_keyType, char > Synchronization_unblocking_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Synchronization_unblocking_keyType&
          getSynchronization_unblocking_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Synchronization_unblocking_keyType&
          getSynchronization_unblocking_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSynchronization_unblocking_key (const Synchronization_unblocking_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setSynchronization_unblocking_key (::std::auto_ptr< Synchronization_unblocking_keyType > p);

          //@}

          /**
           * @name opening-date-time
           *
           * @brief Accessor and modifier functions for the %opening-date-time
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_date_time Opening_date_timeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Opening_date_timeType, char > Opening_date_timeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Opening_date_timeType&
          getOpening_date_time () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Opening_date_timeType&
          getOpening_date_time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setOpening_date_time (const Opening_date_timeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOpening_date_time (::std::auto_ptr< Opening_date_timeType > p);

          //@}

          /**
           * @name closing-date-time
           *
           * @brief Accessor and modifier functions for the %closing-date-time
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_date_time Closing_date_timeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Closing_date_timeType, char > Closing_date_timeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Closing_date_timeType&
          getClosing_date_time () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Closing_date_timeType&
          getClosing_date_time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setClosing_date_time (const Closing_date_timeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setClosing_date_time (::std::auto_ptr< Closing_date_timeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Operation_mode ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Operation_mode (const RolesType&,
                          const Operation_mode_behaviorsType&,
                          const CodeType&,
                          const Custom_codeType&,
                          const Name_keyType&,
                          const Description_keyType&,
                          const Folder_nameType&,
                          const DefaultType&,
                          const Unblocking_keyType&,
                          const Audio_unblocking_keyType&,
                          const Scanner_unblocking_keyType&,
                          const Synchronization_unblocking_keyType&,
                          const Opening_date_timeType&,
                          const Closing_date_timeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Operation_mode (::std::auto_ptr< RolesType >&,
                          ::std::auto_ptr< Operation_mode_behaviorsType >&,
                          const CodeType&,
                          const Custom_codeType&,
                          const Name_keyType&,
                          const Description_keyType&,
                          const Folder_nameType&,
                          const DefaultType&,
                          const Unblocking_keyType&,
                          const Audio_unblocking_keyType&,
                          const Scanner_unblocking_keyType&,
                          const Synchronization_unblocking_keyType&,
                          const Opening_date_timeType&,
                          const Closing_date_timeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Operation_mode (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Operation_mode (const Operation_mode& x,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Operation_mode*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Operation_mode ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< RolesType > roles_;
          Operation_mode_transitionsOptional operation_mode_transitions_;
          ::xsd::cxx::tree::one< Operation_mode_behaviorsType > operation_mode_behaviors_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;
          ::xsd::cxx::tree::one< Folder_nameType > folder_name_;
          ::xsd::cxx::tree::one< DefaultType > default__;
          ::xsd::cxx::tree::one< Unblocking_keyType > unblocking_key_;
          ::xsd::cxx::tree::one< Audio_unblocking_keyType > audio_unblocking_key_;
          ::xsd::cxx::tree::one< Scanner_unblocking_keyType > scanner_unblocking_key_;
          ::xsd::cxx::tree::one< Synchronization_unblocking_keyType > synchronization_unblocking_key_;
          ::xsd::cxx::tree::one< Opening_date_timeType > opening_date_time_;
          ::xsd::cxx::tree::one< Closing_date_timeType > closing_date_time_;

          //@endcond
        };

        bool
        operator== (const Operation_mode&, const Operation_mode&);

        bool
        operator!= (const Operation_mode&, const Operation_mode&);


        /**
         * @brief Class corresponding to the %voting-booth schema type.
         *
         * @nosubgrouping
         */
        class Voting_booth: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name region-hierarchies
           *
           * @brief Accessor and modifier functions for the %region-hierarchies
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Region_hierarchies Region_hierarchiesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Region_hierarchiesType, char > Region_hierarchiesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Region_hierarchiesType&
          getRegion_hierarchies () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Region_hierarchiesType&
          getRegion_hierarchies ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setRegion_hierarchies (const Region_hierarchiesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRegion_hierarchies (::std::auto_ptr< Region_hierarchiesType > p);

          //@}

          /**
           * @name time-zone-information
           *
           * @brief Accessor and modifier functions for the %time-zone-information
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Time_zone_information Time_zone_informationType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Time_zone_informationType, char > Time_zone_informationTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Time_zone_informationType&
          getTime_zone_information () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Time_zone_informationType&
          getTime_zone_information ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTime_zone_information (const Time_zone_informationType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTime_zone_information (::std::auto_ptr< Time_zone_informationType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name number
           *
           * @brief Accessor and modifier functions for the %number
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String NumberType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const NumberType&
          getNumber () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          NumberType&
          getNumber ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNumber (const NumberType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setNumber (::std::auto_ptr< NumberType > p);

          //@}

          /**
           * @name registered-electors
           *
           * @brief Accessor and modifier functions for the %registered-electors
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::PositiveInteger Registered_electorsType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Registered_electorsType, char > Registered_electorsTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Registered_electorsType&
          getRegistered_electors () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Registered_electorsType&
          getRegistered_electors ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setRegistered_electors (const Registered_electorsType& x);

          //@}

          /**
           * @name polling-station-code
           *
           * @brief Accessor and modifier functions for the %polling-station-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Polling_station_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_station_codeType, char > Polling_station_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_station_codeType&
          getPolling_station_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_station_codeType&
          getPolling_station_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_station_code (const Polling_station_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_station_code (::std::auto_ptr< Polling_station_codeType > p);

          //@}

          /**
           * @name polling-station-number
           *
           * @brief Accessor and modifier functions for the %polling-station-number
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::PositiveInteger Polling_station_numberType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_station_numberType, char > Polling_station_numberTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_station_numberType&
          getPolling_station_number () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_station_numberType&
          getPolling_station_number ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_station_number (const Polling_station_numberType& x);

          //@}

          /**
           * @name polling-station-criteria
           *
           * @brief Accessor and modifier functions for the %polling-station-criteria
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Polling_station_criteriaType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_station_criteriaType, char > Polling_station_criteriaTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_station_criteriaType&
          getPolling_station_criteria () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_station_criteriaType&
          getPolling_station_criteria ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_station_criteria (const Polling_station_criteriaType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_station_criteria (::std::auto_ptr< Polling_station_criteriaType > p);

          //@}

          /**
           * @name polling-place-code
           *
           * @brief Accessor and modifier functions for the %polling-place-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Polling_place_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_codeType, char > Polling_place_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_codeType&
          getPolling_place_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_codeType&
          getPolling_place_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_code (const Polling_place_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_place_code (::std::auto_ptr< Polling_place_codeType > p);

          //@}

          /**
           * @name polling-place-registered-electors
           *
           * @brief Accessor and modifier functions for the %polling-place-registered-electors
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::PositiveInteger Polling_place_registered_electorsType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_registered_electorsType, char > Polling_place_registered_electorsTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_registered_electorsType&
          getPolling_place_registered_electors () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_registered_electorsType&
          getPolling_place_registered_electors ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_registered_electors (const Polling_place_registered_electorsType& x);

          //@}

          /**
           * @name polling-place-address
           *
           * @brief Accessor and modifier functions for the %polling-place-address
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Polling_place_addressType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_addressType, char > Polling_place_addressTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_addressType&
          getPolling_place_address () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_addressType&
          getPolling_place_address ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_address (const Polling_place_addressType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_place_address (::std::auto_ptr< Polling_place_addressType > p);

          //@}

          /**
           * @name polling-place-name
           *
           * @brief Accessor and modifier functions for the %polling-place-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Polling_place_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Polling_place_nameType, char > Polling_place_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Polling_place_nameType&
          getPolling_place_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Polling_place_nameType&
          getPolling_place_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPolling_place_name (const Polling_place_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setPolling_place_name (::std::auto_ptr< Polling_place_nameType > p);

          //@}

          /**
           * @name default
           *
           * @brief Accessor and modifier functions for the %default
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean DefaultType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< DefaultType, char > DefaultTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const DefaultType&
          getDefault () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          DefaultType&
          getDefault ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDefault (const DefaultType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Voting_booth ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Voting_booth (const Region_hierarchiesType&,
                        const Time_zone_informationType&,
                        const Custom_codeType&,
                        const CodeType&,
                        const NumberType&,
                        const Registered_electorsType&,
                        const Polling_station_codeType&,
                        const Polling_station_numberType&,
                        const Polling_station_criteriaType&,
                        const Polling_place_codeType&,
                        const Polling_place_registered_electorsType&,
                        const Polling_place_addressType&,
                        const Polling_place_nameType&,
                        const DefaultType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Voting_booth (::std::auto_ptr< Region_hierarchiesType >&,
                        ::std::auto_ptr< Time_zone_informationType >&,
                        const Custom_codeType&,
                        const CodeType&,
                        const NumberType&,
                        const Registered_electorsType&,
                        const Polling_station_codeType&,
                        const Polling_station_numberType&,
                        const Polling_station_criteriaType&,
                        const Polling_place_codeType&,
                        const Polling_place_registered_electorsType&,
                        const Polling_place_addressType&,
                        const Polling_place_nameType&,
                        const DefaultType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_booth (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Voting_booth (const Voting_booth& x,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Voting_booth*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Voting_booth ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Region_hierarchiesType > region_hierarchies_;
          ::xsd::cxx::tree::one< Time_zone_informationType > time_zone_information_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< NumberType > number_;
          ::xsd::cxx::tree::one< Registered_electorsType > registered_electors_;
          ::xsd::cxx::tree::one< Polling_station_codeType > polling_station_code_;
          ::xsd::cxx::tree::one< Polling_station_numberType > polling_station_number_;
          ::xsd::cxx::tree::one< Polling_station_criteriaType > polling_station_criteria_;
          ::xsd::cxx::tree::one< Polling_place_codeType > polling_place_code_;
          ::xsd::cxx::tree::one< Polling_place_registered_electorsType > polling_place_registered_electors_;
          ::xsd::cxx::tree::one< Polling_place_addressType > polling_place_address_;
          ::xsd::cxx::tree::one< Polling_place_nameType > polling_place_name_;
          ::xsd::cxx::tree::one< DefaultType > default__;

          //@endcond
        };

        bool
        operator== (const Voting_booth&, const Voting_booth&);

        bool
        operator!= (const Voting_booth&, const Voting_booth&);


        /**
         * @brief Class corresponding to the %logical-voter-group schema type.
         *
         * @nosubgrouping
         */
        class Logical_voter_group: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name custom-attributes
           *
           * @brief Accessor and modifier functions for the %custom-attributes
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_attributes Custom_attributesType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Custom_attributesType > Custom_attributesOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attributesType, char > Custom_attributesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Custom_attributesOptional&
          getCustom_attributes () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Custom_attributesOptional&
          getCustom_attributes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCustom_attributes (const Custom_attributesType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setCustom_attributes (const Custom_attributesOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCustom_attributes (::std::auto_ptr< Custom_attributesType > p);

          //@}

          /**
           * @name contest-group-code
           *
           * @brief Accessor and modifier functions for the %contest-group-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Contest_group_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_group_codeType, char > Contest_group_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_group_codeType&
          getContest_group_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_group_codeType&
          getContest_group_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_group_code (const Contest_group_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_group_code (::std::auto_ptr< Contest_group_codeType > p);

          //@}

          /**
           * @name operation-mode-code
           *
           * @brief Accessor and modifier functions for the %operation-mode-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Operation_mode_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_mode_codeType, char > Operation_mode_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Operation_mode_codeType&
          getOperation_mode_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Operation_mode_codeType&
          getOperation_mode_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setOperation_mode_code (const Operation_mode_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOperation_mode_code (::std::auto_ptr< Operation_mode_codeType > p);

          //@}

          /**
           * @name voting-booth-code
           *
           * @brief Accessor and modifier functions for the %voting-booth-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Voting_booth_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_booth_codeType, char > Voting_booth_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Voting_booth_codeType&
          getVoting_booth_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Voting_booth_codeType&
          getVoting_booth_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVoting_booth_code (const Voting_booth_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoting_booth_code (::std::auto_ptr< Voting_booth_codeType > p);

          //@}

          /**
           * @name region-code
           *
           * @brief Accessor and modifier functions for the %region-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Region_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Region_codeType, char > Region_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Region_codeType&
          getRegion_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Region_codeType&
          getRegion_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setRegion_code (const Region_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRegion_code (::std::auto_ptr< Region_codeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name hidden
           *
           * @brief Accessor and modifier functions for the %hidden
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean HiddenType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< HiddenType, char > HiddenTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const HiddenType&
          getHidden () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          HiddenType&
          getHidden ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHidden (const HiddenType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static HiddenType
          getHiddenDefaultValue ();

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Logical_voter_group ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Logical_voter_group (const Contest_group_codeType&,
                               const Operation_mode_codeType&,
                               const Voting_booth_codeType&,
                               const Region_codeType&,
                               const Name_keyType&,
                               const CodeType&,
                               const Custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Logical_voter_group (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Logical_voter_group (const Logical_voter_group& x,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                               ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Logical_voter_group*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Logical_voter_group ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Custom_attributesOptional custom_attributes_;
          ::xsd::cxx::tree::one< Contest_group_codeType > contest_group_code_;
          ::xsd::cxx::tree::one< Operation_mode_codeType > operation_mode_code_;
          ::xsd::cxx::tree::one< Voting_booth_codeType > voting_booth_code_;
          ::xsd::cxx::tree::one< Region_codeType > region_code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< HiddenType > hidden_;

          //@endcond
        };

        bool
        operator== (const Logical_voter_group&, const Logical_voter_group&);

        bool
        operator!= (const Logical_voter_group&, const Logical_voter_group&);


        /**
         * @brief Class corresponding to the %custom-attribute-definitions schema type.
         *
         * @nosubgrouping
         */
        class Custom_attribute_definitions: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name custom-attribute-definition
           *
           * @brief Accessor and modifier functions for the %custom-attribute-definition
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_attribute_definition Custom_attribute_definitionType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Custom_attribute_definitionType > Custom_attribute_definitionSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Custom_attribute_definitionSequence::iterator Custom_attribute_definitionIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Custom_attribute_definitionSequence::const_iterator Custom_attribute_definitionConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attribute_definitionType, char > Custom_attribute_definitionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Custom_attribute_definitionSequence&
          getCustom_attribute_definition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Custom_attribute_definitionSequence&
          getCustom_attribute_definition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setCustom_attribute_definition (const Custom_attribute_definitionSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Custom_attribute_definitions ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_attribute_definitions (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Custom_attribute_definitions (const Custom_attribute_definitions& x,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Custom_attribute_definitions*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Custom_attribute_definitions ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Custom_attribute_definitionSequence custom_attribute_definition_;

          //@endcond
        };

        bool
        operator== (const Custom_attribute_definitions&, const Custom_attribute_definitions&);

        bool
        operator!= (const Custom_attribute_definitions&, const Custom_attribute_definitions&);


        /**
         * @brief Class corresponding to the %tally-report schema type.
         *
         * @nosubgrouping
         */
        class Tally_report: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name logical-voter-group-codes
           *
           * @brief Accessor and modifier functions for the %logical-voter-group-codes
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Logical_voter_group_codes Logical_voter_group_codesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_group_codesType, char > Logical_voter_group_codesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Logical_voter_group_codesType&
          getLogical_voter_group_codes () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Logical_voter_group_codesType&
          getLogical_voter_group_codes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLogical_voter_group_codes (const Logical_voter_group_codesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setLogical_voter_group_codes (::std::auto_ptr< Logical_voter_group_codesType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Tally_report ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Tally_report (const Logical_voter_group_codesType&,
                        const CodeType&,
                        const Description_keyType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Tally_report (::std::auto_ptr< Logical_voter_group_codesType >&,
                        const CodeType&,
                        const Description_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Tally_report (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Tally_report (const Tally_report& x,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Tally_report*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Tally_report ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Logical_voter_group_codesType > logical_voter_group_codes_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;

          //@endcond
        };

        bool
        operator== (const Tally_report&, const Tally_report&);

        bool
        operator!= (const Tally_report&, const Tally_report&);


        /**
         * @brief Class corresponding to the %roles schema type.
         *
         * @nosubgrouping
         */
        class Roles: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name role
           *
           * @brief Accessor and modifier functions for the %role
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Role RoleType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< RoleType > RoleSequence;

          /**
           * @brief Element iterator type.
           */
          typedef RoleSequence::iterator RoleIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef RoleSequence::const_iterator RoleConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RoleType, char > RoleTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const RoleSequence&
          getRole () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          RoleSequence&
          getRole ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setRole (const RoleSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Roles ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Roles (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Roles (const Roles& x,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Roles*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Roles ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          RoleSequence role_;

          //@endcond
        };

        bool
        operator== (const Roles&, const Roles&);

        bool
        operator!= (const Roles&, const Roles&);


        /**
         * @brief Class corresponding to the %operation-mode-transitions schema type.
         *
         * @nosubgrouping
         */
        class Operation_mode_transitions: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name operation-mode-transition
           *
           * @brief Accessor and modifier functions for the %operation-mode-transition
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Operation_mode_transition Operation_mode_transitionType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Operation_mode_transitionType > Operation_mode_transitionSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Operation_mode_transitionSequence::iterator Operation_mode_transitionIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Operation_mode_transitionSequence::const_iterator Operation_mode_transitionConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_mode_transitionType, char > Operation_mode_transitionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Operation_mode_transitionSequence&
          getOperation_mode_transition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Operation_mode_transitionSequence&
          getOperation_mode_transition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setOperation_mode_transition (const Operation_mode_transitionSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Operation_mode_transitions ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Operation_mode_transitions (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Operation_mode_transitions (const Operation_mode_transitions& x,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                      ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Operation_mode_transitions*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Operation_mode_transitions ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Operation_mode_transitionSequence operation_mode_transition_;

          //@endcond
        };

        bool
        operator== (const Operation_mode_transitions&, const Operation_mode_transitions&);

        bool
        operator!= (const Operation_mode_transitions&, const Operation_mode_transitions&);


        /**
         * @brief Class corresponding to the %operation-mode-behaviors schema type.
         *
         * @nosubgrouping
         */
        class Operation_mode_behaviors: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name activate-voters-as-demo
           *
           * @brief Accessor and modifier functions for the %activate-voters-as-demo
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Activate_voters_as_demoType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Activate_voters_as_demoType, char > Activate_voters_as_demoTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Activate_voters_as_demoType&
          getActivate_voters_as_demo () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Activate_voters_as_demoType&
          getActivate_voters_as_demo ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setActivate_voters_as_demo (const Activate_voters_as_demoType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Activate_voters_as_demoType
          getActivate_voters_as_demoDefaultValue ();

          //@}

          /**
           * @name reset-machine-status-at-startup
           *
           * @brief Accessor and modifier functions for the %reset-machine-status-at-startup
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Reset_machine_status_at_startupType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Reset_machine_status_at_startupType, char > Reset_machine_status_at_startupTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Reset_machine_status_at_startupType&
          getReset_machine_status_at_startup () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Reset_machine_status_at_startupType&
          getReset_machine_status_at_startup ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setReset_machine_status_at_startup (const Reset_machine_status_at_startupType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Reset_machine_status_at_startupType
          getReset_machine_status_at_startupDefaultValue ();

          //@}

          /**
           * @name set-process-to-initiated-at-startup
           *
           * @brief Accessor and modifier functions for the %set-process-to-initiated-at-startup
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Set_process_to_initiated_at_startupType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Set_process_to_initiated_at_startupType, char > Set_process_to_initiated_at_startupTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Set_process_to_initiated_at_startupType&
          getSet_process_to_initiated_at_startup () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Set_process_to_initiated_at_startupType&
          getSet_process_to_initiated_at_startup ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSet_process_to_initiated_at_startup (const Set_process_to_initiated_at_startupType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Set_process_to_initiated_at_startupType
          getSet_process_to_initiated_at_startupDefaultValue ();

          //@}

          /**
           * @name pass-device-diagnostic-at-startup
           *
           * @brief Accessor and modifier functions for the %pass-device-diagnostic-at-startup
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Pass_device_diagnostic_at_startupType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pass_device_diagnostic_at_startupType, char > Pass_device_diagnostic_at_startupTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Pass_device_diagnostic_at_startupType&
          getPass_device_diagnostic_at_startup () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Pass_device_diagnostic_at_startupType&
          getPass_device_diagnostic_at_startup ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPass_device_diagnostic_at_startup (const Pass_device_diagnostic_at_startupType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Pass_device_diagnostic_at_startupType
          getPass_device_diagnostic_at_startupDefaultValue ();

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Operation_mode_behaviors ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Operation_mode_behaviors (const ::xercesc::DOMElement& e,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Operation_mode_behaviors (const Operation_mode_behaviors& x,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                    ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Operation_mode_behaviors*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Operation_mode_behaviors ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Activate_voters_as_demoType > activate_voters_as_demo_;
          ::xsd::cxx::tree::one< Reset_machine_status_at_startupType > reset_machine_status_at_startup_;
          ::xsd::cxx::tree::one< Set_process_to_initiated_at_startupType > set_process_to_initiated_at_startup_;
          ::xsd::cxx::tree::one< Pass_device_diagnostic_at_startupType > pass_device_diagnostic_at_startup_;

          //@endcond
        };

        bool
        operator== (const Operation_mode_behaviors&, const Operation_mode_behaviors&);

        bool
        operator!= (const Operation_mode_behaviors&, const Operation_mode_behaviors&);


        /**
         * @brief Class corresponding to the %region-hierarchies schema type.
         *
         * @nosubgrouping
         */
        class Region_hierarchies: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name region-hierarchy
           *
           * @brief Accessor and modifier functions for the %region-hierarchy
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Region_hierarchy Region_hierarchyType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Region_hierarchyType > Region_hierarchySequence;

          /**
           * @brief Element iterator type.
           */
          typedef Region_hierarchySequence::iterator Region_hierarchyIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Region_hierarchySequence::const_iterator Region_hierarchyConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Region_hierarchyType, char > Region_hierarchyTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Region_hierarchySequence&
          getRegion_hierarchy () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Region_hierarchySequence&
          getRegion_hierarchy ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setRegion_hierarchy (const Region_hierarchySequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Region_hierarchies ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Region_hierarchies (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Region_hierarchies (const Region_hierarchies& x,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Region_hierarchies*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Region_hierarchies ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Region_hierarchySequence region_hierarchy_;

          //@endcond
        };

        bool
        operator== (const Region_hierarchies&, const Region_hierarchies&);

        bool
        operator!= (const Region_hierarchies&, const Region_hierarchies&);


        /**
         * @brief Class corresponding to the %time-zone-information schema type.
         *
         * @nosubgrouping
         */
        class Time_zone_information: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name bias
           *
           * @brief Accessor and modifier functions for the %bias
           * required element.
           *
           * Current bias for local time translation on this computer, in minutes.
           * The bias is the difference, in minutes, between Coordinated Universal
           * Time (UTC) and local time. All translations between UTC and local time
           * are based on the following formula: 	UTC = local time + bias
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Long BiasType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BiasType, char > BiasTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BiasType&
          getBias () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BiasType&
          getBias ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBias (const BiasType& x);

          //@}

          /**
           * @name standard-date
           *
           * @brief Accessor and modifier functions for the %standard-date
           * required element.
           *
           * A time-zone-date element that contains a date and local time when the
           * transition from daylight saving time to standard time occurs. If this
           * date is not specified, the wMonth member in the SystemTime structure
           * must be zero. If this date is specified, the DaylightDate value in the
           * TimeZoneInformation structure must also be specified.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Time_zone_date Standard_dateType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Standard_dateType, char > Standard_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Standard_dateType&
          getStandard_date () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Standard_dateType&
          getStandard_date ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStandard_date (const Standard_dateType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setStandard_date (::std::auto_ptr< Standard_dateType > p);

          //@}

          /**
           * @name standard-bias
           *
           * @brief Accessor and modifier functions for the %standard-bias
           * required element.
           *
           * Bias value to be used during local time translations that occur during
           * standard time. This member is ignored if a value for the StandardDate
           * member is not supplied. This value is added to the value of the Bias
           * member to form the bias used during standard time. In most time zones,
           * the value of this member is zero.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Long Standard_biasType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Standard_biasType, char > Standard_biasTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Standard_biasType&
          getStandard_bias () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Standard_biasType&
          getStandard_bias ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setStandard_bias (const Standard_biasType& x);

          //@}

          /**
           * @name daylight-date
           *
           * @brief Accessor and modifier functions for the %daylight-date
           * required element.
           *
           * A time-zone-date element that contains a date and local time when the
           * transition from standard time to daylight saving time occurs. If this
           * date is not specified, the wMonth member in the SystemTime structure
           * must be zero. If this date is specified, the StandardDate value in the
           * TimeZoneInformation structure must also be specified.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Time_zone_date Daylight_dateType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Daylight_dateType, char > Daylight_dateTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Daylight_dateType&
          getDaylight_date () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Daylight_dateType&
          getDaylight_date ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDaylight_date (const Daylight_dateType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDaylight_date (::std::auto_ptr< Daylight_dateType > p);

          //@}

          /**
           * @name daylight-bias
           *
           * @brief Accessor and modifier functions for the %daylight-bias
           * required element.
           *
           * Bias value to be used during local time translations that occur during
           * daylight saving time. This member is ignored if a value for the
           * DaylightDate member is not supplied. This value is added to the value
           * of the Bias member to form the bias used during daylight saving time.
           * In most time zones, the value of this member is -60.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Long Daylight_biasType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Daylight_biasType, char > Daylight_biasTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Daylight_biasType&
          getDaylight_bias () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Daylight_biasType&
          getDaylight_bias ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDaylight_bias (const Daylight_biasType& x);

          //@}

          /**
           * @name name
           *
           * @brief Accessor and modifier functions for the %name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String NameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const NameType&
          getName () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          NameType&
          getName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName (const NameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName (::std::auto_ptr< NameType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Time_zone_information ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Time_zone_information (const BiasType&,
                                 const Standard_dateType&,
                                 const Standard_biasType&,
                                 const Daylight_dateType&,
                                 const Daylight_biasType&,
                                 const NameType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Time_zone_information (const BiasType&,
                                 ::std::auto_ptr< Standard_dateType >&,
                                 const Standard_biasType&,
                                 ::std::auto_ptr< Daylight_dateType >&,
                                 const Daylight_biasType&,
                                 const NameType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Time_zone_information (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Time_zone_information (const Time_zone_information& x,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Time_zone_information*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Time_zone_information ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< BiasType > bias_;
          ::xsd::cxx::tree::one< Standard_dateType > standard_date_;
          ::xsd::cxx::tree::one< Standard_biasType > standard_bias_;
          ::xsd::cxx::tree::one< Daylight_dateType > daylight_date_;
          ::xsd::cxx::tree::one< Daylight_biasType > daylight_bias_;
          ::xsd::cxx::tree::one< NameType > name_;

          //@endcond
        };

        bool
        operator== (const Time_zone_information&, const Time_zone_information&);

        bool
        operator!= (const Time_zone_information&, const Time_zone_information&);


        /**
         * @brief Class corresponding to the %custom-attributes schema type.
         *
         * @nosubgrouping
         */
        class Custom_attributes: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name custom-attribute
           *
           * @brief Accessor and modifier functions for the %custom-attribute
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_attribute Custom_attributeType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Custom_attributeType > Custom_attributeSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Custom_attributeSequence::iterator Custom_attributeIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Custom_attributeSequence::const_iterator Custom_attributeConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_attributeType, char > Custom_attributeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Custom_attributeSequence&
          getCustom_attribute () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Custom_attributeSequence&
          getCustom_attribute ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setCustom_attribute (const Custom_attributeSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Custom_attributes ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_attributes (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Custom_attributes (const Custom_attributes& x,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Custom_attributes*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Custom_attributes ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Custom_attributeSequence custom_attribute_;

          //@endcond
        };

        bool
        operator== (const Custom_attributes&, const Custom_attributes&);

        bool
        operator!= (const Custom_attributes&, const Custom_attributes&);


        /**
         * @brief Class corresponding to the %custom-attribute-definition schema type.
         *
         * @nosubgrouping
         */
        class Custom_attribute_definition: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name value
           *
           * @brief Accessor and modifier functions for the %value
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ValueType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ValueType > ValueSequence;

          /**
           * @brief Element iterator type.
           */
          typedef ValueSequence::iterator ValueIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ValueSequence::const_iterator ValueConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ValueSequence&
          getValue () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ValueSequence&
          getValue ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setValue (const ValueSequence& s);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name machine-type
           *
           * @brief Accessor and modifier functions for the %machine-type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Machine_type Machine_typeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Machine_typeType, char > Machine_typeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Machine_typeType&
          getMachine_type () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Machine_typeType&
          getMachine_type ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMachine_type (const Machine_typeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setMachine_type (::std::auto_ptr< Machine_typeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Custom_attribute_definition ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Custom_attribute_definition (const CodeType&,
                                       const Name_keyType&,
                                       const Description_keyType&,
                                       const Machine_typeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_attribute_definition (const ::xercesc::DOMElement& e,
                                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Custom_attribute_definition (const Custom_attribute_definition& x,
                                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                       ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Custom_attribute_definition*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Custom_attribute_definition ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ValueSequence value_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;
          ::xsd::cxx::tree::one< Machine_typeType > machine_type_;

          //@endcond
        };

        bool
        operator== (const Custom_attribute_definition&, const Custom_attribute_definition&);

        bool
        operator!= (const Custom_attribute_definition&, const Custom_attribute_definition&);


        /**
         * @brief Class corresponding to the %logical-voter-group-codes schema type.
         *
         * @nosubgrouping
         */
        class Logical_voter_group_codes: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name logical-voter-group-code
           *
           * @brief Accessor and modifier functions for the %logical-voter-group-code
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Logical_voter_group_codeType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Logical_voter_group_codeType > Logical_voter_group_codeSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Logical_voter_group_codeSequence::iterator Logical_voter_group_codeIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Logical_voter_group_codeSequence::const_iterator Logical_voter_group_codeConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Logical_voter_group_codeType, char > Logical_voter_group_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Logical_voter_group_codeSequence&
          getLogical_voter_group_code () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Logical_voter_group_codeSequence&
          getLogical_voter_group_code ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setLogical_voter_group_code (const Logical_voter_group_codeSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Logical_voter_group_codes ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Logical_voter_group_codes (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Logical_voter_group_codes (const Logical_voter_group_codes& x,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Logical_voter_group_codes*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Logical_voter_group_codes ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Logical_voter_group_codeSequence logical_voter_group_code_;

          //@endcond
        };

        bool
        operator== (const Logical_voter_group_codes&, const Logical_voter_group_codes&);

        bool
        operator!= (const Logical_voter_group_codes&, const Logical_voter_group_codes&);


        /**
         * @brief Class corresponding to the %role schema type.
         *
         * @nosubgrouping
         */
        class Role: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name functionality
           *
           * @brief Accessor and modifier functions for the %functionality
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Functionality FunctionalityType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< FunctionalityType > FunctionalitySequence;

          /**
           * @brief Element iterator type.
           */
          typedef FunctionalitySequence::iterator FunctionalityIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef FunctionalitySequence::const_iterator FunctionalityConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< FunctionalityType, char > FunctionalityTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const FunctionalitySequence&
          getFunctionality () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          FunctionalitySequence&
          getFunctionality ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setFunctionality (const FunctionalitySequence& s);

          //@}

          /**
           * @name key
           *
           * @brief Accessor and modifier functions for the %key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String KeyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< KeyType, char > KeyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const KeyType&
          getKey () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          KeyType&
          getKey ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setKey (const KeyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setKey (::std::auto_ptr< KeyType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name system-role
           *
           * @brief Accessor and modifier functions for the %system-role
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean System_roleType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< System_roleType, char > System_roleTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const System_roleType&
          getSystem_role () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          System_roleType&
          getSystem_role ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSystem_role (const System_roleType& x);

          //@}

          /**
           * @name extra-authentication-required
           *
           * @brief Accessor and modifier functions for the %extra-authentication-required
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Extra_authentication_requiredType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Extra_authentication_requiredType, char > Extra_authentication_requiredTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Extra_authentication_requiredType&
          getExtra_authentication_required () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Extra_authentication_requiredType&
          getExtra_authentication_required ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setExtra_authentication_required (const Extra_authentication_requiredType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Extra_authentication_requiredType
          getExtra_authentication_requiredDefaultValue ();

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Role ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Role (const KeyType&,
                const Name_keyType&,
                const Description_keyType&,
                const System_roleType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Role (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Role (const Role& x,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Role*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Role ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          FunctionalitySequence functionality_;
          ::xsd::cxx::tree::one< KeyType > key_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;
          ::xsd::cxx::tree::one< System_roleType > system_role_;
          ::xsd::cxx::tree::one< Extra_authentication_requiredType > extra_authentication_required_;

          //@endcond
        };

        bool
        operator== (const Role&, const Role&);

        bool
        operator!= (const Role&, const Role&);


        /**
         * @brief Class corresponding to the %operation-mode-transition schema type.
         *
         * @nosubgrouping
         */
        class Operation_mode_transition: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name allowed-process-status-group
           *
           * @brief Accessor and modifier functions for the %allowed-process-status-group
           * required element.
           *
           * The list of allowed process status.
           * The transition will only take place if the device process status
           * matches one of the process status in the list.
           * Use 'Always' if no restriction is required.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status_group Allowed_process_status_groupType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Allowed_process_status_groupType, char > Allowed_process_status_groupTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Allowed_process_status_groupType&
          getAllowed_process_status_group () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Allowed_process_status_groupType&
          getAllowed_process_status_group ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setAllowed_process_status_group (const Allowed_process_status_groupType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAllowed_process_status_group (::std::auto_ptr< Allowed_process_status_groupType > p);

          //@}

          /**
           * @name operation-mode
           *
           * @brief Accessor and modifier functions for the %operation-mode
           * required attribute.
           *
           * Code of the next operation mode.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String Operation_modeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Operation_modeType, char > Operation_modeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Operation_modeType&
          getOperation_mode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Operation_modeType&
          getOperation_mode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setOperation_mode (const Operation_modeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setOperation_mode (::std::auto_ptr< Operation_modeType > p);

          //@}

          /**
           * @name date-time
           *
           * @brief Accessor and modifier functions for the %date-time
           * required attribute.
           *
           * DateTime from which the transition is enabled.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Custom_date_time Date_timeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Date_timeType, char > Date_timeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Date_timeType&
          getDate_time () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Date_timeType&
          getDate_time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDate_time (const Date_timeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDate_time (::std::auto_ptr< Date_timeType > p);

          //@}

          /**
           * @name diagnostics-ok
           *
           * @brief Accessor and modifier functions for the %diagnostics-ok
           * required attribute.
           *
           * Indicates whether all de device have to be succesfully diagnose prior
           * to execute the transition.
           * The transition is disabled if the this attribute is true and at least
           * one of the device has not been diagnosed
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Diagnostics_okType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Diagnostics_okType, char > Diagnostics_okTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Diagnostics_okType&
          getDiagnostics_ok () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Diagnostics_okType&
          getDiagnostics_ok ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDiagnostics_ok (const Diagnostics_okType& x);

          //@}

          /**
           * @name diagnostics-status
           *
           * @brief Accessor and modifier functions for the %diagnostics-status
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Diagnostics_status Diagnostics_statusType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Diagnostics_statusType, char > Diagnostics_statusTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Diagnostics_statusType&
          getDiagnostics_status () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Diagnostics_statusType&
          getDiagnostics_status ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDiagnostics_status (const Diagnostics_statusType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDiagnostics_status (::std::auto_ptr< Diagnostics_statusType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Operation_mode_transition ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Operation_mode_transition (const Allowed_process_status_groupType&,
                                     const Operation_modeType&,
                                     const Date_timeType&,
                                     const Diagnostics_okType&,
                                     const Diagnostics_statusType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Operation_mode_transition (::std::auto_ptr< Allowed_process_status_groupType >&,
                                     const Operation_modeType&,
                                     const Date_timeType&,
                                     const Diagnostics_okType&,
                                     const Diagnostics_statusType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Operation_mode_transition (const ::xercesc::DOMElement& e,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Operation_mode_transition (const Operation_mode_transition& x,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                     ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Operation_mode_transition*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Operation_mode_transition ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Allowed_process_status_groupType > allowed_process_status_group_;
          ::xsd::cxx::tree::one< Operation_modeType > operation_mode_;
          ::xsd::cxx::tree::one< Date_timeType > date_time_;
          ::xsd::cxx::tree::one< Diagnostics_okType > diagnostics_ok_;
          ::xsd::cxx::tree::one< Diagnostics_statusType > diagnostics_status_;

          //@endcond
        };

        bool
        operator== (const Operation_mode_transition&, const Operation_mode_transition&);

        bool
        operator!= (const Operation_mode_transition&, const Operation_mode_transition&);


        /**
         * @brief Class corresponding to the %region-hierarchy schema type.
         *
         * @nosubgrouping
         */
        class Region_hierarchy: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name category
           *
           * @brief Accessor and modifier functions for the %category
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Region_category CategoryType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< CategoryType, char > CategoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const CategoryType&
          getCategory () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          CategoryType&
          getCategory ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setCategory (const CategoryType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCategory (::std::auto_ptr< CategoryType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name name
           *
           * @brief Accessor and modifier functions for the %name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String NameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const NameType&
          getName () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          NameType&
          getName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName (const NameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName (::std::auto_ptr< NameType > p);

          //@}

          /**
           * @name is-default
           *
           * @brief Accessor and modifier functions for the %is-default
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::Boolean Is_defaultType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Is_defaultType, char > Is_defaultTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Is_defaultType&
          getIs_default () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Is_defaultType&
          getIs_default ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setIs_default (const Is_defaultType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Region_hierarchy ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Region_hierarchy (const CategoryType&,
                            const CodeType&,
                            const NameType&,
                            const Is_defaultType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Region_hierarchy (::std::auto_ptr< CategoryType >&,
                            const CodeType&,
                            const NameType&,
                            const Is_defaultType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Region_hierarchy (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Region_hierarchy (const Region_hierarchy& x,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Region_hierarchy*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Region_hierarchy ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CategoryType > category_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< NameType > name_;
          ::xsd::cxx::tree::one< Is_defaultType > is_default_;

          //@endcond
        };

        bool
        operator== (const Region_hierarchy&, const Region_hierarchy&);

        bool
        operator!= (const Region_hierarchy&, const Region_hierarchy&);


        /**
         * @brief Class corresponding to the %custom-attribute schema type.
         *
         * @nosubgrouping
         */
        class Custom_attribute: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name value
           *
           * @brief Accessor and modifier functions for the %value
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDeviceTypes::String ValueType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const ValueType&
          getValue () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          ValueType&
          getValue ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setValue (const ValueType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setValue (::std::auto_ptr< ValueType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Custom_attribute ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Custom_attribute (const CodeType&,
                            const ValueType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Custom_attribute (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Custom_attribute (const Custom_attribute& x,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Custom_attribute*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Custom_attribute ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< ValueType > value_;

          //@endcond
        };

        bool
        operator== (const Custom_attribute&, const Custom_attribute&);

        bool
        operator!= (const Custom_attribute&, const Custom_attribute&);


        /**
         * @brief Enumeration class corresponding to the %machine-type
         * schema type.
         */
        class Machine_type: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            VOTING_DEVICES_VM,
            VOTING_DEVICES_PM
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Machine_type ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Machine_type (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Machine_type (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Machine_type (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Machine_type (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Machine_type (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Machine_type (const ::xercesc::DOMAttr& a,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Machine_type (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Machine_type (const Machine_type& x,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Machine_type*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Machine_type&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Machine_type_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Machine_type_convert () const;

          public:
          static const char* const _xsd_Machine_type_literals_[2];
          static const Value _xsd_Machine_type_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %allowed-process-status-group schema type.
         *
         * @nosubgrouping
         */
        class Allowed_process_status_group: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::Type
        {
          public:
          /**
           * @name allowed-process-status
           *
           * @brief Accessor and modifier functions for the %allowed-process-status
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::VotingDevice::Allowed_process_status Allowed_process_statusType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Allowed_process_statusType > Allowed_process_statusSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Allowed_process_statusSequence::iterator Allowed_process_statusIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Allowed_process_statusSequence::const_iterator Allowed_process_statusConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Allowed_process_statusType, char > Allowed_process_statusTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Allowed_process_statusSequence&
          getAllowed_process_status () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Allowed_process_statusSequence&
          getAllowed_process_status ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setAllowed_process_status (const Allowed_process_statusSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Allowed_process_status_group ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Allowed_process_status_group (const ::xercesc::DOMElement& e,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Allowed_process_status_group (const Allowed_process_status_group& x,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                        ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Allowed_process_status_group*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Allowed_process_status_group ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags);

          protected:
          Allowed_process_statusSequence allowed_process_status_;

          //@endcond
        };

        bool
        operator== (const Allowed_process_status_group&, const Allowed_process_status_group&);

        bool
        operator!= (const Allowed_process_status_group&, const Allowed_process_status_group&);


        /**
         * @brief Enumeration class corresponding to the %diagnostics-status
         * schema type.
         */
        class Diagnostics_status: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            /**
             * The transition does not inherit the current diagnostic values.
             */
            VOTING_DEVICES_NOINHERIT,
            /**
             * The transition always inherit the current diagnostic values.
             */
            VOTING_DEVICES_ALWAYSINHERIT,
            VOTING_DEVICES_INHERITONLYWHENNEXTMODEISNOTINITIALIZED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Diagnostics_status ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Diagnostics_status (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Diagnostics_status (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Diagnostics_status (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Diagnostics_status (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Diagnostics_status (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Diagnostics_status (const ::xercesc::DOMAttr& a,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Diagnostics_status (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Diagnostics_status (const Diagnostics_status& x,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Diagnostics_status*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Diagnostics_status&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Diagnostics_status_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Diagnostics_status_convert () const;

          public:
          static const char* const _xsd_Diagnostics_status_literals_[3];
          static const Value _xsd_Diagnostics_status_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %allowed-process-status
         * schema type.
         */
        class Allowed_process_status: public ::Smartmatic::SAES::Voting::VotingDeviceTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            VOTING_DEVICES_ALWAYS,
            VOTING_DEVICES_NOTINITIATED,
            VOTING_DEVICES_INITIATED,
            VOTING_DEVICES_CLOSED,
            VOTING_DEVICES_RESULTSTRANSMITTED
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Allowed_process_status ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Allowed_process_status (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Allowed_process_status (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Allowed_process_status (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Allowed_process_status (const ::Smartmatic::SAES::Voting::VotingDeviceTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Allowed_process_status (const ::xercesc::DOMElement& e,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Allowed_process_status (const ::xercesc::DOMAttr& a,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Allowed_process_status (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Allowed_process_status (const Allowed_process_status& x,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Allowed_process_status*
          _clone (::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::VotingDeviceTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Allowed_process_status&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Allowed_process_status_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Allowed_process_status_convert () const;

          public:
          static const char* const _xsd_Allowed_process_status_literals_[5];
          static const Value _xsd_Allowed_process_status_indexes_[5];

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        /**
         * @name Parsing functions for the %voting-devices document root.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::std::string& uri,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::std::string& uri,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::std::string& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             const ::std::string& id,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             const ::std::string& id,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::std::istream& is,
                             const ::std::string& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::xercesc::InputSource& is,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::xercesc::InputSource& is,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (const ::xercesc::DOMDocument& d,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices >
        parseVoting_devices (::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0,
                             const ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties& p = ::Smartmatic::SAES::Voting::VotingDeviceTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        /**
         * @name Serialization functions for the %voting-devices document root.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeVoting_devices (::std::ostream& os,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVoting_devices (::std::ostream& os,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& eh,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVoting_devices (::std::ostream& os,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeVoting_devices (::xercesc::XMLFormatTarget& ft,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVoting_devices (::xercesc::XMLFormatTarget& ft,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::ErrorHandler& eh,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeVoting_devices (::xercesc::XMLFormatTarget& ft,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 ::xercesc::DOMErrorHandler& eh,
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 const ::std::string& e = "UTF-8",
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeVoting_devices (::xercesc::DOMDocument& d,
                                 const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x,
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::VotingDeviceTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeVoting_devices (const ::Smartmatic::SAES::Voting::VotingDevice::Voting_devices& x, 
                                 const ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::VotingDeviceTypes::NamespaceInfomap (),
                                 ::Smartmatic::SAES::Voting::VotingDeviceTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const Region_category&);

        void
        operator<< (::xercesc::DOMElement&, const Custom_date_time&);

        void
        operator<< (::xercesc::DOMAttr&, const Custom_date_time&);

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream&,
                    const Custom_date_time&);

        void
        operator<< (::xercesc::DOMElement&, const Time_zone_date&);

        void
        operator<< (::xercesc::DOMElement&, const Functionality&);

        void
        operator<< (::xercesc::DOMAttr&, const Functionality&);

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream&,
                    const Functionality&);

        void
        operator<< (::xercesc::DOMElement&, const CategoryLevel&);

        void
        operator<< (::xercesc::DOMAttr&, const CategoryLevel&);

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream&,
                    const CategoryLevel&);

        void
        operator<< (::xercesc::DOMElement&, const Voting_devices&);

        void
        operator<< (::xercesc::DOMElement&, const Region&);

        void
        operator<< (::xercesc::DOMElement&, const Voting_device&);

        void
        operator<< (::xercesc::DOMElement&, const Keys&);

        void
        operator<< (::xercesc::DOMElement&, const Operation_modes&);

        void
        operator<< (::xercesc::DOMElement&, const Voting_booths&);

        void
        operator<< (::xercesc::DOMElement&, const Logical_voter_groups&);

        void
        operator<< (::xercesc::DOMElement&, const Tally_reports&);

        void
        operator<< (::xercesc::DOMElement&, const Operation_mode&);

        void
        operator<< (::xercesc::DOMElement&, const Voting_booth&);

        void
        operator<< (::xercesc::DOMElement&, const Logical_voter_group&);

        void
        operator<< (::xercesc::DOMElement&, const Custom_attribute_definitions&);

        void
        operator<< (::xercesc::DOMElement&, const Tally_report&);

        void
        operator<< (::xercesc::DOMElement&, const Roles&);

        void
        operator<< (::xercesc::DOMElement&, const Operation_mode_transitions&);

        void
        operator<< (::xercesc::DOMElement&, const Operation_mode_behaviors&);

        void
        operator<< (::xercesc::DOMElement&, const Region_hierarchies&);

        void
        operator<< (::xercesc::DOMElement&, const Time_zone_information&);

        void
        operator<< (::xercesc::DOMElement&, const Custom_attributes&);

        void
        operator<< (::xercesc::DOMElement&, const Custom_attribute_definition&);

        void
        operator<< (::xercesc::DOMElement&, const Logical_voter_group_codes&);

        void
        operator<< (::xercesc::DOMElement&, const Role&);

        void
        operator<< (::xercesc::DOMElement&, const Operation_mode_transition&);

        void
        operator<< (::xercesc::DOMElement&, const Region_hierarchy&);

        void
        operator<< (::xercesc::DOMElement&, const Custom_attribute&);

        void
        operator<< (::xercesc::DOMElement&, const Machine_type&);

        void
        operator<< (::xercesc::DOMAttr&, const Machine_type&);

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream&,
                    const Machine_type&);

        void
        operator<< (::xercesc::DOMElement&, const Allowed_process_status_group&);

        void
        operator<< (::xercesc::DOMElement&, const Diagnostics_status&);

        void
        operator<< (::xercesc::DOMAttr&, const Diagnostics_status&);

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream&,
                    const Diagnostics_status&);

        void
        operator<< (::xercesc::DOMElement&, const Allowed_process_status&);

        void
        operator<< (::xercesc::DOMAttr&, const Allowed_process_status&);

        void
        operator<< (::Smartmatic::SAES::Voting::VotingDeviceTypes::ListStream&,
                    const Allowed_process_status&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_VOTING_DEVICES_SCHEMA_HXX
