// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "card-data-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        // Card_data
        // 

        const Card_data::Logical_voter_groupType& Card_data::
        getLogical_voter_group () const
        {
          return this->logical_voter_group_.get ();
        }

        Card_data::Logical_voter_groupType& Card_data::
        getLogical_voter_group ()
        {
          return this->logical_voter_group_.get ();
        }

        void Card_data::
        setLogical_voter_group (const Logical_voter_groupType& x)
        {
          this->logical_voter_group_.set (x);
        }

        void Card_data::
        setLogical_voter_group (::std::auto_ptr< Logical_voter_groupType > x)
        {
          this->logical_voter_group_.set (x);
        }

        const Card_data::VoteOptional& Card_data::
        getVote () const
        {
          return this->vote_;
        }

        Card_data::VoteOptional& Card_data::
        getVote ()
        {
          return this->vote_;
        }

        void Card_data::
        setVote (const VoteType& x)
        {
          this->vote_.set (x);
        }

        void Card_data::
        setVote (const VoteOptional& x)
        {
          this->vote_ = x;
        }

        void Card_data::
        setVote (::std::auto_ptr< VoteType > x)
        {
          this->vote_.set (x);
        }

        const Card_data::CodeType& Card_data::
        getCode () const
        {
          return this->code_.get ();
        }

        Card_data::CodeType& Card_data::
        getCode ()
        {
          return this->code_.get ();
        }

        void Card_data::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Card_data::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Card_data::IsAudioType& Card_data::
        getIsAudio () const
        {
          return this->IsAudio_.get ();
        }

        Card_data::IsAudioType& Card_data::
        getIsAudio ()
        {
          return this->IsAudio_.get ();
        }

        void Card_data::
        setIsAudio (const IsAudioType& x)
        {
          this->IsAudio_.set (x);
        }

        const Card_data::Card_typeType& Card_data::
        getCard_type () const
        {
          return this->card_type_.get ();
        }

        Card_data::Card_typeType& Card_data::
        getCard_type ()
        {
          return this->card_type_.get ();
        }

        void Card_data::
        setCard_type (const Card_typeType& x)
        {
          this->card_type_.set (x);
        }

        void Card_data::
        setCard_type (::std::auto_ptr< Card_typeType > x)
        {
          this->card_type_.set (x);
        }

        const Card_data::Card_statusType& Card_data::
        getCard_status () const
        {
          return this->card_status_.get ();
        }

        Card_data::Card_statusType& Card_data::
        getCard_status ()
        {
          return this->card_status_.get ();
        }

        void Card_data::
        setCard_status (const Card_statusType& x)
        {
          this->card_status_.set (x);
        }

        void Card_data::
        setCard_status (::std::auto_ptr< Card_statusType > x)
        {
          this->card_status_.set (x);
        }

        const Card_data::Activation_codeType& Card_data::
        getActivation_code () const
        {
          return this->activation_code_.get ();
        }

        Card_data::Activation_codeType& Card_data::
        getActivation_code ()
        {
          return this->activation_code_.get ();
        }

        void Card_data::
        setActivation_code (const Activation_codeType& x)
        {
          this->activation_code_.set (x);
        }

        void Card_data::
        setActivation_code (::std::auto_ptr< Activation_codeType > x)
        {
          this->activation_code_.set (x);
        }


        // Card_type
        // 

        Card_type::
        Card_type ()
        : ::Smartmatic::SAES::Voting::CardDataTypes::String ()
        {
        }

        Card_type::
        Card_type (Value v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (_xsd_Card_type_literals_[v])
        {
        }

        Card_type::
        Card_type (const char* v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v)
        {
        }

        Card_type::
        Card_type (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v)
        {
        }

        Card_type::
        Card_type (const ::Smartmatic::SAES::Voting::CardDataTypes::String& v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v)
        {
        }

        Card_type::
        Card_type (const Card_type& v,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v, f, c)
        {
        }

        Card_type& Card_type::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::CardDataTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::CardDataTypes::String (_xsd_Card_type_literals_[v]);

          return *this;
        }


        // Card_status
        // 

        Card_status::
        Card_status ()
        : ::Smartmatic::SAES::Voting::CardDataTypes::String ()
        {
        }

        Card_status::
        Card_status (Value v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (_xsd_Card_status_literals_[v])
        {
        }

        Card_status::
        Card_status (const char* v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v)
        {
        }

        Card_status::
        Card_status (const ::std::string& v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v)
        {
        }

        Card_status::
        Card_status (const ::Smartmatic::SAES::Voting::CardDataTypes::String& v)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v)
        {
        }

        Card_status::
        Card_status (const Card_status& v,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (v, f, c)
        {
        }

        Card_status& Card_status::
        operator= (Value v)
        {
          static_cast< ::Smartmatic::SAES::Voting::CardDataTypes::String& > (*this) = 
          ::Smartmatic::SAES::Voting::CardDataTypes::String (_xsd_Card_status_literals_[v]);

          return *this;
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        // Card_data
        //

        Card_data::
        Card_data ()
        : ::Smartmatic::SAES::Voting::CardDataTypes::Type (),
          logical_voter_group_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          vote_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          code_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          IsAudio_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          card_type_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          card_status_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          activation_code_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this)
        {
        }

        Card_data::
        Card_data (const Logical_voter_groupType& logical_voter_group,
                   const CodeType& code,
                   const IsAudioType& IsAudio,
                   const Card_typeType& card_type,
                   const Card_statusType& card_status,
                   const Activation_codeType& activation_code)
        : ::Smartmatic::SAES::Voting::CardDataTypes::Type (),
          logical_voter_group_ (logical_voter_group, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          vote_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          IsAudio_ (IsAudio, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          card_type_ (card_type, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          card_status_ (card_status, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          activation_code_ (activation_code, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this)
        {
        }

        Card_data::
        Card_data (::std::auto_ptr< Logical_voter_groupType >& logical_voter_group,
                   const CodeType& code,
                   const IsAudioType& IsAudio,
                   const Card_typeType& card_type,
                   const Card_statusType& card_status,
                   const Activation_codeType& activation_code)
        : ::Smartmatic::SAES::Voting::CardDataTypes::Type (),
          logical_voter_group_ (logical_voter_group, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          vote_ (::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          code_ (code, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          IsAudio_ (IsAudio, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          card_type_ (card_type, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          card_status_ (card_status, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this),
          activation_code_ (activation_code, ::Smartmatic::SAES::Voting::CardDataTypes::Flags (), this)
        {
        }

        Card_data::
        Card_data (const Card_data& x,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::Type (x, f, c),
          logical_voter_group_ (x.logical_voter_group_, f, this),
          vote_ (x.vote_, f, this),
          code_ (x.code_, f, this),
          IsAudio_ (x.IsAudio_, f, this),
          card_type_ (x.card_type_, f, this),
          card_status_ (x.card_status_, f, this),
          activation_code_ (x.activation_code_, f, this)
        {
        }

        Card_data::
        Card_data (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::Type (e, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::base, c),
          logical_voter_group_ (f, this),
          vote_ (f, this),
          code_ (f, this),
          IsAudio_ (f, this),
          card_type_ (f, this),
          card_status_ (f, this),
          activation_code_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
            this->parse (p, f);
          }
        }

        void Card_data::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // logical-voter-group
            //
            if (n.name () == "logical-voter-group" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< Logical_voter_groupType > r (
                Logical_voter_groupTraits::create (i, f, this));

              if (!logical_voter_group_.present ())
              {
                this->logical_voter_group_.set (r);
                continue;
              }
            }

            // vote
            //
            if (n.name () == "vote" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
            {
              ::std::auto_ptr< VoteType > r (
                VoteTraits::create (i, f, this));

              if (!this->vote_)
              {
                this->vote_.set (r);
                continue;
              }
            }

            break;
          }

          if (!logical_voter_group_.present ())
          {
            throw ::xsd::cxx::tree::expected_element< char > (
              "logical-voter-group",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "IsAudio" && n.namespace_ ().empty ())
            {
              this->IsAudio_.set (IsAudioTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "card-type" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Card_typeType > r (
                Card_typeTraits::create (i, f, this));

              this->card_type_.set (r);
              continue;
            }

            if (n.name () == "card-status" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Card_statusType > r (
                Card_statusTraits::create (i, f, this));

              this->card_status_.set (r);
              continue;
            }

            if (n.name () == "activation-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Activation_codeType > r (
                Activation_codeTraits::create (i, f, this));

              this->activation_code_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!IsAudio_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "IsAudio",
              "");
          }

          if (!card_type_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "card-type",
              "");
          }

          if (!card_status_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "card-status",
              "");
          }

          if (!activation_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "activation-code",
              "");
          }
        }

        Card_data* Card_data::
        _clone (::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                ::Smartmatic::SAES::Voting::CardDataTypes::Container* c) const
        {
          return new class Card_data (*this, f, c);
        }

        Card_data::
        ~Card_data ()
        {
        }

        bool
        operator== (const Card_data& x, const Card_data& y)
        {
          if (!(x.getLogical_voter_group () == y.getLogical_voter_group ()))
            return false;

          if (!(x.getVote () == y.getVote ()))
            return false;

          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getIsAudio () == y.getIsAudio ()))
            return false;

          if (!(x.getCard_type () == y.getCard_type ()))
            return false;

          if (!(x.getCard_status () == y.getCard_status ()))
            return false;

          if (!(x.getActivation_code () == y.getActivation_code ()))
            return false;

          return true;
        }

        bool
        operator!= (const Card_data& x, const Card_data& y)
        {
          return !(x == y);
        }

        // Card_type
        //

        Card_type::
        Card_type (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (e, f, c)
        {
          _xsd_Card_type_convert ();
        }

        Card_type::
        Card_type (const ::xercesc::DOMAttr& a,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (a, f, c)
        {
          _xsd_Card_type_convert ();
        }

        Card_type::
        Card_type (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                   ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (s, e, f, c)
        {
          _xsd_Card_type_convert ();
        }

        Card_type* Card_type::
        _clone (::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                ::Smartmatic::SAES::Voting::CardDataTypes::Container* c) const
        {
          return new class Card_type (*this, f, c);
        }

        Card_type::Value Card_type::
        _xsd_Card_type_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Card_type_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Card_type_indexes_,
                            _xsd_Card_type_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_Card_type_indexes_ + 3 || _xsd_Card_type_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Card_type::
        _xsd_Card_type_literals_[3] =
        {
          "OFFICIAL_VOTE_CARD",
          "DEMOSTRATION_VOTE_CARD",
          "RECOVERY_VOTE_CARD"
        };

        const Card_type::Value Card_type::
        _xsd_Card_type_indexes_[3] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::Card_type::CARD_DATA_DEMOSTRATION_VOTE_CARD,
          ::Smartmatic::SAES::Voting::VotingDevice::Card_type::CARD_DATA_OFFICIAL_VOTE_CARD,
          ::Smartmatic::SAES::Voting::VotingDevice::Card_type::CARD_DATA_RECOVERY_VOTE_CARD
        };

        // Card_status
        //

        Card_status::
        Card_status (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (e, f, c)
        {
          _xsd_Card_status_convert ();
        }

        Card_status::
        Card_status (const ::xercesc::DOMAttr& a,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (a, f, c)
        {
          _xsd_Card_status_convert ();
        }

        Card_status::
        Card_status (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                     ::Smartmatic::SAES::Voting::CardDataTypes::Container* c)
        : ::Smartmatic::SAES::Voting::CardDataTypes::String (s, e, f, c)
        {
          _xsd_Card_status_convert ();
        }

        Card_status* Card_status::
        _clone (::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                ::Smartmatic::SAES::Voting::CardDataTypes::Container* c) const
        {
          return new class Card_status (*this, f, c);
        }

        Card_status::Value Card_status::
        _xsd_Card_status_convert () const
        {
          ::xsd::cxx::tree::enum_comparator< char > c (_xsd_Card_status_literals_);
          const Value* i (::std::lower_bound (
                            _xsd_Card_status_indexes_,
                            _xsd_Card_status_indexes_ + 3,
                            *this,
                            c));

          if (i == _xsd_Card_status_indexes_ + 3 || _xsd_Card_status_literals_[*i] != *this)
          {
            throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
          }

          return *i;
        }

        const char* const Card_status::
        _xsd_Card_status_literals_[3] =
        {
          "USED",
          "NOT_USED",
          "SIMULATED"
        };

        const Card_status::Value Card_status::
        _xsd_Card_status_indexes_[3] =
        {
          ::Smartmatic::SAES::Voting::VotingDevice::Card_status::CARD_DATA_NOT_USED,
          ::Smartmatic::SAES::Voting::VotingDevice::Card_status::CARD_DATA_SIMULATED,
          ::Smartmatic::SAES::Voting::VotingDevice::Card_status::CARD_DATA_USED
        };
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::std::string& u,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
              d, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::std::string& u,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
              d, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
              d, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        const ::std::string& sid,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        const ::std::string& sid,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::xercesc::InputSource& i,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
              d, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::xercesc::InputSource& i,
                        ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
              d, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
            ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
              d, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (const ::xercesc::DOMDocument& d,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
              ::Smartmatic::SAES::Voting::VotingDevice::parseCard_data (
                c, f | ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "card-data" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingDevice::Card_data, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "card-data",
            "http://www.smartmatic.com/Saes/Voting/VotingDevice");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data >
        parseCard_data (::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::Smartmatic::SAES::Voting::CardDataTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::CardDataTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::CardDataTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "card-data" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::VotingDevice::Card_data > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::VotingDevice::Card_data, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "card-data",
            "http://www.smartmatic.com/Saes/Voting/VotingDevice");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace VotingDevice
      {
        void
        serializeCard_data (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeCard_data (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::CardDataTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCard_data (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCard_data (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeCard_data (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            ::Smartmatic::SAES::Voting::CardDataTypes::ErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCard_data (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeCard_data (::xercesc::DOMDocument& d,
                            const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "card-data" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/VotingDevice")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "card-data",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice");
          }
        }

        ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeCard_data (const ::Smartmatic::SAES::Voting::VotingDevice::Card_data& s,
                            const ::Smartmatic::SAES::Voting::CardDataTypes::NamespaceInfomap& m,
                            ::Smartmatic::SAES::Voting::CardDataTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::CardDataTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "card-data",
              "http://www.smartmatic.com/Saes/Voting/VotingDevice",
              m, f));

          ::Smartmatic::SAES::Voting::VotingDevice::serializeCard_data (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const Card_data& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::Type& > (i);

          // logical-voter-group
          //
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "logical-voter-group",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << i.getLogical_voter_group ();
          }

          // vote
          //
          if (i.getVote ())
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "vote",
                "http://www.smartmatic.com/Saes/Voting/VotingDevice",
                e));

            s << *i.getVote ();
          }

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // IsAudio
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "IsAudio",
                e));

            a << i.getIsAudio ();
          }

          // card-type
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "card-type",
                e));

            a << i.getCard_type ();
          }

          // card-status
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "card-status",
                e));

            a << i.getCard_status ();
          }

          // activation-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "activation-code",
                e));

            a << i.getActivation_code ();
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Card_type& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Card_type& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::CardDataTypes::ListStream& l,
                    const Card_type& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMElement& e, const Card_status& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::String& > (i);
        }

        void
        operator<< (::xercesc::DOMAttr& a, const Card_status& i)
        {
          a << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::String& > (i);
        }

        void
        operator<< (::Smartmatic::SAES::Voting::CardDataTypes::ListStream& l,
                    const Card_status& i)
        {
          l << static_cast< const ::Smartmatic::SAES::Voting::CardDataTypes::String& > (i);
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

