// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from election-schema.xsd.
 */

#ifndef CXX___SRC_XSDTEMPLATES_ELECTION_SCHEMA_HXX
#define CXX___SRC_XSDTEMPLATES_ELECTION_SCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
       * schema namespace.
       */
      namespace ElectionTypes
      {
        // anyType and anySimpleType.
        //

        /**
         * @brief C++ type corresponding to the anyType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::type Type;

        /**
         * @brief C++ type corresponding to the anySimpleType XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

        /**
         * @brief Alias for the anyType type.
         */
        typedef ::xsd::cxx::tree::type Container;


        // 8-bit
        //

        /**
         * @brief C++ type corresponding to the byte XML Schema
         * built-in type.
         */
        typedef signed char Byte;

        /**
         * @brief C++ type corresponding to the unsignedByte XML Schema
         * built-in type.
         */
        typedef unsigned char UnsignedByte;


        // 16-bit
        //

        /**
         * @brief C++ type corresponding to the short XML Schema
         * built-in type.
         */
        typedef short Short;

        /**
         * @brief C++ type corresponding to the unsignedShort XML Schema
         * built-in type.
         */
        typedef unsigned short UnsignedShort;


        // 32-bit
        //

        /**
         * @brief C++ type corresponding to the int XML Schema
         * built-in type.
         */
        typedef int Int;

        /**
         * @brief C++ type corresponding to the unsignedInt XML Schema
         * built-in type.
         */
        typedef unsigned int UnsignedInt;


        // 64-bit
        //

        /**
         * @brief C++ type corresponding to the long XML Schema
         * built-in type.
         */
        typedef long long Long;

        /**
         * @brief C++ type corresponding to the unsignedLong XML Schema
         * built-in type.
         */
        typedef unsigned long long UnsignedLong;


        // Supposed to be arbitrary-length integral types.
        //

        /**
         * @brief C++ type corresponding to the integer XML Schema
         * built-in type.
         */
        typedef long long Integer;

        /**
         * @brief C++ type corresponding to the nonPositiveInteger XML Schema
         * built-in type.
         */
        typedef long long NonPositiveInteger;

        /**
         * @brief C++ type corresponding to the nonNegativeInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long NonNegativeInteger;

        /**
         * @brief C++ type corresponding to the positiveInteger XML Schema
         * built-in type.
         */
        typedef unsigned long long PositiveInteger;

        /**
         * @brief C++ type corresponding to the negativeInteger XML Schema
         * built-in type.
         */
        typedef long long NegativeInteger;


        // Boolean.
        //

        /**
         * @brief C++ type corresponding to the boolean XML Schema
         * built-in type.
         */
        typedef bool Boolean;


        // Floating-point types.
        //

        /**
         * @brief C++ type corresponding to the float XML Schema
         * built-in type.
         */
        typedef float Float;

        /**
         * @brief C++ type corresponding to the double XML Schema
         * built-in type.
         */
        typedef double Double;

        /**
         * @brief C++ type corresponding to the decimal XML Schema
         * built-in type.
         */
        typedef double Decimal;


        // String types.
        //

        /**
         * @brief C++ type corresponding to the string XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::string< char, SimpleType > String;

        /**
         * @brief C++ type corresponding to the normalizedString XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

        /**
         * @brief C++ type corresponding to the token XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

        /**
         * @brief C++ type corresponding to the Name XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::name< char, Token > Name;

        /**
         * @brief C++ type corresponding to the NMTOKEN XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

        /**
         * @brief C++ type corresponding to the NMTOKENS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

        /**
         * @brief C++ type corresponding to the NCName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

        /**
         * @brief C++ type corresponding to the language XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::language< char, Token > Language;


        // ID/IDREF.
        //

        /**
         * @brief C++ type corresponding to the ID XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::id< char, Ncname > Id;

        /**
         * @brief C++ type corresponding to the IDREF XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

        /**
         * @brief C++ type corresponding to the IDREFS XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


        // URI.
        //

        /**
         * @brief C++ type corresponding to the anyURI XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


        // Qualified name.
        //

        /**
         * @brief C++ type corresponding to the QName XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


        // Binary.
        //

        /**
         * @brief Binary buffer type.
         */
        typedef ::xsd::cxx::tree::buffer< char > Buffer;

        /**
         * @brief C++ type corresponding to the base64Binary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

        /**
         * @brief C++ type corresponding to the hexBinary XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


        // Date/time.
        //

        /**
         * @brief Time zone type.
         */
        typedef ::xsd::cxx::tree::time_zone TimeZone;

        /**
         * @brief C++ type corresponding to the date XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

        /**
         * @brief C++ type corresponding to the dateTime XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

        /**
         * @brief C++ type corresponding to the duration XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

        /**
         * @brief C++ type corresponding to the gDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

        /**
         * @brief C++ type corresponding to the gMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

        /**
         * @brief C++ type corresponding to the gMonthDay XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

        /**
         * @brief C++ type corresponding to the gYear XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

        /**
         * @brief C++ type corresponding to the gYearMonth XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

        /**
         * @brief C++ type corresponding to the time XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


        // Entity.
        //

        /**
         * @brief C++ type corresponding to the ENTITY XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

        /**
         * @brief C++ type corresponding to the ENTITIES XML Schema
         * built-in type.
         */
        typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


        // Namespace information and list stream. Used in
        // serialization functions.
        //
        /**
         * @brief Namespace serialization information.
         */
        typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;

        /**
         * @brief Namespace serialization information map.
         */
        typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;

        /**
         * @brief List serialization stream.
         */
        typedef ::xsd::cxx::tree::list_stream< char > ListStream;

        /**
         * @brief Serialization wrapper for the %double type.
         */
        typedef ::xsd::cxx::tree::as_double< Double > AsDouble;

        /**
         * @brief Serialization wrapper for the %decimal type.
         */
        typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;

        /**
         * @brief Simple type facet.
         */
        typedef ::xsd::cxx::tree::facet Facet;

        // Flags and properties.
        //

        /**
         * @brief Parsing and serialization flags.
         */
        typedef ::xsd::cxx::tree::flags Flags;

        /**
         * @brief Parsing properties.
         */
        typedef ::xsd::cxx::tree::properties< char > Properties;

        // Parsing/serialization diagnostics.
        //

        /**
         * @brief Error severity.
         */
        typedef ::xsd::cxx::tree::severity Severity;

        /**
         * @brief Error condition.
         */
        typedef ::xsd::cxx::tree::error< char > Error;

        /**
         * @brief List of %error conditions.
         */
        typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

        // Exceptions.
        //

        /**
         * @brief Root of the C++/Tree %exception hierarchy.
         */
        typedef ::xsd::cxx::tree::exception< char > Exception;

        /**
         * @brief Exception indicating that the size argument exceeds
         * the capacity argument.
         */
        typedef ::xsd::cxx::tree::bounds< char > Bounds;

        /**
         * @brief Exception indicating that a duplicate ID value
         * was encountered in the object model.
         */
        typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

        /**
         * @brief Exception indicating a parsing failure.
         */
        typedef ::xsd::cxx::tree::parsing< char > Parsing;

        /**
         * @brief Exception indicating that an expected element
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

        /**
         * @brief Exception indicating that an unexpected element
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

        /**
         * @brief Exception indicating that an expected attribute
         * was not encountered.
         */
        typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

        /**
         * @brief Exception indicating that an unexpected enumerator
         * was encountered.
         */
        typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

        /**
         * @brief Exception indicating that the text content was
         * expected for an element.
         */
        typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

        /**
         * @brief Exception indicating that a prefix-namespace
         * mapping was not provided.
         */
        typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

        /**
         * @brief Exception indicating a serialization failure.
         */
        typedef ::xsd::cxx::tree::serialization< char > Serialization;

        /**
         * @brief Error handler callback interface.
         */
        typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

        /**
         * @brief DOM interaction.
         */
        namespace dom
        {
          /**
           * @brief Automatic pointer for DOMDocument.
           */
          using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__ELECTIONTYPES
#define XSD_CXX_TREE_TREE_NODE_KEY__SMARTMATIC__SAES__VOTING__ELECTIONTYPES
          /**
           * @brief DOM user data key for back pointers to tree nodes.
           */
          const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
        }
      }
    }
  }
}

// Forward declarations.
//
namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        class Ballot_form_area;
        class Ballot_form_identification_area;
        class Election;
        class Part;
        class Ballots;
        class Xml_schemas_necessary;
        class Contest_classes;
        class Contest_groups;
        class Ballot_form_layouts;
        class Voting_time_out;
        class Audio_voting_time_out;
        class Ballot;
        class Comparator;
        class Contest_class;
        class Contest_group;
        class Ballot_form_layout;
        class Ballot_cards;
        class Type;
        class Unit;
        class Election_mode;
        class Ballot_card;
        class Contests;
        class Contest;
        class District;
        class Eligibles_options;
        class Display_info;
        class Regions;
        class Eligible_option;
        class Ballot_options_layout_kind;
        class RegionTag;
        class Ballot_options;
        class Ballot_option;
        class Pad_position_group;
        class Party;
        class Type1;
        class Category;
        class Type2;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "election-language-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      /**
       * @brief C++ namespace for the %http://www.smartmatic.com/Saes/Voting/Election
       * schema namespace.
       */
      namespace Election
      {
        /**
         * @brief Class corresponding to the %ballot-form-area schema type.
         *
         * @nosubgrouping
         */
        class Ballot_form_area: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name id
           *
           * @brief Accessor and modifier functions for the %id
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String IdType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const IdType&
          getId () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          IdType&
          getId ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setId (const IdType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setId (::std::auto_ptr< IdType > p);

          //@}

          /**
           * @name x
           *
           * @brief Accessor and modifier functions for the %x
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger XType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< XType, char > XTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const XType&
          getX () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          XType&
          getX ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setX (const XType& x);

          //@}

          /**
           * @name y
           *
           * @brief Accessor and modifier functions for the %y
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger YType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< YType, char > YTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const YType&
          getY () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          YType&
          getY ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setY (const YType& x);

          //@}

          /**
           * @name width
           *
           * @brief Accessor and modifier functions for the %width
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger WidthType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< WidthType, char > WidthTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const WidthType&
          getWidth () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          WidthType&
          getWidth ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setWidth (const WidthType& x);

          //@}

          /**
           * @name height
           *
           * @brief Accessor and modifier functions for the %height
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger HeightType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< HeightType, char > HeightTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const HeightType&
          getHeight () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          HeightType&
          getHeight ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHeight (const HeightType& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Ballot_form_area ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_form_area (const IdType&,
                            const XType&,
                            const YType&,
                            const WidthType&,
                            const HeightType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_form_area (const ::xercesc::DOMElement& e,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_form_area (const Ballot_form_area& x,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                            ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_form_area*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_form_area ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< IdType > id_;
          ::xsd::cxx::tree::one< XType > x_;
          ::xsd::cxx::tree::one< YType > y_;
          ::xsd::cxx::tree::one< WidthType > width_;
          ::xsd::cxx::tree::one< HeightType > height_;

          //@endcond
        };

        bool
        operator== (const Ballot_form_area&, const Ballot_form_area&);

        bool
        operator!= (const Ballot_form_area&, const Ballot_form_area&);


        /**
         * @brief Class corresponding to the %ballot-form-identification-area schema type.
         *
         * @nosubgrouping
         */
        class Ballot_form_identification_area: public ::Smartmatic::SAES::Voting::Election::Ballot_form_area
        {
          public:
          /**
           * @name part
           *
           * @brief Accessor and modifier functions for the %part
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Part PartType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< PartType > PartSequence;

          /**
           * @brief Element iterator type.
           */
          typedef PartSequence::iterator PartIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef PartSequence::const_iterator PartConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PartType, char > PartTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const PartSequence&
          getPart () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          PartSequence&
          getPart ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setPart (const PartSequence& s);

          //@}

          /**
           * @name parts-pattern
           *
           * @brief Accessor and modifier functions for the %parts-pattern
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Parts_patternType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Parts_patternType, char > Parts_patternTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Parts_patternType&
          getParts_pattern () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Parts_patternType&
          getParts_pattern ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setParts_pattern (const Parts_patternType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setParts_pattern (::std::auto_ptr< Parts_patternType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Ballot_form_identification_area ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_form_identification_area (const IdType&,
                                           const XType&,
                                           const YType&,
                                           const WidthType&,
                                           const HeightType&,
                                           const Parts_patternType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_form_identification_area (const ::xercesc::DOMElement& e,
                                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_form_identification_area (const Ballot_form_identification_area& x,
                                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_form_identification_area*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_form_identification_area ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          PartSequence part_;
          ::xsd::cxx::tree::one< Parts_patternType > parts_pattern_;

          //@endcond
        };

        bool
        operator== (const Ballot_form_identification_area&, const Ballot_form_identification_area&);

        bool
        operator!= (const Ballot_form_identification_area&, const Ballot_form_identification_area&);


        /**
         * @brief Class corresponding to the %election schema type.
         *
         * @nosubgrouping
         */
        class Election: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballots
           *
           * @brief Accessor and modifier functions for the %ballots
           * required element.
           *
           * Set of ballots that are going to be used by the current voting machine
           * during the voting process.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballots BallotsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BallotsType, char > BallotsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const BallotsType&
          getBallots () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          BallotsType&
          getBallots ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBallots (const BallotsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBallots (::std::auto_ptr< BallotsType > p);

          //@}

          /**
           * @name languages
           *
           * @brief Accessor and modifier functions for the %languages
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Languages LanguagesType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< LanguagesType > LanguagesOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< LanguagesType, char > LanguagesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const LanguagesOptional&
          getLanguages () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          LanguagesOptional&
          getLanguages ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setLanguages (const LanguagesType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setLanguages (const LanguagesOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setLanguages (::std::auto_ptr< LanguagesType > p);

          //@}

          /**
           * @name xml-schemas-necessary
           *
           * @brief Accessor and modifier functions for the %xml-schemas-necessary
           * required element.
           *
           * The results documents that a voting machine sends to the Tally
           * Reception WebServices are syntactically verified against DTD
           * definitions.  This node contains the list of DTD files that are used
           * for verifying the documents generated by the voting machine and sent
           * to the Tally Reception WebServices.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Xml_schemas_necessary Xml_schemas_necessaryType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Xml_schemas_necessaryType, char > Xml_schemas_necessaryTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Xml_schemas_necessaryType&
          getXml_schemas_necessary () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Xml_schemas_necessaryType&
          getXml_schemas_necessary ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setXml_schemas_necessary (const Xml_schemas_necessaryType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setXml_schemas_necessary (::std::auto_ptr< Xml_schemas_necessaryType > p);

          //@}

          /**
           * @name contest-classes
           *
           * @brief Accessor and modifier functions for the %contest-classes
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Contest_classes Contest_classesType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_classesType, char > Contest_classesTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Contest_classesType&
          getContest_classes () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Contest_classesType&
          getContest_classes ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setContest_classes (const Contest_classesType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_classes (::std::auto_ptr< Contest_classesType > p);

          //@}

          /**
           * @name contest-groups
           *
           * @brief Accessor and modifier functions for the %contest-groups
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Contest_groups Contest_groupsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_groupsType, char > Contest_groupsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Contest_groupsType&
          getContest_groups () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Contest_groupsType&
          getContest_groups ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setContest_groups (const Contest_groupsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_groups (::std::auto_ptr< Contest_groupsType > p);

          //@}

          /**
           * @name ballot-form-layouts
           *
           * @brief Accessor and modifier functions for the %ballot-form-layouts
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_form_layouts Ballot_form_layoutsType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Ballot_form_layoutsType > Ballot_form_layoutsOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_form_layoutsType, char > Ballot_form_layoutsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Ballot_form_layoutsOptional&
          getBallot_form_layouts () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Ballot_form_layoutsOptional&
          getBallot_form_layouts ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBallot_form_layouts (const Ballot_form_layoutsType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setBallot_form_layouts (const Ballot_form_layoutsOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setBallot_form_layouts (::std::auto_ptr< Ballot_form_layoutsType > p);

          //@}

          /**
           * @name hash
           *
           * @brief Accessor and modifier functions for the %hash
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String HashType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< HashType > HashOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< HashType, char > HashTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const HashOptional&
          getHash () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          HashOptional&
          getHash ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHash (const HashType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setHash (const HashOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setHash (::std::auto_ptr< HashType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           *
           * Election process' name.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name electoral-organization
           *
           * @brief Accessor and modifier functions for the %electoral-organization
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Electoral_organizationType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Electoral_organizationType, char > Electoral_organizationTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Electoral_organizationType&
          getElectoral_organization () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Electoral_organizationType&
          getElectoral_organization ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setElectoral_organization (const Electoral_organizationType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElectoral_organization (::std::auto_ptr< Electoral_organizationType > p);

          //@}

          /**
           * @name voting-time-out
           *
           * @brief Accessor and modifier functions for the %voting-time-out
           * required attribute.
           *
           * The voting session timeout expressed in seconds
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Voting_time_out Voting_time_outType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Voting_time_outType, char > Voting_time_outTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Voting_time_outType&
          getVoting_time_out () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Voting_time_outType&
          getVoting_time_out ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setVoting_time_out (const Voting_time_outType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setVoting_time_out (::std::auto_ptr< Voting_time_outType > p);

          //@}

          /**
           * @name audio-voting-time-out
           *
           * @brief Accessor and modifier functions for the %audio-voting-time-out
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Audio_voting_time_out Audio_voting_time_outType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Audio_voting_time_outType > Audio_voting_time_outOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Audio_voting_time_outType, char > Audio_voting_time_outTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Audio_voting_time_outOptional&
          getAudio_voting_time_out () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Audio_voting_time_outOptional&
          getAudio_voting_time_out ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAudio_voting_time_out (const Audio_voting_time_outType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setAudio_voting_time_out (const Audio_voting_time_outOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setAudio_voting_time_out (::std::auto_ptr< Audio_voting_time_outType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Election ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Election (const BallotsType&,
                    const Xml_schemas_necessaryType&,
                    const Contest_classesType&,
                    const Contest_groupsType&,
                    const Name_keyType&,
                    const Electoral_organizationType&,
                    const Voting_time_outType&,
                    const CodeType&,
                    const Custom_codeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Election (::std::auto_ptr< BallotsType >&,
                    ::std::auto_ptr< Xml_schemas_necessaryType >&,
                    ::std::auto_ptr< Contest_classesType >&,
                    ::std::auto_ptr< Contest_groupsType >&,
                    const Name_keyType&,
                    const Electoral_organizationType&,
                    const Voting_time_outType&,
                    const CodeType&,
                    const Custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Election (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Election (const Election& x,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Election*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Election ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< BallotsType > ballots_;
          LanguagesOptional languages_;
          ::xsd::cxx::tree::one< Xml_schemas_necessaryType > xml_schemas_necessary_;
          ::xsd::cxx::tree::one< Contest_classesType > contest_classes_;
          ::xsd::cxx::tree::one< Contest_groupsType > contest_groups_;
          Ballot_form_layoutsOptional ballot_form_layouts_;
          HashOptional hash_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< Electoral_organizationType > electoral_organization_;
          ::xsd::cxx::tree::one< Voting_time_outType > voting_time_out_;
          Audio_voting_time_outOptional audio_voting_time_out_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;

          //@endcond
        };

        bool
        operator== (const Election&, const Election&);

        bool
        operator!= (const Election&, const Election&);


        /**
         * @brief Enumeration class corresponding to the %part
         * schema type.
         */
        class Part: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_BALLOT_ID,
            ELECTION_INDEX,
            ELECTION_COUNT,
            ELECTION_LOGICAL_VOTER_GROUP,
            ELECTION_LAYOUT_CODE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Part ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Part (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Part (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Part (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Part (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Part (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Part (const ::xercesc::DOMAttr& a,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Part (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Part (const Part& x,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Part*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Part&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Part_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Part_convert () const;

          public:
          static const char* const _xsd_Part_literals_[5];
          static const Value _xsd_Part_indexes_[5];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ballots schema type.
         *
         * @nosubgrouping
         */
        class Ballots: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballot
           *
           * @brief Accessor and modifier functions for the %ballot
           * sequence element.
           *
           * Definition of a particular ballot used by this machine throughout the
           * voting experience screens.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot BallotType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< BallotType > BallotSequence;

          /**
           * @brief Element iterator type.
           */
          typedef BallotSequence::iterator BallotIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef BallotSequence::const_iterator BallotConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< BallotType, char > BallotTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const BallotSequence&
          getBallot () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          BallotSequence&
          getBallot ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setBallot (const BallotSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballots ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballots (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballots (const Ballots& x,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballots*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballots ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          BallotSequence ballot_;

          //@endcond
        };

        bool
        operator== (const Ballots&, const Ballots&);

        bool
        operator!= (const Ballots&, const Ballots&);


        /**
         * @brief Class corresponding to the %xml-schemas-necessary schema type.
         *
         * @nosubgrouping
         */
        class Xml_schemas_necessary: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name transmission-package
           *
           * @brief Accessor and modifier functions for the %transmission-package
           * required element.
           *
           * URL of the DTD used for syntax verification of the
           * transmission-package file generated by the voting machine.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Transmission_packageType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Transmission_packageType, char > Transmission_packageTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Transmission_packageType&
          getTransmission_package () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Transmission_packageType&
          getTransmission_package ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setTransmission_package (const Transmission_packageType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTransmission_package (::std::auto_ptr< Transmission_packageType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Xml_schemas_necessary ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Xml_schemas_necessary (const Transmission_packageType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Xml_schemas_necessary (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Xml_schemas_necessary (const Xml_schemas_necessary& x,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Xml_schemas_necessary*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Xml_schemas_necessary ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Transmission_packageType > transmission_package_;

          //@endcond
        };

        bool
        operator== (const Xml_schemas_necessary&, const Xml_schemas_necessary&);

        bool
        operator!= (const Xml_schemas_necessary&, const Xml_schemas_necessary&);


        /**
         * @brief Class corresponding to the %contest-classes schema type.
         *
         * @nosubgrouping
         */
        class Contest_classes: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name comparator
           *
           * @brief Accessor and modifier functions for the %comparator
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Comparator ComparatorType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ComparatorType > ComparatorOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ComparatorType, char > ComparatorTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ComparatorOptional&
          getComparator () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          ComparatorOptional&
          getComparator ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setComparator (const ComparatorType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setComparator (const ComparatorOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setComparator (::std::auto_ptr< ComparatorType > p);

          //@}

          /**
           * @name contest-class
           *
           * @brief Accessor and modifier functions for the %contest-class
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Contest_class Contest_classType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Contest_classType > Contest_classSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Contest_classSequence::iterator Contest_classIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Contest_classSequence::const_iterator Contest_classConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_classType, char > Contest_classTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Contest_classSequence&
          getContest_class () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Contest_classSequence&
          getContest_class ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setContest_class (const Contest_classSequence& s);

          //@}

          /**
           * @name class
           *
           * @brief Accessor and modifier functions for the %class
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String ClassType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ClassType > ClassOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ClassType, char > ClassTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ClassOptional&
          getClass () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          ClassOptional&
          getClass ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setClass (const ClassType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setClass (const ClassOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setClass (::std::auto_ptr< ClassType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Contest_classes ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Contest_classes (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Contest_classes (const Contest_classes& x,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Contest_classes*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Contest_classes ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ComparatorOptional comparator_;
          Contest_classSequence contest_class_;
          ClassOptional class__;

          //@endcond
        };

        bool
        operator== (const Contest_classes&, const Contest_classes&);

        bool
        operator!= (const Contest_classes&, const Contest_classes&);


        /**
         * @brief Class corresponding to the %contest-groups schema type.
         *
         * @nosubgrouping
         */
        class Contest_groups: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name contest-group
           *
           * @brief Accessor and modifier functions for the %contest-group
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Contest_group Contest_groupType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Contest_groupType > Contest_groupSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Contest_groupSequence::iterator Contest_groupIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Contest_groupSequence::const_iterator Contest_groupConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_groupType, char > Contest_groupTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Contest_groupSequence&
          getContest_group () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Contest_groupSequence&
          getContest_group ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setContest_group (const Contest_groupSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Contest_groups ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Contest_groups (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Contest_groups (const Contest_groups& x,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Contest_groups*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Contest_groups ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Contest_groupSequence contest_group_;

          //@endcond
        };

        bool
        operator== (const Contest_groups&, const Contest_groups&);

        bool
        operator!= (const Contest_groups&, const Contest_groups&);


        /**
         * @brief Class corresponding to the %ballot-form-layouts schema type.
         *
         * @nosubgrouping
         */
        class Ballot_form_layouts: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballot-form-layout
           *
           * @brief Accessor and modifier functions for the %ballot-form-layout
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_form_layout Ballot_form_layoutType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Ballot_form_layoutType > Ballot_form_layoutSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Ballot_form_layoutSequence::iterator Ballot_form_layoutIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Ballot_form_layoutSequence::const_iterator Ballot_form_layoutConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_form_layoutType, char > Ballot_form_layoutTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Ballot_form_layoutSequence&
          getBallot_form_layout () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Ballot_form_layoutSequence&
          getBallot_form_layout ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setBallot_form_layout (const Ballot_form_layoutSequence& s);

          //@}

          /**
           * @name identification-area
           *
           * @brief Accessor and modifier functions for the %identification-area
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_form_identification_area Identification_areaType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Identification_areaType > Identification_areaOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Identification_areaType, char > Identification_areaTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Identification_areaOptional&
          getIdentification_area () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Identification_areaOptional&
          getIdentification_area ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIdentification_area (const Identification_areaType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setIdentification_area (const Identification_areaOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setIdentification_area (::std::auto_ptr< Identification_areaType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_form_layouts ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_form_layouts (const ::xercesc::DOMElement& e,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_form_layouts (const Ballot_form_layouts& x,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                               ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_form_layouts*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_form_layouts ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Ballot_form_layoutSequence ballot_form_layout_;
          Identification_areaOptional identification_area_;

          //@endcond
        };

        bool
        operator== (const Ballot_form_layouts&, const Ballot_form_layouts&);

        bool
        operator!= (const Ballot_form_layouts&, const Ballot_form_layouts&);


        /**
         * @brief Class corresponding to the %voting-time-out schema type.
         *
         * @nosubgrouping
         */
        class Voting_time_out: public ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Voting_time_out ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Voting_time_out (const ::Smartmatic::SAES::Voting::ElectionTypes::Integer&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_time_out (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_time_out (const ::xercesc::DOMAttr& a,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Voting_time_out (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Voting_time_out (const Voting_time_out& x,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Voting_time_out*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Voting_time_out ();
        };

        /**
         * @brief Class corresponding to the %audio-voting-time-out schema type.
         *
         * @nosubgrouping
         */
        class Audio_voting_time_out: public ::xsd::cxx::tree::fundamental_base< ::Smartmatic::SAES::Voting::ElectionTypes::Integer, char, ::Smartmatic::SAES::Voting::ElectionTypes::SimpleType >
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Audio_voting_time_out ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Audio_voting_time_out (const ::Smartmatic::SAES::Voting::ElectionTypes::Integer&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Audio_voting_time_out (const ::xercesc::DOMElement& e,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Audio_voting_time_out (const ::xercesc::DOMAttr& a,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Audio_voting_time_out (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Audio_voting_time_out (const Audio_voting_time_out& x,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Audio_voting_time_out*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Audio_voting_time_out ();
        };

        /**
         * @brief Class corresponding to the %ballot schema type.
         *
         * @nosubgrouping
         */
        class Ballot: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballot-cards
           *
           * @brief Accessor and modifier functions for the %ballot-cards
           * required element.
           *
           * Defines a ballot-card that groups together a set of contests.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_cards Ballot_cardsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_cardsType, char > Ballot_cardsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Ballot_cardsType&
          getBallot_cards () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Ballot_cardsType&
          getBallot_cards ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBallot_cards (const Ballot_cardsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBallot_cards (::std::auto_ptr< Ballot_cardsType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name title-key
           *
           * @brief Accessor and modifier functions for the %title-key
           * required attribute.
           *
           * Title.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Title_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Title_keyType, char > Title_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Title_keyType&
          getTitle_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Title_keyType&
          getTitle_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTitle_key (const Title_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTitle_key (::std::auto_ptr< Title_keyType > p);

          //@}

          /**
           * @name abstract-key
           *
           * @brief Accessor and modifier functions for the %abstract-key
           * required attribute.
           *
           * Summarized description.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Abstract_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Abstract_keyType, char > Abstract_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Abstract_keyType&
          getAbstract_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Abstract_keyType&
          getAbstract_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAbstract_key (const Abstract_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAbstract_key (::std::auto_ptr< Abstract_keyType > p);

          //@}

          /**
           * @name help-key
           *
           * @brief Accessor and modifier functions for the %help-key
           * required attribute.
           *
           * Help text that is shown to the voter, on demand, when he or she
           * interacts with the voting-experience screens; specifically through the
           * current item.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Help_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Help_keyType, char > Help_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Help_keyType&
          getHelp_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Help_keyType&
          getHelp_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHelp_key (const Help_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setHelp_key (::std::auto_ptr< Help_keyType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Ballot ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot (const Ballot_cardsType&,
                  const CodeType&,
                  const Custom_codeType&,
                  const Title_keyType&,
                  const Abstract_keyType&,
                  const Help_keyType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Ballot (::std::auto_ptr< Ballot_cardsType >&,
                  const CodeType&,
                  const Custom_codeType&,
                  const Title_keyType&,
                  const Abstract_keyType&,
                  const Help_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot (const Ballot& x,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Ballot_cardsType > ballot_cards_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< Title_keyType > title_key_;
          ::xsd::cxx::tree::one< Abstract_keyType > abstract_key_;
          ::xsd::cxx::tree::one< Help_keyType > help_key_;

          //@endcond
        };

        bool
        operator== (const Ballot&, const Ballot&);

        bool
        operator!= (const Ballot&, const Ballot&);


        /**
         * @brief Class corresponding to the %comparator schema type.
         *
         * @nosubgrouping
         */
        class Comparator: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name class
           *
           * @brief Accessor and modifier functions for the %class
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String ClassType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< ClassType > ClassOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< ClassType, char > ClassTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const ClassOptional&
          getClass () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          ClassOptional&
          getClass ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setClass (const ClassType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setClass (const ClassOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setClass (::std::auto_ptr< ClassType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Comparator ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Comparator (const ::xercesc::DOMElement& e,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Comparator (const Comparator& x,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Comparator*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Comparator ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ClassOptional class__;

          //@endcond
        };

        bool
        operator== (const Comparator&, const Comparator&);

        bool
        operator!= (const Comparator&, const Comparator&);


        /**
         * @brief Class corresponding to the %contest-class schema type.
         *
         * @nosubgrouping
         */
        class Contest_class: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Custom_codeType > Custom_codeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Custom_codeOptional&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Custom_codeOptional&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCustom_code (const Custom_codeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Type TypeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeType&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeType&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name stand-count-chief
           *
           * @brief Accessor and modifier functions for the %stand-count-chief
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger Stand_count_chiefType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Stand_count_chiefType, char > Stand_count_chiefTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Stand_count_chiefType&
          getStand_count_chief () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Stand_count_chiefType&
          getStand_count_chief ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setStand_count_chief (const Stand_count_chiefType& x);

          //@}

          /**
           * @name period
           *
           * @brief Accessor and modifier functions for the %period
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger PeriodType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< PeriodType, char > PeriodTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const PeriodType&
          getPeriod () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          PeriodType&
          getPeriod ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setPeriod (const PeriodType& x);

          //@}

          /**
           * @name unit
           *
           * @brief Accessor and modifier functions for the %unit
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Unit UnitType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< UnitType, char > UnitTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const UnitType&
          getUnit () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          UnitType&
          getUnit ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setUnit (const UnitType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setUnit (::std::auto_ptr< UnitType > p);

          //@}

          /**
           * @name election-mode
           *
           * @brief Accessor and modifier functions for the %election-mode
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Election_mode Election_modeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Election_modeType, char > Election_modeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Election_modeType&
          getElection_mode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Election_modeType&
          getElection_mode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setElection_mode (const Election_modeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setElection_mode (::std::auto_ptr< Election_modeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Contest_class ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Contest_class (const CodeType&,
                         const Name_keyType&,
                         const Description_keyType&,
                         const TypeType&,
                         const Stand_count_chiefType&,
                         const PeriodType&,
                         const UnitType&,
                         const Election_modeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Contest_class (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Contest_class (const Contest_class& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Contest_class*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Contest_class ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CodeType > code_;
          Custom_codeOptional custom_code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;
          ::xsd::cxx::tree::one< TypeType > type_;
          ::xsd::cxx::tree::one< Stand_count_chiefType > stand_count_chief_;
          ::xsd::cxx::tree::one< PeriodType > period_;
          ::xsd::cxx::tree::one< UnitType > unit_;
          ::xsd::cxx::tree::one< Election_modeType > election_mode_;

          //@endcond
        };

        bool
        operator== (const Contest_class&, const Contest_class&);

        bool
        operator!= (const Contest_class&, const Contest_class&);


        /**
         * @brief Class corresponding to the %contest-group schema type.
         *
         * @nosubgrouping
         */
        class Contest_group: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name contest-code
           *
           * @brief Accessor and modifier functions for the %contest-code
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Contest_codeType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Contest_codeType > Contest_codeSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Contest_codeSequence::iterator Contest_codeIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Contest_codeSequence::const_iterator Contest_codeConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_codeType, char > Contest_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Contest_codeSequence&
          getContest_code () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Contest_codeSequence&
          getContest_code ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setContest_code (const Contest_codeSequence& s);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Custom_codeType > Custom_codeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Custom_codeOptional&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Custom_codeOptional&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setCustom_code (const Custom_codeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Contest_group ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Contest_group (const CodeType&,
                         const Name_keyType&,
                         const Description_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Contest_group (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Contest_group (const Contest_group& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Contest_group*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Contest_group ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Contest_codeSequence contest_code_;
          ::xsd::cxx::tree::one< CodeType > code_;
          Custom_codeOptional custom_code_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;

          //@endcond
        };

        bool
        operator== (const Contest_group&, const Contest_group&);

        bool
        operator!= (const Contest_group&, const Contest_group&);


        /**
         * @brief Class corresponding to the %ballot-form-layout schema type.
         *
         * @nosubgrouping
         */
        class Ballot_form_layout: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name identification-area
           *
           * @brief Accessor and modifier functions for the %identification-area
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_form_identification_area Identification_areaType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Identification_areaType > Identification_areaOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Identification_areaType, char > Identification_areaTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Identification_areaOptional&
          getIdentification_area () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Identification_areaOptional&
          getIdentification_area ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setIdentification_area (const Identification_areaType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setIdentification_area (const Identification_areaOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setIdentification_area (::std::auto_ptr< Identification_areaType > p);

          //@}

          /**
           * @name ballot-option-areas
           *
           * @brief Accessor and modifier functions for the %ballot-option-areas
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_form_area Ballot_option_areasType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Ballot_option_areasType > Ballot_option_areasSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Ballot_option_areasSequence::iterator Ballot_option_areasIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Ballot_option_areasSequence::const_iterator Ballot_option_areasConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_option_areasType, char > Ballot_option_areasTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Ballot_option_areasSequence&
          getBallot_option_areas () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Ballot_option_areasSequence&
          getBallot_option_areas ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setBallot_option_areas (const Ballot_option_areasSequence& s);

          //@}

          /**
           * @name image-file-name
           *
           * @brief Accessor and modifier functions for the %image-file-name
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Image_file_nameType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Image_file_nameType, char > Image_file_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Image_file_nameType&
          getImage_file_name () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Image_file_nameType&
          getImage_file_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setImage_file_name (const Image_file_nameType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setImage_file_name (::std::auto_ptr< Image_file_nameType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Ballot_form_layout ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_form_layout (const Image_file_nameType&,
                              const CodeType&,
                              const Custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_form_layout (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_form_layout (const Ballot_form_layout& x,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_form_layout*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_form_layout ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Identification_areaOptional identification_area_;
          Ballot_option_areasSequence ballot_option_areas_;
          ::xsd::cxx::tree::one< Image_file_nameType > image_file_name_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;

          //@endcond
        };

        bool
        operator== (const Ballot_form_layout&, const Ballot_form_layout&);

        bool
        operator!= (const Ballot_form_layout&, const Ballot_form_layout&);


        /**
         * @brief Class corresponding to the %ballot-cards schema type.
         *
         * @nosubgrouping
         */
        class Ballot_cards: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballot-card
           *
           * @brief Accessor and modifier functions for the %ballot-card
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_card Ballot_cardType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Ballot_cardType > Ballot_cardSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Ballot_cardSequence::iterator Ballot_cardIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Ballot_cardSequence::const_iterator Ballot_cardConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_cardType, char > Ballot_cardTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Ballot_cardSequence&
          getBallot_card () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Ballot_cardSequence&
          getBallot_card ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setBallot_card (const Ballot_cardSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_cards ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_cards (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_cards (const Ballot_cards& x,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_cards*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_cards ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Ballot_cardSequence ballot_card_;

          //@endcond
        };

        bool
        operator== (const Ballot_cards&, const Ballot_cards&);

        bool
        operator!= (const Ballot_cards&, const Ballot_cards&);


        /**
         * @brief Enumeration class corresponding to the %type
         * schema type.
         */
        class Type: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_SINGLE,
            ELECTION_LIST,
            ELECTION_MINORITY_SINGLE,
            ELECTION_ISSUE,
            ELECTION_NON_CANDIDATE
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Type ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Type (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Type (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Type (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Type (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type (const ::xercesc::DOMAttr& a,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Type (const Type& x,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Type*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Type&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Type_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Type_convert () const;

          public:
          static const char* const _xsd_Type_literals_[5];
          static const Value _xsd_Type_indexes_[5];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %unit
         * schema type.
         */
        class Unit: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_DAY,
            ELECTION_WEEK,
            ELECTION_MONTH,
            ELECTION_YEAR
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Unit ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Unit (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Unit (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Unit (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Unit (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Unit (const ::xercesc::DOMElement& e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Unit (const ::xercesc::DOMAttr& a,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Unit (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Unit (const Unit& x,
                ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Unit*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Unit&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Unit_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Unit_convert () const;

          public:
          static const char* const _xsd_Unit_literals_[4];
          static const Value _xsd_Unit_indexes_[4];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %election-mode
         * schema type.
         */
        class Election_mode: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_REGULAR,
            ELECTION_OPENLIST
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Election_mode ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Election_mode (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Election_mode (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Election_mode (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Election_mode (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Election_mode (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Election_mode (const ::xercesc::DOMAttr& a,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Election_mode (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Election_mode (const Election_mode& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Election_mode*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Election_mode&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Election_mode_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Election_mode_convert () const;

          public:
          static const char* const _xsd_Election_mode_literals_[2];
          static const Value _xsd_Election_mode_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %ballot-card schema type.
         *
         * @nosubgrouping
         */
        class Ballot_card: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name contests
           *
           * @brief Accessor and modifier functions for the %contests
           * required element.
           *
           * Set of contests that are grouped within the ballot-card.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Contests ContestsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ContestsType, char > ContestsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const ContestsType&
          getContests () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          ContestsType&
          getContests ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setContests (const ContestsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContests (::std::auto_ptr< ContestsType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name title-key
           *
           * @brief Accessor and modifier functions for the %title-key
           * required attribute.
           *
           * Title.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Title_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Title_keyType, char > Title_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Title_keyType&
          getTitle_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Title_keyType&
          getTitle_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTitle_key (const Title_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTitle_key (::std::auto_ptr< Title_keyType > p);

          //@}

          /**
           * @name abstract-key
           *
           * @brief Accessor and modifier functions for the %abstract-key
           * required attribute.
           *
           * Summarized description.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Abstract_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Abstract_keyType, char > Abstract_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Abstract_keyType&
          getAbstract_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Abstract_keyType&
          getAbstract_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAbstract_key (const Abstract_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAbstract_key (::std::auto_ptr< Abstract_keyType > p);

          //@}

          /**
           * @name help-key
           *
           * @brief Accessor and modifier functions for the %help-key
           * required attribute.
           *
           * Help text that is shown to the voter, on demand, when he or she
           * interacts with the voting-experience screens; specifically through the
           * current item.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Help_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Help_keyType, char > Help_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Help_keyType&
          getHelp_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Help_keyType&
          getHelp_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHelp_key (const Help_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setHelp_key (::std::auto_ptr< Help_keyType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Ballot_card ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_card (const ContestsType&,
                       const CodeType&,
                       const Custom_codeType&,
                       const Title_keyType&,
                       const Abstract_keyType&,
                       const Help_keyType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Ballot_card (::std::auto_ptr< ContestsType >&,
                       const CodeType&,
                       const Custom_codeType&,
                       const Title_keyType&,
                       const Abstract_keyType&,
                       const Help_keyType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_card (const ::xercesc::DOMElement& e,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_card (const Ballot_card& x,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_card*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_card ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< ContestsType > contests_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< Title_keyType > title_key_;
          ::xsd::cxx::tree::one< Abstract_keyType > abstract_key_;
          ::xsd::cxx::tree::one< Help_keyType > help_key_;

          //@endcond
        };

        bool
        operator== (const Ballot_card&, const Ballot_card&);

        bool
        operator!= (const Ballot_card&, const Ballot_card&);


        /**
         * @brief Class corresponding to the %contests schema type.
         *
         * @nosubgrouping
         */
        class Contests: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name contest
           *
           * @brief Accessor and modifier functions for the %contest
           * sequence element.
           *
           * Defines each one of the contests that is grouped by the ballot-card.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Contest ContestType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< ContestType > ContestSequence;

          /**
           * @brief Element iterator type.
           */
          typedef ContestSequence::iterator ContestIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef ContestSequence::const_iterator ContestConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< ContestType, char > ContestTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const ContestSequence&
          getContest () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          ContestSequence&
          getContest ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setContest (const ContestSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Contests ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Contests (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Contests (const Contests& x,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Contests*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Contests ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ContestSequence contest_;

          //@endcond
        };

        bool
        operator== (const Contests&, const Contests&);

        bool
        operator!= (const Contests&, const Contests&);


        /**
         * @brief Class corresponding to the %contest schema type.
         *
         * @nosubgrouping
         */
        class Contest: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name district
           *
           * @brief Accessor and modifier functions for the %district
           * required element.
           *
           * Defines the electoral district where the current contest is effective.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::District DistrictType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< DistrictType, char > DistrictTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const DistrictType&
          getDistrict () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          DistrictType&
          getDistrict ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDistrict (const DistrictType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDistrict (::std::auto_ptr< DistrictType > p);

          //@}

          /**
           * @name eligibles-options
           *
           * @brief Accessor and modifier functions for the %eligibles-options
           * required element.
           *
           * Set of eligible options for the contest.  These options are presented
           * to the voter via the voting-experience screens during the voting
           * process, when running the contest.  For election contests, an eligible
           * option represents the circumstance of a candidate running for a post. 
           * For issue contests, an eligible option represents the existence of an
           * answer for a particular question (or issue).
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Eligibles_options Eligibles_optionsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Eligibles_optionsType, char > Eligibles_optionsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Eligibles_optionsType&
          getEligibles_options () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Eligibles_optionsType&
          getEligibles_options ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setEligibles_options (const Eligibles_optionsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setEligibles_options (::std::auto_ptr< Eligibles_optionsType > p);

          //@}

          /**
           * @name display-info
           *
           * @brief Accessor and modifier functions for the %display-info
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Display_info Display_infoType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Display_infoType, char > Display_infoTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Display_infoType&
          getDisplay_info () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Display_infoType&
          getDisplay_info ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setDisplay_info (const Display_infoType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDisplay_info (::std::auto_ptr< Display_infoType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name title-key
           *
           * @brief Accessor and modifier functions for the %title-key
           * required attribute.
           *
           * Title.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Title_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Title_keyType, char > Title_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Title_keyType&
          getTitle_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Title_keyType&
          getTitle_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTitle_key (const Title_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setTitle_key (::std::auto_ptr< Title_keyType > p);

          //@}

          /**
           * @name abstract-key
           *
           * @brief Accessor and modifier functions for the %abstract-key
           * required attribute.
           *
           * Summarized description.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Abstract_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Abstract_keyType, char > Abstract_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Abstract_keyType&
          getAbstract_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Abstract_keyType&
          getAbstract_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAbstract_key (const Abstract_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setAbstract_key (::std::auto_ptr< Abstract_keyType > p);

          //@}

          /**
           * @name help-key
           *
           * @brief Accessor and modifier functions for the %help-key
           * required attribute.
           *
           * Help text that is shown to the voter, on demand, when he or she
           * interacts with the voting-experience screens; specifically through the
           * current item.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Help_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Help_keyType, char > Help_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Help_keyType&
          getHelp_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Help_keyType&
          getHelp_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setHelp_key (const Help_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setHelp_key (::std::auto_ptr< Help_keyType > p);

          //@}

          /**
           * @name min-votes
           *
           * @brief Accessor and modifier functions for the %min-votes
           * required attribute.
           *
           * Minimum number of selections that can be made for the current contest.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger Min_votesType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Min_votesType, char > Min_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Min_votesType&
          getMin_votes () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Min_votesType&
          getMin_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMin_votes (const Min_votesType& x);

          //@}

          /**
           * @name max-votes
           *
           * @brief Accessor and modifier functions for the %max-votes
           * required attribute.
           *
           * Maximum number of selections that can be made for the first level in
           * current contest.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger Max_votesType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Max_votesType, char > Max_votesTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Max_votesType&
          getMax_votes () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Max_votesType&
          getMax_votes ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMax_votes (const Max_votesType& x);

          //@}

          /**
           * @name is-question
           *
           * @brief Accessor and modifier functions for the %is-question
           * required attribute.
           *
           * Defines if the current contest represents an issue, where the
           * selection is done over a set of answers made on a specific issue,
           * instead of over a set of candidates running for the same position.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::Boolean Is_questionType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Is_questionType, char > Is_questionTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Is_questionType&
          getIs_question () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Is_questionType&
          getIs_question ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setIs_question (const Is_questionType& x);

          //@}

          /**
           * @name contest-class-code
           *
           * @brief Accessor and modifier functions for the %contest-class-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Contest_class_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_class_codeType, char > Contest_class_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Contest_class_codeType&
          getContest_class_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Contest_class_codeType&
          getContest_class_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_class_code (const Contest_class_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setContest_class_code (::std::auto_ptr< Contest_class_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Contest ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Contest (const DistrictType&,
                   const Eligibles_optionsType&,
                   const Display_infoType&,
                   const CodeType&,
                   const Custom_codeType&,
                   const Title_keyType&,
                   const Abstract_keyType&,
                   const Help_keyType&,
                   const Min_votesType&,
                   const Max_votesType&,
                   const Is_questionType&,
                   const Contest_class_codeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Contest (::std::auto_ptr< DistrictType >&,
                   ::std::auto_ptr< Eligibles_optionsType >&,
                   ::std::auto_ptr< Display_infoType >&,
                   const CodeType&,
                   const Custom_codeType&,
                   const Title_keyType&,
                   const Abstract_keyType&,
                   const Help_keyType&,
                   const Min_votesType&,
                   const Max_votesType&,
                   const Is_questionType&,
                   const Contest_class_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Contest (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Contest (const Contest& x,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Contest*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Contest ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< DistrictType > district_;
          ::xsd::cxx::tree::one< Eligibles_optionsType > eligibles_options_;
          ::xsd::cxx::tree::one< Display_infoType > display_info_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< Title_keyType > title_key_;
          ::xsd::cxx::tree::one< Abstract_keyType > abstract_key_;
          ::xsd::cxx::tree::one< Help_keyType > help_key_;
          ::xsd::cxx::tree::one< Min_votesType > min_votes_;
          ::xsd::cxx::tree::one< Max_votesType > max_votes_;
          ::xsd::cxx::tree::one< Is_questionType > is_question_;
          ::xsd::cxx::tree::one< Contest_class_codeType > contest_class_code_;

          //@endcond
        };

        bool
        operator== (const Contest&, const Contest&);

        bool
        operator!= (const Contest&, const Contest&);


        /**
         * @brief Class corresponding to the %district schema type.
         *
         * @nosubgrouping
         */
        class District: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name regions
           *
           * @brief Accessor and modifier functions for the %regions
           * required element.
           *
           * Unique code of the geographical region associated to the electoral
           * district where the contest is being carried out.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Regions RegionsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RegionsType, char > RegionsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const RegionsType&
          getRegions () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          RegionsType&
          getRegions ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setRegions (const RegionsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRegions (::std::auto_ptr< RegionsType > p);

          //@}

          /**
           * @name name-key
           *
           * @brief Accessor and modifier functions for the %name-key
           * required attribute.
           *
           * Contest name.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Name_keyType, char > Name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Name_keyType&
          getName_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Name_keyType&
          getName_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName_key (const Name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setName_key (::std::auto_ptr< Name_keyType > p);

          //@}

          /**
           * @name number
           *
           * @brief Accessor and modifier functions for the %number
           * required attribute.
           *
           * Contest number.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger NumberType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const NumberType&
          getNumber () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          NumberType&
          getNumber ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setNumber (const NumberType& x);

          //@}

          /**
           * @name description-key
           *
           * @brief Accessor and modifier functions for the %description-key
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Description_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Description_keyType, char > Description_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Description_keyType&
          getDescription_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Description_keyType&
          getDescription_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setDescription_key (const Description_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setDescription_key (::std::auto_ptr< Description_keyType > p);

          //@}

          /**
           * @name region-hierarchy-code
           *
           * @brief Accessor and modifier functions for the %region-hierarchy-code
           * required attribute.
           *
           * Unique code of the region hierarchy that defines the region associated
           * to the current district.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Region_hierarchy_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Region_hierarchy_codeType, char > Region_hierarchy_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Region_hierarchy_codeType&
          getRegion_hierarchy_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Region_hierarchy_codeType&
          getRegion_hierarchy_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setRegion_hierarchy_code (const Region_hierarchy_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setRegion_hierarchy_code (::std::auto_ptr< Region_hierarchy_codeType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          District ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          District (const RegionsType&,
                    const Name_keyType&,
                    const NumberType&,
                    const Description_keyType&,
                    const Region_hierarchy_codeType&,
                    const CodeType&,
                    const Custom_codeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          District (::std::auto_ptr< RegionsType >&,
                    const Name_keyType&,
                    const NumberType&,
                    const Description_keyType&,
                    const Region_hierarchy_codeType&,
                    const CodeType&,
                    const Custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          District (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          District (const District& x,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual District*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~District ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< RegionsType > regions_;
          ::xsd::cxx::tree::one< Name_keyType > name_key_;
          ::xsd::cxx::tree::one< NumberType > number_;
          ::xsd::cxx::tree::one< Description_keyType > description_key_;
          ::xsd::cxx::tree::one< Region_hierarchy_codeType > region_hierarchy_code_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;

          //@endcond
        };

        bool
        operator== (const District&, const District&);

        bool
        operator!= (const District&, const District&);


        /**
         * @brief Class corresponding to the %eligibles-options schema type.
         *
         * @nosubgrouping
         */
        class Eligibles_options: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name eligible-option
           *
           * @brief Accessor and modifier functions for the %eligible-option
           * sequence element.
           *
           * Each one of the eligible options for the contest.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Eligible_option Eligible_optionType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Eligible_optionType > Eligible_optionSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Eligible_optionSequence::iterator Eligible_optionIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Eligible_optionSequence::const_iterator Eligible_optionConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Eligible_optionType, char > Eligible_optionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Eligible_optionSequence&
          getEligible_option () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Eligible_optionSequence&
          getEligible_option ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setEligible_option (const Eligible_optionSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Eligibles_options ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Eligibles_options (const ::xercesc::DOMElement& e,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Eligibles_options (const Eligibles_options& x,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                             ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Eligibles_options*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Eligibles_options ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Eligible_optionSequence eligible_option_;

          //@endcond
        };

        bool
        operator== (const Eligibles_options&, const Eligibles_options&);

        bool
        operator!= (const Eligibles_options&, const Eligibles_options&);


        /**
         * @brief Class corresponding to the %display-info schema type.
         *
         * @nosubgrouping
         */
        class Display_info: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name image-width-height-relation
           *
           * @brief Accessor and modifier functions for the %image-width-height-relation
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::Float Image_width_height_relationType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Image_width_height_relationType, char > Image_width_height_relationTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Image_width_height_relationType&
          getImage_width_height_relation () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Image_width_height_relationType&
          getImage_width_height_relation ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setImage_width_height_relation (const Image_width_height_relationType& x);

          //@}

          /**
           * @name ballot-options-layout-kind
           *
           * @brief Accessor and modifier functions for the %ballot-options-layout-kind
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_options_layout_kind Ballot_options_layout_kindType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_options_layout_kindType, char > Ballot_options_layout_kindTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Ballot_options_layout_kindType&
          getBallot_options_layout_kind () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Ballot_options_layout_kindType&
          getBallot_options_layout_kind ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBallot_options_layout_kind (const Ballot_options_layout_kindType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBallot_options_layout_kind (::std::auto_ptr< Ballot_options_layout_kindType > p);

          //@}

          /**
           * @name max-amount-of-ballot-options-columns
           *
           * @brief Accessor and modifier functions for the %max-amount-of-ballot-options-columns
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::Integer Max_amount_of_ballot_options_columnsType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Max_amount_of_ballot_options_columnsType, char > Max_amount_of_ballot_options_columnsTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Max_amount_of_ballot_options_columnsType&
          getMax_amount_of_ballot_options_columns () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Max_amount_of_ballot_options_columnsType&
          getMax_amount_of_ballot_options_columns ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMax_amount_of_ballot_options_columns (const Max_amount_of_ballot_options_columnsType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Max_amount_of_ballot_options_columnsType
          getMax_amount_of_ballot_options_columnsDefaultValue ();

          //@}

          /**
           * @name force-max-amount-of-ballot-options-columns
           *
           * @brief Accessor and modifier functions for the %force-max-amount-of-ballot-options-columns
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::Boolean Force_max_amount_of_ballot_options_columnsType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Force_max_amount_of_ballot_options_columnsType, char > Force_max_amount_of_ballot_options_columnsTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Force_max_amount_of_ballot_options_columnsType&
          getForce_max_amount_of_ballot_options_columns () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Force_max_amount_of_ballot_options_columnsType&
          getForce_max_amount_of_ballot_options_columns ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setForce_max_amount_of_ballot_options_columns (const Force_max_amount_of_ballot_options_columnsType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Force_max_amount_of_ballot_options_columnsType
          getForce_max_amount_of_ballot_options_columnsDefaultValue ();

          //@}

          /**
           * @name max-amount-of-ballot-options-columns-in-multi-level-selection-mode
           *
           * @brief Accessor and modifier functions for the %max-amount-of-ballot-options-columns-in-multi-level-selection-mode
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::Integer Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType, char > Max_amount_of_ballot_options_columns_in_multi_level_selection_modeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType&
          getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType&
          getMax_amount_of_ballot_options_columns_in_multi_level_selection_mode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMax_amount_of_ballot_options_columns_in_multi_level_selection_mode (const Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType
          getMax_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue ();

          //@}

          /**
           * @name force-max-amount-of-ballot-options-columns-in-multi-level-selection-mode
           *
           * @brief Accessor and modifier functions for the %force-max-amount-of-ballot-options-columns-in-multi-level-selection-mode
           * optional attribute with a default value.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::Boolean Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType, char > Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType&
          getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType&
          getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setForce_max_amount_of_ballot_options_columns_in_multi_level_selection_mode (const Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType& x);

          /**
           * @brief Return the default value for the attribute.
           *
           * @return The attribute's default value.
           */
          static Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType
          getForce_max_amount_of_ballot_options_columns_in_multi_level_selection_modeDefaultValue ();

          //@}

          /**
           * @name multi-level-voting-experience-layout-kind
           *
           * @brief Accessor and modifier functions for the %multi-level-voting-experience-layout-kind
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Multi_level_voting_experience_layout_kindType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Multi_level_voting_experience_layout_kindType > Multi_level_voting_experience_layout_kindOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Multi_level_voting_experience_layout_kindType, char > Multi_level_voting_experience_layout_kindTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Multi_level_voting_experience_layout_kindOptional&
          getMulti_level_voting_experience_layout_kind () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Multi_level_voting_experience_layout_kindOptional&
          getMulti_level_voting_experience_layout_kind ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setMulti_level_voting_experience_layout_kind (const Multi_level_voting_experience_layout_kindType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setMulti_level_voting_experience_layout_kind (const Multi_level_voting_experience_layout_kindOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setMulti_level_voting_experience_layout_kind (::std::auto_ptr< Multi_level_voting_experience_layout_kindType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Display_info ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Display_info (const Image_width_height_relationType&,
                        const Ballot_options_layout_kindType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Display_info (const ::xercesc::DOMElement& e,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Display_info (const Display_info& x,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                        ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Display_info*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Display_info ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Image_width_height_relationType > image_width_height_relation_;
          ::xsd::cxx::tree::one< Ballot_options_layout_kindType > ballot_options_layout_kind_;
          ::xsd::cxx::tree::one< Max_amount_of_ballot_options_columnsType > max_amount_of_ballot_options_columns_;
          ::xsd::cxx::tree::one< Force_max_amount_of_ballot_options_columnsType > force_max_amount_of_ballot_options_columns_;
          ::xsd::cxx::tree::one< Max_amount_of_ballot_options_columns_in_multi_level_selection_modeType > max_amount_of_ballot_options_columns_in_multi_level_selection_mode_;
          ::xsd::cxx::tree::one< Force_max_amount_of_ballot_options_columns_in_multi_level_selection_modeType > force_max_amount_of_ballot_options_columns_in_multi_level_selection_mode_;
          Multi_level_voting_experience_layout_kindOptional multi_level_voting_experience_layout_kind_;

          //@endcond
        };

        bool
        operator== (const Display_info&, const Display_info&);

        bool
        operator!= (const Display_info&, const Display_info&);


        /**
         * @brief Class corresponding to the %regions schema type.
         *
         * @nosubgrouping
         */
        class Regions: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name region
           *
           * @brief Accessor and modifier functions for the %region
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::RegionTag RegionType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< RegionType > RegionSequence;

          /**
           * @brief Element iterator type.
           */
          typedef RegionSequence::iterator RegionIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef RegionSequence::const_iterator RegionConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< RegionType, char > RegionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const RegionSequence&
          getRegion () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          RegionSequence&
          getRegion ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setRegion (const RegionSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Regions ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Regions (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Regions (const Regions& x,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                   ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Regions*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Regions ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          RegionSequence region_;

          //@endcond
        };

        bool
        operator== (const Regions&, const Regions&);

        bool
        operator!= (const Regions&, const Regions&);


        /**
         * @brief Class corresponding to the %eligible-option schema type.
         *
         * @nosubgrouping
         */
        class Eligible_option: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballot-options
           *
           * @brief Accessor and modifier functions for the %ballot-options
           * required element.
           *
           * Set of ballot-options associated to a particular eligible-option.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_options Ballot_optionsType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_optionsType, char > Ballot_optionsTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const Ballot_optionsType&
          getBallot_options () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          Ballot_optionsType&
          getBallot_options ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setBallot_options (const Ballot_optionsType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBallot_options (::std::auto_ptr< Ballot_optionsType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name ballot-name-key
           *
           * @brief Accessor and modifier functions for the %ballot-name-key
           * required attribute.
           *
           * Name of the eligible option that is presented in the ballot.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Ballot_name_keyType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_name_keyType, char > Ballot_name_keyTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Ballot_name_keyType&
          getBallot_name_key () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Ballot_name_keyType&
          getBallot_name_key ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setBallot_name_key (const Ballot_name_keyType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setBallot_name_key (::std::auto_ptr< Ballot_name_keyType > p);

          //@}

          /**
           * @name candidate-id
           *
           * @brief Accessor and modifier functions for the %candidate-id
           * required attribute.
           *
           * Unique id of the candidate associated to this eligible option.  In
           * issue contests, this field represents the unique id of the answer.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Candidate_idType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Candidate_idType, char > Candidate_idTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Candidate_idType&
          getCandidate_id () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Candidate_idType&
          getCandidate_id ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCandidate_id (const Candidate_idType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCandidate_id (::std::auto_ptr< Candidate_idType > p);

          //@}

          /**
           * @name parent-code
           *
           * @brief Accessor and modifier functions for the %parent-code
           * required attribute.
           *
           * Code of the parent associated to this eligible option.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Parent_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Parent_codeType, char > Parent_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Parent_codeType&
          getParent_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Parent_codeType&
          getParent_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setParent_code (const Parent_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setParent_code (::std::auto_ptr< Parent_codeType > p);

          //@}

          /**
           * @name sub-level-eligible-amount
           *
           * @brief Accessor and modifier functions for the %sub-level-eligible-amount
           * optional attribute.
           *
           * Level number of this eligible option. The first level is 0.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger Sub_level_eligible_amountType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Sub_level_eligible_amountType > Sub_level_eligible_amountOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Sub_level_eligible_amountType, char > Sub_level_eligible_amountTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Sub_level_eligible_amountOptional&
          getSub_level_eligible_amount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Sub_level_eligible_amountOptional&
          getSub_level_eligible_amount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSub_level_eligible_amount (const Sub_level_eligible_amountType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setSub_level_eligible_amount (const Sub_level_eligible_amountOptional& x);

          //@}

          /**
           * @name sub-level-order-index
           *
           * @brief Accessor and modifier functions for the %sub-level-order-index
           * optional attribute.
           *
           * Unique index of this eligible option among all others.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::NonNegativeInteger Sub_level_order_indexType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Sub_level_order_indexType > Sub_level_order_indexOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Sub_level_order_indexType, char > Sub_level_order_indexTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Sub_level_order_indexOptional&
          getSub_level_order_index () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Sub_level_order_indexOptional&
          getSub_level_order_index ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setSub_level_order_index (const Sub_level_order_indexType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setSub_level_order_index (const Sub_level_order_indexOptional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Eligible_option ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Eligible_option (const Ballot_optionsType&,
                           const CodeType&,
                           const Custom_codeType&,
                           const Ballot_name_keyType&,
                           const Candidate_idType&,
                           const Parent_codeType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Eligible_option (::std::auto_ptr< Ballot_optionsType >&,
                           const CodeType&,
                           const Custom_codeType&,
                           const Ballot_name_keyType&,
                           const Candidate_idType&,
                           const Parent_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Eligible_option (const ::xercesc::DOMElement& e,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Eligible_option (const Eligible_option& x,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Eligible_option*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Eligible_option ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< Ballot_optionsType > ballot_options_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< Ballot_name_keyType > ballot_name_key_;
          ::xsd::cxx::tree::one< Candidate_idType > candidate_id_;
          ::xsd::cxx::tree::one< Parent_codeType > parent_code_;
          Sub_level_eligible_amountOptional sub_level_eligible_amount_;
          Sub_level_order_indexOptional sub_level_order_index_;

          //@endcond
        };

        bool
        operator== (const Eligible_option&, const Eligible_option&);

        bool
        operator!= (const Eligible_option&, const Eligible_option&);


        /**
         * @brief Enumeration class corresponding to the %ballot-options-layout-kind
         * schema type.
         */
        class Ballot_options_layout_kind: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_HORIZONTAL,
            ELECTION_VERTICAL
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Ballot_options_layout_kind ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Ballot_options_layout_kind (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Ballot_options_layout_kind (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Ballot_options_layout_kind (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Ballot_options_layout_kind (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_options_layout_kind (const ::xercesc::DOMElement& e,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_options_layout_kind (const ::xercesc::DOMAttr& a,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_options_layout_kind (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_options_layout_kind (const Ballot_options_layout_kind& x,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                                      ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_options_layout_kind*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Ballot_options_layout_kind&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Ballot_options_layout_kind_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Ballot_options_layout_kind_convert () const;

          public:
          static const char* const _xsd_Ballot_options_layout_kind_literals_[2];
          static const Value _xsd_Ballot_options_layout_kind_indexes_[2];

          //@endcond
        };

        /**
         * @brief Class corresponding to the %RegionTag schema type.
         *
         * @nosubgrouping
         */
        class RegionTag: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          RegionTag ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          RegionTag (const CodeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          RegionTag (const ::xercesc::DOMElement& e,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          RegionTag (const RegionTag& x,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                     ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual RegionTag*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~RegionTag ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          ::xsd::cxx::tree::one< CodeType > code_;

          //@endcond
        };

        bool
        operator== (const RegionTag&, const RegionTag&);

        bool
        operator!= (const RegionTag&, const RegionTag&);


        /**
         * @brief Class corresponding to the %ballot-options schema type.
         *
         * @nosubgrouping
         */
        class Ballot_options: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name ballot-option
           *
           * @brief Accessor and modifier functions for the %ballot-option
           * sequence element.
           *
           * Each one of the ballot options associated to the eligible option. A
           * ballot option exists by the fact that a political party is supporting
           * a candidate running for a contest; it is, an eligible-option is a pair
           * defined by an eligible-option and a party.  For issue contests, there
           * exists one ballot-option associated to each eligible-option, supportes
           * by a generic party that has no explicit political meaning.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Ballot_option Ballot_optionType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Ballot_optionType > Ballot_optionSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Ballot_optionSequence::iterator Ballot_optionIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Ballot_optionSequence::const_iterator Ballot_optionConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Ballot_optionType, char > Ballot_optionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Ballot_optionSequence&
          getBallot_option () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Ballot_optionSequence&
          getBallot_option ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setBallot_option (const Ballot_optionSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_options ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_options (const ::xercesc::DOMElement& e,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_options (const Ballot_options& x,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                          ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_options*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_options ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Ballot_optionSequence ballot_option_;

          //@endcond
        };

        bool
        operator== (const Ballot_options&, const Ballot_options&);

        bool
        operator!= (const Ballot_options&, const Ballot_options&);


        /**
         * @brief Class corresponding to the %ballot-option schema type.
         *
         * @nosubgrouping
         */
        class Ballot_option: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name pad-position-group
           *
           * @brief Accessor and modifier functions for the %pad-position-group
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Pad_position_group Pad_position_groupType;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Pad_position_groupType > Pad_position_groupOptional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pad_position_groupType, char > Pad_position_groupTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Pad_position_groupOptional&
          getPad_position_group () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          Pad_position_groupOptional&
          getPad_position_group ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setPad_position_group (const Pad_position_groupType& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          setPad_position_group (const Pad_position_groupOptional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setPad_position_group (::std::auto_ptr< Pad_position_groupType > p);

          //@}

          /**
           * @name party
           *
           * @brief Accessor and modifier functions for the %party
           * required element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Party PartyType;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< PartyType, char > PartyTraits;

          /**
           * @brief Return a read-only (constant) reference to the element.
           *
           * @return A constant reference to the element.
           */
          const PartyType&
          getParty () const;

          /**
           * @brief Return a read-write reference to the element.
           *
           * @return A reference to the element.
           */
          PartyType&
          getParty ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          setParty (const PartyType& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setParty (::std::auto_ptr< PartyType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * required attribute.
           *
           * Presentation type of the ballot-option.  It determines if the ballot
           * is selectable by means of a voting pad or by means of the voting
           * machine screen.  Usually, all of the ballot-options contained in a
           * particular ballot, have the same type; this fact would lead to having
           * the presentation type associated to the ballot and not to the
           * ballot-option, but it has been decided to be kept within the
           * ballot-option for sake of model generality.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Type1 TypeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const TypeType&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          TypeType&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name image-file-name
           *
           * @brief Accessor and modifier functions for the %image-file-name
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Image_file_nameType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Image_file_nameType > Image_file_nameOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Image_file_nameType, char > Image_file_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Image_file_nameOptional&
          getImage_file_name () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Image_file_nameOptional&
          getImage_file_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setImage_file_name (const Image_file_nameType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setImage_file_name (const Image_file_nameOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setImage_file_name (::std::auto_ptr< Image_file_nameType > p);

          //@}

          /**
           * @name image-for-vote-receipt-file-name
           *
           * @brief Accessor and modifier functions for the %image-for-vote-receipt-file-name
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Image_for_vote_receipt_file_nameType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Image_for_vote_receipt_file_nameType > Image_for_vote_receipt_file_nameOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Image_for_vote_receipt_file_nameType, char > Image_for_vote_receipt_file_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Image_for_vote_receipt_file_nameOptional&
          getImage_for_vote_receipt_file_name () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Image_for_vote_receipt_file_nameOptional&
          getImage_for_vote_receipt_file_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setImage_for_vote_receipt_file_name (const Image_for_vote_receipt_file_nameType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setImage_for_vote_receipt_file_name (const Image_for_vote_receipt_file_nameOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setImage_for_vote_receipt_file_name (::std::auto_ptr< Image_for_vote_receipt_file_nameType > p);

          //@}

          /**
           * @name tally-position
           *
           * @brief Accessor and modifier functions for the %tally-position
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::PositiveInteger Tally_positionType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Tally_positionType, char > Tally_positionTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Tally_positionType&
          getTally_position () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Tally_positionType&
          getTally_position ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setTally_position (const Tally_positionType& x);

          //@}

          /**
           * @name contest-code-ref
           *
           * @brief Accessor and modifier functions for the %contest-code-ref
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Contest_code_refType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Contest_code_refType > Contest_code_refOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Contest_code_refType, char > Contest_code_refTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Contest_code_refOptional&
          getContest_code_ref () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Contest_code_refOptional&
          getContest_code_ref ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setContest_code_ref (const Contest_code_refType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setContest_code_ref (const Contest_code_refOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setContest_code_ref (::std::auto_ptr< Contest_code_refType > p);

          //@}

          /**
           * @name category
           *
           * @brief Accessor and modifier functions for the %category
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Category CategoryType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CategoryType, char > CategoryTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CategoryType&
          getCategory () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CategoryType&
          getCategory ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCategory (const CategoryType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCategory (::std::auto_ptr< CategoryType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Ballot_option ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Ballot_option (const PartyType&,
                         const CodeType&,
                         const Custom_codeType&,
                         const TypeType&,
                         const Tally_positionType&,
                         const CategoryType&);

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes
           * (auto_ptr version).
           *
           * This constructor will try to use the passed values directly
           * instead of making copies.
           */
          Ballot_option (::std::auto_ptr< PartyType >&,
                         const CodeType&,
                         const Custom_codeType&,
                         const TypeType&,
                         const Tally_positionType&,
                         const CategoryType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Ballot_option (const ::xercesc::DOMElement& e,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Ballot_option (const Ballot_option& x,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                         ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Ballot_option*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Ballot_option ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Pad_position_groupOptional pad_position_group_;
          ::xsd::cxx::tree::one< PartyType > party_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          ::xsd::cxx::tree::one< TypeType > type_;
          Image_file_nameOptional image_file_name_;
          Image_for_vote_receipt_file_nameOptional image_for_vote_receipt_file_name_;
          ::xsd::cxx::tree::one< Tally_positionType > tally_position_;
          Contest_code_refOptional contest_code_ref_;
          ::xsd::cxx::tree::one< CategoryType > category_;

          //@endcond
        };

        bool
        operator== (const Ballot_option&, const Ballot_option&);

        bool
        operator!= (const Ballot_option&, const Ballot_option&);


        /**
         * @brief Class corresponding to the %pad-position-group schema type.
         *
         * @nosubgrouping
         */
        class Pad_position_group: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name pad-position
           *
           * @brief Accessor and modifier functions for the %pad-position
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::PositiveInteger Pad_positionType;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< Pad_positionType > Pad_positionSequence;

          /**
           * @brief Element iterator type.
           */
          typedef Pad_positionSequence::iterator Pad_positionIterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef Pad_positionSequence::const_iterator Pad_positionConstIterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< Pad_positionType, char > Pad_positionTraits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const Pad_positionSequence&
          getPad_position () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          Pad_positionSequence&
          getPad_position ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          setPad_position (const Pad_positionSequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Pad_position_group ();

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Pad_position_group (const ::xercesc::DOMElement& e,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Pad_position_group (const Pad_position_group& x,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                              ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Pad_position_group*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Pad_position_group ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          Pad_positionSequence pad_position_;

          //@endcond
        };

        bool
        operator== (const Pad_position_group&, const Pad_position_group&);

        bool
        operator!= (const Pad_position_group&, const Pad_position_group&);


        /**
         * @brief Class corresponding to the %party schema type.
         *
         * @nosubgrouping
         */
        class Party: public ::Smartmatic::SAES::Voting::ElectionTypes::Type
        {
          public:
          /**
           * @name name
           *
           * @brief Accessor and modifier functions for the %name
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String NameType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< NameType > NameOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const NameOptional&
          getName () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          NameOptional&
          getName ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setName (const NameType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setName (const NameOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setName (::std::auto_ptr< NameType > p);

          //@}

          /**
           * @name abbreviation
           *
           * @brief Accessor and modifier functions for the %abbreviation
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String AbbreviationType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< AbbreviationType > AbbreviationOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< AbbreviationType, char > AbbreviationTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const AbbreviationOptional&
          getAbbreviation () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          AbbreviationOptional&
          getAbbreviation ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setAbbreviation (const AbbreviationType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setAbbreviation (const AbbreviationOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setAbbreviation (::std::auto_ptr< AbbreviationType > p);

          //@}

          /**
           * @name type
           *
           * @brief Accessor and modifier functions for the %type
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::Election::Type2 TypeType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const TypeOptional&
          getType () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          TypeOptional&
          getType ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setType (const TypeType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setType (const TypeOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setType (::std::auto_ptr< TypeType > p);

          //@}

          /**
           * @name code
           *
           * @brief Accessor and modifier functions for the %code
           * required attribute.
           *
           * Unique code.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String CodeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< CodeType, char > CodeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const CodeType&
          getCode () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          CodeType&
          getCode ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCode (const CodeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCode (::std::auto_ptr< CodeType > p);

          //@}

          /**
           * @name custom-code
           *
           * @brief Accessor and modifier functions for the %custom-code
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Custom_codeType;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Custom_codeType, char > Custom_codeTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const Custom_codeType&
          getCustom_code () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          Custom_codeType&
          getCustom_code ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setCustom_code (const Custom_codeType& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly
           * instead of making a copy.
           */
          void
          setCustom_code (::std::auto_ptr< Custom_codeType > p);

          //@}

          /**
           * @name image-file-name
           *
           * @brief Accessor and modifier functions for the %image-file-name
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::Smartmatic::SAES::Voting::ElectionTypes::String Image_file_nameType;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< Image_file_nameType > Image_file_nameOptional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< Image_file_nameType, char > Image_file_nameTraits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const Image_file_nameOptional&
          getImage_file_name () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          Image_file_nameOptional&
          getImage_file_name ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          setImage_file_name (const Image_file_nameType& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          setImage_file_name (const Image_file_nameOptional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          setImage_file_name (::std::auto_ptr< Image_file_nameType > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Default constructor.
           *
           * Note that this constructor leaves required elements and
           * attributes uninitialized.
           */
          Party ();

          /**
           * @brief Create an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Party (const CodeType&,
                 const Custom_codeType&);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Party (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Party (const Party& x,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Party*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          //@}

          /**
           * @brief Destructor.
           */
          virtual 
          ~Party ();

          // Implementation.
          //

          //@cond

          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags);

          protected:
          NameOptional name_;
          AbbreviationOptional abbreviation_;
          TypeOptional type_;
          ::xsd::cxx::tree::one< CodeType > code_;
          ::xsd::cxx::tree::one< Custom_codeType > custom_code_;
          Image_file_nameOptional image_file_name_;

          //@endcond
        };

        bool
        operator== (const Party&, const Party&);

        bool
        operator!= (const Party&, const Party&);


        /**
         * @brief Enumeration class corresponding to the %type1
         * schema type.
         */
        class Type1: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_SCREEN,
            ELECTION_PAD,
            ELECTION_VTV,
            ELECTION_PAD_WITH_SCREEN_STATUS
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Type1 ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Type1 (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Type1 (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Type1 (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Type1 (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type1 (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type1 (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type1 (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Type1 (const Type1& x,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Type1*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Type1&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Type1_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Type1_convert () const;

          public:
          static const char* const _xsd_Type1_literals_[4];
          static const Value _xsd_Type1_indexes_[4];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %category
         * schema type.
         */
        class Category: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_PRINCIPAL,
            ELECTION_STAND_IN,
            ELECTION_LIST
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Category ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Category (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Category (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Category (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Category (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Category (const ::xercesc::DOMElement& e,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Category (const ::xercesc::DOMAttr& a,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Category (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Category (const Category& x,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                    ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Category*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Category&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Category_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Category_convert () const;

          public:
          static const char* const _xsd_Category_literals_[3];
          static const Value _xsd_Category_indexes_[3];

          //@endcond
        };

        /**
         * @brief Enumeration class corresponding to the %type2
         * schema type.
         */
        class Type2: public ::Smartmatic::SAES::Voting::ElectionTypes::String
        {
          public:

          /**
           * @brief Underlying enum type.
           */
          enum Value
          {
            ELECTION_PARTY,
            ELECTION_I,
            ELECTION_GROUP,
            ELECTION_CFO,
            ELECTION_CITIZEN,
            ELECTION_DUMMY
          };

          /**
           * @brief Default constructor.
           *
           * Note that this constructor may leave the instance in an
           * invalid state.
           */
          Type2 ();

          /**
           * @brief Create an instance from the underlying enum value.
           *
           * @param v A enum value.
           */
          Type2 (Value v);

          /**
           * @brief Create an instance from a C string.
           *
           * @param v A string value.
           */
          Type2 (const char* v);

          /**
           * @brief Create an instance from a string.
           *
           * @param v A string value.
           */
          Type2 (const ::std::string& v);

          /**
           * @brief Create an instance from the base value.
           *
           * @param v A base value.
           */
          Type2 (const ::Smartmatic::SAES::Voting::ElectionTypes::String& v);

          /**
           * @brief Create an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type2 (const ::xercesc::DOMElement& e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type2 (const ::xercesc::DOMAttr& a,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Create an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A pointer to DOM element containing the string fragment.
           * @param f Flags to create the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Type2 (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the @c _clone function instead.
           */
          Type2 (const Type2& x,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                 ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0);

          /**
           * @brief Copy the instance polymorphically.
           *
           * @param f Flags to create the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of the instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Type2*
          _clone (::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                  ::Smartmatic::SAES::Voting::ElectionTypes::Container* c = 0) const;

          /**
           * @brief Assign the underlying enum value.
           *
           * @param v A enum value.
           * @return A refernce to the instance.
           */
          Type2&
          operator= (Value v);

          /**
           * @brief Implicit conversion operator to the underlying
           * enum value.
           *
           * @return A enum value.
           */
          virtual
          operator Value () const
          {
            return _xsd_Type2_convert ();
          }

          //@cond

          protected:
          Value
          _xsd_Type2_convert () const;

          public:
          static const char* const _xsd_Type2_literals_[6];
          static const Value _xsd_Type2_indexes_[6];

          //@endcond
        };
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        /**
         * @name Parsing functions for the %election document root.
         *
         * Contains all of the parameters that define a particular election
         * process.
         */
        //@{

        /**
         * @brief Parse a URI or a local file.
         *
         * @param uri A URI or a local file name.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::std::string& uri,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with an error handler.
         *
         * @param uri A URI or a local file name.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::std::string& uri,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a URI or a local file with a Xerces-C++ DOM error
         * handler.
         *
         * @param uri A URI or a local file name.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a standard input stream.
         *
         * @param is A standrad input stream.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a standard input stream with an error handler.
         *
         * @param is A standrad input stream.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a Xerces-C++ DOM error
         * handler.
         *
         * @param is A standrad input stream.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       const ::std::string& id,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and an
         * error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       const ::std::string& id,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a standard input stream with a resource id and a
         * Xerces-C++ DOM error handler.
         *
         * @param is A standrad input stream.
         * @param id A resource id.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * The resource id is used to identify the document being parsed in
         * diagnostics as well as to resolve relative paths.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source.
         *
         * @param is A Xerces-C++ input source.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function uses exceptions to report parsing errors.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::xercesc::InputSource& is,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with an error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh An error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::xercesc::InputSource& is,
                       ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
         * error handler.
         *
         * @param is A Xerces-C++ input source.
         * @param eh A Xerces-C++ DOM error handler.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function reports parsing errors by calling the error handler.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (const ::xercesc::DOMDocument& d,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        /**
         * @brief Parse a Xerces-C++ DOM document.
         *
         * @param d A pointer to the Xerces-C++ DOM document.
         * @param f Parsing flags.
         * @param p Parsing properties. 
         * @return A pointer to the root of the object model.
         *
         * This function is normally used together with the keep_dom and
         * own_dom parsing flags to assign ownership of the DOM document
         * to the object model.
         */
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Election >
        parseElection (::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0,
                       const ::Smartmatic::SAES::Voting::ElectionTypes::Properties& p = ::Smartmatic::SAES::Voting::ElectionTypes::Properties ());

        //@}
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        /**
         * @name Serialization functions for the %election document root.
         *
         * Contains all of the parameters that define a particular election
         * process.
         */
        //@{

        /**
         * @brief Serialize to a standard output stream.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeElection (::std::ostream& os,
                           const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with an error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeElection (::std::ostream& os,
                           const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& eh,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to a standard output stream with a Xerces-C++ DOM
         * error handler.
         *
         * @param os A standrad output stream.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeElection (::std::ostream& os,
                           const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function uses exceptions to report serialization errors.
         */
        void
        serializeElection (::xercesc::XMLFormatTarget& ft,
                           const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with an error
         * handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh An error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeElection (::xercesc::XMLFormatTarget& ft,
                           const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           ::Smartmatic::SAES::Voting::ElectionTypes::ErrorHandler& eh,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to a Xerces-C++ XML format target with a
         * Xerces-C++ DOM error handler.
         *
         * @param ft A Xerces-C++ XML format target.
         * @param x An object model to serialize.
         * @param eh A Xerces-C++ DOM error handler.
         * @param m A namespace information map.
         * @param e A character encoding to produce XML in.
         * @param f Serialization flags.
         *
         * This function reports serialization errors by calling the error
         * handler.
         */
        void
        serializeElection (::xercesc::XMLFormatTarget& ft,
                           const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to an existing Xerces-C++ DOM document.
         *
         * @param d A Xerces-C++ DOM document.
         * @param x An object model to serialize.
         * @param f Serialization flags.
         *
         * Note that it is your responsibility to create the DOM document
         * with the correct root element as well as set the necessary
         * namespace mapping attributes.
         */
        void
        serializeElection (::xercesc::DOMDocument& d,
                           const ::Smartmatic::SAES::Voting::Election::Election& x,
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        /**
         * @brief Serialize to a new Xerces-C++ DOM document.
         *
         * @param x An object model to serialize.
         * @param m A namespace information map.
         * @param f Serialization flags.
         * @return A pointer to the new Xerces-C++ DOM document.
         */
        ::Smartmatic::SAES::Voting::ElectionTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeElection (const ::Smartmatic::SAES::Voting::Election::Election& x, 
                           const ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap& m = ::Smartmatic::SAES::Voting::ElectionTypes::NamespaceInfomap (),
                           ::Smartmatic::SAES::Voting::ElectionTypes::Flags f = 0);

        //@}

        void
        operator<< (::xercesc::DOMElement&, const Ballot_form_area&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_form_identification_area&);

        void
        operator<< (::xercesc::DOMElement&, const Election&);

        void
        operator<< (::xercesc::DOMElement&, const Part&);

        void
        operator<< (::xercesc::DOMAttr&, const Part&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Part&);

        void
        operator<< (::xercesc::DOMElement&, const Ballots&);

        void
        operator<< (::xercesc::DOMElement&, const Xml_schemas_necessary&);

        void
        operator<< (::xercesc::DOMElement&, const Contest_classes&);

        void
        operator<< (::xercesc::DOMElement&, const Contest_groups&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_form_layouts&);

        void
        operator<< (::xercesc::DOMElement&, const Voting_time_out&);

        void
        operator<< (::xercesc::DOMAttr&, const Voting_time_out&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Voting_time_out&);

        void
        operator<< (::xercesc::DOMElement&, const Audio_voting_time_out&);

        void
        operator<< (::xercesc::DOMAttr&, const Audio_voting_time_out&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Audio_voting_time_out&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot&);

        void
        operator<< (::xercesc::DOMElement&, const Comparator&);

        void
        operator<< (::xercesc::DOMElement&, const Contest_class&);

        void
        operator<< (::xercesc::DOMElement&, const Contest_group&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_form_layout&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_cards&);

        void
        operator<< (::xercesc::DOMElement&, const Type&);

        void
        operator<< (::xercesc::DOMAttr&, const Type&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Type&);

        void
        operator<< (::xercesc::DOMElement&, const Unit&);

        void
        operator<< (::xercesc::DOMAttr&, const Unit&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Unit&);

        void
        operator<< (::xercesc::DOMElement&, const Election_mode&);

        void
        operator<< (::xercesc::DOMAttr&, const Election_mode&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Election_mode&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_card&);

        void
        operator<< (::xercesc::DOMElement&, const Contests&);

        void
        operator<< (::xercesc::DOMElement&, const Contest&);

        void
        operator<< (::xercesc::DOMElement&, const District&);

        void
        operator<< (::xercesc::DOMElement&, const Eligibles_options&);

        void
        operator<< (::xercesc::DOMElement&, const Display_info&);

        void
        operator<< (::xercesc::DOMElement&, const Regions&);

        void
        operator<< (::xercesc::DOMElement&, const Eligible_option&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_options_layout_kind&);

        void
        operator<< (::xercesc::DOMAttr&, const Ballot_options_layout_kind&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Ballot_options_layout_kind&);

        void
        operator<< (::xercesc::DOMElement&, const RegionTag&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_options&);

        void
        operator<< (::xercesc::DOMElement&, const Ballot_option&);

        void
        operator<< (::xercesc::DOMElement&, const Pad_position_group&);

        void
        operator<< (::xercesc::DOMElement&, const Party&);

        void
        operator<< (::xercesc::DOMElement&, const Type1&);

        void
        operator<< (::xercesc::DOMAttr&, const Type1&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Type1&);

        void
        operator<< (::xercesc::DOMElement&, const Category&);

        void
        operator<< (::xercesc::DOMAttr&, const Category&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Category&);

        void
        operator<< (::xercesc::DOMElement&, const Type2&);

        void
        operator<< (::xercesc::DOMAttr&, const Type2&);

        void
        operator<< (::Smartmatic::SAES::Voting::ElectionTypes::ListStream&,
                    const Type2&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___SRC_XSDTEMPLATES_ELECTION_SCHEMA_HXX
