// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "election-language-schema.hxx"

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        // Languages
        // 

        const Languages::LanguageSequence& Languages::
        getLanguage () const
        {
          return this->language_;
        }

        Languages::LanguageSequence& Languages::
        getLanguage ()
        {
          return this->language_;
        }

        void Languages::
        setLanguage (const LanguageSequence& s)
        {
          this->language_ = s;
        }


        // Language
        // 

        const Language::CodeType& Language::
        getCode () const
        {
          return this->code_.get ();
        }

        Language::CodeType& Language::
        getCode ()
        {
          return this->code_.get ();
        }

        void Language::
        setCode (const CodeType& x)
        {
          this->code_.set (x);
        }

        void Language::
        setCode (::std::auto_ptr< CodeType > x)
        {
          this->code_.set (x);
        }

        const Language::Custom_codeType& Language::
        getCustom_code () const
        {
          return this->custom_code_.get ();
        }

        Language::Custom_codeType& Language::
        getCustom_code ()
        {
          return this->custom_code_.get ();
        }

        void Language::
        setCustom_code (const Custom_codeType& x)
        {
          this->custom_code_.set (x);
        }

        void Language::
        setCustom_code (::std::auto_ptr< Custom_codeType > x)
        {
          this->custom_code_.set (x);
        }

        const Language::Name_keyType& Language::
        getName_key () const
        {
          return this->name_key_.get ();
        }

        Language::Name_keyType& Language::
        getName_key ()
        {
          return this->name_key_.get ();
        }

        void Language::
        setName_key (const Name_keyType& x)
        {
          this->name_key_.set (x);
        }

        void Language::
        setName_key (::std::auto_ptr< Name_keyType > x)
        {
          this->name_key_.set (x);
        }

        const Language::Is_defaultType& Language::
        getIs_default () const
        {
          return this->is_default_.get ();
        }

        Language::Is_defaultType& Language::
        getIs_default ()
        {
          return this->is_default_.get ();
        }

        void Language::
        setIs_default (const Is_defaultType& x)
        {
          this->is_default_.set (x);
        }

        const Language::AudioType& Language::
        getAudio () const
        {
          return this->audio_.get ();
        }

        Language::AudioType& Language::
        getAudio ()
        {
          return this->audio_.get ();
        }

        void Language::
        setAudio (const AudioType& x)
        {
          this->audio_.set (x);
        }

        const Language::PrecedenceType& Language::
        getPrecedence () const
        {
          return this->precedence_.get ();
        }

        Language::PrecedenceType& Language::
        getPrecedence ()
        {
          return this->precedence_.get ();
        }

        void Language::
        setPrecedence (const PrecedenceType& x)
        {
          this->precedence_.set (x);
        }

        const Language::MessageType& Language::
        getMessage () const
        {
          return this->message_.get ();
        }

        Language::MessageType& Language::
        getMessage ()
        {
          return this->message_.get ();
        }

        void Language::
        setMessage (const MessageType& x)
        {
          this->message_.set (x);
        }

        void Language::
        setMessage (::std::auto_ptr< MessageType > x)
        {
          this->message_.set (x);
        }

        const Language::LanguageType& Language::
        getLanguage () const
        {
          return this->language_.get ();
        }

        Language::LanguageType& Language::
        getLanguage ()
        {
          return this->language_.get ();
        }

        void Language::
        setLanguage (const LanguageType& x)
        {
          this->language_.set (x);
        }

        void Language::
        setLanguage (::std::auto_ptr< LanguageType > x)
        {
          this->language_.set (x);
        }

        const Language::CountryType& Language::
        getCountry () const
        {
          return this->country_.get ();
        }

        Language::CountryType& Language::
        getCountry ()
        {
          return this->country_.get ();
        }

        void Language::
        setCountry (const CountryType& x)
        {
          this->country_.set (x);
        }

        void Language::
        setCountry (::std::auto_ptr< CountryType > x)
        {
          this->country_.set (x);
        }

        const Language::KeyType& Language::
        getKey () const
        {
          return this->key_.get ();
        }

        Language::KeyType& Language::
        getKey ()
        {
          return this->key_.get ();
        }

        void Language::
        setKey (const KeyType& x)
        {
          this->key_.set (x);
        }

        void Language::
        setKey (::std::auto_ptr< KeyType > x)
        {
          this->key_.set (x);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        // Languages
        //

        Languages::
        Languages ()
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (),
          language_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this)
        {
        }

        Languages::
        Languages (const Languages& x,
                   ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                   ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (x, f, c),
          language_ (x.language_, f, this)
        {
        }

        Languages::
        Languages (const ::xercesc::DOMElement& e,
                   ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                   ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::base, c),
          language_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
            this->parse (p, f);
          }
        }

        void Languages::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          for (; p.more_elements (); p.next_element ())
          {
            const ::xercesc::DOMElement& i (p.cur_element ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            // language
            //
            if (n.name () == "language" && n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
            {
              ::std::auto_ptr< LanguageType > r (
                LanguageTraits::create (i, f, this));

              this->language_.push_back (r);
              continue;
            }

            break;
          }
        }

        Languages* Languages::
        _clone (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Container* c) const
        {
          return new class Languages (*this, f, c);
        }

        Languages::
        ~Languages ()
        {
        }

        bool
        operator== (const Languages& x, const Languages& y)
        {
          if (!(x.getLanguage () == y.getLanguage ()))
            return false;

          return true;
        }

        bool
        operator!= (const Languages& x, const Languages& y)
        {
          return !(x == y);
        }

        // Language
        //

        Language::
        Language ()
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (),
          code_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          custom_code_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          name_key_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          is_default_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          audio_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          precedence_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          message_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          language_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          country_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          key_ (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this)
        {
        }

        Language::
        Language (const CodeType& code,
                  const Custom_codeType& custom_code,
                  const Name_keyType& name_key,
                  const Is_defaultType& is_default,
                  const AudioType& audio,
                  const PrecedenceType& precedence,
                  const MessageType& message,
                  const LanguageType& language,
                  const CountryType& country,
                  const KeyType& key)
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (),
          code_ (code, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          custom_code_ (custom_code, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          name_key_ (name_key, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          is_default_ (is_default, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          audio_ (audio, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          precedence_ (precedence, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          message_ (message, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          language_ (language, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          country_ (country, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this),
          key_ (key, ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags (), this)
        {
        }

        Language::
        Language (const Language& x,
                  ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (x, f, c),
          code_ (x.code_, f, this),
          custom_code_ (x.custom_code_, f, this),
          name_key_ (x.name_key_, f, this),
          is_default_ (x.is_default_, f, this),
          audio_ (x.audio_, f, this),
          precedence_ (x.precedence_, f, this),
          message_ (x.message_, f, this),
          language_ (x.language_, f, this),
          country_ (x.country_, f, this),
          key_ (x.key_, f, this)
        {
        }

        Language::
        Language (const ::xercesc::DOMElement& e,
                  ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                  ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Container* c)
        : ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type (e, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::base, c),
          code_ (f, this),
          custom_code_ (f, this),
          name_key_ (f, this),
          is_default_ (f, this),
          audio_ (f, this),
          precedence_ (f, this),
          message_ (f, this),
          language_ (f, this),
          country_ (f, this),
          key_ (f, this)
        {
          if ((f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
            this->parse (p, f);
          }
        }

        void Language::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CodeType > r (
                CodeTraits::create (i, f, this));

              this->code_.set (r);
              continue;
            }

            if (n.name () == "custom-code" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Custom_codeType > r (
                Custom_codeTraits::create (i, f, this));

              this->custom_code_.set (r);
              continue;
            }

            if (n.name () == "name-key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< Name_keyType > r (
                Name_keyTraits::create (i, f, this));

              this->name_key_.set (r);
              continue;
            }

            if (n.name () == "is-default" && n.namespace_ ().empty ())
            {
              this->is_default_.set (Is_defaultTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "audio" && n.namespace_ ().empty ())
            {
              this->audio_.set (AudioTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "precedence" && n.namespace_ ().empty ())
            {
              this->precedence_.set (PrecedenceTraits::create (i, f, this));
              continue;
            }

            if (n.name () == "message" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< MessageType > r (
                MessageTraits::create (i, f, this));

              this->message_.set (r);
              continue;
            }

            if (n.name () == "language" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< LanguageType > r (
                LanguageTraits::create (i, f, this));

              this->language_.set (r);
              continue;
            }

            if (n.name () == "country" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< CountryType > r (
                CountryTraits::create (i, f, this));

              this->country_.set (r);
              continue;
            }

            if (n.name () == "key" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< KeyType > r (
                KeyTraits::create (i, f, this));

              this->key_.set (r);
              continue;
            }
          }

          if (!code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "code",
              "");
          }

          if (!custom_code_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "custom-code",
              "");
          }

          if (!name_key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "name-key",
              "");
          }

          if (!is_default_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "is-default",
              "");
          }

          if (!audio_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "audio",
              "");
          }

          if (!precedence_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "precedence",
              "");
          }

          if (!message_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "message",
              "");
          }

          if (!language_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "language",
              "");
          }

          if (!country_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "country",
              "");
          }

          if (!key_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "key",
              "");
          }
        }

        Language* Language::
        _clone (::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Container* c) const
        {
          return new class Language (*this, f, c);
        }

        Language::
        ~Language ()
        {
        }

        bool
        operator== (const Language& x, const Language& y)
        {
          if (!(x.getCode () == y.getCode ()))
            return false;

          if (!(x.getCustom_code () == y.getCustom_code ()))
            return false;

          if (!(x.getName_key () == y.getName_key ()))
            return false;

          if (!(x.getIs_default () == y.getIs_default ()))
            return false;

          if (!(x.getAudio () == y.getAudio ()))
            return false;

          if (!(x.getPrecedence () == y.getPrecedence ()))
            return false;

          if (!(x.getMessage () == y.getMessage ()))
            return false;

          if (!(x.getLanguage () == y.getLanguage ()))
            return false;

          if (!(x.getCountry () == y.getCountry ()))
            return false;

          if (!(x.getKey () == y.getKey ()))
            return false;

          return true;
        }

        bool
        operator!= (const Language& x, const Language& y)
        {
          return !(x == y);
        }
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (const ::std::string& u,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
            ::Smartmatic::SAES::Voting::Election::parseLanguages (
              d, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (const ::std::string& u,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) == 0);

          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
            ::Smartmatic::SAES::Voting::Election::parseLanguages (
              d, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              u, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
            ::Smartmatic::SAES::Voting::Election::parseLanguages (
              d, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::std::istream& is,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Election::parseLanguages (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::std::istream& is,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Election::parseLanguages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is);
          return ::Smartmatic::SAES::Voting::Election::parseLanguages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::std::istream& is,
                        const ::std::string& sid,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Election::parseLanguages (isrc, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::std::istream& is,
                        const ::std::string& sid,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0,
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) == 0);

          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Election::parseLanguages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
          return ::Smartmatic::SAES::Voting::Election::parseLanguages (isrc, h, f, p);
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::xercesc::InputSource& i,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::xsd::cxx::tree::error_handler< char > h;

          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
            ::Smartmatic::SAES::Voting::Election::parseLanguages (
              d, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::xercesc::InputSource& i,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::ErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
            ::Smartmatic::SAES::Voting::Election::parseLanguages (
              d, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::parse< char > (
              i, h, p, f));

          if (!d.get ())
            throw ::xsd::cxx::tree::parsing< char > ();

          ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
            ::Smartmatic::SAES::Voting::Election::parseLanguages (
              d, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

          return r;
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (const ::xercesc::DOMDocument& d,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties& p)
        {
          if (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom)
          {
            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
              static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
              ::Smartmatic::SAES::Voting::Election::parseLanguages (
                c, f | ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom, p));

            return r;
          }

          const ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "languages" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Election::Languages, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "languages",
            "http://www.smartmatic.com/Saes/Voting/Election");
        }

        ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages >
        parseLanguages (::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f,
                        const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Properties&)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > c (
            ((f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom) &&
             !(f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::own_dom))
            ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
            : 0);

          ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
          const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::keep_dom)
            doc.setUserData (::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::treeNodeKey,
                             (c.get () ? &c : &d),
                             0);

          if (n.name () == "languages" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
          {
            ::std::auto_ptr< ::Smartmatic::SAES::Voting::Election::Languages > r (
              ::xsd::cxx::tree::traits< ::Smartmatic::SAES::Voting::Election::Languages, char >::create (
                e, f, 0));
            return r;
          }

          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "languages",
            "http://www.smartmatic.com/Saes/Voting/Election");
        }
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Smartmatic
{
  namespace SAES
  {
    namespace Voting
    {
      namespace Election
      {
        void
        serializeLanguages (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeLanguages (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeLanguages (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::ErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::xsd::cxx::xml::auto_initializer i (
            (f & ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags::dont_initialize) == 0);

          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeLanguages (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeLanguages (::std::ostream& o,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeLanguages (s, m, f));
          ::xsd::cxx::xml::dom::ostream_format_target t (o);
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeLanguages (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeLanguages (s, m, f));

          ::xsd::cxx::tree::error_handler< char > h;

          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
          }
        }

        void
        serializeLanguages (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::ErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeLanguages (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeLanguages (::xercesc::XMLFormatTarget& t,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            const ::std::string& e,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::Smartmatic::SAES::Voting::Election::serializeLanguages (s, m, f));
          if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
          {
            throw ::xsd::cxx::tree::serialization< char > ();
          }
        }

        void
        serializeLanguages (::xercesc::DOMDocument& d,
                            const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags)
        {
          ::xercesc::DOMElement& e (*d.getDocumentElement ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (e));

          if (n.name () == "languages" &&
              n.namespace_ () == "http://www.smartmatic.com/Saes/Voting/Election")
          {
            e << s;
          }
          else
          {
            throw ::xsd::cxx::tree::unexpected_element < char > (
              n.name (),
              n.namespace_ (),
              "languages",
              "http://www.smartmatic.com/Saes/Voting/Election");
          }
        }

        ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument >
        serializeLanguages (const ::Smartmatic::SAES::Voting::Election::Languages& s,
                            const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::NamespaceInfomap& m,
                            ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Flags f)
        {
          ::Smartmatic::SAES::Voting::ElectionLanguageTypes::dom::auto_ptr< ::xercesc::DOMDocument > d (
            ::xsd::cxx::xml::dom::serialize< char > (
              "languages",
              "http://www.smartmatic.com/Saes/Voting/Election",
              m, f));

          ::Smartmatic::SAES::Voting::Election::serializeLanguages (*d, s, f);
          return d;
        }

        void
        operator<< (::xercesc::DOMElement& e, const Languages& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type& > (i);

          // language
          //
          for (Languages::LanguageConstIterator
               b (i.getLanguage ().begin ()), n (i.getLanguage ().end ());
               b != n; ++b)
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "language",
                "http://www.smartmatic.com/Saes/Voting/Election",
                e));

            s << *b;
          }
        }

        void
        operator<< (::xercesc::DOMElement& e, const Language& i)
        {
          e << static_cast< const ::Smartmatic::SAES::Voting::ElectionLanguageTypes::Type& > (i);

          // code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "code",
                e));

            a << i.getCode ();
          }

          // custom-code
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "custom-code",
                e));

            a << i.getCustom_code ();
          }

          // name-key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "name-key",
                e));

            a << i.getName_key ();
          }

          // is-default
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "is-default",
                e));

            a << i.getIs_default ();
          }

          // audio
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "audio",
                e));

            a << i.getAudio ();
          }

          // precedence
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "precedence",
                e));

            a << i.getPrecedence ();
          }

          // message
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "message",
                e));

            a << i.getMessage ();
          }

          // language
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "language",
                e));

            a << i.getLanguage ();
          }

          // country
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "country",
                e));

            a << i.getCountry ();
          }

          // key
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "key",
                e));

            a << i.getKey ();
          }
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

